// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_domain_service.proto
// DO NOT EDIT!!!

package attestation_domain_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetAttestationDomainRequest) GotenObjectExt() {}

func (o *GetAttestationDomainRequest) MakeFullFieldMask() *GetAttestationDomainRequest_FieldMask {
	return FullGetAttestationDomainRequest_FieldMask()
}

func (o *GetAttestationDomainRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAttestationDomainRequest_FieldMask()
}

func (o *GetAttestationDomainRequest) MakeDiffFieldMask(other *GetAttestationDomainRequest) *GetAttestationDomainRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAttestationDomainRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAttestationDomainRequest_FieldMask()
	}

	res := &GetAttestationDomainRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAttestationDomainRequest_FieldTerminalPath{selector: GetAttestationDomainRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAttestationDomainRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAttestationDomainRequest))
}

func (o *GetAttestationDomainRequest) Clone() *GetAttestationDomainRequest {
	if o == nil {
		return nil
	}
	result := &GetAttestationDomainRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &attestation_domain.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*attestation_domain.AttestationDomain_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAttestationDomainRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAttestationDomainRequest) Merge(source *GetAttestationDomainRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &attestation_domain.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAttestationDomainRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAttestationDomainRequest))
}

func (o *BatchGetAttestationDomainsRequest) GotenObjectExt() {}

func (o *BatchGetAttestationDomainsRequest) MakeFullFieldMask() *BatchGetAttestationDomainsRequest_FieldMask {
	return FullBatchGetAttestationDomainsRequest_FieldMask()
}

func (o *BatchGetAttestationDomainsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAttestationDomainsRequest_FieldMask()
}

func (o *BatchGetAttestationDomainsRequest) MakeDiffFieldMask(other *BatchGetAttestationDomainsRequest) *BatchGetAttestationDomainsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAttestationDomainsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAttestationDomainsRequest_FieldMask()
	}

	res := &BatchGetAttestationDomainsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAttestationDomainsRequest_FieldTerminalPath{selector: BatchGetAttestationDomainsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAttestationDomainsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAttestationDomainsRequest))
}

func (o *BatchGetAttestationDomainsRequest) Clone() *BatchGetAttestationDomainsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAttestationDomainsRequest{}
	result.Names = make([]*attestation_domain.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &attestation_domain.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*attestation_domain.AttestationDomain_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAttestationDomainsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAttestationDomainsRequest) Merge(source *BatchGetAttestationDomainsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *attestation_domain.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &attestation_domain.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAttestationDomainsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAttestationDomainsRequest))
}

func (o *BatchGetAttestationDomainsResponse) GotenObjectExt() {}

func (o *BatchGetAttestationDomainsResponse) MakeFullFieldMask() *BatchGetAttestationDomainsResponse_FieldMask {
	return FullBatchGetAttestationDomainsResponse_FieldMask()
}

func (o *BatchGetAttestationDomainsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAttestationDomainsResponse_FieldMask()
}

func (o *BatchGetAttestationDomainsResponse) MakeDiffFieldMask(other *BatchGetAttestationDomainsResponse) *BatchGetAttestationDomainsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAttestationDomainsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAttestationDomainsResponse_FieldMask()
	}

	res := &BatchGetAttestationDomainsResponse_FieldMask{}

	if len(o.GetAttestationDomains()) == len(other.GetAttestationDomains()) {
		for i, lValue := range o.GetAttestationDomains() {
			rValue := other.GetAttestationDomains()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorAttestationDomains})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAttestationDomainsResponse_FieldTerminalPath{selector: BatchGetAttestationDomainsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAttestationDomainsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAttestationDomainsResponse))
}

func (o *BatchGetAttestationDomainsResponse) Clone() *BatchGetAttestationDomainsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAttestationDomainsResponse{}
	result.AttestationDomains = make([]*attestation_domain.AttestationDomain, len(o.AttestationDomains))
	for i, sourceValue := range o.AttestationDomains {
		result.AttestationDomains[i] = sourceValue.Clone()
	}
	result.Missing = make([]*attestation_domain.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &attestation_domain.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAttestationDomainsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAttestationDomainsResponse) Merge(source *BatchGetAttestationDomainsResponse) {
	for _, sourceValue := range source.GetAttestationDomains() {
		exists := false
		for _, currentValue := range o.AttestationDomains {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *attestation_domain.AttestationDomain
			if sourceValue != nil {
				newDstElement = new(attestation_domain.AttestationDomain)
				newDstElement.Merge(sourceValue)
			}
			o.AttestationDomains = append(o.AttestationDomains, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *attestation_domain.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &attestation_domain.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAttestationDomainsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAttestationDomainsResponse))
}

func (o *ListAttestationDomainsRequest) GotenObjectExt() {}

func (o *ListAttestationDomainsRequest) MakeFullFieldMask() *ListAttestationDomainsRequest_FieldMask {
	return FullListAttestationDomainsRequest_FieldMask()
}

func (o *ListAttestationDomainsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAttestationDomainsRequest_FieldMask()
}

func (o *ListAttestationDomainsRequest) MakeDiffFieldMask(other *ListAttestationDomainsRequest) *ListAttestationDomainsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAttestationDomainsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAttestationDomainsRequest_FieldMask()
	}

	res := &ListAttestationDomainsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListAttestationDomainsRequest_FieldTerminalPath{selector: ListAttestationDomainsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListAttestationDomainsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAttestationDomainsRequest))
}

func (o *ListAttestationDomainsRequest) Clone() *ListAttestationDomainsRequest {
	if o == nil {
		return nil
	}
	result := &ListAttestationDomainsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &attestation_domain.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &attestation_domain.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &attestation_domain.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &attestation_domain.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*attestation_domain.AttestationDomain_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListAttestationDomainsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAttestationDomainsRequest) Merge(source *ListAttestationDomainsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &attestation_domain.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &attestation_domain.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &attestation_domain.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &attestation_domain.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListAttestationDomainsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAttestationDomainsRequest))
}

func (o *ListAttestationDomainsResponse) GotenObjectExt() {}

func (o *ListAttestationDomainsResponse) MakeFullFieldMask() *ListAttestationDomainsResponse_FieldMask {
	return FullListAttestationDomainsResponse_FieldMask()
}

func (o *ListAttestationDomainsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAttestationDomainsResponse_FieldMask()
}

func (o *ListAttestationDomainsResponse) MakeDiffFieldMask(other *ListAttestationDomainsResponse) *ListAttestationDomainsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAttestationDomainsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAttestationDomainsResponse_FieldMask()
	}

	res := &ListAttestationDomainsResponse_FieldMask{}

	if len(o.GetAttestationDomains()) == len(other.GetAttestationDomains()) {
		for i, lValue := range o.GetAttestationDomains() {
			rValue := other.GetAttestationDomains()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorAttestationDomains})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListAttestationDomainsResponse_FieldTerminalPath{selector: ListAttestationDomainsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListAttestationDomainsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAttestationDomainsResponse))
}

func (o *ListAttestationDomainsResponse) Clone() *ListAttestationDomainsResponse {
	if o == nil {
		return nil
	}
	result := &ListAttestationDomainsResponse{}
	result.AttestationDomains = make([]*attestation_domain.AttestationDomain, len(o.AttestationDomains))
	for i, sourceValue := range o.AttestationDomains {
		result.AttestationDomains[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &attestation_domain.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &attestation_domain.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListAttestationDomainsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAttestationDomainsResponse) Merge(source *ListAttestationDomainsResponse) {
	for _, sourceValue := range source.GetAttestationDomains() {
		exists := false
		for _, currentValue := range o.AttestationDomains {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *attestation_domain.AttestationDomain
			if sourceValue != nil {
				newDstElement = new(attestation_domain.AttestationDomain)
				newDstElement.Merge(sourceValue)
			}
			o.AttestationDomains = append(o.AttestationDomains, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &attestation_domain.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &attestation_domain.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListAttestationDomainsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAttestationDomainsResponse))
}

func (o *WatchAttestationDomainRequest) GotenObjectExt() {}

func (o *WatchAttestationDomainRequest) MakeFullFieldMask() *WatchAttestationDomainRequest_FieldMask {
	return FullWatchAttestationDomainRequest_FieldMask()
}

func (o *WatchAttestationDomainRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAttestationDomainRequest_FieldMask()
}

func (o *WatchAttestationDomainRequest) MakeDiffFieldMask(other *WatchAttestationDomainRequest) *WatchAttestationDomainRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAttestationDomainRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAttestationDomainRequest_FieldMask()
	}

	res := &WatchAttestationDomainRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAttestationDomainRequest_FieldTerminalPath{selector: WatchAttestationDomainRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAttestationDomainRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAttestationDomainRequest))
}

func (o *WatchAttestationDomainRequest) Clone() *WatchAttestationDomainRequest {
	if o == nil {
		return nil
	}
	result := &WatchAttestationDomainRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &attestation_domain.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*attestation_domain.AttestationDomain_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAttestationDomainRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAttestationDomainRequest) Merge(source *WatchAttestationDomainRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &attestation_domain.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAttestationDomainRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAttestationDomainRequest))
}

func (o *WatchAttestationDomainResponse) GotenObjectExt() {}

func (o *WatchAttestationDomainResponse) MakeFullFieldMask() *WatchAttestationDomainResponse_FieldMask {
	return FullWatchAttestationDomainResponse_FieldMask()
}

func (o *WatchAttestationDomainResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAttestationDomainResponse_FieldMask()
}

func (o *WatchAttestationDomainResponse) MakeDiffFieldMask(other *WatchAttestationDomainResponse) *WatchAttestationDomainResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAttestationDomainResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAttestationDomainResponse_FieldMask()
	}

	res := &WatchAttestationDomainResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAttestationDomainResponse_FieldTerminalPath{selector: WatchAttestationDomainResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAttestationDomainResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAttestationDomainResponse))
}

func (o *WatchAttestationDomainResponse) Clone() *WatchAttestationDomainResponse {
	if o == nil {
		return nil
	}
	result := &WatchAttestationDomainResponse{}
	result.Change = proto.Clone(o.Change).(*attestation_domain.AttestationDomainChange)
	return result
}

func (o *WatchAttestationDomainResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAttestationDomainResponse) Merge(source *WatchAttestationDomainResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(attestation_domain.AttestationDomainChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAttestationDomainResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAttestationDomainResponse))
}

func (o *WatchAttestationDomainsRequest) GotenObjectExt() {}

func (o *WatchAttestationDomainsRequest) MakeFullFieldMask() *WatchAttestationDomainsRequest_FieldMask {
	return FullWatchAttestationDomainsRequest_FieldMask()
}

func (o *WatchAttestationDomainsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAttestationDomainsRequest_FieldMask()
}

func (o *WatchAttestationDomainsRequest) MakeDiffFieldMask(other *WatchAttestationDomainsRequest) *WatchAttestationDomainsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAttestationDomainsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAttestationDomainsRequest_FieldMask()
	}

	res := &WatchAttestationDomainsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsRequest_FieldTerminalPath{selector: WatchAttestationDomainsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAttestationDomainsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAttestationDomainsRequest))
}

func (o *WatchAttestationDomainsRequest) Clone() *WatchAttestationDomainsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAttestationDomainsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &attestation_domain.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &attestation_domain.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &attestation_domain.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &attestation_domain.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*attestation_domain.AttestationDomain_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAttestationDomainsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAttestationDomainsRequest) Merge(source *WatchAttestationDomainsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &attestation_domain.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &attestation_domain.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &attestation_domain.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &attestation_domain.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAttestationDomainsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAttestationDomainsRequest))
}

func (o *WatchAttestationDomainsResponse) GotenObjectExt() {}

func (o *WatchAttestationDomainsResponse) MakeFullFieldMask() *WatchAttestationDomainsResponse_FieldMask {
	return FullWatchAttestationDomainsResponse_FieldMask()
}

func (o *WatchAttestationDomainsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAttestationDomainsResponse_FieldMask()
}

func (o *WatchAttestationDomainsResponse) MakeDiffFieldMask(other *WatchAttestationDomainsResponse) *WatchAttestationDomainsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAttestationDomainsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAttestationDomainsResponse_FieldMask()
	}

	res := &WatchAttestationDomainsResponse_FieldMask{}

	if len(o.GetAttestationDomainChanges()) == len(other.GetAttestationDomainChanges()) {
		for i, lValue := range o.GetAttestationDomainChanges() {
			rValue := other.GetAttestationDomainChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorAttestationDomainChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldSubPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponse_FieldTerminalPath{selector: WatchAttestationDomainsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAttestationDomainsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAttestationDomainsResponse))
}

func (o *WatchAttestationDomainsResponse) Clone() *WatchAttestationDomainsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAttestationDomainsResponse{}
	result.AttestationDomainChanges = make([]*attestation_domain.AttestationDomainChange, len(o.AttestationDomainChanges))
	for i, sourceValue := range o.AttestationDomainChanges {
		result.AttestationDomainChanges[i] = proto.Clone(sourceValue).(*attestation_domain.AttestationDomainChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAttestationDomainsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAttestationDomainsResponse) Merge(source *WatchAttestationDomainsResponse) {
	for _, sourceValue := range source.GetAttestationDomainChanges() {
		exists := false
		for _, currentValue := range o.AttestationDomainChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *attestation_domain.AttestationDomainChange
			if sourceValue != nil {
				newDstElement = new(attestation_domain.AttestationDomainChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AttestationDomainChanges = append(o.AttestationDomainChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAttestationDomainsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAttestationDomainsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAttestationDomainsResponse))
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAttestationDomainsResponse_PageTokenChange) MakeFullFieldMask() *WatchAttestationDomainsResponse_PageTokenChange_FieldMask {
	return FullWatchAttestationDomainsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAttestationDomainsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAttestationDomainsResponse_PageTokenChange) *WatchAttestationDomainsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAttestationDomainsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAttestationDomainsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath{selector: WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAttestationDomainsResponsePageTokenChange_FieldTerminalPath{selector: WatchAttestationDomainsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAttestationDomainsResponse_PageTokenChange))
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) Clone() *WatchAttestationDomainsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAttestationDomainsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &attestation_domain.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &attestation_domain.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) Merge(source *WatchAttestationDomainsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &attestation_domain.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &attestation_domain.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAttestationDomainsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAttestationDomainsResponse_PageTokenChange))
}

func (o *CreateAttestationDomainRequest) GotenObjectExt() {}

func (o *CreateAttestationDomainRequest) MakeFullFieldMask() *CreateAttestationDomainRequest_FieldMask {
	return FullCreateAttestationDomainRequest_FieldMask()
}

func (o *CreateAttestationDomainRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAttestationDomainRequest_FieldMask()
}

func (o *CreateAttestationDomainRequest) MakeDiffFieldMask(other *CreateAttestationDomainRequest) *CreateAttestationDomainRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAttestationDomainRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAttestationDomainRequest_FieldMask()
	}

	res := &CreateAttestationDomainRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAttestationDomainRequest_FieldTerminalPath{selector: CreateAttestationDomainRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetAttestationDomain().MakeDiffFieldMask(other.GetAttestationDomain())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAttestationDomainRequest_FieldTerminalPath{selector: CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAttestationDomainRequest_FieldSubPath{selector: CreateAttestationDomainRequest_FieldPathSelectorAttestationDomain, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAttestationDomainRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAttestationDomainRequest))
}

func (o *CreateAttestationDomainRequest) Clone() *CreateAttestationDomainRequest {
	if o == nil {
		return nil
	}
	result := &CreateAttestationDomainRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &attestation_domain.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.AttestationDomain = o.AttestationDomain.Clone()
	return result
}

func (o *CreateAttestationDomainRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAttestationDomainRequest) Merge(source *CreateAttestationDomainRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &attestation_domain.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetAttestationDomain() != nil {
		if o.AttestationDomain == nil {
			o.AttestationDomain = new(attestation_domain.AttestationDomain)
		}
		o.AttestationDomain.Merge(source.GetAttestationDomain())
	}
}

func (o *CreateAttestationDomainRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAttestationDomainRequest))
}

func (o *UpdateAttestationDomainRequest) GotenObjectExt() {}

func (o *UpdateAttestationDomainRequest) MakeFullFieldMask() *UpdateAttestationDomainRequest_FieldMask {
	return FullUpdateAttestationDomainRequest_FieldMask()
}

func (o *UpdateAttestationDomainRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAttestationDomainRequest_FieldMask()
}

func (o *UpdateAttestationDomainRequest) MakeDiffFieldMask(other *UpdateAttestationDomainRequest) *UpdateAttestationDomainRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAttestationDomainRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAttestationDomainRequest_FieldMask()
	}

	res := &UpdateAttestationDomainRequest_FieldMask{}
	{
		subMask := o.GetAttestationDomain().MakeDiffFieldMask(other.GetAttestationDomain())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorAttestationDomain, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldTerminalPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAttestationDomainRequest_FieldSubPath{selector: UpdateAttestationDomainRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAttestationDomainRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAttestationDomainRequest))
}

func (o *UpdateAttestationDomainRequest) Clone() *UpdateAttestationDomainRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAttestationDomainRequest{}
	result.AttestationDomain = o.AttestationDomain.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*attestation_domain.AttestationDomain_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAttestationDomainRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAttestationDomainRequest) Merge(source *UpdateAttestationDomainRequest) {
	if source.GetAttestationDomain() != nil {
		if o.AttestationDomain == nil {
			o.AttestationDomain = new(attestation_domain.AttestationDomain)
		}
		o.AttestationDomain.Merge(source.GetAttestationDomain())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAttestationDomainRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAttestationDomainRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAttestationDomainRequest))
}

func (o *UpdateAttestationDomainRequest_CAS) GotenObjectExt() {}

func (o *UpdateAttestationDomainRequest_CAS) MakeFullFieldMask() *UpdateAttestationDomainRequest_CAS_FieldMask {
	return FullUpdateAttestationDomainRequest_CAS_FieldMask()
}

func (o *UpdateAttestationDomainRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAttestationDomainRequest_CAS_FieldMask()
}

func (o *UpdateAttestationDomainRequest_CAS) MakeDiffFieldMask(other *UpdateAttestationDomainRequest_CAS) *UpdateAttestationDomainRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAttestationDomainRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAttestationDomainRequest_CAS_FieldMask()
	}

	res := &UpdateAttestationDomainRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAttestationDomainRequestCAS_FieldSubPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAttestationDomainRequestCAS_FieldTerminalPath{selector: UpdateAttestationDomainRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAttestationDomainRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAttestationDomainRequest_CAS))
}

func (o *UpdateAttestationDomainRequest_CAS) Clone() *UpdateAttestationDomainRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAttestationDomainRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*attestation_domain.AttestationDomain_FieldMask)
	return result
}

func (o *UpdateAttestationDomainRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAttestationDomainRequest_CAS) Merge(source *UpdateAttestationDomainRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(attestation_domain.AttestationDomain)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(attestation_domain.AttestationDomain_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAttestationDomainRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAttestationDomainRequest_CAS))
}

func (o *DeleteAttestationDomainRequest) GotenObjectExt() {}

func (o *DeleteAttestationDomainRequest) MakeFullFieldMask() *DeleteAttestationDomainRequest_FieldMask {
	return FullDeleteAttestationDomainRequest_FieldMask()
}

func (o *DeleteAttestationDomainRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAttestationDomainRequest_FieldMask()
}

func (o *DeleteAttestationDomainRequest) MakeDiffFieldMask(other *DeleteAttestationDomainRequest) *DeleteAttestationDomainRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAttestationDomainRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAttestationDomainRequest_FieldMask()
	}

	res := &DeleteAttestationDomainRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAttestationDomainRequest_FieldTerminalPath{selector: DeleteAttestationDomainRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAttestationDomainRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAttestationDomainRequest))
}

func (o *DeleteAttestationDomainRequest) Clone() *DeleteAttestationDomainRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAttestationDomainRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &attestation_domain.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAttestationDomainRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAttestationDomainRequest) Merge(source *DeleteAttestationDomainRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &attestation_domain.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAttestationDomainRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAttestationDomainRequest))
}
