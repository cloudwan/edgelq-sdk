// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_service.proto
// DO NOT EDIT!!!

package organization_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetOrganizationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetOrganizationRequest_FieldPathSelector
	Get(source *GetOrganizationRequest) []interface{}
	GetSingle(source *GetOrganizationRequest) (interface{}, bool)
	ClearValue(item *GetOrganizationRequest)

	// Those methods build corresponding GetOrganizationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetOrganizationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetOrganizationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetOrganizationRequest_FieldPathArrayItemValue
}

type GetOrganizationRequest_FieldPathSelector int32

const (
	GetOrganizationRequest_FieldPathSelectorName      GetOrganizationRequest_FieldPathSelector = 0
	GetOrganizationRequest_FieldPathSelectorFieldMask GetOrganizationRequest_FieldPathSelector = 1
	GetOrganizationRequest_FieldPathSelectorView      GetOrganizationRequest_FieldPathSelector = 2
)

func (s GetOrganizationRequest_FieldPathSelector) String() string {
	switch s {
	case GetOrganizationRequest_FieldPathSelectorName:
		return "name"
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetOrganizationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", s))
	}
}

func BuildGetOrganizationRequest_FieldPath(fp gotenobject.RawFieldPath) (GetOrganizationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetOrganizationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetOrganizationRequest_FieldTerminalPath{selector: GetOrganizationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetOrganizationRequest_FieldTerminalPath{selector: GetOrganizationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetOrganizationRequest_FieldTerminalPath{selector: GetOrganizationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetOrganizationRequest", fp)
}

func ParseGetOrganizationRequest_FieldPath(rawField string) (GetOrganizationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetOrganizationRequest_FieldPath(fp)
}

func MustParseGetOrganizationRequest_FieldPath(rawField string) GetOrganizationRequest_FieldPath {
	fp, err := ParseGetOrganizationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetOrganizationRequest_FieldTerminalPath struct {
	selector GetOrganizationRequest_FieldPathSelector
}

var _ GetOrganizationRequest_FieldPath = (*GetOrganizationRequest_FieldTerminalPath)(nil)

func (fp *GetOrganizationRequest_FieldTerminalPath) Selector() GetOrganizationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetOrganizationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetOrganizationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetOrganizationRequest
func (fp *GetOrganizationRequest_FieldTerminalPath) Get(source *GetOrganizationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetOrganizationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetOrganizationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetOrganizationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetOrganizationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetOrganizationRequest))
}

// GetSingle returns value pointed by specific field of from source GetOrganizationRequest
func (fp *GetOrganizationRequest_FieldTerminalPath) GetSingle(source *GetOrganizationRequest) (interface{}, bool) {
	switch fp.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetOrganizationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetOrganizationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		return (*organization.Reference)(nil)
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	case GetOrganizationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationRequest_FieldTerminalPath) ClearValue(item *GetOrganizationRequest) {
	if item != nil {
		switch fp.selector {
		case GetOrganizationRequest_FieldPathSelectorName:
			item.Name = nil
		case GetOrganizationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetOrganizationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
		}
	}
}

func (fp *GetOrganizationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetOrganizationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetOrganizationRequest_FieldPathSelectorName ||
		fp.selector == GetOrganizationRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetOrganizationRequest_FieldPathSelectorView
}

func (fp *GetOrganizationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetOrganizationRequest_FieldTerminalPath) WithIValue(value interface{}) GetOrganizationRequest_FieldPathValue {
	switch fp.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		return &GetOrganizationRequest_FieldTerminalPathValue{GetOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Reference)}
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		return &GetOrganizationRequest_FieldTerminalPathValue{GetOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	case GetOrganizationRequest_FieldPathSelectorView:
		return &GetOrganizationRequest_FieldTerminalPathValue{GetOrganizationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetOrganizationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetOrganizationRequest_FieldPathArrayOfValues {
	fpaov := &GetOrganizationRequest_FieldTerminalPathArrayOfValues{GetOrganizationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		return &GetOrganizationRequest_FieldTerminalPathArrayOfValues{GetOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Reference)}
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		return &GetOrganizationRequest_FieldTerminalPathArrayOfValues{GetOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	case GetOrganizationRequest_FieldPathSelectorView:
		return &GetOrganizationRequest_FieldTerminalPathArrayOfValues{GetOrganizationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetOrganizationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetOrganizationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetOrganizationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fp.selector))
	}
}

func (fp *GetOrganizationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetOrganizationRequest_FieldPathValue allows storing values for GetOrganizationRequest fields according to their type
type GetOrganizationRequest_FieldPathValue interface {
	GetOrganizationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetOrganizationRequest)
	CompareWith(*GetOrganizationRequest) (cmp int, comparable bool)
}

func ParseGetOrganizationRequest_FieldPathValue(pathStr, valueStr string) (GetOrganizationRequest_FieldPathValue, error) {
	fp, err := ParseGetOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOrganizationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetOrganizationRequest_FieldPathValue), nil
}

func MustParseGetOrganizationRequest_FieldPathValue(pathStr, valueStr string) GetOrganizationRequest_FieldPathValue {
	fpv, err := ParseGetOrganizationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetOrganizationRequest_FieldTerminalPathValue struct {
	GetOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ GetOrganizationRequest_FieldPathValue = (*GetOrganizationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetOrganizationRequest' as interface{}
func (fpv *GetOrganizationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetOrganizationRequest_FieldTerminalPathValue) AsNameValue() (*organization.Reference, bool) {
	res, ok := fpv.value.(*organization.Reference)
	return res, ok
}
func (fpv *GetOrganizationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}
func (fpv *GetOrganizationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetOrganizationRequest
func (fpv *GetOrganizationRequest_FieldTerminalPathValue) SetTo(target **GetOrganizationRequest) {
	if *target == nil {
		*target = new(GetOrganizationRequest)
	}
	switch fpv.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*organization.Reference)
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	case GetOrganizationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *GetOrganizationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetOrganizationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetOrganizationRequest_FieldTerminalPathValue' with the value under path in 'GetOrganizationRequest'.
func (fpv *GetOrganizationRequest_FieldTerminalPathValue) CompareWith(source *GetOrganizationRequest) (int, bool) {
	switch fpv.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*organization.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetOrganizationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *GetOrganizationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetOrganizationRequest))
}

// GetOrganizationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetOrganizationRequest according to their type
// Present only for array (repeated) types.
type GetOrganizationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetOrganizationRequest_FieldPath
	ContainsValue(*GetOrganizationRequest) bool
}

// ParseGetOrganizationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetOrganizationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOrganizationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetOrganizationRequest_FieldPathArrayItemValue), nil
}

func MustParseGetOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetOrganizationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetOrganizationRequest_FieldTerminalPathArrayItemValue struct {
	GetOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ GetOrganizationRequest_FieldPathArrayItemValue = (*GetOrganizationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetOrganizationRequest as interface{}
func (fpaiv *GetOrganizationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetOrganizationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetOrganizationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetOrganizationRequest'
func (fpaiv *GetOrganizationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetOrganizationRequest) bool {
	slice := fpaiv.GetOrganizationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetOrganizationRequest_FieldPathArrayOfValues allows storing slice of values for GetOrganizationRequest fields according to their type
type GetOrganizationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetOrganizationRequest_FieldPath
}

func ParseGetOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetOrganizationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOrganizationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetOrganizationRequest_FieldPathArrayOfValues), nil
}

func MustParseGetOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetOrganizationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetOrganizationRequest_FieldTerminalPathArrayOfValues struct {
	GetOrganizationRequest_FieldTerminalPath
	values interface{}
}

var _ GetOrganizationRequest_FieldPathArrayOfValues = (*GetOrganizationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetOrganizationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetOrganizationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*organization.Reference) {
			values = append(values, v)
		}
	case GetOrganizationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	case GetOrganizationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetOrganizationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*organization.Reference, bool) {
	res, ok := fpaov.values.([]*organization.Reference)
	return res, ok
}
func (fpaov *GetOrganizationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}
func (fpaov *GetOrganizationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOrganizationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOrganizationsRequest_FieldPathSelector
	Get(source *BatchGetOrganizationsRequest) []interface{}
	GetSingle(source *BatchGetOrganizationsRequest) (interface{}, bool)
	ClearValue(item *BatchGetOrganizationsRequest)

	// Those methods build corresponding BatchGetOrganizationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOrganizationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOrganizationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOrganizationsRequest_FieldPathArrayItemValue
}

type BatchGetOrganizationsRequest_FieldPathSelector int32

const (
	BatchGetOrganizationsRequest_FieldPathSelectorNames     BatchGetOrganizationsRequest_FieldPathSelector = 0
	BatchGetOrganizationsRequest_FieldPathSelectorFieldMask BatchGetOrganizationsRequest_FieldPathSelector = 1
	BatchGetOrganizationsRequest_FieldPathSelectorView      BatchGetOrganizationsRequest_FieldPathSelector = 2
)

func (s BatchGetOrganizationsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", s))
	}
}

func BuildBatchGetOrganizationsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOrganizationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOrganizationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOrganizationsRequest", fp)
}

func ParseBatchGetOrganizationsRequest_FieldPath(rawField string) (BatchGetOrganizationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOrganizationsRequest_FieldPath(fp)
}

func MustParseBatchGetOrganizationsRequest_FieldPath(rawField string) BatchGetOrganizationsRequest_FieldPath {
	fp, err := ParseBatchGetOrganizationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOrganizationsRequest_FieldTerminalPath struct {
	selector BatchGetOrganizationsRequest_FieldPathSelector
}

var _ BatchGetOrganizationsRequest_FieldPath = (*BatchGetOrganizationsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) Selector() BatchGetOrganizationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOrganizationsRequest
func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) Get(source *BatchGetOrganizationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOrganizationsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetOrganizationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOrganizationsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetOrganizationsRequest
func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) GetSingle(source *BatchGetOrganizationsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOrganizationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		return ([]*organization.Reference)(nil)
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) ClearValue(item *BatchGetOrganizationsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetOrganizationsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetOrganizationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOrganizationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOrganizationsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetOrganizationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetOrganizationsRequest_FieldPathSelectorView
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetOrganizationsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		return &BatchGetOrganizationsRequest_FieldTerminalPathValue{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, value: value.([]*organization.Reference)}
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetOrganizationsRequest_FieldTerminalPathValue{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		return &BatchGetOrganizationsRequest_FieldTerminalPathValue{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOrganizationsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		return &BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, values: values.([][]*organization.Reference)}
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		return &BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOrganizationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		return &BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue{BatchGetOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetOrganizationsRequest_FieldPathValue allows storing values for BatchGetOrganizationsRequest fields according to their type
type BatchGetOrganizationsRequest_FieldPathValue interface {
	BatchGetOrganizationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOrganizationsRequest)
	CompareWith(*BatchGetOrganizationsRequest) (cmp int, comparable bool)
}

func ParseBatchGetOrganizationsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetOrganizationsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOrganizationsRequest_FieldPathValue), nil
}

func MustParseBatchGetOrganizationsRequest_FieldPathValue(pathStr, valueStr string) BatchGetOrganizationsRequest_FieldPathValue {
	fpv, err := ParseBatchGetOrganizationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOrganizationsRequest_FieldTerminalPathValue struct {
	BatchGetOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationsRequest_FieldPathValue = (*BatchGetOrganizationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOrganizationsRequest' as interface{}
func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) AsNamesValue() ([]*organization.Reference, bool) {
	res, ok := fpv.value.([]*organization.Reference)
	return res, ok
}
func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}
func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOrganizationsRequest
func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) SetTo(target **BatchGetOrganizationsRequest) {
	if *target == nil {
		*target = new(BatchGetOrganizationsRequest)
	}
	switch fpv.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*organization.Reference)
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOrganizationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOrganizationsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetOrganizationsRequest'.
func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetOrganizationsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOrganizationsRequest))
}

// BatchGetOrganizationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOrganizationsRequest according to their type
// Present only for array (repeated) types.
type BatchGetOrganizationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOrganizationsRequest_FieldPath
	ContainsValue(*BatchGetOrganizationsRequest) bool
}

// ParseBatchGetOrganizationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOrganizationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOrganizationsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOrganizationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationsRequest_FieldPathArrayItemValue = (*BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOrganizationsRequest as interface{}
func (fpaiv *BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*organization.Reference, bool) {
	res, ok := fpaiv.value.(*organization.Reference)
	return res, ok
}

func (fpaiv *BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOrganizationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOrganizationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOrganizationsRequest'
func (fpaiv *BatchGetOrganizationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOrganizationsRequest) bool {
	slice := fpaiv.BatchGetOrganizationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetOrganizationsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetOrganizationsRequest fields according to their type
type BatchGetOrganizationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOrganizationsRequest_FieldPath
}

func ParseBatchGetOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOrganizationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOrganizationsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOrganizationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetOrganizationsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetOrganizationsRequest_FieldPathArrayOfValues = (*BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOrganizationsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*organization.Reference) {
			values = append(values, v)
		}
	case BatchGetOrganizationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	case BatchGetOrganizationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*organization.Reference, bool) {
	res, ok := fpaov.values.([][]*organization.Reference)
	return res, ok
}
func (fpaov *BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}
func (fpaov *BatchGetOrganizationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOrganizationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOrganizationsResponse_FieldPathSelector
	Get(source *BatchGetOrganizationsResponse) []interface{}
	GetSingle(source *BatchGetOrganizationsResponse) (interface{}, bool)
	ClearValue(item *BatchGetOrganizationsResponse)

	// Those methods build corresponding BatchGetOrganizationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOrganizationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOrganizationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOrganizationsResponse_FieldPathArrayItemValue
}

type BatchGetOrganizationsResponse_FieldPathSelector int32

const (
	BatchGetOrganizationsResponse_FieldPathSelectorOrganizations BatchGetOrganizationsResponse_FieldPathSelector = 0
	BatchGetOrganizationsResponse_FieldPathSelectorMissing       BatchGetOrganizationsResponse_FieldPathSelector = 1
)

func (s BatchGetOrganizationsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return "organizations"
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", s))
	}
}

func BuildBatchGetOrganizationsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOrganizationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOrganizationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organizations":
			return &BatchGetOrganizationsResponse_FieldTerminalPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorOrganizations}, nil
		case "missing":
			return &BatchGetOrganizationsResponse_FieldTerminalPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "organizations":
			if subpath, err := organization.BuildOrganization_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetOrganizationsResponse_FieldSubPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorOrganizations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOrganizationsResponse", fp)
}

func ParseBatchGetOrganizationsResponse_FieldPath(rawField string) (BatchGetOrganizationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOrganizationsResponse_FieldPath(fp)
}

func MustParseBatchGetOrganizationsResponse_FieldPath(rawField string) BatchGetOrganizationsResponse_FieldPath {
	fp, err := ParseBatchGetOrganizationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOrganizationsResponse_FieldTerminalPath struct {
	selector BatchGetOrganizationsResponse_FieldPathSelector
}

var _ BatchGetOrganizationsResponse_FieldPath = (*BatchGetOrganizationsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) Selector() BatchGetOrganizationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOrganizationsResponse
func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) Get(source *BatchGetOrganizationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
			for _, value := range source.GetOrganizations() {
				values = append(values, value)
			}
		case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOrganizationsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetOrganizationsResponse
func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) GetSingle(source *BatchGetOrganizationsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		res := source.GetOrganizations()
		return res, res != nil
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return ([]*organization.Organization)(nil)
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		return ([]*organization.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) ClearValue(item *BatchGetOrganizationsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
			item.Organizations = nil
		case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOrganizationsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetOrganizationsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return &BatchGetOrganizationsResponse_FieldTerminalPathValue{BatchGetOrganizationsResponse_FieldTerminalPath: *fp, value: value.([]*organization.Organization)}
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		return &BatchGetOrganizationsResponse_FieldTerminalPathValue{BatchGetOrganizationsResponse_FieldTerminalPath: *fp, value: value.([]*organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOrganizationsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues{BatchGetOrganizationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return &BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues{BatchGetOrganizationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization.Organization)}
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		return &BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues{BatchGetOrganizationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOrganizationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return &BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue{BatchGetOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.Organization)}
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		return &BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue{BatchGetOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOrganizationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetOrganizationsResponse_FieldSubPath struct {
	selector BatchGetOrganizationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetOrganizationsResponse_FieldPath = (*BatchGetOrganizationsResponse_FieldSubPath)(nil)

func (fps *BatchGetOrganizationsResponse_FieldSubPath) Selector() BatchGetOrganizationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetOrganizationsResponse_FieldSubPath) AsOrganizationsSubPath() (organization.Organization_FieldPath, bool) {
	res, ok := fps.subPath.(organization.Organization_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetOrganizationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetOrganizationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetOrganizationsResponse
func (fps *BatchGetOrganizationsResponse_FieldSubPath) Get(source *BatchGetOrganizationsResponse) (values []interface{}) {
	if asOrganizationFieldPath, ok := fps.AsOrganizationsSubPath(); ok {
		for _, item := range source.GetOrganizations() {
			values = append(values, asOrganizationFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetOrganizationsResponse))
}

// GetSingle returns value of selected field from source BatchGetOrganizationsResponse
func (fps *BatchGetOrganizationsResponse_FieldSubPath) GetSingle(source *BatchGetOrganizationsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		if len(source.GetOrganizations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetOrganizationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) ClearValue(item *BatchGetOrganizationsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
			for _, subItem := range item.Organizations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetOrganizationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetOrganizationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetOrganizationsResponse_FieldPathValue {
	return &BatchGetOrganizationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetOrganizationsResponse_FieldPathArrayOfValues {
	return &BatchGetOrganizationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetOrganizationsResponse_FieldPathArrayItemValue {
	return &BatchGetOrganizationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetOrganizationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetOrganizationsResponse_FieldPathValue allows storing values for BatchGetOrganizationsResponse fields according to their type
type BatchGetOrganizationsResponse_FieldPathValue interface {
	BatchGetOrganizationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOrganizationsResponse)
	CompareWith(*BatchGetOrganizationsResponse) (cmp int, comparable bool)
}

func ParseBatchGetOrganizationsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetOrganizationsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOrganizationsResponse_FieldPathValue), nil
}

func MustParseBatchGetOrganizationsResponse_FieldPathValue(pathStr, valueStr string) BatchGetOrganizationsResponse_FieldPathValue {
	fpv, err := ParseBatchGetOrganizationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOrganizationsResponse_FieldTerminalPathValue struct {
	BatchGetOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationsResponse_FieldPathValue = (*BatchGetOrganizationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOrganizationsResponse' as interface{}
func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) AsOrganizationsValue() ([]*organization.Organization, bool) {
	res, ok := fpv.value.([]*organization.Organization)
	return res, ok
}
func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) AsMissingValue() ([]*organization.Reference, bool) {
	res, ok := fpv.value.([]*organization.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOrganizationsResponse
func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) SetTo(target **BatchGetOrganizationsResponse) {
	if *target == nil {
		*target = new(BatchGetOrganizationsResponse)
	}
	switch fpv.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		(*target).Organizations = fpv.value.([]*organization.Organization)
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*organization.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOrganizationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOrganizationsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetOrganizationsResponse'.
func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetOrganizationsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return 0, false
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOrganizationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOrganizationsResponse))
}

type BatchGetOrganizationsResponse_FieldSubPathValue struct {
	BatchGetOrganizationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetOrganizationsResponse_FieldPathValue = (*BatchGetOrganizationsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetOrganizationsResponse_FieldSubPathValue) AsOrganizationsPathValue() (organization.Organization_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization.Organization_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetOrganizationsResponse_FieldSubPathValue) SetTo(target **BatchGetOrganizationsResponse) {
	if *target == nil {
		*target = new(BatchGetOrganizationsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOrganizationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOrganizationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetOrganizationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetOrganizationsResponse_FieldSubPathValue) CompareWith(source *BatchGetOrganizationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOrganizationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetOrganizationsResponse))
}

// BatchGetOrganizationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOrganizationsResponse according to their type
// Present only for array (repeated) types.
type BatchGetOrganizationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOrganizationsResponse_FieldPath
	ContainsValue(*BatchGetOrganizationsResponse) bool
}

// ParseBatchGetOrganizationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOrganizationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOrganizationsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOrganizationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOrganizationsResponse_FieldPathArrayItemValue = (*BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOrganizationsResponse as interface{}
func (fpaiv *BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationsItemValue() (*organization.Organization, bool) {
	res, ok := fpaiv.value.(*organization.Organization)
	return res, ok
}
func (fpaiv *BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*organization.Reference, bool) {
	res, ok := fpaiv.value.(*organization.Reference)
	return res, ok
}

func (fpaiv *BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOrganizationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOrganizationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOrganizationsResponse'
func (fpaiv *BatchGetOrganizationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOrganizationsResponse) bool {
	slice := fpaiv.BatchGetOrganizationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetOrganizationsResponse_FieldSubPathArrayItemValue struct {
	BatchGetOrganizationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetOrganizationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetOrganizationsResponse_FieldSubPathArrayItemValue) AsOrganizationsPathItemValue() (organization.Organization_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOrganizationsResponse'
func (fpaivs *BatchGetOrganizationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetOrganizationsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOrganizationsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetOrganizationsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetOrganizationsResponse fields according to their type
type BatchGetOrganizationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOrganizationsResponse_FieldPath
}

func ParseBatchGetOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOrganizationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOrganizationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOrganizationsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOrganizationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetOrganizationsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetOrganizationsResponse_FieldPathArrayOfValues = (*BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOrganizationsResponse_FieldPathSelectorOrganizations:
		for _, v := range fpaov.values.([][]*organization.Organization) {
			values = append(values, v)
		}
	case BatchGetOrganizationsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*organization.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationsArrayOfValues() ([][]*organization.Organization, bool) {
	res, ok := fpaov.values.([][]*organization.Organization)
	return res, ok
}
func (fpaov *BatchGetOrganizationsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*organization.Reference, bool) {
	res, ok := fpaov.values.([][]*organization.Reference)
	return res, ok
}

type BatchGetOrganizationsResponse_FieldSubPathArrayOfValues struct {
	BatchGetOrganizationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetOrganizationsResponse_FieldPathArrayOfValues = (*BatchGetOrganizationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetOrganizationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetOrganizationsResponse_FieldSubPathArrayOfValues) AsOrganizationsPathArrayOfValues() (organization.Organization_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization.Organization_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOrganizationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOrganizationsRequest_FieldPathSelector
	Get(source *ListOrganizationsRequest) []interface{}
	GetSingle(source *ListOrganizationsRequest) (interface{}, bool)
	ClearValue(item *ListOrganizationsRequest)

	// Those methods build corresponding ListOrganizationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOrganizationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOrganizationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOrganizationsRequest_FieldPathArrayItemValue
}

type ListOrganizationsRequest_FieldPathSelector int32

const (
	ListOrganizationsRequest_FieldPathSelectorPageSize  ListOrganizationsRequest_FieldPathSelector = 0
	ListOrganizationsRequest_FieldPathSelectorPageToken ListOrganizationsRequest_FieldPathSelector = 1
	ListOrganizationsRequest_FieldPathSelectorOrderBy   ListOrganizationsRequest_FieldPathSelector = 2
	ListOrganizationsRequest_FieldPathSelectorFilter    ListOrganizationsRequest_FieldPathSelector = 3
	ListOrganizationsRequest_FieldPathSelectorFieldMask ListOrganizationsRequest_FieldPathSelector = 4
	ListOrganizationsRequest_FieldPathSelectorView      ListOrganizationsRequest_FieldPathSelector = 5
)

func (s ListOrganizationsRequest_FieldPathSelector) String() string {
	switch s {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListOrganizationsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", s))
	}
}

func BuildListOrganizationsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListOrganizationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOrganizationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOrganizationsRequest", fp)
}

func ParseListOrganizationsRequest_FieldPath(rawField string) (ListOrganizationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOrganizationsRequest_FieldPath(fp)
}

func MustParseListOrganizationsRequest_FieldPath(rawField string) ListOrganizationsRequest_FieldPath {
	fp, err := ParseListOrganizationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOrganizationsRequest_FieldTerminalPath struct {
	selector ListOrganizationsRequest_FieldPathSelector
}

var _ ListOrganizationsRequest_FieldPath = (*ListOrganizationsRequest_FieldTerminalPath)(nil)

func (fp *ListOrganizationsRequest_FieldTerminalPath) Selector() ListOrganizationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOrganizationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOrganizationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOrganizationsRequest
func (fp *ListOrganizationsRequest_FieldTerminalPath) Get(source *ListOrganizationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOrganizationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListOrganizationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListOrganizationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListOrganizationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListOrganizationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListOrganizationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOrganizationsRequest))
}

// GetSingle returns value pointed by specific field of from source ListOrganizationsRequest
func (fp *ListOrganizationsRequest_FieldTerminalPath) GetSingle(source *ListOrganizationsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListOrganizationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOrganizationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListOrganizationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		return (*organization.PagerCursor)(nil)
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		return (*organization.OrderBy)(nil)
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		return (*organization.Filter)(nil)
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	case ListOrganizationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) ClearValue(item *ListOrganizationsRequest) {
	if item != nil {
		switch fp.selector {
		case ListOrganizationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListOrganizationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListOrganizationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListOrganizationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListOrganizationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListOrganizationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOrganizationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOrganizationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOrganizationsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListOrganizationsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListOrganizationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListOrganizationsRequest_FieldPathSelectorFilter ||
		fp.selector == ListOrganizationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListOrganizationsRequest_FieldPathSelectorView
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) WithIValue(value interface{}) ListOrganizationsRequest_FieldPathValue {
	switch fp.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		return &ListOrganizationsRequest_FieldTerminalPathValue{ListOrganizationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		return &ListOrganizationsRequest_FieldTerminalPathValue{ListOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.PagerCursor)}
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		return &ListOrganizationsRequest_FieldTerminalPathValue{ListOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.OrderBy)}
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		return &ListOrganizationsRequest_FieldTerminalPathValue{ListOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Filter)}
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		return &ListOrganizationsRequest_FieldTerminalPathValue{ListOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	case ListOrganizationsRequest_FieldPathSelectorView:
		return &ListOrganizationsRequest_FieldTerminalPathValue{ListOrganizationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOrganizationsRequest_FieldPathArrayOfValues {
	fpaov := &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		return &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		return &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.PagerCursor)}
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		return &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.OrderBy)}
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		return &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Filter)}
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		return &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	case ListOrganizationsRequest_FieldPathSelectorView:
		return &ListOrganizationsRequest_FieldTerminalPathArrayOfValues{ListOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOrganizationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListOrganizationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListOrganizationsRequest_FieldPathValue allows storing values for ListOrganizationsRequest fields according to their type
type ListOrganizationsRequest_FieldPathValue interface {
	ListOrganizationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOrganizationsRequest)
	CompareWith(*ListOrganizationsRequest) (cmp int, comparable bool)
}

func ParseListOrganizationsRequest_FieldPathValue(pathStr, valueStr string) (ListOrganizationsRequest_FieldPathValue, error) {
	fp, err := ParseListOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOrganizationsRequest_FieldPathValue), nil
}

func MustParseListOrganizationsRequest_FieldPathValue(pathStr, valueStr string) ListOrganizationsRequest_FieldPathValue {
	fpv, err := ParseListOrganizationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOrganizationsRequest_FieldTerminalPathValue struct {
	ListOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationsRequest_FieldPathValue = (*ListOrganizationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOrganizationsRequest' as interface{}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*organization.PagerCursor, bool) {
	res, ok := fpv.value.(*organization.PagerCursor)
	return res, ok
}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) AsOrderByValue() (*organization.OrderBy, bool) {
	res, ok := fpv.value.(*organization.OrderBy)
	return res, ok
}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) AsFilterValue() (*organization.Filter, bool) {
	res, ok := fpv.value.(*organization.Filter)
	return res, ok
}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListOrganizationsRequest
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) SetTo(target **ListOrganizationsRequest) {
	if *target == nil {
		*target = new(ListOrganizationsRequest)
	}
	switch fpv.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*organization.PagerCursor)
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*organization.OrderBy)
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*organization.Filter)
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	case ListOrganizationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOrganizationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOrganizationsRequest_FieldTerminalPathValue' with the value under path in 'ListOrganizationsRequest'.
func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) CompareWith(source *ListOrganizationsRequest) (int, bool) {
	switch fpv.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListOrganizationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOrganizationsRequest))
}

// ListOrganizationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOrganizationsRequest according to their type
// Present only for array (repeated) types.
type ListOrganizationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOrganizationsRequest_FieldPath
	ContainsValue(*ListOrganizationsRequest) bool
}

// ParseListOrganizationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListOrganizationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOrganizationsRequest_FieldPathArrayItemValue), nil
}

func MustParseListOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListOrganizationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOrganizationsRequest_FieldTerminalPathArrayItemValue struct {
	ListOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationsRequest_FieldPathArrayItemValue = (*ListOrganizationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOrganizationsRequest as interface{}
func (fpaiv *ListOrganizationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListOrganizationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOrganizationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOrganizationsRequest'
func (fpaiv *ListOrganizationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOrganizationsRequest) bool {
	slice := fpaiv.ListOrganizationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListOrganizationsRequest_FieldPathArrayOfValues allows storing slice of values for ListOrganizationsRequest fields according to their type
type ListOrganizationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOrganizationsRequest_FieldPath
}

func ParseListOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOrganizationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOrganizationsRequest_FieldPathArrayOfValues), nil
}

func MustParseListOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListOrganizationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOrganizationsRequest_FieldTerminalPathArrayOfValues struct {
	ListOrganizationsRequest_FieldTerminalPath
	values interface{}
}

var _ ListOrganizationsRequest_FieldPathArrayOfValues = (*ListOrganizationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOrganizationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOrganizationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*organization.PagerCursor) {
			values = append(values, v)
		}
	case ListOrganizationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*organization.OrderBy) {
			values = append(values, v)
		}
	case ListOrganizationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*organization.Filter) {
			values = append(values, v)
		}
	case ListOrganizationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	case ListOrganizationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*organization.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization.PagerCursor)
	return res, ok
}
func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*organization.OrderBy, bool) {
	res, ok := fpaov.values.([]*organization.OrderBy)
	return res, ok
}
func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*organization.Filter, bool) {
	res, ok := fpaov.values.([]*organization.Filter)
	return res, ok
}
func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}
func (fpaov *ListOrganizationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOrganizationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOrganizationsResponse_FieldPathSelector
	Get(source *ListOrganizationsResponse) []interface{}
	GetSingle(source *ListOrganizationsResponse) (interface{}, bool)
	ClearValue(item *ListOrganizationsResponse)

	// Those methods build corresponding ListOrganizationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOrganizationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOrganizationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOrganizationsResponse_FieldPathArrayItemValue
}

type ListOrganizationsResponse_FieldPathSelector int32

const (
	ListOrganizationsResponse_FieldPathSelectorOrganizations ListOrganizationsResponse_FieldPathSelector = 0
	ListOrganizationsResponse_FieldPathSelectorPrevPageToken ListOrganizationsResponse_FieldPathSelector = 1
	ListOrganizationsResponse_FieldPathSelectorNextPageToken ListOrganizationsResponse_FieldPathSelector = 2
)

func (s ListOrganizationsResponse_FieldPathSelector) String() string {
	switch s {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return "organizations"
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", s))
	}
}

func BuildListOrganizationsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListOrganizationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOrganizationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organizations":
			return &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorOrganizations}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "organizations":
			if subpath, err := organization.BuildOrganization_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListOrganizationsResponse_FieldSubPath{selector: ListOrganizationsResponse_FieldPathSelectorOrganizations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOrganizationsResponse", fp)
}

func ParseListOrganizationsResponse_FieldPath(rawField string) (ListOrganizationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOrganizationsResponse_FieldPath(fp)
}

func MustParseListOrganizationsResponse_FieldPath(rawField string) ListOrganizationsResponse_FieldPath {
	fp, err := ParseListOrganizationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOrganizationsResponse_FieldTerminalPath struct {
	selector ListOrganizationsResponse_FieldPathSelector
}

var _ ListOrganizationsResponse_FieldPath = (*ListOrganizationsResponse_FieldTerminalPath)(nil)

func (fp *ListOrganizationsResponse_FieldTerminalPath) Selector() ListOrganizationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOrganizationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOrganizationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOrganizationsResponse
func (fp *ListOrganizationsResponse_FieldTerminalPath) Get(source *ListOrganizationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOrganizationsResponse_FieldPathSelectorOrganizations:
			for _, value := range source.GetOrganizations() {
				values = append(values, value)
			}
		case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOrganizationsResponse))
}

// GetSingle returns value pointed by specific field of from source ListOrganizationsResponse
func (fp *ListOrganizationsResponse_FieldTerminalPath) GetSingle(source *ListOrganizationsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		res := source.GetOrganizations()
		return res, res != nil
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListOrganizationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return ([]*organization.Organization)(nil)
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		return (*organization.PagerCursor)(nil)
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		return (*organization.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) ClearValue(item *ListOrganizationsResponse) {
	if item != nil {
		switch fp.selector {
		case ListOrganizationsResponse_FieldPathSelectorOrganizations:
			item.Organizations = nil
		case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOrganizationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOrganizationsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListOrganizationsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) WithIValue(value interface{}) ListOrganizationsResponse_FieldPathValue {
	switch fp.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return &ListOrganizationsResponse_FieldTerminalPathValue{ListOrganizationsResponse_FieldTerminalPath: *fp, value: value.([]*organization.Organization)}
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		return &ListOrganizationsResponse_FieldTerminalPathValue{ListOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.PagerCursor)}
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		return &ListOrganizationsResponse_FieldTerminalPathValue{ListOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOrganizationsResponse_FieldPathArrayOfValues {
	fpaov := &ListOrganizationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return &ListOrganizationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization.Organization)}
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		return &ListOrganizationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]*organization.PagerCursor)}
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		return &ListOrganizationsResponse_FieldTerminalPathArrayOfValues{ListOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]*organization.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOrganizationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return &ListOrganizationsResponse_FieldTerminalPathArrayItemValue{ListOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.Organization)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListOrganizationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListOrganizationsResponse_FieldSubPath struct {
	selector ListOrganizationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListOrganizationsResponse_FieldPath = (*ListOrganizationsResponse_FieldSubPath)(nil)

func (fps *ListOrganizationsResponse_FieldSubPath) Selector() ListOrganizationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListOrganizationsResponse_FieldSubPath) AsOrganizationsSubPath() (organization.Organization_FieldPath, bool) {
	res, ok := fps.subPath.(organization.Organization_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListOrganizationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListOrganizationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListOrganizationsResponse
func (fps *ListOrganizationsResponse_FieldSubPath) Get(source *ListOrganizationsResponse) (values []interface{}) {
	if asOrganizationFieldPath, ok := fps.AsOrganizationsSubPath(); ok {
		for _, item := range source.GetOrganizations() {
			values = append(values, asOrganizationFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListOrganizationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListOrganizationsResponse))
}

// GetSingle returns value of selected field from source ListOrganizationsResponse
func (fps *ListOrganizationsResponse_FieldSubPath) GetSingle(source *ListOrganizationsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		if len(source.GetOrganizations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fps.selector))
	}
}

func (fps *ListOrganizationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListOrganizationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListOrganizationsResponse_FieldSubPath) ClearValue(item *ListOrganizationsResponse) {
	if item != nil {
		switch fps.selector {
		case ListOrganizationsResponse_FieldPathSelectorOrganizations:
			for _, subItem := range item.Organizations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListOrganizationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListOrganizationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListOrganizationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListOrganizationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListOrganizationsResponse_FieldSubPath) WithIValue(value interface{}) ListOrganizationsResponse_FieldPathValue {
	return &ListOrganizationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListOrganizationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListOrganizationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListOrganizationsResponse_FieldPathArrayOfValues {
	return &ListOrganizationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListOrganizationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListOrganizationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListOrganizationsResponse_FieldPathArrayItemValue {
	return &ListOrganizationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListOrganizationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListOrganizationsResponse_FieldPathValue allows storing values for ListOrganizationsResponse fields according to their type
type ListOrganizationsResponse_FieldPathValue interface {
	ListOrganizationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOrganizationsResponse)
	CompareWith(*ListOrganizationsResponse) (cmp int, comparable bool)
}

func ParseListOrganizationsResponse_FieldPathValue(pathStr, valueStr string) (ListOrganizationsResponse_FieldPathValue, error) {
	fp, err := ParseListOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOrganizationsResponse_FieldPathValue), nil
}

func MustParseListOrganizationsResponse_FieldPathValue(pathStr, valueStr string) ListOrganizationsResponse_FieldPathValue {
	fpv, err := ParseListOrganizationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOrganizationsResponse_FieldTerminalPathValue struct {
	ListOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationsResponse_FieldPathValue = (*ListOrganizationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOrganizationsResponse' as interface{}
func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) AsOrganizationsValue() ([]*organization.Organization, bool) {
	res, ok := fpv.value.([]*organization.Organization)
	return res, ok
}
func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*organization.PagerCursor, bool) {
	res, ok := fpv.value.(*organization.PagerCursor)
	return res, ok
}
func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*organization.PagerCursor, bool) {
	res, ok := fpv.value.(*organization.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListOrganizationsResponse
func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) SetTo(target **ListOrganizationsResponse) {
	if *target == nil {
		*target = new(ListOrganizationsResponse)
	}
	switch fpv.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		(*target).Organizations = fpv.value.([]*organization.Organization)
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*organization.PagerCursor)
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*organization.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOrganizationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOrganizationsResponse_FieldTerminalPathValue' with the value under path in 'ListOrganizationsResponse'.
func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) CompareWith(source *ListOrganizationsResponse) (int, bool) {
	switch fpv.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return 0, false
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListOrganizationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOrganizationsResponse))
}

type ListOrganizationsResponse_FieldSubPathValue struct {
	ListOrganizationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListOrganizationsResponse_FieldPathValue = (*ListOrganizationsResponse_FieldSubPathValue)(nil)

func (fpvs *ListOrganizationsResponse_FieldSubPathValue) AsOrganizationsPathValue() (organization.Organization_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization.Organization_FieldPathValue)
	return res, ok
}

func (fpvs *ListOrganizationsResponse_FieldSubPathValue) SetTo(target **ListOrganizationsResponse) {
	if *target == nil {
		*target = new(ListOrganizationsResponse)
	}
	switch fpvs.Selector() {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOrganizationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOrganizationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListOrganizationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListOrganizationsResponse_FieldSubPathValue) CompareWith(source *ListOrganizationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOrganizationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListOrganizationsResponse))
}

// ListOrganizationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOrganizationsResponse according to their type
// Present only for array (repeated) types.
type ListOrganizationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOrganizationsResponse_FieldPath
	ContainsValue(*ListOrganizationsResponse) bool
}

// ParseListOrganizationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListOrganizationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOrganizationsResponse_FieldPathArrayItemValue), nil
}

func MustParseListOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListOrganizationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOrganizationsResponse_FieldTerminalPathArrayItemValue struct {
	ListOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListOrganizationsResponse_FieldPathArrayItemValue = (*ListOrganizationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOrganizationsResponse as interface{}
func (fpaiv *ListOrganizationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListOrganizationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationsItemValue() (*organization.Organization, bool) {
	res, ok := fpaiv.value.(*organization.Organization)
	return res, ok
}

func (fpaiv *ListOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListOrganizationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOrganizationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOrganizationsResponse'
func (fpaiv *ListOrganizationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOrganizationsResponse) bool {
	slice := fpaiv.ListOrganizationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListOrganizationsResponse_FieldSubPathArrayItemValue struct {
	ListOrganizationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListOrganizationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListOrganizationsResponse_FieldSubPathArrayItemValue) AsOrganizationsPathItemValue() (organization.Organization_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOrganizationsResponse'
func (fpaivs *ListOrganizationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListOrganizationsResponse) bool {
	switch fpaivs.Selector() {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOrganizationsResponse: %d", fpaivs.Selector()))
	}
}

// ListOrganizationsResponse_FieldPathArrayOfValues allows storing slice of values for ListOrganizationsResponse fields according to their type
type ListOrganizationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOrganizationsResponse_FieldPath
}

func ParseListOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOrganizationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOrganizationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOrganizationsResponse_FieldPathArrayOfValues), nil
}

func MustParseListOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListOrganizationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOrganizationsResponse_FieldTerminalPathArrayOfValues struct {
	ListOrganizationsResponse_FieldTerminalPath
	values interface{}
}

var _ ListOrganizationsResponse_FieldPathArrayOfValues = (*ListOrganizationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOrganizationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOrganizationsResponse_FieldPathSelectorOrganizations:
		for _, v := range fpaov.values.([][]*organization.Organization) {
			values = append(values, v)
		}
	case ListOrganizationsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*organization.PagerCursor) {
			values = append(values, v)
		}
	case ListOrganizationsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*organization.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOrganizationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationsArrayOfValues() ([][]*organization.Organization, bool) {
	res, ok := fpaov.values.([][]*organization.Organization)
	return res, ok
}
func (fpaov *ListOrganizationsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*organization.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization.PagerCursor)
	return res, ok
}
func (fpaov *ListOrganizationsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*organization.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization.PagerCursor)
	return res, ok
}

type ListOrganizationsResponse_FieldSubPathArrayOfValues struct {
	ListOrganizationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListOrganizationsResponse_FieldPathArrayOfValues = (*ListOrganizationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListOrganizationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListOrganizationsResponse_FieldSubPathArrayOfValues) AsOrganizationsPathArrayOfValues() (organization.Organization_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization.Organization_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationRequest_FieldPathSelector
	Get(source *WatchOrganizationRequest) []interface{}
	GetSingle(source *WatchOrganizationRequest) (interface{}, bool)
	ClearValue(item *WatchOrganizationRequest)

	// Those methods build corresponding WatchOrganizationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationRequest_FieldPathArrayItemValue
}

type WatchOrganizationRequest_FieldPathSelector int32

const (
	WatchOrganizationRequest_FieldPathSelectorName      WatchOrganizationRequest_FieldPathSelector = 0
	WatchOrganizationRequest_FieldPathSelectorFieldMask WatchOrganizationRequest_FieldPathSelector = 1
	WatchOrganizationRequest_FieldPathSelectorView      WatchOrganizationRequest_FieldPathSelector = 2
)

func (s WatchOrganizationRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationRequest_FieldPathSelectorName:
		return "name"
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOrganizationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", s))
	}
}

func BuildWatchOrganizationRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchOrganizationRequest_FieldTerminalPath{selector: WatchOrganizationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOrganizationRequest_FieldTerminalPath{selector: WatchOrganizationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOrganizationRequest_FieldTerminalPath{selector: WatchOrganizationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationRequest", fp)
}

func ParseWatchOrganizationRequest_FieldPath(rawField string) (WatchOrganizationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationRequest_FieldPath(fp)
}

func MustParseWatchOrganizationRequest_FieldPath(rawField string) WatchOrganizationRequest_FieldPath {
	fp, err := ParseWatchOrganizationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationRequest_FieldTerminalPath struct {
	selector WatchOrganizationRequest_FieldPathSelector
}

var _ WatchOrganizationRequest_FieldPath = (*WatchOrganizationRequest_FieldTerminalPath)(nil)

func (fp *WatchOrganizationRequest_FieldTerminalPath) Selector() WatchOrganizationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationRequest
func (fp *WatchOrganizationRequest_FieldTerminalPath) Get(source *WatchOrganizationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchOrganizationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOrganizationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationRequest
func (fp *WatchOrganizationRequest_FieldTerminalPath) GetSingle(source *WatchOrganizationRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOrganizationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		return (*organization.Reference)(nil)
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	case WatchOrganizationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) ClearValue(item *WatchOrganizationRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchOrganizationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOrganizationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationRequest_FieldPathSelectorName ||
		fp.selector == WatchOrganizationRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOrganizationRequest_FieldPathSelectorView
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationRequest_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		return &WatchOrganizationRequest_FieldTerminalPathValue{WatchOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Reference)}
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationRequest_FieldTerminalPathValue{WatchOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	case WatchOrganizationRequest_FieldPathSelectorView:
		return &WatchOrganizationRequest_FieldTerminalPathValue{WatchOrganizationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationRequest_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		return &WatchOrganizationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Reference)}
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	case WatchOrganizationRequest_FieldPathSelectorView:
		return &WatchOrganizationRequest_FieldTerminalPathArrayOfValues{WatchOrganizationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationRequest_FieldPathValue allows storing values for WatchOrganizationRequest fields according to their type
type WatchOrganizationRequest_FieldPathValue interface {
	WatchOrganizationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationRequest)
	CompareWith(*WatchOrganizationRequest) (cmp int, comparable bool)
}

func ParseWatchOrganizationRequest_FieldPathValue(pathStr, valueStr string) (WatchOrganizationRequest_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationRequest_FieldPathValue), nil
}

func MustParseWatchOrganizationRequest_FieldPathValue(pathStr, valueStr string) WatchOrganizationRequest_FieldPathValue {
	fpv, err := ParseWatchOrganizationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationRequest_FieldTerminalPathValue struct {
	WatchOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationRequest_FieldPathValue = (*WatchOrganizationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationRequest' as interface{}
func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) AsNameValue() (*organization.Reference, bool) {
	res, ok := fpv.value.(*organization.Reference)
	return res, ok
}
func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}
func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationRequest
func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) SetTo(target **WatchOrganizationRequest) {
	if *target == nil {
		*target = new(WatchOrganizationRequest)
	}
	switch fpv.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*organization.Reference)
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	case WatchOrganizationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationRequest_FieldTerminalPathValue' with the value under path in 'WatchOrganizationRequest'.
func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) CompareWith(source *WatchOrganizationRequest) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*organization.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOrganizationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationRequest))
}

// WatchOrganizationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationRequest according to their type
// Present only for array (repeated) types.
type WatchOrganizationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationRequest_FieldPath
	ContainsValue(*WatchOrganizationRequest) bool
}

// ParseWatchOrganizationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationRequest_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationRequest_FieldPathArrayItemValue = (*WatchOrganizationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationRequest as interface{}
func (fpaiv *WatchOrganizationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationRequest'
func (fpaiv *WatchOrganizationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationRequest) bool {
	slice := fpaiv.WatchOrganizationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationRequest_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationRequest fields according to their type
type WatchOrganizationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationRequest_FieldPath
}

func ParseWatchOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationRequest_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationRequest_FieldPathArrayOfValues = (*WatchOrganizationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*organization.Reference) {
			values = append(values, v)
		}
	case WatchOrganizationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	case WatchOrganizationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*organization.Reference, bool) {
	res, ok := fpaov.values.([]*organization.Reference)
	return res, ok
}
func (fpaov *WatchOrganizationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}
func (fpaov *WatchOrganizationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationResponse_FieldPathSelector
	Get(source *WatchOrganizationResponse) []interface{}
	GetSingle(source *WatchOrganizationResponse) (interface{}, bool)
	ClearValue(item *WatchOrganizationResponse)

	// Those methods build corresponding WatchOrganizationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationResponse_FieldPathArrayItemValue
}

type WatchOrganizationResponse_FieldPathSelector int32

const (
	WatchOrganizationResponse_FieldPathSelectorChange WatchOrganizationResponse_FieldPathSelector = 0
)

func (s WatchOrganizationResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", s))
	}
}

func BuildWatchOrganizationResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchOrganizationResponse_FieldTerminalPath{selector: WatchOrganizationResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationResponse", fp)
}

func ParseWatchOrganizationResponse_FieldPath(rawField string) (WatchOrganizationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationResponse_FieldPath(fp)
}

func MustParseWatchOrganizationResponse_FieldPath(rawField string) WatchOrganizationResponse_FieldPath {
	fp, err := ParseWatchOrganizationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationResponse_FieldTerminalPath struct {
	selector WatchOrganizationResponse_FieldPathSelector
}

var _ WatchOrganizationResponse_FieldPath = (*WatchOrganizationResponse_FieldTerminalPath)(nil)

func (fp *WatchOrganizationResponse_FieldTerminalPath) Selector() WatchOrganizationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationResponse
func (fp *WatchOrganizationResponse_FieldTerminalPath) Get(source *WatchOrganizationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationResponse
func (fp *WatchOrganizationResponse_FieldTerminalPath) GetSingle(source *WatchOrganizationResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		return (*organization.OrganizationChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) ClearValue(item *WatchOrganizationResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationResponse_FieldPathSelectorChange
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationResponse_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		return &WatchOrganizationResponse_FieldTerminalPathValue{WatchOrganizationResponse_FieldTerminalPath: *fp, value: value.(*organization.OrganizationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationResponse_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationResponse_FieldTerminalPathArrayOfValues{WatchOrganizationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		return &WatchOrganizationResponse_FieldTerminalPathArrayOfValues{WatchOrganizationResponse_FieldTerminalPath: *fp, values: values.([]*organization.OrganizationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationResponse_FieldPathValue allows storing values for WatchOrganizationResponse fields according to their type
type WatchOrganizationResponse_FieldPathValue interface {
	WatchOrganizationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationResponse)
	CompareWith(*WatchOrganizationResponse) (cmp int, comparable bool)
}

func ParseWatchOrganizationResponse_FieldPathValue(pathStr, valueStr string) (WatchOrganizationResponse_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationResponse_FieldPathValue), nil
}

func MustParseWatchOrganizationResponse_FieldPathValue(pathStr, valueStr string) WatchOrganizationResponse_FieldPathValue {
	fpv, err := ParseWatchOrganizationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationResponse_FieldTerminalPathValue struct {
	WatchOrganizationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationResponse_FieldPathValue = (*WatchOrganizationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationResponse' as interface{}
func (fpv *WatchOrganizationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationResponse_FieldTerminalPathValue) AsChangeValue() (*organization.OrganizationChange, bool) {
	res, ok := fpv.value.(*organization.OrganizationChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationResponse
func (fpv *WatchOrganizationResponse_FieldTerminalPathValue) SetTo(target **WatchOrganizationResponse) {
	if *target == nil {
		*target = new(WatchOrganizationResponse)
	}
	switch fpv.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*organization.OrganizationChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationResponse_FieldTerminalPathValue' with the value under path in 'WatchOrganizationResponse'.
func (fpv *WatchOrganizationResponse_FieldTerminalPathValue) CompareWith(source *WatchOrganizationResponse) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationResponse))
}

// WatchOrganizationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationResponse according to their type
// Present only for array (repeated) types.
type WatchOrganizationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationResponse_FieldPath
	ContainsValue(*WatchOrganizationResponse) bool
}

// ParseWatchOrganizationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationResponse_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationResponse_FieldPathArrayItemValue = (*WatchOrganizationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationResponse as interface{}
func (fpaiv *WatchOrganizationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationResponse'
func (fpaiv *WatchOrganizationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationResponse) bool {
	slice := fpaiv.WatchOrganizationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationResponse_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationResponse fields according to their type
type WatchOrganizationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationResponse_FieldPath
}

func ParseWatchOrganizationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationResponse_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationResponse_FieldPathArrayOfValues = (*WatchOrganizationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*organization.OrganizationChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*organization.OrganizationChange, bool) {
	res, ok := fpaov.values.([]*organization.OrganizationChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationsRequest_FieldPathSelector
	Get(source *WatchOrganizationsRequest) []interface{}
	GetSingle(source *WatchOrganizationsRequest) (interface{}, bool)
	ClearValue(item *WatchOrganizationsRequest)

	// Those methods build corresponding WatchOrganizationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationsRequest_FieldPathArrayItemValue
}

type WatchOrganizationsRequest_FieldPathSelector int32

const (
	WatchOrganizationsRequest_FieldPathSelectorType         WatchOrganizationsRequest_FieldPathSelector = 0
	WatchOrganizationsRequest_FieldPathSelectorPageSize     WatchOrganizationsRequest_FieldPathSelector = 1
	WatchOrganizationsRequest_FieldPathSelectorPageToken    WatchOrganizationsRequest_FieldPathSelector = 2
	WatchOrganizationsRequest_FieldPathSelectorOrderBy      WatchOrganizationsRequest_FieldPathSelector = 3
	WatchOrganizationsRequest_FieldPathSelectorResumeToken  WatchOrganizationsRequest_FieldPathSelector = 4
	WatchOrganizationsRequest_FieldPathSelectorStartingTime WatchOrganizationsRequest_FieldPathSelector = 5
	WatchOrganizationsRequest_FieldPathSelectorFilter       WatchOrganizationsRequest_FieldPathSelector = 6
	WatchOrganizationsRequest_FieldPathSelectorFieldMask    WatchOrganizationsRequest_FieldPathSelector = 7
	WatchOrganizationsRequest_FieldPathSelectorView         WatchOrganizationsRequest_FieldPathSelector = 8
	WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize WatchOrganizationsRequest_FieldPathSelector = 9
)

func (s WatchOrganizationsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		return "type"
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOrganizationsRequest_FieldPathSelectorView:
		return "view"
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", s))
	}
}

func BuildWatchOrganizationsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationsRequest", fp)
}

func ParseWatchOrganizationsRequest_FieldPath(rawField string) (WatchOrganizationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationsRequest_FieldPath(fp)
}

func MustParseWatchOrganizationsRequest_FieldPath(rawField string) WatchOrganizationsRequest_FieldPath {
	fp, err := ParseWatchOrganizationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationsRequest_FieldTerminalPath struct {
	selector WatchOrganizationsRequest_FieldPathSelector
}

var _ WatchOrganizationsRequest_FieldPath = (*WatchOrganizationsRequest_FieldTerminalPath)(nil)

func (fp *WatchOrganizationsRequest_FieldTerminalPath) Selector() WatchOrganizationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationsRequest
func (fp *WatchOrganizationsRequest_FieldTerminalPath) Get(source *WatchOrganizationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchOrganizationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchOrganizationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchOrganizationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOrganizationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationsRequest
func (fp *WatchOrganizationsRequest_FieldTerminalPath) GetSingle(source *WatchOrganizationsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOrganizationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		return (*organization.PagerCursor)(nil)
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		return (*organization.OrderBy)(nil)
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		return (*organization.Filter)(nil)
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	case WatchOrganizationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) ClearValue(item *WatchOrganizationsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchOrganizationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchOrganizationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchOrganizationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOrganizationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationsRequest_FieldPathSelectorType ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorView ||
		fp.selector == WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationsRequest_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.PagerCursor)}
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.OrderBy)}
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Filter)}
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	case WatchOrganizationsRequest_FieldPathSelectorView:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOrganizationsRequest_FieldTerminalPathValue{WatchOrganizationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationsRequest_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.PagerCursor)}
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.OrderBy)}
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Filter)}
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	case WatchOrganizationsRequest_FieldPathSelectorView:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOrganizationsRequest_FieldTerminalPathArrayOfValues{WatchOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationsRequest_FieldPathValue allows storing values for WatchOrganizationsRequest fields according to their type
type WatchOrganizationsRequest_FieldPathValue interface {
	WatchOrganizationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationsRequest)
	CompareWith(*WatchOrganizationsRequest) (cmp int, comparable bool)
}

func ParseWatchOrganizationsRequest_FieldPathValue(pathStr, valueStr string) (WatchOrganizationsRequest_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationsRequest_FieldPathValue), nil
}

func MustParseWatchOrganizationsRequest_FieldPathValue(pathStr, valueStr string) WatchOrganizationsRequest_FieldPathValue {
	fpv, err := ParseWatchOrganizationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationsRequest_FieldTerminalPathValue struct {
	WatchOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationsRequest_FieldPathValue = (*WatchOrganizationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationsRequest' as interface{}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*organization.PagerCursor, bool) {
	res, ok := fpv.value.(*organization.PagerCursor)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsOrderByValue() (*organization.OrderBy, bool) {
	res, ok := fpv.value.(*organization.OrderBy)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsFilterValue() (*organization.Filter, bool) {
	res, ok := fpv.value.(*organization.Filter)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationsRequest
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) SetTo(target **WatchOrganizationsRequest) {
	if *target == nil {
		*target = new(WatchOrganizationsRequest)
	}
	switch fpv.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*organization.PagerCursor)
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*organization.OrderBy)
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*organization.Filter)
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	case WatchOrganizationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationsRequest_FieldTerminalPathValue' with the value under path in 'WatchOrganizationsRequest'.
func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) CompareWith(source *WatchOrganizationsRequest) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOrganizationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationsRequest))
}

// WatchOrganizationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationsRequest according to their type
// Present only for array (repeated) types.
type WatchOrganizationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationsRequest_FieldPath
	ContainsValue(*WatchOrganizationsRequest) bool
}

// ParseWatchOrganizationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationsRequest_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationsRequest_FieldPathArrayItemValue = (*WatchOrganizationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationsRequest as interface{}
func (fpaiv *WatchOrganizationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationsRequest'
func (fpaiv *WatchOrganizationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationsRequest) bool {
	slice := fpaiv.WatchOrganizationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationsRequest_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationsRequest fields according to their type
type WatchOrganizationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationsRequest_FieldPath
}

func ParseWatchOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationsRequest_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationsRequest_FieldPathArrayOfValues = (*WatchOrganizationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*organization.PagerCursor) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*organization.OrderBy) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*organization.Filter) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*organization.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization.PagerCursor)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*organization.OrderBy, bool) {
	res, ok := fpaov.values.([]*organization.OrderBy)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*organization.Filter, bool) {
	res, ok := fpaov.values.([]*organization.Filter)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchOrganizationsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationsResponse_FieldPathSelector
	Get(source *WatchOrganizationsResponse) []interface{}
	GetSingle(source *WatchOrganizationsResponse) (interface{}, bool)
	ClearValue(item *WatchOrganizationsResponse)

	// Those methods build corresponding WatchOrganizationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationsResponse_FieldPathArrayItemValue
}

type WatchOrganizationsResponse_FieldPathSelector int32

const (
	WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges WatchOrganizationsResponse_FieldPathSelector = 0
	WatchOrganizationsResponse_FieldPathSelectorIsCurrent           WatchOrganizationsResponse_FieldPathSelector = 1
	WatchOrganizationsResponse_FieldPathSelectorPageTokenChange     WatchOrganizationsResponse_FieldPathSelector = 2
	WatchOrganizationsResponse_FieldPathSelectorResumeToken         WatchOrganizationsResponse_FieldPathSelector = 3
	WatchOrganizationsResponse_FieldPathSelectorSnapshotSize        WatchOrganizationsResponse_FieldPathSelector = 4
	WatchOrganizationsResponse_FieldPathSelectorIsSoftReset         WatchOrganizationsResponse_FieldPathSelector = 5
	WatchOrganizationsResponse_FieldPathSelectorIsHardReset         WatchOrganizationsResponse_FieldPathSelector = 6
)

func (s WatchOrganizationsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		return "organization_changes"
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", s))
	}
}

func BuildWatchOrganizationsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization_changes", "organizationChanges", "organization-changes":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchOrganizationsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchOrganizationsResponse_FieldSubPath{selector: WatchOrganizationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationsResponse", fp)
}

func ParseWatchOrganizationsResponse_FieldPath(rawField string) (WatchOrganizationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationsResponse_FieldPath(fp)
}

func MustParseWatchOrganizationsResponse_FieldPath(rawField string) WatchOrganizationsResponse_FieldPath {
	fp, err := ParseWatchOrganizationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationsResponse_FieldTerminalPath struct {
	selector WatchOrganizationsResponse_FieldPathSelector
}

var _ WatchOrganizationsResponse_FieldPath = (*WatchOrganizationsResponse_FieldTerminalPath)(nil)

func (fp *WatchOrganizationsResponse_FieldTerminalPath) Selector() WatchOrganizationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationsResponse
func (fp *WatchOrganizationsResponse_FieldTerminalPath) Get(source *WatchOrganizationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
			for _, value := range source.GetOrganizationChanges() {
				values = append(values, value)
			}
		case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationsResponse
func (fp *WatchOrganizationsResponse_FieldTerminalPath) GetSingle(source *WatchOrganizationsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		res := source.GetOrganizationChanges()
		return res, res != nil
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		return ([]*organization.OrganizationChange)(nil)
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchOrganizationsResponse_PageTokenChange)(nil)
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) ClearValue(item *WatchOrganizationsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
			item.OrganizationChanges = nil
		case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges ||
		fp.selector == WatchOrganizationsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchOrganizationsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchOrganizationsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchOrganizationsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchOrganizationsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationsResponse_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.([]*organization.OrganizationChange)}
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*WatchOrganizationsResponse_PageTokenChange)}
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		return &WatchOrganizationsResponse_FieldTerminalPathValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationsResponse_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization.OrganizationChange)}
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]*WatchOrganizationsResponse_PageTokenChange)}
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayOfValues{WatchOrganizationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		return &WatchOrganizationsResponse_FieldTerminalPathArrayItemValue{WatchOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.OrganizationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchOrganizationsResponse_FieldSubPath struct {
	selector WatchOrganizationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchOrganizationsResponse_FieldPath = (*WatchOrganizationsResponse_FieldSubPath)(nil)

func (fps *WatchOrganizationsResponse_FieldSubPath) Selector() WatchOrganizationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchOrganizationsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchOrganizationsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchOrganizationsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchOrganizationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchOrganizationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchOrganizationsResponse
func (fps *WatchOrganizationsResponse_FieldSubPath) Get(source *WatchOrganizationsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchOrganizationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchOrganizationsResponse))
}

// GetSingle returns value of selected field from source WatchOrganizationsResponse
func (fps *WatchOrganizationsResponse_FieldSubPath) GetSingle(source *WatchOrganizationsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fps.selector))
	}
}

func (fps *WatchOrganizationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchOrganizationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchOrganizationsResponse_FieldSubPath) ClearValue(item *WatchOrganizationsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchOrganizationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchOrganizationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchOrganizationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchOrganizationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchOrganizationsResponse_FieldSubPath) WithIValue(value interface{}) WatchOrganizationsResponse_FieldPathValue {
	return &WatchOrganizationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchOrganizationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchOrganizationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchOrganizationsResponse_FieldPathArrayOfValues {
	return &WatchOrganizationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchOrganizationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchOrganizationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchOrganizationsResponse_FieldPathArrayItemValue {
	return &WatchOrganizationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchOrganizationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchOrganizationsResponse_FieldPathValue allows storing values for WatchOrganizationsResponse fields according to their type
type WatchOrganizationsResponse_FieldPathValue interface {
	WatchOrganizationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationsResponse)
	CompareWith(*WatchOrganizationsResponse) (cmp int, comparable bool)
}

func ParseWatchOrganizationsResponse_FieldPathValue(pathStr, valueStr string) (WatchOrganizationsResponse_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationsResponse_FieldPathValue), nil
}

func MustParseWatchOrganizationsResponse_FieldPathValue(pathStr, valueStr string) WatchOrganizationsResponse_FieldPathValue {
	fpv, err := ParseWatchOrganizationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationsResponse_FieldTerminalPathValue struct {
	WatchOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationsResponse_FieldPathValue = (*WatchOrganizationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOrganizationsResponse' as interface{}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsOrganizationChangesValue() ([]*organization.OrganizationChange, bool) {
	res, ok := fpv.value.([]*organization.OrganizationChange)
	return res, ok
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchOrganizationsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchOrganizationsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchOrganizationsResponse
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) SetTo(target **WatchOrganizationsResponse) {
	if *target == nil {
		*target = new(WatchOrganizationsResponse)
	}
	switch fpv.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		(*target).OrganizationChanges = fpv.value.([]*organization.OrganizationChange)
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchOrganizationsResponse_PageTokenChange)
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationsResponse_FieldTerminalPathValue' with the value under path in 'WatchOrganizationsResponse'.
func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) CompareWith(source *WatchOrganizationsResponse) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		return 0, false
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationsResponse))
}

type WatchOrganizationsResponse_FieldSubPathValue struct {
	WatchOrganizationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchOrganizationsResponse_FieldPathValue = (*WatchOrganizationsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchOrganizationsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchOrganizationsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchOrganizationsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchOrganizationsResponse_FieldSubPathValue) SetTo(target **WatchOrganizationsResponse) {
	if *target == nil {
		*target = new(WatchOrganizationsResponse)
	}
	switch fpvs.Selector() {
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchOrganizationsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOrganizationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchOrganizationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchOrganizationsResponse_FieldSubPathValue) CompareWith(source *WatchOrganizationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchOrganizationsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOrganizationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchOrganizationsResponse))
}

// WatchOrganizationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOrganizationsResponse according to their type
// Present only for array (repeated) types.
type WatchOrganizationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationsResponse_FieldPath
	ContainsValue(*WatchOrganizationsResponse) bool
}

// ParseWatchOrganizationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationsResponse_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationsResponse_FieldPathArrayItemValue = (*WatchOrganizationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationsResponse as interface{}
func (fpaiv *WatchOrganizationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchOrganizationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationChangesItemValue() (*organization.OrganizationChange, bool) {
	res, ok := fpaiv.value.(*organization.OrganizationChange)
	return res, ok
}

func (fpaiv *WatchOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationsResponse'
func (fpaiv *WatchOrganizationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationsResponse) bool {
	slice := fpaiv.WatchOrganizationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchOrganizationsResponse_FieldSubPathArrayItemValue struct {
	WatchOrganizationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchOrganizationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchOrganizationsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOrganizationsResponse'
func (fpaivs *WatchOrganizationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchOrganizationsResponse) bool {
	switch fpaivs.Selector() {
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse: %d", fpaivs.Selector()))
	}
}

// WatchOrganizationsResponse_FieldPathArrayOfValues allows storing slice of values for WatchOrganizationsResponse fields according to their type
type WatchOrganizationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationsResponse_FieldPath
}

func ParseWatchOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOrganizationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationsResponse_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationsResponse_FieldPathArrayOfValues = (*WatchOrganizationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges:
		for _, v := range fpaov.values.([][]*organization.OrganizationChange) {
			values = append(values, v)
		}
	case WatchOrganizationsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOrganizationsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchOrganizationsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchOrganizationsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOrganizationsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchOrganizationsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOrganizationsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationChangesArrayOfValues() ([][]*organization.OrganizationChange, bool) {
	res, ok := fpaov.values.([][]*organization.OrganizationChange)
	return res, ok
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchOrganizationsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchOrganizationsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOrganizationsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchOrganizationsResponse_FieldSubPathArrayOfValues struct {
	WatchOrganizationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchOrganizationsResponse_FieldPathArrayOfValues = (*WatchOrganizationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchOrganizationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchOrganizationsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOrganizationsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOrganizationsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchOrganizationsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchOrganizationsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchOrganizationsResponse_PageTokenChange)

	// Those methods build corresponding WatchOrganizationsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOrganizationsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchOrganizationsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchOrganizationsResponsePageTokenChange_FieldPathSelector = 0
	WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchOrganizationsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchOrganizationsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchOrganizationsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchOrganizationsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOrganizationsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchOrganizationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchOrganizationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOrganizationsResponse_PageTokenChange", fp)
}

func ParseWatchOrganizationsResponsePageTokenChange_FieldPath(rawField string) (WatchOrganizationsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOrganizationsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchOrganizationsResponsePageTokenChange_FieldPath(rawField string) WatchOrganizationsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOrganizationsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchOrganizationsResponsePageTokenChange_FieldPathSelector
}

var _ WatchOrganizationsResponsePageTokenChange_FieldPath = (*WatchOrganizationsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) Selector() WatchOrganizationsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOrganizationsResponse_PageTokenChange
func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchOrganizationsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOrganizationsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchOrganizationsResponse_PageTokenChange
func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchOrganizationsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOrganizationsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*organization.PagerCursor)(nil)
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*organization.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchOrganizationsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOrganizationsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchOrganizationsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue{WatchOrganizationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*organization.PagerCursor)}
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue{WatchOrganizationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*organization.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOrganizationsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOrganizationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*organization.PagerCursor)}
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOrganizationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*organization.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOrganizationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOrganizationsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchOrganizationsResponsePageTokenChange_FieldPathValue interface {
	WatchOrganizationsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOrganizationsResponse_PageTokenChange)
	CompareWith(*WatchOrganizationsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchOrganizationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchOrganizationsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOrganizationsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchOrganizationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchOrganizationsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchOrganizationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationsResponsePageTokenChange_FieldPathValue = (*WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*organization.PagerCursor, bool) {
	res, ok := fpv.value.(*organization.PagerCursor)
	return res, ok
}
func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*organization.PagerCursor, bool) {
	res, ok := fpv.value.(*organization.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchOrganizationsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchOrganizationsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*organization.PagerCursor)
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*organization.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOrganizationsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchOrganizationsResponse_PageTokenChange'.
func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchOrganizationsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOrganizationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOrganizationsResponse_PageTokenChange))
}

// WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOrganizationsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchOrganizationsResponse_PageTokenChange) bool
}

// ParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchOrganizationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOrganizationsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOrganizationsResponse_PageTokenChange as interface{}
func (fpaiv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOrganizationsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOrganizationsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOrganizationsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchOrganizationsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOrganizationsResponsePageTokenChange_FieldPath
}

func ParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchOrganizationsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchOrganizationsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*organization.PagerCursor) {
			values = append(values, v)
		}
	case WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*organization.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*organization.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization.PagerCursor)
	return res, ok
}
func (fpaov *WatchOrganizationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*organization.PagerCursor, bool) {
	res, ok := fpaov.values.([]*organization.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateOrganizationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateOrganizationRequest_FieldPathSelector
	Get(source *CreateOrganizationRequest) []interface{}
	GetSingle(source *CreateOrganizationRequest) (interface{}, bool)
	ClearValue(item *CreateOrganizationRequest)

	// Those methods build corresponding CreateOrganizationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateOrganizationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateOrganizationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateOrganizationRequest_FieldPathArrayItemValue
}

type CreateOrganizationRequest_FieldPathSelector int32

const (
	CreateOrganizationRequest_FieldPathSelectorOrganization CreateOrganizationRequest_FieldPathSelector = 0
)

func (s CreateOrganizationRequest_FieldPathSelector) String() string {
	switch s {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return "organization"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", s))
	}
}

func BuildCreateOrganizationRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateOrganizationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateOrganizationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization":
			return &CreateOrganizationRequest_FieldTerminalPath{selector: CreateOrganizationRequest_FieldPathSelectorOrganization}, nil
		}
	} else {
		switch fp[0] {
		case "organization":
			if subpath, err := organization.BuildOrganization_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateOrganizationRequest_FieldSubPath{selector: CreateOrganizationRequest_FieldPathSelectorOrganization, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateOrganizationRequest", fp)
}

func ParseCreateOrganizationRequest_FieldPath(rawField string) (CreateOrganizationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateOrganizationRequest_FieldPath(fp)
}

func MustParseCreateOrganizationRequest_FieldPath(rawField string) CreateOrganizationRequest_FieldPath {
	fp, err := ParseCreateOrganizationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateOrganizationRequest_FieldTerminalPath struct {
	selector CreateOrganizationRequest_FieldPathSelector
}

var _ CreateOrganizationRequest_FieldPath = (*CreateOrganizationRequest_FieldTerminalPath)(nil)

func (fp *CreateOrganizationRequest_FieldTerminalPath) Selector() CreateOrganizationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateOrganizationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateOrganizationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateOrganizationRequest
func (fp *CreateOrganizationRequest_FieldTerminalPath) Get(source *CreateOrganizationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateOrganizationRequest_FieldPathSelectorOrganization:
			if source.Organization != nil {
				values = append(values, source.Organization)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateOrganizationRequest))
}

// GetSingle returns value pointed by specific field of from source CreateOrganizationRequest
func (fp *CreateOrganizationRequest_FieldTerminalPath) GetSingle(source *CreateOrganizationRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		res := source.GetOrganization()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateOrganizationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return (*organization.Organization)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) ClearValue(item *CreateOrganizationRequest) {
	if item != nil {
		switch fp.selector {
		case CreateOrganizationRequest_FieldPathSelectorOrganization:
			item.Organization = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateOrganizationRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) WithIValue(value interface{}) CreateOrganizationRequest_FieldPathValue {
	switch fp.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return &CreateOrganizationRequest_FieldTerminalPathValue{CreateOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateOrganizationRequest_FieldPathArrayOfValues {
	fpaov := &CreateOrganizationRequest_FieldTerminalPathArrayOfValues{CreateOrganizationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return &CreateOrganizationRequest_FieldTerminalPathArrayOfValues{CreateOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateOrganizationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *CreateOrganizationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateOrganizationRequest_FieldSubPath struct {
	selector CreateOrganizationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateOrganizationRequest_FieldPath = (*CreateOrganizationRequest_FieldSubPath)(nil)

func (fps *CreateOrganizationRequest_FieldSubPath) Selector() CreateOrganizationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateOrganizationRequest_FieldSubPath) AsOrganizationSubPath() (organization.Organization_FieldPath, bool) {
	res, ok := fps.subPath.(organization.Organization_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateOrganizationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateOrganizationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateOrganizationRequest
func (fps *CreateOrganizationRequest_FieldSubPath) Get(source *CreateOrganizationRequest) (values []interface{}) {
	if asOrganizationFieldPath, ok := fps.AsOrganizationSubPath(); ok {
		values = append(values, asOrganizationFieldPath.Get(source.GetOrganization())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateOrganizationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateOrganizationRequest))
}

// GetSingle returns value of selected field from source CreateOrganizationRequest
func (fps *CreateOrganizationRequest_FieldSubPath) GetSingle(source *CreateOrganizationRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		if source.GetOrganization() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganization())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fps.selector))
	}
}

func (fps *CreateOrganizationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateOrganizationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateOrganizationRequest_FieldSubPath) ClearValue(item *CreateOrganizationRequest) {
	if item != nil {
		switch fps.selector {
		case CreateOrganizationRequest_FieldPathSelectorOrganization:
			fps.subPath.ClearValueRaw(item.Organization)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateOrganizationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateOrganizationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateOrganizationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateOrganizationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateOrganizationRequest_FieldSubPath) WithIValue(value interface{}) CreateOrganizationRequest_FieldPathValue {
	return &CreateOrganizationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateOrganizationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateOrganizationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateOrganizationRequest_FieldPathArrayOfValues {
	return &CreateOrganizationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateOrganizationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateOrganizationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateOrganizationRequest_FieldPathArrayItemValue {
	return &CreateOrganizationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateOrganizationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateOrganizationRequest_FieldPathValue allows storing values for CreateOrganizationRequest fields according to their type
type CreateOrganizationRequest_FieldPathValue interface {
	CreateOrganizationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateOrganizationRequest)
	CompareWith(*CreateOrganizationRequest) (cmp int, comparable bool)
}

func ParseCreateOrganizationRequest_FieldPathValue(pathStr, valueStr string) (CreateOrganizationRequest_FieldPathValue, error) {
	fp, err := ParseCreateOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOrganizationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateOrganizationRequest_FieldPathValue), nil
}

func MustParseCreateOrganizationRequest_FieldPathValue(pathStr, valueStr string) CreateOrganizationRequest_FieldPathValue {
	fpv, err := ParseCreateOrganizationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateOrganizationRequest_FieldTerminalPathValue struct {
	CreateOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOrganizationRequest_FieldPathValue = (*CreateOrganizationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateOrganizationRequest' as interface{}
func (fpv *CreateOrganizationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateOrganizationRequest_FieldTerminalPathValue) AsOrganizationValue() (*organization.Organization, bool) {
	res, ok := fpv.value.(*organization.Organization)
	return res, ok
}

// SetTo stores value for selected field for object CreateOrganizationRequest
func (fpv *CreateOrganizationRequest_FieldTerminalPathValue) SetTo(target **CreateOrganizationRequest) {
	if *target == nil {
		*target = new(CreateOrganizationRequest)
	}
	switch fpv.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		(*target).Organization = fpv.value.(*organization.Organization)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOrganizationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOrganizationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateOrganizationRequest_FieldTerminalPathValue' with the value under path in 'CreateOrganizationRequest'.
func (fpv *CreateOrganizationRequest_FieldTerminalPathValue) CompareWith(source *CreateOrganizationRequest) (int, bool) {
	switch fpv.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOrganizationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateOrganizationRequest))
}

type CreateOrganizationRequest_FieldSubPathValue struct {
	CreateOrganizationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateOrganizationRequest_FieldPathValue = (*CreateOrganizationRequest_FieldSubPathValue)(nil)

func (fpvs *CreateOrganizationRequest_FieldSubPathValue) AsOrganizationPathValue() (organization.Organization_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization.Organization_FieldPathValue)
	return res, ok
}

func (fpvs *CreateOrganizationRequest_FieldSubPathValue) SetTo(target **CreateOrganizationRequest) {
	if *target == nil {
		*target = new(CreateOrganizationRequest)
	}
	switch fpvs.Selector() {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		fpvs.subPathValue.(organization.Organization_FieldPathValue).SetTo(&(*target).Organization)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOrganizationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOrganizationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateOrganizationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateOrganizationRequest_FieldSubPathValue) CompareWith(source *CreateOrganizationRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return fpvs.subPathValue.(organization.Organization_FieldPathValue).CompareWith(source.GetOrganization())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOrganizationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateOrganizationRequest))
}

// CreateOrganizationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateOrganizationRequest according to their type
// Present only for array (repeated) types.
type CreateOrganizationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateOrganizationRequest_FieldPath
	ContainsValue(*CreateOrganizationRequest) bool
}

// ParseCreateOrganizationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateOrganizationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOrganizationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateOrganizationRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateOrganizationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateOrganizationRequest_FieldTerminalPathArrayItemValue struct {
	CreateOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOrganizationRequest_FieldPathArrayItemValue = (*CreateOrganizationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateOrganizationRequest as interface{}
func (fpaiv *CreateOrganizationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateOrganizationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateOrganizationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOrganizationRequest'
func (fpaiv *CreateOrganizationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateOrganizationRequest) bool {
	slice := fpaiv.CreateOrganizationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateOrganizationRequest_FieldSubPathArrayItemValue struct {
	CreateOrganizationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateOrganizationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateOrganizationRequest_FieldSubPathArrayItemValue) AsOrganizationPathItemValue() (organization.Organization_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOrganizationRequest'
func (fpaivs *CreateOrganizationRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateOrganizationRequest) bool {
	switch fpaivs.Selector() {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		return fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue).ContainsValue(source.GetOrganization())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOrganizationRequest: %d", fpaivs.Selector()))
	}
}

// CreateOrganizationRequest_FieldPathArrayOfValues allows storing slice of values for CreateOrganizationRequest fields according to their type
type CreateOrganizationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateOrganizationRequest_FieldPath
}

func ParseCreateOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateOrganizationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOrganizationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateOrganizationRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateOrganizationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateOrganizationRequest_FieldTerminalPathArrayOfValues struct {
	CreateOrganizationRequest_FieldTerminalPath
	values interface{}
}

var _ CreateOrganizationRequest_FieldPathArrayOfValues = (*CreateOrganizationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateOrganizationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateOrganizationRequest_FieldPathSelectorOrganization:
		for _, v := range fpaov.values.([]*organization.Organization) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateOrganizationRequest_FieldTerminalPathArrayOfValues) AsOrganizationArrayOfValues() ([]*organization.Organization, bool) {
	res, ok := fpaov.values.([]*organization.Organization)
	return res, ok
}

type CreateOrganizationRequest_FieldSubPathArrayOfValues struct {
	CreateOrganizationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateOrganizationRequest_FieldPathArrayOfValues = (*CreateOrganizationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateOrganizationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateOrganizationRequest_FieldSubPathArrayOfValues) AsOrganizationPathArrayOfValues() (organization.Organization_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization.Organization_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOrganizationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOrganizationRequest_FieldPathSelector
	Get(source *UpdateOrganizationRequest) []interface{}
	GetSingle(source *UpdateOrganizationRequest) (interface{}, bool)
	ClearValue(item *UpdateOrganizationRequest)

	// Those methods build corresponding UpdateOrganizationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOrganizationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOrganizationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOrganizationRequest_FieldPathArrayItemValue
}

type UpdateOrganizationRequest_FieldPathSelector int32

const (
	UpdateOrganizationRequest_FieldPathSelectorOrganization UpdateOrganizationRequest_FieldPathSelector = 0
	UpdateOrganizationRequest_FieldPathSelectorUpdateMask   UpdateOrganizationRequest_FieldPathSelector = 1
	UpdateOrganizationRequest_FieldPathSelectorCas          UpdateOrganizationRequest_FieldPathSelector = 2
)

func (s UpdateOrganizationRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return "organization"
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", s))
	}
}

func BuildUpdateOrganizationRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateOrganizationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOrganizationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organization":
			return &UpdateOrganizationRequest_FieldTerminalPath{selector: UpdateOrganizationRequest_FieldPathSelectorOrganization}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateOrganizationRequest_FieldTerminalPath{selector: UpdateOrganizationRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateOrganizationRequest_FieldTerminalPath{selector: UpdateOrganizationRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "organization":
			if subpath, err := organization.BuildOrganization_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOrganizationRequest_FieldSubPath{selector: UpdateOrganizationRequest_FieldPathSelectorOrganization, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateOrganizationRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOrganizationRequest_FieldSubPath{selector: UpdateOrganizationRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOrganizationRequest", fp)
}

func ParseUpdateOrganizationRequest_FieldPath(rawField string) (UpdateOrganizationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOrganizationRequest_FieldPath(fp)
}

func MustParseUpdateOrganizationRequest_FieldPath(rawField string) UpdateOrganizationRequest_FieldPath {
	fp, err := ParseUpdateOrganizationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOrganizationRequest_FieldTerminalPath struct {
	selector UpdateOrganizationRequest_FieldPathSelector
}

var _ UpdateOrganizationRequest_FieldPath = (*UpdateOrganizationRequest_FieldTerminalPath)(nil)

func (fp *UpdateOrganizationRequest_FieldTerminalPath) Selector() UpdateOrganizationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOrganizationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOrganizationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOrganizationRequest
func (fp *UpdateOrganizationRequest_FieldTerminalPath) Get(source *UpdateOrganizationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOrganizationRequest_FieldPathSelectorOrganization:
			if source.Organization != nil {
				values = append(values, source.Organization)
			}
		case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateOrganizationRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOrganizationRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateOrganizationRequest
func (fp *UpdateOrganizationRequest_FieldTerminalPath) GetSingle(source *UpdateOrganizationRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		res := source.GetOrganization()
		return res, res != nil
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOrganizationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return (*organization.Organization)(nil)
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		return (*organization.Organization_FieldMask)(nil)
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return (*UpdateOrganizationRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) ClearValue(item *UpdateOrganizationRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateOrganizationRequest_FieldPathSelectorOrganization:
			item.Organization = nil
		case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateOrganizationRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOrganizationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOrganizationRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateOrganizationRequest_FieldPathValue {
	switch fp.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return &UpdateOrganizationRequest_FieldTerminalPathValue{UpdateOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization)}
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		return &UpdateOrganizationRequest_FieldTerminalPathValue{UpdateOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return &UpdateOrganizationRequest_FieldTerminalPathValue{UpdateOrganizationRequest_FieldTerminalPath: *fp, value: value.(*UpdateOrganizationRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOrganizationRequest_FieldPathArrayOfValues {
	fpaov := &UpdateOrganizationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return &UpdateOrganizationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization)}
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		return &UpdateOrganizationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return &UpdateOrganizationRequest_FieldTerminalPathArrayOfValues{UpdateOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*UpdateOrganizationRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOrganizationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOrganizationRequest_FieldSubPath struct {
	selector UpdateOrganizationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOrganizationRequest_FieldPath = (*UpdateOrganizationRequest_FieldSubPath)(nil)

func (fps *UpdateOrganizationRequest_FieldSubPath) Selector() UpdateOrganizationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOrganizationRequest_FieldSubPath) AsOrganizationSubPath() (organization.Organization_FieldPath, bool) {
	res, ok := fps.subPath.(organization.Organization_FieldPath)
	return res, ok
}
func (fps *UpdateOrganizationRequest_FieldSubPath) AsCasSubPath() (UpdateOrganizationRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateOrganizationRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOrganizationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOrganizationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOrganizationRequest
func (fps *UpdateOrganizationRequest_FieldSubPath) Get(source *UpdateOrganizationRequest) (values []interface{}) {
	if asOrganizationFieldPath, ok := fps.AsOrganizationSubPath(); ok {
		values = append(values, asOrganizationFieldPath.Get(source.GetOrganization())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateOrganizationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOrganizationRequest))
}

// GetSingle returns value of selected field from source UpdateOrganizationRequest
func (fps *UpdateOrganizationRequest_FieldSubPath) GetSingle(source *UpdateOrganizationRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		if source.GetOrganization() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganization())
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fps.selector))
	}
}

func (fps *UpdateOrganizationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOrganizationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOrganizationRequest_FieldSubPath) ClearValue(item *UpdateOrganizationRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateOrganizationRequest_FieldPathSelectorOrganization:
			fps.subPath.ClearValueRaw(item.Organization)
		case UpdateOrganizationRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateOrganizationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOrganizationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOrganizationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOrganizationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOrganizationRequest_FieldSubPath) WithIValue(value interface{}) UpdateOrganizationRequest_FieldPathValue {
	return &UpdateOrganizationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOrganizationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOrganizationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOrganizationRequest_FieldPathArrayOfValues {
	return &UpdateOrganizationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOrganizationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOrganizationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOrganizationRequest_FieldPathArrayItemValue {
	return &UpdateOrganizationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOrganizationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOrganizationRequest_FieldPathValue allows storing values for UpdateOrganizationRequest fields according to their type
type UpdateOrganizationRequest_FieldPathValue interface {
	UpdateOrganizationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOrganizationRequest)
	CompareWith(*UpdateOrganizationRequest) (cmp int, comparable bool)
}

func ParseUpdateOrganizationRequest_FieldPathValue(pathStr, valueStr string) (UpdateOrganizationRequest_FieldPathValue, error) {
	fp, err := ParseUpdateOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOrganizationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOrganizationRequest_FieldPathValue), nil
}

func MustParseUpdateOrganizationRequest_FieldPathValue(pathStr, valueStr string) UpdateOrganizationRequest_FieldPathValue {
	fpv, err := ParseUpdateOrganizationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOrganizationRequest_FieldTerminalPathValue struct {
	UpdateOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationRequest_FieldPathValue = (*UpdateOrganizationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateOrganizationRequest' as interface{}
func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) AsOrganizationValue() (*organization.Organization, bool) {
	res, ok := fpv.value.(*organization.Organization)
	return res, ok
}
func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}
func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) AsCasValue() (*UpdateOrganizationRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateOrganizationRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateOrganizationRequest
func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) SetTo(target **UpdateOrganizationRequest) {
	if *target == nil {
		*target = new(UpdateOrganizationRequest)
	}
	switch fpv.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		(*target).Organization = fpv.value.(*organization.Organization)
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*organization.Organization_FieldMask)
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateOrganizationRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOrganizationRequest_FieldTerminalPathValue' with the value under path in 'UpdateOrganizationRequest'.
func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) CompareWith(source *UpdateOrganizationRequest) (int, bool) {
	switch fpv.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return 0, false
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOrganizationRequest))
}

type UpdateOrganizationRequest_FieldSubPathValue struct {
	UpdateOrganizationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOrganizationRequest_FieldPathValue = (*UpdateOrganizationRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) AsOrganizationPathValue() (organization.Organization_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization.Organization_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) AsCasPathValue() (UpdateOrganizationRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateOrganizationRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) SetTo(target **UpdateOrganizationRequest) {
	if *target == nil {
		*target = new(UpdateOrganizationRequest)
	}
	switch fpvs.Selector() {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		fpvs.subPathValue.(organization.Organization_FieldPathValue).SetTo(&(*target).Organization)
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateOrganizationRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) CompareWith(source *UpdateOrganizationRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return fpvs.subPathValue.(organization.Organization_FieldPathValue).CompareWith(source.GetOrganization())
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateOrganizationRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOrganizationRequest))
}

// UpdateOrganizationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateOrganizationRequest according to their type
// Present only for array (repeated) types.
type UpdateOrganizationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOrganizationRequest_FieldPath
	ContainsValue(*UpdateOrganizationRequest) bool
}

// ParseUpdateOrganizationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOrganizationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOrganizationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOrganizationRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOrganizationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOrganizationRequest_FieldTerminalPathArrayItemValue struct {
	UpdateOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationRequest_FieldPathArrayItemValue = (*UpdateOrganizationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOrganizationRequest as interface{}
func (fpaiv *UpdateOrganizationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOrganizationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOrganizationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOrganizationRequest'
func (fpaiv *UpdateOrganizationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOrganizationRequest) bool {
	slice := fpaiv.UpdateOrganizationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOrganizationRequest_FieldSubPathArrayItemValue struct {
	UpdateOrganizationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOrganizationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOrganizationRequest_FieldSubPathArrayItemValue) AsOrganizationPathItemValue() (organization.Organization_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateOrganizationRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateOrganizationRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateOrganizationRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOrganizationRequest'
func (fpaivs *UpdateOrganizationRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOrganizationRequest) bool {
	switch fpaivs.Selector() {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		return fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue).ContainsValue(source.GetOrganization())
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateOrganizationRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest: %d", fpaivs.Selector()))
	}
}

// UpdateOrganizationRequest_FieldPathArrayOfValues allows storing slice of values for UpdateOrganizationRequest fields according to their type
type UpdateOrganizationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOrganizationRequest_FieldPath
}

func ParseUpdateOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOrganizationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOrganizationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOrganizationRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOrganizationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOrganizationRequest_FieldTerminalPathArrayOfValues struct {
	UpdateOrganizationRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateOrganizationRequest_FieldPathArrayOfValues = (*UpdateOrganizationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOrganizationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOrganizationRequest_FieldPathSelectorOrganization:
		for _, v := range fpaov.values.([]*organization.Organization) {
			values = append(values, v)
		}
	case UpdateOrganizationRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	case UpdateOrganizationRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateOrganizationRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOrganizationRequest_FieldTerminalPathArrayOfValues) AsOrganizationArrayOfValues() ([]*organization.Organization, bool) {
	res, ok := fpaov.values.([]*organization.Organization)
	return res, ok
}
func (fpaov *UpdateOrganizationRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}
func (fpaov *UpdateOrganizationRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateOrganizationRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateOrganizationRequest_CAS)
	return res, ok
}

type UpdateOrganizationRequest_FieldSubPathArrayOfValues struct {
	UpdateOrganizationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOrganizationRequest_FieldPathArrayOfValues = (*UpdateOrganizationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOrganizationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOrganizationRequest_FieldSubPathArrayOfValues) AsOrganizationPathArrayOfValues() (organization.Organization_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization.Organization_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateOrganizationRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateOrganizationRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateOrganizationRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOrganizationRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOrganizationRequestCAS_FieldPathSelector
	Get(source *UpdateOrganizationRequest_CAS) []interface{}
	GetSingle(source *UpdateOrganizationRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateOrganizationRequest_CAS)

	// Those methods build corresponding UpdateOrganizationRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOrganizationRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOrganizationRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOrganizationRequestCAS_FieldPathArrayItemValue
}

type UpdateOrganizationRequestCAS_FieldPathSelector int32

const (
	UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState UpdateOrganizationRequestCAS_FieldPathSelector = 0
	UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask        UpdateOrganizationRequestCAS_FieldPathSelector = 1
)

func (s UpdateOrganizationRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", s))
	}
}

func BuildUpdateOrganizationRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateOrganizationRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOrganizationRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateOrganizationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateOrganizationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := organization.BuildOrganization_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOrganizationRequestCAS_FieldSubPath{selector: UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOrganizationRequest_CAS", fp)
}

func ParseUpdateOrganizationRequestCAS_FieldPath(rawField string) (UpdateOrganizationRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOrganizationRequestCAS_FieldPath(fp)
}

func MustParseUpdateOrganizationRequestCAS_FieldPath(rawField string) UpdateOrganizationRequestCAS_FieldPath {
	fp, err := ParseUpdateOrganizationRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOrganizationRequestCAS_FieldTerminalPath struct {
	selector UpdateOrganizationRequestCAS_FieldPathSelector
}

var _ UpdateOrganizationRequestCAS_FieldPath = (*UpdateOrganizationRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) Selector() UpdateOrganizationRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOrganizationRequest_CAS
func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) Get(source *UpdateOrganizationRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOrganizationRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateOrganizationRequest_CAS
func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) GetSingle(source *UpdateOrganizationRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOrganizationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return (*organization.Organization)(nil)
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) ClearValue(item *UpdateOrganizationRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOrganizationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateOrganizationRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOrganizationRequestCAS_FieldTerminalPathValue{UpdateOrganizationRequestCAS_FieldTerminalPath: *fp, value: value.(*organization.Organization)}
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOrganizationRequestCAS_FieldTerminalPathValue{UpdateOrganizationRequestCAS_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOrganizationRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues{UpdateOrganizationRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues{UpdateOrganizationRequestCAS_FieldTerminalPath: *fp, values: values.([]*organization.Organization)}
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues{UpdateOrganizationRequestCAS_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOrganizationRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOrganizationRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOrganizationRequestCAS_FieldSubPath struct {
	selector UpdateOrganizationRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOrganizationRequestCAS_FieldPath = (*UpdateOrganizationRequestCAS_FieldSubPath)(nil)

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) Selector() UpdateOrganizationRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) AsConditionalStateSubPath() (organization.Organization_FieldPath, bool) {
	res, ok := fps.subPath.(organization.Organization_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOrganizationRequest_CAS
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) Get(source *UpdateOrganizationRequest_CAS) (values []interface{}) {
	if asOrganizationFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asOrganizationFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOrganizationRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateOrganizationRequest_CAS
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) GetSingle(source *UpdateOrganizationRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOrganizationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) ClearValue(item *UpdateOrganizationRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOrganizationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOrganizationRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOrganizationRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateOrganizationRequestCAS_FieldPathValue {
	return &UpdateOrganizationRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOrganizationRequestCAS_FieldPathArrayOfValues {
	return &UpdateOrganizationRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOrganizationRequestCAS_FieldPathArrayItemValue {
	return &UpdateOrganizationRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOrganizationRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOrganizationRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateOrganizationRequestCAS_FieldPathValue interface {
	UpdateOrganizationRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOrganizationRequest_CAS)
	CompareWith(*UpdateOrganizationRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateOrganizationRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateOrganizationRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateOrganizationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOrganizationRequestCAS_FieldPathValue), nil
}

func MustParseUpdateOrganizationRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateOrganizationRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateOrganizationRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOrganizationRequestCAS_FieldTerminalPathValue struct {
	UpdateOrganizationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationRequestCAS_FieldPathValue = (*UpdateOrganizationRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*organization.Organization, bool) {
	res, ok := fpv.value.(*organization.Organization)
	return res, ok
}
func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateOrganizationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOrganizationRequest_CAS)
	}
	switch fpv.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*organization.Organization)
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOrganizationRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateOrganizationRequest_CAS'.
func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateOrganizationRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOrganizationRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOrganizationRequest_CAS))
}

type UpdateOrganizationRequestCAS_FieldSubPathValue struct {
	UpdateOrganizationRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOrganizationRequestCAS_FieldPathValue = (*UpdateOrganizationRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateOrganizationRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (organization.Organization_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization.Organization_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOrganizationRequestCAS_FieldSubPathValue) SetTo(target **UpdateOrganizationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOrganizationRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(organization.Organization_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOrganizationRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOrganizationRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOrganizationRequestCAS_FieldSubPathValue) CompareWith(source *UpdateOrganizationRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(organization.Organization_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOrganizationRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOrganizationRequest_CAS))
}

// UpdateOrganizationRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateOrganizationRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOrganizationRequestCAS_FieldPath
	ContainsValue(*UpdateOrganizationRequest_CAS) bool
}

// ParseUpdateOrganizationRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOrganizationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOrganizationRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOrganizationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOrganizationRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateOrganizationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOrganizationRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOrganizationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOrganizationRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateOrganizationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOrganizationRequestCAS_FieldPathArrayItemValue = (*UpdateOrganizationRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOrganizationRequest_CAS as interface{}
func (fpaiv *UpdateOrganizationRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOrganizationRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOrganizationRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOrganizationRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOrganizationRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateOrganizationRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOrganizationRequest_CAS) bool {
	slice := fpaiv.UpdateOrganizationRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOrganizationRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateOrganizationRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOrganizationRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOrganizationRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (organization.Organization_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateOrganizationRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOrganizationRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOrganizationRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateOrganizationRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateOrganizationRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOrganizationRequestCAS_FieldPath
}

func ParseUpdateOrganizationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOrganizationRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOrganizationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOrganizationRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateOrganizationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOrganizationRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOrganizationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateOrganizationRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateOrganizationRequestCAS_FieldPathArrayOfValues = (*UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*organization.Organization) {
			values = append(values, v)
		}
	case UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*organization.Organization, bool) {
	res, ok := fpaov.values.([]*organization.Organization)
	return res, ok
}
func (fpaov *UpdateOrganizationRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}

type UpdateOrganizationRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateOrganizationRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOrganizationRequestCAS_FieldPathArrayOfValues = (*UpdateOrganizationRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOrganizationRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOrganizationRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (organization.Organization_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization.Organization_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteOrganizationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteOrganizationRequest_FieldPathSelector
	Get(source *DeleteOrganizationRequest) []interface{}
	GetSingle(source *DeleteOrganizationRequest) (interface{}, bool)
	ClearValue(item *DeleteOrganizationRequest)

	// Those methods build corresponding DeleteOrganizationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteOrganizationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteOrganizationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteOrganizationRequest_FieldPathArrayItemValue
}

type DeleteOrganizationRequest_FieldPathSelector int32

const (
	DeleteOrganizationRequest_FieldPathSelectorName DeleteOrganizationRequest_FieldPathSelector = 0
)

func (s DeleteOrganizationRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", s))
	}
}

func BuildDeleteOrganizationRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteOrganizationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteOrganizationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteOrganizationRequest_FieldTerminalPath{selector: DeleteOrganizationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteOrganizationRequest", fp)
}

func ParseDeleteOrganizationRequest_FieldPath(rawField string) (DeleteOrganizationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteOrganizationRequest_FieldPath(fp)
}

func MustParseDeleteOrganizationRequest_FieldPath(rawField string) DeleteOrganizationRequest_FieldPath {
	fp, err := ParseDeleteOrganizationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteOrganizationRequest_FieldTerminalPath struct {
	selector DeleteOrganizationRequest_FieldPathSelector
}

var _ DeleteOrganizationRequest_FieldPath = (*DeleteOrganizationRequest_FieldTerminalPath)(nil)

func (fp *DeleteOrganizationRequest_FieldTerminalPath) Selector() DeleteOrganizationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteOrganizationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteOrganizationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteOrganizationRequest
func (fp *DeleteOrganizationRequest_FieldTerminalPath) Get(source *DeleteOrganizationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteOrganizationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteOrganizationRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteOrganizationRequest
func (fp *DeleteOrganizationRequest_FieldTerminalPath) GetSingle(source *DeleteOrganizationRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteOrganizationRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteOrganizationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		return (*organization.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) ClearValue(item *DeleteOrganizationRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteOrganizationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteOrganizationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteOrganizationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteOrganizationRequest_FieldPathSelectorName
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteOrganizationRequest_FieldPathValue {
	switch fp.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		return &DeleteOrganizationRequest_FieldTerminalPathValue{DeleteOrganizationRequest_FieldTerminalPath: *fp, value: value.(*organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteOrganizationRequest_FieldPathArrayOfValues {
	fpaov := &DeleteOrganizationRequest_FieldTerminalPathArrayOfValues{DeleteOrganizationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		return &DeleteOrganizationRequest_FieldTerminalPathArrayOfValues{DeleteOrganizationRequest_FieldTerminalPath: *fp, values: values.([]*organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteOrganizationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fp.selector))
	}
}

func (fp *DeleteOrganizationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteOrganizationRequest_FieldPathValue allows storing values for DeleteOrganizationRequest fields according to their type
type DeleteOrganizationRequest_FieldPathValue interface {
	DeleteOrganizationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteOrganizationRequest)
	CompareWith(*DeleteOrganizationRequest) (cmp int, comparable bool)
}

func ParseDeleteOrganizationRequest_FieldPathValue(pathStr, valueStr string) (DeleteOrganizationRequest_FieldPathValue, error) {
	fp, err := ParseDeleteOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOrganizationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteOrganizationRequest_FieldPathValue), nil
}

func MustParseDeleteOrganizationRequest_FieldPathValue(pathStr, valueStr string) DeleteOrganizationRequest_FieldPathValue {
	fpv, err := ParseDeleteOrganizationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteOrganizationRequest_FieldTerminalPathValue struct {
	DeleteOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOrganizationRequest_FieldPathValue = (*DeleteOrganizationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteOrganizationRequest' as interface{}
func (fpv *DeleteOrganizationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteOrganizationRequest_FieldTerminalPathValue) AsNameValue() (*organization.Reference, bool) {
	res, ok := fpv.value.(*organization.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteOrganizationRequest
func (fpv *DeleteOrganizationRequest_FieldTerminalPathValue) SetTo(target **DeleteOrganizationRequest) {
	if *target == nil {
		*target = new(DeleteOrganizationRequest)
	}
	switch fpv.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*organization.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOrganizationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteOrganizationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteOrganizationRequest_FieldTerminalPathValue' with the value under path in 'DeleteOrganizationRequest'.
func (fpv *DeleteOrganizationRequest_FieldTerminalPathValue) CompareWith(source *DeleteOrganizationRequest) (int, bool) {
	switch fpv.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*organization.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOrganizationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOrganizationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteOrganizationRequest))
}

// DeleteOrganizationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteOrganizationRequest according to their type
// Present only for array (repeated) types.
type DeleteOrganizationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteOrganizationRequest_FieldPath
	ContainsValue(*DeleteOrganizationRequest) bool
}

// ParseDeleteOrganizationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteOrganizationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOrganizationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteOrganizationRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteOrganizationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteOrganizationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteOrganizationRequest_FieldTerminalPathArrayItemValue struct {
	DeleteOrganizationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOrganizationRequest_FieldPathArrayItemValue = (*DeleteOrganizationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteOrganizationRequest as interface{}
func (fpaiv *DeleteOrganizationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteOrganizationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteOrganizationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteOrganizationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteOrganizationRequest'
func (fpaiv *DeleteOrganizationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteOrganizationRequest) bool {
	slice := fpaiv.DeleteOrganizationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteOrganizationRequest_FieldPathArrayOfValues allows storing slice of values for DeleteOrganizationRequest fields according to their type
type DeleteOrganizationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteOrganizationRequest_FieldPath
}

func ParseDeleteOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteOrganizationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteOrganizationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOrganizationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteOrganizationRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteOrganizationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteOrganizationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteOrganizationRequest_FieldTerminalPathArrayOfValues struct {
	DeleteOrganizationRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteOrganizationRequest_FieldPathArrayOfValues = (*DeleteOrganizationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteOrganizationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteOrganizationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*organization.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteOrganizationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*organization.Reference, bool) {
	res, ok := fpaov.values.([]*organization.Reference)
	return res, ok
}
