// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_service.proto
// DO NOT EDIT!!!

package organization_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetOrganizationRequest) GotenObjectExt() {}

func (o *GetOrganizationRequest) MakeFullFieldMask() *GetOrganizationRequest_FieldMask {
	return FullGetOrganizationRequest_FieldMask()
}

func (o *GetOrganizationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetOrganizationRequest_FieldMask()
}

func (o *GetOrganizationRequest) MakeDiffFieldMask(other *GetOrganizationRequest) *GetOrganizationRequest_FieldMask {
	if o == nil && other == nil {
		return &GetOrganizationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetOrganizationRequest_FieldMask()
	}

	res := &GetOrganizationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetOrganizationRequest_FieldTerminalPath{selector: GetOrganizationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetOrganizationRequest_FieldTerminalPath{selector: GetOrganizationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetOrganizationRequest_FieldTerminalPath{selector: GetOrganizationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetOrganizationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetOrganizationRequest))
}

func (o *GetOrganizationRequest) Clone() *GetOrganizationRequest {
	if o == nil {
		return nil
	}
	result := &GetOrganizationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	result.View = o.View
	return result
}

func (o *GetOrganizationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetOrganizationRequest) Merge(source *GetOrganizationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetOrganizationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetOrganizationRequest))
}

func (o *BatchGetOrganizationsRequest) GotenObjectExt() {}

func (o *BatchGetOrganizationsRequest) MakeFullFieldMask() *BatchGetOrganizationsRequest_FieldMask {
	return FullBatchGetOrganizationsRequest_FieldMask()
}

func (o *BatchGetOrganizationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOrganizationsRequest_FieldMask()
}

func (o *BatchGetOrganizationsRequest) MakeDiffFieldMask(other *BatchGetOrganizationsRequest) *BatchGetOrganizationsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOrganizationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOrganizationsRequest_FieldMask()
	}

	res := &BatchGetOrganizationsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetOrganizationsRequest_FieldTerminalPath{selector: BatchGetOrganizationsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetOrganizationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOrganizationsRequest))
}

func (o *BatchGetOrganizationsRequest) Clone() *BatchGetOrganizationsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetOrganizationsRequest{}
	result.Names = make([]*organization.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &organization.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetOrganizationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOrganizationsRequest) Merge(source *BatchGetOrganizationsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &organization.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetOrganizationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOrganizationsRequest))
}

func (o *BatchGetOrganizationsResponse) GotenObjectExt() {}

func (o *BatchGetOrganizationsResponse) MakeFullFieldMask() *BatchGetOrganizationsResponse_FieldMask {
	return FullBatchGetOrganizationsResponse_FieldMask()
}

func (o *BatchGetOrganizationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOrganizationsResponse_FieldMask()
}

func (o *BatchGetOrganizationsResponse) MakeDiffFieldMask(other *BatchGetOrganizationsResponse) *BatchGetOrganizationsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOrganizationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOrganizationsResponse_FieldMask()
	}

	res := &BatchGetOrganizationsResponse_FieldMask{}

	if len(o.GetOrganizations()) == len(other.GetOrganizations()) {
		for i, lValue := range o.GetOrganizations() {
			rValue := other.GetOrganizations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetOrganizationsResponse_FieldTerminalPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorOrganizations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOrganizationsResponse_FieldTerminalPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorOrganizations})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOrganizationsResponse_FieldTerminalPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOrganizationsResponse_FieldTerminalPath{selector: BatchGetOrganizationsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetOrganizationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOrganizationsResponse))
}

func (o *BatchGetOrganizationsResponse) Clone() *BatchGetOrganizationsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetOrganizationsResponse{}
	result.Organizations = make([]*organization.Organization, len(o.Organizations))
	for i, sourceValue := range o.Organizations {
		result.Organizations[i] = sourceValue.Clone()
	}
	result.Missing = make([]*organization.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &organization.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetOrganizationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOrganizationsResponse) Merge(source *BatchGetOrganizationsResponse) {
	for _, sourceValue := range source.GetOrganizations() {
		exists := false
		for _, currentValue := range o.Organizations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization.Organization
			if sourceValue != nil {
				newDstElement = new(organization.Organization)
				newDstElement.Merge(sourceValue)
			}
			o.Organizations = append(o.Organizations, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &organization.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetOrganizationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOrganizationsResponse))
}

func (o *ListOrganizationsRequest) GotenObjectExt() {}

func (o *ListOrganizationsRequest) MakeFullFieldMask() *ListOrganizationsRequest_FieldMask {
	return FullListOrganizationsRequest_FieldMask()
}

func (o *ListOrganizationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOrganizationsRequest_FieldMask()
}

func (o *ListOrganizationsRequest) MakeDiffFieldMask(other *ListOrganizationsRequest) *ListOrganizationsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListOrganizationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOrganizationsRequest_FieldMask()
	}

	res := &ListOrganizationsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListOrganizationsRequest_FieldTerminalPath{selector: ListOrganizationsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListOrganizationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOrganizationsRequest))
}

func (o *ListOrganizationsRequest) Clone() *ListOrganizationsRequest {
	if o == nil {
		return nil
	}
	result := &ListOrganizationsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &organization.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &organization.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &organization.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	result.View = o.View
	return result
}

func (o *ListOrganizationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOrganizationsRequest) Merge(source *ListOrganizationsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &organization.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &organization.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &organization.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListOrganizationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOrganizationsRequest))
}

func (o *ListOrganizationsResponse) GotenObjectExt() {}

func (o *ListOrganizationsResponse) MakeFullFieldMask() *ListOrganizationsResponse_FieldMask {
	return FullListOrganizationsResponse_FieldMask()
}

func (o *ListOrganizationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOrganizationsResponse_FieldMask()
}

func (o *ListOrganizationsResponse) MakeDiffFieldMask(other *ListOrganizationsResponse) *ListOrganizationsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListOrganizationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOrganizationsResponse_FieldMask()
	}

	res := &ListOrganizationsResponse_FieldMask{}

	if len(o.GetOrganizations()) == len(other.GetOrganizations()) {
		for i, lValue := range o.GetOrganizations() {
			rValue := other.GetOrganizations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorOrganizations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorOrganizations})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListOrganizationsResponse_FieldTerminalPath{selector: ListOrganizationsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListOrganizationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOrganizationsResponse))
}

func (o *ListOrganizationsResponse) Clone() *ListOrganizationsResponse {
	if o == nil {
		return nil
	}
	result := &ListOrganizationsResponse{}
	result.Organizations = make([]*organization.Organization, len(o.Organizations))
	for i, sourceValue := range o.Organizations {
		result.Organizations[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &organization.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &organization.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListOrganizationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOrganizationsResponse) Merge(source *ListOrganizationsResponse) {
	for _, sourceValue := range source.GetOrganizations() {
		exists := false
		for _, currentValue := range o.Organizations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization.Organization
			if sourceValue != nil {
				newDstElement = new(organization.Organization)
				newDstElement.Merge(sourceValue)
			}
			o.Organizations = append(o.Organizations, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &organization.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &organization.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListOrganizationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOrganizationsResponse))
}

func (o *WatchOrganizationRequest) GotenObjectExt() {}

func (o *WatchOrganizationRequest) MakeFullFieldMask() *WatchOrganizationRequest_FieldMask {
	return FullWatchOrganizationRequest_FieldMask()
}

func (o *WatchOrganizationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationRequest_FieldMask()
}

func (o *WatchOrganizationRequest) MakeDiffFieldMask(other *WatchOrganizationRequest) *WatchOrganizationRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationRequest_FieldMask()
	}

	res := &WatchOrganizationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchOrganizationRequest_FieldTerminalPath{selector: WatchOrganizationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOrganizationRequest_FieldTerminalPath{selector: WatchOrganizationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOrganizationRequest_FieldTerminalPath{selector: WatchOrganizationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchOrganizationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationRequest))
}

func (o *WatchOrganizationRequest) Clone() *WatchOrganizationRequest {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchOrganizationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationRequest) Merge(source *WatchOrganizationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchOrganizationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationRequest))
}

func (o *WatchOrganizationResponse) GotenObjectExt() {}

func (o *WatchOrganizationResponse) MakeFullFieldMask() *WatchOrganizationResponse_FieldMask {
	return FullWatchOrganizationResponse_FieldMask()
}

func (o *WatchOrganizationResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationResponse_FieldMask()
}

func (o *WatchOrganizationResponse) MakeDiffFieldMask(other *WatchOrganizationResponse) *WatchOrganizationResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationResponse_FieldMask()
	}

	res := &WatchOrganizationResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchOrganizationResponse_FieldTerminalPath{selector: WatchOrganizationResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchOrganizationResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationResponse))
}

func (o *WatchOrganizationResponse) Clone() *WatchOrganizationResponse {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationResponse{}
	result.Change = proto.Clone(o.Change).(*organization.OrganizationChange)
	return result
}

func (o *WatchOrganizationResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationResponse) Merge(source *WatchOrganizationResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(organization.OrganizationChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchOrganizationResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationResponse))
}

func (o *WatchOrganizationsRequest) GotenObjectExt() {}

func (o *WatchOrganizationsRequest) MakeFullFieldMask() *WatchOrganizationsRequest_FieldMask {
	return FullWatchOrganizationsRequest_FieldMask()
}

func (o *WatchOrganizationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationsRequest_FieldMask()
}

func (o *WatchOrganizationsRequest) MakeDiffFieldMask(other *WatchOrganizationsRequest) *WatchOrganizationsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationsRequest_FieldMask()
	}

	res := &WatchOrganizationsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchOrganizationsRequest_FieldTerminalPath{selector: WatchOrganizationsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchOrganizationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationsRequest))
}

func (o *WatchOrganizationsRequest) Clone() *WatchOrganizationsRequest {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &organization.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &organization.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &organization.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchOrganizationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationsRequest) Merge(source *WatchOrganizationsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &organization.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &organization.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &organization.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchOrganizationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationsRequest))
}

func (o *WatchOrganizationsResponse) GotenObjectExt() {}

func (o *WatchOrganizationsResponse) MakeFullFieldMask() *WatchOrganizationsResponse_FieldMask {
	return FullWatchOrganizationsResponse_FieldMask()
}

func (o *WatchOrganizationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationsResponse_FieldMask()
}

func (o *WatchOrganizationsResponse) MakeDiffFieldMask(other *WatchOrganizationsResponse) *WatchOrganizationsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationsResponse_FieldMask()
	}

	res := &WatchOrganizationsResponse_FieldMask{}

	if len(o.GetOrganizationChanges()) == len(other.GetOrganizationChanges()) {
		for i, lValue := range o.GetOrganizationChanges() {
			rValue := other.GetOrganizationChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorOrganizationChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldSubPath{selector: WatchOrganizationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponse_FieldTerminalPath{selector: WatchOrganizationsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchOrganizationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationsResponse))
}

func (o *WatchOrganizationsResponse) Clone() *WatchOrganizationsResponse {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationsResponse{}
	result.OrganizationChanges = make([]*organization.OrganizationChange, len(o.OrganizationChanges))
	for i, sourceValue := range o.OrganizationChanges {
		result.OrganizationChanges[i] = proto.Clone(sourceValue).(*organization.OrganizationChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchOrganizationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationsResponse) Merge(source *WatchOrganizationsResponse) {
	for _, sourceValue := range source.GetOrganizationChanges() {
		exists := false
		for _, currentValue := range o.OrganizationChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization.OrganizationChange
			if sourceValue != nil {
				newDstElement = new(organization.OrganizationChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.OrganizationChanges = append(o.OrganizationChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchOrganizationsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchOrganizationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationsResponse))
}

func (o *WatchOrganizationsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchOrganizationsResponse_PageTokenChange) MakeFullFieldMask() *WatchOrganizationsResponse_PageTokenChange_FieldMask {
	return FullWatchOrganizationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchOrganizationsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOrganizationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchOrganizationsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchOrganizationsResponse_PageTokenChange) *WatchOrganizationsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchOrganizationsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOrganizationsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchOrganizationsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchOrganizationsResponsePageTokenChange_FieldTerminalPath{selector: WatchOrganizationsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchOrganizationsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOrganizationsResponse_PageTokenChange))
}

func (o *WatchOrganizationsResponse_PageTokenChange) Clone() *WatchOrganizationsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchOrganizationsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &organization.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &organization.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchOrganizationsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOrganizationsResponse_PageTokenChange) Merge(source *WatchOrganizationsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &organization.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &organization.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchOrganizationsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOrganizationsResponse_PageTokenChange))
}

func (o *CreateOrganizationRequest) GotenObjectExt() {}

func (o *CreateOrganizationRequest) MakeFullFieldMask() *CreateOrganizationRequest_FieldMask {
	return FullCreateOrganizationRequest_FieldMask()
}

func (o *CreateOrganizationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateOrganizationRequest_FieldMask()
}

func (o *CreateOrganizationRequest) MakeDiffFieldMask(other *CreateOrganizationRequest) *CreateOrganizationRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateOrganizationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateOrganizationRequest_FieldMask()
	}

	res := &CreateOrganizationRequest_FieldMask{}
	{
		subMask := o.GetOrganization().MakeDiffFieldMask(other.GetOrganization())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateOrganizationRequest_FieldTerminalPath{selector: CreateOrganizationRequest_FieldPathSelectorOrganization})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateOrganizationRequest_FieldSubPath{selector: CreateOrganizationRequest_FieldPathSelectorOrganization, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateOrganizationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateOrganizationRequest))
}

func (o *CreateOrganizationRequest) Clone() *CreateOrganizationRequest {
	if o == nil {
		return nil
	}
	result := &CreateOrganizationRequest{}
	result.Organization = o.Organization.Clone()
	return result
}

func (o *CreateOrganizationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateOrganizationRequest) Merge(source *CreateOrganizationRequest) {
	if source.GetOrganization() != nil {
		if o.Organization == nil {
			o.Organization = new(organization.Organization)
		}
		o.Organization.Merge(source.GetOrganization())
	}
}

func (o *CreateOrganizationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateOrganizationRequest))
}

func (o *UpdateOrganizationRequest) GotenObjectExt() {}

func (o *UpdateOrganizationRequest) MakeFullFieldMask() *UpdateOrganizationRequest_FieldMask {
	return FullUpdateOrganizationRequest_FieldMask()
}

func (o *UpdateOrganizationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOrganizationRequest_FieldMask()
}

func (o *UpdateOrganizationRequest) MakeDiffFieldMask(other *UpdateOrganizationRequest) *UpdateOrganizationRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateOrganizationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOrganizationRequest_FieldMask()
	}

	res := &UpdateOrganizationRequest_FieldMask{}
	{
		subMask := o.GetOrganization().MakeDiffFieldMask(other.GetOrganization())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOrganizationRequest_FieldTerminalPath{selector: UpdateOrganizationRequest_FieldPathSelectorOrganization})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOrganizationRequest_FieldSubPath{selector: UpdateOrganizationRequest_FieldPathSelectorOrganization, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateOrganizationRequest_FieldTerminalPath{selector: UpdateOrganizationRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOrganizationRequest_FieldTerminalPath{selector: UpdateOrganizationRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOrganizationRequest_FieldSubPath{selector: UpdateOrganizationRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateOrganizationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOrganizationRequest))
}

func (o *UpdateOrganizationRequest) Clone() *UpdateOrganizationRequest {
	if o == nil {
		return nil
	}
	result := &UpdateOrganizationRequest{}
	result.Organization = o.Organization.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*organization.Organization_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateOrganizationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOrganizationRequest) Merge(source *UpdateOrganizationRequest) {
	if source.GetOrganization() != nil {
		if o.Organization == nil {
			o.Organization = new(organization.Organization)
		}
		o.Organization.Merge(source.GetOrganization())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateOrganizationRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateOrganizationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOrganizationRequest))
}

func (o *UpdateOrganizationRequest_CAS) GotenObjectExt() {}

func (o *UpdateOrganizationRequest_CAS) MakeFullFieldMask() *UpdateOrganizationRequest_CAS_FieldMask {
	return FullUpdateOrganizationRequest_CAS_FieldMask()
}

func (o *UpdateOrganizationRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOrganizationRequest_CAS_FieldMask()
}

func (o *UpdateOrganizationRequest_CAS) MakeDiffFieldMask(other *UpdateOrganizationRequest_CAS) *UpdateOrganizationRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateOrganizationRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOrganizationRequest_CAS_FieldMask()
	}

	res := &UpdateOrganizationRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOrganizationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOrganizationRequestCAS_FieldSubPath{selector: UpdateOrganizationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateOrganizationRequestCAS_FieldTerminalPath{selector: UpdateOrganizationRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateOrganizationRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOrganizationRequest_CAS))
}

func (o *UpdateOrganizationRequest_CAS) Clone() *UpdateOrganizationRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateOrganizationRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	return result
}

func (o *UpdateOrganizationRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOrganizationRequest_CAS) Merge(source *UpdateOrganizationRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(organization.Organization)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateOrganizationRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOrganizationRequest_CAS))
}

func (o *DeleteOrganizationRequest) GotenObjectExt() {}

func (o *DeleteOrganizationRequest) MakeFullFieldMask() *DeleteOrganizationRequest_FieldMask {
	return FullDeleteOrganizationRequest_FieldMask()
}

func (o *DeleteOrganizationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteOrganizationRequest_FieldMask()
}

func (o *DeleteOrganizationRequest) MakeDiffFieldMask(other *DeleteOrganizationRequest) *DeleteOrganizationRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteOrganizationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteOrganizationRequest_FieldMask()
	}

	res := &DeleteOrganizationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteOrganizationRequest_FieldTerminalPath{selector: DeleteOrganizationRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteOrganizationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteOrganizationRequest))
}

func (o *DeleteOrganizationRequest) Clone() *DeleteOrganizationRequest {
	if o == nil {
		return nil
	}
	result := &DeleteOrganizationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &organization.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteOrganizationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteOrganizationRequest) Merge(source *DeleteOrganizationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &organization.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteOrganizationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteOrganizationRequest))
}
