// Code generated by protoc-gen-goten-client
// API: OrganizationService
// DO NOT EDIT!!!

package organization_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrganizationServiceClient is the client API for OrganizationService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*organization.Organization, error)
	BatchGetOrganizations(ctx context.Context, in *BatchGetOrganizationsRequest, opts ...grpc.CallOption) (*BatchGetOrganizationsResponse, error)
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	WatchOrganization(ctx context.Context, in *WatchOrganizationRequest, opts ...grpc.CallOption) (WatchOrganizationClientStream, error)
	WatchOrganizations(ctx context.Context, in *WatchOrganizationsRequest, opts ...grpc.CallOption) (WatchOrganizationsClientStream, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*organization.Organization, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*organization.Organization, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMyOrganizations(ctx context.Context, in *ListMyOrganizationsRequest, opts ...grpc.CallOption) (*ListMyOrganizationsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &client{cc}
}

func (c *client) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*organization.Organization, error) {
	out := new(organization.Organization)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetOrganizations(ctx context.Context, in *BatchGetOrganizationsRequest, opts ...grpc.CallOption) (*BatchGetOrganizationsResponse, error) {
	out := new(BatchGetOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/BatchGetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchOrganization(ctx context.Context, in *WatchOrganizationRequest, opts ...grpc.CallOption) (WatchOrganizationClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchOrganization",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.OrganizationService/WatchOrganization", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchOrganizationWatchOrganizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchOrganizationClientStream interface {
	Recv() (*WatchOrganizationResponse, error)
	grpc.ClientStream
}

type watchOrganizationWatchOrganizationClient struct {
	grpc.ClientStream
}

func (x *watchOrganizationWatchOrganizationClient) Recv() (*WatchOrganizationResponse, error) {
	m := new(WatchOrganizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchOrganizations(ctx context.Context, in *WatchOrganizationsRequest, opts ...grpc.CallOption) (WatchOrganizationsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchOrganizations",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.OrganizationService/WatchOrganizations", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchOrganizationsWatchOrganizationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchOrganizationsClientStream interface {
	Recv() (*WatchOrganizationsResponse, error)
	grpc.ClientStream
}

type watchOrganizationsWatchOrganizationsClient struct {
	grpc.ClientStream
}

func (x *watchOrganizationsWatchOrganizationsClient) Recv() (*WatchOrganizationsResponse, error) {
	m := new(WatchOrganizationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*organization.Organization, error) {
	out := new(organization.Organization)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*organization.Organization, error) {
	out := new(organization.Organization)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMyOrganizations(ctx context.Context, in *ListMyOrganizationsRequest, opts ...grpc.CallOption) (*ListMyOrganizationsResponse, error) {
	out := new(ListMyOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.OrganizationService/ListMyOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
