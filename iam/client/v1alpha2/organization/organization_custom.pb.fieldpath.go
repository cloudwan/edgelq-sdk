// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_custom.proto
// DO NOT EDIT!!!

package organization_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &field_mask.FieldMask{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMyOrganizationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMyOrganizationsRequest_FieldPathSelector
	Get(source *ListMyOrganizationsRequest) []interface{}
	GetSingle(source *ListMyOrganizationsRequest) (interface{}, bool)
	ClearValue(item *ListMyOrganizationsRequest)

	// Those methods build corresponding ListMyOrganizationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMyOrganizationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMyOrganizationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMyOrganizationsRequest_FieldPathArrayItemValue
}

type ListMyOrganizationsRequest_FieldPathSelector int32

const (
	ListMyOrganizationsRequest_FieldPathSelectorFilter    ListMyOrganizationsRequest_FieldPathSelector = 0
	ListMyOrganizationsRequest_FieldPathSelectorFieldMask ListMyOrganizationsRequest_FieldPathSelector = 1
)

func (s ListMyOrganizationsRequest_FieldPathSelector) String() string {
	switch s {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", s))
	}
}

func BuildListMyOrganizationsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListMyOrganizationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMyOrganizationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "filter":
			return &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorFieldMask}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMyOrganizationsRequest", fp)
}

func ParseListMyOrganizationsRequest_FieldPath(rawField string) (ListMyOrganizationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMyOrganizationsRequest_FieldPath(fp)
}

func MustParseListMyOrganizationsRequest_FieldPath(rawField string) ListMyOrganizationsRequest_FieldPath {
	fp, err := ParseListMyOrganizationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMyOrganizationsRequest_FieldTerminalPath struct {
	selector ListMyOrganizationsRequest_FieldPathSelector
}

var _ ListMyOrganizationsRequest_FieldPath = (*ListMyOrganizationsRequest_FieldTerminalPath)(nil)

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) Selector() ListMyOrganizationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMyOrganizationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMyOrganizationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMyOrganizationsRequest
func (fp *ListMyOrganizationsRequest_FieldTerminalPath) Get(source *ListMyOrganizationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMyOrganizationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMyOrganizationsRequest))
}

// GetSingle returns value pointed by specific field of from source ListMyOrganizationsRequest
func (fp *ListMyOrganizationsRequest_FieldTerminalPath) GetSingle(source *ListMyOrganizationsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMyOrganizationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListMyOrganizationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		return (*organization.Filter)(nil)
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		return (*organization.Organization_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) ClearValue(item *ListMyOrganizationsRequest) {
	if item != nil {
		switch fp.selector {
		case ListMyOrganizationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMyOrganizationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMyOrganizationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMyOrganizationsRequest_FieldPathSelectorFilter ||
		fp.selector == ListMyOrganizationsRequest_FieldPathSelectorFieldMask
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) WithIValue(value interface{}) ListMyOrganizationsRequest_FieldPathValue {
	switch fp.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		return &ListMyOrganizationsRequest_FieldTerminalPathValue{ListMyOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Filter)}
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		return &ListMyOrganizationsRequest_FieldTerminalPathValue{ListMyOrganizationsRequest_FieldTerminalPath: *fp, value: value.(*organization.Organization_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMyOrganizationsRequest_FieldPathArrayOfValues {
	fpaov := &ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues{ListMyOrganizationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		return &ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues{ListMyOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Filter)}
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		return &ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues{ListMyOrganizationsRequest_FieldTerminalPath: *fp, values: values.([]*organization.Organization_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMyOrganizationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListMyOrganizationsRequest_FieldPathValue allows storing values for ListMyOrganizationsRequest fields according to their type
type ListMyOrganizationsRequest_FieldPathValue interface {
	ListMyOrganizationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMyOrganizationsRequest)
	CompareWith(*ListMyOrganizationsRequest) (cmp int, comparable bool)
}

func ParseListMyOrganizationsRequest_FieldPathValue(pathStr, valueStr string) (ListMyOrganizationsRequest_FieldPathValue, error) {
	fp, err := ParseListMyOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyOrganizationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMyOrganizationsRequest_FieldPathValue), nil
}

func MustParseListMyOrganizationsRequest_FieldPathValue(pathStr, valueStr string) ListMyOrganizationsRequest_FieldPathValue {
	fpv, err := ParseListMyOrganizationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMyOrganizationsRequest_FieldTerminalPathValue struct {
	ListMyOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMyOrganizationsRequest_FieldPathValue = (*ListMyOrganizationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMyOrganizationsRequest' as interface{}
func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) AsFilterValue() (*organization.Filter, bool) {
	res, ok := fpv.value.(*organization.Filter)
	return res, ok
}
func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*organization.Organization_FieldMask, bool) {
	res, ok := fpv.value.(*organization.Organization_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object ListMyOrganizationsRequest
func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) SetTo(target **ListMyOrganizationsRequest) {
	if *target == nil {
		*target = new(ListMyOrganizationsRequest)
	}
	switch fpv.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*organization.Filter)
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*organization.Organization_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyOrganizationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMyOrganizationsRequest_FieldTerminalPathValue' with the value under path in 'ListMyOrganizationsRequest'.
func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) CompareWith(source *ListMyOrganizationsRequest) (int, bool) {
	switch fpv.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMyOrganizationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMyOrganizationsRequest))
}

// ListMyOrganizationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMyOrganizationsRequest according to their type
// Present only for array (repeated) types.
type ListMyOrganizationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMyOrganizationsRequest_FieldPath
	ContainsValue(*ListMyOrganizationsRequest) bool
}

// ParseListMyOrganizationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMyOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListMyOrganizationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListMyOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyOrganizationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMyOrganizationsRequest_FieldPathArrayItemValue), nil
}

func MustParseListMyOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListMyOrganizationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListMyOrganizationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMyOrganizationsRequest_FieldTerminalPathArrayItemValue struct {
	ListMyOrganizationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMyOrganizationsRequest_FieldPathArrayItemValue = (*ListMyOrganizationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMyOrganizationsRequest as interface{}
func (fpaiv *ListMyOrganizationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListMyOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListMyOrganizationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMyOrganizationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMyOrganizationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyOrganizationsRequest'
func (fpaiv *ListMyOrganizationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMyOrganizationsRequest) bool {
	slice := fpaiv.ListMyOrganizationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListMyOrganizationsRequest_FieldPathArrayOfValues allows storing slice of values for ListMyOrganizationsRequest fields according to their type
type ListMyOrganizationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMyOrganizationsRequest_FieldPath
}

func ParseListMyOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMyOrganizationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListMyOrganizationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyOrganizationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMyOrganizationsRequest_FieldPathArrayOfValues), nil
}

func MustParseListMyOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListMyOrganizationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListMyOrganizationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues struct {
	ListMyOrganizationsRequest_FieldTerminalPath
	values interface{}
}

var _ ListMyOrganizationsRequest_FieldPathArrayOfValues = (*ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMyOrganizationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*organization.Filter) {
			values = append(values, v)
		}
	case ListMyOrganizationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*organization.Organization_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*organization.Filter, bool) {
	res, ok := fpaov.values.([]*organization.Filter)
	return res, ok
}
func (fpaov *ListMyOrganizationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*organization.Organization_FieldMask, bool) {
	res, ok := fpaov.values.([]*organization.Organization_FieldMask)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMyOrganizationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMyOrganizationsResponse_FieldPathSelector
	Get(source *ListMyOrganizationsResponse) []interface{}
	GetSingle(source *ListMyOrganizationsResponse) (interface{}, bool)
	ClearValue(item *ListMyOrganizationsResponse)

	// Those methods build corresponding ListMyOrganizationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMyOrganizationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMyOrganizationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMyOrganizationsResponse_FieldPathArrayItemValue
}

type ListMyOrganizationsResponse_FieldPathSelector int32

const (
	ListMyOrganizationsResponse_FieldPathSelectorOrganizations ListMyOrganizationsResponse_FieldPathSelector = 0
)

func (s ListMyOrganizationsResponse_FieldPathSelector) String() string {
	switch s {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return "organizations"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", s))
	}
}

func BuildListMyOrganizationsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListMyOrganizationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMyOrganizationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "organizations":
			return &ListMyOrganizationsResponse_FieldTerminalPath{selector: ListMyOrganizationsResponse_FieldPathSelectorOrganizations}, nil
		}
	} else {
		switch fp[0] {
		case "organizations":
			if subpath, err := organization.BuildOrganization_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListMyOrganizationsResponse_FieldSubPath{selector: ListMyOrganizationsResponse_FieldPathSelectorOrganizations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMyOrganizationsResponse", fp)
}

func ParseListMyOrganizationsResponse_FieldPath(rawField string) (ListMyOrganizationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMyOrganizationsResponse_FieldPath(fp)
}

func MustParseListMyOrganizationsResponse_FieldPath(rawField string) ListMyOrganizationsResponse_FieldPath {
	fp, err := ParseListMyOrganizationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMyOrganizationsResponse_FieldTerminalPath struct {
	selector ListMyOrganizationsResponse_FieldPathSelector
}

var _ ListMyOrganizationsResponse_FieldPath = (*ListMyOrganizationsResponse_FieldTerminalPath)(nil)

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) Selector() ListMyOrganizationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMyOrganizationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMyOrganizationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMyOrganizationsResponse
func (fp *ListMyOrganizationsResponse_FieldTerminalPath) Get(source *ListMyOrganizationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
			for _, value := range source.GetOrganizations() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMyOrganizationsResponse))
}

// GetSingle returns value pointed by specific field of from source ListMyOrganizationsResponse
func (fp *ListMyOrganizationsResponse_FieldTerminalPath) GetSingle(source *ListMyOrganizationsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		res := source.GetOrganizations()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMyOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListMyOrganizationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return ([]*organization.Organization)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) ClearValue(item *ListMyOrganizationsResponse) {
	if item != nil {
		switch fp.selector {
		case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
			item.Organizations = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMyOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMyOrganizationsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) WithIValue(value interface{}) ListMyOrganizationsResponse_FieldPathValue {
	switch fp.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return &ListMyOrganizationsResponse_FieldTerminalPathValue{ListMyOrganizationsResponse_FieldTerminalPath: *fp, value: value.([]*organization.Organization)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMyOrganizationsResponse_FieldPathArrayOfValues {
	fpaov := &ListMyOrganizationsResponse_FieldTerminalPathArrayOfValues{ListMyOrganizationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return &ListMyOrganizationsResponse_FieldTerminalPathArrayOfValues{ListMyOrganizationsResponse_FieldTerminalPath: *fp, values: values.([][]*organization.Organization)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMyOrganizationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return &ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue{ListMyOrganizationsResponse_FieldTerminalPath: *fp, value: value.(*organization.Organization)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fp.selector))
	}
}

func (fp *ListMyOrganizationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListMyOrganizationsResponse_FieldSubPath struct {
	selector ListMyOrganizationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListMyOrganizationsResponse_FieldPath = (*ListMyOrganizationsResponse_FieldSubPath)(nil)

func (fps *ListMyOrganizationsResponse_FieldSubPath) Selector() ListMyOrganizationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListMyOrganizationsResponse_FieldSubPath) AsOrganizationsSubPath() (organization.Organization_FieldPath, bool) {
	res, ok := fps.subPath.(organization.Organization_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListMyOrganizationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListMyOrganizationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListMyOrganizationsResponse
func (fps *ListMyOrganizationsResponse_FieldSubPath) Get(source *ListMyOrganizationsResponse) (values []interface{}) {
	if asOrganizationFieldPath, ok := fps.AsOrganizationsSubPath(); ok {
		for _, item := range source.GetOrganizations() {
			values = append(values, asOrganizationFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListMyOrganizationsResponse))
}

// GetSingle returns value of selected field from source ListMyOrganizationsResponse
func (fps *ListMyOrganizationsResponse_FieldSubPath) GetSingle(source *ListMyOrganizationsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		if len(source.GetOrganizations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOrganizations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fps.selector))
	}
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListMyOrganizationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListMyOrganizationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) ClearValue(item *ListMyOrganizationsResponse) {
	if item != nil {
		switch fps.selector {
		case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
			for _, subItem := range item.Organizations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListMyOrganizationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListMyOrganizationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) WithIValue(value interface{}) ListMyOrganizationsResponse_FieldPathValue {
	return &ListMyOrganizationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListMyOrganizationsResponse_FieldPathArrayOfValues {
	return &ListMyOrganizationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListMyOrganizationsResponse_FieldPathArrayItemValue {
	return &ListMyOrganizationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListMyOrganizationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListMyOrganizationsResponse_FieldPathValue allows storing values for ListMyOrganizationsResponse fields according to their type
type ListMyOrganizationsResponse_FieldPathValue interface {
	ListMyOrganizationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMyOrganizationsResponse)
	CompareWith(*ListMyOrganizationsResponse) (cmp int, comparable bool)
}

func ParseListMyOrganizationsResponse_FieldPathValue(pathStr, valueStr string) (ListMyOrganizationsResponse_FieldPathValue, error) {
	fp, err := ParseListMyOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyOrganizationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMyOrganizationsResponse_FieldPathValue), nil
}

func MustParseListMyOrganizationsResponse_FieldPathValue(pathStr, valueStr string) ListMyOrganizationsResponse_FieldPathValue {
	fpv, err := ParseListMyOrganizationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMyOrganizationsResponse_FieldTerminalPathValue struct {
	ListMyOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMyOrganizationsResponse_FieldPathValue = (*ListMyOrganizationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMyOrganizationsResponse' as interface{}
func (fpv *ListMyOrganizationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMyOrganizationsResponse_FieldTerminalPathValue) AsOrganizationsValue() ([]*organization.Organization, bool) {
	res, ok := fpv.value.([]*organization.Organization)
	return res, ok
}

// SetTo stores value for selected field for object ListMyOrganizationsResponse
func (fpv *ListMyOrganizationsResponse_FieldTerminalPathValue) SetTo(target **ListMyOrganizationsResponse) {
	if *target == nil {
		*target = new(ListMyOrganizationsResponse)
	}
	switch fpv.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		(*target).Organizations = fpv.value.([]*organization.Organization)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMyOrganizationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyOrganizationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMyOrganizationsResponse_FieldTerminalPathValue' with the value under path in 'ListMyOrganizationsResponse'.
func (fpv *ListMyOrganizationsResponse_FieldTerminalPathValue) CompareWith(source *ListMyOrganizationsResponse) (int, bool) {
	switch fpv.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMyOrganizationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMyOrganizationsResponse))
}

type ListMyOrganizationsResponse_FieldSubPathValue struct {
	ListMyOrganizationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListMyOrganizationsResponse_FieldPathValue = (*ListMyOrganizationsResponse_FieldSubPathValue)(nil)

func (fpvs *ListMyOrganizationsResponse_FieldSubPathValue) AsOrganizationsPathValue() (organization.Organization_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(organization.Organization_FieldPathValue)
	return res, ok
}

func (fpvs *ListMyOrganizationsResponse_FieldSubPathValue) SetTo(target **ListMyOrganizationsResponse) {
	if *target == nil {
		*target = new(ListMyOrganizationsResponse)
	}
	switch fpvs.Selector() {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMyOrganizationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMyOrganizationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListMyOrganizationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListMyOrganizationsResponse_FieldSubPathValue) CompareWith(source *ListMyOrganizationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMyOrganizationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListMyOrganizationsResponse))
}

// ListMyOrganizationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMyOrganizationsResponse according to their type
// Present only for array (repeated) types.
type ListMyOrganizationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMyOrganizationsResponse_FieldPath
	ContainsValue(*ListMyOrganizationsResponse) bool
}

// ParseListMyOrganizationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMyOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListMyOrganizationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListMyOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyOrganizationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMyOrganizationsResponse_FieldPathArrayItemValue), nil
}

func MustParseListMyOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListMyOrganizationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListMyOrganizationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue struct {
	ListMyOrganizationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMyOrganizationsResponse_FieldPathArrayItemValue = (*ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMyOrganizationsResponse as interface{}
func (fpaiv *ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue) AsOrganizationsItemValue() (*organization.Organization, bool) {
	res, ok := fpaiv.value.(*organization.Organization)
	return res, ok
}

func (fpaiv *ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListMyOrganizationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMyOrganizationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyOrganizationsResponse'
func (fpaiv *ListMyOrganizationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMyOrganizationsResponse) bool {
	slice := fpaiv.ListMyOrganizationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListMyOrganizationsResponse_FieldSubPathArrayItemValue struct {
	ListMyOrganizationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListMyOrganizationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListMyOrganizationsResponse_FieldSubPathArrayItemValue) AsOrganizationsPathItemValue() (organization.Organization_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(organization.Organization_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMyOrganizationsResponse'
func (fpaivs *ListMyOrganizationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListMyOrganizationsResponse) bool {
	switch fpaivs.Selector() {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMyOrganizationsResponse: %d", fpaivs.Selector()))
	}
}

// ListMyOrganizationsResponse_FieldPathArrayOfValues allows storing slice of values for ListMyOrganizationsResponse fields according to their type
type ListMyOrganizationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMyOrganizationsResponse_FieldPath
}

func ParseListMyOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMyOrganizationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListMyOrganizationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMyOrganizationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMyOrganizationsResponse_FieldPathArrayOfValues), nil
}

func MustParseListMyOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListMyOrganizationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListMyOrganizationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMyOrganizationsResponse_FieldTerminalPathArrayOfValues struct {
	ListMyOrganizationsResponse_FieldTerminalPath
	values interface{}
}

var _ ListMyOrganizationsResponse_FieldPathArrayOfValues = (*ListMyOrganizationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMyOrganizationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMyOrganizationsResponse_FieldPathSelectorOrganizations:
		for _, v := range fpaov.values.([][]*organization.Organization) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMyOrganizationsResponse_FieldTerminalPathArrayOfValues) AsOrganizationsArrayOfValues() ([][]*organization.Organization, bool) {
	res, ok := fpaov.values.([][]*organization.Organization)
	return res, ok
}

type ListMyOrganizationsResponse_FieldSubPathArrayOfValues struct {
	ListMyOrganizationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListMyOrganizationsResponse_FieldPathArrayOfValues = (*ListMyOrganizationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListMyOrganizationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListMyOrganizationsResponse_FieldSubPathArrayOfValues) AsOrganizationsPathArrayOfValues() (organization.Organization_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(organization.Organization_FieldPathArrayOfValues)
	return res, ok
}
