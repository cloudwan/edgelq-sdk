// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_custom.proto
// DO NOT EDIT!!!

package organization_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &field_mask.FieldMask{}
)

func (o *ListMyOrganizationsRequest) GotenObjectExt() {}

func (o *ListMyOrganizationsRequest) MakeFullFieldMask() *ListMyOrganizationsRequest_FieldMask {
	return FullListMyOrganizationsRequest_FieldMask()
}

func (o *ListMyOrganizationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMyOrganizationsRequest_FieldMask()
}

func (o *ListMyOrganizationsRequest) MakeDiffFieldMask(other *ListMyOrganizationsRequest) *ListMyOrganizationsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListMyOrganizationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMyOrganizationsRequest_FieldMask()
	}

	res := &ListMyOrganizationsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListMyOrganizationsRequest_FieldTerminalPath{selector: ListMyOrganizationsRequest_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *ListMyOrganizationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMyOrganizationsRequest))
}

func (o *ListMyOrganizationsRequest) Clone() *ListMyOrganizationsRequest {
	if o == nil {
		return nil
	}
	result := &ListMyOrganizationsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &organization.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &organization.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &organization.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*organization.Organization_FieldMask)
	return result
}

func (o *ListMyOrganizationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMyOrganizationsRequest) Merge(source *ListMyOrganizationsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &organization.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &organization.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &organization.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(organization.Organization_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *ListMyOrganizationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMyOrganizationsRequest))
}

func (o *ListMyOrganizationsResponse) GotenObjectExt() {}

func (o *ListMyOrganizationsResponse) MakeFullFieldMask() *ListMyOrganizationsResponse_FieldMask {
	return FullListMyOrganizationsResponse_FieldMask()
}

func (o *ListMyOrganizationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMyOrganizationsResponse_FieldMask()
}

func (o *ListMyOrganizationsResponse) MakeDiffFieldMask(other *ListMyOrganizationsResponse) *ListMyOrganizationsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListMyOrganizationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMyOrganizationsResponse_FieldMask()
	}

	res := &ListMyOrganizationsResponse_FieldMask{}

	if len(o.GetOrganizations()) == len(other.GetOrganizations()) {
		for i, lValue := range o.GetOrganizations() {
			rValue := other.GetOrganizations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListMyOrganizationsResponse_FieldTerminalPath{selector: ListMyOrganizationsResponse_FieldPathSelectorOrganizations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListMyOrganizationsResponse_FieldTerminalPath{selector: ListMyOrganizationsResponse_FieldPathSelectorOrganizations})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationsResponse_FieldTerminalPath{selector: ListMyOrganizationsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListMyOrganizationsResponse_FieldTerminalPath{selector: ListMyOrganizationsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListMyOrganizationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMyOrganizationsResponse))
}

func (o *ListMyOrganizationsResponse) Clone() *ListMyOrganizationsResponse {
	if o == nil {
		return nil
	}
	result := &ListMyOrganizationsResponse{}
	result.Organizations = make([]*organization.Organization, len(o.Organizations))
	for i, sourceValue := range o.Organizations {
		result.Organizations[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &organization.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &organization.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListMyOrganizationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMyOrganizationsResponse) Merge(source *ListMyOrganizationsResponse) {
	for _, sourceValue := range source.GetOrganizations() {
		exists := false
		for _, currentValue := range o.Organizations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *organization.Organization
			if sourceValue != nil {
				newDstElement = new(organization.Organization)
				newDstElement.Merge(sourceValue)
			}
			o.Organizations = append(o.Organizations, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &organization.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &organization.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListMyOrganizationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMyOrganizationsResponse))
}
