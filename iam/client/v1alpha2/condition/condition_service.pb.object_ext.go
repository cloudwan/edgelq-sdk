// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/condition_service.proto
// DO NOT EDIT!!!

package condition_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetConditionRequest) GotenObjectExt() {}

func (o *GetConditionRequest) MakeFullFieldMask() *GetConditionRequest_FieldMask {
	return FullGetConditionRequest_FieldMask()
}

func (o *GetConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetConditionRequest_FieldMask()
}

func (o *GetConditionRequest) MakeDiffFieldMask(other *GetConditionRequest) *GetConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetConditionRequest_FieldMask()
	}

	res := &GetConditionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetConditionRequest_FieldTerminalPath{selector: GetConditionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetConditionRequest_FieldTerminalPath{selector: GetConditionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetConditionRequest_FieldTerminalPath{selector: GetConditionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetConditionRequest))
}

func (o *GetConditionRequest) Clone() *GetConditionRequest {
	if o == nil {
		return nil
	}
	result := &GetConditionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &condition.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*condition.Condition_FieldMask)
	result.View = o.View
	return result
}

func (o *GetConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetConditionRequest) Merge(source *GetConditionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &condition.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetConditionRequest))
}

func (o *BatchGetConditionsRequest) GotenObjectExt() {}

func (o *BatchGetConditionsRequest) MakeFullFieldMask() *BatchGetConditionsRequest_FieldMask {
	return FullBatchGetConditionsRequest_FieldMask()
}

func (o *BatchGetConditionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetConditionsRequest_FieldMask()
}

func (o *BatchGetConditionsRequest) MakeDiffFieldMask(other *BatchGetConditionsRequest) *BatchGetConditionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetConditionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetConditionsRequest_FieldMask()
	}

	res := &BatchGetConditionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetConditionsRequest_FieldTerminalPath{selector: BatchGetConditionsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetConditionsRequest_FieldTerminalPath{selector: BatchGetConditionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetConditionsRequest_FieldTerminalPath{selector: BatchGetConditionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetConditionsRequest_FieldTerminalPath{selector: BatchGetConditionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetConditionsRequest_FieldTerminalPath{selector: BatchGetConditionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetConditionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetConditionsRequest))
}

func (o *BatchGetConditionsRequest) Clone() *BatchGetConditionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetConditionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &condition.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*condition.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &condition.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*condition.Condition_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetConditionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetConditionsRequest) Merge(source *BatchGetConditionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &condition.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *condition.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &condition.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetConditionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetConditionsRequest))
}

func (o *BatchGetConditionsResponse) GotenObjectExt() {}

func (o *BatchGetConditionsResponse) MakeFullFieldMask() *BatchGetConditionsResponse_FieldMask {
	return FullBatchGetConditionsResponse_FieldMask()
}

func (o *BatchGetConditionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetConditionsResponse_FieldMask()
}

func (o *BatchGetConditionsResponse) MakeDiffFieldMask(other *BatchGetConditionsResponse) *BatchGetConditionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetConditionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetConditionsResponse_FieldMask()
	}

	res := &BatchGetConditionsResponse_FieldMask{}

	if len(o.GetConditions()) == len(other.GetConditions()) {
		for i, lValue := range o.GetConditions() {
			rValue := other.GetConditions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetConditionsResponse_FieldTerminalPath{selector: BatchGetConditionsResponse_FieldPathSelectorConditions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetConditionsResponse_FieldTerminalPath{selector: BatchGetConditionsResponse_FieldPathSelectorConditions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetConditionsResponse_FieldTerminalPath{selector: BatchGetConditionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetConditionsResponse_FieldTerminalPath{selector: BatchGetConditionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetConditionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetConditionsResponse))
}

func (o *BatchGetConditionsResponse) Clone() *BatchGetConditionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetConditionsResponse{}
	result.Conditions = make([]*condition.Condition, len(o.Conditions))
	for i, sourceValue := range o.Conditions {
		result.Conditions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*condition.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &condition.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetConditionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetConditionsResponse) Merge(source *BatchGetConditionsResponse) {
	for _, sourceValue := range source.GetConditions() {
		exists := false
		for _, currentValue := range o.Conditions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *condition.Condition
			if sourceValue != nil {
				newDstElement = new(condition.Condition)
				newDstElement.Merge(sourceValue)
			}
			o.Conditions = append(o.Conditions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *condition.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &condition.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetConditionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetConditionsResponse))
}

func (o *ListConditionsRequest) GotenObjectExt() {}

func (o *ListConditionsRequest) MakeFullFieldMask() *ListConditionsRequest_FieldMask {
	return FullListConditionsRequest_FieldMask()
}

func (o *ListConditionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListConditionsRequest_FieldMask()
}

func (o *ListConditionsRequest) MakeDiffFieldMask(other *ListConditionsRequest) *ListConditionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListConditionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListConditionsRequest_FieldMask()
	}

	res := &ListConditionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListConditionsRequest_FieldTerminalPath{selector: ListConditionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListConditionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListConditionsRequest))
}

func (o *ListConditionsRequest) Clone() *ListConditionsRequest {
	if o == nil {
		return nil
	}
	result := &ListConditionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &condition.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &condition.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &condition.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &condition.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*condition.Condition_FieldMask)
	result.View = o.View
	return result
}

func (o *ListConditionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListConditionsRequest) Merge(source *ListConditionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &condition.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &condition.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &condition.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &condition.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListConditionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListConditionsRequest))
}

func (o *ListConditionsResponse) GotenObjectExt() {}

func (o *ListConditionsResponse) MakeFullFieldMask() *ListConditionsResponse_FieldMask {
	return FullListConditionsResponse_FieldMask()
}

func (o *ListConditionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListConditionsResponse_FieldMask()
}

func (o *ListConditionsResponse) MakeDiffFieldMask(other *ListConditionsResponse) *ListConditionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListConditionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListConditionsResponse_FieldMask()
	}

	res := &ListConditionsResponse_FieldMask{}

	if len(o.GetConditions()) == len(other.GetConditions()) {
		for i, lValue := range o.GetConditions() {
			rValue := other.GetConditions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListConditionsResponse_FieldTerminalPath{selector: ListConditionsResponse_FieldPathSelectorConditions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListConditionsResponse_FieldTerminalPath{selector: ListConditionsResponse_FieldPathSelectorConditions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListConditionsResponse_FieldTerminalPath{selector: ListConditionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListConditionsResponse_FieldTerminalPath{selector: ListConditionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListConditionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListConditionsResponse))
}

func (o *ListConditionsResponse) Clone() *ListConditionsResponse {
	if o == nil {
		return nil
	}
	result := &ListConditionsResponse{}
	result.Conditions = make([]*condition.Condition, len(o.Conditions))
	for i, sourceValue := range o.Conditions {
		result.Conditions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &condition.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &condition.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListConditionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListConditionsResponse) Merge(source *ListConditionsResponse) {
	for _, sourceValue := range source.GetConditions() {
		exists := false
		for _, currentValue := range o.Conditions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *condition.Condition
			if sourceValue != nil {
				newDstElement = new(condition.Condition)
				newDstElement.Merge(sourceValue)
			}
			o.Conditions = append(o.Conditions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &condition.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &condition.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListConditionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListConditionsResponse))
}

func (o *WatchConditionRequest) GotenObjectExt() {}

func (o *WatchConditionRequest) MakeFullFieldMask() *WatchConditionRequest_FieldMask {
	return FullWatchConditionRequest_FieldMask()
}

func (o *WatchConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConditionRequest_FieldMask()
}

func (o *WatchConditionRequest) MakeDiffFieldMask(other *WatchConditionRequest) *WatchConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConditionRequest_FieldMask()
	}

	res := &WatchConditionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchConditionRequest_FieldTerminalPath{selector: WatchConditionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchConditionRequest_FieldTerminalPath{selector: WatchConditionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchConditionRequest_FieldTerminalPath{selector: WatchConditionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConditionRequest))
}

func (o *WatchConditionRequest) Clone() *WatchConditionRequest {
	if o == nil {
		return nil
	}
	result := &WatchConditionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &condition.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*condition.Condition_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConditionRequest) Merge(source *WatchConditionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &condition.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConditionRequest))
}

func (o *WatchConditionResponse) GotenObjectExt() {}

func (o *WatchConditionResponse) MakeFullFieldMask() *WatchConditionResponse_FieldMask {
	return FullWatchConditionResponse_FieldMask()
}

func (o *WatchConditionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConditionResponse_FieldMask()
}

func (o *WatchConditionResponse) MakeDiffFieldMask(other *WatchConditionResponse) *WatchConditionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchConditionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConditionResponse_FieldMask()
	}

	res := &WatchConditionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchConditionResponse_FieldTerminalPath{selector: WatchConditionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchConditionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConditionResponse))
}

func (o *WatchConditionResponse) Clone() *WatchConditionResponse {
	if o == nil {
		return nil
	}
	result := &WatchConditionResponse{}
	result.Change = proto.Clone(o.Change).(*condition.ConditionChange)
	return result
}

func (o *WatchConditionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConditionResponse) Merge(source *WatchConditionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(condition.ConditionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchConditionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConditionResponse))
}

func (o *WatchConditionsRequest) GotenObjectExt() {}

func (o *WatchConditionsRequest) MakeFullFieldMask() *WatchConditionsRequest_FieldMask {
	return FullWatchConditionsRequest_FieldMask()
}

func (o *WatchConditionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConditionsRequest_FieldMask()
}

func (o *WatchConditionsRequest) MakeDiffFieldMask(other *WatchConditionsRequest) *WatchConditionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchConditionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConditionsRequest_FieldMask()
	}

	res := &WatchConditionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchConditionsRequest_FieldTerminalPath{selector: WatchConditionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchConditionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConditionsRequest))
}

func (o *WatchConditionsRequest) Clone() *WatchConditionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchConditionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &condition.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &condition.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &condition.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &condition.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*condition.Condition_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchConditionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConditionsRequest) Merge(source *WatchConditionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &condition.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &condition.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &condition.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &condition.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchConditionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConditionsRequest))
}

func (o *WatchConditionsResponse) GotenObjectExt() {}

func (o *WatchConditionsResponse) MakeFullFieldMask() *WatchConditionsResponse_FieldMask {
	return FullWatchConditionsResponse_FieldMask()
}

func (o *WatchConditionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConditionsResponse_FieldMask()
}

func (o *WatchConditionsResponse) MakeDiffFieldMask(other *WatchConditionsResponse) *WatchConditionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchConditionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConditionsResponse_FieldMask()
	}

	res := &WatchConditionsResponse_FieldMask{}

	if len(o.GetConditionChanges()) == len(other.GetConditionChanges()) {
		for i, lValue := range o.GetConditionChanges() {
			rValue := other.GetConditionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorConditionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorConditionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchConditionsResponse_FieldSubPath{selector: WatchConditionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchConditionsResponse_FieldTerminalPath{selector: WatchConditionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchConditionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConditionsResponse))
}

func (o *WatchConditionsResponse) Clone() *WatchConditionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchConditionsResponse{}
	result.ConditionChanges = make([]*condition.ConditionChange, len(o.ConditionChanges))
	for i, sourceValue := range o.ConditionChanges {
		result.ConditionChanges[i] = proto.Clone(sourceValue).(*condition.ConditionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchConditionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConditionsResponse) Merge(source *WatchConditionsResponse) {
	for _, sourceValue := range source.GetConditionChanges() {
		exists := false
		for _, currentValue := range o.ConditionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *condition.ConditionChange
			if sourceValue != nil {
				newDstElement = new(condition.ConditionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ConditionChanges = append(o.ConditionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchConditionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchConditionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConditionsResponse))
}

func (o *WatchConditionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchConditionsResponse_PageTokenChange) MakeFullFieldMask() *WatchConditionsResponse_PageTokenChange_FieldMask {
	return FullWatchConditionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchConditionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConditionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchConditionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchConditionsResponse_PageTokenChange) *WatchConditionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchConditionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConditionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchConditionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchConditionsResponsePageTokenChange_FieldTerminalPath{selector: WatchConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchConditionsResponsePageTokenChange_FieldTerminalPath{selector: WatchConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchConditionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConditionsResponse_PageTokenChange))
}

func (o *WatchConditionsResponse_PageTokenChange) Clone() *WatchConditionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchConditionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &condition.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &condition.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchConditionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConditionsResponse_PageTokenChange) Merge(source *WatchConditionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &condition.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &condition.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchConditionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConditionsResponse_PageTokenChange))
}

func (o *CreateConditionRequest) GotenObjectExt() {}

func (o *CreateConditionRequest) MakeFullFieldMask() *CreateConditionRequest_FieldMask {
	return FullCreateConditionRequest_FieldMask()
}

func (o *CreateConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateConditionRequest_FieldMask()
}

func (o *CreateConditionRequest) MakeDiffFieldMask(other *CreateConditionRequest) *CreateConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateConditionRequest_FieldMask()
	}

	res := &CreateConditionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateConditionRequest_FieldTerminalPath{selector: CreateConditionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetCondition().MakeDiffFieldMask(other.GetCondition())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateConditionRequest_FieldTerminalPath{selector: CreateConditionRequest_FieldPathSelectorCondition})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateConditionRequest_FieldSubPath{selector: CreateConditionRequest_FieldPathSelectorCondition, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateConditionRequest))
}

func (o *CreateConditionRequest) Clone() *CreateConditionRequest {
	if o == nil {
		return nil
	}
	result := &CreateConditionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &condition.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Condition = o.Condition.Clone()
	return result
}

func (o *CreateConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateConditionRequest) Merge(source *CreateConditionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &condition.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetCondition() != nil {
		if o.Condition == nil {
			o.Condition = new(condition.Condition)
		}
		o.Condition.Merge(source.GetCondition())
	}
}

func (o *CreateConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateConditionRequest))
}

func (o *UpdateConditionRequest) GotenObjectExt() {}

func (o *UpdateConditionRequest) MakeFullFieldMask() *UpdateConditionRequest_FieldMask {
	return FullUpdateConditionRequest_FieldMask()
}

func (o *UpdateConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateConditionRequest_FieldMask()
}

func (o *UpdateConditionRequest) MakeDiffFieldMask(other *UpdateConditionRequest) *UpdateConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateConditionRequest_FieldMask()
	}

	res := &UpdateConditionRequest_FieldMask{}
	{
		subMask := o.GetCondition().MakeDiffFieldMask(other.GetCondition())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateConditionRequest_FieldTerminalPath{selector: UpdateConditionRequest_FieldPathSelectorCondition})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateConditionRequest_FieldSubPath{selector: UpdateConditionRequest_FieldPathSelectorCondition, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateConditionRequest_FieldTerminalPath{selector: UpdateConditionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateConditionRequest_FieldTerminalPath{selector: UpdateConditionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateConditionRequest_FieldSubPath{selector: UpdateConditionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateConditionRequest))
}

func (o *UpdateConditionRequest) Clone() *UpdateConditionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateConditionRequest{}
	result.Condition = o.Condition.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*condition.Condition_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateConditionRequest) Merge(source *UpdateConditionRequest) {
	if source.GetCondition() != nil {
		if o.Condition == nil {
			o.Condition = new(condition.Condition)
		}
		o.Condition.Merge(source.GetCondition())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateConditionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateConditionRequest))
}

func (o *UpdateConditionRequest_CAS) GotenObjectExt() {}

func (o *UpdateConditionRequest_CAS) MakeFullFieldMask() *UpdateConditionRequest_CAS_FieldMask {
	return FullUpdateConditionRequest_CAS_FieldMask()
}

func (o *UpdateConditionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateConditionRequest_CAS_FieldMask()
}

func (o *UpdateConditionRequest_CAS) MakeDiffFieldMask(other *UpdateConditionRequest_CAS) *UpdateConditionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateConditionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateConditionRequest_CAS_FieldMask()
	}

	res := &UpdateConditionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateConditionRequestCAS_FieldTerminalPath{selector: UpdateConditionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateConditionRequestCAS_FieldSubPath{selector: UpdateConditionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateConditionRequestCAS_FieldTerminalPath{selector: UpdateConditionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateConditionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateConditionRequest_CAS))
}

func (o *UpdateConditionRequest_CAS) Clone() *UpdateConditionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateConditionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*condition.Condition_FieldMask)
	return result
}

func (o *UpdateConditionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateConditionRequest_CAS) Merge(source *UpdateConditionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(condition.Condition)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(condition.Condition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateConditionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateConditionRequest_CAS))
}

func (o *DeleteConditionRequest) GotenObjectExt() {}

func (o *DeleteConditionRequest) MakeFullFieldMask() *DeleteConditionRequest_FieldMask {
	return FullDeleteConditionRequest_FieldMask()
}

func (o *DeleteConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteConditionRequest_FieldMask()
}

func (o *DeleteConditionRequest) MakeDiffFieldMask(other *DeleteConditionRequest) *DeleteConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteConditionRequest_FieldMask()
	}

	res := &DeleteConditionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteConditionRequest_FieldTerminalPath{selector: DeleteConditionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteConditionRequest))
}

func (o *DeleteConditionRequest) Clone() *DeleteConditionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteConditionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &condition.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteConditionRequest) Merge(source *DeleteConditionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &condition.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteConditionRequest))
}
