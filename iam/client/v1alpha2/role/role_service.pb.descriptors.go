// Code generated by protoc-gen-goten-client
// API: RoleService
// DO NOT EDIT!!!

package role_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized  bool
	roleServiceDescriptor   *RoleServiceDescriptor
	getRoleDescriptor       *GetRoleDescriptor
	batchGetRolesDescriptor *BatchGetRolesDescriptor
	listRolesDescriptor     *ListRolesDescriptor
	watchRoleDescriptor     *WatchRoleDescriptor
	watchRolesDescriptor    *WatchRolesDescriptor
	createRoleDescriptor    *CreateRoleDescriptor
	updateRoleDescriptor    *UpdateRoleDescriptor
	deleteRoleDescriptor    *DeleteRoleDescriptor
)

type GetRoleDescriptor struct{}

type GetRoleDescriptorClientMsgHandle struct{}

type GetRoleDescriptorServerMsgHandle struct{}

func (d *GetRoleDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetRoleRequest{}
}

func (d *GetRoleDescriptor) NewEmptyServerMsg() proto.Message {
	return &role.Role{}
}

func (d *GetRoleDescriptor) IsUnary() bool {
	return true
}

func (d *GetRoleDescriptor) IsClientStream() bool {
	return false
}

func (d *GetRoleDescriptor) IsServerStream() bool {
	return false
}

func (d *GetRoleDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetRoleDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetRoleDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetRoleDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetRoleDescriptor) GetVerb() string {
	return "get"
}

func (d *GetRoleDescriptor) GetMethodName() string {
	return "GetRole"
}

func (d *GetRoleDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/GetRole"
}

func (d *GetRoleDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GetRoleDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *GetRoleDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetRoleDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetRoleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *GetRoleDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *GetRoleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRoleDescriptorClientMsgHandle{}
}

func (d *GetRoleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRoleDescriptorServerMsgHandle{}
}

func (h *GetRoleDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetRoleRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*role.Name)(nil)
}

func (h *GetRoleDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetRoleRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRoleDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetRoleDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role.Role)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role.Role) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetRoleDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role.Role)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role.Role) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRoleDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetRoleDescriptor() *GetRoleDescriptor {
	return getRoleDescriptor
}

type BatchGetRolesDescriptor struct{}

type BatchGetRolesDescriptorClientMsgHandle struct{}

type BatchGetRolesDescriptorServerMsgHandle struct{}

func (d *BatchGetRolesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetRolesRequest{}
}

func (d *BatchGetRolesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetRolesResponse{}
}

func (d *BatchGetRolesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetRolesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetRolesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetRolesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetRolesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetRolesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetRolesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetRolesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetRolesDescriptor) GetMethodName() string {
	return "BatchGetRoles"
}

func (d *BatchGetRolesDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/BatchGetRoles"
}

func (d *BatchGetRolesDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *BatchGetRolesDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *BatchGetRolesDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetRolesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetRolesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *BatchGetRolesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *BatchGetRolesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRolesDescriptorClientMsgHandle{}
}

func (d *BatchGetRolesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRolesDescriptorServerMsgHandle{}
}

func (h *BatchGetRolesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRolesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetRolesRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRolesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRolesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetRolesRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(role.RoleNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (role.RoleNameList)(nil)
}

func (h *BatchGetRolesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetRolesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRolesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetRolesResponse) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRolesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRolesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetRolesResponse) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetRoles()
	list := make(role.RoleNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetRolesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetRolesDescriptor() *BatchGetRolesDescriptor {
	return batchGetRolesDescriptor
}

type ListRolesDescriptor struct{}

type ListRolesDescriptorClientMsgHandle struct{}

type ListRolesDescriptorServerMsgHandle struct{}

func (d *ListRolesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListRolesRequest{}
}

func (d *ListRolesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListRolesResponse{}
}

func (d *ListRolesDescriptor) IsUnary() bool {
	return true
}

func (d *ListRolesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListRolesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListRolesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListRolesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListRolesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListRolesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListRolesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListRolesDescriptor) GetMethodName() string {
	return "ListRoles"
}

func (d *ListRolesDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/ListRoles"
}

func (d *ListRolesDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListRolesDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *ListRolesDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListRolesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListRolesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *ListRolesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *ListRolesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRolesDescriptorClientMsgHandle{}
}

func (d *ListRolesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRolesDescriptorServerMsgHandle{}
}

func (h *ListRolesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRolesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListRolesRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListRolesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRolesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListRolesRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRolesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListRolesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRolesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListRolesResponse) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListRolesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRolesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListRolesResponse) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetRoles()
	list := make(role.RoleNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListRolesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListRolesDescriptor() *ListRolesDescriptor {
	return listRolesDescriptor
}

type WatchRoleDescriptor struct{}

type WatchRoleDescriptorClientMsgHandle struct{}

type WatchRoleDescriptorServerMsgHandle struct{}

func (d *WatchRoleDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRoleRequest{}
}

func (d *WatchRoleDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRoleResponse{}
}

func (d *WatchRoleDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRoleDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRoleDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRoleDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchRoleDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchRoleDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchRoleDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRoleDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRoleDescriptor) GetMethodName() string {
	return "WatchRole"
}

func (d *WatchRoleDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/WatchRole"
}

func (d *WatchRoleDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchRoleDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *WatchRoleDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchRoleDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchRoleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *WatchRoleDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *WatchRoleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleDescriptorClientMsgHandle{}
}

func (d *WatchRoleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleDescriptorServerMsgHandle{}
}

func (h *WatchRoleDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRoleRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*role.Name)(nil)
}

func (h *WatchRoleDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRoleRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRoleDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRoleResponse) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *role.RoleChange_Added_:
			return tResChange.Added.GetRole().GetName()
		case *role.RoleChange_Modified_:
			return tResChange.Modified.GetName()
		case *role.RoleChange_Removed_:
			return tResChange.Removed.GetName()
		case *role.RoleChange_Current_:
			return tResChange.Current.GetRole().GetName()
		}
	}
	return (*role.Name)(nil)
}

func (h *WatchRoleDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRoleResponse) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchRoleDescriptor() *WatchRoleDescriptor {
	return watchRoleDescriptor
}

type WatchRolesDescriptor struct{}

type WatchRolesDescriptorClientMsgHandle struct{}

type WatchRolesDescriptorServerMsgHandle struct{}

func (d *WatchRolesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRolesRequest{}
}

func (d *WatchRolesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRolesResponse{}
}

func (d *WatchRolesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRolesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRolesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRolesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchRolesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchRolesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchRolesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRolesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRolesDescriptor) GetMethodName() string {
	return "WatchRoles"
}

func (d *WatchRolesDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/WatchRoles"
}

func (d *WatchRolesDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchRolesDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *WatchRolesDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchRolesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchRolesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *WatchRolesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *WatchRolesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRolesDescriptorClientMsgHandle{}
}

func (d *WatchRolesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRolesDescriptorServerMsgHandle{}
}

func (h *WatchRolesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRolesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRolesRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRolesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRolesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRolesRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRolesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRolesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRolesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRolesResponse) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRolesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRolesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRolesResponse) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetRoleChanges()
	list := make(role.RoleNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *role.RoleChange_Added_:
			list = append(list, tResChange.Added.GetRole().GetName())
		case *role.RoleChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *role.RoleChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *role.RoleChange_Current_:
			list = append(list, tResChange.Current.GetRole().GetName())
		}
	}
	return list
}

func (h *WatchRolesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchRolesDescriptor() *WatchRolesDescriptor {
	return watchRolesDescriptor
}

type CreateRoleDescriptor struct{}

type CreateRoleDescriptorClientMsgHandle struct{}

type CreateRoleDescriptorServerMsgHandle struct{}

func (d *CreateRoleDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateRoleRequest{}
}

func (d *CreateRoleDescriptor) NewEmptyServerMsg() proto.Message {
	return &role.Role{}
}

func (d *CreateRoleDescriptor) IsUnary() bool {
	return true
}

func (d *CreateRoleDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateRoleDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateRoleDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateRoleDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateRoleDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateRoleDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateRoleDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateRoleDescriptor) GetMethodName() string {
	return "CreateRole"
}

func (d *CreateRoleDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/CreateRole"
}

func (d *CreateRoleDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CreateRoleDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *CreateRoleDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateRoleDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateRoleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *CreateRoleDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *CreateRoleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRoleDescriptorClientMsgHandle{}
}

func (d *CreateRoleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRoleDescriptorServerMsgHandle{}
}

func (h *CreateRoleDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateRoleRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetRole().GetName()
}

func (h *CreateRoleDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateRoleRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRoleDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateRoleDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role.Role)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role.Role) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateRoleDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role.Role)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role.Role) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRoleDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateRoleDescriptor() *CreateRoleDescriptor {
	return createRoleDescriptor
}

type UpdateRoleDescriptor struct{}

type UpdateRoleDescriptorClientMsgHandle struct{}

type UpdateRoleDescriptorServerMsgHandle struct{}

func (d *UpdateRoleDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateRoleRequest{}
}

func (d *UpdateRoleDescriptor) NewEmptyServerMsg() proto.Message {
	return &role.Role{}
}

func (d *UpdateRoleDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateRoleDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateRoleDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateRoleDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateRoleDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateRoleDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateRoleDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateRoleDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateRoleDescriptor) GetMethodName() string {
	return "UpdateRole"
}

func (d *UpdateRoleDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/UpdateRole"
}

func (d *UpdateRoleDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *UpdateRoleDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *UpdateRoleDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateRoleDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateRoleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *UpdateRoleDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *UpdateRoleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRoleDescriptorClientMsgHandle{}
}

func (d *UpdateRoleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRoleDescriptorServerMsgHandle{}
}

func (h *UpdateRoleDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateRoleRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetRole().GetName()
}

func (h *UpdateRoleDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateRoleRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRoleDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateRoleDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role.Role)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role.Role) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateRoleDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role.Role)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role.Role) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRoleDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateRoleDescriptor() *UpdateRoleDescriptor {
	return updateRoleDescriptor
}

type DeleteRoleDescriptor struct{}

type DeleteRoleDescriptorClientMsgHandle struct{}

type DeleteRoleDescriptorServerMsgHandle struct{}

func (d *DeleteRoleDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteRoleRequest{}
}

func (d *DeleteRoleDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteRoleDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteRoleDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteRoleDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteRoleDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteRoleDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteRoleDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteRoleDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteRoleDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteRoleDescriptor) GetMethodName() string {
	return "DeleteRole"
}

func (d *DeleteRoleDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleService/DeleteRole"
}

func (d *DeleteRoleDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeleteRoleDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *DeleteRoleDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteRoleDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteRoleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleServiceDescriptor
}

func (d *DeleteRoleDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role.GetDescriptor()
}

func (d *DeleteRoleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRoleDescriptorClientMsgHandle{}
}

func (d *DeleteRoleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRoleDescriptorServerMsgHandle{}
}

func (h *DeleteRoleDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteRoleRequest) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*role.Name)(nil)
}

func (h *DeleteRoleDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteRoleRequest) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRoleDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteRoleDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *role.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteRoleDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*role.Name
	})
	if ok {
		return role.RoleNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRoleDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetDeleteRoleDescriptor() *DeleteRoleDescriptor {
	return deleteRoleDescriptor
}

type RoleServiceDescriptor struct{}

func (d *RoleServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getRoleDescriptor,
		batchGetRolesDescriptor,
		listRolesDescriptor,
		watchRoleDescriptor,
		watchRolesDescriptor,
		createRoleDescriptor,
		updateRoleDescriptor,
		deleteRoleDescriptor,
	}
}

func (d *RoleServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.RoleService"
}

func (d *RoleServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *RoleServiceDescriptor) GetApiName() string {
	return "RoleService"
}

func (d *RoleServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *RoleServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetRoleServiceDescriptor() *RoleServiceDescriptor {
	return roleServiceDescriptor
}

func initDescriptors() {
	roleServiceDescriptor = &RoleServiceDescriptor{}
	getRoleDescriptor = &GetRoleDescriptor{}
	batchGetRolesDescriptor = &BatchGetRolesDescriptor{}
	listRolesDescriptor = &ListRolesDescriptor{}
	watchRoleDescriptor = &WatchRoleDescriptor{}
	watchRolesDescriptor = &WatchRolesDescriptor{}
	createRoleDescriptor = &CreateRoleDescriptor{}
	updateRoleDescriptor = &UpdateRoleDescriptor{}
	deleteRoleDescriptor = &DeleteRoleDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(roleServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getRoleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetRolesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listRolesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRoleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRolesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createRoleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateRoleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteRoleDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
