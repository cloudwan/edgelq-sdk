// Code generated by protoc-gen-goten-client
// API: RoleService
// DO NOT EDIT!!!

package role_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoleServiceClient is the client API for RoleService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleServiceClient interface {
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*role.Role, error)
	BatchGetRoles(ctx context.Context, in *BatchGetRolesRequest, opts ...grpc.CallOption) (*BatchGetRolesResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	WatchRole(ctx context.Context, in *WatchRoleRequest, opts ...grpc.CallOption) (WatchRoleClientStream, error)
	WatchRoles(ctx context.Context, in *WatchRolesRequest, opts ...grpc.CallOption) (WatchRolesClientStream, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*role.Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*role.Role, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &client{cc}
}

func (c *client) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*role.Role, error) {
	out := new(role.Role)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.RoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetRoles(ctx context.Context, in *BatchGetRolesRequest, opts ...grpc.CallOption) (*BatchGetRolesResponse, error) {
	out := new(BatchGetRolesResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.RoleService/BatchGetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.RoleService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchRole(ctx context.Context, in *WatchRoleRequest, opts ...grpc.CallOption) (WatchRoleClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchRole",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.RoleService/WatchRole", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchRoleWatchRoleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchRoleClientStream interface {
	Recv() (*WatchRoleResponse, error)
	grpc.ClientStream
}

type watchRoleWatchRoleClient struct {
	grpc.ClientStream
}

func (x *watchRoleWatchRoleClient) Recv() (*WatchRoleResponse, error) {
	m := new(WatchRoleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchRoles(ctx context.Context, in *WatchRolesRequest, opts ...grpc.CallOption) (WatchRolesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchRoles",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.RoleService/WatchRoles", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchRolesWatchRolesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchRolesClientStream interface {
	Recv() (*WatchRolesResponse, error)
	grpc.ClientStream
}

type watchRolesWatchRolesClient struct {
	grpc.ClientStream
}

func (x *watchRolesWatchRolesClient) Recv() (*WatchRolesResponse, error) {
	m := new(WatchRolesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*role.Role, error) {
	out := new(role.Role)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.RoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*role.Role, error) {
	out := new(role.Role)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.RoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.RoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
