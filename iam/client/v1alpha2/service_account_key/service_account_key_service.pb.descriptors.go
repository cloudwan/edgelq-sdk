// Code generated by protoc-gen-goten-client
// API: ServiceAccountKeyService
// DO NOT EDIT!!!

package service_account_key_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	service_account_key "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account_key"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &service_account_key.ServiceAccountKey{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized               bool
	serviceAccountKeyServiceDescriptor   *ServiceAccountKeyServiceDescriptor
	getServiceAccountKeyDescriptor       *GetServiceAccountKeyDescriptor
	batchGetServiceAccountKeysDescriptor *BatchGetServiceAccountKeysDescriptor
	listServiceAccountKeysDescriptor     *ListServiceAccountKeysDescriptor
	watchServiceAccountKeyDescriptor     *WatchServiceAccountKeyDescriptor
	watchServiceAccountKeysDescriptor    *WatchServiceAccountKeysDescriptor
	createServiceAccountKeyDescriptor    *CreateServiceAccountKeyDescriptor
	updateServiceAccountKeyDescriptor    *UpdateServiceAccountKeyDescriptor
	deleteServiceAccountKeyDescriptor    *DeleteServiceAccountKeyDescriptor
)

type GetServiceAccountKeyDescriptor struct{}

type GetServiceAccountKeyDescriptorClientMsgHandle struct{}

type GetServiceAccountKeyDescriptorServerMsgHandle struct{}

func (d *GetServiceAccountKeyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetServiceAccountKeyRequest{}
}

func (d *GetServiceAccountKeyDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account_key.ServiceAccountKey{}
}

func (d *GetServiceAccountKeyDescriptor) IsUnary() bool {
	return true
}

func (d *GetServiceAccountKeyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetServiceAccountKeyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetServiceAccountKeyDescriptor) IsCollection() bool {
	return false
}

func (d *GetServiceAccountKeyDescriptor) IsPlural() bool {
	return false
}

func (d *GetServiceAccountKeyDescriptor) HasResource() bool {
	return true
}

func (d *GetServiceAccountKeyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetServiceAccountKeyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetServiceAccountKeyDescriptor) GetMethodName() string {
	return "GetServiceAccountKey"
}

func (d *GetServiceAccountKeyDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/GetServiceAccountKey"
}

func (d *GetServiceAccountKeyDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GetServiceAccountKeyDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *GetServiceAccountKeyDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetServiceAccountKeyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetServiceAccountKeyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *GetServiceAccountKeyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *GetServiceAccountKeyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetServiceAccountKeyDescriptorClientMsgHandle{}
}

func (d *GetServiceAccountKeyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetServiceAccountKeyDescriptorServerMsgHandle{}
}

func (h *GetServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetServiceAccountKeyRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *GetServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetServiceAccountKeyRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountKeyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetServiceAccountKeyRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*service_account_key.ServiceAccountKey) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *GetServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*service_account_key.ServiceAccountKey) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetServiceAccountKeyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*service_account_key.ServiceAccountKey) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetServiceAccountKeyDescriptor() *GetServiceAccountKeyDescriptor {
	return getServiceAccountKeyDescriptor
}

type BatchGetServiceAccountKeysDescriptor struct{}

type BatchGetServiceAccountKeysDescriptorClientMsgHandle struct{}

type BatchGetServiceAccountKeysDescriptorServerMsgHandle struct{}

func (d *BatchGetServiceAccountKeysDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetServiceAccountKeysRequest{}
}

func (d *BatchGetServiceAccountKeysDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetServiceAccountKeysResponse{}
}

func (d *BatchGetServiceAccountKeysDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetServiceAccountKeysDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetServiceAccountKeysDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetServiceAccountKeysDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetServiceAccountKeysDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetServiceAccountKeysDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetServiceAccountKeysDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetServiceAccountKeysDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetMethodName() string {
	return "BatchGetServiceAccountKeys"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/BatchGetServiceAccountKeys"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetServiceAccountKeysDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *BatchGetServiceAccountKeysDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *BatchGetServiceAccountKeysDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetServiceAccountKeysDescriptorClientMsgHandle{}
}

func (d *BatchGetServiceAccountKeysDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetServiceAccountKeysDescriptorServerMsgHandle{}
}

func (h *BatchGetServiceAccountKeysDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetServiceAccountKeysRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountKeysDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetServiceAccountKeysRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(service_account_key.ServiceAccountKeyNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (service_account_key.ServiceAccountKeyNameList)(nil)
}

func (h *BatchGetServiceAccountKeysDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetServiceAccountKeysRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountKeysDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetServiceAccountKeysResponse) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetServiceAccountKeysDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetServiceAccountKeysResponse) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetServiceAccountKeys(); len(resources) > 0 {
			list := make(service_account_key.ServiceAccountKeyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (service_account_key.ServiceAccountKeyNameList)(nil)
}

func (h *BatchGetServiceAccountKeysDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetServiceAccountKeysResponse) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetServiceAccountKeysDescriptor() *BatchGetServiceAccountKeysDescriptor {
	return batchGetServiceAccountKeysDescriptor
}

type ListServiceAccountKeysDescriptor struct{}

type ListServiceAccountKeysDescriptorClientMsgHandle struct{}

type ListServiceAccountKeysDescriptorServerMsgHandle struct{}

func (d *ListServiceAccountKeysDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListServiceAccountKeysRequest{}
}

func (d *ListServiceAccountKeysDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListServiceAccountKeysResponse{}
}

func (d *ListServiceAccountKeysDescriptor) IsUnary() bool {
	return true
}

func (d *ListServiceAccountKeysDescriptor) IsClientStream() bool {
	return false
}

func (d *ListServiceAccountKeysDescriptor) IsServerStream() bool {
	return false
}

func (d *ListServiceAccountKeysDescriptor) IsCollection() bool {
	return true
}

func (d *ListServiceAccountKeysDescriptor) IsPlural() bool {
	return true
}

func (d *ListServiceAccountKeysDescriptor) HasResource() bool {
	return true
}

func (d *ListServiceAccountKeysDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListServiceAccountKeysDescriptor) GetVerb() string {
	return "list"
}

func (d *ListServiceAccountKeysDescriptor) GetMethodName() string {
	return "ListServiceAccountKeys"
}

func (d *ListServiceAccountKeysDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/ListServiceAccountKeys"
}

func (d *ListServiceAccountKeysDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListServiceAccountKeysDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *ListServiceAccountKeysDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListServiceAccountKeysDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListServiceAccountKeysDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *ListServiceAccountKeysDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *ListServiceAccountKeysDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListServiceAccountKeysDescriptorClientMsgHandle{}
}

func (d *ListServiceAccountKeysDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListServiceAccountKeysDescriptorServerMsgHandle{}
}

func (h *ListServiceAccountKeysDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListServiceAccountKeysRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountKeysDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListServiceAccountKeysRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListServiceAccountKeysDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListServiceAccountKeysRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*service_account_key.ParentName)(nil)
}

func (h *ListServiceAccountKeysDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListServiceAccountKeysResponse) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListServiceAccountKeysDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListServiceAccountKeysResponse) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetServiceAccountKeys(); len(resources) > 0 {
			list := make(service_account_key.ServiceAccountKeyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (service_account_key.ServiceAccountKeyNameList)(nil)
}

func (h *ListServiceAccountKeysDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListServiceAccountKeysResponse) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListServiceAccountKeysDescriptor() *ListServiceAccountKeysDescriptor {
	return listServiceAccountKeysDescriptor
}

type WatchServiceAccountKeyDescriptor struct{}

type WatchServiceAccountKeyDescriptorClientMsgHandle struct{}

type WatchServiceAccountKeyDescriptorServerMsgHandle struct{}

func (d *WatchServiceAccountKeyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchServiceAccountKeyRequest{}
}

func (d *WatchServiceAccountKeyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchServiceAccountKeyResponse{}
}

func (d *WatchServiceAccountKeyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchServiceAccountKeyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchServiceAccountKeyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchServiceAccountKeyDescriptor) IsCollection() bool {
	return false
}

func (d *WatchServiceAccountKeyDescriptor) IsPlural() bool {
	return false
}

func (d *WatchServiceAccountKeyDescriptor) HasResource() bool {
	return true
}

func (d *WatchServiceAccountKeyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchServiceAccountKeyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchServiceAccountKeyDescriptor) GetMethodName() string {
	return "WatchServiceAccountKey"
}

func (d *WatchServiceAccountKeyDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/WatchServiceAccountKey"
}

func (d *WatchServiceAccountKeyDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchServiceAccountKeyDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *WatchServiceAccountKeyDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchServiceAccountKeyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchServiceAccountKeyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *WatchServiceAccountKeyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *WatchServiceAccountKeyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountKeyDescriptorClientMsgHandle{}
}

func (d *WatchServiceAccountKeyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountKeyDescriptorServerMsgHandle{}
}

func (h *WatchServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountKeyRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *WatchServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountKeyRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountKeyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountKeyRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountKeyResponse) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *service_account_key.ServiceAccountKeyChange_Added_:
				return tResChange.Added.GetServiceAccountKey().GetName()
			case *service_account_key.ServiceAccountKeyChange_Modified_:
				return tResChange.Modified.GetName()
			case *service_account_key.ServiceAccountKeyChange_Removed_:
				return tResChange.Removed.GetName()
			case *service_account_key.ServiceAccountKeyChange_Current_:
				return tResChange.Current.GetServiceAccountKey().GetName()
			}
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *WatchServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountKeyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountKeyResponse) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountKeyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountKeyResponse) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchServiceAccountKeyDescriptor() *WatchServiceAccountKeyDescriptor {
	return watchServiceAccountKeyDescriptor
}

type WatchServiceAccountKeysDescriptor struct{}

type WatchServiceAccountKeysDescriptorClientMsgHandle struct{}

type WatchServiceAccountKeysDescriptorServerMsgHandle struct{}

func (d *WatchServiceAccountKeysDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchServiceAccountKeysRequest{}
}

func (d *WatchServiceAccountKeysDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchServiceAccountKeysResponse{}
}

func (d *WatchServiceAccountKeysDescriptor) IsUnary() bool {
	return false
}

func (d *WatchServiceAccountKeysDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchServiceAccountKeysDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchServiceAccountKeysDescriptor) IsCollection() bool {
	return true
}

func (d *WatchServiceAccountKeysDescriptor) IsPlural() bool {
	return true
}

func (d *WatchServiceAccountKeysDescriptor) HasResource() bool {
	return true
}

func (d *WatchServiceAccountKeysDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchServiceAccountKeysDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchServiceAccountKeysDescriptor) GetMethodName() string {
	return "WatchServiceAccountKeys"
}

func (d *WatchServiceAccountKeysDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/WatchServiceAccountKeys"
}

func (d *WatchServiceAccountKeysDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchServiceAccountKeysDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *WatchServiceAccountKeysDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchServiceAccountKeysDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchServiceAccountKeysDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *WatchServiceAccountKeysDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *WatchServiceAccountKeysDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountKeysDescriptorClientMsgHandle{}
}

func (d *WatchServiceAccountKeysDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchServiceAccountKeysDescriptorServerMsgHandle{}
}

func (h *WatchServiceAccountKeysDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountKeysRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountKeysDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountKeysRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchServiceAccountKeysDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountKeysRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*service_account_key.ParentName)(nil)
}

func (h *WatchServiceAccountKeysDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchServiceAccountKeysResponse) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchServiceAccountKeysDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchServiceAccountKeysResponse) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetServiceAccountKeyChanges(); len(resChanges) > 0 {
			list := make(service_account_key.ServiceAccountKeyNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *service_account_key.ServiceAccountKeyChange_Added_:
					list = append(list, tResChange.Added.GetServiceAccountKey().GetName())
				case *service_account_key.ServiceAccountKeyChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *service_account_key.ServiceAccountKeyChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *service_account_key.ServiceAccountKeyChange_Current_:
					list = append(list, tResChange.Current.GetServiceAccountKey().GetName())
				}
			}
			return list
		}
	}
	return (service_account_key.ServiceAccountKeyNameList)(nil)
}

func (h *WatchServiceAccountKeysDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchServiceAccountKeysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchServiceAccountKeysResponse) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchServiceAccountKeysDescriptor() *WatchServiceAccountKeysDescriptor {
	return watchServiceAccountKeysDescriptor
}

type CreateServiceAccountKeyDescriptor struct{}

type CreateServiceAccountKeyDescriptorClientMsgHandle struct{}

type CreateServiceAccountKeyDescriptorServerMsgHandle struct{}

func (d *CreateServiceAccountKeyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateServiceAccountKeyRequest{}
}

func (d *CreateServiceAccountKeyDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account_key.ServiceAccountKey{}
}

func (d *CreateServiceAccountKeyDescriptor) IsUnary() bool {
	return true
}

func (d *CreateServiceAccountKeyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateServiceAccountKeyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateServiceAccountKeyDescriptor) IsCollection() bool {
	return true
}

func (d *CreateServiceAccountKeyDescriptor) IsPlural() bool {
	return false
}

func (d *CreateServiceAccountKeyDescriptor) HasResource() bool {
	return true
}

func (d *CreateServiceAccountKeyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateServiceAccountKeyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateServiceAccountKeyDescriptor) GetMethodName() string {
	return "CreateServiceAccountKey"
}

func (d *CreateServiceAccountKeyDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/CreateServiceAccountKey"
}

func (d *CreateServiceAccountKeyDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CreateServiceAccountKeyDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *CreateServiceAccountKeyDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateServiceAccountKeyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateServiceAccountKeyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *CreateServiceAccountKeyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *CreateServiceAccountKeyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateServiceAccountKeyDescriptorClientMsgHandle{}
}

func (d *CreateServiceAccountKeyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateServiceAccountKeyDescriptorServerMsgHandle{}
}

func (h *CreateServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateServiceAccountKeyRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetServiceAccountKey()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *CreateServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateServiceAccountKeyRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountKeyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateServiceAccountKeyRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*service_account_key.ParentName)(nil)
}

func (h *CreateServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*service_account_key.ServiceAccountKey) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *CreateServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*service_account_key.ServiceAccountKey) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateServiceAccountKeyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*service_account_key.ServiceAccountKey) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateServiceAccountKeyDescriptor() *CreateServiceAccountKeyDescriptor {
	return createServiceAccountKeyDescriptor
}

type UpdateServiceAccountKeyDescriptor struct{}

type UpdateServiceAccountKeyDescriptorClientMsgHandle struct{}

type UpdateServiceAccountKeyDescriptorServerMsgHandle struct{}

func (d *UpdateServiceAccountKeyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateServiceAccountKeyRequest{}
}

func (d *UpdateServiceAccountKeyDescriptor) NewEmptyServerMsg() proto.Message {
	return &service_account_key.ServiceAccountKey{}
}

func (d *UpdateServiceAccountKeyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateServiceAccountKeyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateServiceAccountKeyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateServiceAccountKeyDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateServiceAccountKeyDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateServiceAccountKeyDescriptor) HasResource() bool {
	return true
}

func (d *UpdateServiceAccountKeyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateServiceAccountKeyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateServiceAccountKeyDescriptor) GetMethodName() string {
	return "UpdateServiceAccountKey"
}

func (d *UpdateServiceAccountKeyDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/UpdateServiceAccountKey"
}

func (d *UpdateServiceAccountKeyDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *UpdateServiceAccountKeyDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *UpdateServiceAccountKeyDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateServiceAccountKeyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateServiceAccountKeyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *UpdateServiceAccountKeyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *UpdateServiceAccountKeyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateServiceAccountKeyDescriptorClientMsgHandle{}
}

func (d *UpdateServiceAccountKeyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateServiceAccountKeyDescriptorServerMsgHandle{}
}

func (h *UpdateServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateServiceAccountKeyRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetServiceAccountKey()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *UpdateServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateServiceAccountKeyRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountKeyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateServiceAccountKeyRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*service_account_key.ServiceAccountKey) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *UpdateServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*service_account_key.ServiceAccountKey) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateServiceAccountKeyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*service_account_key.ServiceAccountKey)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*service_account_key.ServiceAccountKey) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateServiceAccountKeyDescriptor() *UpdateServiceAccountKeyDescriptor {
	return updateServiceAccountKeyDescriptor
}

type DeleteServiceAccountKeyDescriptor struct{}

type DeleteServiceAccountKeyDescriptorClientMsgHandle struct{}

type DeleteServiceAccountKeyDescriptorServerMsgHandle struct{}

func (d *DeleteServiceAccountKeyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteServiceAccountKeyRequest{}
}

func (d *DeleteServiceAccountKeyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteServiceAccountKeyDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteServiceAccountKeyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteServiceAccountKeyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteServiceAccountKeyDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteServiceAccountKeyDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteServiceAccountKeyDescriptor) HasResource() bool {
	return true
}

func (d *DeleteServiceAccountKeyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteServiceAccountKeyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteServiceAccountKeyDescriptor) GetMethodName() string {
	return "DeleteServiceAccountKey"
}

func (d *DeleteServiceAccountKeyDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService/DeleteServiceAccountKey"
}

func (d *DeleteServiceAccountKeyDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeleteServiceAccountKeyDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *DeleteServiceAccountKeyDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteServiceAccountKeyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteServiceAccountKeyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func (d *DeleteServiceAccountKeyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return service_account_key.GetDescriptor()
}

func (d *DeleteServiceAccountKeyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteServiceAccountKeyDescriptorClientMsgHandle{}
}

func (d *DeleteServiceAccountKeyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteServiceAccountKeyDescriptorServerMsgHandle{}
}

func (h *DeleteServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteServiceAccountKeyRequest) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*service_account_key.Name)(nil)
}

func (h *DeleteServiceAccountKeyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteServiceAccountKeyRequest) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountKeyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteServiceAccountKeyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteServiceAccountKeyRequest) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *service_account_key.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteServiceAccountKeyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*service_account_key.Name
	})
	if ok {
		return service_account_key.ServiceAccountKeyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteServiceAccountKeyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *service_account_key.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteServiceAccountKeyDescriptor() *DeleteServiceAccountKeyDescriptor {
	return deleteServiceAccountKeyDescriptor
}

type ServiceAccountKeyServiceDescriptor struct{}

func (d *ServiceAccountKeyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getServiceAccountKeyDescriptor,
		batchGetServiceAccountKeysDescriptor,
		listServiceAccountKeysDescriptor,
		watchServiceAccountKeyDescriptor,
		watchServiceAccountKeysDescriptor,
		createServiceAccountKeyDescriptor,
		updateServiceAccountKeyDescriptor,
		deleteServiceAccountKeyDescriptor,
	}
}

func (d *ServiceAccountKeyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.ServiceAccountKeyService"
}

func (d *ServiceAccountKeyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ServiceAccountKeyServiceDescriptor) GetApiName() string {
	return "ServiceAccountKeyService"
}

func (d *ServiceAccountKeyServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ServiceAccountKeyServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetServiceAccountKeyServiceDescriptor() *ServiceAccountKeyServiceDescriptor {
	return serviceAccountKeyServiceDescriptor
}

func initDescriptors() {
	serviceAccountKeyServiceDescriptor = &ServiceAccountKeyServiceDescriptor{}
	getServiceAccountKeyDescriptor = &GetServiceAccountKeyDescriptor{}
	batchGetServiceAccountKeysDescriptor = &BatchGetServiceAccountKeysDescriptor{}
	listServiceAccountKeysDescriptor = &ListServiceAccountKeysDescriptor{}
	watchServiceAccountKeyDescriptor = &WatchServiceAccountKeyDescriptor{}
	watchServiceAccountKeysDescriptor = &WatchServiceAccountKeysDescriptor{}
	createServiceAccountKeyDescriptor = &CreateServiceAccountKeyDescriptor{}
	updateServiceAccountKeyDescriptor = &UpdateServiceAccountKeyDescriptor{}
	deleteServiceAccountKeyDescriptor = &DeleteServiceAccountKeyDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(serviceAccountKeyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getServiceAccountKeyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetServiceAccountKeysDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listServiceAccountKeysDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchServiceAccountKeyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchServiceAccountKeysDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createServiceAccountKeyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateServiceAccountKeyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteServiceAccountKeyDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
