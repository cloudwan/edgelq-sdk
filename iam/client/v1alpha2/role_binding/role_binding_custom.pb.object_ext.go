// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/role_binding_custom.proto
// DO NOT EDIT!!!

package role_binding_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role_binding"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role_binding.RoleBinding{}
	_ = &policy.Policy{}
)

func (o *SetupCreateOwnerRoleRequest) GotenObjectExt() {}

func (o *SetupCreateOwnerRoleRequest) MakeFullFieldMask() *SetupCreateOwnerRoleRequest_FieldMask {
	return FullSetupCreateOwnerRoleRequest_FieldMask()
}

func (o *SetupCreateOwnerRoleRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSetupCreateOwnerRoleRequest_FieldMask()
}

func (o *SetupCreateOwnerRoleRequest) MakeDiffFieldMask(other *SetupCreateOwnerRoleRequest) *SetupCreateOwnerRoleRequest_FieldMask {
	if o == nil && other == nil {
		return &SetupCreateOwnerRoleRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSetupCreateOwnerRoleRequest_FieldMask()
	}

	res := &SetupCreateOwnerRoleRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SetupCreateOwnerRoleRequest_FieldTerminalPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetRoleBinding().MakeDiffFieldMask(other.GetRoleBinding())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SetupCreateOwnerRoleRequest_FieldTerminalPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SetupCreateOwnerRoleRequest_FieldSubPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMultiRegionPolicy().MakeDiffFieldMask(other.GetMultiRegionPolicy())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SetupCreateOwnerRoleRequest_FieldTerminalPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SetupCreateOwnerRoleRequest_FieldSubPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy, subPath: subpath})
			}
		}
	}
	return res
}

func (o *SetupCreateOwnerRoleRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SetupCreateOwnerRoleRequest))
}

func (o *SetupCreateOwnerRoleRequest) Clone() *SetupCreateOwnerRoleRequest {
	if o == nil {
		return nil
	}
	result := &SetupCreateOwnerRoleRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &role_binding.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.RoleBinding = o.RoleBinding.Clone()
	result.MultiRegionPolicy = o.MultiRegionPolicy.Clone()
	return result
}

func (o *SetupCreateOwnerRoleRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SetupCreateOwnerRoleRequest) Merge(source *SetupCreateOwnerRoleRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &role_binding.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetRoleBinding() != nil {
		if o.RoleBinding == nil {
			o.RoleBinding = new(role_binding.RoleBinding)
		}
		o.RoleBinding.Merge(source.GetRoleBinding())
	}
	if source.GetMultiRegionPolicy() != nil {
		if o.MultiRegionPolicy == nil {
			o.MultiRegionPolicy = new(policy.Policy)
		}
		o.MultiRegionPolicy.Merge(source.GetMultiRegionPolicy())
	}
}

func (o *SetupCreateOwnerRoleRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SetupCreateOwnerRoleRequest))
}
