// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/role_binding_custom.proto
// DO NOT EDIT!!!

package role_binding_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role_binding"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role_binding.RoleBinding{}
	_ = &policy.Policy{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SetupCreateOwnerRoleRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SetupCreateOwnerRoleRequest_FieldPathSelector
	Get(source *SetupCreateOwnerRoleRequest) []interface{}
	GetSingle(source *SetupCreateOwnerRoleRequest) (interface{}, bool)
	ClearValue(item *SetupCreateOwnerRoleRequest)

	// Those methods build corresponding SetupCreateOwnerRoleRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SetupCreateOwnerRoleRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SetupCreateOwnerRoleRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SetupCreateOwnerRoleRequest_FieldPathArrayItemValue
}

type SetupCreateOwnerRoleRequest_FieldPathSelector int32

const (
	SetupCreateOwnerRoleRequest_FieldPathSelectorParent            SetupCreateOwnerRoleRequest_FieldPathSelector = 0
	SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding       SetupCreateOwnerRoleRequest_FieldPathSelector = 1
	SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy SetupCreateOwnerRoleRequest_FieldPathSelector = 2
)

func (s SetupCreateOwnerRoleRequest_FieldPathSelector) String() string {
	switch s {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		return "parent"
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return "role_binding"
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return "multi_region_policy"
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", s))
	}
}

func BuildSetupCreateOwnerRoleRequest_FieldPath(fp gotenobject.RawFieldPath) (SetupCreateOwnerRoleRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SetupCreateOwnerRoleRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SetupCreateOwnerRoleRequest_FieldTerminalPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorParent}, nil
		case "role_binding", "roleBinding", "role-binding":
			return &SetupCreateOwnerRoleRequest_FieldTerminalPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding}, nil
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			return &SetupCreateOwnerRoleRequest_FieldTerminalPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy}, nil
		}
	} else {
		switch fp[0] {
		case "role_binding", "roleBinding", "role-binding":
			if subpath, err := role_binding.BuildRoleBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SetupCreateOwnerRoleRequest_FieldSubPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding, subPath: subpath}, nil
			}
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			if subpath, err := policy.BuildPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SetupCreateOwnerRoleRequest_FieldSubPath{selector: SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SetupCreateOwnerRoleRequest", fp)
}

func ParseSetupCreateOwnerRoleRequest_FieldPath(rawField string) (SetupCreateOwnerRoleRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSetupCreateOwnerRoleRequest_FieldPath(fp)
}

func MustParseSetupCreateOwnerRoleRequest_FieldPath(rawField string) SetupCreateOwnerRoleRequest_FieldPath {
	fp, err := ParseSetupCreateOwnerRoleRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SetupCreateOwnerRoleRequest_FieldTerminalPath struct {
	selector SetupCreateOwnerRoleRequest_FieldPathSelector
}

var _ SetupCreateOwnerRoleRequest_FieldPath = (*SetupCreateOwnerRoleRequest_FieldTerminalPath)(nil)

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) Selector() SetupCreateOwnerRoleRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SetupCreateOwnerRoleRequest
func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) Get(source *SetupCreateOwnerRoleRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
			if source.RoleBinding != nil {
				values = append(values, source.RoleBinding)
			}
		case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
			if source.MultiRegionPolicy != nil {
				values = append(values, source.MultiRegionPolicy)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SetupCreateOwnerRoleRequest))
}

// GetSingle returns value pointed by specific field of from source SetupCreateOwnerRoleRequest
func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) GetSingle(source *SetupCreateOwnerRoleRequest) (interface{}, bool) {
	switch fp.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		res := source.GetRoleBinding()
		return res, res != nil
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		res := source.GetMultiRegionPolicy()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
	}
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SetupCreateOwnerRoleRequest))
}

// GetDefault returns a default value of the field type
func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		return (*role_binding.ParentReference)(nil)
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return (*role_binding.RoleBinding)(nil)
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return (*policy.Policy)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
	}
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) ClearValue(item *SetupCreateOwnerRoleRequest) {
	if item != nil {
		switch fp.selector {
		case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
			item.RoleBinding = nil
		case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
			item.MultiRegionPolicy = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
		}
	}
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SetupCreateOwnerRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SetupCreateOwnerRoleRequest_FieldPathSelectorParent
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) WithIValue(value interface{}) SetupCreateOwnerRoleRequest_FieldPathValue {
	switch fp.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		return &SetupCreateOwnerRoleRequest_FieldTerminalPathValue{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp, value: value.(*role_binding.ParentReference)}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return &SetupCreateOwnerRoleRequest_FieldTerminalPathValue{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp, value: value.(*role_binding.RoleBinding)}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return &SetupCreateOwnerRoleRequest_FieldTerminalPathValue{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp, value: value.(*policy.Policy)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
	}
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SetupCreateOwnerRoleRequest_FieldPathArrayOfValues {
	fpaov := &SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		return &SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.ParentReference)}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return &SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp, values: values.([]*role_binding.RoleBinding)}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return &SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues{SetupCreateOwnerRoleRequest_FieldTerminalPath: *fp, values: values.([]*policy.Policy)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SetupCreateOwnerRoleRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fp.selector))
	}
}

func (fp *SetupCreateOwnerRoleRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SetupCreateOwnerRoleRequest_FieldSubPath struct {
	selector SetupCreateOwnerRoleRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SetupCreateOwnerRoleRequest_FieldPath = (*SetupCreateOwnerRoleRequest_FieldSubPath)(nil)

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) Selector() SetupCreateOwnerRoleRequest_FieldPathSelector {
	return fps.selector
}
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) AsRoleBindingSubPath() (role_binding.RoleBinding_FieldPath, bool) {
	res, ok := fps.subPath.(role_binding.RoleBinding_FieldPath)
	return res, ok
}
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) AsMultiRegionPolicySubPath() (policy.Policy_FieldPath, bool) {
	res, ok := fps.subPath.(policy.Policy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SetupCreateOwnerRoleRequest
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) Get(source *SetupCreateOwnerRoleRequest) (values []interface{}) {
	if asRoleBindingFieldPath, ok := fps.AsRoleBindingSubPath(); ok {
		values = append(values, asRoleBindingFieldPath.Get(source.GetRoleBinding())...)
	} else if asPolicyFieldPath, ok := fps.AsMultiRegionPolicySubPath(); ok {
		values = append(values, asPolicyFieldPath.Get(source.GetMultiRegionPolicy())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fps.selector))
	}
	return
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SetupCreateOwnerRoleRequest))
}

// GetSingle returns value of selected field from source SetupCreateOwnerRoleRequest
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) GetSingle(source *SetupCreateOwnerRoleRequest) (interface{}, bool) {
	switch fps.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		if source.GetRoleBinding() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoleBinding())
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		if source.GetMultiRegionPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMultiRegionPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fps.selector))
	}
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SetupCreateOwnerRoleRequest))
}

// GetDefault returns a default value of the field type
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) ClearValue(item *SetupCreateOwnerRoleRequest) {
	if item != nil {
		switch fps.selector {
		case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
			fps.subPath.ClearValueRaw(item.RoleBinding)
		case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
			fps.subPath.ClearValueRaw(item.MultiRegionPolicy)
		default:
			panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fps.selector))
		}
	}
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SetupCreateOwnerRoleRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) WithIValue(value interface{}) SetupCreateOwnerRoleRequest_FieldPathValue {
	return &SetupCreateOwnerRoleRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) WithIArrayOfValues(values interface{}) SetupCreateOwnerRoleRequest_FieldPathArrayOfValues {
	return &SetupCreateOwnerRoleRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) WithIArrayItemValue(value interface{}) SetupCreateOwnerRoleRequest_FieldPathArrayItemValue {
	return &SetupCreateOwnerRoleRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SetupCreateOwnerRoleRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SetupCreateOwnerRoleRequest_FieldPathValue allows storing values for SetupCreateOwnerRoleRequest fields according to their type
type SetupCreateOwnerRoleRequest_FieldPathValue interface {
	SetupCreateOwnerRoleRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SetupCreateOwnerRoleRequest)
	CompareWith(*SetupCreateOwnerRoleRequest) (cmp int, comparable bool)
}

func ParseSetupCreateOwnerRoleRequest_FieldPathValue(pathStr, valueStr string) (SetupCreateOwnerRoleRequest_FieldPathValue, error) {
	fp, err := ParseSetupCreateOwnerRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetupCreateOwnerRoleRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SetupCreateOwnerRoleRequest_FieldPathValue), nil
}

func MustParseSetupCreateOwnerRoleRequest_FieldPathValue(pathStr, valueStr string) SetupCreateOwnerRoleRequest_FieldPathValue {
	fpv, err := ParseSetupCreateOwnerRoleRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SetupCreateOwnerRoleRequest_FieldTerminalPathValue struct {
	SetupCreateOwnerRoleRequest_FieldTerminalPath
	value interface{}
}

var _ SetupCreateOwnerRoleRequest_FieldPathValue = (*SetupCreateOwnerRoleRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SetupCreateOwnerRoleRequest' as interface{}
func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) AsParentValue() (*role_binding.ParentReference, bool) {
	res, ok := fpv.value.(*role_binding.ParentReference)
	return res, ok
}
func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) AsRoleBindingValue() (*role_binding.RoleBinding, bool) {
	res, ok := fpv.value.(*role_binding.RoleBinding)
	return res, ok
}
func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) AsMultiRegionPolicyValue() (*policy.Policy, bool) {
	res, ok := fpv.value.(*policy.Policy)
	return res, ok
}

// SetTo stores value for selected field for object SetupCreateOwnerRoleRequest
func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) SetTo(target **SetupCreateOwnerRoleRequest) {
	if *target == nil {
		*target = new(SetupCreateOwnerRoleRequest)
	}
	switch fpv.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*role_binding.ParentReference)
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		(*target).RoleBinding = fpv.value.(*role_binding.RoleBinding)
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		(*target).MultiRegionPolicy = fpv.value.(*policy.Policy)
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fpv.selector))
	}
}

func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SetupCreateOwnerRoleRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SetupCreateOwnerRoleRequest_FieldTerminalPathValue' with the value under path in 'SetupCreateOwnerRoleRequest'.
func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) CompareWith(source *SetupCreateOwnerRoleRequest) (int, bool) {
	switch fpv.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*role_binding.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return 0, false
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fpv.selector))
	}
}

func (fpv *SetupCreateOwnerRoleRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SetupCreateOwnerRoleRequest))
}

type SetupCreateOwnerRoleRequest_FieldSubPathValue struct {
	SetupCreateOwnerRoleRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SetupCreateOwnerRoleRequest_FieldPathValue = (*SetupCreateOwnerRoleRequest_FieldSubPathValue)(nil)

func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) AsRoleBindingPathValue() (role_binding.RoleBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue)
	return res, ok
}
func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) AsMultiRegionPolicyPathValue() (policy.Policy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(policy.Policy_FieldPathValue)
	return res, ok
}

func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) SetTo(target **SetupCreateOwnerRoleRequest) {
	if *target == nil {
		*target = new(SetupCreateOwnerRoleRequest)
	}
	switch fpvs.Selector() {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).SetTo(&(*target).RoleBinding)
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		fpvs.subPathValue.(policy.Policy_FieldPathValue).SetTo(&(*target).MultiRegionPolicy)
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SetupCreateOwnerRoleRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) CompareWith(source *SetupCreateOwnerRoleRequest) (int, bool) {
	switch fpvs.Selector() {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return fpvs.subPathValue.(role_binding.RoleBinding_FieldPathValue).CompareWith(source.GetRoleBinding())
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return fpvs.subPathValue.(policy.Policy_FieldPathValue).CompareWith(source.GetMultiRegionPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *SetupCreateOwnerRoleRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SetupCreateOwnerRoleRequest))
}

// SetupCreateOwnerRoleRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SetupCreateOwnerRoleRequest according to their type
// Present only for array (repeated) types.
type SetupCreateOwnerRoleRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SetupCreateOwnerRoleRequest_FieldPath
	ContainsValue(*SetupCreateOwnerRoleRequest) bool
}

// ParseSetupCreateOwnerRoleRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSetupCreateOwnerRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SetupCreateOwnerRoleRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSetupCreateOwnerRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetupCreateOwnerRoleRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SetupCreateOwnerRoleRequest_FieldPathArrayItemValue), nil
}

func MustParseSetupCreateOwnerRoleRequest_FieldPathArrayItemValue(pathStr, valueStr string) SetupCreateOwnerRoleRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSetupCreateOwnerRoleRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SetupCreateOwnerRoleRequest_FieldTerminalPathArrayItemValue struct {
	SetupCreateOwnerRoleRequest_FieldTerminalPath
	value interface{}
}

var _ SetupCreateOwnerRoleRequest_FieldPathArrayItemValue = (*SetupCreateOwnerRoleRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SetupCreateOwnerRoleRequest as interface{}
func (fpaiv *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SetupCreateOwnerRoleRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SetupCreateOwnerRoleRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SetupCreateOwnerRoleRequest'
func (fpaiv *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SetupCreateOwnerRoleRequest) bool {
	slice := fpaiv.SetupCreateOwnerRoleRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SetupCreateOwnerRoleRequest_FieldSubPathArrayItemValue struct {
	SetupCreateOwnerRoleRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SetupCreateOwnerRoleRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SetupCreateOwnerRoleRequest_FieldSubPathArrayItemValue) AsRoleBindingPathItemValue() (role_binding.RoleBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SetupCreateOwnerRoleRequest_FieldSubPathArrayItemValue) AsMultiRegionPolicyPathItemValue() (policy.Policy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(policy.Policy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SetupCreateOwnerRoleRequest'
func (fpaivs *SetupCreateOwnerRoleRequest_FieldSubPathArrayItemValue) ContainsValue(source *SetupCreateOwnerRoleRequest) bool {
	switch fpaivs.Selector() {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		return fpaivs.subPathItemValue.(role_binding.RoleBinding_FieldPathArrayItemValue).ContainsValue(source.GetRoleBinding())
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		return fpaivs.subPathItemValue.(policy.Policy_FieldPathArrayItemValue).ContainsValue(source.GetMultiRegionPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for SetupCreateOwnerRoleRequest: %d", fpaivs.Selector()))
	}
}

// SetupCreateOwnerRoleRequest_FieldPathArrayOfValues allows storing slice of values for SetupCreateOwnerRoleRequest fields according to their type
type SetupCreateOwnerRoleRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SetupCreateOwnerRoleRequest_FieldPath
}

func ParseSetupCreateOwnerRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SetupCreateOwnerRoleRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSetupCreateOwnerRoleRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetupCreateOwnerRoleRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SetupCreateOwnerRoleRequest_FieldPathArrayOfValues), nil
}

func MustParseSetupCreateOwnerRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SetupCreateOwnerRoleRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSetupCreateOwnerRoleRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues struct {
	SetupCreateOwnerRoleRequest_FieldTerminalPath
	values interface{}
}

var _ SetupCreateOwnerRoleRequest_FieldPathArrayOfValues = (*SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SetupCreateOwnerRoleRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*role_binding.ParentReference) {
			values = append(values, v)
		}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorRoleBinding:
		for _, v := range fpaov.values.([]*role_binding.RoleBinding) {
			values = append(values, v)
		}
	case SetupCreateOwnerRoleRequest_FieldPathSelectorMultiRegionPolicy:
		for _, v := range fpaov.values.([]*policy.Policy) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*role_binding.ParentReference, bool) {
	res, ok := fpaov.values.([]*role_binding.ParentReference)
	return res, ok
}
func (fpaov *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues) AsRoleBindingArrayOfValues() ([]*role_binding.RoleBinding, bool) {
	res, ok := fpaov.values.([]*role_binding.RoleBinding)
	return res, ok
}
func (fpaov *SetupCreateOwnerRoleRequest_FieldTerminalPathArrayOfValues) AsMultiRegionPolicyArrayOfValues() ([]*policy.Policy, bool) {
	res, ok := fpaov.values.([]*policy.Policy)
	return res, ok
}

type SetupCreateOwnerRoleRequest_FieldSubPathArrayOfValues struct {
	SetupCreateOwnerRoleRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SetupCreateOwnerRoleRequest_FieldPathArrayOfValues = (*SetupCreateOwnerRoleRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SetupCreateOwnerRoleRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SetupCreateOwnerRoleRequest_FieldSubPathArrayOfValues) AsRoleBindingPathArrayOfValues() (role_binding.RoleBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(role_binding.RoleBinding_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SetupCreateOwnerRoleRequest_FieldSubPathArrayOfValues) AsMultiRegionPolicyPathArrayOfValues() (policy.Policy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(policy.Policy_FieldPathArrayOfValues)
	return res, ok
}
