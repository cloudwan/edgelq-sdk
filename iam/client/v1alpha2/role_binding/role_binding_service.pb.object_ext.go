// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/role_binding_service.proto
// DO NOT EDIT!!!

package role_binding_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role_binding"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role_binding.RoleBinding{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetRoleBindingRequest) GotenObjectExt() {}

func (o *GetRoleBindingRequest) MakeFullFieldMask() *GetRoleBindingRequest_FieldMask {
	return FullGetRoleBindingRequest_FieldMask()
}

func (o *GetRoleBindingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetRoleBindingRequest_FieldMask()
}

func (o *GetRoleBindingRequest) MakeDiffFieldMask(other *GetRoleBindingRequest) *GetRoleBindingRequest_FieldMask {
	if o == nil && other == nil {
		return &GetRoleBindingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetRoleBindingRequest_FieldMask()
	}

	res := &GetRoleBindingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetRoleBindingRequest_FieldTerminalPath{selector: GetRoleBindingRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetRoleBindingRequest_FieldTerminalPath{selector: GetRoleBindingRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetRoleBindingRequest_FieldTerminalPath{selector: GetRoleBindingRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetRoleBindingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetRoleBindingRequest))
}

func (o *GetRoleBindingRequest) Clone() *GetRoleBindingRequest {
	if o == nil {
		return nil
	}
	result := &GetRoleBindingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &role_binding.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role_binding.RoleBinding_FieldMask)
	result.View = o.View
	return result
}

func (o *GetRoleBindingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetRoleBindingRequest) Merge(source *GetRoleBindingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &role_binding.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetRoleBindingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetRoleBindingRequest))
}

func (o *BatchGetRoleBindingsRequest) GotenObjectExt() {}

func (o *BatchGetRoleBindingsRequest) MakeFullFieldMask() *BatchGetRoleBindingsRequest_FieldMask {
	return FullBatchGetRoleBindingsRequest_FieldMask()
}

func (o *BatchGetRoleBindingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRoleBindingsRequest_FieldMask()
}

func (o *BatchGetRoleBindingsRequest) MakeDiffFieldMask(other *BatchGetRoleBindingsRequest) *BatchGetRoleBindingsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRoleBindingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRoleBindingsRequest_FieldMask()
	}

	res := &BatchGetRoleBindingsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetRoleBindingsRequest_FieldTerminalPath{selector: BatchGetRoleBindingsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetRoleBindingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRoleBindingsRequest))
}

func (o *BatchGetRoleBindingsRequest) Clone() *BatchGetRoleBindingsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetRoleBindingsRequest{}
	result.Names = make([]*role_binding.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &role_binding.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role_binding.RoleBinding_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetRoleBindingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRoleBindingsRequest) Merge(source *BatchGetRoleBindingsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role_binding.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &role_binding.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetRoleBindingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRoleBindingsRequest))
}

func (o *BatchGetRoleBindingsResponse) GotenObjectExt() {}

func (o *BatchGetRoleBindingsResponse) MakeFullFieldMask() *BatchGetRoleBindingsResponse_FieldMask {
	return FullBatchGetRoleBindingsResponse_FieldMask()
}

func (o *BatchGetRoleBindingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRoleBindingsResponse_FieldMask()
}

func (o *BatchGetRoleBindingsResponse) MakeDiffFieldMask(other *BatchGetRoleBindingsResponse) *BatchGetRoleBindingsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRoleBindingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRoleBindingsResponse_FieldMask()
	}

	res := &BatchGetRoleBindingsResponse_FieldMask{}

	if len(o.GetRoleBindings()) == len(other.GetRoleBindings()) {
		for i, lValue := range o.GetRoleBindings() {
			rValue := other.GetRoleBindings()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetRoleBindingsResponse_FieldTerminalPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRoleBindingsResponse_FieldTerminalPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorRoleBindings})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRoleBindingsResponse_FieldTerminalPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRoleBindingsResponse_FieldTerminalPath{selector: BatchGetRoleBindingsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetRoleBindingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRoleBindingsResponse))
}

func (o *BatchGetRoleBindingsResponse) Clone() *BatchGetRoleBindingsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetRoleBindingsResponse{}
	result.RoleBindings = make([]*role_binding.RoleBinding, len(o.RoleBindings))
	for i, sourceValue := range o.RoleBindings {
		result.RoleBindings[i] = sourceValue.Clone()
	}
	result.Missing = make([]*role_binding.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &role_binding.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetRoleBindingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRoleBindingsResponse) Merge(source *BatchGetRoleBindingsResponse) {
	for _, sourceValue := range source.GetRoleBindings() {
		exists := false
		for _, currentValue := range o.RoleBindings {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role_binding.RoleBinding
			if sourceValue != nil {
				newDstElement = new(role_binding.RoleBinding)
				newDstElement.Merge(sourceValue)
			}
			o.RoleBindings = append(o.RoleBindings, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role_binding.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &role_binding.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetRoleBindingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRoleBindingsResponse))
}

func (o *ListRoleBindingsRequest) GotenObjectExt() {}

func (o *ListRoleBindingsRequest) MakeFullFieldMask() *ListRoleBindingsRequest_FieldMask {
	return FullListRoleBindingsRequest_FieldMask()
}

func (o *ListRoleBindingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRoleBindingsRequest_FieldMask()
}

func (o *ListRoleBindingsRequest) MakeDiffFieldMask(other *ListRoleBindingsRequest) *ListRoleBindingsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListRoleBindingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRoleBindingsRequest_FieldMask()
	}

	res := &ListRoleBindingsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListRoleBindingsRequest_FieldTerminalPath{selector: ListRoleBindingsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListRoleBindingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRoleBindingsRequest))
}

func (o *ListRoleBindingsRequest) Clone() *ListRoleBindingsRequest {
	if o == nil {
		return nil
	}
	result := &ListRoleBindingsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &role_binding.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &role_binding.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &role_binding.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &role_binding.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role_binding.RoleBinding_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListRoleBindingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRoleBindingsRequest) Merge(source *ListRoleBindingsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &role_binding.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &role_binding.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &role_binding.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &role_binding.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListRoleBindingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRoleBindingsRequest))
}

func (o *ListRoleBindingsResponse) GotenObjectExt() {}

func (o *ListRoleBindingsResponse) MakeFullFieldMask() *ListRoleBindingsResponse_FieldMask {
	return FullListRoleBindingsResponse_FieldMask()
}

func (o *ListRoleBindingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRoleBindingsResponse_FieldMask()
}

func (o *ListRoleBindingsResponse) MakeDiffFieldMask(other *ListRoleBindingsResponse) *ListRoleBindingsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListRoleBindingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRoleBindingsResponse_FieldMask()
	}

	res := &ListRoleBindingsResponse_FieldMask{}

	if len(o.GetRoleBindings()) == len(other.GetRoleBindings()) {
		for i, lValue := range o.GetRoleBindings() {
			rValue := other.GetRoleBindings()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorRoleBindings})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorRoleBindings})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListRoleBindingsResponse_FieldTerminalPath{selector: ListRoleBindingsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListRoleBindingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRoleBindingsResponse))
}

func (o *ListRoleBindingsResponse) Clone() *ListRoleBindingsResponse {
	if o == nil {
		return nil
	}
	result := &ListRoleBindingsResponse{}
	result.RoleBindings = make([]*role_binding.RoleBinding, len(o.RoleBindings))
	for i, sourceValue := range o.RoleBindings {
		result.RoleBindings[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &role_binding.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &role_binding.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListRoleBindingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRoleBindingsResponse) Merge(source *ListRoleBindingsResponse) {
	for _, sourceValue := range source.GetRoleBindings() {
		exists := false
		for _, currentValue := range o.RoleBindings {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role_binding.RoleBinding
			if sourceValue != nil {
				newDstElement = new(role_binding.RoleBinding)
				newDstElement.Merge(sourceValue)
			}
			o.RoleBindings = append(o.RoleBindings, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &role_binding.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &role_binding.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListRoleBindingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRoleBindingsResponse))
}

func (o *WatchRoleBindingRequest) GotenObjectExt() {}

func (o *WatchRoleBindingRequest) MakeFullFieldMask() *WatchRoleBindingRequest_FieldMask {
	return FullWatchRoleBindingRequest_FieldMask()
}

func (o *WatchRoleBindingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleBindingRequest_FieldMask()
}

func (o *WatchRoleBindingRequest) MakeDiffFieldMask(other *WatchRoleBindingRequest) *WatchRoleBindingRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleBindingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleBindingRequest_FieldMask()
	}

	res := &WatchRoleBindingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingRequest_FieldTerminalPath{selector: WatchRoleBindingRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRoleBindingRequest_FieldTerminalPath{selector: WatchRoleBindingRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRoleBindingRequest_FieldTerminalPath{selector: WatchRoleBindingRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchRoleBindingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleBindingRequest))
}

func (o *WatchRoleBindingRequest) Clone() *WatchRoleBindingRequest {
	if o == nil {
		return nil
	}
	result := &WatchRoleBindingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &role_binding.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role_binding.RoleBinding_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchRoleBindingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleBindingRequest) Merge(source *WatchRoleBindingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &role_binding.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchRoleBindingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleBindingRequest))
}

func (o *WatchRoleBindingResponse) GotenObjectExt() {}

func (o *WatchRoleBindingResponse) MakeFullFieldMask() *WatchRoleBindingResponse_FieldMask {
	return FullWatchRoleBindingResponse_FieldMask()
}

func (o *WatchRoleBindingResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleBindingResponse_FieldMask()
}

func (o *WatchRoleBindingResponse) MakeDiffFieldMask(other *WatchRoleBindingResponse) *WatchRoleBindingResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleBindingResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleBindingResponse_FieldMask()
	}

	res := &WatchRoleBindingResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchRoleBindingResponse_FieldTerminalPath{selector: WatchRoleBindingResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchRoleBindingResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleBindingResponse))
}

func (o *WatchRoleBindingResponse) Clone() *WatchRoleBindingResponse {
	if o == nil {
		return nil
	}
	result := &WatchRoleBindingResponse{}
	result.Change = proto.Clone(o.Change).(*role_binding.RoleBindingChange)
	return result
}

func (o *WatchRoleBindingResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleBindingResponse) Merge(source *WatchRoleBindingResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(role_binding.RoleBindingChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchRoleBindingResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleBindingResponse))
}

func (o *WatchRoleBindingsRequest) GotenObjectExt() {}

func (o *WatchRoleBindingsRequest) MakeFullFieldMask() *WatchRoleBindingsRequest_FieldMask {
	return FullWatchRoleBindingsRequest_FieldMask()
}

func (o *WatchRoleBindingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleBindingsRequest_FieldMask()
}

func (o *WatchRoleBindingsRequest) MakeDiffFieldMask(other *WatchRoleBindingsRequest) *WatchRoleBindingsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleBindingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleBindingsRequest_FieldMask()
	}

	res := &WatchRoleBindingsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchRoleBindingsRequest_FieldTerminalPath{selector: WatchRoleBindingsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchRoleBindingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleBindingsRequest))
}

func (o *WatchRoleBindingsRequest) Clone() *WatchRoleBindingsRequest {
	if o == nil {
		return nil
	}
	result := &WatchRoleBindingsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &role_binding.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &role_binding.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &role_binding.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &role_binding.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*role_binding.RoleBinding_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchRoleBindingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleBindingsRequest) Merge(source *WatchRoleBindingsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &role_binding.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &role_binding.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &role_binding.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &role_binding.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchRoleBindingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleBindingsRequest))
}

func (o *WatchRoleBindingsResponse) GotenObjectExt() {}

func (o *WatchRoleBindingsResponse) MakeFullFieldMask() *WatchRoleBindingsResponse_FieldMask {
	return FullWatchRoleBindingsResponse_FieldMask()
}

func (o *WatchRoleBindingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleBindingsResponse_FieldMask()
}

func (o *WatchRoleBindingsResponse) MakeDiffFieldMask(other *WatchRoleBindingsResponse) *WatchRoleBindingsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleBindingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleBindingsResponse_FieldMask()
	}

	res := &WatchRoleBindingsResponse_FieldMask{}

	if len(o.GetRoleBindingChanges()) == len(other.GetRoleBindingChanges()) {
		for i, lValue := range o.GetRoleBindingChanges() {
			rValue := other.GetRoleBindingChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorRoleBindingChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldSubPath{selector: WatchRoleBindingsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponse_FieldTerminalPath{selector: WatchRoleBindingsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchRoleBindingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleBindingsResponse))
}

func (o *WatchRoleBindingsResponse) Clone() *WatchRoleBindingsResponse {
	if o == nil {
		return nil
	}
	result := &WatchRoleBindingsResponse{}
	result.RoleBindingChanges = make([]*role_binding.RoleBindingChange, len(o.RoleBindingChanges))
	for i, sourceValue := range o.RoleBindingChanges {
		result.RoleBindingChanges[i] = proto.Clone(sourceValue).(*role_binding.RoleBindingChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchRoleBindingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleBindingsResponse) Merge(source *WatchRoleBindingsResponse) {
	for _, sourceValue := range source.GetRoleBindingChanges() {
		exists := false
		for _, currentValue := range o.RoleBindingChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *role_binding.RoleBindingChange
			if sourceValue != nil {
				newDstElement = new(role_binding.RoleBindingChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.RoleBindingChanges = append(o.RoleBindingChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchRoleBindingsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchRoleBindingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleBindingsResponse))
}

func (o *WatchRoleBindingsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchRoleBindingsResponse_PageTokenChange) MakeFullFieldMask() *WatchRoleBindingsResponse_PageTokenChange_FieldMask {
	return FullWatchRoleBindingsResponse_PageTokenChange_FieldMask()
}

func (o *WatchRoleBindingsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRoleBindingsResponse_PageTokenChange_FieldMask()
}

func (o *WatchRoleBindingsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchRoleBindingsResponse_PageTokenChange) *WatchRoleBindingsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchRoleBindingsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRoleBindingsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchRoleBindingsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath{selector: WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchRoleBindingsResponsePageTokenChange_FieldTerminalPath{selector: WatchRoleBindingsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchRoleBindingsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRoleBindingsResponse_PageTokenChange))
}

func (o *WatchRoleBindingsResponse_PageTokenChange) Clone() *WatchRoleBindingsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchRoleBindingsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &role_binding.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &role_binding.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchRoleBindingsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRoleBindingsResponse_PageTokenChange) Merge(source *WatchRoleBindingsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &role_binding.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &role_binding.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchRoleBindingsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRoleBindingsResponse_PageTokenChange))
}

func (o *CreateRoleBindingRequest) GotenObjectExt() {}

func (o *CreateRoleBindingRequest) MakeFullFieldMask() *CreateRoleBindingRequest_FieldMask {
	return FullCreateRoleBindingRequest_FieldMask()
}

func (o *CreateRoleBindingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateRoleBindingRequest_FieldMask()
}

func (o *CreateRoleBindingRequest) MakeDiffFieldMask(other *CreateRoleBindingRequest) *CreateRoleBindingRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateRoleBindingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateRoleBindingRequest_FieldMask()
	}

	res := &CreateRoleBindingRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateRoleBindingRequest_FieldTerminalPath{selector: CreateRoleBindingRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetRoleBinding().MakeDiffFieldMask(other.GetRoleBinding())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateRoleBindingRequest_FieldTerminalPath{selector: CreateRoleBindingRequest_FieldPathSelectorRoleBinding})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateRoleBindingRequest_FieldSubPath{selector: CreateRoleBindingRequest_FieldPathSelectorRoleBinding, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateRoleBindingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateRoleBindingRequest))
}

func (o *CreateRoleBindingRequest) Clone() *CreateRoleBindingRequest {
	if o == nil {
		return nil
	}
	result := &CreateRoleBindingRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &role_binding.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.RoleBinding = o.RoleBinding.Clone()
	return result
}

func (o *CreateRoleBindingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateRoleBindingRequest) Merge(source *CreateRoleBindingRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &role_binding.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetRoleBinding() != nil {
		if o.RoleBinding == nil {
			o.RoleBinding = new(role_binding.RoleBinding)
		}
		o.RoleBinding.Merge(source.GetRoleBinding())
	}
}

func (o *CreateRoleBindingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateRoleBindingRequest))
}

func (o *UpdateRoleBindingRequest) GotenObjectExt() {}

func (o *UpdateRoleBindingRequest) MakeFullFieldMask() *UpdateRoleBindingRequest_FieldMask {
	return FullUpdateRoleBindingRequest_FieldMask()
}

func (o *UpdateRoleBindingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRoleBindingRequest_FieldMask()
}

func (o *UpdateRoleBindingRequest) MakeDiffFieldMask(other *UpdateRoleBindingRequest) *UpdateRoleBindingRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateRoleBindingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRoleBindingRequest_FieldMask()
	}

	res := &UpdateRoleBindingRequest_FieldMask{}
	{
		subMask := o.GetRoleBinding().MakeDiffFieldMask(other.GetRoleBinding())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorRoleBinding})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRoleBindingRequest_FieldSubPath{selector: UpdateRoleBindingRequest_FieldPathSelectorRoleBinding, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRoleBindingRequest_FieldSubPath{selector: UpdateRoleBindingRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateRoleBindingRequest_FieldTerminalPath{selector: UpdateRoleBindingRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateRoleBindingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRoleBindingRequest))
}

func (o *UpdateRoleBindingRequest) Clone() *UpdateRoleBindingRequest {
	if o == nil {
		return nil
	}
	result := &UpdateRoleBindingRequest{}
	result.RoleBinding = o.RoleBinding.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*role_binding.RoleBinding_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateRoleBindingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRoleBindingRequest) Merge(source *UpdateRoleBindingRequest) {
	if source.GetRoleBinding() != nil {
		if o.RoleBinding == nil {
			o.RoleBinding = new(role_binding.RoleBinding)
		}
		o.RoleBinding.Merge(source.GetRoleBinding())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateRoleBindingRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateRoleBindingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRoleBindingRequest))
}

func (o *UpdateRoleBindingRequest_CAS) GotenObjectExt() {}

func (o *UpdateRoleBindingRequest_CAS) MakeFullFieldMask() *UpdateRoleBindingRequest_CAS_FieldMask {
	return FullUpdateRoleBindingRequest_CAS_FieldMask()
}

func (o *UpdateRoleBindingRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRoleBindingRequest_CAS_FieldMask()
}

func (o *UpdateRoleBindingRequest_CAS) MakeDiffFieldMask(other *UpdateRoleBindingRequest_CAS) *UpdateRoleBindingRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateRoleBindingRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRoleBindingRequest_CAS_FieldMask()
	}

	res := &UpdateRoleBindingRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRoleBindingRequestCAS_FieldTerminalPath{selector: UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRoleBindingRequestCAS_FieldSubPath{selector: UpdateRoleBindingRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateRoleBindingRequestCAS_FieldTerminalPath{selector: UpdateRoleBindingRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateRoleBindingRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRoleBindingRequest_CAS))
}

func (o *UpdateRoleBindingRequest_CAS) Clone() *UpdateRoleBindingRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateRoleBindingRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*role_binding.RoleBinding_FieldMask)
	return result
}

func (o *UpdateRoleBindingRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRoleBindingRequest_CAS) Merge(source *UpdateRoleBindingRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(role_binding.RoleBinding)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(role_binding.RoleBinding_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateRoleBindingRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRoleBindingRequest_CAS))
}

func (o *DeleteRoleBindingRequest) GotenObjectExt() {}

func (o *DeleteRoleBindingRequest) MakeFullFieldMask() *DeleteRoleBindingRequest_FieldMask {
	return FullDeleteRoleBindingRequest_FieldMask()
}

func (o *DeleteRoleBindingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteRoleBindingRequest_FieldMask()
}

func (o *DeleteRoleBindingRequest) MakeDiffFieldMask(other *DeleteRoleBindingRequest) *DeleteRoleBindingRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteRoleBindingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteRoleBindingRequest_FieldMask()
	}

	res := &DeleteRoleBindingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteRoleBindingRequest_FieldTerminalPath{selector: DeleteRoleBindingRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteRoleBindingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteRoleBindingRequest))
}

func (o *DeleteRoleBindingRequest) Clone() *DeleteRoleBindingRequest {
	if o == nil {
		return nil
	}
	result := &DeleteRoleBindingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &role_binding.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteRoleBindingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteRoleBindingRequest) Merge(source *DeleteRoleBindingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &role_binding.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteRoleBindingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteRoleBindingRequest))
}
