// Code generated by protoc-gen-goten-client
// API: RoleBindingService
// DO NOT EDIT!!!

package role_binding_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role_binding"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &role_binding.RoleBinding{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized         bool
	roleBindingServiceDescriptor   *RoleBindingServiceDescriptor
	getRoleBindingDescriptor       *GetRoleBindingDescriptor
	batchGetRoleBindingsDescriptor *BatchGetRoleBindingsDescriptor
	listRoleBindingsDescriptor     *ListRoleBindingsDescriptor
	watchRoleBindingDescriptor     *WatchRoleBindingDescriptor
	watchRoleBindingsDescriptor    *WatchRoleBindingsDescriptor
	createRoleBindingDescriptor    *CreateRoleBindingDescriptor
	updateRoleBindingDescriptor    *UpdateRoleBindingDescriptor
	deleteRoleBindingDescriptor    *DeleteRoleBindingDescriptor
	setupCreateOwnerRoleDescriptor *SetupCreateOwnerRoleDescriptor
)

type GetRoleBindingDescriptor struct{}

type GetRoleBindingDescriptorClientMsgHandle struct{}

type GetRoleBindingDescriptorServerMsgHandle struct{}

func (d *GetRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetRoleBindingRequest{}
}

func (d *GetRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *GetRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *GetRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *GetRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *GetRoleBindingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetRoleBindingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetRoleBindingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetRoleBindingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetRoleBindingDescriptor) GetVerb() string {
	return "get"
}

func (d *GetRoleBindingDescriptor) GetMethodName() string {
	return "GetRoleBinding"
}

func (d *GetRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/GetRoleBinding"
}

func (d *GetRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GetRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *GetRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetRoleBindingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *GetRoleBindingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *GetRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRoleBindingDescriptorClientMsgHandle{}
}

func (d *GetRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRoleBindingDescriptorServerMsgHandle{}
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*role_binding.Name)(nil)
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRoleBindingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRoleBindingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetRoleBindingDescriptor() *GetRoleBindingDescriptor {
	return getRoleBindingDescriptor
}

type BatchGetRoleBindingsDescriptor struct{}

type BatchGetRoleBindingsDescriptorClientMsgHandle struct{}

type BatchGetRoleBindingsDescriptorServerMsgHandle struct{}

func (d *BatchGetRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetRoleBindingsRequest{}
}

func (d *BatchGetRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetRoleBindingsResponse{}
}

func (d *BatchGetRoleBindingsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetRoleBindingsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetRoleBindingsDescriptor) GetMethodName() string {
	return "BatchGetRoleBindings"
}

func (d *BatchGetRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/BatchGetRoleBindings"
}

func (d *BatchGetRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *BatchGetRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *BatchGetRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *BatchGetRoleBindingsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *BatchGetRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRoleBindingsDescriptorClientMsgHandle{}
}

func (d *BatchGetRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRoleBindingsDescriptorServerMsgHandle{}
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(role_binding.RoleBindingNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (role_binding.RoleBindingNameList)(nil)
}

func (h *BatchGetRoleBindingsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetRoleBindings()
	list := make(role_binding.RoleBindingNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetRoleBindingsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetRoleBindingsDescriptor() *BatchGetRoleBindingsDescriptor {
	return batchGetRoleBindingsDescriptor
}

type ListRoleBindingsDescriptor struct{}

type ListRoleBindingsDescriptorClientMsgHandle struct{}

type ListRoleBindingsDescriptorServerMsgHandle struct{}

func (d *ListRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListRoleBindingsRequest{}
}

func (d *ListRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListRoleBindingsResponse{}
}

func (d *ListRoleBindingsDescriptor) IsUnary() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListRoleBindingsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListRoleBindingsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListRoleBindingsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListRoleBindingsDescriptor) GetMethodName() string {
	return "ListRoleBindings"
}

func (d *ListRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/ListRoleBindings"
}

func (d *ListRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *ListRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *ListRoleBindingsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *ListRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRoleBindingsDescriptorClientMsgHandle{}
}

func (d *ListRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRoleBindingsDescriptorServerMsgHandle{}
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRoleBindingsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetRoleBindings()
	list := make(role_binding.RoleBindingNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListRoleBindingsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListRoleBindingsDescriptor() *ListRoleBindingsDescriptor {
	return listRoleBindingsDescriptor
}

type WatchRoleBindingDescriptor struct{}

type WatchRoleBindingDescriptorClientMsgHandle struct{}

type WatchRoleBindingDescriptorServerMsgHandle struct{}

func (d *WatchRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRoleBindingRequest{}
}

func (d *WatchRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRoleBindingResponse{}
}

func (d *WatchRoleBindingDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRoleBindingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchRoleBindingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRoleBindingDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRoleBindingDescriptor) GetMethodName() string {
	return "WatchRoleBinding"
}

func (d *WatchRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/WatchRoleBinding"
}

func (d *WatchRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *WatchRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchRoleBindingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *WatchRoleBindingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *WatchRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingDescriptorClientMsgHandle{}
}

func (d *WatchRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingDescriptorServerMsgHandle{}
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*role_binding.Name)(nil)
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRoleBindingResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *role_binding.RoleBindingChange_Added_:
			return tResChange.Added.GetRoleBinding().GetName()
		case *role_binding.RoleBindingChange_Modified_:
			return tResChange.Modified.GetName()
		case *role_binding.RoleBindingChange_Removed_:
			return tResChange.Removed.GetName()
		case *role_binding.RoleBindingChange_Current_:
			return tResChange.Current.GetRoleBinding().GetName()
		}
	}
	return (*role_binding.Name)(nil)
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRoleBindingResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchRoleBindingResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchRoleBindingDescriptor() *WatchRoleBindingDescriptor {
	return watchRoleBindingDescriptor
}

type WatchRoleBindingsDescriptor struct{}

type WatchRoleBindingsDescriptorClientMsgHandle struct{}

type WatchRoleBindingsDescriptorServerMsgHandle struct{}

func (d *WatchRoleBindingsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRoleBindingsRequest{}
}

func (d *WatchRoleBindingsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRoleBindingsResponse{}
}

func (d *WatchRoleBindingsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRoleBindingsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRoleBindingsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchRoleBindingsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRoleBindingsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRoleBindingsDescriptor) GetMethodName() string {
	return "WatchRoleBindings"
}

func (d *WatchRoleBindingsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/WatchRoleBindings"
}

func (d *WatchRoleBindingsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchRoleBindingsDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *WatchRoleBindingsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchRoleBindingsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchRoleBindingsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *WatchRoleBindingsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *WatchRoleBindingsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingsDescriptorClientMsgHandle{}
}

func (d *WatchRoleBindingsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRoleBindingsDescriptorServerMsgHandle{}
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRoleBindingsRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRoleBindingsRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchRoleBindingsRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*role_binding.ParentName)(nil)
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRoleBindingsResponse) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRoleBindingsResponse) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetRoleBindingChanges()
	list := make(role_binding.RoleBindingNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *role_binding.RoleBindingChange_Added_:
			list = append(list, tResChange.Added.GetRoleBinding().GetName())
		case *role_binding.RoleBindingChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *role_binding.RoleBindingChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *role_binding.RoleBindingChange_Current_:
			list = append(list, tResChange.Current.GetRoleBinding().GetName())
		}
	}
	return list
}

func (h *WatchRoleBindingsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRoleBindingsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchRoleBindingsResponse) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchRoleBindingsDescriptor() *WatchRoleBindingsDescriptor {
	return watchRoleBindingsDescriptor
}

type CreateRoleBindingDescriptor struct{}

type CreateRoleBindingDescriptorClientMsgHandle struct{}

type CreateRoleBindingDescriptorServerMsgHandle struct{}

func (d *CreateRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateRoleBindingRequest{}
}

func (d *CreateRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *CreateRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateRoleBindingDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateRoleBindingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateRoleBindingDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateRoleBindingDescriptor) GetMethodName() string {
	return "CreateRoleBinding"
}

func (d *CreateRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/CreateRoleBinding"
}

func (d *CreateRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CreateRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *CreateRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateRoleBindingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *CreateRoleBindingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *CreateRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRoleBindingDescriptorClientMsgHandle{}
}

func (d *CreateRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRoleBindingDescriptorServerMsgHandle{}
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetRoleBinding().GetName()
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRoleBindingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*role_binding.ParentName)(nil)
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRoleBindingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateRoleBindingDescriptor() *CreateRoleBindingDescriptor {
	return createRoleBindingDescriptor
}

type UpdateRoleBindingDescriptor struct{}

type UpdateRoleBindingDescriptorClientMsgHandle struct{}

type UpdateRoleBindingDescriptorServerMsgHandle struct{}

func (d *UpdateRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateRoleBindingRequest{}
}

func (d *UpdateRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *UpdateRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateRoleBindingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateRoleBindingDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateRoleBindingDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateRoleBindingDescriptor) GetMethodName() string {
	return "UpdateRoleBinding"
}

func (d *UpdateRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/UpdateRoleBinding"
}

func (d *UpdateRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *UpdateRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *UpdateRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateRoleBindingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *UpdateRoleBindingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *UpdateRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRoleBindingDescriptorClientMsgHandle{}
}

func (d *UpdateRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRoleBindingDescriptorServerMsgHandle{}
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetRoleBinding().GetName()
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRoleBindingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateRoleBindingDescriptor() *UpdateRoleBindingDescriptor {
	return updateRoleBindingDescriptor
}

type DeleteRoleBindingDescriptor struct{}

type DeleteRoleBindingDescriptorClientMsgHandle struct{}

type DeleteRoleBindingDescriptorServerMsgHandle struct{}

func (d *DeleteRoleBindingDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteRoleBindingRequest{}
}

func (d *DeleteRoleBindingDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteRoleBindingDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteRoleBindingDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteRoleBindingDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteRoleBindingDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteRoleBindingDescriptor) GetMethodName() string {
	return "DeleteRoleBinding"
}

func (d *DeleteRoleBindingDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/DeleteRoleBinding"
}

func (d *DeleteRoleBindingDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeleteRoleBindingDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *DeleteRoleBindingDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteRoleBindingDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteRoleBindingDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *DeleteRoleBindingDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *DeleteRoleBindingDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRoleBindingDescriptorClientMsgHandle{}
}

func (d *DeleteRoleBindingDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRoleBindingDescriptorServerMsgHandle{}
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteRoleBindingRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*role_binding.Name)(nil)
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteRoleBindingRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRoleBindingRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteRoleBindingRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRoleBindingDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteRoleBindingDescriptor() *DeleteRoleBindingDescriptor {
	return deleteRoleBindingDescriptor
}

type SetupCreateOwnerRoleDescriptor struct{}

type SetupCreateOwnerRoleDescriptorClientMsgHandle struct{}

type SetupCreateOwnerRoleDescriptorServerMsgHandle struct{}

func (d *SetupCreateOwnerRoleDescriptor) NewEmptyClientMsg() proto.Message {
	return &SetupCreateOwnerRoleRequest{}
}

func (d *SetupCreateOwnerRoleDescriptor) NewEmptyServerMsg() proto.Message {
	return &role_binding.RoleBinding{}
}

func (d *SetupCreateOwnerRoleDescriptor) IsUnary() bool {
	return true
}

func (d *SetupCreateOwnerRoleDescriptor) IsClientStream() bool {
	return false
}

func (d *SetupCreateOwnerRoleDescriptor) IsServerStream() bool {
	return false
}

func (d *SetupCreateOwnerRoleDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *SetupCreateOwnerRoleDescriptor) IsPluralSubject() bool {
	return false
}

func (d *SetupCreateOwnerRoleDescriptor) HasSubjectResource() bool {
	return true
}

func (d *SetupCreateOwnerRoleDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *SetupCreateOwnerRoleDescriptor) GetVerb() string {
	return "setupCreateOwnerRole"
}

func (d *SetupCreateOwnerRoleDescriptor) GetMethodName() string {
	return "SetupCreateOwnerRole"
}

func (d *SetupCreateOwnerRoleDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService/SetupCreateOwnerRole"
}

func (d *SetupCreateOwnerRoleDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *SetupCreateOwnerRoleDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *SetupCreateOwnerRoleDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *SetupCreateOwnerRoleDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *SetupCreateOwnerRoleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return roleBindingServiceDescriptor
}

func (d *SetupCreateOwnerRoleDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return role_binding.GetDescriptor()
}

func (d *SetupCreateOwnerRoleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SetupCreateOwnerRoleDescriptorClientMsgHandle{}
}

func (d *SetupCreateOwnerRoleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SetupCreateOwnerRoleDescriptorServerMsgHandle{}
}

func (h *SetupCreateOwnerRoleDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SetupCreateOwnerRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SetupCreateOwnerRoleRequest) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SetupCreateOwnerRoleDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SetupCreateOwnerRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SetupCreateOwnerRoleRequest) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SetupCreateOwnerRoleDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SetupCreateOwnerRoleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SetupCreateOwnerRoleRequest) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*role_binding.ParentName)(nil)
}

func (h *SetupCreateOwnerRoleDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*role_binding.RoleBinding) *role_binding.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SetupCreateOwnerRoleDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*role_binding.RoleBinding) []*role_binding.Name
	})
	if ok {
		return role_binding.RoleBindingNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SetupCreateOwnerRoleDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*role_binding.RoleBinding)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*role_binding.RoleBinding) *role_binding.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetSetupCreateOwnerRoleDescriptor() *SetupCreateOwnerRoleDescriptor {
	return setupCreateOwnerRoleDescriptor
}

type RoleBindingServiceDescriptor struct{}

func (d *RoleBindingServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getRoleBindingDescriptor,
		batchGetRoleBindingsDescriptor,
		listRoleBindingsDescriptor,
		watchRoleBindingDescriptor,
		watchRoleBindingsDescriptor,
		createRoleBindingDescriptor,
		updateRoleBindingDescriptor,
		deleteRoleBindingDescriptor,
		setupCreateOwnerRoleDescriptor,
	}
}

func (d *RoleBindingServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.RoleBindingService"
}

func (d *RoleBindingServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *RoleBindingServiceDescriptor) GetApiName() string {
	return "RoleBindingService"
}

func (d *RoleBindingServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *RoleBindingServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetRoleBindingServiceDescriptor() *RoleBindingServiceDescriptor {
	return roleBindingServiceDescriptor
}

func initDescriptors() {
	roleBindingServiceDescriptor = &RoleBindingServiceDescriptor{}
	getRoleBindingDescriptor = &GetRoleBindingDescriptor{}
	batchGetRoleBindingsDescriptor = &BatchGetRoleBindingsDescriptor{}
	listRoleBindingsDescriptor = &ListRoleBindingsDescriptor{}
	watchRoleBindingDescriptor = &WatchRoleBindingDescriptor{}
	watchRoleBindingsDescriptor = &WatchRoleBindingsDescriptor{}
	createRoleBindingDescriptor = &CreateRoleBindingDescriptor{}
	updateRoleBindingDescriptor = &UpdateRoleBindingDescriptor{}
	deleteRoleBindingDescriptor = &DeleteRoleBindingDescriptor{}
	setupCreateOwnerRoleDescriptor = &SetupCreateOwnerRoleDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(roleBindingServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetRoleBindingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listRoleBindingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRoleBindingsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteRoleBindingDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(setupCreateOwnerRoleDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
