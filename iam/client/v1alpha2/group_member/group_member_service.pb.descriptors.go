// Code generated by protoc-gen-goten-client
// API: GroupMemberService
// DO NOT EDIT!!!

package group_member_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	group_member "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/group_member"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &group_member.GroupMember{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized         bool
	groupMemberServiceDescriptor   *GroupMemberServiceDescriptor
	getGroupMemberDescriptor       *GetGroupMemberDescriptor
	batchGetGroupMembersDescriptor *BatchGetGroupMembersDescriptor
	listGroupMembersDescriptor     *ListGroupMembersDescriptor
	watchGroupMemberDescriptor     *WatchGroupMemberDescriptor
	watchGroupMembersDescriptor    *WatchGroupMembersDescriptor
	createGroupMemberDescriptor    *CreateGroupMemberDescriptor
	updateGroupMemberDescriptor    *UpdateGroupMemberDescriptor
	deleteGroupMemberDescriptor    *DeleteGroupMemberDescriptor
)

type GetGroupMemberDescriptor struct{}

type GetGroupMemberDescriptorClientMsgHandle struct{}

type GetGroupMemberDescriptorServerMsgHandle struct{}

func (d *GetGroupMemberDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetGroupMemberRequest{}
}

func (d *GetGroupMemberDescriptor) NewEmptyServerMsg() proto.Message {
	return &group_member.GroupMember{}
}

func (d *GetGroupMemberDescriptor) IsUnary() bool {
	return true
}

func (d *GetGroupMemberDescriptor) IsClientStream() bool {
	return false
}

func (d *GetGroupMemberDescriptor) IsServerStream() bool {
	return false
}

func (d *GetGroupMemberDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetGroupMemberDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetGroupMemberDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetGroupMemberDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetGroupMemberDescriptor) GetVerb() string {
	return "get"
}

func (d *GetGroupMemberDescriptor) GetMethodName() string {
	return "GetGroupMember"
}

func (d *GetGroupMemberDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/GetGroupMember"
}

func (d *GetGroupMemberDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GetGroupMemberDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *GetGroupMemberDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GetGroupMemberDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetGroupMemberDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *GetGroupMemberDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *GetGroupMemberDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetGroupMemberDescriptorClientMsgHandle{}
}

func (d *GetGroupMemberDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetGroupMemberDescriptorServerMsgHandle{}
}

func (h *GetGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetGroupMemberRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*group_member.Name)(nil)
}

func (h *GetGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetGroupMemberRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetGroupMemberDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetGroupMemberRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*group_member.GroupMember) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*group_member.GroupMember) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetGroupMemberDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*group_member.GroupMember) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetGroupMemberDescriptor() *GetGroupMemberDescriptor {
	return getGroupMemberDescriptor
}

type BatchGetGroupMembersDescriptor struct{}

type BatchGetGroupMembersDescriptorClientMsgHandle struct{}

type BatchGetGroupMembersDescriptorServerMsgHandle struct{}

func (d *BatchGetGroupMembersDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetGroupMembersRequest{}
}

func (d *BatchGetGroupMembersDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetGroupMembersResponse{}
}

func (d *BatchGetGroupMembersDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetGroupMembersDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetGroupMembersDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetGroupMembersDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetGroupMembersDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetGroupMembersDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetGroupMembersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetGroupMembersDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetGroupMembersDescriptor) GetMethodName() string {
	return "BatchGetGroupMembers"
}

func (d *BatchGetGroupMembersDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/BatchGetGroupMembers"
}

func (d *BatchGetGroupMembersDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *BatchGetGroupMembersDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *BatchGetGroupMembersDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *BatchGetGroupMembersDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetGroupMembersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *BatchGetGroupMembersDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *BatchGetGroupMembersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetGroupMembersDescriptorClientMsgHandle{}
}

func (d *BatchGetGroupMembersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetGroupMembersDescriptorServerMsgHandle{}
}

func (h *BatchGetGroupMembersDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetGroupMembersRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetGroupMembersDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetGroupMembersRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(group_member.GroupMemberNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (group_member.GroupMemberNameList)(nil)
}

func (h *BatchGetGroupMembersDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetGroupMembersRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetGroupMembersDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetGroupMembersResponse) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetGroupMembersDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetGroupMembersResponse) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetGroupMembers()
	list := make(group_member.GroupMemberNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetGroupMembersDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetGroupMembersResponse) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetGroupMembersDescriptor() *BatchGetGroupMembersDescriptor {
	return batchGetGroupMembersDescriptor
}

type ListGroupMembersDescriptor struct{}

type ListGroupMembersDescriptorClientMsgHandle struct{}

type ListGroupMembersDescriptorServerMsgHandle struct{}

func (d *ListGroupMembersDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListGroupMembersRequest{}
}

func (d *ListGroupMembersDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListGroupMembersResponse{}
}

func (d *ListGroupMembersDescriptor) IsUnary() bool {
	return true
}

func (d *ListGroupMembersDescriptor) IsClientStream() bool {
	return false
}

func (d *ListGroupMembersDescriptor) IsServerStream() bool {
	return false
}

func (d *ListGroupMembersDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListGroupMembersDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListGroupMembersDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListGroupMembersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListGroupMembersDescriptor) GetVerb() string {
	return "list"
}

func (d *ListGroupMembersDescriptor) GetMethodName() string {
	return "ListGroupMembers"
}

func (d *ListGroupMembersDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/ListGroupMembers"
}

func (d *ListGroupMembersDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *ListGroupMembersDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *ListGroupMembersDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *ListGroupMembersDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListGroupMembersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *ListGroupMembersDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *ListGroupMembersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListGroupMembersDescriptorClientMsgHandle{}
}

func (d *ListGroupMembersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListGroupMembersDescriptorServerMsgHandle{}
}

func (h *ListGroupMembersDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListGroupMembersRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListGroupMembersDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListGroupMembersRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListGroupMembersDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListGroupMembersRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListGroupMembersDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListGroupMembersResponse) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListGroupMembersDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListGroupMembersResponse) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetGroupMembers()
	list := make(group_member.GroupMemberNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListGroupMembersDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListGroupMembersResponse) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListGroupMembersDescriptor() *ListGroupMembersDescriptor {
	return listGroupMembersDescriptor
}

type WatchGroupMemberDescriptor struct{}

type WatchGroupMemberDescriptorClientMsgHandle struct{}

type WatchGroupMemberDescriptorServerMsgHandle struct{}

func (d *WatchGroupMemberDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchGroupMemberRequest{}
}

func (d *WatchGroupMemberDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchGroupMemberResponse{}
}

func (d *WatchGroupMemberDescriptor) IsUnary() bool {
	return false
}

func (d *WatchGroupMemberDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchGroupMemberDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchGroupMemberDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchGroupMemberDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchGroupMemberDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchGroupMemberDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchGroupMemberDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchGroupMemberDescriptor) GetMethodName() string {
	return "WatchGroupMember"
}

func (d *WatchGroupMemberDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/WatchGroupMember"
}

func (d *WatchGroupMemberDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchGroupMemberDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *WatchGroupMemberDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchGroupMemberDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchGroupMemberDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *WatchGroupMemberDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *WatchGroupMemberDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupMemberDescriptorClientMsgHandle{}
}

func (d *WatchGroupMemberDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupMemberDescriptorServerMsgHandle{}
}

func (h *WatchGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchGroupMemberRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*group_member.Name)(nil)
}

func (h *WatchGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchGroupMemberRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchGroupMemberDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchGroupMemberRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMemberResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchGroupMemberResponse) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *group_member.GroupMemberChange_Added_:
			return tResChange.Added.GetGroupMember().GetName()
		case *group_member.GroupMemberChange_Modified_:
			return tResChange.Modified.GetName()
		case *group_member.GroupMemberChange_Removed_:
			return tResChange.Removed.GetName()
		case *group_member.GroupMemberChange_Current_:
			return tResChange.Current.GetGroupMember().GetName()
		}
	}
	return (*group_member.Name)(nil)
}

func (h *WatchGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupMemberResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchGroupMemberResponse) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchGroupMemberDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMemberResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchGroupMemberResponse) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchGroupMemberDescriptor() *WatchGroupMemberDescriptor {
	return watchGroupMemberDescriptor
}

type WatchGroupMembersDescriptor struct{}

type WatchGroupMembersDescriptorClientMsgHandle struct{}

type WatchGroupMembersDescriptorServerMsgHandle struct{}

func (d *WatchGroupMembersDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchGroupMembersRequest{}
}

func (d *WatchGroupMembersDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchGroupMembersResponse{}
}

func (d *WatchGroupMembersDescriptor) IsUnary() bool {
	return false
}

func (d *WatchGroupMembersDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchGroupMembersDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchGroupMembersDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchGroupMembersDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchGroupMembersDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchGroupMembersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchGroupMembersDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchGroupMembersDescriptor) GetMethodName() string {
	return "WatchGroupMembers"
}

func (d *WatchGroupMembersDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/WatchGroupMembers"
}

func (d *WatchGroupMembersDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *WatchGroupMembersDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *WatchGroupMembersDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *WatchGroupMembersDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchGroupMembersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *WatchGroupMembersDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *WatchGroupMembersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupMembersDescriptorClientMsgHandle{}
}

func (d *WatchGroupMembersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchGroupMembersDescriptorServerMsgHandle{}
}

func (h *WatchGroupMembersDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchGroupMembersRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchGroupMembersDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchGroupMembersRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchGroupMembersDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMembersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchGroupMembersRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*group_member.ParentName)(nil)
}

func (h *WatchGroupMembersDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchGroupMembersResponse) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchGroupMembersDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchGroupMembersResponse) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetGroupMemberChanges()
	list := make(group_member.GroupMemberNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *group_member.GroupMemberChange_Added_:
			list = append(list, tResChange.Added.GetGroupMember().GetName())
		case *group_member.GroupMemberChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *group_member.GroupMemberChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *group_member.GroupMemberChange_Current_:
			list = append(list, tResChange.Current.GetGroupMember().GetName())
		}
	}
	return list
}

func (h *WatchGroupMembersDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchGroupMembersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchGroupMembersResponse) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchGroupMembersDescriptor() *WatchGroupMembersDescriptor {
	return watchGroupMembersDescriptor
}

type CreateGroupMemberDescriptor struct{}

type CreateGroupMemberDescriptorClientMsgHandle struct{}

type CreateGroupMemberDescriptorServerMsgHandle struct{}

func (d *CreateGroupMemberDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateGroupMemberRequest{}
}

func (d *CreateGroupMemberDescriptor) NewEmptyServerMsg() proto.Message {
	return &group_member.GroupMember{}
}

func (d *CreateGroupMemberDescriptor) IsUnary() bool {
	return true
}

func (d *CreateGroupMemberDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateGroupMemberDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateGroupMemberDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateGroupMemberDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateGroupMemberDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateGroupMemberDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateGroupMemberDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateGroupMemberDescriptor) GetMethodName() string {
	return "CreateGroupMember"
}

func (d *CreateGroupMemberDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/CreateGroupMember"
}

func (d *CreateGroupMemberDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CreateGroupMemberDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *CreateGroupMemberDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CreateGroupMemberDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateGroupMemberDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *CreateGroupMemberDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *CreateGroupMemberDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateGroupMemberDescriptorClientMsgHandle{}
}

func (d *CreateGroupMemberDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateGroupMemberDescriptorServerMsgHandle{}
}

func (h *CreateGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateGroupMemberRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetGroupMember().GetName()
}

func (h *CreateGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateGroupMemberRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateGroupMemberDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateGroupMemberRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*group_member.ParentName)(nil)
}

func (h *CreateGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*group_member.GroupMember) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*group_member.GroupMember) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateGroupMemberDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*group_member.GroupMember) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateGroupMemberDescriptor() *CreateGroupMemberDescriptor {
	return createGroupMemberDescriptor
}

type UpdateGroupMemberDescriptor struct{}

type UpdateGroupMemberDescriptorClientMsgHandle struct{}

type UpdateGroupMemberDescriptorServerMsgHandle struct{}

func (d *UpdateGroupMemberDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateGroupMemberRequest{}
}

func (d *UpdateGroupMemberDescriptor) NewEmptyServerMsg() proto.Message {
	return &group_member.GroupMember{}
}

func (d *UpdateGroupMemberDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateGroupMemberDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateGroupMemberDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateGroupMemberDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateGroupMemberDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateGroupMemberDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateGroupMemberDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateGroupMemberDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateGroupMemberDescriptor) GetMethodName() string {
	return "UpdateGroupMember"
}

func (d *UpdateGroupMemberDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/UpdateGroupMember"
}

func (d *UpdateGroupMemberDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *UpdateGroupMemberDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *UpdateGroupMemberDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *UpdateGroupMemberDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateGroupMemberDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *UpdateGroupMemberDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *UpdateGroupMemberDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateGroupMemberDescriptorClientMsgHandle{}
}

func (d *UpdateGroupMemberDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateGroupMemberDescriptorServerMsgHandle{}
}

func (h *UpdateGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateGroupMemberRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetGroupMember().GetName()
}

func (h *UpdateGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateGroupMemberRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateGroupMemberDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateGroupMemberRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*group_member.GroupMember) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*group_member.GroupMember) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateGroupMemberDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*group_member.GroupMember)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*group_member.GroupMember) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateGroupMemberDescriptor() *UpdateGroupMemberDescriptor {
	return updateGroupMemberDescriptor
}

type DeleteGroupMemberDescriptor struct{}

type DeleteGroupMemberDescriptorClientMsgHandle struct{}

type DeleteGroupMemberDescriptorServerMsgHandle struct{}

func (d *DeleteGroupMemberDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteGroupMemberRequest{}
}

func (d *DeleteGroupMemberDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteGroupMemberDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteGroupMemberDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteGroupMemberDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteGroupMemberDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteGroupMemberDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteGroupMemberDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteGroupMemberDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteGroupMemberDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteGroupMemberDescriptor) GetMethodName() string {
	return "DeleteGroupMember"
}

func (d *DeleteGroupMemberDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService/DeleteGroupMember"
}

func (d *DeleteGroupMemberDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *DeleteGroupMemberDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *DeleteGroupMemberDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *DeleteGroupMemberDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteGroupMemberDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return groupMemberServiceDescriptor
}

func (d *DeleteGroupMemberDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return group_member.GetDescriptor()
}

func (d *DeleteGroupMemberDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteGroupMemberDescriptorClientMsgHandle{}
}

func (d *DeleteGroupMemberDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteGroupMemberDescriptorServerMsgHandle{}
}

func (h *DeleteGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteGroupMemberRequest) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*group_member.Name)(nil)
}

func (h *DeleteGroupMemberDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteGroupMemberRequest) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteGroupMemberDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteGroupMemberRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteGroupMemberRequest) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *group_member.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteGroupMemberDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*group_member.Name
	})
	if ok {
		return group_member.GroupMemberNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteGroupMemberDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *group_member.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteGroupMemberDescriptor() *DeleteGroupMemberDescriptor {
	return deleteGroupMemberDescriptor
}

type GroupMemberServiceDescriptor struct{}

func (d *GroupMemberServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getGroupMemberDescriptor,
		batchGetGroupMembersDescriptor,
		listGroupMembersDescriptor,
		watchGroupMemberDescriptor,
		watchGroupMembersDescriptor,
		createGroupMemberDescriptor,
		updateGroupMemberDescriptor,
		deleteGroupMemberDescriptor,
	}
}

func (d *GroupMemberServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.GroupMemberService"
}

func (d *GroupMemberServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *GroupMemberServiceDescriptor) GetApiName() string {
	return "GroupMemberService"
}

func (d *GroupMemberServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *GroupMemberServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetGroupMemberServiceDescriptor() *GroupMemberServiceDescriptor {
	return groupMemberServiceDescriptor
}

func initDescriptors() {
	groupMemberServiceDescriptor = &GroupMemberServiceDescriptor{}
	getGroupMemberDescriptor = &GetGroupMemberDescriptor{}
	batchGetGroupMembersDescriptor = &BatchGetGroupMembersDescriptor{}
	listGroupMembersDescriptor = &ListGroupMembersDescriptor{}
	watchGroupMemberDescriptor = &WatchGroupMemberDescriptor{}
	watchGroupMembersDescriptor = &WatchGroupMembersDescriptor{}
	createGroupMemberDescriptor = &CreateGroupMemberDescriptor{}
	updateGroupMemberDescriptor = &UpdateGroupMemberDescriptor{}
	deleteGroupMemberDescriptor = &DeleteGroupMemberDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(groupMemberServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getGroupMemberDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetGroupMembersDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listGroupMembersDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchGroupMemberDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchGroupMembersDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createGroupMemberDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateGroupMemberDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteGroupMemberDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
