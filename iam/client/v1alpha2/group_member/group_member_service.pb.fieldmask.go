// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/group_member_service.proto
// DO NOT EDIT!!!

package group_member_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/group"
	group_member "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/group_member"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &group.Group{}
	_ = &group_member.GroupMember{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetGroupMemberRequest_FieldMask struct {
	Paths []GetGroupMemberRequest_FieldPath
}

func FullGetGroupMemberRequest_FieldMask() *GetGroupMemberRequest_FieldMask {
	res := &GetGroupMemberRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetGroupMemberRequest_FieldTerminalPath{selector: GetGroupMemberRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetGroupMemberRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetGroupMemberRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetGroupMemberRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetGroupMemberRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetGroupMemberRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetGroupMemberRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetGroupMemberRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetGroupMemberRequest_FieldPath(raw)
	})
}

func (fieldMask *GetGroupMemberRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetGroupMemberRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetGroupMemberRequest_FieldMask) Subtract(other *GetGroupMemberRequest_FieldMask) *GetGroupMemberRequest_FieldMask {
	result := &GetGroupMemberRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetGroupMemberRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetGroupMemberRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetGroupMemberRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetGroupMemberRequest_FieldMask) FilterInputFields() *GetGroupMemberRequest_FieldMask {
	result := &GetGroupMemberRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetGroupMemberRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetGroupMemberRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetGroupMemberRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetGroupMemberRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetGroupMemberRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetGroupMemberRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetGroupMemberRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetGroupMemberRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetGroupMemberRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetGroupMemberRequest_FieldMask) AppendPath(path GetGroupMemberRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetGroupMemberRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetGroupMemberRequest_FieldPath))
}

func (fieldMask *GetGroupMemberRequest_FieldMask) GetPaths() []GetGroupMemberRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetGroupMemberRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetGroupMemberRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetGroupMemberRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetGroupMemberRequest_FieldMask) Set(target, source *GetGroupMemberRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetGroupMemberRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetGroupMemberRequest), source.(*GetGroupMemberRequest))
}

func (fieldMask *GetGroupMemberRequest_FieldMask) Project(source *GetGroupMemberRequest) *GetGroupMemberRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetGroupMemberRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetGroupMemberRequest_FieldTerminalPath:
			switch tp.selector {
			case GetGroupMemberRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetGroupMemberRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetGroupMemberRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetGroupMemberRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetGroupMemberRequest))
}

func (fieldMask *GetGroupMemberRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetGroupMembersRequest_FieldMask struct {
	Paths []BatchGetGroupMembersRequest_FieldPath
}

func FullBatchGetGroupMembersRequest_FieldMask() *BatchGetGroupMembersRequest_FieldMask {
	res := &BatchGetGroupMembersRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetGroupMembersRequest_FieldTerminalPath{selector: BatchGetGroupMembersRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetGroupMembersRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetGroupMembersRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetGroupMembersRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetGroupMembersRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) Subtract(other *BatchGetGroupMembersRequest_FieldMask) *BatchGetGroupMembersRequest_FieldMask {
	result := &BatchGetGroupMembersRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetGroupMembersRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetGroupMembersRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetGroupMembersRequest_FieldMask) FilterInputFields() *BatchGetGroupMembersRequest_FieldMask {
	result := &BatchGetGroupMembersRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetGroupMembersRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetGroupMembersRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetGroupMembersRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetGroupMembersRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetGroupMembersRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) AppendPath(path BatchGetGroupMembersRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetGroupMembersRequest_FieldPath))
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) GetPaths() []BatchGetGroupMembersRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetGroupMembersRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) Set(target, source *BatchGetGroupMembersRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetGroupMembersRequest), source.(*BatchGetGroupMembersRequest))
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) Project(source *BatchGetGroupMembersRequest) *BatchGetGroupMembersRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetGroupMembersRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetGroupMembersRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetGroupMembersRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetGroupMembersRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetGroupMembersRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetGroupMembersRequest))
}

func (fieldMask *BatchGetGroupMembersRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetGroupMembersResponse_FieldMask struct {
	Paths []BatchGetGroupMembersResponse_FieldPath
}

func FullBatchGetGroupMembersResponse_FieldMask() *BatchGetGroupMembersResponse_FieldMask {
	res := &BatchGetGroupMembersResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers})
	res.Paths = append(res.Paths, &BatchGetGroupMembersResponse_FieldTerminalPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetGroupMembersResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetGroupMembersResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetGroupMembersResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetGroupMembersResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) Subtract(other *BatchGetGroupMembersResponse_FieldMask) *BatchGetGroupMembersResponse_FieldMask {
	result := &BatchGetGroupMembersResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetGroupMembersResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers: &group_member.GroupMember_FieldMask{},
	}
	mySubMasks := map[BatchGetGroupMembersResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers: &group_member.GroupMember_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetGroupMembersResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetGroupMembersResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetGroupMembersResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
						mySubMasks[BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers] = group_member.FullGroupMember_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetGroupMembersResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetGroupMembersResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetGroupMembersResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetGroupMembersResponse_FieldMask) FilterInputFields() *BatchGetGroupMembersResponse_FieldMask {
	result := &BatchGetGroupMembersResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
			if _, ok := path.(*BatchGetGroupMembersResponse_FieldTerminalPath); ok {
				for _, subpath := range group_member.FullGroupMember_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetGroupMembersResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetGroupMembersResponse_FieldSubPath); ok {
				selectedMask := &group_member.GroupMember_FieldMask{
					Paths: []group_member.GroupMember_FieldPath{sub.subPath.(group_member.GroupMember_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetGroupMembersResponse_FieldSubPath{selector: BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetGroupMembersResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetGroupMembersResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetGroupMembersResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetGroupMembersResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetGroupMembersResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) AppendPath(path BatchGetGroupMembersResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetGroupMembersResponse_FieldPath))
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) GetPaths() []BatchGetGroupMembersResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetGroupMembersResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) Set(target, source *BatchGetGroupMembersResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetGroupMembersResponse), source.(*BatchGetGroupMembersResponse))
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) Project(source *BatchGetGroupMembersResponse) *BatchGetGroupMembersResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetGroupMembersResponse{}
	groupMembersMask := &group_member.GroupMember_FieldMask{}
	wholeGroupMembersAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetGroupMembersResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
				result.GroupMembers = source.GroupMembers
				wholeGroupMembersAccepted = true
			case BatchGetGroupMembersResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetGroupMembersResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetGroupMembersResponse_FieldPathSelectorGroupMembers:
				groupMembersMask.AppendPath(tp.subPath.(group_member.GroupMember_FieldPath))
			}
		}
	}
	if wholeGroupMembersAccepted == false && len(groupMembersMask.Paths) > 0 {
		for _, sourceItem := range source.GetGroupMembers() {
			result.GroupMembers = append(result.GroupMembers, groupMembersMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetGroupMembersResponse))
}

func (fieldMask *BatchGetGroupMembersResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListGroupMembersRequest_FieldMask struct {
	Paths []ListGroupMembersRequest_FieldPath
}

func FullListGroupMembersRequest_FieldMask() *ListGroupMembersRequest_FieldMask {
	res := &ListGroupMembersRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListGroupMembersRequest_FieldTerminalPath{selector: ListGroupMembersRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListGroupMembersRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListGroupMembersRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListGroupMembersRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListGroupMembersRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListGroupMembersRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListGroupMembersRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListGroupMembersRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListGroupMembersRequest_FieldPath(raw)
	})
}

func (fieldMask *ListGroupMembersRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListGroupMembersRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListGroupMembersRequest_FieldMask) Subtract(other *ListGroupMembersRequest_FieldMask) *ListGroupMembersRequest_FieldMask {
	result := &ListGroupMembersRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListGroupMembersRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListGroupMembersRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListGroupMembersRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListGroupMembersRequest_FieldMask) FilterInputFields() *ListGroupMembersRequest_FieldMask {
	result := &ListGroupMembersRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListGroupMembersRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListGroupMembersRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListGroupMembersRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListGroupMembersRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListGroupMembersRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListGroupMembersRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListGroupMembersRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListGroupMembersRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListGroupMembersRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListGroupMembersRequest_FieldMask) AppendPath(path ListGroupMembersRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListGroupMembersRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListGroupMembersRequest_FieldPath))
}

func (fieldMask *ListGroupMembersRequest_FieldMask) GetPaths() []ListGroupMembersRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListGroupMembersRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListGroupMembersRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListGroupMembersRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListGroupMembersRequest_FieldMask) Set(target, source *ListGroupMembersRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListGroupMembersRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListGroupMembersRequest), source.(*ListGroupMembersRequest))
}

func (fieldMask *ListGroupMembersRequest_FieldMask) Project(source *ListGroupMembersRequest) *ListGroupMembersRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListGroupMembersRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListGroupMembersRequest_FieldTerminalPath:
			switch tp.selector {
			case ListGroupMembersRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListGroupMembersRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListGroupMembersRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListGroupMembersRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListGroupMembersRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListGroupMembersRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListGroupMembersRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListGroupMembersRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListGroupMembersRequest))
}

func (fieldMask *ListGroupMembersRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListGroupMembersResponse_FieldMask struct {
	Paths []ListGroupMembersResponse_FieldPath
}

func FullListGroupMembersResponse_FieldMask() *ListGroupMembersResponse_FieldMask {
	res := &ListGroupMembersResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorGroupMembers})
	res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListGroupMembersResponse_FieldTerminalPath{selector: ListGroupMembersResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListGroupMembersResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListGroupMembersResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListGroupMembersResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListGroupMembersResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListGroupMembersResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListGroupMembersResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListGroupMembersResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListGroupMembersResponse_FieldPath(raw)
	})
}

func (fieldMask *ListGroupMembersResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListGroupMembersResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListGroupMembersResponse_FieldMask) Subtract(other *ListGroupMembersResponse_FieldMask) *ListGroupMembersResponse_FieldMask {
	result := &ListGroupMembersResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListGroupMembersResponse_FieldPathSelector]gotenobject.FieldMask{
		ListGroupMembersResponse_FieldPathSelectorGroupMembers: &group_member.GroupMember_FieldMask{},
	}
	mySubMasks := map[ListGroupMembersResponse_FieldPathSelector]gotenobject.FieldMask{
		ListGroupMembersResponse_FieldPathSelectorGroupMembers: &group_member.GroupMember_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListGroupMembersResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListGroupMembersResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListGroupMembersResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
						mySubMasks[ListGroupMembersResponse_FieldPathSelectorGroupMembers] = group_member.FullGroupMember_FieldMask()
					}
				} else if tp, ok := path.(*ListGroupMembersResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListGroupMembersResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListGroupMembersResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListGroupMembersResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListGroupMembersResponse_FieldMask) FilterInputFields() *ListGroupMembersResponse_FieldMask {
	result := &ListGroupMembersResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
			if _, ok := path.(*ListGroupMembersResponse_FieldTerminalPath); ok {
				for _, subpath := range group_member.FullGroupMember_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListGroupMembersResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListGroupMembersResponse_FieldSubPath); ok {
				selectedMask := &group_member.GroupMember_FieldMask{
					Paths: []group_member.GroupMember_FieldPath{sub.subPath.(group_member.GroupMember_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListGroupMembersResponse_FieldSubPath{selector: ListGroupMembersResponse_FieldPathSelectorGroupMembers, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListGroupMembersResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListGroupMembersResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListGroupMembersResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListGroupMembersResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListGroupMembersResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListGroupMembersResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListGroupMembersResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListGroupMembersResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListGroupMembersResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListGroupMembersResponse_FieldMask) AppendPath(path ListGroupMembersResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListGroupMembersResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListGroupMembersResponse_FieldPath))
}

func (fieldMask *ListGroupMembersResponse_FieldMask) GetPaths() []ListGroupMembersResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListGroupMembersResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListGroupMembersResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListGroupMembersResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListGroupMembersResponse_FieldMask) Set(target, source *ListGroupMembersResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListGroupMembersResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListGroupMembersResponse), source.(*ListGroupMembersResponse))
}

func (fieldMask *ListGroupMembersResponse_FieldMask) Project(source *ListGroupMembersResponse) *ListGroupMembersResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListGroupMembersResponse{}
	groupMembersMask := &group_member.GroupMember_FieldMask{}
	wholeGroupMembersAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListGroupMembersResponse_FieldTerminalPath:
			switch tp.selector {
			case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
				result.GroupMembers = source.GroupMembers
				wholeGroupMembersAccepted = true
			case ListGroupMembersResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListGroupMembersResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListGroupMembersResponse_FieldSubPath:
			switch tp.selector {
			case ListGroupMembersResponse_FieldPathSelectorGroupMembers:
				groupMembersMask.AppendPath(tp.subPath.(group_member.GroupMember_FieldPath))
			}
		}
	}
	if wholeGroupMembersAccepted == false && len(groupMembersMask.Paths) > 0 {
		for _, sourceItem := range source.GetGroupMembers() {
			result.GroupMembers = append(result.GroupMembers, groupMembersMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListGroupMembersResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListGroupMembersResponse))
}

func (fieldMask *ListGroupMembersResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchGroupMemberRequest_FieldMask struct {
	Paths []WatchGroupMemberRequest_FieldPath
}

func FullWatchGroupMemberRequest_FieldMask() *WatchGroupMemberRequest_FieldMask {
	res := &WatchGroupMemberRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchGroupMemberRequest_FieldTerminalPath{selector: WatchGroupMemberRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchGroupMemberRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchGroupMemberRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchGroupMemberRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchGroupMemberRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchGroupMemberRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) Subtract(other *WatchGroupMemberRequest_FieldMask) *WatchGroupMemberRequest_FieldMask {
	result := &WatchGroupMemberRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchGroupMemberRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchGroupMemberRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchGroupMemberRequest_FieldMask) FilterInputFields() *WatchGroupMemberRequest_FieldMask {
	result := &WatchGroupMemberRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchGroupMemberRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchGroupMemberRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchGroupMemberRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchGroupMemberRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchGroupMemberRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) AppendPath(path WatchGroupMemberRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchGroupMemberRequest_FieldPath))
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) GetPaths() []WatchGroupMemberRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchGroupMemberRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) Set(target, source *WatchGroupMemberRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchGroupMemberRequest), source.(*WatchGroupMemberRequest))
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) Project(source *WatchGroupMemberRequest) *WatchGroupMemberRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchGroupMemberRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchGroupMemberRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchGroupMemberRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchGroupMemberRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchGroupMemberRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchGroupMemberRequest))
}

func (fieldMask *WatchGroupMemberRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchGroupMemberResponse_FieldMask struct {
	Paths []WatchGroupMemberResponse_FieldPath
}

func FullWatchGroupMemberResponse_FieldMask() *WatchGroupMemberResponse_FieldMask {
	res := &WatchGroupMemberResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchGroupMemberResponse_FieldTerminalPath{selector: WatchGroupMemberResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchGroupMemberResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchGroupMemberResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchGroupMemberResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchGroupMemberResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchGroupMemberResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) Subtract(other *WatchGroupMemberResponse_FieldMask) *WatchGroupMemberResponse_FieldMask {
	result := &WatchGroupMemberResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchGroupMemberResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchGroupMemberResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchGroupMemberResponse_FieldMask) FilterInputFields() *WatchGroupMemberResponse_FieldMask {
	result := &WatchGroupMemberResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchGroupMemberResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchGroupMemberResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchGroupMemberResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchGroupMemberResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchGroupMemberResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) AppendPath(path WatchGroupMemberResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchGroupMemberResponse_FieldPath))
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) GetPaths() []WatchGroupMemberResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchGroupMemberResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) Set(target, source *WatchGroupMemberResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchGroupMemberResponse), source.(*WatchGroupMemberResponse))
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) Project(source *WatchGroupMemberResponse) *WatchGroupMemberResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchGroupMemberResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchGroupMemberResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchGroupMemberResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchGroupMemberResponse))
}

func (fieldMask *WatchGroupMemberResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchGroupMembersRequest_FieldMask struct {
	Paths []WatchGroupMembersRequest_FieldPath
}

func FullWatchGroupMembersRequest_FieldMask() *WatchGroupMembersRequest_FieldMask {
	res := &WatchGroupMembersRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchGroupMembersRequest_FieldTerminalPath{selector: WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchGroupMembersRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchGroupMembersRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchGroupMembersRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchGroupMembersRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchGroupMembersRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) Subtract(other *WatchGroupMembersRequest_FieldMask) *WatchGroupMembersRequest_FieldMask {
	result := &WatchGroupMembersRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchGroupMembersRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchGroupMembersRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchGroupMembersRequest_FieldMask) FilterInputFields() *WatchGroupMembersRequest_FieldMask {
	result := &WatchGroupMembersRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchGroupMembersRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchGroupMembersRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchGroupMembersRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchGroupMembersRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchGroupMembersRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) AppendPath(path WatchGroupMembersRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchGroupMembersRequest_FieldPath))
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) GetPaths() []WatchGroupMembersRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchGroupMembersRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) Set(target, source *WatchGroupMembersRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchGroupMembersRequest), source.(*WatchGroupMembersRequest))
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) Project(source *WatchGroupMembersRequest) *WatchGroupMembersRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchGroupMembersRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchGroupMembersRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchGroupMembersRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchGroupMembersRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchGroupMembersRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchGroupMembersRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchGroupMembersRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchGroupMembersRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchGroupMembersRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchGroupMembersRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchGroupMembersRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchGroupMembersRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchGroupMembersRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchGroupMembersRequest))
}

func (fieldMask *WatchGroupMembersRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchGroupMembersResponse_FieldMask struct {
	Paths []WatchGroupMembersResponse_FieldPath
}

func FullWatchGroupMembersResponse_FieldMask() *WatchGroupMembersResponse_FieldMask {
	res := &WatchGroupMembersResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges})
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchGroupMembersResponse_FieldTerminalPath{selector: WatchGroupMembersResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchGroupMembersResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchGroupMembersResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchGroupMembersResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchGroupMembersResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchGroupMembersResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) Subtract(other *WatchGroupMembersResponse_FieldMask) *WatchGroupMembersResponse_FieldMask {
	result := &WatchGroupMembersResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchGroupMembersResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchGroupMembersResponse_FieldPathSelectorPageTokenChange: &WatchGroupMembersResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchGroupMembersResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchGroupMembersResponse_FieldPathSelectorPageTokenChange: &WatchGroupMembersResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchGroupMembersResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchGroupMembersResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchGroupMembersResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchGroupMembersResponse_FieldPathSelectorPageTokenChange] = FullWatchGroupMembersResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchGroupMembersResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchGroupMembersResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchGroupMembersResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchGroupMembersResponse_FieldMask) FilterInputFields() *WatchGroupMembersResponse_FieldMask {
	result := &WatchGroupMembersResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchGroupMembersResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchGroupMembersResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchGroupMembersResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchGroupMembersResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchGroupMembersResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) AppendPath(path WatchGroupMembersResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchGroupMembersResponse_FieldPath))
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) GetPaths() []WatchGroupMembersResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchGroupMembersResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) Set(target, source *WatchGroupMembersResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchGroupMembersResponse), source.(*WatchGroupMembersResponse))
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) Project(source *WatchGroupMembersResponse) *WatchGroupMembersResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchGroupMembersResponse{}
	pageTokenChangeMask := &WatchGroupMembersResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchGroupMembersResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchGroupMembersResponse_FieldPathSelectorGroupMemberChanges:
				result.GroupMemberChanges = source.GroupMemberChanges
			case WatchGroupMembersResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchGroupMembersResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchGroupMembersResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchGroupMembersResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchGroupMembersResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchGroupMembersResponse_FieldSubPath:
			switch tp.selector {
			case WatchGroupMembersResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchGroupMembersResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchGroupMembersResponse))
}

func (fieldMask *WatchGroupMembersResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchGroupMembersResponse_PageTokenChange_FieldMask struct {
	Paths []WatchGroupMembersResponsePageTokenChange_FieldPath
}

func FullWatchGroupMembersResponse_PageTokenChange_FieldMask() *WatchGroupMembersResponse_PageTokenChange_FieldMask {
	res := &WatchGroupMembersResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchGroupMembersResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchGroupMembersResponsePageTokenChange_FieldTerminalPath{selector: WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchGroupMembersResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchGroupMembersResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) Subtract(other *WatchGroupMembersResponse_PageTokenChange_FieldMask) *WatchGroupMembersResponse_PageTokenChange_FieldMask {
	result := &WatchGroupMembersResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchGroupMembersResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchGroupMembersResponse_PageTokenChange_FieldMask {
	result := &WatchGroupMembersResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchGroupMembersResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchGroupMembersResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchGroupMembersResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) AppendPath(path WatchGroupMembersResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchGroupMembersResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) GetPaths() []WatchGroupMembersResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchGroupMembersResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) Set(target, source *WatchGroupMembersResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchGroupMembersResponse_PageTokenChange), source.(*WatchGroupMembersResponse_PageTokenChange))
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) Project(source *WatchGroupMembersResponse_PageTokenChange) *WatchGroupMembersResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchGroupMembersResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchGroupMembersResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchGroupMembersResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchGroupMembersResponse_PageTokenChange))
}

func (fieldMask *WatchGroupMembersResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateGroupMemberRequest_FieldMask struct {
	Paths []CreateGroupMemberRequest_FieldPath
}

func FullCreateGroupMemberRequest_FieldMask() *CreateGroupMemberRequest_FieldMask {
	res := &CreateGroupMemberRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateGroupMemberRequest_FieldTerminalPath{selector: CreateGroupMemberRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateGroupMemberRequest_FieldTerminalPath{selector: CreateGroupMemberRequest_FieldPathSelectorGroupMember})
	return res
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateGroupMemberRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateGroupMemberRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateGroupMemberRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateGroupMemberRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateGroupMemberRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) Subtract(other *CreateGroupMemberRequest_FieldMask) *CreateGroupMemberRequest_FieldMask {
	result := &CreateGroupMemberRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateGroupMemberRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateGroupMemberRequest_FieldPathSelectorGroupMember: &group_member.GroupMember_FieldMask{},
	}
	mySubMasks := map[CreateGroupMemberRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateGroupMemberRequest_FieldPathSelectorGroupMember: &group_member.GroupMember_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateGroupMemberRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateGroupMemberRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateGroupMemberRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
						mySubMasks[CreateGroupMemberRequest_FieldPathSelectorGroupMember] = group_member.FullGroupMember_FieldMask()
					}
				} else if tp, ok := path.(*CreateGroupMemberRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateGroupMemberRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateGroupMemberRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateGroupMemberRequest_FieldMask) FilterInputFields() *CreateGroupMemberRequest_FieldMask {
	result := &CreateGroupMemberRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
			if _, ok := path.(*CreateGroupMemberRequest_FieldTerminalPath); ok {
				for _, subpath := range group_member.FullGroupMember_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateGroupMemberRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateGroupMemberRequest_FieldSubPath); ok {
				selectedMask := &group_member.GroupMember_FieldMask{
					Paths: []group_member.GroupMember_FieldPath{sub.subPath.(group_member.GroupMember_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateGroupMemberRequest_FieldSubPath{selector: CreateGroupMemberRequest_FieldPathSelectorGroupMember, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateGroupMemberRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateGroupMemberRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateGroupMemberRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateGroupMemberRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateGroupMemberRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) AppendPath(path CreateGroupMemberRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateGroupMemberRequest_FieldPath))
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) GetPaths() []CreateGroupMemberRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateGroupMemberRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) Set(target, source *CreateGroupMemberRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateGroupMemberRequest), source.(*CreateGroupMemberRequest))
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) Project(source *CreateGroupMemberRequest) *CreateGroupMemberRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateGroupMemberRequest{}
	groupMemberMask := &group_member.GroupMember_FieldMask{}
	wholeGroupMemberAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateGroupMemberRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateGroupMemberRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
				result.GroupMember = source.GroupMember
				wholeGroupMemberAccepted = true
			}
		case *CreateGroupMemberRequest_FieldSubPath:
			switch tp.selector {
			case CreateGroupMemberRequest_FieldPathSelectorGroupMember:
				groupMemberMask.AppendPath(tp.subPath.(group_member.GroupMember_FieldPath))
			}
		}
	}
	if wholeGroupMemberAccepted == false && len(groupMemberMask.Paths) > 0 {
		result.GroupMember = groupMemberMask.Project(source.GetGroupMember())
	}
	return result
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateGroupMemberRequest))
}

func (fieldMask *CreateGroupMemberRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateGroupMemberRequest_FieldMask struct {
	Paths []UpdateGroupMemberRequest_FieldPath
}

func FullUpdateGroupMemberRequest_FieldMask() *UpdateGroupMemberRequest_FieldMask {
	res := &UpdateGroupMemberRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorGroupMember})
	res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateGroupMemberRequest_FieldTerminalPath{selector: UpdateGroupMemberRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateGroupMemberRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateGroupMemberRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateGroupMemberRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateGroupMemberRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) Subtract(other *UpdateGroupMemberRequest_FieldMask) *UpdateGroupMemberRequest_FieldMask {
	result := &UpdateGroupMemberRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateGroupMemberRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateGroupMemberRequest_FieldPathSelectorGroupMember: &group_member.GroupMember_FieldMask{},
		UpdateGroupMemberRequest_FieldPathSelectorCas:         &UpdateGroupMemberRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateGroupMemberRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateGroupMemberRequest_FieldPathSelectorGroupMember: &group_member.GroupMember_FieldMask{},
		UpdateGroupMemberRequest_FieldPathSelectorCas:         &UpdateGroupMemberRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateGroupMemberRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateGroupMemberRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateGroupMemberRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
						mySubMasks[UpdateGroupMemberRequest_FieldPathSelectorGroupMember] = group_member.FullGroupMember_FieldMask()
					case UpdateGroupMemberRequest_FieldPathSelectorCas:
						mySubMasks[UpdateGroupMemberRequest_FieldPathSelectorCas] = FullUpdateGroupMemberRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateGroupMemberRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateGroupMemberRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateGroupMemberRequest_FieldMask) FilterInputFields() *UpdateGroupMemberRequest_FieldMask {
	result := &UpdateGroupMemberRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
			if _, ok := path.(*UpdateGroupMemberRequest_FieldTerminalPath); ok {
				for _, subpath := range group_member.FullGroupMember_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateGroupMemberRequest_FieldSubPath); ok {
				selectedMask := &group_member.GroupMember_FieldMask{
					Paths: []group_member.GroupMember_FieldPath{sub.subPath.(group_member.GroupMember_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: UpdateGroupMemberRequest_FieldPathSelectorGroupMember, subPath: allowedPath})
				}
			}
		case UpdateGroupMemberRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateGroupMemberRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateGroupMemberRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateGroupMemberRequest_FieldSubPath); ok {
				selectedMask := &UpdateGroupMemberRequest_CAS_FieldMask{
					Paths: []UpdateGroupMemberRequestCAS_FieldPath{sub.subPath.(UpdateGroupMemberRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateGroupMemberRequest_FieldSubPath{selector: UpdateGroupMemberRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateGroupMemberRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateGroupMemberRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateGroupMemberRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateGroupMemberRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateGroupMemberRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) AppendPath(path UpdateGroupMemberRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateGroupMemberRequest_FieldPath))
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) GetPaths() []UpdateGroupMemberRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateGroupMemberRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) Set(target, source *UpdateGroupMemberRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateGroupMemberRequest), source.(*UpdateGroupMemberRequest))
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) Project(source *UpdateGroupMemberRequest) *UpdateGroupMemberRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateGroupMemberRequest{}
	groupMemberMask := &group_member.GroupMember_FieldMask{}
	wholeGroupMemberAccepted := false
	casMask := &UpdateGroupMemberRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateGroupMemberRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
				result.GroupMember = source.GroupMember
				wholeGroupMemberAccepted = true
			case UpdateGroupMemberRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateGroupMemberRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateGroupMemberRequest_FieldSubPath:
			switch tp.selector {
			case UpdateGroupMemberRequest_FieldPathSelectorGroupMember:
				groupMemberMask.AppendPath(tp.subPath.(group_member.GroupMember_FieldPath))
			case UpdateGroupMemberRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateGroupMemberRequestCAS_FieldPath))
			}
		}
	}
	if wholeGroupMemberAccepted == false && len(groupMemberMask.Paths) > 0 {
		result.GroupMember = groupMemberMask.Project(source.GetGroupMember())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateGroupMemberRequest))
}

func (fieldMask *UpdateGroupMemberRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateGroupMemberRequest_CAS_FieldMask struct {
	Paths []UpdateGroupMemberRequestCAS_FieldPath
}

func FullUpdateGroupMemberRequest_CAS_FieldMask() *UpdateGroupMemberRequest_CAS_FieldMask {
	res := &UpdateGroupMemberRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateGroupMemberRequestCAS_FieldTerminalPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateGroupMemberRequestCAS_FieldTerminalPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateGroupMemberRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateGroupMemberRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateGroupMemberRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) Subtract(other *UpdateGroupMemberRequest_CAS_FieldMask) *UpdateGroupMemberRequest_CAS_FieldMask {
	result := &UpdateGroupMemberRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateGroupMemberRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState: &group_member.GroupMember_FieldMask{},
	}
	mySubMasks := map[UpdateGroupMemberRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState: &group_member.GroupMember_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateGroupMemberRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateGroupMemberRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateGroupMemberRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState] = group_member.FullGroupMember_FieldMask()
					}
				} else if tp, ok := path.(*UpdateGroupMemberRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateGroupMemberRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateGroupMemberRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) FilterInputFields() *UpdateGroupMemberRequest_CAS_FieldMask {
	result := &UpdateGroupMemberRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateGroupMemberRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range group_member.FullGroupMember_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateGroupMemberRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateGroupMemberRequestCAS_FieldSubPath); ok {
				selectedMask := &group_member.GroupMember_FieldMask{
					Paths: []group_member.GroupMember_FieldPath{sub.subPath.(group_member.GroupMember_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateGroupMemberRequestCAS_FieldSubPath{selector: UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateGroupMemberRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateGroupMemberRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateGroupMemberRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateGroupMemberRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) AppendPath(path UpdateGroupMemberRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateGroupMemberRequestCAS_FieldPath))
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) GetPaths() []UpdateGroupMemberRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateGroupMemberRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) Set(target, source *UpdateGroupMemberRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateGroupMemberRequest_CAS), source.(*UpdateGroupMemberRequest_CAS))
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) Project(source *UpdateGroupMemberRequest_CAS) *UpdateGroupMemberRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateGroupMemberRequest_CAS{}
	conditionalStateMask := &group_member.GroupMember_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateGroupMemberRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateGroupMemberRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateGroupMemberRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateGroupMemberRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(group_member.GroupMember_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateGroupMemberRequest_CAS))
}

func (fieldMask *UpdateGroupMemberRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteGroupMemberRequest_FieldMask struct {
	Paths []DeleteGroupMemberRequest_FieldPath
}

func FullDeleteGroupMemberRequest_FieldMask() *DeleteGroupMemberRequest_FieldMask {
	res := &DeleteGroupMemberRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteGroupMemberRequest_FieldTerminalPath{selector: DeleteGroupMemberRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteGroupMemberRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteGroupMemberRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteGroupMemberRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteGroupMemberRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) Subtract(other *DeleteGroupMemberRequest_FieldMask) *DeleteGroupMemberRequest_FieldMask {
	result := &DeleteGroupMemberRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteGroupMemberRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteGroupMemberRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteGroupMemberRequest_FieldMask) FilterInputFields() *DeleteGroupMemberRequest_FieldMask {
	result := &DeleteGroupMemberRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteGroupMemberRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteGroupMemberRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteGroupMemberRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteGroupMemberRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteGroupMemberRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) AppendPath(path DeleteGroupMemberRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteGroupMemberRequest_FieldPath))
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) GetPaths() []DeleteGroupMemberRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteGroupMemberRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) Set(target, source *DeleteGroupMemberRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteGroupMemberRequest), source.(*DeleteGroupMemberRequest))
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) Project(source *DeleteGroupMemberRequest) *DeleteGroupMemberRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteGroupMemberRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteGroupMemberRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteGroupMemberRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteGroupMemberRequest))
}

func (fieldMask *DeleteGroupMemberRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
