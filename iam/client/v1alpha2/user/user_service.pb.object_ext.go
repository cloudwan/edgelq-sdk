// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/user_service.proto
// DO NOT EDIT!!!

package user_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &user.User{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetUserRequest) GotenObjectExt() {}

func (o *GetUserRequest) MakeFullFieldMask() *GetUserRequest_FieldMask {
	return FullGetUserRequest_FieldMask()
}

func (o *GetUserRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetUserRequest_FieldMask()
}

func (o *GetUserRequest) MakeDiffFieldMask(other *GetUserRequest) *GetUserRequest_FieldMask {
	if o == nil && other == nil {
		return &GetUserRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetUserRequest_FieldMask()
	}

	res := &GetUserRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetUserRequest_FieldTerminalPath{selector: GetUserRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetUserRequest_FieldTerminalPath{selector: GetUserRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetUserRequest_FieldTerminalPath{selector: GetUserRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetUserRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetUserRequest))
}

func (o *GetUserRequest) Clone() *GetUserRequest {
	if o == nil {
		return nil
	}
	result := &GetUserRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &user.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*user.User_FieldMask)
	result.View = o.View
	return result
}

func (o *GetUserRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetUserRequest) Merge(source *GetUserRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &user.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetUserRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetUserRequest))
}

func (o *BatchGetUsersRequest) GotenObjectExt() {}

func (o *BatchGetUsersRequest) MakeFullFieldMask() *BatchGetUsersRequest_FieldMask {
	return FullBatchGetUsersRequest_FieldMask()
}

func (o *BatchGetUsersRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetUsersRequest_FieldMask()
}

func (o *BatchGetUsersRequest) MakeDiffFieldMask(other *BatchGetUsersRequest) *BatchGetUsersRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetUsersRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetUsersRequest_FieldMask()
	}

	res := &BatchGetUsersRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetUsersRequest_FieldTerminalPath{selector: BatchGetUsersRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetUsersRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetUsersRequest))
}

func (o *BatchGetUsersRequest) Clone() *BatchGetUsersRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetUsersRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &user.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*user.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &user.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*user.User_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetUsersRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetUsersRequest) Merge(source *BatchGetUsersRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &user.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *user.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &user.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetUsersRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetUsersRequest))
}

func (o *BatchGetUsersResponse) GotenObjectExt() {}

func (o *BatchGetUsersResponse) MakeFullFieldMask() *BatchGetUsersResponse_FieldMask {
	return FullBatchGetUsersResponse_FieldMask()
}

func (o *BatchGetUsersResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetUsersResponse_FieldMask()
}

func (o *BatchGetUsersResponse) MakeDiffFieldMask(other *BatchGetUsersResponse) *BatchGetUsersResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetUsersResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetUsersResponse_FieldMask()
	}

	res := &BatchGetUsersResponse_FieldMask{}

	if len(o.GetUsers()) == len(other.GetUsers()) {
		for i, lValue := range o.GetUsers() {
			rValue := other.GetUsers()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetUsersResponse_FieldTerminalPath{selector: BatchGetUsersResponse_FieldPathSelectorUsers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetUsersResponse_FieldTerminalPath{selector: BatchGetUsersResponse_FieldPathSelectorUsers})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetUsersResponse_FieldTerminalPath{selector: BatchGetUsersResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetUsersResponse_FieldTerminalPath{selector: BatchGetUsersResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetUsersResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetUsersResponse))
}

func (o *BatchGetUsersResponse) Clone() *BatchGetUsersResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetUsersResponse{}
	result.Users = make([]*user.User, len(o.Users))
	for i, sourceValue := range o.Users {
		result.Users[i] = sourceValue.Clone()
	}
	result.Missing = make([]*user.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &user.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetUsersResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetUsersResponse) Merge(source *BatchGetUsersResponse) {
	for _, sourceValue := range source.GetUsers() {
		exists := false
		for _, currentValue := range o.Users {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *user.User
			if sourceValue != nil {
				newDstElement = new(user.User)
				newDstElement.Merge(sourceValue)
			}
			o.Users = append(o.Users, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *user.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &user.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetUsersResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetUsersResponse))
}

func (o *ListUsersRequest) GotenObjectExt() {}

func (o *ListUsersRequest) MakeFullFieldMask() *ListUsersRequest_FieldMask {
	return FullListUsersRequest_FieldMask()
}

func (o *ListUsersRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListUsersRequest_FieldMask()
}

func (o *ListUsersRequest) MakeDiffFieldMask(other *ListUsersRequest) *ListUsersRequest_FieldMask {
	if o == nil && other == nil {
		return &ListUsersRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListUsersRequest_FieldMask()
	}

	res := &ListUsersRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListUsersRequest_FieldTerminalPath{selector: ListUsersRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListUsersRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListUsersRequest))
}

func (o *ListUsersRequest) Clone() *ListUsersRequest {
	if o == nil {
		return nil
	}
	result := &ListUsersRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &user.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &user.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &user.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*user.User_FieldMask)
	result.View = o.View
	return result
}

func (o *ListUsersRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListUsersRequest) Merge(source *ListUsersRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &user.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &user.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &user.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListUsersRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListUsersRequest))
}

func (o *ListUsersResponse) GotenObjectExt() {}

func (o *ListUsersResponse) MakeFullFieldMask() *ListUsersResponse_FieldMask {
	return FullListUsersResponse_FieldMask()
}

func (o *ListUsersResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListUsersResponse_FieldMask()
}

func (o *ListUsersResponse) MakeDiffFieldMask(other *ListUsersResponse) *ListUsersResponse_FieldMask {
	if o == nil && other == nil {
		return &ListUsersResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListUsersResponse_FieldMask()
	}

	res := &ListUsersResponse_FieldMask{}

	if len(o.GetUsers()) == len(other.GetUsers()) {
		for i, lValue := range o.GetUsers() {
			rValue := other.GetUsers()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorUsers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorUsers})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListUsersResponse_FieldTerminalPath{selector: ListUsersResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListUsersResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListUsersResponse))
}

func (o *ListUsersResponse) Clone() *ListUsersResponse {
	if o == nil {
		return nil
	}
	result := &ListUsersResponse{}
	result.Users = make([]*user.User, len(o.Users))
	for i, sourceValue := range o.Users {
		result.Users[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &user.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &user.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListUsersResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListUsersResponse) Merge(source *ListUsersResponse) {
	for _, sourceValue := range source.GetUsers() {
		exists := false
		for _, currentValue := range o.Users {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *user.User
			if sourceValue != nil {
				newDstElement = new(user.User)
				newDstElement.Merge(sourceValue)
			}
			o.Users = append(o.Users, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &user.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &user.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListUsersResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListUsersResponse))
}

func (o *WatchUserRequest) GotenObjectExt() {}

func (o *WatchUserRequest) MakeFullFieldMask() *WatchUserRequest_FieldMask {
	return FullWatchUserRequest_FieldMask()
}

func (o *WatchUserRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchUserRequest_FieldMask()
}

func (o *WatchUserRequest) MakeDiffFieldMask(other *WatchUserRequest) *WatchUserRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchUserRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchUserRequest_FieldMask()
	}

	res := &WatchUserRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchUserRequest_FieldTerminalPath{selector: WatchUserRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchUserRequest_FieldTerminalPath{selector: WatchUserRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchUserRequest_FieldTerminalPath{selector: WatchUserRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchUserRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchUserRequest))
}

func (o *WatchUserRequest) Clone() *WatchUserRequest {
	if o == nil {
		return nil
	}
	result := &WatchUserRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &user.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*user.User_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchUserRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchUserRequest) Merge(source *WatchUserRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &user.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchUserRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchUserRequest))
}

func (o *WatchUserResponse) GotenObjectExt() {}

func (o *WatchUserResponse) MakeFullFieldMask() *WatchUserResponse_FieldMask {
	return FullWatchUserResponse_FieldMask()
}

func (o *WatchUserResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchUserResponse_FieldMask()
}

func (o *WatchUserResponse) MakeDiffFieldMask(other *WatchUserResponse) *WatchUserResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchUserResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchUserResponse_FieldMask()
	}

	res := &WatchUserResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchUserResponse_FieldTerminalPath{selector: WatchUserResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchUserResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchUserResponse))
}

func (o *WatchUserResponse) Clone() *WatchUserResponse {
	if o == nil {
		return nil
	}
	result := &WatchUserResponse{}
	result.Change = proto.Clone(o.Change).(*user.UserChange)
	return result
}

func (o *WatchUserResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchUserResponse) Merge(source *WatchUserResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(user.UserChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchUserResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchUserResponse))
}

func (o *WatchUsersRequest) GotenObjectExt() {}

func (o *WatchUsersRequest) MakeFullFieldMask() *WatchUsersRequest_FieldMask {
	return FullWatchUsersRequest_FieldMask()
}

func (o *WatchUsersRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchUsersRequest_FieldMask()
}

func (o *WatchUsersRequest) MakeDiffFieldMask(other *WatchUsersRequest) *WatchUsersRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchUsersRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchUsersRequest_FieldMask()
	}

	res := &WatchUsersRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchUsersRequest_FieldTerminalPath{selector: WatchUsersRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchUsersRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchUsersRequest))
}

func (o *WatchUsersRequest) Clone() *WatchUsersRequest {
	if o == nil {
		return nil
	}
	result := &WatchUsersRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &user.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &user.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &user.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*user.User_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchUsersRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchUsersRequest) Merge(source *WatchUsersRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &user.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &user.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &user.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchUsersRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchUsersRequest))
}

func (o *WatchUsersResponse) GotenObjectExt() {}

func (o *WatchUsersResponse) MakeFullFieldMask() *WatchUsersResponse_FieldMask {
	return FullWatchUsersResponse_FieldMask()
}

func (o *WatchUsersResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchUsersResponse_FieldMask()
}

func (o *WatchUsersResponse) MakeDiffFieldMask(other *WatchUsersResponse) *WatchUsersResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchUsersResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchUsersResponse_FieldMask()
	}

	res := &WatchUsersResponse_FieldMask{}

	if len(o.GetUserChanges()) == len(other.GetUserChanges()) {
		for i, lValue := range o.GetUserChanges() {
			rValue := other.GetUserChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorUserChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorUserChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchUsersResponse_FieldSubPath{selector: WatchUsersResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchUsersResponse_FieldTerminalPath{selector: WatchUsersResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchUsersResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchUsersResponse))
}

func (o *WatchUsersResponse) Clone() *WatchUsersResponse {
	if o == nil {
		return nil
	}
	result := &WatchUsersResponse{}
	result.UserChanges = make([]*user.UserChange, len(o.UserChanges))
	for i, sourceValue := range o.UserChanges {
		result.UserChanges[i] = proto.Clone(sourceValue).(*user.UserChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchUsersResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchUsersResponse) Merge(source *WatchUsersResponse) {
	for _, sourceValue := range source.GetUserChanges() {
		exists := false
		for _, currentValue := range o.UserChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *user.UserChange
			if sourceValue != nil {
				newDstElement = new(user.UserChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.UserChanges = append(o.UserChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchUsersResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchUsersResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchUsersResponse))
}

func (o *WatchUsersResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchUsersResponse_PageTokenChange) MakeFullFieldMask() *WatchUsersResponse_PageTokenChange_FieldMask {
	return FullWatchUsersResponse_PageTokenChange_FieldMask()
}

func (o *WatchUsersResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchUsersResponse_PageTokenChange_FieldMask()
}

func (o *WatchUsersResponse_PageTokenChange) MakeDiffFieldMask(other *WatchUsersResponse_PageTokenChange) *WatchUsersResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchUsersResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchUsersResponse_PageTokenChange_FieldMask()
	}

	res := &WatchUsersResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchUsersResponsePageTokenChange_FieldTerminalPath{selector: WatchUsersResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchUsersResponsePageTokenChange_FieldTerminalPath{selector: WatchUsersResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchUsersResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchUsersResponse_PageTokenChange))
}

func (o *WatchUsersResponse_PageTokenChange) Clone() *WatchUsersResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchUsersResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &user.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &user.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchUsersResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchUsersResponse_PageTokenChange) Merge(source *WatchUsersResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &user.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &user.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchUsersResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchUsersResponse_PageTokenChange))
}

func (o *CreateUserRequest) GotenObjectExt() {}

func (o *CreateUserRequest) MakeFullFieldMask() *CreateUserRequest_FieldMask {
	return FullCreateUserRequest_FieldMask()
}

func (o *CreateUserRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateUserRequest_FieldMask()
}

func (o *CreateUserRequest) MakeDiffFieldMask(other *CreateUserRequest) *CreateUserRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateUserRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateUserRequest_FieldMask()
	}

	res := &CreateUserRequest_FieldMask{}
	{
		subMask := o.GetUser().MakeDiffFieldMask(other.GetUser())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateUserRequest_FieldTerminalPath{selector: CreateUserRequest_FieldPathSelectorUser})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateUserRequest_FieldSubPath{selector: CreateUserRequest_FieldPathSelectorUser, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateUserRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateUserRequest))
}

func (o *CreateUserRequest) Clone() *CreateUserRequest {
	if o == nil {
		return nil
	}
	result := &CreateUserRequest{}
	result.User = o.User.Clone()
	return result
}

func (o *CreateUserRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateUserRequest) Merge(source *CreateUserRequest) {
	if source.GetUser() != nil {
		if o.User == nil {
			o.User = new(user.User)
		}
		o.User.Merge(source.GetUser())
	}
}

func (o *CreateUserRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateUserRequest))
}

func (o *UpdateUserRequest) GotenObjectExt() {}

func (o *UpdateUserRequest) MakeFullFieldMask() *UpdateUserRequest_FieldMask {
	return FullUpdateUserRequest_FieldMask()
}

func (o *UpdateUserRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateUserRequest_FieldMask()
}

func (o *UpdateUserRequest) MakeDiffFieldMask(other *UpdateUserRequest) *UpdateUserRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateUserRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateUserRequest_FieldMask()
	}

	res := &UpdateUserRequest_FieldMask{}
	{
		subMask := o.GetUser().MakeDiffFieldMask(other.GetUser())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateUserRequest_FieldTerminalPath{selector: UpdateUserRequest_FieldPathSelectorUser})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateUserRequest_FieldSubPath{selector: UpdateUserRequest_FieldPathSelectorUser, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateUserRequest_FieldTerminalPath{selector: UpdateUserRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateUserRequest_FieldTerminalPath{selector: UpdateUserRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateUserRequest_FieldSubPath{selector: UpdateUserRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateUserRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateUserRequest))
}

func (o *UpdateUserRequest) Clone() *UpdateUserRequest {
	if o == nil {
		return nil
	}
	result := &UpdateUserRequest{}
	result.User = o.User.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*user.User_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateUserRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateUserRequest) Merge(source *UpdateUserRequest) {
	if source.GetUser() != nil {
		if o.User == nil {
			o.User = new(user.User)
		}
		o.User.Merge(source.GetUser())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateUserRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateUserRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateUserRequest))
}

func (o *UpdateUserRequest_CAS) GotenObjectExt() {}

func (o *UpdateUserRequest_CAS) MakeFullFieldMask() *UpdateUserRequest_CAS_FieldMask {
	return FullUpdateUserRequest_CAS_FieldMask()
}

func (o *UpdateUserRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateUserRequest_CAS_FieldMask()
}

func (o *UpdateUserRequest_CAS) MakeDiffFieldMask(other *UpdateUserRequest_CAS) *UpdateUserRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateUserRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateUserRequest_CAS_FieldMask()
	}

	res := &UpdateUserRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateUserRequestCAS_FieldTerminalPath{selector: UpdateUserRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateUserRequestCAS_FieldSubPath{selector: UpdateUserRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateUserRequestCAS_FieldTerminalPath{selector: UpdateUserRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateUserRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateUserRequest_CAS))
}

func (o *UpdateUserRequest_CAS) Clone() *UpdateUserRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateUserRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*user.User_FieldMask)
	return result
}

func (o *UpdateUserRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateUserRequest_CAS) Merge(source *UpdateUserRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(user.User)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(user.User_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateUserRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateUserRequest_CAS))
}

func (o *DeleteUserRequest) GotenObjectExt() {}

func (o *DeleteUserRequest) MakeFullFieldMask() *DeleteUserRequest_FieldMask {
	return FullDeleteUserRequest_FieldMask()
}

func (o *DeleteUserRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteUserRequest_FieldMask()
}

func (o *DeleteUserRequest) MakeDiffFieldMask(other *DeleteUserRequest) *DeleteUserRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteUserRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteUserRequest_FieldMask()
	}

	res := &DeleteUserRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteUserRequest_FieldTerminalPath{selector: DeleteUserRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteUserRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteUserRequest))
}

func (o *DeleteUserRequest) Clone() *DeleteUserRequest {
	if o == nil {
		return nil
	}
	result := &DeleteUserRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &user.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteUserRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteUserRequest) Merge(source *DeleteUserRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &user.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteUserRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteUserRequest))
}
