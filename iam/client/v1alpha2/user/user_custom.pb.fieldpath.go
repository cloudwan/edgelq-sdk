// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/user_custom.proto
// DO NOT EDIT!!!

package user_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &user.User{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetUserByEmailRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetUserByEmailRequest_FieldPathSelector
	Get(source *GetUserByEmailRequest) []interface{}
	GetSingle(source *GetUserByEmailRequest) (interface{}, bool)
	ClearValue(item *GetUserByEmailRequest)

	// Those methods build corresponding GetUserByEmailRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetUserByEmailRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetUserByEmailRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetUserByEmailRequest_FieldPathArrayItemValue
}

type GetUserByEmailRequest_FieldPathSelector int32

const (
	GetUserByEmailRequest_FieldPathSelectorEmail     GetUserByEmailRequest_FieldPathSelector = 0
	GetUserByEmailRequest_FieldPathSelectorFieldMask GetUserByEmailRequest_FieldPathSelector = 1
	GetUserByEmailRequest_FieldPathSelectorView      GetUserByEmailRequest_FieldPathSelector = 2
	GetUserByEmailRequest_FieldPathSelectorSkipCache GetUserByEmailRequest_FieldPathSelector = 3
)

func (s GetUserByEmailRequest_FieldPathSelector) String() string {
	switch s {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		return "email"
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetUserByEmailRequest_FieldPathSelectorView:
		return "view"
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		return "skip_cache"
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", s))
	}
}

func BuildGetUserByEmailRequest_FieldPath(fp gotenobject.RawFieldPath) (GetUserByEmailRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetUserByEmailRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "email":
			return &GetUserByEmailRequest_FieldTerminalPath{selector: GetUserByEmailRequest_FieldPathSelectorEmail}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetUserByEmailRequest_FieldTerminalPath{selector: GetUserByEmailRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetUserByEmailRequest_FieldTerminalPath{selector: GetUserByEmailRequest_FieldPathSelectorView}, nil
		case "skip_cache", "skipCache", "skip-cache":
			return &GetUserByEmailRequest_FieldTerminalPath{selector: GetUserByEmailRequest_FieldPathSelectorSkipCache}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetUserByEmailRequest", fp)
}

func ParseGetUserByEmailRequest_FieldPath(rawField string) (GetUserByEmailRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetUserByEmailRequest_FieldPath(fp)
}

func MustParseGetUserByEmailRequest_FieldPath(rawField string) GetUserByEmailRequest_FieldPath {
	fp, err := ParseGetUserByEmailRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetUserByEmailRequest_FieldTerminalPath struct {
	selector GetUserByEmailRequest_FieldPathSelector
}

var _ GetUserByEmailRequest_FieldPath = (*GetUserByEmailRequest_FieldTerminalPath)(nil)

func (fp *GetUserByEmailRequest_FieldTerminalPath) Selector() GetUserByEmailRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetUserByEmailRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetUserByEmailRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetUserByEmailRequest
func (fp *GetUserByEmailRequest_FieldTerminalPath) Get(source *GetUserByEmailRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetUserByEmailRequest_FieldPathSelectorEmail:
			values = append(values, source.Email)
		case GetUserByEmailRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetUserByEmailRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case GetUserByEmailRequest_FieldPathSelectorSkipCache:
			values = append(values, source.SkipCache)
		default:
			panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetUserByEmailRequest))
}

// GetSingle returns value pointed by specific field of from source GetUserByEmailRequest
func (fp *GetUserByEmailRequest_FieldTerminalPath) GetSingle(source *GetUserByEmailRequest) (interface{}, bool) {
	switch fp.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		return source.GetEmail(), source != nil
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetUserByEmailRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		return source.GetSkipCache(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
	}
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetUserByEmailRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetUserByEmailRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		return ""
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case GetUserByEmailRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
	}
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) ClearValue(item *GetUserByEmailRequest) {
	if item != nil {
		switch fp.selector {
		case GetUserByEmailRequest_FieldPathSelectorEmail:
			item.Email = ""
		case GetUserByEmailRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetUserByEmailRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case GetUserByEmailRequest_FieldPathSelectorSkipCache:
			item.SkipCache = false
		default:
			panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
		}
	}
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetUserByEmailRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetUserByEmailRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetUserByEmailRequest_FieldPathSelectorEmail ||
		fp.selector == GetUserByEmailRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetUserByEmailRequest_FieldPathSelectorView ||
		fp.selector == GetUserByEmailRequest_FieldPathSelectorSkipCache
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) WithIValue(value interface{}) GetUserByEmailRequest_FieldPathValue {
	switch fp.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		return &GetUserByEmailRequest_FieldTerminalPathValue{GetUserByEmailRequest_FieldTerminalPath: *fp, value: value.(string)}
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		return &GetUserByEmailRequest_FieldTerminalPathValue{GetUserByEmailRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case GetUserByEmailRequest_FieldPathSelectorView:
		return &GetUserByEmailRequest_FieldTerminalPathValue{GetUserByEmailRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		return &GetUserByEmailRequest_FieldTerminalPathValue{GetUserByEmailRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
	}
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetUserByEmailRequest_FieldPathArrayOfValues {
	fpaov := &GetUserByEmailRequest_FieldTerminalPathArrayOfValues{GetUserByEmailRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		return &GetUserByEmailRequest_FieldTerminalPathArrayOfValues{GetUserByEmailRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		return &GetUserByEmailRequest_FieldTerminalPathArrayOfValues{GetUserByEmailRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case GetUserByEmailRequest_FieldPathSelectorView:
		return &GetUserByEmailRequest_FieldTerminalPathArrayOfValues{GetUserByEmailRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		return &GetUserByEmailRequest_FieldTerminalPathArrayOfValues{GetUserByEmailRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetUserByEmailRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fp.selector))
	}
}

func (fp *GetUserByEmailRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetUserByEmailRequest_FieldPathValue allows storing values for GetUserByEmailRequest fields according to their type
type GetUserByEmailRequest_FieldPathValue interface {
	GetUserByEmailRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetUserByEmailRequest)
	CompareWith(*GetUserByEmailRequest) (cmp int, comparable bool)
}

func ParseGetUserByEmailRequest_FieldPathValue(pathStr, valueStr string) (GetUserByEmailRequest_FieldPathValue, error) {
	fp, err := ParseGetUserByEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetUserByEmailRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetUserByEmailRequest_FieldPathValue), nil
}

func MustParseGetUserByEmailRequest_FieldPathValue(pathStr, valueStr string) GetUserByEmailRequest_FieldPathValue {
	fpv, err := ParseGetUserByEmailRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetUserByEmailRequest_FieldTerminalPathValue struct {
	GetUserByEmailRequest_FieldTerminalPath
	value interface{}
}

var _ GetUserByEmailRequest_FieldPathValue = (*GetUserByEmailRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetUserByEmailRequest' as interface{}
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) AsEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) AsSkipCacheValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object GetUserByEmailRequest
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) SetTo(target **GetUserByEmailRequest) {
	if *target == nil {
		*target = new(GetUserByEmailRequest)
	}
	switch fpv.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		(*target).Email = fpv.value.(string)
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case GetUserByEmailRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		(*target).SkipCache = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fpv.selector))
	}
}

func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetUserByEmailRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetUserByEmailRequest_FieldTerminalPathValue' with the value under path in 'GetUserByEmailRequest'.
func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) CompareWith(source *GetUserByEmailRequest) (int, bool) {
	switch fpv.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetUserByEmailRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSkipCache()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetUserByEmailRequest: %d", fpv.selector))
	}
}

func (fpv *GetUserByEmailRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetUserByEmailRequest))
}

// GetUserByEmailRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetUserByEmailRequest according to their type
// Present only for array (repeated) types.
type GetUserByEmailRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetUserByEmailRequest_FieldPath
	ContainsValue(*GetUserByEmailRequest) bool
}

// ParseGetUserByEmailRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetUserByEmailRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetUserByEmailRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetUserByEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetUserByEmailRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetUserByEmailRequest_FieldPathArrayItemValue), nil
}

func MustParseGetUserByEmailRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetUserByEmailRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetUserByEmailRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetUserByEmailRequest_FieldTerminalPathArrayItemValue struct {
	GetUserByEmailRequest_FieldTerminalPath
	value interface{}
}

var _ GetUserByEmailRequest_FieldPathArrayItemValue = (*GetUserByEmailRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetUserByEmailRequest as interface{}
func (fpaiv *GetUserByEmailRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetUserByEmailRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetUserByEmailRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetUserByEmailRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetUserByEmailRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetUserByEmailRequest'
func (fpaiv *GetUserByEmailRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetUserByEmailRequest) bool {
	slice := fpaiv.GetUserByEmailRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetUserByEmailRequest_FieldPathArrayOfValues allows storing slice of values for GetUserByEmailRequest fields according to their type
type GetUserByEmailRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetUserByEmailRequest_FieldPath
}

func ParseGetUserByEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetUserByEmailRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetUserByEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetUserByEmailRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetUserByEmailRequest_FieldPathArrayOfValues), nil
}

func MustParseGetUserByEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetUserByEmailRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetUserByEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetUserByEmailRequest_FieldTerminalPathArrayOfValues struct {
	GetUserByEmailRequest_FieldTerminalPath
	values interface{}
}

var _ GetUserByEmailRequest_FieldPathArrayOfValues = (*GetUserByEmailRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetUserByEmailRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetUserByEmailRequest_FieldPathSelectorEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case GetUserByEmailRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case GetUserByEmailRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case GetUserByEmailRequest_FieldPathSelectorSkipCache:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetUserByEmailRequest_FieldTerminalPathArrayOfValues) AsEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *GetUserByEmailRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *GetUserByEmailRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *GetUserByEmailRequest_FieldTerminalPathArrayOfValues) AsSkipCacheArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetUsersByEmailRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetUsersByEmailRequest_FieldPathSelector
	Get(source *BatchGetUsersByEmailRequest) []interface{}
	GetSingle(source *BatchGetUsersByEmailRequest) (interface{}, bool)
	ClearValue(item *BatchGetUsersByEmailRequest)

	// Those methods build corresponding BatchGetUsersByEmailRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetUsersByEmailRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetUsersByEmailRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetUsersByEmailRequest_FieldPathArrayItemValue
}

type BatchGetUsersByEmailRequest_FieldPathSelector int32

const (
	BatchGetUsersByEmailRequest_FieldPathSelectorEmails    BatchGetUsersByEmailRequest_FieldPathSelector = 0
	BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask BatchGetUsersByEmailRequest_FieldPathSelector = 1
	BatchGetUsersByEmailRequest_FieldPathSelectorView      BatchGetUsersByEmailRequest_FieldPathSelector = 2
	BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache BatchGetUsersByEmailRequest_FieldPathSelector = 3
)

func (s BatchGetUsersByEmailRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		return "emails"
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		return "view"
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		return "skip_cache"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", s))
	}
}

func BuildBatchGetUsersByEmailRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetUsersByEmailRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetUsersByEmailRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "emails":
			return &BatchGetUsersByEmailRequest_FieldTerminalPath{selector: BatchGetUsersByEmailRequest_FieldPathSelectorEmails}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetUsersByEmailRequest_FieldTerminalPath{selector: BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetUsersByEmailRequest_FieldTerminalPath{selector: BatchGetUsersByEmailRequest_FieldPathSelectorView}, nil
		case "skip_cache", "skipCache", "skip-cache":
			return &BatchGetUsersByEmailRequest_FieldTerminalPath{selector: BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetUsersByEmailRequest", fp)
}

func ParseBatchGetUsersByEmailRequest_FieldPath(rawField string) (BatchGetUsersByEmailRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetUsersByEmailRequest_FieldPath(fp)
}

func MustParseBatchGetUsersByEmailRequest_FieldPath(rawField string) BatchGetUsersByEmailRequest_FieldPath {
	fp, err := ParseBatchGetUsersByEmailRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetUsersByEmailRequest_FieldTerminalPath struct {
	selector BatchGetUsersByEmailRequest_FieldPathSelector
}

var _ BatchGetUsersByEmailRequest_FieldPath = (*BatchGetUsersByEmailRequest_FieldTerminalPath)(nil)

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) Selector() BatchGetUsersByEmailRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetUsersByEmailRequest
func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) Get(source *BatchGetUsersByEmailRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
			for _, value := range source.GetEmails() {
				values = append(values, value)
			}
		case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetUsersByEmailRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
			values = append(values, source.SkipCache)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetUsersByEmailRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetUsersByEmailRequest
func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) GetSingle(source *BatchGetUsersByEmailRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		res := source.GetEmails()
		return res, res != nil
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		return source.GetSkipCache(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetUsersByEmailRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		return ([]string)(nil)
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		return (*user.User_FieldMask)(nil)
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) ClearValue(item *BatchGetUsersByEmailRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
			item.Emails = nil
		case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetUsersByEmailRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
			item.SkipCache = false
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetUsersByEmailRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetUsersByEmailRequest_FieldPathSelectorEmails ||
		fp.selector == BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetUsersByEmailRequest_FieldPathSelectorView ||
		fp.selector == BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetUsersByEmailRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathValue{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, value: value.([]string)}
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathValue{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, value: value.(*user.User_FieldMask)}
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathValue{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathValue{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetUsersByEmailRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, values: values.([][]string)}
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, values: values.([]*user.User_FieldMask)}
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetUsersByEmailRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		return &BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue{BatchGetUsersByEmailRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetUsersByEmailRequest_FieldPathValue allows storing values for BatchGetUsersByEmailRequest fields according to their type
type BatchGetUsersByEmailRequest_FieldPathValue interface {
	BatchGetUsersByEmailRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetUsersByEmailRequest)
	CompareWith(*BatchGetUsersByEmailRequest) (cmp int, comparable bool)
}

func ParseBatchGetUsersByEmailRequest_FieldPathValue(pathStr, valueStr string) (BatchGetUsersByEmailRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetUsersByEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersByEmailRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetUsersByEmailRequest_FieldPathValue), nil
}

func MustParseBatchGetUsersByEmailRequest_FieldPathValue(pathStr, valueStr string) BatchGetUsersByEmailRequest_FieldPathValue {
	fpv, err := ParseBatchGetUsersByEmailRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetUsersByEmailRequest_FieldTerminalPathValue struct {
	BatchGetUsersByEmailRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersByEmailRequest_FieldPathValue = (*BatchGetUsersByEmailRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetUsersByEmailRequest' as interface{}
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) AsEmailsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) AsFieldMaskValue() (*user.User_FieldMask, bool) {
	res, ok := fpv.value.(*user.User_FieldMask)
	return res, ok
}
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) AsSkipCacheValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetUsersByEmailRequest
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) SetTo(target **BatchGetUsersByEmailRequest) {
	if *target == nil {
		*target = new(BatchGetUsersByEmailRequest)
	}
	switch fpv.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		(*target).Emails = fpv.value.([]string)
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*user.User_FieldMask)
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		(*target).SkipCache = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetUsersByEmailRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetUsersByEmailRequest_FieldTerminalPathValue' with the value under path in 'BatchGetUsersByEmailRequest'.
func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) CompareWith(source *BatchGetUsersByEmailRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		return 0, false
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSkipCache()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersByEmailRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetUsersByEmailRequest))
}

// BatchGetUsersByEmailRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetUsersByEmailRequest according to their type
// Present only for array (repeated) types.
type BatchGetUsersByEmailRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetUsersByEmailRequest_FieldPath
	ContainsValue(*BatchGetUsersByEmailRequest) bool
}

// ParseBatchGetUsersByEmailRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetUsersByEmailRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetUsersByEmailRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetUsersByEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersByEmailRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetUsersByEmailRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetUsersByEmailRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetUsersByEmailRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetUsersByEmailRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetUsersByEmailRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersByEmailRequest_FieldPathArrayItemValue = (*BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetUsersByEmailRequest as interface{}
func (fpaiv *BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue) AsEmailsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetUsersByEmailRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetUsersByEmailRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetUsersByEmailRequest'
func (fpaiv *BatchGetUsersByEmailRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetUsersByEmailRequest) bool {
	slice := fpaiv.BatchGetUsersByEmailRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetUsersByEmailRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetUsersByEmailRequest fields according to their type
type BatchGetUsersByEmailRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetUsersByEmailRequest_FieldPath
}

func ParseBatchGetUsersByEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetUsersByEmailRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetUsersByEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersByEmailRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetUsersByEmailRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetUsersByEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetUsersByEmailRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetUsersByEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetUsersByEmailRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetUsersByEmailRequest_FieldPathArrayOfValues = (*BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetUsersByEmailRequest_FieldPathSelectorEmails:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case BatchGetUsersByEmailRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*user.User_FieldMask) {
			values = append(values, v)
		}
	case BatchGetUsersByEmailRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case BatchGetUsersByEmailRequest_FieldPathSelectorSkipCache:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues) AsEmailsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*user.User_FieldMask, bool) {
	res, ok := fpaov.values.([]*user.User_FieldMask)
	return res, ok
}
func (fpaov *BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *BatchGetUsersByEmailRequest_FieldTerminalPathArrayOfValues) AsSkipCacheArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetUsersByEmailResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetUsersByEmailResponse_FieldPathSelector
	Get(source *BatchGetUsersByEmailResponse) []interface{}
	GetSingle(source *BatchGetUsersByEmailResponse) (interface{}, bool)
	ClearValue(item *BatchGetUsersByEmailResponse)

	// Those methods build corresponding BatchGetUsersByEmailResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetUsersByEmailResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetUsersByEmailResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetUsersByEmailResponse_FieldPathArrayItemValue
}

type BatchGetUsersByEmailResponse_FieldPathSelector int32

const (
	BatchGetUsersByEmailResponse_FieldPathSelectorUsers   BatchGetUsersByEmailResponse_FieldPathSelector = 0
	BatchGetUsersByEmailResponse_FieldPathSelectorMissing BatchGetUsersByEmailResponse_FieldPathSelector = 1
)

func (s BatchGetUsersByEmailResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return "users"
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", s))
	}
}

func BuildBatchGetUsersByEmailResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetUsersByEmailResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetUsersByEmailResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "users":
			return &BatchGetUsersByEmailResponse_FieldTerminalPath{selector: BatchGetUsersByEmailResponse_FieldPathSelectorUsers}, nil
		case "missing":
			return &BatchGetUsersByEmailResponse_FieldTerminalPath{selector: BatchGetUsersByEmailResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "users":
			if subpath, err := user.BuildUser_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetUsersByEmailResponse_FieldSubPath{selector: BatchGetUsersByEmailResponse_FieldPathSelectorUsers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetUsersByEmailResponse", fp)
}

func ParseBatchGetUsersByEmailResponse_FieldPath(rawField string) (BatchGetUsersByEmailResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetUsersByEmailResponse_FieldPath(fp)
}

func MustParseBatchGetUsersByEmailResponse_FieldPath(rawField string) BatchGetUsersByEmailResponse_FieldPath {
	fp, err := ParseBatchGetUsersByEmailResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetUsersByEmailResponse_FieldTerminalPath struct {
	selector BatchGetUsersByEmailResponse_FieldPathSelector
}

var _ BatchGetUsersByEmailResponse_FieldPath = (*BatchGetUsersByEmailResponse_FieldTerminalPath)(nil)

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) Selector() BatchGetUsersByEmailResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetUsersByEmailResponse
func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) Get(source *BatchGetUsersByEmailResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
			for _, value := range source.GetUsers() {
				values = append(values, value)
			}
		case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetUsersByEmailResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetUsersByEmailResponse
func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) GetSingle(source *BatchGetUsersByEmailResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		res := source.GetUsers()
		return res, res != nil
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetUsersByEmailResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return ([]*user.User)(nil)
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) ClearValue(item *BatchGetUsersByEmailResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
			item.Users = nil
		case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetUsersByEmailResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetUsersByEmailResponse_FieldPathSelectorMissing
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetUsersByEmailResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return &BatchGetUsersByEmailResponse_FieldTerminalPathValue{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp, value: value.([]*user.User)}
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		return &BatchGetUsersByEmailResponse_FieldTerminalPathValue{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetUsersByEmailResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return &BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp, values: values.([][]*user.User)}
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		return &BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetUsersByEmailResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return &BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp, value: value.(*user.User)}
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		return &BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue{BatchGetUsersByEmailResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fp.selector))
	}
}

func (fp *BatchGetUsersByEmailResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetUsersByEmailResponse_FieldSubPath struct {
	selector BatchGetUsersByEmailResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetUsersByEmailResponse_FieldPath = (*BatchGetUsersByEmailResponse_FieldSubPath)(nil)

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) Selector() BatchGetUsersByEmailResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) AsUsersSubPath() (user.User_FieldPath, bool) {
	res, ok := fps.subPath.(user.User_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetUsersByEmailResponse
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) Get(source *BatchGetUsersByEmailResponse) (values []interface{}) {
	if asUserFieldPath, ok := fps.AsUsersSubPath(); ok {
		for _, item := range source.GetUsers() {
			values = append(values, asUserFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetUsersByEmailResponse))
}

// GetSingle returns value of selected field from source BatchGetUsersByEmailResponse
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) GetSingle(source *BatchGetUsersByEmailResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		if len(source.GetUsers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUsers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fps.selector))
	}
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetUsersByEmailResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) ClearValue(item *BatchGetUsersByEmailResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
			for _, subItem := range item.Users {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetUsersByEmailResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetUsersByEmailResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) WithIValue(value interface{}) BatchGetUsersByEmailResponse_FieldPathValue {
	return &BatchGetUsersByEmailResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetUsersByEmailResponse_FieldPathArrayOfValues {
	return &BatchGetUsersByEmailResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetUsersByEmailResponse_FieldPathArrayItemValue {
	return &BatchGetUsersByEmailResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetUsersByEmailResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetUsersByEmailResponse_FieldPathValue allows storing values for BatchGetUsersByEmailResponse fields according to their type
type BatchGetUsersByEmailResponse_FieldPathValue interface {
	BatchGetUsersByEmailResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetUsersByEmailResponse)
	CompareWith(*BatchGetUsersByEmailResponse) (cmp int, comparable bool)
}

func ParseBatchGetUsersByEmailResponse_FieldPathValue(pathStr, valueStr string) (BatchGetUsersByEmailResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetUsersByEmailResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersByEmailResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetUsersByEmailResponse_FieldPathValue), nil
}

func MustParseBatchGetUsersByEmailResponse_FieldPathValue(pathStr, valueStr string) BatchGetUsersByEmailResponse_FieldPathValue {
	fpv, err := ParseBatchGetUsersByEmailResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetUsersByEmailResponse_FieldTerminalPathValue struct {
	BatchGetUsersByEmailResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersByEmailResponse_FieldPathValue = (*BatchGetUsersByEmailResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetUsersByEmailResponse' as interface{}
func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) AsUsersValue() ([]*user.User, bool) {
	res, ok := fpv.value.([]*user.User)
	return res, ok
}
func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) AsMissingValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetUsersByEmailResponse
func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) SetTo(target **BatchGetUsersByEmailResponse) {
	if *target == nil {
		*target = new(BatchGetUsersByEmailResponse)
	}
	switch fpv.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		(*target).Users = fpv.value.([]*user.User)
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetUsersByEmailResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetUsersByEmailResponse_FieldTerminalPathValue' with the value under path in 'BatchGetUsersByEmailResponse'.
func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) CompareWith(source *BatchGetUsersByEmailResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return 0, false
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetUsersByEmailResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetUsersByEmailResponse))
}

type BatchGetUsersByEmailResponse_FieldSubPathValue struct {
	BatchGetUsersByEmailResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetUsersByEmailResponse_FieldPathValue = (*BatchGetUsersByEmailResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetUsersByEmailResponse_FieldSubPathValue) AsUsersPathValue() (user.User_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(user.User_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetUsersByEmailResponse_FieldSubPathValue) SetTo(target **BatchGetUsersByEmailResponse) {
	if *target == nil {
		*target = new(BatchGetUsersByEmailResponse)
	}
	switch fpvs.Selector() {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetUsersByEmailResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetUsersByEmailResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetUsersByEmailResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetUsersByEmailResponse_FieldSubPathValue) CompareWith(source *BatchGetUsersByEmailResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetUsersByEmailResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetUsersByEmailResponse))
}

// BatchGetUsersByEmailResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetUsersByEmailResponse according to their type
// Present only for array (repeated) types.
type BatchGetUsersByEmailResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetUsersByEmailResponse_FieldPath
	ContainsValue(*BatchGetUsersByEmailResponse) bool
}

// ParseBatchGetUsersByEmailResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetUsersByEmailResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetUsersByEmailResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetUsersByEmailResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersByEmailResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetUsersByEmailResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetUsersByEmailResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetUsersByEmailResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetUsersByEmailResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetUsersByEmailResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetUsersByEmailResponse_FieldPathArrayItemValue = (*BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetUsersByEmailResponse as interface{}
func (fpaiv *BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue) AsUsersItemValue() (*user.User, bool) {
	res, ok := fpaiv.value.(*user.User)
	return res, ok
}
func (fpaiv *BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetUsersByEmailResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetUsersByEmailResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetUsersByEmailResponse'
func (fpaiv *BatchGetUsersByEmailResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetUsersByEmailResponse) bool {
	slice := fpaiv.BatchGetUsersByEmailResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetUsersByEmailResponse_FieldSubPathArrayItemValue struct {
	BatchGetUsersByEmailResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetUsersByEmailResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetUsersByEmailResponse_FieldSubPathArrayItemValue) AsUsersPathItemValue() (user.User_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(user.User_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetUsersByEmailResponse'
func (fpaivs *BatchGetUsersByEmailResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetUsersByEmailResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetUsersByEmailResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetUsersByEmailResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetUsersByEmailResponse fields according to their type
type BatchGetUsersByEmailResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetUsersByEmailResponse_FieldPath
}

func ParseBatchGetUsersByEmailResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetUsersByEmailResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetUsersByEmailResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetUsersByEmailResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetUsersByEmailResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetUsersByEmailResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetUsersByEmailResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetUsersByEmailResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetUsersByEmailResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetUsersByEmailResponse_FieldPathArrayOfValues = (*BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetUsersByEmailResponse_FieldPathSelectorUsers:
		for _, v := range fpaov.values.([][]*user.User) {
			values = append(values, v)
		}
	case BatchGetUsersByEmailResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues) AsUsersArrayOfValues() ([][]*user.User, bool) {
	res, ok := fpaov.values.([][]*user.User)
	return res, ok
}
func (fpaov *BatchGetUsersByEmailResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

type BatchGetUsersByEmailResponse_FieldSubPathArrayOfValues struct {
	BatchGetUsersByEmailResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetUsersByEmailResponse_FieldPathArrayOfValues = (*BatchGetUsersByEmailResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetUsersByEmailResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetUsersByEmailResponse_FieldSubPathArrayOfValues) AsUsersPathArrayOfValues() (user.User_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(user.User_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetMySettingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetMySettingsRequest_FieldPathSelector
	Get(source *GetMySettingsRequest) []interface{}
	GetSingle(source *GetMySettingsRequest) (interface{}, bool)
	ClearValue(item *GetMySettingsRequest)

	// Those methods build corresponding GetMySettingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetMySettingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetMySettingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetMySettingsRequest_FieldPathArrayItemValue
}

type GetMySettingsRequest_FieldPathSelector int32

const (
	GetMySettingsRequest_FieldPathSelectorKeys GetMySettingsRequest_FieldPathSelector = 0
)

func (s GetMySettingsRequest_FieldPathSelector) String() string {
	switch s {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		return "keys"
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", s))
	}
}

func BuildGetMySettingsRequest_FieldPath(fp gotenobject.RawFieldPath) (GetMySettingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetMySettingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "keys":
			return &GetMySettingsRequest_FieldTerminalPath{selector: GetMySettingsRequest_FieldPathSelectorKeys}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetMySettingsRequest", fp)
}

func ParseGetMySettingsRequest_FieldPath(rawField string) (GetMySettingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetMySettingsRequest_FieldPath(fp)
}

func MustParseGetMySettingsRequest_FieldPath(rawField string) GetMySettingsRequest_FieldPath {
	fp, err := ParseGetMySettingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetMySettingsRequest_FieldTerminalPath struct {
	selector GetMySettingsRequest_FieldPathSelector
}

var _ GetMySettingsRequest_FieldPath = (*GetMySettingsRequest_FieldTerminalPath)(nil)

func (fp *GetMySettingsRequest_FieldTerminalPath) Selector() GetMySettingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetMySettingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetMySettingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetMySettingsRequest
func (fp *GetMySettingsRequest_FieldTerminalPath) Get(source *GetMySettingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetMySettingsRequest_FieldPathSelectorKeys:
			for _, value := range source.GetKeys() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetMySettingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetMySettingsRequest))
}

// GetSingle returns value pointed by specific field of from source GetMySettingsRequest
func (fp *GetMySettingsRequest_FieldTerminalPath) GetSingle(source *GetMySettingsRequest) (interface{}, bool) {
	switch fp.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		res := source.GetKeys()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *GetMySettingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetMySettingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetMySettingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *GetMySettingsRequest_FieldTerminalPath) ClearValue(item *GetMySettingsRequest) {
	if item != nil {
		switch fp.selector {
		case GetMySettingsRequest_FieldPathSelectorKeys:
			item.Keys = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
		}
	}
}

func (fp *GetMySettingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetMySettingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetMySettingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetMySettingsRequest_FieldPathSelectorKeys
}

func (fp *GetMySettingsRequest_FieldTerminalPath) WithIValue(value interface{}) GetMySettingsRequest_FieldPathValue {
	switch fp.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		return &GetMySettingsRequest_FieldTerminalPathValue{GetMySettingsRequest_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *GetMySettingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetMySettingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetMySettingsRequest_FieldPathArrayOfValues {
	fpaov := &GetMySettingsRequest_FieldTerminalPathArrayOfValues{GetMySettingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		return &GetMySettingsRequest_FieldTerminalPathArrayOfValues{GetMySettingsRequest_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetMySettingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetMySettingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetMySettingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		return &GetMySettingsRequest_FieldTerminalPathArrayItemValue{GetMySettingsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *GetMySettingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetMySettingsRequest_FieldPathValue allows storing values for GetMySettingsRequest fields according to their type
type GetMySettingsRequest_FieldPathValue interface {
	GetMySettingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetMySettingsRequest)
	CompareWith(*GetMySettingsRequest) (cmp int, comparable bool)
}

func ParseGetMySettingsRequest_FieldPathValue(pathStr, valueStr string) (GetMySettingsRequest_FieldPathValue, error) {
	fp, err := ParseGetMySettingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMySettingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetMySettingsRequest_FieldPathValue), nil
}

func MustParseGetMySettingsRequest_FieldPathValue(pathStr, valueStr string) GetMySettingsRequest_FieldPathValue {
	fpv, err := ParseGetMySettingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetMySettingsRequest_FieldTerminalPathValue struct {
	GetMySettingsRequest_FieldTerminalPath
	value interface{}
}

var _ GetMySettingsRequest_FieldPathValue = (*GetMySettingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetMySettingsRequest' as interface{}
func (fpv *GetMySettingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetMySettingsRequest_FieldTerminalPathValue) AsKeysValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object GetMySettingsRequest
func (fpv *GetMySettingsRequest_FieldTerminalPathValue) SetTo(target **GetMySettingsRequest) {
	if *target == nil {
		*target = new(GetMySettingsRequest)
	}
	switch fpv.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		(*target).Keys = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fpv.selector))
	}
}

func (fpv *GetMySettingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetMySettingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetMySettingsRequest_FieldTerminalPathValue' with the value under path in 'GetMySettingsRequest'.
func (fpv *GetMySettingsRequest_FieldTerminalPathValue) CompareWith(source *GetMySettingsRequest) (int, bool) {
	switch fpv.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsRequest: %d", fpv.selector))
	}
}

func (fpv *GetMySettingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetMySettingsRequest))
}

// GetMySettingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetMySettingsRequest according to their type
// Present only for array (repeated) types.
type GetMySettingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetMySettingsRequest_FieldPath
	ContainsValue(*GetMySettingsRequest) bool
}

// ParseGetMySettingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetMySettingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetMySettingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetMySettingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMySettingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetMySettingsRequest_FieldPathArrayItemValue), nil
}

func MustParseGetMySettingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetMySettingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetMySettingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetMySettingsRequest_FieldTerminalPathArrayItemValue struct {
	GetMySettingsRequest_FieldTerminalPath
	value interface{}
}

var _ GetMySettingsRequest_FieldPathArrayItemValue = (*GetMySettingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetMySettingsRequest as interface{}
func (fpaiv *GetMySettingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *GetMySettingsRequest_FieldTerminalPathArrayItemValue) AsKeysItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *GetMySettingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetMySettingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetMySettingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetMySettingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetMySettingsRequest'
func (fpaiv *GetMySettingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetMySettingsRequest) bool {
	slice := fpaiv.GetMySettingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetMySettingsRequest_FieldPathArrayOfValues allows storing slice of values for GetMySettingsRequest fields according to their type
type GetMySettingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetMySettingsRequest_FieldPath
}

func ParseGetMySettingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetMySettingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetMySettingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMySettingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetMySettingsRequest_FieldPathArrayOfValues), nil
}

func MustParseGetMySettingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetMySettingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetMySettingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetMySettingsRequest_FieldTerminalPathArrayOfValues struct {
	GetMySettingsRequest_FieldTerminalPath
	values interface{}
}

var _ GetMySettingsRequest_FieldPathArrayOfValues = (*GetMySettingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetMySettingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetMySettingsRequest_FieldPathSelectorKeys:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetMySettingsRequest_FieldTerminalPathArrayOfValues) AsKeysArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetMySettingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetMySettingsResponse_FieldPathSelector
	Get(source *GetMySettingsResponse) []interface{}
	GetSingle(source *GetMySettingsResponse) (interface{}, bool)
	ClearValue(item *GetMySettingsResponse)

	// Those methods build corresponding GetMySettingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetMySettingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetMySettingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetMySettingsResponse_FieldPathArrayItemValue
}

type GetMySettingsResponse_FieldPathSelector int32

const (
	GetMySettingsResponse_FieldPathSelectorSettings GetMySettingsResponse_FieldPathSelector = 0
)

func (s GetMySettingsResponse_FieldPathSelector) String() string {
	switch s {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return "settings"
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", s))
	}
}

func BuildGetMySettingsResponse_FieldPath(fp gotenobject.RawFieldPath) (GetMySettingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetMySettingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "settings":
			return &GetMySettingsResponse_FieldTerminalPath{selector: GetMySettingsResponse_FieldPathSelectorSettings}, nil
		}
	} else {
		switch fp[0] {
		case "settings":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object GetMySettingsResponse)", fp)
			}
			return &GetMySettingsResponse_FieldPathMap{selector: GetMySettingsResponse_FieldPathSelectorSettings, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetMySettingsResponse", fp)
}

func ParseGetMySettingsResponse_FieldPath(rawField string) (GetMySettingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetMySettingsResponse_FieldPath(fp)
}

func MustParseGetMySettingsResponse_FieldPath(rawField string) GetMySettingsResponse_FieldPath {
	fp, err := ParseGetMySettingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetMySettingsResponse_FieldTerminalPath struct {
	selector GetMySettingsResponse_FieldPathSelector
}

var _ GetMySettingsResponse_FieldPath = (*GetMySettingsResponse_FieldTerminalPath)(nil)

func (fp *GetMySettingsResponse_FieldTerminalPath) Selector() GetMySettingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetMySettingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetMySettingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetMySettingsResponse
func (fp *GetMySettingsResponse_FieldTerminalPath) Get(source *GetMySettingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetMySettingsResponse_FieldPathSelectorSettings:
			values = append(values, source.Settings)
		default:
			panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetMySettingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetMySettingsResponse))
}

// GetSingle returns value pointed by specific field of from source GetMySettingsResponse
func (fp *GetMySettingsResponse_FieldTerminalPath) GetSingle(source *GetMySettingsResponse) (interface{}, bool) {
	switch fp.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		res := source.GetSettings()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
	}
}

func (fp *GetMySettingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetMySettingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetMySettingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
	}
}

func (fp *GetMySettingsResponse_FieldTerminalPath) ClearValue(item *GetMySettingsResponse) {
	if item != nil {
		switch fp.selector {
		case GetMySettingsResponse_FieldPathSelectorSettings:
			item.Settings = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
		}
	}
}

func (fp *GetMySettingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetMySettingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetMySettingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetMySettingsResponse_FieldPathSelectorSettings
}

func (fp *GetMySettingsResponse_FieldTerminalPath) WithIValue(value interface{}) GetMySettingsResponse_FieldPathValue {
	switch fp.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return &GetMySettingsResponse_FieldTerminalPathValue{GetMySettingsResponse_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
	}
}

func (fp *GetMySettingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetMySettingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetMySettingsResponse_FieldPathArrayOfValues {
	fpaov := &GetMySettingsResponse_FieldTerminalPathArrayOfValues{GetMySettingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return &GetMySettingsResponse_FieldTerminalPathArrayOfValues{GetMySettingsResponse_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetMySettingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetMySettingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetMySettingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fp.selector))
	}
}

func (fp *GetMySettingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type GetMySettingsResponse_FieldPathMap struct {
	key      string
	selector GetMySettingsResponse_FieldPathSelector
}

var _ GetMySettingsResponse_FieldPath = (*GetMySettingsResponse_FieldPathMap)(nil)

func (fpm *GetMySettingsResponse_FieldPathMap) Selector() GetMySettingsResponse_FieldPathSelector {
	return fpm.selector
}

func (fpm *GetMySettingsResponse_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *GetMySettingsResponse_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *GetMySettingsResponse_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source GetMySettingsResponse
func (fpm *GetMySettingsResponse_FieldPathMap) Get(source *GetMySettingsResponse) (values []interface{}) {
	switch fpm.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		if value, ok := source.GetSettings()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
	}
	return
}

func (fpm *GetMySettingsResponse_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*GetMySettingsResponse))
}

// GetSingle returns value by selected field map key from source GetMySettingsResponse
func (fpm *GetMySettingsResponse_FieldPathMap) GetSingle(source *GetMySettingsResponse) (interface{}, bool) {
	switch fpm.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		res, ok := source.GetSettings()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
	}
}

func (fpm *GetMySettingsResponse_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*GetMySettingsResponse))
}

// GetDefault returns a default value of the field type
func (fpm *GetMySettingsResponse_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
	}
}

func (fpm *GetMySettingsResponse_FieldPathMap) ClearValue(item *GetMySettingsResponse) {
	if item != nil {
		switch fpm.selector {
		case GetMySettingsResponse_FieldPathSelectorSettings:
			delete(item.Settings, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
		}
	}
}

func (fpm *GetMySettingsResponse_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*GetMySettingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fpm *GetMySettingsResponse_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
	}
}

func (fpm *GetMySettingsResponse_FieldPathMap) WithIValue(value interface{}) GetMySettingsResponse_FieldPathValue {
	switch fpm.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return &GetMySettingsResponse_FieldPathMapValue{GetMySettingsResponse_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
	}
}

func (fpm *GetMySettingsResponse_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *GetMySettingsResponse_FieldPathMap) WithIArrayOfValues(values interface{}) GetMySettingsResponse_FieldPathArrayOfValues {
	switch fpm.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return &GetMySettingsResponse_FieldPathMapArrayOfValues{GetMySettingsResponse_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpm.selector))
	}
}

func (fpm *GetMySettingsResponse_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *GetMySettingsResponse_FieldPathMap) WithIArrayItemValue(value interface{}) GetMySettingsResponse_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *GetMySettingsResponse_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// GetMySettingsResponse_FieldPathValue allows storing values for GetMySettingsResponse fields according to their type
type GetMySettingsResponse_FieldPathValue interface {
	GetMySettingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetMySettingsResponse)
	CompareWith(*GetMySettingsResponse) (cmp int, comparable bool)
}

func ParseGetMySettingsResponse_FieldPathValue(pathStr, valueStr string) (GetMySettingsResponse_FieldPathValue, error) {
	fp, err := ParseGetMySettingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMySettingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetMySettingsResponse_FieldPathValue), nil
}

func MustParseGetMySettingsResponse_FieldPathValue(pathStr, valueStr string) GetMySettingsResponse_FieldPathValue {
	fpv, err := ParseGetMySettingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetMySettingsResponse_FieldTerminalPathValue struct {
	GetMySettingsResponse_FieldTerminalPath
	value interface{}
}

var _ GetMySettingsResponse_FieldPathValue = (*GetMySettingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetMySettingsResponse' as interface{}
func (fpv *GetMySettingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetMySettingsResponse_FieldTerminalPathValue) AsSettingsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object GetMySettingsResponse
func (fpv *GetMySettingsResponse_FieldTerminalPathValue) SetTo(target **GetMySettingsResponse) {
	if *target == nil {
		*target = new(GetMySettingsResponse)
	}
	switch fpv.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		(*target).Settings = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpv.selector))
	}
}

func (fpv *GetMySettingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetMySettingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetMySettingsResponse_FieldTerminalPathValue' with the value under path in 'GetMySettingsResponse'.
func (fpv *GetMySettingsResponse_FieldTerminalPathValue) CompareWith(source *GetMySettingsResponse) (int, bool) {
	switch fpv.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpv.selector))
	}
}

func (fpv *GetMySettingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetMySettingsResponse))
}

type GetMySettingsResponse_FieldPathMapValue struct {
	GetMySettingsResponse_FieldPathMap
	value interface{}
}

var _ GetMySettingsResponse_FieldPathValue = (*GetMySettingsResponse_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in GetMySettingsResponse as interface{}
func (fpmv *GetMySettingsResponse_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *GetMySettingsResponse_FieldPathMapValue) AsSettingsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in GetMySettingsResponse
func (fpmv *GetMySettingsResponse_FieldPathMapValue) SetTo(target **GetMySettingsResponse) {
	if *target == nil {
		*target = new(GetMySettingsResponse)
	}
	switch fpmv.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		if (*target).Settings == nil {
			(*target).Settings = make(map[string]string)
		}
		(*target).Settings[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpmv.selector))
	}
}

func (fpmv *GetMySettingsResponse_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetMySettingsResponse)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetMySettingsResponse_FieldPathMapValue' with the value under path in 'GetMySettingsResponse'.
func (fpmv *GetMySettingsResponse_FieldPathMapValue) CompareWith(source *GetMySettingsResponse) (int, bool) {
	switch fpmv.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		leftValue := fpmv.value.(string)
		rightValue := source.GetSettings()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMySettingsResponse: %d", fpmv.selector))
	}
}

func (fpmv *GetMySettingsResponse_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*GetMySettingsResponse))
}

// GetMySettingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetMySettingsResponse according to their type
// Present only for array (repeated) types.
type GetMySettingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetMySettingsResponse_FieldPath
	ContainsValue(*GetMySettingsResponse) bool
}

// ParseGetMySettingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetMySettingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetMySettingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetMySettingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMySettingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetMySettingsResponse_FieldPathArrayItemValue), nil
}

func MustParseGetMySettingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetMySettingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetMySettingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetMySettingsResponse_FieldTerminalPathArrayItemValue struct {
	GetMySettingsResponse_FieldTerminalPath
	value interface{}
}

var _ GetMySettingsResponse_FieldPathArrayItemValue = (*GetMySettingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetMySettingsResponse as interface{}
func (fpaiv *GetMySettingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetMySettingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetMySettingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetMySettingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetMySettingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetMySettingsResponse'
func (fpaiv *GetMySettingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetMySettingsResponse) bool {
	slice := fpaiv.GetMySettingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetMySettingsResponse_FieldPathArrayOfValues allows storing slice of values for GetMySettingsResponse fields according to their type
type GetMySettingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetMySettingsResponse_FieldPath
}

func ParseGetMySettingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetMySettingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetMySettingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMySettingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetMySettingsResponse_FieldPathArrayOfValues), nil
}

func MustParseGetMySettingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetMySettingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetMySettingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetMySettingsResponse_FieldTerminalPathArrayOfValues struct {
	GetMySettingsResponse_FieldTerminalPath
	values interface{}
}

var _ GetMySettingsResponse_FieldPathArrayOfValues = (*GetMySettingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetMySettingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetMySettingsResponse_FieldTerminalPathArrayOfValues) AsSettingsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type GetMySettingsResponse_FieldPathMapArrayOfValues struct {
	GetMySettingsResponse_FieldPathMap
	values interface{}
}

var _ GetMySettingsResponse_FieldPathArrayOfValues = (*GetMySettingsResponse_FieldPathMapArrayOfValues)(nil)

func (fpmaov *GetMySettingsResponse_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case GetMySettingsResponse_FieldPathSelectorSettings:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *GetMySettingsResponse_FieldPathMapArrayOfValues) AsSettingsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SetMySettingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SetMySettingsRequest_FieldPathSelector
	Get(source *SetMySettingsRequest) []interface{}
	GetSingle(source *SetMySettingsRequest) (interface{}, bool)
	ClearValue(item *SetMySettingsRequest)

	// Those methods build corresponding SetMySettingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SetMySettingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SetMySettingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SetMySettingsRequest_FieldPathArrayItemValue
}

type SetMySettingsRequest_FieldPathSelector int32

const (
	SetMySettingsRequest_FieldPathSelectorSettings SetMySettingsRequest_FieldPathSelector = 0
)

func (s SetMySettingsRequest_FieldPathSelector) String() string {
	switch s {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return "settings"
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", s))
	}
}

func BuildSetMySettingsRequest_FieldPath(fp gotenobject.RawFieldPath) (SetMySettingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SetMySettingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "settings":
			return &SetMySettingsRequest_FieldTerminalPath{selector: SetMySettingsRequest_FieldPathSelectorSettings}, nil
		}
	} else {
		switch fp[0] {
		case "settings":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object SetMySettingsRequest)", fp)
			}
			return &SetMySettingsRequest_FieldPathMap{selector: SetMySettingsRequest_FieldPathSelectorSettings, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SetMySettingsRequest", fp)
}

func ParseSetMySettingsRequest_FieldPath(rawField string) (SetMySettingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSetMySettingsRequest_FieldPath(fp)
}

func MustParseSetMySettingsRequest_FieldPath(rawField string) SetMySettingsRequest_FieldPath {
	fp, err := ParseSetMySettingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SetMySettingsRequest_FieldTerminalPath struct {
	selector SetMySettingsRequest_FieldPathSelector
}

var _ SetMySettingsRequest_FieldPath = (*SetMySettingsRequest_FieldTerminalPath)(nil)

func (fp *SetMySettingsRequest_FieldTerminalPath) Selector() SetMySettingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SetMySettingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SetMySettingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SetMySettingsRequest
func (fp *SetMySettingsRequest_FieldTerminalPath) Get(source *SetMySettingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SetMySettingsRequest_FieldPathSelectorSettings:
			values = append(values, source.Settings)
		default:
			panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SetMySettingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SetMySettingsRequest))
}

// GetSingle returns value pointed by specific field of from source SetMySettingsRequest
func (fp *SetMySettingsRequest_FieldTerminalPath) GetSingle(source *SetMySettingsRequest) (interface{}, bool) {
	switch fp.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		res := source.GetSettings()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *SetMySettingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SetMySettingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *SetMySettingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *SetMySettingsRequest_FieldTerminalPath) ClearValue(item *SetMySettingsRequest) {
	if item != nil {
		switch fp.selector {
		case SetMySettingsRequest_FieldPathSelectorSettings:
			item.Settings = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
		}
	}
}

func (fp *SetMySettingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SetMySettingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SetMySettingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SetMySettingsRequest_FieldPathSelectorSettings
}

func (fp *SetMySettingsRequest_FieldTerminalPath) WithIValue(value interface{}) SetMySettingsRequest_FieldPathValue {
	switch fp.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return &SetMySettingsRequest_FieldTerminalPathValue{SetMySettingsRequest_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *SetMySettingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SetMySettingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SetMySettingsRequest_FieldPathArrayOfValues {
	fpaov := &SetMySettingsRequest_FieldTerminalPathArrayOfValues{SetMySettingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return &SetMySettingsRequest_FieldTerminalPathArrayOfValues{SetMySettingsRequest_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SetMySettingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SetMySettingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SetMySettingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fp.selector))
	}
}

func (fp *SetMySettingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type SetMySettingsRequest_FieldPathMap struct {
	key      string
	selector SetMySettingsRequest_FieldPathSelector
}

var _ SetMySettingsRequest_FieldPath = (*SetMySettingsRequest_FieldPathMap)(nil)

func (fpm *SetMySettingsRequest_FieldPathMap) Selector() SetMySettingsRequest_FieldPathSelector {
	return fpm.selector
}

func (fpm *SetMySettingsRequest_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *SetMySettingsRequest_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *SetMySettingsRequest_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source SetMySettingsRequest
func (fpm *SetMySettingsRequest_FieldPathMap) Get(source *SetMySettingsRequest) (values []interface{}) {
	switch fpm.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		if value, ok := source.GetSettings()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
	}
	return
}

func (fpm *SetMySettingsRequest_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*SetMySettingsRequest))
}

// GetSingle returns value by selected field map key from source SetMySettingsRequest
func (fpm *SetMySettingsRequest_FieldPathMap) GetSingle(source *SetMySettingsRequest) (interface{}, bool) {
	switch fpm.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		res, ok := source.GetSettings()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
	}
}

func (fpm *SetMySettingsRequest_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*SetMySettingsRequest))
}

// GetDefault returns a default value of the field type
func (fpm *SetMySettingsRequest_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
	}
}

func (fpm *SetMySettingsRequest_FieldPathMap) ClearValue(item *SetMySettingsRequest) {
	if item != nil {
		switch fpm.selector {
		case SetMySettingsRequest_FieldPathSelectorSettings:
			delete(item.Settings, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
		}
	}
}

func (fpm *SetMySettingsRequest_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*SetMySettingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fpm *SetMySettingsRequest_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
	}
}

func (fpm *SetMySettingsRequest_FieldPathMap) WithIValue(value interface{}) SetMySettingsRequest_FieldPathValue {
	switch fpm.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return &SetMySettingsRequest_FieldPathMapValue{SetMySettingsRequest_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
	}
}

func (fpm *SetMySettingsRequest_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *SetMySettingsRequest_FieldPathMap) WithIArrayOfValues(values interface{}) SetMySettingsRequest_FieldPathArrayOfValues {
	switch fpm.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return &SetMySettingsRequest_FieldPathMapArrayOfValues{SetMySettingsRequest_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpm.selector))
	}
}

func (fpm *SetMySettingsRequest_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *SetMySettingsRequest_FieldPathMap) WithIArrayItemValue(value interface{}) SetMySettingsRequest_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *SetMySettingsRequest_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// SetMySettingsRequest_FieldPathValue allows storing values for SetMySettingsRequest fields according to their type
type SetMySettingsRequest_FieldPathValue interface {
	SetMySettingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SetMySettingsRequest)
	CompareWith(*SetMySettingsRequest) (cmp int, comparable bool)
}

func ParseSetMySettingsRequest_FieldPathValue(pathStr, valueStr string) (SetMySettingsRequest_FieldPathValue, error) {
	fp, err := ParseSetMySettingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetMySettingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SetMySettingsRequest_FieldPathValue), nil
}

func MustParseSetMySettingsRequest_FieldPathValue(pathStr, valueStr string) SetMySettingsRequest_FieldPathValue {
	fpv, err := ParseSetMySettingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SetMySettingsRequest_FieldTerminalPathValue struct {
	SetMySettingsRequest_FieldTerminalPath
	value interface{}
}

var _ SetMySettingsRequest_FieldPathValue = (*SetMySettingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SetMySettingsRequest' as interface{}
func (fpv *SetMySettingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SetMySettingsRequest_FieldTerminalPathValue) AsSettingsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object SetMySettingsRequest
func (fpv *SetMySettingsRequest_FieldTerminalPathValue) SetTo(target **SetMySettingsRequest) {
	if *target == nil {
		*target = new(SetMySettingsRequest)
	}
	switch fpv.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		(*target).Settings = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpv.selector))
	}
}

func (fpv *SetMySettingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SetMySettingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SetMySettingsRequest_FieldTerminalPathValue' with the value under path in 'SetMySettingsRequest'.
func (fpv *SetMySettingsRequest_FieldTerminalPathValue) CompareWith(source *SetMySettingsRequest) (int, bool) {
	switch fpv.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpv.selector))
	}
}

func (fpv *SetMySettingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SetMySettingsRequest))
}

type SetMySettingsRequest_FieldPathMapValue struct {
	SetMySettingsRequest_FieldPathMap
	value interface{}
}

var _ SetMySettingsRequest_FieldPathValue = (*SetMySettingsRequest_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in SetMySettingsRequest as interface{}
func (fpmv *SetMySettingsRequest_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *SetMySettingsRequest_FieldPathMapValue) AsSettingsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in SetMySettingsRequest
func (fpmv *SetMySettingsRequest_FieldPathMapValue) SetTo(target **SetMySettingsRequest) {
	if *target == nil {
		*target = new(SetMySettingsRequest)
	}
	switch fpmv.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		if (*target).Settings == nil {
			(*target).Settings = make(map[string]string)
		}
		(*target).Settings[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpmv.selector))
	}
}

func (fpmv *SetMySettingsRequest_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SetMySettingsRequest)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SetMySettingsRequest_FieldPathMapValue' with the value under path in 'SetMySettingsRequest'.
func (fpmv *SetMySettingsRequest_FieldPathMapValue) CompareWith(source *SetMySettingsRequest) (int, bool) {
	switch fpmv.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		leftValue := fpmv.value.(string)
		rightValue := source.GetSettings()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SetMySettingsRequest: %d", fpmv.selector))
	}
}

func (fpmv *SetMySettingsRequest_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*SetMySettingsRequest))
}

// SetMySettingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SetMySettingsRequest according to their type
// Present only for array (repeated) types.
type SetMySettingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SetMySettingsRequest_FieldPath
	ContainsValue(*SetMySettingsRequest) bool
}

// ParseSetMySettingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSetMySettingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SetMySettingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSetMySettingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetMySettingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SetMySettingsRequest_FieldPathArrayItemValue), nil
}

func MustParseSetMySettingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) SetMySettingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSetMySettingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SetMySettingsRequest_FieldTerminalPathArrayItemValue struct {
	SetMySettingsRequest_FieldTerminalPath
	value interface{}
}

var _ SetMySettingsRequest_FieldPathArrayItemValue = (*SetMySettingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SetMySettingsRequest as interface{}
func (fpaiv *SetMySettingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SetMySettingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SetMySettingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SetMySettingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SetMySettingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SetMySettingsRequest'
func (fpaiv *SetMySettingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SetMySettingsRequest) bool {
	slice := fpaiv.SetMySettingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SetMySettingsRequest_FieldPathArrayOfValues allows storing slice of values for SetMySettingsRequest fields according to their type
type SetMySettingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SetMySettingsRequest_FieldPath
}

func ParseSetMySettingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SetMySettingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSetMySettingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetMySettingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SetMySettingsRequest_FieldPathArrayOfValues), nil
}

func MustParseSetMySettingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SetMySettingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSetMySettingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SetMySettingsRequest_FieldTerminalPathArrayOfValues struct {
	SetMySettingsRequest_FieldTerminalPath
	values interface{}
}

var _ SetMySettingsRequest_FieldPathArrayOfValues = (*SetMySettingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SetMySettingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SetMySettingsRequest_FieldTerminalPathArrayOfValues) AsSettingsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type SetMySettingsRequest_FieldPathMapArrayOfValues struct {
	SetMySettingsRequest_FieldPathMap
	values interface{}
}

var _ SetMySettingsRequest_FieldPathArrayOfValues = (*SetMySettingsRequest_FieldPathMapArrayOfValues)(nil)

func (fpmaov *SetMySettingsRequest_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case SetMySettingsRequest_FieldPathSelectorSettings:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *SetMySettingsRequest_FieldPathMapArrayOfValues) AsSettingsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RefreshUserFromIdTokenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RefreshUserFromIdTokenRequest_FieldPathSelector
	Get(source *RefreshUserFromIdTokenRequest) []interface{}
	GetSingle(source *RefreshUserFromIdTokenRequest) (interface{}, bool)
	ClearValue(item *RefreshUserFromIdTokenRequest)

	// Those methods build corresponding RefreshUserFromIdTokenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RefreshUserFromIdTokenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RefreshUserFromIdTokenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RefreshUserFromIdTokenRequest_FieldPathArrayItemValue
}

type RefreshUserFromIdTokenRequest_FieldPathSelector int32

const (
	RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken RefreshUserFromIdTokenRequest_FieldPathSelector = 0
)

func (s RefreshUserFromIdTokenRequest_FieldPathSelector) String() string {
	switch s {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		return "id_token"
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", s))
	}
}

func BuildRefreshUserFromIdTokenRequest_FieldPath(fp gotenobject.RawFieldPath) (RefreshUserFromIdTokenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RefreshUserFromIdTokenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "id_token", "idToken", "id-token":
			return &RefreshUserFromIdTokenRequest_FieldTerminalPath{selector: RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RefreshUserFromIdTokenRequest", fp)
}

func ParseRefreshUserFromIdTokenRequest_FieldPath(rawField string) (RefreshUserFromIdTokenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRefreshUserFromIdTokenRequest_FieldPath(fp)
}

func MustParseRefreshUserFromIdTokenRequest_FieldPath(rawField string) RefreshUserFromIdTokenRequest_FieldPath {
	fp, err := ParseRefreshUserFromIdTokenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RefreshUserFromIdTokenRequest_FieldTerminalPath struct {
	selector RefreshUserFromIdTokenRequest_FieldPathSelector
}

var _ RefreshUserFromIdTokenRequest_FieldPath = (*RefreshUserFromIdTokenRequest_FieldTerminalPath)(nil)

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) Selector() RefreshUserFromIdTokenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RefreshUserFromIdTokenRequest
func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) Get(source *RefreshUserFromIdTokenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
			values = append(values, source.IdToken)
		default:
			panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RefreshUserFromIdTokenRequest))
}

// GetSingle returns value pointed by specific field of from source RefreshUserFromIdTokenRequest
func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) GetSingle(source *RefreshUserFromIdTokenRequest) (interface{}, bool) {
	switch fp.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		return source.GetIdToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RefreshUserFromIdTokenRequest))
}

// GetDefault returns a default value of the field type
func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) ClearValue(item *RefreshUserFromIdTokenRequest) {
	if item != nil {
		switch fp.selector {
		case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
			item.IdToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
		}
	}
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RefreshUserFromIdTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) WithIValue(value interface{}) RefreshUserFromIdTokenRequest_FieldPathValue {
	switch fp.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		return &RefreshUserFromIdTokenRequest_FieldTerminalPathValue{RefreshUserFromIdTokenRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RefreshUserFromIdTokenRequest_FieldPathArrayOfValues {
	fpaov := &RefreshUserFromIdTokenRequest_FieldTerminalPathArrayOfValues{RefreshUserFromIdTokenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		return &RefreshUserFromIdTokenRequest_FieldTerminalPathArrayOfValues{RefreshUserFromIdTokenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RefreshUserFromIdTokenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RefreshUserFromIdTokenRequest_FieldPathValue allows storing values for RefreshUserFromIdTokenRequest fields according to their type
type RefreshUserFromIdTokenRequest_FieldPathValue interface {
	RefreshUserFromIdTokenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RefreshUserFromIdTokenRequest)
	CompareWith(*RefreshUserFromIdTokenRequest) (cmp int, comparable bool)
}

func ParseRefreshUserFromIdTokenRequest_FieldPathValue(pathStr, valueStr string) (RefreshUserFromIdTokenRequest_FieldPathValue, error) {
	fp, err := ParseRefreshUserFromIdTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RefreshUserFromIdTokenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RefreshUserFromIdTokenRequest_FieldPathValue), nil
}

func MustParseRefreshUserFromIdTokenRequest_FieldPathValue(pathStr, valueStr string) RefreshUserFromIdTokenRequest_FieldPathValue {
	fpv, err := ParseRefreshUserFromIdTokenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RefreshUserFromIdTokenRequest_FieldTerminalPathValue struct {
	RefreshUserFromIdTokenRequest_FieldTerminalPath
	value interface{}
}

var _ RefreshUserFromIdTokenRequest_FieldPathValue = (*RefreshUserFromIdTokenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RefreshUserFromIdTokenRequest' as interface{}
func (fpv *RefreshUserFromIdTokenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RefreshUserFromIdTokenRequest_FieldTerminalPathValue) AsIdTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object RefreshUserFromIdTokenRequest
func (fpv *RefreshUserFromIdTokenRequest_FieldTerminalPathValue) SetTo(target **RefreshUserFromIdTokenRequest) {
	if *target == nil {
		*target = new(RefreshUserFromIdTokenRequest)
	}
	switch fpv.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		(*target).IdToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fpv.selector))
	}
}

func (fpv *RefreshUserFromIdTokenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RefreshUserFromIdTokenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RefreshUserFromIdTokenRequest_FieldTerminalPathValue' with the value under path in 'RefreshUserFromIdTokenRequest'.
func (fpv *RefreshUserFromIdTokenRequest_FieldTerminalPathValue) CompareWith(source *RefreshUserFromIdTokenRequest) (int, bool) {
	switch fpv.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetIdToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenRequest: %d", fpv.selector))
	}
}

func (fpv *RefreshUserFromIdTokenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RefreshUserFromIdTokenRequest))
}

// RefreshUserFromIdTokenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RefreshUserFromIdTokenRequest according to their type
// Present only for array (repeated) types.
type RefreshUserFromIdTokenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RefreshUserFromIdTokenRequest_FieldPath
	ContainsValue(*RefreshUserFromIdTokenRequest) bool
}

// ParseRefreshUserFromIdTokenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRefreshUserFromIdTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RefreshUserFromIdTokenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRefreshUserFromIdTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RefreshUserFromIdTokenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RefreshUserFromIdTokenRequest_FieldPathArrayItemValue), nil
}

func MustParseRefreshUserFromIdTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) RefreshUserFromIdTokenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRefreshUserFromIdTokenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RefreshUserFromIdTokenRequest_FieldTerminalPathArrayItemValue struct {
	RefreshUserFromIdTokenRequest_FieldTerminalPath
	value interface{}
}

var _ RefreshUserFromIdTokenRequest_FieldPathArrayItemValue = (*RefreshUserFromIdTokenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RefreshUserFromIdTokenRequest as interface{}
func (fpaiv *RefreshUserFromIdTokenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RefreshUserFromIdTokenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RefreshUserFromIdTokenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RefreshUserFromIdTokenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RefreshUserFromIdTokenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RefreshUserFromIdTokenRequest'
func (fpaiv *RefreshUserFromIdTokenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RefreshUserFromIdTokenRequest) bool {
	slice := fpaiv.RefreshUserFromIdTokenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RefreshUserFromIdTokenRequest_FieldPathArrayOfValues allows storing slice of values for RefreshUserFromIdTokenRequest fields according to their type
type RefreshUserFromIdTokenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RefreshUserFromIdTokenRequest_FieldPath
}

func ParseRefreshUserFromIdTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RefreshUserFromIdTokenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRefreshUserFromIdTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RefreshUserFromIdTokenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RefreshUserFromIdTokenRequest_FieldPathArrayOfValues), nil
}

func MustParseRefreshUserFromIdTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RefreshUserFromIdTokenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRefreshUserFromIdTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RefreshUserFromIdTokenRequest_FieldTerminalPathArrayOfValues struct {
	RefreshUserFromIdTokenRequest_FieldTerminalPath
	values interface{}
}

var _ RefreshUserFromIdTokenRequest_FieldPathArrayOfValues = (*RefreshUserFromIdTokenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RefreshUserFromIdTokenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RefreshUserFromIdTokenRequest_FieldPathSelectorIdToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RefreshUserFromIdTokenRequest_FieldTerminalPathArrayOfValues) AsIdTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RefreshUserFromIdTokenResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RefreshUserFromIdTokenResponse_FieldPathSelector
	Get(source *RefreshUserFromIdTokenResponse) []interface{}
	GetSingle(source *RefreshUserFromIdTokenResponse) (interface{}, bool)
	ClearValue(item *RefreshUserFromIdTokenResponse)

	// Those methods build corresponding RefreshUserFromIdTokenResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RefreshUserFromIdTokenResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RefreshUserFromIdTokenResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RefreshUserFromIdTokenResponse_FieldPathArrayItemValue
}

type RefreshUserFromIdTokenResponse_FieldPathSelector int32

func (s RefreshUserFromIdTokenResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", s))
	}
}

func BuildRefreshUserFromIdTokenResponse_FieldPath(fp gotenobject.RawFieldPath) (RefreshUserFromIdTokenResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RefreshUserFromIdTokenResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RefreshUserFromIdTokenResponse", fp)
}

func ParseRefreshUserFromIdTokenResponse_FieldPath(rawField string) (RefreshUserFromIdTokenResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRefreshUserFromIdTokenResponse_FieldPath(fp)
}

func MustParseRefreshUserFromIdTokenResponse_FieldPath(rawField string) RefreshUserFromIdTokenResponse_FieldPath {
	fp, err := ParseRefreshUserFromIdTokenResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RefreshUserFromIdTokenResponse_FieldTerminalPath struct {
	selector RefreshUserFromIdTokenResponse_FieldPathSelector
}

var _ RefreshUserFromIdTokenResponse_FieldPath = (*RefreshUserFromIdTokenResponse_FieldTerminalPath)(nil)

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) Selector() RefreshUserFromIdTokenResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RefreshUserFromIdTokenResponse
func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) Get(source *RefreshUserFromIdTokenResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RefreshUserFromIdTokenResponse))
}

// GetSingle returns value pointed by specific field of from source RefreshUserFromIdTokenResponse
func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) GetSingle(source *RefreshUserFromIdTokenResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RefreshUserFromIdTokenResponse))
}

// GetDefault returns a default value of the field type
func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) ClearValue(item *RefreshUserFromIdTokenResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
		}
	}
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RefreshUserFromIdTokenResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) WithIValue(value interface{}) RefreshUserFromIdTokenResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RefreshUserFromIdTokenResponse_FieldPathArrayOfValues {
	fpaov := &RefreshUserFromIdTokenResponse_FieldTerminalPathArrayOfValues{RefreshUserFromIdTokenResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RefreshUserFromIdTokenResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fp.selector))
	}
}

func (fp *RefreshUserFromIdTokenResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RefreshUserFromIdTokenResponse_FieldPathValue allows storing values for RefreshUserFromIdTokenResponse fields according to their type
type RefreshUserFromIdTokenResponse_FieldPathValue interface {
	RefreshUserFromIdTokenResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RefreshUserFromIdTokenResponse)
	CompareWith(*RefreshUserFromIdTokenResponse) (cmp int, comparable bool)
}

func ParseRefreshUserFromIdTokenResponse_FieldPathValue(pathStr, valueStr string) (RefreshUserFromIdTokenResponse_FieldPathValue, error) {
	fp, err := ParseRefreshUserFromIdTokenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RefreshUserFromIdTokenResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RefreshUserFromIdTokenResponse_FieldPathValue), nil
}

func MustParseRefreshUserFromIdTokenResponse_FieldPathValue(pathStr, valueStr string) RefreshUserFromIdTokenResponse_FieldPathValue {
	fpv, err := ParseRefreshUserFromIdTokenResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RefreshUserFromIdTokenResponse_FieldTerminalPathValue struct {
	RefreshUserFromIdTokenResponse_FieldTerminalPath
	value interface{}
}

var _ RefreshUserFromIdTokenResponse_FieldPathValue = (*RefreshUserFromIdTokenResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RefreshUserFromIdTokenResponse' as interface{}
func (fpv *RefreshUserFromIdTokenResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object RefreshUserFromIdTokenResponse
func (fpv *RefreshUserFromIdTokenResponse_FieldTerminalPathValue) SetTo(target **RefreshUserFromIdTokenResponse) {
	if *target == nil {
		*target = new(RefreshUserFromIdTokenResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fpv.selector))
	}
}

func (fpv *RefreshUserFromIdTokenResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RefreshUserFromIdTokenResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RefreshUserFromIdTokenResponse_FieldTerminalPathValue' with the value under path in 'RefreshUserFromIdTokenResponse'.
func (fpv *RefreshUserFromIdTokenResponse_FieldTerminalPathValue) CompareWith(source *RefreshUserFromIdTokenResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RefreshUserFromIdTokenResponse: %d", fpv.selector))
	}
}

func (fpv *RefreshUserFromIdTokenResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RefreshUserFromIdTokenResponse))
}

// RefreshUserFromIdTokenResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RefreshUserFromIdTokenResponse according to their type
// Present only for array (repeated) types.
type RefreshUserFromIdTokenResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RefreshUserFromIdTokenResponse_FieldPath
	ContainsValue(*RefreshUserFromIdTokenResponse) bool
}

// ParseRefreshUserFromIdTokenResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRefreshUserFromIdTokenResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RefreshUserFromIdTokenResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRefreshUserFromIdTokenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RefreshUserFromIdTokenResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RefreshUserFromIdTokenResponse_FieldPathArrayItemValue), nil
}

func MustParseRefreshUserFromIdTokenResponse_FieldPathArrayItemValue(pathStr, valueStr string) RefreshUserFromIdTokenResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRefreshUserFromIdTokenResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RefreshUserFromIdTokenResponse_FieldTerminalPathArrayItemValue struct {
	RefreshUserFromIdTokenResponse_FieldTerminalPath
	value interface{}
}

var _ RefreshUserFromIdTokenResponse_FieldPathArrayItemValue = (*RefreshUserFromIdTokenResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RefreshUserFromIdTokenResponse as interface{}
func (fpaiv *RefreshUserFromIdTokenResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RefreshUserFromIdTokenResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RefreshUserFromIdTokenResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RefreshUserFromIdTokenResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RefreshUserFromIdTokenResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RefreshUserFromIdTokenResponse'
func (fpaiv *RefreshUserFromIdTokenResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RefreshUserFromIdTokenResponse) bool {
	slice := fpaiv.RefreshUserFromIdTokenResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RefreshUserFromIdTokenResponse_FieldPathArrayOfValues allows storing slice of values for RefreshUserFromIdTokenResponse fields according to their type
type RefreshUserFromIdTokenResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RefreshUserFromIdTokenResponse_FieldPath
}

func ParseRefreshUserFromIdTokenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RefreshUserFromIdTokenResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRefreshUserFromIdTokenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RefreshUserFromIdTokenResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RefreshUserFromIdTokenResponse_FieldPathArrayOfValues), nil
}

func MustParseRefreshUserFromIdTokenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RefreshUserFromIdTokenResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRefreshUserFromIdTokenResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RefreshUserFromIdTokenResponse_FieldTerminalPathArrayOfValues struct {
	RefreshUserFromIdTokenResponse_FieldTerminalPath
	values interface{}
}

var _ RefreshUserFromIdTokenResponse_FieldPathArrayOfValues = (*RefreshUserFromIdTokenResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RefreshUserFromIdTokenResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResendVerificationEmailRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResendVerificationEmailRequest_FieldPathSelector
	Get(source *ResendVerificationEmailRequest) []interface{}
	GetSingle(source *ResendVerificationEmailRequest) (interface{}, bool)
	ClearValue(item *ResendVerificationEmailRequest)

	// Those methods build corresponding ResendVerificationEmailRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResendVerificationEmailRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ResendVerificationEmailRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResendVerificationEmailRequest_FieldPathArrayItemValue
}

type ResendVerificationEmailRequest_FieldPathSelector int32

func (s ResendVerificationEmailRequest_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", s))
	}
}

func BuildResendVerificationEmailRequest_FieldPath(fp gotenobject.RawFieldPath) (ResendVerificationEmailRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResendVerificationEmailRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResendVerificationEmailRequest", fp)
}

func ParseResendVerificationEmailRequest_FieldPath(rawField string) (ResendVerificationEmailRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResendVerificationEmailRequest_FieldPath(fp)
}

func MustParseResendVerificationEmailRequest_FieldPath(rawField string) ResendVerificationEmailRequest_FieldPath {
	fp, err := ParseResendVerificationEmailRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResendVerificationEmailRequest_FieldTerminalPath struct {
	selector ResendVerificationEmailRequest_FieldPathSelector
}

var _ ResendVerificationEmailRequest_FieldPath = (*ResendVerificationEmailRequest_FieldTerminalPath)(nil)

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) Selector() ResendVerificationEmailRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResendVerificationEmailRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResendVerificationEmailRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResendVerificationEmailRequest
func (fp *ResendVerificationEmailRequest_FieldTerminalPath) Get(source *ResendVerificationEmailRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResendVerificationEmailRequest))
}

// GetSingle returns value pointed by specific field of from source ResendVerificationEmailRequest
func (fp *ResendVerificationEmailRequest_FieldTerminalPath) GetSingle(source *ResendVerificationEmailRequest) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
	}
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResendVerificationEmailRequest))
}

// GetDefault returns a default value of the field type
func (fp *ResendVerificationEmailRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
	}
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) ClearValue(item *ResendVerificationEmailRequest) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
		}
	}
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResendVerificationEmailRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResendVerificationEmailRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) WithIValue(value interface{}) ResendVerificationEmailRequest_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
	}
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResendVerificationEmailRequest_FieldPathArrayOfValues {
	fpaov := &ResendVerificationEmailRequest_FieldTerminalPathArrayOfValues{ResendVerificationEmailRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResendVerificationEmailRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fp.selector))
	}
}

func (fp *ResendVerificationEmailRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ResendVerificationEmailRequest_FieldPathValue allows storing values for ResendVerificationEmailRequest fields according to their type
type ResendVerificationEmailRequest_FieldPathValue interface {
	ResendVerificationEmailRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResendVerificationEmailRequest)
	CompareWith(*ResendVerificationEmailRequest) (cmp int, comparable bool)
}

func ParseResendVerificationEmailRequest_FieldPathValue(pathStr, valueStr string) (ResendVerificationEmailRequest_FieldPathValue, error) {
	fp, err := ParseResendVerificationEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResendVerificationEmailRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResendVerificationEmailRequest_FieldPathValue), nil
}

func MustParseResendVerificationEmailRequest_FieldPathValue(pathStr, valueStr string) ResendVerificationEmailRequest_FieldPathValue {
	fpv, err := ParseResendVerificationEmailRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResendVerificationEmailRequest_FieldTerminalPathValue struct {
	ResendVerificationEmailRequest_FieldTerminalPath
	value interface{}
}

var _ ResendVerificationEmailRequest_FieldPathValue = (*ResendVerificationEmailRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResendVerificationEmailRequest' as interface{}
func (fpv *ResendVerificationEmailRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object ResendVerificationEmailRequest
func (fpv *ResendVerificationEmailRequest_FieldTerminalPathValue) SetTo(target **ResendVerificationEmailRequest) {
	if *target == nil {
		*target = new(ResendVerificationEmailRequest)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fpv.selector))
	}
}

func (fpv *ResendVerificationEmailRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResendVerificationEmailRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResendVerificationEmailRequest_FieldTerminalPathValue' with the value under path in 'ResendVerificationEmailRequest'.
func (fpv *ResendVerificationEmailRequest_FieldTerminalPathValue) CompareWith(source *ResendVerificationEmailRequest) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResendVerificationEmailRequest: %d", fpv.selector))
	}
}

func (fpv *ResendVerificationEmailRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResendVerificationEmailRequest))
}

// ResendVerificationEmailRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResendVerificationEmailRequest according to their type
// Present only for array (repeated) types.
type ResendVerificationEmailRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResendVerificationEmailRequest_FieldPath
	ContainsValue(*ResendVerificationEmailRequest) bool
}

// ParseResendVerificationEmailRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResendVerificationEmailRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ResendVerificationEmailRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseResendVerificationEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResendVerificationEmailRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResendVerificationEmailRequest_FieldPathArrayItemValue), nil
}

func MustParseResendVerificationEmailRequest_FieldPathArrayItemValue(pathStr, valueStr string) ResendVerificationEmailRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseResendVerificationEmailRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResendVerificationEmailRequest_FieldTerminalPathArrayItemValue struct {
	ResendVerificationEmailRequest_FieldTerminalPath
	value interface{}
}

var _ ResendVerificationEmailRequest_FieldPathArrayItemValue = (*ResendVerificationEmailRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResendVerificationEmailRequest as interface{}
func (fpaiv *ResendVerificationEmailRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResendVerificationEmailRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ResendVerificationEmailRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResendVerificationEmailRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResendVerificationEmailRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResendVerificationEmailRequest'
func (fpaiv *ResendVerificationEmailRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ResendVerificationEmailRequest) bool {
	slice := fpaiv.ResendVerificationEmailRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ResendVerificationEmailRequest_FieldPathArrayOfValues allows storing slice of values for ResendVerificationEmailRequest fields according to their type
type ResendVerificationEmailRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResendVerificationEmailRequest_FieldPath
}

func ParseResendVerificationEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ResendVerificationEmailRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseResendVerificationEmailRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResendVerificationEmailRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResendVerificationEmailRequest_FieldPathArrayOfValues), nil
}

func MustParseResendVerificationEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ResendVerificationEmailRequest_FieldPathArrayOfValues {
	fpaov, err := ParseResendVerificationEmailRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResendVerificationEmailRequest_FieldTerminalPathArrayOfValues struct {
	ResendVerificationEmailRequest_FieldTerminalPath
	values interface{}
}

var _ ResendVerificationEmailRequest_FieldPathArrayOfValues = (*ResendVerificationEmailRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResendVerificationEmailRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResetMFAIfRecoveryKeyUsedRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResetMFAIfRecoveryKeyUsedRequest_FieldPathSelector
	Get(source *ResetMFAIfRecoveryKeyUsedRequest) []interface{}
	GetSingle(source *ResetMFAIfRecoveryKeyUsedRequest) (interface{}, bool)
	ClearValue(item *ResetMFAIfRecoveryKeyUsedRequest)

	// Those methods build corresponding ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue
}

type ResetMFAIfRecoveryKeyUsedRequest_FieldPathSelector int32

func (s ResetMFAIfRecoveryKeyUsedRequest_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", s))
	}
}

func BuildResetMFAIfRecoveryKeyUsedRequest_FieldPath(fp gotenobject.RawFieldPath) (ResetMFAIfRecoveryKeyUsedRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResetMFAIfRecoveryKeyUsedRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResetMFAIfRecoveryKeyUsedRequest", fp)
}

func ParseResetMFAIfRecoveryKeyUsedRequest_FieldPath(rawField string) (ResetMFAIfRecoveryKeyUsedRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResetMFAIfRecoveryKeyUsedRequest_FieldPath(fp)
}

func MustParseResetMFAIfRecoveryKeyUsedRequest_FieldPath(rawField string) ResetMFAIfRecoveryKeyUsedRequest_FieldPath {
	fp, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath struct {
	selector ResetMFAIfRecoveryKeyUsedRequest_FieldPathSelector
}

var _ ResetMFAIfRecoveryKeyUsedRequest_FieldPath = (*ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath)(nil)

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) Selector() ResetMFAIfRecoveryKeyUsedRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResetMFAIfRecoveryKeyUsedRequest
func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) Get(source *ResetMFAIfRecoveryKeyUsedRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResetMFAIfRecoveryKeyUsedRequest))
}

// GetSingle returns value pointed by specific field of from source ResetMFAIfRecoveryKeyUsedRequest
func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) GetSingle(source *ResetMFAIfRecoveryKeyUsedRequest) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
	}
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResetMFAIfRecoveryKeyUsedRequest))
}

// GetDefault returns a default value of the field type
func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
	}
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) ClearValue(item *ResetMFAIfRecoveryKeyUsedRequest) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
		}
	}
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResetMFAIfRecoveryKeyUsedRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) WithIValue(value interface{}) ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
	}
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues {
	fpaov := &ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayOfValues{ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fp.selector))
	}
}

func (fp *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue allows storing values for ResetMFAIfRecoveryKeyUsedRequest fields according to their type
type ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue interface {
	ResetMFAIfRecoveryKeyUsedRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResetMFAIfRecoveryKeyUsedRequest)
	CompareWith(*ResetMFAIfRecoveryKeyUsedRequest) (cmp int, comparable bool)
}

func ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathValue(pathStr, valueStr string) (ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue, error) {
	fp, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResetMFAIfRecoveryKeyUsedRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue), nil
}

func MustParseResetMFAIfRecoveryKeyUsedRequest_FieldPathValue(pathStr, valueStr string) ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue {
	fpv, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue struct {
	ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath
	value interface{}
}

var _ ResetMFAIfRecoveryKeyUsedRequest_FieldPathValue = (*ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResetMFAIfRecoveryKeyUsedRequest' as interface{}
func (fpv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object ResetMFAIfRecoveryKeyUsedRequest
func (fpv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue) SetTo(target **ResetMFAIfRecoveryKeyUsedRequest) {
	if *target == nil {
		*target = new(ResetMFAIfRecoveryKeyUsedRequest)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fpv.selector))
	}
}

func (fpv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResetMFAIfRecoveryKeyUsedRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue' with the value under path in 'ResetMFAIfRecoveryKeyUsedRequest'.
func (fpv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue) CompareWith(source *ResetMFAIfRecoveryKeyUsedRequest) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetMFAIfRecoveryKeyUsedRequest: %d", fpv.selector))
	}
}

func (fpv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResetMFAIfRecoveryKeyUsedRequest))
}

// ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResetMFAIfRecoveryKeyUsedRequest according to their type
// Present only for array (repeated) types.
type ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResetMFAIfRecoveryKeyUsedRequest_FieldPath
	ContainsValue(*ResetMFAIfRecoveryKeyUsedRequest) bool
}

// ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResetMFAIfRecoveryKeyUsedRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue), nil
}

func MustParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue(pathStr, valueStr string) ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayItemValue struct {
	ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath
	value interface{}
}

var _ ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayItemValue = (*ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResetMFAIfRecoveryKeyUsedRequest as interface{}
func (fpaiv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ResetMFAIfRecoveryKeyUsedRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResetMFAIfRecoveryKeyUsedRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResetMFAIfRecoveryKeyUsedRequest'
func (fpaiv *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ResetMFAIfRecoveryKeyUsedRequest) bool {
	slice := fpaiv.ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues allows storing slice of values for ResetMFAIfRecoveryKeyUsedRequest fields according to their type
type ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResetMFAIfRecoveryKeyUsedRequest_FieldPath
}

func ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResetMFAIfRecoveryKeyUsedRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues), nil
}

func MustParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues {
	fpaov, err := ParseResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayOfValues struct {
	ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPath
	values interface{}
}

var _ ResetMFAIfRecoveryKeyUsedRequest_FieldPathArrayOfValues = (*ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResetMFAIfRecoveryKeyUsedRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
