// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1alpha2/authorization_custom.proto
// DO NOT EDIT!!!

package authorization_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &permission.Permission{}
	_ = &role.Role{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Check contains
type Check struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Object resource name, e.g. projects/<project_id>/devices/<device_id>
	Object string `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// Array of permissions to be verified
	Permissions []*permission.Name `protobuf:"bytes,2,rep,customtype=Name,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *Check) Reset() {
	*m = Check{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Check) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Check) ProtoMessage() {}

func (m *Check) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Check) GotenMessage() {}

// Deprecated, Use Check.ProtoReflect.Descriptor instead.
func (*Check) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{0}
}

func (m *Check) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Check) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Check) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Check) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Check) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *Check) GetPermissions() []*permission.Name {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Check) SetObject(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Object", "Check"))
	}
	m.Object = fv
}

func (m *Check) SetPermissions(fv []*permission.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Permissions", "Check"))
	}
	m.Permissions = fv
}

// ConditionalGrant represents grant on repeated list of permissions if all of
// conditions is met.
type ConditionalGrant struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Permissions       []*permission.Name            `protobuf:"bytes,1,rep,customtype=Name,name=permissions,proto3" json:"permissions,omitempty"`
	ConditionBindings []*condition.ConditionBinding `protobuf:"bytes,2,rep,name=condition_bindings,json=conditionBindings,proto3" json:"condition_bindings,omitempty"`
}

func (m *ConditionalGrant) Reset() {
	*m = ConditionalGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConditionalGrant) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConditionalGrant) ProtoMessage() {}

func (m *ConditionalGrant) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConditionalGrant) GotenMessage() {}

// Deprecated, Use ConditionalGrant.ProtoReflect.Descriptor instead.
func (*ConditionalGrant) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ConditionalGrant) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConditionalGrant) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConditionalGrant) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConditionalGrant) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConditionalGrant) GetPermissions() []*permission.Name {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ConditionalGrant) GetConditionBindings() []*condition.ConditionBinding {
	if m != nil {
		return m.ConditionBindings
	}
	return nil
}

func (m *ConditionalGrant) SetPermissions(fv []*permission.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Permissions", "ConditionalGrant"))
	}
	m.Permissions = fv
}

func (m *ConditionalGrant) SetConditionBindings(fv []*condition.ConditionBinding) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionBindings", "ConditionalGrant"))
	}
	m.ConditionBindings = fv
}

type CheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Object resource name, e.g. projects/<project_id>/devices/<device_id>
	Object string `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// Granted Permissions
	GrantedPermissions              []*permission.Name  `protobuf:"bytes,2,rep,customtype=Name,name=granted_permissions,json=grantedPermissions,proto3" json:"granted_permissions,omitempty"`
	ConditionallyGrantedPermissions []*ConditionalGrant `protobuf:"bytes,3,rep,name=conditionally_granted_permissions,json=conditionallyGrantedPermissions,proto3" json:"conditionally_granted_permissions,omitempty"`
}

func (m *CheckResult) Reset() {
	*m = CheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckResult) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckResult) ProtoMessage() {}

func (m *CheckResult) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckResult) GotenMessage() {}

// Deprecated, Use CheckResult.ProtoReflect.Descriptor instead.
func (*CheckResult) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{2}
}

func (m *CheckResult) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckResult) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckResult) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckResult) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckResult) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *CheckResult) GetGrantedPermissions() []*permission.Name {
	if m != nil {
		return m.GrantedPermissions
	}
	return nil
}

func (m *CheckResult) GetConditionallyGrantedPermissions() []*ConditionalGrant {
	if m != nil {
		return m.ConditionallyGrantedPermissions
	}
	return nil
}

func (m *CheckResult) SetObject(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Object", "CheckResult"))
	}
	m.Object = fv
}

func (m *CheckResult) SetGrantedPermissions(fv []*permission.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GrantedPermissions", "CheckResult"))
	}
	m.GrantedPermissions = fv
}

func (m *CheckResult) SetConditionallyGrantedPermissions(fv []*ConditionalGrant) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionallyGrantedPermissions", "CheckResult"))
	}
	m.ConditionallyGrantedPermissions = fv
}

// Request message for method
// [CheckPermissions][ntt.iam.v1alpha2.CheckPermissions]
type CheckPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Acting principal, e.g. user or service account
	// Format of the string is one of:
	// - "allUsers" (anyone)
	// - "allAuthenticatedUsers" (anyone logged in)
	// - "user:admin.super@example.com"
	// - "serviceAccount:device_agent@watchdog.serviceaccounts.iam.edgelq.com"
	// - "group:nice.group@example.com"
	// - "domain:example.com" (anyone with exact email domain)
	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	// Checks
	Checks []*Check `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty"`
	// If true, server will skip checking permissions in cache
	SkipCache bool `protobuf:"varint,3,opt,name=skip_cache,json=skipCache,proto3" json:"skip_cache,omitempty"`
}

func (m *CheckPermissionsRequest) Reset() {
	*m = CheckPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckPermissionsRequest) ProtoMessage() {}

func (m *CheckPermissionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckPermissionsRequest) GotenMessage() {}

// Deprecated, Use CheckPermissionsRequest.ProtoReflect.Descriptor instead.
func (*CheckPermissionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{3}
}

func (m *CheckPermissionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckPermissionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckPermissionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckPermissionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckPermissionsRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *CheckPermissionsRequest) GetChecks() []*Check {
	if m != nil {
		return m.Checks
	}
	return nil
}

func (m *CheckPermissionsRequest) GetSkipCache() bool {
	if m != nil {
		return m.SkipCache
	}
	return false
}

func (m *CheckPermissionsRequest) SetMember(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Member", "CheckPermissionsRequest"))
	}
	m.Member = fv
}

func (m *CheckPermissionsRequest) SetChecks(fv []*Check) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Checks", "CheckPermissionsRequest"))
	}
	m.Checks = fv
}

func (m *CheckPermissionsRequest) SetSkipCache(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SkipCache", "CheckPermissionsRequest"))
	}
	m.SkipCache = fv
}

// Response message for method
// [CheckPermissions][ntt.iam.v1alpha2.CheckPermissions]
type CheckPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	CheckResults  []*CheckResult `protobuf:"bytes,1,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
}

func (m *CheckPermissionsResponse) Reset() {
	*m = CheckPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckPermissionsResponse) ProtoMessage() {}

func (m *CheckPermissionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckPermissionsResponse) GotenMessage() {}

// Deprecated, Use CheckPermissionsResponse.ProtoReflect.Descriptor instead.
func (*CheckPermissionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{4}
}

func (m *CheckPermissionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckPermissionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckPermissionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckPermissionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckPermissionsResponse) GetCheckResults() []*CheckResult {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *CheckPermissionsResponse) SetCheckResults(fv []*CheckResult) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CheckResults", "CheckPermissionsResponse"))
	}
	m.CheckResults = fv
}

// Request message for method
// [CheckMyPermissions][ntt.iam.v1alpha2.CheckMyPermissions]
type CheckMyPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Checks
	Checks []*Check `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty"`
	// If true, server will skip checking permissions in cache
	SkipCache bool `protobuf:"varint,3,opt,name=skip_cache,json=skipCache,proto3" json:"skip_cache,omitempty"`
}

func (m *CheckMyPermissionsRequest) Reset() {
	*m = CheckMyPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyPermissionsRequest) ProtoMessage() {}

func (m *CheckMyPermissionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyPermissionsRequest) GotenMessage() {}

// Deprecated, Use CheckMyPermissionsRequest.ProtoReflect.Descriptor instead.
func (*CheckMyPermissionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{5}
}

func (m *CheckMyPermissionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyPermissionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyPermissionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyPermissionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyPermissionsRequest) GetChecks() []*Check {
	if m != nil {
		return m.Checks
	}
	return nil
}

func (m *CheckMyPermissionsRequest) GetSkipCache() bool {
	if m != nil {
		return m.SkipCache
	}
	return false
}

func (m *CheckMyPermissionsRequest) SetChecks(fv []*Check) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Checks", "CheckMyPermissionsRequest"))
	}
	m.Checks = fv
}

func (m *CheckMyPermissionsRequest) SetSkipCache(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SkipCache", "CheckMyPermissionsRequest"))
	}
	m.SkipCache = fv
}

// Response message for method
// [CheckMyPermissions][ntt.iam.v1alpha2.CheckMyPermissions]
type CheckMyPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	CheckResults  []*CheckResult `protobuf:"bytes,1,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
}

func (m *CheckMyPermissionsResponse) Reset() {
	*m = CheckMyPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyPermissionsResponse) ProtoMessage() {}

func (m *CheckMyPermissionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyPermissionsResponse) GotenMessage() {}

// Deprecated, Use CheckMyPermissionsResponse.ProtoReflect.Descriptor instead.
func (*CheckMyPermissionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{6}
}

func (m *CheckMyPermissionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyPermissionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyPermissionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyPermissionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyPermissionsResponse) GetCheckResults() []*CheckResult {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *CheckMyPermissionsResponse) SetCheckResults(fv []*CheckResult) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CheckResults", "CheckMyPermissionsResponse"))
	}
	m.CheckResults = fv
}

// Request message for method
// [CheckMyRoles][ntt.iam.v1alpha2.CheckMyRoles]
type CheckMyRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Object name forming scope of the check, for example projects/<project_id>
	Object string `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *CheckMyRolesRequest) Reset() {
	*m = CheckMyRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyRolesRequest) ProtoMessage() {}

func (m *CheckMyRolesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyRolesRequest) GotenMessage() {}

// Deprecated, Use CheckMyRolesRequest.ProtoReflect.Descriptor instead.
func (*CheckMyRolesRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{7}
}

func (m *CheckMyRolesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyRolesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyRolesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyRolesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyRolesRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *CheckMyRolesRequest) SetObject(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Object", "CheckMyRolesRequest"))
	}
	m.Object = fv
}

// Response message for method
// [CheckMyRoles][ntt.iam.v1alpha2.CheckMyRoles]
type CheckMyRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Object with scope
	Object string `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// All unconditionally granted roles
	GrantedRoles []*role.Name `protobuf:"bytes,2,rep,customtype=Name,name=granted_roles,json=grantedRoles,proto3" json:"granted_roles,omitempty"`
	// All conditionally granted roles. Each grant should be checked separately
	ConditionallyGrantedRoles []*CheckMyRolesResponse_ConditionalGrant `protobuf:"bytes,3,rep,name=conditionally_granted_roles,json=conditionallyGrantedRoles,proto3" json:"conditionally_granted_roles,omitempty"`
}

func (m *CheckMyRolesResponse) Reset() {
	*m = CheckMyRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyRolesResponse) ProtoMessage() {}

func (m *CheckMyRolesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyRolesResponse) GotenMessage() {}

// Deprecated, Use CheckMyRolesResponse.ProtoReflect.Descriptor instead.
func (*CheckMyRolesResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{8}
}

func (m *CheckMyRolesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyRolesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyRolesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyRolesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyRolesResponse) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *CheckMyRolesResponse) GetGrantedRoles() []*role.Name {
	if m != nil {
		return m.GrantedRoles
	}
	return nil
}

func (m *CheckMyRolesResponse) GetConditionallyGrantedRoles() []*CheckMyRolesResponse_ConditionalGrant {
	if m != nil {
		return m.ConditionallyGrantedRoles
	}
	return nil
}

func (m *CheckMyRolesResponse) SetObject(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Object", "CheckMyRolesResponse"))
	}
	m.Object = fv
}

func (m *CheckMyRolesResponse) SetGrantedRoles(fv []*role.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GrantedRoles", "CheckMyRolesResponse"))
	}
	m.GrantedRoles = fv
}

func (m *CheckMyRolesResponse) SetConditionallyGrantedRoles(fv []*CheckMyRolesResponse_ConditionalGrant) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionallyGrantedRoles", "CheckMyRolesResponse"))
	}
	m.ConditionallyGrantedRoles = fv
}

type CheckMyRolesResponse_ConditionalGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Role name
	Role *role.Name `protobuf:"bytes,1,opt,customtype=Name,name=role,proto3" json:"role,omitempty"`
	// All conditions that must be accepted for role to be granted
	ConditionBindings []*condition.ConditionBinding `protobuf:"bytes,2,rep,name=condition_bindings,json=conditionBindings,proto3" json:"condition_bindings,omitempty"`
}

func (m *CheckMyRolesResponse_ConditionalGrant) Reset() {
	*m = CheckMyRolesResponse_ConditionalGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CheckMyRolesResponse_ConditionalGrant) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CheckMyRolesResponse_ConditionalGrant) ProtoMessage() {}

func (m *CheckMyRolesResponse_ConditionalGrant) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CheckMyRolesResponse_ConditionalGrant) GotenMessage() {}

// Deprecated, Use CheckMyRolesResponse_ConditionalGrant.ProtoReflect.Descriptor instead.
func (*CheckMyRolesResponse_ConditionalGrant) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP(), []int{8, 0}
}

func (m *CheckMyRolesResponse_ConditionalGrant) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CheckMyRolesResponse_ConditionalGrant) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CheckMyRolesResponse_ConditionalGrant) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CheckMyRolesResponse_ConditionalGrant) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CheckMyRolesResponse_ConditionalGrant) GetRole() *role.Name {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *CheckMyRolesResponse_ConditionalGrant) GetConditionBindings() []*condition.ConditionBinding {
	if m != nil {
		return m.ConditionBindings
	}
	return nil
}

func (m *CheckMyRolesResponse_ConditionalGrant) SetRole(fv *role.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Role", "CheckMyRolesResponse_ConditionalGrant"))
	}
	m.Role = fv
}

func (m *CheckMyRolesResponse_ConditionalGrant) SetConditionBindings(fv []*condition.ConditionBinding) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionBindings", "CheckMyRolesResponse_ConditionalGrant"))
	}
	m.ConditionBindings = fv
}

var edgelq_iam_proto_v1alpha2_authorization_custom_proto preflect.FileDescriptor

var edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDesc = []byte{
	0x0a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x05,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x21, 0xfa, 0x41, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xfa, 0x41,
	0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xda, 0x21,
	0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xe9, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xfa, 0x41, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x21, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x17,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22,
	0x5e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x71, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x60, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x41, 0x06,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0xb2, 0xda, 0x21, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x77, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x79,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x90, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x41,
	0x06, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0xb2, 0xda, 0x21, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x88, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x00, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescData = edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDesc
)

func edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescData)
	})
	return edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDescData
}

var edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var edgelq_iam_proto_v1alpha2_authorization_custom_proto_goTypes = []interface{}{
	(*Check)(nil),                                 // 0: ntt.iam.v1alpha2.Check
	(*ConditionalGrant)(nil),                      // 1: ntt.iam.v1alpha2.ConditionalGrant
	(*CheckResult)(nil),                           // 2: ntt.iam.v1alpha2.CheckResult
	(*CheckPermissionsRequest)(nil),               // 3: ntt.iam.v1alpha2.CheckPermissionsRequest
	(*CheckPermissionsResponse)(nil),              // 4: ntt.iam.v1alpha2.CheckPermissionsResponse
	(*CheckMyPermissionsRequest)(nil),             // 5: ntt.iam.v1alpha2.CheckMyPermissionsRequest
	(*CheckMyPermissionsResponse)(nil),            // 6: ntt.iam.v1alpha2.CheckMyPermissionsResponse
	(*CheckMyRolesRequest)(nil),                   // 7: ntt.iam.v1alpha2.CheckMyRolesRequest
	(*CheckMyRolesResponse)(nil),                  // 8: ntt.iam.v1alpha2.CheckMyRolesResponse
	(*CheckMyRolesResponse_ConditionalGrant)(nil), // 9: ntt.iam.v1alpha2.CheckMyRolesResponse.ConditionalGrant
	(*condition.ConditionBinding)(nil),            // 10: ntt.iam.v1alpha2.ConditionBinding
}
var edgelq_iam_proto_v1alpha2_authorization_custom_proto_depIdxs = []int32{
	10, // 0: ntt.iam.v1alpha2.ConditionalGrant.condition_bindings:type_name -> ntt.iam.v1alpha2.ConditionBinding
	1,  // 1: ntt.iam.v1alpha2.CheckResult.conditionally_granted_permissions:type_name -> ntt.iam.v1alpha2.ConditionalGrant
	0,  // 2: ntt.iam.v1alpha2.CheckPermissionsRequest.checks:type_name -> ntt.iam.v1alpha2.Check
	2,  // 3: ntt.iam.v1alpha2.CheckPermissionsResponse.check_results:type_name -> ntt.iam.v1alpha2.CheckResult
	0,  // 4: ntt.iam.v1alpha2.CheckMyPermissionsRequest.checks:type_name -> ntt.iam.v1alpha2.Check
	2,  // 5: ntt.iam.v1alpha2.CheckMyPermissionsResponse.check_results:type_name -> ntt.iam.v1alpha2.CheckResult
	9,  // 6: ntt.iam.v1alpha2.CheckMyRolesResponse.conditionally_granted_roles:type_name -> ntt.iam.v1alpha2.CheckMyRolesResponse.ConditionalGrant
	10, // 7: ntt.iam.v1alpha2.CheckMyRolesResponse.ConditionalGrant.condition_bindings:type_name -> ntt.iam.v1alpha2.ConditionBinding
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1alpha2_authorization_custom_proto_init() }
func edgelq_iam_proto_v1alpha2_authorization_custom_proto_init() {
	if edgelq_iam_proto_v1alpha2_authorization_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Check); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMyRolesResponse_ConditionalGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_iam_proto_v1alpha2_authorization_custom_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1alpha2_authorization_custom_proto_depIdxs,
		MessageInfos:      edgelq_iam_proto_v1alpha2_authorization_custom_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1alpha2_authorization_custom_proto = out.File
	edgelq_iam_proto_v1alpha2_authorization_custom_proto_rawDesc = nil
	edgelq_iam_proto_v1alpha2_authorization_custom_proto_goTypes = nil
	edgelq_iam_proto_v1alpha2_authorization_custom_proto_depIdxs = nil
}
