// Code generated by protoc-gen-goten-client
// API: AuthorizationService
// DO NOT EDIT!!!

package authorization_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &permission.Permission{}
)

var (
	descriptorsInitialized         bool
	authorizationServiceDescriptor *AuthorizationServiceDescriptor
	checkPermissionsDescriptor     *CheckPermissionsDescriptor
	checkMyPermissionsDescriptor   *CheckMyPermissionsDescriptor
)

type CheckPermissionsDescriptor struct{}

type CheckPermissionsDescriptorClientMsgHandle struct{}

type CheckPermissionsDescriptorServerMsgHandle struct{}

func (d *CheckPermissionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &CheckPermissionsRequest{}
}

func (d *CheckPermissionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &CheckPermissionsResponse{}
}

func (d *CheckPermissionsDescriptor) IsUnary() bool {
	return true
}

func (d *CheckPermissionsDescriptor) IsClientStream() bool {
	return false
}

func (d *CheckPermissionsDescriptor) IsServerStream() bool {
	return false
}

func (d *CheckPermissionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CheckPermissionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *CheckPermissionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CheckPermissionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *CheckPermissionsDescriptor) GetVerb() string {
	return "check"
}

func (d *CheckPermissionsDescriptor) GetMethodName() string {
	return "CheckPermissions"
}

func (d *CheckPermissionsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.AuthorizationService/CheckPermissions"
}

func (d *CheckPermissionsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CheckPermissionsDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *CheckPermissionsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CheckPermissionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CheckPermissionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return authorizationServiceDescriptor
}

func (d *CheckPermissionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return permission.GetDescriptor()
}

func (d *CheckPermissionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CheckPermissionsDescriptorClientMsgHandle{}
}

func (d *CheckPermissionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CheckPermissionsDescriptorServerMsgHandle{}
}

func (h *CheckPermissionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckPermissionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CheckPermissionsRequest) *permission.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *CheckPermissionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CheckPermissionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CheckPermissionsRequest) []*permission.Name
	})
	if ok {
		return permission.PermissionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CheckPermissionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CheckPermissionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckPermissionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CheckPermissionsResponse) *permission.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *CheckPermissionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CheckPermissionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CheckPermissionsResponse) []*permission.Name
	})
	if ok {
		return permission.PermissionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CheckPermissionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCheckPermissionsDescriptor() *CheckPermissionsDescriptor {
	return checkPermissionsDescriptor
}

type CheckMyPermissionsDescriptor struct{}

type CheckMyPermissionsDescriptorClientMsgHandle struct{}

type CheckMyPermissionsDescriptorServerMsgHandle struct{}

func (d *CheckMyPermissionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &CheckMyPermissionsRequest{}
}

func (d *CheckMyPermissionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &CheckMyPermissionsResponse{}
}

func (d *CheckMyPermissionsDescriptor) IsUnary() bool {
	return true
}

func (d *CheckMyPermissionsDescriptor) IsClientStream() bool {
	return false
}

func (d *CheckMyPermissionsDescriptor) IsServerStream() bool {
	return false
}

func (d *CheckMyPermissionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CheckMyPermissionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *CheckMyPermissionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CheckMyPermissionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *CheckMyPermissionsDescriptor) GetVerb() string {
	return "checkMy"
}

func (d *CheckMyPermissionsDescriptor) GetMethodName() string {
	return "CheckMyPermissions"
}

func (d *CheckMyPermissionsDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.AuthorizationService/CheckMyPermissions"
}

func (d *CheckMyPermissionsDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *CheckMyPermissionsDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *CheckMyPermissionsDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *CheckMyPermissionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CheckMyPermissionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return authorizationServiceDescriptor
}

func (d *CheckMyPermissionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return permission.GetDescriptor()
}

func (d *CheckMyPermissionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CheckMyPermissionsDescriptorClientMsgHandle{}
}

func (d *CheckMyPermissionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CheckMyPermissionsDescriptorServerMsgHandle{}
}

func (h *CheckMyPermissionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckMyPermissionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CheckMyPermissionsRequest) *permission.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *CheckMyPermissionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CheckMyPermissionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CheckMyPermissionsRequest) []*permission.Name
	})
	if ok {
		return permission.PermissionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CheckMyPermissionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CheckMyPermissionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CheckMyPermissionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CheckMyPermissionsResponse) *permission.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *CheckMyPermissionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CheckMyPermissionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CheckMyPermissionsResponse) []*permission.Name
	})
	if ok {
		return permission.PermissionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CheckMyPermissionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCheckMyPermissionsDescriptor() *CheckMyPermissionsDescriptor {
	return checkMyPermissionsDescriptor
}

type AuthorizationServiceDescriptor struct{}

func (d *AuthorizationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		checkPermissionsDescriptor,
		checkMyPermissionsDescriptor,
	}
}

func (d *AuthorizationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.AuthorizationService"
}

func (d *AuthorizationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *AuthorizationServiceDescriptor) GetApiName() string {
	return "AuthorizationService"
}

func (d *AuthorizationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *AuthorizationServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetAuthorizationServiceDescriptor() *AuthorizationServiceDescriptor {
	return authorizationServiceDescriptor
}

func initDescriptors() {
	authorizationServiceDescriptor = &AuthorizationServiceDescriptor{}
	checkPermissionsDescriptor = &CheckPermissionsDescriptor{}
	checkMyPermissionsDescriptor = &CheckMyPermissionsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(authorizationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(checkPermissionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(checkMyPermissionsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
