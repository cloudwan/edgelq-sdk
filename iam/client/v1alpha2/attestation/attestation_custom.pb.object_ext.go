// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_custom.proto
// DO NOT EDIT!!!

package attestation_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &iam_common.Actor{}
)

func (o *VerifyRequest) GotenObjectExt() {}

func (o *VerifyRequest) MakeFullFieldMask() *VerifyRequest_FieldMask {
	return FullVerifyRequest_FieldMask()
}

func (o *VerifyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyRequest_FieldMask()
}

func (o *VerifyRequest) MakeDiffFieldMask(other *VerifyRequest) *VerifyRequest_FieldMask {
	if o == nil && other == nil {
		return &VerifyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyRequest_FieldMask()
	}

	res := &VerifyRequest_FieldMask{}
	{
		subMask := o.GetAskForChallenge().MakeDiffFieldMask(other.GetAskForChallenge())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &VerifyRequest_FieldTerminalPath{selector: VerifyRequest_FieldPathSelectorAskForChallenge})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &VerifyRequest_FieldSubPath{selector: VerifyRequest_FieldPathSelectorAskForChallenge, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetChallengeResponse().MakeDiffFieldMask(other.GetChallengeResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &VerifyRequest_FieldTerminalPath{selector: VerifyRequest_FieldPathSelectorChallengeResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &VerifyRequest_FieldSubPath{selector: VerifyRequest_FieldPathSelectorChallengeResponse, subPath: subpath})
			}
		}
	}
	return res
}

func (o *VerifyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyRequest))
}

func (o *VerifyRequest) Clone() *VerifyRequest {
	if o == nil {
		return nil
	}
	result := &VerifyRequest{}
	if o, ok := o.Msg.(*VerifyRequest_AskForChallenge_); ok {
		result.Msg = (*VerifyRequest_AskForChallenge_)(nil)
		if o != nil {
			result.Msg = &VerifyRequest_AskForChallenge_{}
			result := result.Msg.(*VerifyRequest_AskForChallenge_)
			result.AskForChallenge = o.AskForChallenge.Clone()
		}
	}
	if o, ok := o.Msg.(*VerifyRequest_ChallengeResponse_); ok {
		result.Msg = (*VerifyRequest_ChallengeResponse_)(nil)
		if o != nil {
			result.Msg = &VerifyRequest_ChallengeResponse_{}
			result := result.Msg.(*VerifyRequest_ChallengeResponse_)
			result.ChallengeResponse = o.ChallengeResponse.Clone()
		}
	}
	return result
}

func (o *VerifyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyRequest) Merge(source *VerifyRequest) {
	if source, ok := source.GetMsg().(*VerifyRequest_AskForChallenge_); ok {
		if dstOneOf, ok := o.Msg.(*VerifyRequest_AskForChallenge_); !ok || dstOneOf == nil {
			o.Msg = &VerifyRequest_AskForChallenge_{}
		}
		if source != nil {
			o := o.Msg.(*VerifyRequest_AskForChallenge_)
			if source.AskForChallenge != nil {
				if o.AskForChallenge == nil {
					o.AskForChallenge = new(VerifyRequest_AskForChallenge)
				}
				o.AskForChallenge.Merge(source.AskForChallenge)
			}
		}
	}
	if source, ok := source.GetMsg().(*VerifyRequest_ChallengeResponse_); ok {
		if dstOneOf, ok := o.Msg.(*VerifyRequest_ChallengeResponse_); !ok || dstOneOf == nil {
			o.Msg = &VerifyRequest_ChallengeResponse_{}
		}
		if source != nil {
			o := o.Msg.(*VerifyRequest_ChallengeResponse_)
			if source.ChallengeResponse != nil {
				if o.ChallengeResponse == nil {
					o.ChallengeResponse = new(VerifyRequest_ChallengeResponse)
				}
				o.ChallengeResponse.Merge(source.ChallengeResponse)
			}
		}
	}
}

func (o *VerifyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyRequest))
}

func (o *VerifyRequest_AskForChallenge) GotenObjectExt() {}

func (o *VerifyRequest_AskForChallenge) MakeFullFieldMask() *VerifyRequest_AskForChallenge_FieldMask {
	return FullVerifyRequest_AskForChallenge_FieldMask()
}

func (o *VerifyRequest_AskForChallenge) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyRequest_AskForChallenge_FieldMask()
}

func (o *VerifyRequest_AskForChallenge) MakeDiffFieldMask(other *VerifyRequest_AskForChallenge) *VerifyRequest_AskForChallenge_FieldMask {
	if o == nil && other == nil {
		return &VerifyRequest_AskForChallenge_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyRequest_AskForChallenge_FieldMask()
	}

	res := &VerifyRequest_AskForChallenge_FieldMask{}
	if o.GetSubject() != other.GetSubject() {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorSubject})
	}
	if o.GetAttestationDomain().String() != other.GetAttestationDomain().String() {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain})
	}
	if o.GetTpmVersion() != other.GetTpmVersion() {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion})
	}
	if string(o.GetEkpub()) != string(other.GetEkpub()) {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkpub})
	}
	if string(o.GetEkcert()) != string(other.GetEkcert()) {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkcert})
	}
	if o.GetEkcerturl() != other.GetEkcerturl() {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl})
	}
	if string(o.GetAkpub()) != string(other.GetAkpub()) {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAkpub})
	}
	if string(o.GetCreationData()) != string(other.GetCreationData()) {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorCreationData})
	}
	if string(o.GetAttest()) != string(other.GetAttest()) {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAttest})
	}
	if string(o.GetSignature()) != string(other.GetSignature()) {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorSignature})
	}
	if o.GetChallengeFormat() != other.GetChallengeFormat() {
		res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat})
	}
	return res
}

func (o *VerifyRequest_AskForChallenge) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyRequest_AskForChallenge))
}

func (o *VerifyRequest_AskForChallenge) Clone() *VerifyRequest_AskForChallenge {
	if o == nil {
		return nil
	}
	result := &VerifyRequest_AskForChallenge{}
	result.Subject = o.Subject
	if o.AttestationDomain == nil {
		result.AttestationDomain = nil
	} else if data, err := o.AttestationDomain.ProtoString(); err != nil {
		panic(err)
	} else {
		result.AttestationDomain = &attestation_domain.Reference{}
		if err := result.AttestationDomain.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.TpmVersion = o.TpmVersion
	result.Ekpub = make([]byte, len(o.Ekpub))
	for i, bt := range o.Ekpub {
		result.Ekpub[i] = bt
	}
	result.Ekcert = make([]byte, len(o.Ekcert))
	for i, bt := range o.Ekcert {
		result.Ekcert[i] = bt
	}
	result.Ekcerturl = o.Ekcerturl
	result.Akpub = make([]byte, len(o.Akpub))
	for i, bt := range o.Akpub {
		result.Akpub[i] = bt
	}
	result.CreationData = make([]byte, len(o.CreationData))
	for i, bt := range o.CreationData {
		result.CreationData[i] = bt
	}
	result.Attest = make([]byte, len(o.Attest))
	for i, bt := range o.Attest {
		result.Attest[i] = bt
	}
	result.Signature = make([]byte, len(o.Signature))
	for i, bt := range o.Signature {
		result.Signature[i] = bt
	}
	result.ChallengeFormat = o.ChallengeFormat
	return result
}

func (o *VerifyRequest_AskForChallenge) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyRequest_AskForChallenge) Merge(source *VerifyRequest_AskForChallenge) {
	o.Subject = source.GetSubject()
	if source.GetAttestationDomain() != nil {
		if data, err := source.GetAttestationDomain().ProtoString(); err != nil {
			panic(err)
		} else {
			o.AttestationDomain = &attestation_domain.Reference{}
			if err := o.AttestationDomain.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.AttestationDomain = nil
	}
	o.TpmVersion = source.GetTpmVersion()
	o.Ekpub = make([]byte, len(source.GetEkpub()))
	for i, bt := range source.GetEkpub() {
		o.Ekpub[i] = bt
	}
	o.Ekcert = make([]byte, len(source.GetEkcert()))
	for i, bt := range source.GetEkcert() {
		o.Ekcert[i] = bt
	}
	o.Ekcerturl = source.GetEkcerturl()
	o.Akpub = make([]byte, len(source.GetAkpub()))
	for i, bt := range source.GetAkpub() {
		o.Akpub[i] = bt
	}
	o.CreationData = make([]byte, len(source.GetCreationData()))
	for i, bt := range source.GetCreationData() {
		o.CreationData[i] = bt
	}
	o.Attest = make([]byte, len(source.GetAttest()))
	for i, bt := range source.GetAttest() {
		o.Attest[i] = bt
	}
	o.Signature = make([]byte, len(source.GetSignature()))
	for i, bt := range source.GetSignature() {
		o.Signature[i] = bt
	}
	o.ChallengeFormat = source.GetChallengeFormat()
}

func (o *VerifyRequest_AskForChallenge) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyRequest_AskForChallenge))
}

func (o *VerifyRequest_ChallengeResponse) GotenObjectExt() {}

func (o *VerifyRequest_ChallengeResponse) MakeFullFieldMask() *VerifyRequest_ChallengeResponse_FieldMask {
	return FullVerifyRequest_ChallengeResponse_FieldMask()
}

func (o *VerifyRequest_ChallengeResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyRequest_ChallengeResponse_FieldMask()
}

func (o *VerifyRequest_ChallengeResponse) MakeDiffFieldMask(other *VerifyRequest_ChallengeResponse) *VerifyRequest_ChallengeResponse_FieldMask {
	if o == nil && other == nil {
		return &VerifyRequest_ChallengeResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyRequest_ChallengeResponse_FieldMask()
	}

	res := &VerifyRequest_ChallengeResponse_FieldMask{}
	if string(o.GetAkActivationDecryptedSecret()) != string(other.GetAkActivationDecryptedSecret()) {
		res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret})
	}

	if len(o.GetQuotes()) == len(other.GetQuotes()) {
		for i, lValue := range o.GetQuotes() {
			rValue := other.GetQuotes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorQuotes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorQuotes})
	}

	if len(o.GetPcrs()) == len(other.GetPcrs()) {
		for i, lValue := range o.GetPcrs() {
			rValue := other.GetPcrs()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorPcrs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorPcrs})
	}
	if string(o.GetEventlog()) != string(other.GetEventlog()) {
		res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorEventlog})
	}
	return res
}

func (o *VerifyRequest_ChallengeResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyRequest_ChallengeResponse))
}

func (o *VerifyRequest_ChallengeResponse) Clone() *VerifyRequest_ChallengeResponse {
	if o == nil {
		return nil
	}
	result := &VerifyRequest_ChallengeResponse{}
	result.AkActivationDecryptedSecret = make([]byte, len(o.AkActivationDecryptedSecret))
	for i, bt := range o.AkActivationDecryptedSecret {
		result.AkActivationDecryptedSecret[i] = bt
	}
	result.Quotes = make([]*VerifyRequest_ChallengeResponse_Quote, len(o.Quotes))
	for i, sourceValue := range o.Quotes {
		result.Quotes[i] = sourceValue.Clone()
	}
	result.Pcrs = make([]*iam_common.PCR, len(o.Pcrs))
	for i, sourceValue := range o.Pcrs {
		result.Pcrs[i] = sourceValue.Clone()
	}
	result.Eventlog = make([]byte, len(o.Eventlog))
	for i, bt := range o.Eventlog {
		result.Eventlog[i] = bt
	}
	return result
}

func (o *VerifyRequest_ChallengeResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyRequest_ChallengeResponse) Merge(source *VerifyRequest_ChallengeResponse) {
	o.AkActivationDecryptedSecret = make([]byte, len(source.GetAkActivationDecryptedSecret()))
	for i, bt := range source.GetAkActivationDecryptedSecret() {
		o.AkActivationDecryptedSecret[i] = bt
	}
	for _, sourceValue := range source.GetQuotes() {
		exists := false
		for _, currentValue := range o.Quotes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *VerifyRequest_ChallengeResponse_Quote
			if sourceValue != nil {
				newDstElement = new(VerifyRequest_ChallengeResponse_Quote)
				newDstElement.Merge(sourceValue)
			}
			o.Quotes = append(o.Quotes, newDstElement)
		}
	}

	for _, sourceValue := range source.GetPcrs() {
		exists := false
		for _, currentValue := range o.Pcrs {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *iam_common.PCR
			if sourceValue != nil {
				newDstElement = new(iam_common.PCR)
				newDstElement.Merge(sourceValue)
			}
			o.Pcrs = append(o.Pcrs, newDstElement)
		}
	}

	o.Eventlog = make([]byte, len(source.GetEventlog()))
	for i, bt := range source.GetEventlog() {
		o.Eventlog[i] = bt
	}
}

func (o *VerifyRequest_ChallengeResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyRequest_ChallengeResponse))
}

func (o *VerifyRequest_ChallengeResponse_Quote) GotenObjectExt() {}

func (o *VerifyRequest_ChallengeResponse_Quote) MakeFullFieldMask() *VerifyRequest_ChallengeResponse_Quote_FieldMask {
	return FullVerifyRequest_ChallengeResponse_Quote_FieldMask()
}

func (o *VerifyRequest_ChallengeResponse_Quote) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyRequest_ChallengeResponse_Quote_FieldMask()
}

func (o *VerifyRequest_ChallengeResponse_Quote) MakeDiffFieldMask(other *VerifyRequest_ChallengeResponse_Quote) *VerifyRequest_ChallengeResponse_Quote_FieldMask {
	if o == nil && other == nil {
		return &VerifyRequest_ChallengeResponse_Quote_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyRequest_ChallengeResponse_Quote_FieldMask()
	}

	res := &VerifyRequest_ChallengeResponse_Quote_FieldMask{}
	if string(o.GetQuote()) != string(other.GetQuote()) {
		res.Paths = append(res.Paths, &VerifyRequestChallengeResponseQuote_FieldTerminalPath{selector: VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote})
	}
	if string(o.GetSignature()) != string(other.GetSignature()) {
		res.Paths = append(res.Paths, &VerifyRequestChallengeResponseQuote_FieldTerminalPath{selector: VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature})
	}
	return res
}

func (o *VerifyRequest_ChallengeResponse_Quote) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyRequest_ChallengeResponse_Quote))
}

func (o *VerifyRequest_ChallengeResponse_Quote) Clone() *VerifyRequest_ChallengeResponse_Quote {
	if o == nil {
		return nil
	}
	result := &VerifyRequest_ChallengeResponse_Quote{}
	result.Quote = make([]byte, len(o.Quote))
	for i, bt := range o.Quote {
		result.Quote[i] = bt
	}
	result.Signature = make([]byte, len(o.Signature))
	for i, bt := range o.Signature {
		result.Signature[i] = bt
	}
	return result
}

func (o *VerifyRequest_ChallengeResponse_Quote) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyRequest_ChallengeResponse_Quote) Merge(source *VerifyRequest_ChallengeResponse_Quote) {
	o.Quote = make([]byte, len(source.GetQuote()))
	for i, bt := range source.GetQuote() {
		o.Quote[i] = bt
	}
	o.Signature = make([]byte, len(source.GetSignature()))
	for i, bt := range source.GetSignature() {
		o.Signature[i] = bt
	}
}

func (o *VerifyRequest_ChallengeResponse_Quote) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyRequest_ChallengeResponse_Quote))
}

func (o *VerifyResponse) GotenObjectExt() {}

func (o *VerifyResponse) MakeFullFieldMask() *VerifyResponse_FieldMask {
	return FullVerifyResponse_FieldMask()
}

func (o *VerifyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyResponse_FieldMask()
}

func (o *VerifyResponse) MakeDiffFieldMask(other *VerifyResponse) *VerifyResponse_FieldMask {
	if o == nil && other == nil {
		return &VerifyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyResponse_FieldMask()
	}

	res := &VerifyResponse_FieldMask{}
	{
		subMask := o.GetChallenge().MakeDiffFieldMask(other.GetChallenge())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &VerifyResponse_FieldTerminalPath{selector: VerifyResponse_FieldPathSelectorChallenge})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &VerifyResponse_FieldSubPath{selector: VerifyResponse_FieldPathSelectorChallenge, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAttestationSuccessful().MakeDiffFieldMask(other.GetAttestationSuccessful())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &VerifyResponse_FieldTerminalPath{selector: VerifyResponse_FieldPathSelectorAttestationSuccessful})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &VerifyResponse_FieldSubPath{selector: VerifyResponse_FieldPathSelectorAttestationSuccessful, subPath: subpath})
			}
		}
	}
	return res
}

func (o *VerifyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyResponse))
}

func (o *VerifyResponse) Clone() *VerifyResponse {
	if o == nil {
		return nil
	}
	result := &VerifyResponse{}
	if o, ok := o.Msg.(*VerifyResponse_Challenge_); ok {
		result.Msg = (*VerifyResponse_Challenge_)(nil)
		if o != nil {
			result.Msg = &VerifyResponse_Challenge_{}
			result := result.Msg.(*VerifyResponse_Challenge_)
			result.Challenge = o.Challenge.Clone()
		}
	}
	if o, ok := o.Msg.(*VerifyResponse_AttestationSuccessful_); ok {
		result.Msg = (*VerifyResponse_AttestationSuccessful_)(nil)
		if o != nil {
			result.Msg = &VerifyResponse_AttestationSuccessful_{}
			result := result.Msg.(*VerifyResponse_AttestationSuccessful_)
			result.AttestationSuccessful = o.AttestationSuccessful.Clone()
		}
	}
	return result
}

func (o *VerifyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyResponse) Merge(source *VerifyResponse) {
	if source, ok := source.GetMsg().(*VerifyResponse_Challenge_); ok {
		if dstOneOf, ok := o.Msg.(*VerifyResponse_Challenge_); !ok || dstOneOf == nil {
			o.Msg = &VerifyResponse_Challenge_{}
		}
		if source != nil {
			o := o.Msg.(*VerifyResponse_Challenge_)
			if source.Challenge != nil {
				if o.Challenge == nil {
					o.Challenge = new(VerifyResponse_Challenge)
				}
				o.Challenge.Merge(source.Challenge)
			}
		}
	}
	if source, ok := source.GetMsg().(*VerifyResponse_AttestationSuccessful_); ok {
		if dstOneOf, ok := o.Msg.(*VerifyResponse_AttestationSuccessful_); !ok || dstOneOf == nil {
			o.Msg = &VerifyResponse_AttestationSuccessful_{}
		}
		if source != nil {
			o := o.Msg.(*VerifyResponse_AttestationSuccessful_)
			if source.AttestationSuccessful != nil {
				if o.AttestationSuccessful == nil {
					o.AttestationSuccessful = new(VerifyResponse_AttestationSuccessful)
				}
				o.AttestationSuccessful.Merge(source.AttestationSuccessful)
			}
		}
	}
}

func (o *VerifyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyResponse))
}

func (o *VerifyResponse_Challenge) GotenObjectExt() {}

func (o *VerifyResponse_Challenge) MakeFullFieldMask() *VerifyResponse_Challenge_FieldMask {
	return FullVerifyResponse_Challenge_FieldMask()
}

func (o *VerifyResponse_Challenge) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyResponse_Challenge_FieldMask()
}

func (o *VerifyResponse_Challenge) MakeDiffFieldMask(other *VerifyResponse_Challenge) *VerifyResponse_Challenge_FieldMask {
	if o == nil && other == nil {
		return &VerifyResponse_Challenge_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyResponse_Challenge_FieldMask()
	}

	res := &VerifyResponse_Challenge_FieldMask{}
	if string(o.GetPlatformAttestationNonce()) != string(other.GetPlatformAttestationNonce()) {
		res.Paths = append(res.Paths, &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce})
	}
	if string(o.GetCredEncryptedByEkpub()) != string(other.GetCredEncryptedByEkpub()) {
		res.Paths = append(res.Paths, &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub})
	}
	if string(o.GetSecretEncryptedByCred()) != string(other.GetSecretEncryptedByCred()) {
		res.Paths = append(res.Paths, &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred})
	}
	return res
}

func (o *VerifyResponse_Challenge) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyResponse_Challenge))
}

func (o *VerifyResponse_Challenge) Clone() *VerifyResponse_Challenge {
	if o == nil {
		return nil
	}
	result := &VerifyResponse_Challenge{}
	result.PlatformAttestationNonce = make([]byte, len(o.PlatformAttestationNonce))
	for i, bt := range o.PlatformAttestationNonce {
		result.PlatformAttestationNonce[i] = bt
	}
	result.CredEncryptedByEkpub = make([]byte, len(o.CredEncryptedByEkpub))
	for i, bt := range o.CredEncryptedByEkpub {
		result.CredEncryptedByEkpub[i] = bt
	}
	result.SecretEncryptedByCred = make([]byte, len(o.SecretEncryptedByCred))
	for i, bt := range o.SecretEncryptedByCred {
		result.SecretEncryptedByCred[i] = bt
	}
	return result
}

func (o *VerifyResponse_Challenge) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyResponse_Challenge) Merge(source *VerifyResponse_Challenge) {
	o.PlatformAttestationNonce = make([]byte, len(source.GetPlatformAttestationNonce()))
	for i, bt := range source.GetPlatformAttestationNonce() {
		o.PlatformAttestationNonce[i] = bt
	}
	o.CredEncryptedByEkpub = make([]byte, len(source.GetCredEncryptedByEkpub()))
	for i, bt := range source.GetCredEncryptedByEkpub() {
		o.CredEncryptedByEkpub[i] = bt
	}
	o.SecretEncryptedByCred = make([]byte, len(source.GetSecretEncryptedByCred()))
	for i, bt := range source.GetSecretEncryptedByCred() {
		o.SecretEncryptedByCred[i] = bt
	}
}

func (o *VerifyResponse_Challenge) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyResponse_Challenge))
}

func (o *VerifyResponse_AttestationSuccessful) GotenObjectExt() {}

func (o *VerifyResponse_AttestationSuccessful) MakeFullFieldMask() *VerifyResponse_AttestationSuccessful_FieldMask {
	return FullVerifyResponse_AttestationSuccessful_FieldMask()
}

func (o *VerifyResponse_AttestationSuccessful) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVerifyResponse_AttestationSuccessful_FieldMask()
}

func (o *VerifyResponse_AttestationSuccessful) MakeDiffFieldMask(other *VerifyResponse_AttestationSuccessful) *VerifyResponse_AttestationSuccessful_FieldMask {
	if o == nil && other == nil {
		return &VerifyResponse_AttestationSuccessful_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVerifyResponse_AttestationSuccessful_FieldMask()
	}

	res := &VerifyResponse_AttestationSuccessful_FieldMask{}
	if o.GetAttestationToken() != other.GetAttestationToken() {
		res.Paths = append(res.Paths, &VerifyResponseAttestationSuccessful_FieldTerminalPath{selector: VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken})
	}
	return res
}

func (o *VerifyResponse_AttestationSuccessful) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VerifyResponse_AttestationSuccessful))
}

func (o *VerifyResponse_AttestationSuccessful) Clone() *VerifyResponse_AttestationSuccessful {
	if o == nil {
		return nil
	}
	result := &VerifyResponse_AttestationSuccessful{}
	result.AttestationToken = o.AttestationToken
	return result
}

func (o *VerifyResponse_AttestationSuccessful) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VerifyResponse_AttestationSuccessful) Merge(source *VerifyResponse_AttestationSuccessful) {
	o.AttestationToken = source.GetAttestationToken()
}

func (o *VerifyResponse_AttestationSuccessful) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VerifyResponse_AttestationSuccessful))
}
