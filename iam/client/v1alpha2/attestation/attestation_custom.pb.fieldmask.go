// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_custom.proto
// DO NOT EDIT!!!

package attestation_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &iam_common.Actor{}
)

type VerifyRequest_FieldMask struct {
	Paths []VerifyRequest_FieldPath
}

func FullVerifyRequest_FieldMask() *VerifyRequest_FieldMask {
	res := &VerifyRequest_FieldMask{}
	res.Paths = append(res.Paths, &VerifyRequest_FieldTerminalPath{selector: VerifyRequest_FieldPathSelectorAskForChallenge})
	res.Paths = append(res.Paths, &VerifyRequest_FieldTerminalPath{selector: VerifyRequest_FieldPathSelectorChallengeResponse})
	return res
}

func (fieldMask *VerifyRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyRequest_FieldPath(raw)
	})
}

func (fieldMask *VerifyRequest_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyRequest_FieldMask) Subtract(other *VerifyRequest_FieldMask) *VerifyRequest_FieldMask {
	result := &VerifyRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[VerifyRequest_FieldPathSelector]gotenobject.FieldMask{
		VerifyRequest_FieldPathSelectorAskForChallenge:   &VerifyRequest_AskForChallenge_FieldMask{},
		VerifyRequest_FieldPathSelectorChallengeResponse: &VerifyRequest_ChallengeResponse_FieldMask{},
	}
	mySubMasks := map[VerifyRequest_FieldPathSelector]gotenobject.FieldMask{
		VerifyRequest_FieldPathSelectorAskForChallenge:   &VerifyRequest_AskForChallenge_FieldMask{},
		VerifyRequest_FieldPathSelectorChallengeResponse: &VerifyRequest_ChallengeResponse_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VerifyRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VerifyRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case VerifyRequest_FieldPathSelectorAskForChallenge:
						mySubMasks[VerifyRequest_FieldPathSelectorAskForChallenge] = FullVerifyRequest_AskForChallenge_FieldMask()
					case VerifyRequest_FieldPathSelectorChallengeResponse:
						mySubMasks[VerifyRequest_FieldPathSelectorChallengeResponse] = FullVerifyRequest_ChallengeResponse_FieldMask()
					}
				} else if tp, ok := path.(*VerifyRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VerifyRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyRequest_FieldMask) FilterInputFields() *VerifyRequest_FieldMask {
	result := &VerifyRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_FieldMask) AppendPath(path VerifyRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyRequest_FieldPath))
}

func (fieldMask *VerifyRequest_FieldMask) GetPaths() []VerifyRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyRequest_FieldMask) Set(target, source *VerifyRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyRequest), source.(*VerifyRequest))
}

func (fieldMask *VerifyRequest_FieldMask) Project(source *VerifyRequest) *VerifyRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyRequest{}
	askForChallengeMask := &VerifyRequest_AskForChallenge_FieldMask{}
	wholeAskForChallengeAccepted := false
	challengeResponseMask := &VerifyRequest_ChallengeResponse_FieldMask{}
	wholeChallengeResponseAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyRequest_FieldTerminalPath:
			switch tp.selector {
			case VerifyRequest_FieldPathSelectorAskForChallenge:
				if source, ok := source.Msg.(*VerifyRequest_AskForChallenge_); ok {
					result.Msg = &VerifyRequest_AskForChallenge_{
						AskForChallenge: source.AskForChallenge,
					}
				}
				wholeAskForChallengeAccepted = true
			case VerifyRequest_FieldPathSelectorChallengeResponse:
				if source, ok := source.Msg.(*VerifyRequest_ChallengeResponse_); ok {
					result.Msg = &VerifyRequest_ChallengeResponse_{
						ChallengeResponse: source.ChallengeResponse,
					}
				}
				wholeChallengeResponseAccepted = true
			}
		case *VerifyRequest_FieldSubPath:
			switch tp.selector {
			case VerifyRequest_FieldPathSelectorAskForChallenge:
				askForChallengeMask.AppendPath(tp.subPath.(VerifyRequestAskForChallenge_FieldPath))
			case VerifyRequest_FieldPathSelectorChallengeResponse:
				challengeResponseMask.AppendPath(tp.subPath.(VerifyRequestChallengeResponse_FieldPath))
			}
		}
	}
	if wholeAskForChallengeAccepted == false && len(askForChallengeMask.Paths) > 0 {
		if asOneOf, ok := source.Msg.(*VerifyRequest_AskForChallenge_); ok {
			result.Msg = (*VerifyRequest_AskForChallenge_)(nil)
			if asOneOf != nil {
				oneOfRes := &VerifyRequest_AskForChallenge_{}
				oneOfRes.AskForChallenge = askForChallengeMask.Project(asOneOf.AskForChallenge)
				result.Msg = oneOfRes
			}
		}
	}
	if wholeChallengeResponseAccepted == false && len(challengeResponseMask.Paths) > 0 {
		if asOneOf, ok := source.Msg.(*VerifyRequest_ChallengeResponse_); ok {
			result.Msg = (*VerifyRequest_ChallengeResponse_)(nil)
			if asOneOf != nil {
				oneOfRes := &VerifyRequest_ChallengeResponse_{}
				oneOfRes.ChallengeResponse = challengeResponseMask.Project(asOneOf.ChallengeResponse)
				result.Msg = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *VerifyRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyRequest))
}

func (fieldMask *VerifyRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VerifyRequest_AskForChallenge_FieldMask struct {
	Paths []VerifyRequestAskForChallenge_FieldPath
}

func FullVerifyRequest_AskForChallenge_FieldMask() *VerifyRequest_AskForChallenge_FieldMask {
	res := &VerifyRequest_AskForChallenge_FieldMask{}
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorSubject})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkpub})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkcert})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAkpub})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorCreationData})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAttest})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorSignature})
	res.Paths = append(res.Paths, &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat})
	return res
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyRequestAskForChallenge_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyRequestAskForChallenge_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyRequestAskForChallenge_FieldPath(raw)
	})
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) Subtract(other *VerifyRequest_AskForChallenge_FieldMask) *VerifyRequest_AskForChallenge_FieldMask {
	result := &VerifyRequest_AskForChallenge_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyRequestAskForChallenge_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyRequest_AskForChallenge_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) FilterInputFields() *VerifyRequest_AskForChallenge_FieldMask {
	result := &VerifyRequest_AskForChallenge_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyRequestAskForChallenge_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyRequestAskForChallenge_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyRequest_AskForChallenge_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyRequest_AskForChallenge_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) AppendPath(path VerifyRequestAskForChallenge_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyRequestAskForChallenge_FieldPath))
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) GetPaths() []VerifyRequestAskForChallenge_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyRequestAskForChallenge_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) Set(target, source *VerifyRequest_AskForChallenge) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyRequest_AskForChallenge), source.(*VerifyRequest_AskForChallenge))
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) Project(source *VerifyRequest_AskForChallenge) *VerifyRequest_AskForChallenge {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyRequest_AskForChallenge{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyRequestAskForChallenge_FieldTerminalPath:
			switch tp.selector {
			case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
				result.Subject = source.Subject
			case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
				result.AttestationDomain = source.AttestationDomain
			case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
				result.TpmVersion = source.TpmVersion
			case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
				result.Ekpub = source.Ekpub
			case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
				result.Ekcert = source.Ekcert
			case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
				result.Ekcerturl = source.Ekcerturl
			case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
				result.Akpub = source.Akpub
			case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
				result.CreationData = source.CreationData
			case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
				result.Attest = source.Attest
			case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
				result.Signature = source.Signature
			case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
				result.ChallengeFormat = source.ChallengeFormat
			}
		}
	}
	return result
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyRequest_AskForChallenge))
}

func (fieldMask *VerifyRequest_AskForChallenge_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VerifyRequest_ChallengeResponse_FieldMask struct {
	Paths []VerifyRequestChallengeResponse_FieldPath
}

func FullVerifyRequest_ChallengeResponse_FieldMask() *VerifyRequest_ChallengeResponse_FieldMask {
	res := &VerifyRequest_ChallengeResponse_FieldMask{}
	res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret})
	res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorQuotes})
	res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorPcrs})
	res.Paths = append(res.Paths, &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorEventlog})
	return res
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyRequestChallengeResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyRequestChallengeResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyRequestChallengeResponse_FieldPath(raw)
	})
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) Subtract(other *VerifyRequest_ChallengeResponse_FieldMask) *VerifyRequest_ChallengeResponse_FieldMask {
	result := &VerifyRequest_ChallengeResponse_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[VerifyRequestChallengeResponse_FieldPathSelector]gotenobject.FieldMask{
		VerifyRequestChallengeResponse_FieldPathSelectorQuotes: &VerifyRequest_ChallengeResponse_Quote_FieldMask{},
		VerifyRequestChallengeResponse_FieldPathSelectorPcrs:   &iam_common.PCR_FieldMask{},
	}
	mySubMasks := map[VerifyRequestChallengeResponse_FieldPathSelector]gotenobject.FieldMask{
		VerifyRequestChallengeResponse_FieldPathSelectorQuotes: &VerifyRequest_ChallengeResponse_Quote_FieldMask{},
		VerifyRequestChallengeResponse_FieldPathSelectorPcrs:   &iam_common.PCR_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyRequestChallengeResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VerifyRequestChallengeResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VerifyRequestChallengeResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
						mySubMasks[VerifyRequestChallengeResponse_FieldPathSelectorQuotes] = FullVerifyRequest_ChallengeResponse_Quote_FieldMask()
					case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
						mySubMasks[VerifyRequestChallengeResponse_FieldPathSelectorPcrs] = iam_common.FullPCR_FieldMask()
					}
				} else if tp, ok := path.(*VerifyRequestChallengeResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VerifyRequestChallengeResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyRequest_ChallengeResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) FilterInputFields() *VerifyRequest_ChallengeResponse_FieldMask {
	result := &VerifyRequest_ChallengeResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyRequestChallengeResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyRequestChallengeResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyRequest_ChallengeResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyRequest_ChallengeResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) AppendPath(path VerifyRequestChallengeResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyRequestChallengeResponse_FieldPath))
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) GetPaths() []VerifyRequestChallengeResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyRequestChallengeResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) Set(target, source *VerifyRequest_ChallengeResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyRequest_ChallengeResponse), source.(*VerifyRequest_ChallengeResponse))
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) Project(source *VerifyRequest_ChallengeResponse) *VerifyRequest_ChallengeResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyRequest_ChallengeResponse{}
	quotesMask := &VerifyRequest_ChallengeResponse_Quote_FieldMask{}
	wholeQuotesAccepted := false
	pcrsMask := &iam_common.PCR_FieldMask{}
	wholePcrsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyRequestChallengeResponse_FieldTerminalPath:
			switch tp.selector {
			case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
				result.AkActivationDecryptedSecret = source.AkActivationDecryptedSecret
			case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
				result.Quotes = source.Quotes
				wholeQuotesAccepted = true
			case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
				result.Pcrs = source.Pcrs
				wholePcrsAccepted = true
			case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
				result.Eventlog = source.Eventlog
			}
		case *VerifyRequestChallengeResponse_FieldSubPath:
			switch tp.selector {
			case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
				quotesMask.AppendPath(tp.subPath.(VerifyRequestChallengeResponseQuote_FieldPath))
			case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
				pcrsMask.AppendPath(tp.subPath.(iam_common.PCR_FieldPath))
			}
		}
	}
	if wholeQuotesAccepted == false && len(quotesMask.Paths) > 0 {
		for _, sourceItem := range source.GetQuotes() {
			result.Quotes = append(result.Quotes, quotesMask.Project(sourceItem))
		}
	}
	if wholePcrsAccepted == false && len(pcrsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPcrs() {
			result.Pcrs = append(result.Pcrs, pcrsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyRequest_ChallengeResponse))
}

func (fieldMask *VerifyRequest_ChallengeResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VerifyRequest_ChallengeResponse_Quote_FieldMask struct {
	Paths []VerifyRequestChallengeResponseQuote_FieldPath
}

func FullVerifyRequest_ChallengeResponse_Quote_FieldMask() *VerifyRequest_ChallengeResponse_Quote_FieldMask {
	res := &VerifyRequest_ChallengeResponse_Quote_FieldMask{}
	res.Paths = append(res.Paths, &VerifyRequestChallengeResponseQuote_FieldTerminalPath{selector: VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote})
	res.Paths = append(res.Paths, &VerifyRequestChallengeResponseQuote_FieldTerminalPath{selector: VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature})
	return res
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyRequestChallengeResponseQuote_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyRequestChallengeResponseQuote_FieldPath(raw)
	})
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) Subtract(other *VerifyRequest_ChallengeResponse_Quote_FieldMask) *VerifyRequest_ChallengeResponse_Quote_FieldMask {
	result := &VerifyRequest_ChallengeResponse_Quote_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyRequestChallengeResponseQuote_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyRequest_ChallengeResponse_Quote_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) FilterInputFields() *VerifyRequest_ChallengeResponse_Quote_FieldMask {
	result := &VerifyRequest_ChallengeResponse_Quote_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyRequestChallengeResponseQuote_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyRequest_ChallengeResponse_Quote_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyRequest_ChallengeResponse_Quote_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) AppendPath(path VerifyRequestChallengeResponseQuote_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyRequestChallengeResponseQuote_FieldPath))
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) GetPaths() []VerifyRequestChallengeResponseQuote_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) Set(target, source *VerifyRequest_ChallengeResponse_Quote) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyRequest_ChallengeResponse_Quote), source.(*VerifyRequest_ChallengeResponse_Quote))
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) Project(source *VerifyRequest_ChallengeResponse_Quote) *VerifyRequest_ChallengeResponse_Quote {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyRequest_ChallengeResponse_Quote{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyRequestChallengeResponseQuote_FieldTerminalPath:
			switch tp.selector {
			case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
				result.Quote = source.Quote
			case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
				result.Signature = source.Signature
			}
		}
	}
	return result
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyRequest_ChallengeResponse_Quote))
}

func (fieldMask *VerifyRequest_ChallengeResponse_Quote_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VerifyResponse_FieldMask struct {
	Paths []VerifyResponse_FieldPath
}

func FullVerifyResponse_FieldMask() *VerifyResponse_FieldMask {
	res := &VerifyResponse_FieldMask{}
	res.Paths = append(res.Paths, &VerifyResponse_FieldTerminalPath{selector: VerifyResponse_FieldPathSelectorChallenge})
	res.Paths = append(res.Paths, &VerifyResponse_FieldTerminalPath{selector: VerifyResponse_FieldPathSelectorAttestationSuccessful})
	return res
}

func (fieldMask *VerifyResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyResponse_FieldPath(raw)
	})
}

func (fieldMask *VerifyResponse_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyResponse_FieldMask) Subtract(other *VerifyResponse_FieldMask) *VerifyResponse_FieldMask {
	result := &VerifyResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[VerifyResponse_FieldPathSelector]gotenobject.FieldMask{
		VerifyResponse_FieldPathSelectorChallenge:             &VerifyResponse_Challenge_FieldMask{},
		VerifyResponse_FieldPathSelectorAttestationSuccessful: &VerifyResponse_AttestationSuccessful_FieldMask{},
	}
	mySubMasks := map[VerifyResponse_FieldPathSelector]gotenobject.FieldMask{
		VerifyResponse_FieldPathSelectorChallenge:             &VerifyResponse_Challenge_FieldMask{},
		VerifyResponse_FieldPathSelectorAttestationSuccessful: &VerifyResponse_AttestationSuccessful_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *VerifyResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*VerifyResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case VerifyResponse_FieldPathSelectorChallenge:
						mySubMasks[VerifyResponse_FieldPathSelectorChallenge] = FullVerifyResponse_Challenge_FieldMask()
					case VerifyResponse_FieldPathSelectorAttestationSuccessful:
						mySubMasks[VerifyResponse_FieldPathSelectorAttestationSuccessful] = FullVerifyResponse_AttestationSuccessful_FieldMask()
					}
				} else if tp, ok := path.(*VerifyResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &VerifyResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyResponse_FieldMask) FilterInputFields() *VerifyResponse_FieldMask {
	result := &VerifyResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyResponse_FieldMask) AppendPath(path VerifyResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyResponse_FieldPath))
}

func (fieldMask *VerifyResponse_FieldMask) GetPaths() []VerifyResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyResponse_FieldMask) Set(target, source *VerifyResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyResponse), source.(*VerifyResponse))
}

func (fieldMask *VerifyResponse_FieldMask) Project(source *VerifyResponse) *VerifyResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyResponse{}
	challengeMask := &VerifyResponse_Challenge_FieldMask{}
	wholeChallengeAccepted := false
	attestationSuccessfulMask := &VerifyResponse_AttestationSuccessful_FieldMask{}
	wholeAttestationSuccessfulAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyResponse_FieldTerminalPath:
			switch tp.selector {
			case VerifyResponse_FieldPathSelectorChallenge:
				if source, ok := source.Msg.(*VerifyResponse_Challenge_); ok {
					result.Msg = &VerifyResponse_Challenge_{
						Challenge: source.Challenge,
					}
				}
				wholeChallengeAccepted = true
			case VerifyResponse_FieldPathSelectorAttestationSuccessful:
				if source, ok := source.Msg.(*VerifyResponse_AttestationSuccessful_); ok {
					result.Msg = &VerifyResponse_AttestationSuccessful_{
						AttestationSuccessful: source.AttestationSuccessful,
					}
				}
				wholeAttestationSuccessfulAccepted = true
			}
		case *VerifyResponse_FieldSubPath:
			switch tp.selector {
			case VerifyResponse_FieldPathSelectorChallenge:
				challengeMask.AppendPath(tp.subPath.(VerifyResponseChallenge_FieldPath))
			case VerifyResponse_FieldPathSelectorAttestationSuccessful:
				attestationSuccessfulMask.AppendPath(tp.subPath.(VerifyResponseAttestationSuccessful_FieldPath))
			}
		}
	}
	if wholeChallengeAccepted == false && len(challengeMask.Paths) > 0 {
		if asOneOf, ok := source.Msg.(*VerifyResponse_Challenge_); ok {
			result.Msg = (*VerifyResponse_Challenge_)(nil)
			if asOneOf != nil {
				oneOfRes := &VerifyResponse_Challenge_{}
				oneOfRes.Challenge = challengeMask.Project(asOneOf.Challenge)
				result.Msg = oneOfRes
			}
		}
	}
	if wholeAttestationSuccessfulAccepted == false && len(attestationSuccessfulMask.Paths) > 0 {
		if asOneOf, ok := source.Msg.(*VerifyResponse_AttestationSuccessful_); ok {
			result.Msg = (*VerifyResponse_AttestationSuccessful_)(nil)
			if asOneOf != nil {
				oneOfRes := &VerifyResponse_AttestationSuccessful_{}
				oneOfRes.AttestationSuccessful = attestationSuccessfulMask.Project(asOneOf.AttestationSuccessful)
				result.Msg = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *VerifyResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyResponse))
}

func (fieldMask *VerifyResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VerifyResponse_Challenge_FieldMask struct {
	Paths []VerifyResponseChallenge_FieldPath
}

func FullVerifyResponse_Challenge_FieldMask() *VerifyResponse_Challenge_FieldMask {
	res := &VerifyResponse_Challenge_FieldMask{}
	res.Paths = append(res.Paths, &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce})
	res.Paths = append(res.Paths, &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub})
	res.Paths = append(res.Paths, &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred})
	return res
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyResponse_Challenge_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyResponseChallenge_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyResponseChallenge_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyResponseChallenge_FieldPath(raw)
	})
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyResponse_Challenge_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) Subtract(other *VerifyResponse_Challenge_FieldMask) *VerifyResponse_Challenge_FieldMask {
	result := &VerifyResponse_Challenge_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyResponseChallenge_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyResponse_Challenge_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyResponse_Challenge_FieldMask) FilterInputFields() *VerifyResponse_Challenge_FieldMask {
	result := &VerifyResponse_Challenge_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyResponse_Challenge_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyResponseChallenge_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyResponseChallenge_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyResponse_Challenge_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyResponse_Challenge_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) AppendPath(path VerifyResponseChallenge_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyResponseChallenge_FieldPath))
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) GetPaths() []VerifyResponseChallenge_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyResponseChallenge_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) Set(target, source *VerifyResponse_Challenge) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyResponse_Challenge), source.(*VerifyResponse_Challenge))
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) Project(source *VerifyResponse_Challenge) *VerifyResponse_Challenge {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyResponse_Challenge{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyResponseChallenge_FieldTerminalPath:
			switch tp.selector {
			case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
				result.PlatformAttestationNonce = source.PlatformAttestationNonce
			case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
				result.CredEncryptedByEkpub = source.CredEncryptedByEkpub
			case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
				result.SecretEncryptedByCred = source.SecretEncryptedByCred
			}
		}
	}
	return result
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyResponse_Challenge))
}

func (fieldMask *VerifyResponse_Challenge_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type VerifyResponse_AttestationSuccessful_FieldMask struct {
	Paths []VerifyResponseAttestationSuccessful_FieldPath
}

func FullVerifyResponse_AttestationSuccessful_FieldMask() *VerifyResponse_AttestationSuccessful_FieldMask {
	res := &VerifyResponse_AttestationSuccessful_FieldMask{}
	res.Paths = append(res.Paths, &VerifyResponseAttestationSuccessful_FieldTerminalPath{selector: VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken})
	return res
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseVerifyResponseAttestationSuccessful_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*VerifyResponseAttestationSuccessful_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseVerifyResponseAttestationSuccessful_FieldPath(raw)
	})
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) ProtoMessage() {}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) Subtract(other *VerifyResponse_AttestationSuccessful_FieldMask) *VerifyResponse_AttestationSuccessful_FieldMask {
	result := &VerifyResponse_AttestationSuccessful_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *VerifyResponseAttestationSuccessful_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*VerifyResponse_AttestationSuccessful_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) FilterInputFields() *VerifyResponse_AttestationSuccessful_FieldMask {
	result := &VerifyResponse_AttestationSuccessful_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]VerifyResponseAttestationSuccessful_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseVerifyResponseAttestationSuccessful_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask VerifyResponse_AttestationSuccessful_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask VerifyResponse_AttestationSuccessful_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) AppendPath(path VerifyResponseAttestationSuccessful_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(VerifyResponseAttestationSuccessful_FieldPath))
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) GetPaths() []VerifyResponseAttestationSuccessful_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseVerifyResponseAttestationSuccessful_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) Set(target, source *VerifyResponse_AttestationSuccessful) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*VerifyResponse_AttestationSuccessful), source.(*VerifyResponse_AttestationSuccessful))
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) Project(source *VerifyResponse_AttestationSuccessful) *VerifyResponse_AttestationSuccessful {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &VerifyResponse_AttestationSuccessful{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *VerifyResponseAttestationSuccessful_FieldTerminalPath:
			switch tp.selector {
			case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
				result.AttestationToken = source.AttestationToken
			}
		}
	}
	return result
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*VerifyResponse_AttestationSuccessful))
}

func (fieldMask *VerifyResponse_AttestationSuccessful_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
