// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1alpha2/attestation_custom.proto
// DO NOT EDIT!!!

package attestation_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &iam_common.Actor{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerifyRequest_AskForChallenge_ChallengeFormat int32

const (
	// Credential Protection as defined in section 24 of the TPM specification
	// revision 2 part 1 See:
	// https://trustedcomputinggroup.org/resource/tpm-library-specification/
	// Returned primitives are of type TPM2B_ID_OBJECT and
	// TPM2B_ENCRYPTED_SECRET.
	// NOTE: ECC is not supported.
	//
	// Reference implementation:
	//  github.com/google/go-attestation@v0.3.2/attest/activation.go:generateChallengeTPM20,
	//  which uses
	//  github.com/google/go-tmp@v0.3.2/tmp2/credactivation/credential_activation.go:Generate
	VerifyRequest_AskForChallenge_TPM20_CREDENTIAL VerifyRequest_AskForChallenge_ChallengeFormat = 0
	// Challenge as defined in section 15.1 of the TPM 1.2 commands spec
	// See:
	// https://trustedcomputinggroup.org/wp-content/uploads/TPM-Main-Part-3-Commands_v1.2_rev116_01032011.pdf
	// Returned primitives are of type TPM12_EKBLOB (with
	// TPM_EK_BLOB_ACTIVATE) and bytes.
	//
	// Reference implementation:
	//  github.com/google/go-attestation@v0.3.2/attest/activation.go:generateChallengeTPM12,
	//  which uses
	//  github.com/google/go-attestation@v0.3.2/attest/challenge.go:generateChallenge12
	VerifyRequest_AskForChallenge_TPM12_EKBLOB VerifyRequest_AskForChallenge_ChallengeFormat = 1
	// TSPI_EKBLOB is a TPM1.2 challenge format accepted by TrouSerS daemon's
	// Tspi_TPM_ActivateIdentity function. As far as I can tell, it's not
	// documented except in the code. Returned primitives are of type
	// TPM12_EKBLOB (with TPM_EK_BLOB_ACTIVATE) and bytes.
	//
	// Reference implementation:
	//  github.com/google/go-attestation@v0.3.2/attest/activation.go:generateChallengeTPM12,
	//  which uses
	//  github.com/google/go-tspi@v0.3.0/verification/verification.go:GenerateChallengeEx
	VerifyRequest_AskForChallenge_TSPI_EKBLOB VerifyRequest_AskForChallenge_ChallengeFormat = 2
)

var (
	VerifyRequest_AskForChallenge_ChallengeFormat_name = map[int32]string{
		0: "TPM20_CREDENTIAL",
		1: "TPM12_EKBLOB",
		2: "TSPI_EKBLOB",
	}

	VerifyRequest_AskForChallenge_ChallengeFormat_value = map[string]int32{
		"TPM20_CREDENTIAL": 0,
		"TPM12_EKBLOB":     1,
		"TSPI_EKBLOB":      2,
	}
)

func (x VerifyRequest_AskForChallenge_ChallengeFormat) Enum() *VerifyRequest_AskForChallenge_ChallengeFormat {
	p := new(VerifyRequest_AskForChallenge_ChallengeFormat)
	*p = x
	return p
}

func (x VerifyRequest_AskForChallenge_ChallengeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (VerifyRequest_AskForChallenge_ChallengeFormat) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_enumTypes[0].Descriptor()
}

func (VerifyRequest_AskForChallenge_ChallengeFormat) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1alpha2_attestation_custom_proto_enumTypes[0]
}

func (x VerifyRequest_AskForChallenge_ChallengeFormat) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use VerifyRequest_AskForChallenge_ChallengeFormat.ProtoReflect.Descriptor instead.
func (VerifyRequest_AskForChallenge_ChallengeFormat) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Request message for method [Verify][ntt.iam.v1alpha2.Verify]
type VerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*VerifyRequest_AskForChallenge_
	//	*VerifyRequest_ChallengeResponse_
	Msg isVerifyRequest_Msg `protobuf_oneof:"msg"`
}

func (m *VerifyRequest) Reset() {
	*m = VerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyRequest) ProtoMessage() {}

func (m *VerifyRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyRequest) GotenMessage() {}

// Deprecated, Use VerifyRequest.ProtoReflect.Descriptor instead.
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{0}
}

func (m *VerifyRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isVerifyRequest_Msg interface {
	isVerifyRequest_Msg()
}

type VerifyRequest_AskForChallenge_ struct {
	AskForChallenge *VerifyRequest_AskForChallenge `protobuf:"bytes,1,opt,name=ask_for_challenge,json=askForChallenge,proto3,oneof" firestore:"askForChallenge"`
}
type VerifyRequest_ChallengeResponse_ struct {
	ChallengeResponse *VerifyRequest_ChallengeResponse `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof" firestore:"challengeResponse"`
}

func (*VerifyRequest_AskForChallenge_) isVerifyRequest_Msg()   {}
func (*VerifyRequest_ChallengeResponse_) isVerifyRequest_Msg() {}
func (m *VerifyRequest) GetMsg() isVerifyRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *VerifyRequest) GetAskForChallenge() *VerifyRequest_AskForChallenge {
	if x, ok := m.GetMsg().(*VerifyRequest_AskForChallenge_); ok {
		return x.AskForChallenge
	}
	return nil
}
func (m *VerifyRequest) GetChallengeResponse() *VerifyRequest_ChallengeResponse {
	if x, ok := m.GetMsg().(*VerifyRequest_ChallengeResponse_); ok {
		return x.ChallengeResponse
	}
	return nil
}
func (m *VerifyRequest) SetMsg(ofv isVerifyRequest_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isVerifyRequest_Msg", "VerifyRequest"))
	}
	m.Msg = ofv
}
func (m *VerifyRequest) SetAskForChallenge(fv *VerifyRequest_AskForChallenge) {
	m.SetMsg(&VerifyRequest_AskForChallenge_{AskForChallenge: fv})
}
func (m *VerifyRequest) SetChallengeResponse(fv *VerifyRequest_ChallengeResponse) {
	m.SetMsg(&VerifyRequest_ChallengeResponse_{ChallengeResponse: fv})
}

// Response message for method [Verify][ntt.iam.v1alpha2.Verify]
type VerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*VerifyResponse_Challenge_
	//	*VerifyResponse_AttestationSuccessful_
	Msg isVerifyResponse_Msg `protobuf_oneof:"msg"`
}

func (m *VerifyResponse) Reset() {
	*m = VerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyResponse) ProtoMessage() {}

func (m *VerifyResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyResponse) GotenMessage() {}

// Deprecated, Use VerifyResponse.ProtoReflect.Descriptor instead.
func (*VerifyResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{1}
}

func (m *VerifyResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isVerifyResponse_Msg interface {
	isVerifyResponse_Msg()
}

type VerifyResponse_Challenge_ struct {
	Challenge *VerifyResponse_Challenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof" firestore:"challenge"`
}
type VerifyResponse_AttestationSuccessful_ struct {
	AttestationSuccessful *VerifyResponse_AttestationSuccessful `protobuf:"bytes,2,opt,name=attestation_successful,json=attestationSuccessful,proto3,oneof" firestore:"attestationSuccessful"`
}

func (*VerifyResponse_Challenge_) isVerifyResponse_Msg()             {}
func (*VerifyResponse_AttestationSuccessful_) isVerifyResponse_Msg() {}
func (m *VerifyResponse) GetMsg() isVerifyResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *VerifyResponse) GetChallenge() *VerifyResponse_Challenge {
	if x, ok := m.GetMsg().(*VerifyResponse_Challenge_); ok {
		return x.Challenge
	}
	return nil
}
func (m *VerifyResponse) GetAttestationSuccessful() *VerifyResponse_AttestationSuccessful {
	if x, ok := m.GetMsg().(*VerifyResponse_AttestationSuccessful_); ok {
		return x.AttestationSuccessful
	}
	return nil
}
func (m *VerifyResponse) SetMsg(ofv isVerifyResponse_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isVerifyResponse_Msg", "VerifyResponse"))
	}
	m.Msg = ofv
}
func (m *VerifyResponse) SetChallenge(fv *VerifyResponse_Challenge) {
	m.SetMsg(&VerifyResponse_Challenge_{Challenge: fv})
}
func (m *VerifyResponse) SetAttestationSuccessful(fv *VerifyResponse_AttestationSuccessful) {
	m.SetMsg(&VerifyResponse_AttestationSuccessful_{AttestationSuccessful: fv})
}

type VerifyRequest_AskForChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// This will be used to set "sub" claim for attestation token.
	// This "sub" should be compared to "sub" of JWT access token during
	// validation. "Sub" comparison ties both tokens together and protects
	// against theft/reuse of one of them by another service account.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty" firestore:"subject"`
	// attestation domain ref
	AttestationDomain *attestation_domain.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=attestation_domain,json=attestationDomain,proto3" json:"attestation_domain,omitempty" firestore:"attestationDomain"`
	TpmVersion        iam_common.TpmVersion         `protobuf:"varint,3,opt,name=tpm_version,json=tpmVersion,proto3,enum=ntt.iam.v1alpha2.TpmVersion" json:"tpm_version,omitempty" firestore:"tpmVersion"`
	// PKIX encoded EK public
	Ekpub []byte `protobuf:"bytes,4,opt,name=ekpub,proto3" json:"ekpub,omitempty" firestore:"ekpub"`
	// ASN.1 DER encoded EK certificate.
	Ekcert []byte `protobuf:"bytes,5,opt,name=ekcert,proto3" json:"ekcert,omitempty" firestore:"ekcert"`
	// For Intel TPMs, Intel hosts certificates at a public URL derived from the
	// Public key. Clients or servers can perform an HTTP GET to this URL, and
	// use ParseEKCertificate on the response body.
	Ekcerturl string `protobuf:"bytes,6,opt,name=ekcerturl,proto3" json:"ekcerturl,omitempty" firestore:"ekcerturl"`
	// https://trustedcomputinggroup.org/wp-content/uploads/TPM-Main-Part-2-TPM-Structures_v1.2_rev116_01032011.pdf
	// https://www.trustedcomputinggroup.org/wp-content/uploads/TPM-Rev-2.0-Part-2-Structures-01.38.pdf
	// TPMT_PUBLIC (TPM 2.0) or TPM_PUBKEY (TPM 1.2)
	Akpub []byte `protobuf:"bytes,7,opt,name=akpub,proto3" json:"akpub,omitempty" firestore:"akpub"`
	// TPMS_CREATION_DATA
	CreationData []byte `protobuf:"bytes,8,opt,name=creation_data,json=creationData,proto3" json:"creation_data,omitempty" firestore:"creationData"`
	// TPMS_ATTEST
	Attest []byte `protobuf:"bytes,9,opt,name=attest,proto3" json:"attest,omitempty" firestore:"attest"`
	// TPMT_SIGNATURE
	Signature []byte `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty" firestore:"signature"`
	// ChallengeFormat defines the method of generating identity activation
	// challenge by the Verifier (server). It should affect the interpretation
	// ChallengeResponse fields cred_encrypted_by_ekpub and
	// secret_encrypted_by_cred. Attestor (client) is responsible for chosing
	// the right format depending on TPM version and the presence of TrouSerS
	// daemon.
	ChallengeFormat VerifyRequest_AskForChallenge_ChallengeFormat `protobuf:"varint,11,opt,name=challenge_format,json=challengeFormat,proto3,enum=ntt.iam.v1alpha2.VerifyRequest_AskForChallenge_ChallengeFormat" json:"challenge_format,omitempty" firestore:"challengeFormat"`
}

func (m *VerifyRequest_AskForChallenge) Reset() {
	*m = VerifyRequest_AskForChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyRequest_AskForChallenge) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyRequest_AskForChallenge) ProtoMessage() {}

func (m *VerifyRequest_AskForChallenge) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyRequest_AskForChallenge) GotenMessage() {}

// Deprecated, Use VerifyRequest_AskForChallenge.ProtoReflect.Descriptor instead.
func (*VerifyRequest_AskForChallenge) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{0, 0}
}

func (m *VerifyRequest_AskForChallenge) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyRequest_AskForChallenge) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyRequest_AskForChallenge) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyRequest_AskForChallenge) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *VerifyRequest_AskForChallenge) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *VerifyRequest_AskForChallenge) GetAttestationDomain() *attestation_domain.Reference {
	if m != nil {
		return m.AttestationDomain
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetTpmVersion() iam_common.TpmVersion {
	if m != nil {
		return m.TpmVersion
	}
	return iam_common.TpmVersion_TPMVAGNOSTIC
}

func (m *VerifyRequest_AskForChallenge) GetEkpub() []byte {
	if m != nil {
		return m.Ekpub
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetEkcert() []byte {
	if m != nil {
		return m.Ekcert
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetEkcerturl() string {
	if m != nil {
		return m.Ekcerturl
	}
	return ""
}

func (m *VerifyRequest_AskForChallenge) GetAkpub() []byte {
	if m != nil {
		return m.Akpub
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetCreationData() []byte {
	if m != nil {
		return m.CreationData
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetAttest() []byte {
	if m != nil {
		return m.Attest
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VerifyRequest_AskForChallenge) GetChallengeFormat() VerifyRequest_AskForChallenge_ChallengeFormat {
	if m != nil {
		return m.ChallengeFormat
	}
	return VerifyRequest_AskForChallenge_TPM20_CREDENTIAL
}

func (m *VerifyRequest_AskForChallenge) SetSubject(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subject", "VerifyRequest_AskForChallenge"))
	}
	m.Subject = fv
}

func (m *VerifyRequest_AskForChallenge) SetAttestationDomain(fv *attestation_domain.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationDomain", "VerifyRequest_AskForChallenge"))
	}
	m.AttestationDomain = fv
}

func (m *VerifyRequest_AskForChallenge) SetTpmVersion(fv iam_common.TpmVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TpmVersion", "VerifyRequest_AskForChallenge"))
	}
	m.TpmVersion = fv
}

func (m *VerifyRequest_AskForChallenge) SetEkpub(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ekpub", "VerifyRequest_AskForChallenge"))
	}
	m.Ekpub = fv
}

func (m *VerifyRequest_AskForChallenge) SetEkcert(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ekcert", "VerifyRequest_AskForChallenge"))
	}
	m.Ekcert = fv
}

func (m *VerifyRequest_AskForChallenge) SetEkcerturl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ekcerturl", "VerifyRequest_AskForChallenge"))
	}
	m.Ekcerturl = fv
}

func (m *VerifyRequest_AskForChallenge) SetAkpub(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Akpub", "VerifyRequest_AskForChallenge"))
	}
	m.Akpub = fv
}

func (m *VerifyRequest_AskForChallenge) SetCreationData(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CreationData", "VerifyRequest_AskForChallenge"))
	}
	m.CreationData = fv
}

func (m *VerifyRequest_AskForChallenge) SetAttest(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Attest", "VerifyRequest_AskForChallenge"))
	}
	m.Attest = fv
}

func (m *VerifyRequest_AskForChallenge) SetSignature(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Signature", "VerifyRequest_AskForChallenge"))
	}
	m.Signature = fv
}

func (m *VerifyRequest_AskForChallenge) SetChallengeFormat(fv VerifyRequest_AskForChallenge_ChallengeFormat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChallengeFormat", "VerifyRequest_AskForChallenge"))
	}
	m.ChallengeFormat = fv
}

type VerifyRequest_ChallengeResponse struct {
	state                       protoimpl.MessageState
	sizeCache                   protoimpl.SizeCache
	unknownFields               protoimpl.UnknownFields
	AkActivationDecryptedSecret []byte                                   `protobuf:"bytes,1,opt,name=ak_activation_decrypted_secret,json=akActivationDecryptedSecret,proto3" json:"ak_activation_decrypted_secret,omitempty" firestore:"akActivationDecryptedSecret"`
	Quotes                      []*VerifyRequest_ChallengeResponse_Quote `protobuf:"bytes,2,rep,name=quotes,proto3" json:"quotes,omitempty" firestore:"quotes"`
	Pcrs                        []*iam_common.PCR                        `protobuf:"bytes,3,rep,name=pcrs,proto3" json:"pcrs,omitempty" firestore:"pcrs"`
	// Binary contents of /sys/kernel/security/tpm0/binary_bios_measurements
	Eventlog []byte `protobuf:"bytes,4,opt,name=eventlog,proto3" json:"eventlog,omitempty" firestore:"eventlog"`
}

func (m *VerifyRequest_ChallengeResponse) Reset() {
	*m = VerifyRequest_ChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyRequest_ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyRequest_ChallengeResponse) ProtoMessage() {}

func (m *VerifyRequest_ChallengeResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyRequest_ChallengeResponse) GotenMessage() {}

// Deprecated, Use VerifyRequest_ChallengeResponse.ProtoReflect.Descriptor instead.
func (*VerifyRequest_ChallengeResponse) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{0, 1}
}

func (m *VerifyRequest_ChallengeResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyRequest_ChallengeResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyRequest_ChallengeResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyRequest_ChallengeResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *VerifyRequest_ChallengeResponse) GetAkActivationDecryptedSecret() []byte {
	if m != nil {
		return m.AkActivationDecryptedSecret
	}
	return nil
}

func (m *VerifyRequest_ChallengeResponse) GetQuotes() []*VerifyRequest_ChallengeResponse_Quote {
	if m != nil {
		return m.Quotes
	}
	return nil
}

func (m *VerifyRequest_ChallengeResponse) GetPcrs() []*iam_common.PCR {
	if m != nil {
		return m.Pcrs
	}
	return nil
}

func (m *VerifyRequest_ChallengeResponse) GetEventlog() []byte {
	if m != nil {
		return m.Eventlog
	}
	return nil
}

func (m *VerifyRequest_ChallengeResponse) SetAkActivationDecryptedSecret(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AkActivationDecryptedSecret", "VerifyRequest_ChallengeResponse"))
	}
	m.AkActivationDecryptedSecret = fv
}

func (m *VerifyRequest_ChallengeResponse) SetQuotes(fv []*VerifyRequest_ChallengeResponse_Quote) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Quotes", "VerifyRequest_ChallengeResponse"))
	}
	m.Quotes = fv
}

func (m *VerifyRequest_ChallengeResponse) SetPcrs(fv []*iam_common.PCR) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pcrs", "VerifyRequest_ChallengeResponse"))
	}
	m.Pcrs = fv
}

func (m *VerifyRequest_ChallengeResponse) SetEventlog(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Eventlog", "VerifyRequest_ChallengeResponse"))
	}
	m.Eventlog = fv
}

type VerifyRequest_ChallengeResponse_Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TPMS_ATTEST (TSS_VALIDATION.Data or TSS_VALIDATION.rgbData)
	// This contains PCR selection information for which the signature was
	// calculated and other required data, like nonce.
	Quote []byte `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty" firestore:"quote"`
	// TSS_VALIDATION.ValidationData or TSS_VALIDATION.rgbValidationData
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" firestore:"signature"`
}

func (m *VerifyRequest_ChallengeResponse_Quote) Reset() {
	*m = VerifyRequest_ChallengeResponse_Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyRequest_ChallengeResponse_Quote) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyRequest_ChallengeResponse_Quote) ProtoMessage() {}

func (m *VerifyRequest_ChallengeResponse_Quote) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyRequest_ChallengeResponse_Quote) GotenMessage() {}

// Deprecated, Use VerifyRequest_ChallengeResponse_Quote.ProtoReflect.Descriptor instead.
func (*VerifyRequest_ChallengeResponse_Quote) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *VerifyRequest_ChallengeResponse_Quote) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyRequest_ChallengeResponse_Quote) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyRequest_ChallengeResponse_Quote) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyRequest_ChallengeResponse_Quote) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *VerifyRequest_ChallengeResponse_Quote) GetQuote() []byte {
	if m != nil {
		return m.Quote
	}
	return nil
}

func (m *VerifyRequest_ChallengeResponse_Quote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VerifyRequest_ChallengeResponse_Quote) SetQuote(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Quote", "VerifyRequest_ChallengeResponse_Quote"))
	}
	m.Quote = fv
}

func (m *VerifyRequest_ChallengeResponse_Quote) SetSignature(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Signature", "VerifyRequest_ChallengeResponse_Quote"))
	}
	m.Signature = fv
}

type VerifyResponse_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Platform attestation
	PlatformAttestationNonce []byte `protobuf:"bytes,1,opt,name=platform_attestation_nonce,json=platformAttestationNonce,proto3" json:"platform_attestation_nonce,omitempty" firestore:"platformAttestationNonce"`
	// AK Identity Activation
	CredEncryptedByEkpub  []byte `protobuf:"bytes,2,opt,name=cred_encrypted_by_ekpub,json=credEncryptedByEkpub,proto3" json:"cred_encrypted_by_ekpub,omitempty" firestore:"credEncryptedByEkpub"`
	SecretEncryptedByCred []byte `protobuf:"bytes,3,opt,name=secret_encrypted_by_cred,json=secretEncryptedByCred,proto3" json:"secret_encrypted_by_cred,omitempty" firestore:"secretEncryptedByCred"`
}

func (m *VerifyResponse_Challenge) Reset() {
	*m = VerifyResponse_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyResponse_Challenge) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyResponse_Challenge) ProtoMessage() {}

func (m *VerifyResponse_Challenge) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyResponse_Challenge) GotenMessage() {}

// Deprecated, Use VerifyResponse_Challenge.ProtoReflect.Descriptor instead.
func (*VerifyResponse_Challenge) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *VerifyResponse_Challenge) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyResponse_Challenge) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyResponse_Challenge) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyResponse_Challenge) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *VerifyResponse_Challenge) GetPlatformAttestationNonce() []byte {
	if m != nil {
		return m.PlatformAttestationNonce
	}
	return nil
}

func (m *VerifyResponse_Challenge) GetCredEncryptedByEkpub() []byte {
	if m != nil {
		return m.CredEncryptedByEkpub
	}
	return nil
}

func (m *VerifyResponse_Challenge) GetSecretEncryptedByCred() []byte {
	if m != nil {
		return m.SecretEncryptedByCred
	}
	return nil
}

func (m *VerifyResponse_Challenge) SetPlatformAttestationNonce(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PlatformAttestationNonce", "VerifyResponse_Challenge"))
	}
	m.PlatformAttestationNonce = fv
}

func (m *VerifyResponse_Challenge) SetCredEncryptedByEkpub(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CredEncryptedByEkpub", "VerifyResponse_Challenge"))
	}
	m.CredEncryptedByEkpub = fv
}

func (m *VerifyResponse_Challenge) SetSecretEncryptedByCred(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SecretEncryptedByCred", "VerifyResponse_Challenge"))
	}
	m.SecretEncryptedByCred = fv
}

type VerifyResponse_AttestationSuccessful struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	AttestationToken string `protobuf:"bytes,1,opt,name=attestation_token,json=attestationToken,proto3" json:"attestation_token,omitempty" firestore:"attestationToken"`
}

func (m *VerifyResponse_AttestationSuccessful) Reset() {
	*m = VerifyResponse_AttestationSuccessful{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VerifyResponse_AttestationSuccessful) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VerifyResponse_AttestationSuccessful) ProtoMessage() {}

func (m *VerifyResponse_AttestationSuccessful) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VerifyResponse_AttestationSuccessful) GotenMessage() {}

// Deprecated, Use VerifyResponse_AttestationSuccessful.ProtoReflect.Descriptor instead.
func (*VerifyResponse_AttestationSuccessful) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP(), []int{1, 1}
}

func (m *VerifyResponse_AttestationSuccessful) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VerifyResponse_AttestationSuccessful) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VerifyResponse_AttestationSuccessful) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VerifyResponse_AttestationSuccessful) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *VerifyResponse_AttestationSuccessful) GetAttestationToken() string {
	if m != nil {
		return m.AttestationToken
	}
	return ""
}

func (m *VerifyResponse_AttestationSuccessful) SetAttestationToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationToken", "VerifyResponse_AttestationSuccessful"))
	}
	m.AttestationToken = fv
}

var edgelq_iam_proto_v1alpha2_attestation_custom_proto preflect.FileDescriptor

var edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb4, 0x09, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xd6, 0x04, 0x0a, 0x0f, 0x41, 0x73, 0x6b, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x75, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x46, 0xfa, 0x41, 0x13, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0xb2, 0xda, 0x21, 0x26, 0x12, 0x24, 0x0a,
	0x22, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0b,
	0x74, 0x70, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x70, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x74, 0x70, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6b, 0x70, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6b, 0x70, 0x75,
	0x62, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6b, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x65, 0x6b, 0x63, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6b, 0x63,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6b,
	0x63, 0x65, 0x72, 0x74, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6b, 0x70, 0x75, 0x62,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6b, 0x70, 0x75, 0x62, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x6a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0x4a, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x50, 0x4d, 0x32, 0x30,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x50, 0x4d, 0x31, 0x32, 0x5f, 0x45, 0x4b, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x53, 0x50, 0x49, 0x5f, 0x45, 0x4b, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x02,
	0x1a, 0xad, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b,
	0x61, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04,
	0x70, 0x63, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x43,
	0x52, 0x52, 0x04, 0x70, 0x63, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x6c, 0x6f, 0x67, 0x1a, 0x3b, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x3a, 0x50, 0xc2, 0x85, 0x2c, 0x4c, 0x32, 0x24, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x24, 0x61, 0x73,
	0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd6, 0x03, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x48, 0x00, 0x52, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x1a, 0xb9, 0x01, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6b, 0x70, 0x75, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x79, 0x45, 0x6b, 0x70, 0x75, 0x62, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x42, 0xd1, 0x01, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x42, 0x16, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x46,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescData = edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDesc
)

func edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescData)
	})
	return edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDescData
}

var edgelq_iam_proto_v1alpha2_attestation_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var edgelq_iam_proto_v1alpha2_attestation_custom_proto_goTypes = []interface{}{
	(VerifyRequest_AskForChallenge_ChallengeFormat)(0), // 0: ntt.iam.v1alpha2.VerifyRequest_AskForChallenge_ChallengeFormat
	(*VerifyRequest)(nil),                              // 1: ntt.iam.v1alpha2.VerifyRequest
	(*VerifyResponse)(nil),                             // 2: ntt.iam.v1alpha2.VerifyResponse
	(*VerifyRequest_AskForChallenge)(nil),              // 3: ntt.iam.v1alpha2.VerifyRequest.AskForChallenge
	(*VerifyRequest_ChallengeResponse)(nil),            // 4: ntt.iam.v1alpha2.VerifyRequest.ChallengeResponse
	(*VerifyRequest_ChallengeResponse_Quote)(nil),      // 5: ntt.iam.v1alpha2.VerifyRequest.ChallengeResponse.Quote
	(*VerifyResponse_Challenge)(nil),                   // 6: ntt.iam.v1alpha2.VerifyResponse.Challenge
	(*VerifyResponse_AttestationSuccessful)(nil),       // 7: ntt.iam.v1alpha2.VerifyResponse.AttestationSuccessful
	(iam_common.TpmVersion)(0),                         // 8: ntt.iam.v1alpha2.TpmVersion
	(*iam_common.PCR)(nil),                             // 9: ntt.iam.v1alpha2.PCR
}
var edgelq_iam_proto_v1alpha2_attestation_custom_proto_depIdxs = []int32{
	3, // 0: ntt.iam.v1alpha2.VerifyRequest.ask_for_challenge:type_name -> ntt.iam.v1alpha2.VerifyRequest.AskForChallenge
	4, // 1: ntt.iam.v1alpha2.VerifyRequest.challenge_response:type_name -> ntt.iam.v1alpha2.VerifyRequest.ChallengeResponse
	6, // 2: ntt.iam.v1alpha2.VerifyResponse.challenge:type_name -> ntt.iam.v1alpha2.VerifyResponse.Challenge
	7, // 3: ntt.iam.v1alpha2.VerifyResponse.attestation_successful:type_name -> ntt.iam.v1alpha2.VerifyResponse.AttestationSuccessful
	8, // 4: ntt.iam.v1alpha2.VerifyRequest.AskForChallenge.tpm_version:type_name -> ntt.iam.v1alpha2.TpmVersion
	0, // 5: ntt.iam.v1alpha2.VerifyRequest.AskForChallenge.challenge_format:type_name -> ntt.iam.v1alpha2.VerifyRequest_AskForChallenge_ChallengeFormat
	5, // 6: ntt.iam.v1alpha2.VerifyRequest.ChallengeResponse.quotes:type_name -> ntt.iam.v1alpha2.VerifyRequest.ChallengeResponse.Quote
	9, // 7: ntt.iam.v1alpha2.VerifyRequest.ChallengeResponse.pcrs:type_name -> ntt.iam.v1alpha2.PCR
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1alpha2_attestation_custom_proto_init() }
func edgelq_iam_proto_v1alpha2_attestation_custom_proto_init() {
	if edgelq_iam_proto_v1alpha2_attestation_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest_AskForChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest_ChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest_ChallengeResponse_Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse_AttestationSuccessful); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VerifyRequest_AskForChallenge_)(nil),
		(*VerifyRequest_ChallengeResponse_)(nil),
	}
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VerifyResponse_Challenge_)(nil),
		(*VerifyResponse_AttestationSuccessful_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_iam_proto_v1alpha2_attestation_custom_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1alpha2_attestation_custom_proto_depIdxs,
		EnumInfos:         edgelq_iam_proto_v1alpha2_attestation_custom_proto_enumTypes,
		MessageInfos:      edgelq_iam_proto_v1alpha2_attestation_custom_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1alpha2_attestation_custom_proto = out.File
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_rawDesc = nil
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_goTypes = nil
	edgelq_iam_proto_v1alpha2_attestation_custom_proto_depIdxs = nil
}
