// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_custom.proto
// DO NOT EDIT!!!

package attestation_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &iam_common.PCR{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyRequest_FieldPathSelector
	Get(source *VerifyRequest) []interface{}
	GetSingle(source *VerifyRequest) (interface{}, bool)
	ClearValue(item *VerifyRequest)

	// Those methods build corresponding VerifyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyRequest_FieldPathArrayItemValue
}

type VerifyRequest_FieldPathSelector int32

const (
	VerifyRequest_FieldPathSelectorAskForChallenge   VerifyRequest_FieldPathSelector = 0
	VerifyRequest_FieldPathSelectorChallengeResponse VerifyRequest_FieldPathSelector = 1
)

func (s VerifyRequest_FieldPathSelector) String() string {
	switch s {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return "ask_for_challenge"
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return "challenge_response"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", s))
	}
}

func BuildVerifyRequest_FieldPath(fp gotenobject.RawFieldPath) (VerifyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "ask_for_challenge", "askForChallenge", "ask-for-challenge":
			return &VerifyRequest_FieldTerminalPath{selector: VerifyRequest_FieldPathSelectorAskForChallenge}, nil
		case "challenge_response", "challengeResponse", "challenge-response":
			return &VerifyRequest_FieldTerminalPath{selector: VerifyRequest_FieldPathSelectorChallengeResponse}, nil
		}
	} else {
		switch fp[0] {
		case "ask_for_challenge", "askForChallenge", "ask-for-challenge":
			if subpath, err := BuildVerifyRequestAskForChallenge_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VerifyRequest_FieldSubPath{selector: VerifyRequest_FieldPathSelectorAskForChallenge, subPath: subpath}, nil
			}
		case "challenge_response", "challengeResponse", "challenge-response":
			if subpath, err := BuildVerifyRequestChallengeResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VerifyRequest_FieldSubPath{selector: VerifyRequest_FieldPathSelectorChallengeResponse, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyRequest", fp)
}

func ParseVerifyRequest_FieldPath(rawField string) (VerifyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyRequest_FieldPath(fp)
}

func MustParseVerifyRequest_FieldPath(rawField string) VerifyRequest_FieldPath {
	fp, err := ParseVerifyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyRequest_FieldTerminalPath struct {
	selector VerifyRequest_FieldPathSelector
}

var _ VerifyRequest_FieldPath = (*VerifyRequest_FieldTerminalPath)(nil)

func (fp *VerifyRequest_FieldTerminalPath) Selector() VerifyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyRequest
func (fp *VerifyRequest_FieldTerminalPath) Get(source *VerifyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyRequest_FieldPathSelectorAskForChallenge:
			if source, ok := source.Msg.(*VerifyRequest_AskForChallenge_); ok && source != nil {
				if source.AskForChallenge != nil {
					values = append(values, source.AskForChallenge)
				}
			}
		case VerifyRequest_FieldPathSelectorChallengeResponse:
			if source, ok := source.Msg.(*VerifyRequest_ChallengeResponse_); ok && source != nil {
				if source.ChallengeResponse != nil {
					values = append(values, source.ChallengeResponse)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyRequest))
}

// GetSingle returns value pointed by specific field of from source VerifyRequest
func (fp *VerifyRequest_FieldTerminalPath) GetSingle(source *VerifyRequest) (interface{}, bool) {
	switch fp.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		res := source.GetAskForChallenge()
		return res, res != nil
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		res := source.GetChallengeResponse()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
	}
}

func (fp *VerifyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyRequest))
}

// GetDefault returns a default value of the field type
func (fp *VerifyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return (*VerifyRequest_AskForChallenge)(nil)
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return (*VerifyRequest_ChallengeResponse)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
	}
}

func (fp *VerifyRequest_FieldTerminalPath) ClearValue(item *VerifyRequest) {
	if item != nil {
		switch fp.selector {
		case VerifyRequest_FieldPathSelectorAskForChallenge:
			if item, ok := item.Msg.(*VerifyRequest_AskForChallenge_); ok {
				item.AskForChallenge = nil
			}
		case VerifyRequest_FieldPathSelectorChallengeResponse:
			if item, ok := item.Msg.(*VerifyRequest_ChallengeResponse_); ok {
				item.ChallengeResponse = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
		}
	}
}

func (fp *VerifyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *VerifyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyRequest_FieldTerminalPath) WithIValue(value interface{}) VerifyRequest_FieldPathValue {
	switch fp.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return &VerifyRequest_FieldTerminalPathValue{VerifyRequest_FieldTerminalPath: *fp, value: value.(*VerifyRequest_AskForChallenge)}
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return &VerifyRequest_FieldTerminalPathValue{VerifyRequest_FieldTerminalPath: *fp, value: value.(*VerifyRequest_ChallengeResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
	}
}

func (fp *VerifyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyRequest_FieldPathArrayOfValues {
	fpaov := &VerifyRequest_FieldTerminalPathArrayOfValues{VerifyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return &VerifyRequest_FieldTerminalPathArrayOfValues{VerifyRequest_FieldTerminalPath: *fp, values: values.([]*VerifyRequest_AskForChallenge)}
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return &VerifyRequest_FieldTerminalPathArrayOfValues{VerifyRequest_FieldTerminalPath: *fp, values: values.([]*VerifyRequest_ChallengeResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fp.selector))
	}
}

func (fp *VerifyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VerifyRequest_FieldSubPath struct {
	selector VerifyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VerifyRequest_FieldPath = (*VerifyRequest_FieldSubPath)(nil)

func (fps *VerifyRequest_FieldSubPath) Selector() VerifyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *VerifyRequest_FieldSubPath) AsAskForChallengeSubPath() (VerifyRequestAskForChallenge_FieldPath, bool) {
	res, ok := fps.subPath.(VerifyRequestAskForChallenge_FieldPath)
	return res, ok
}
func (fps *VerifyRequest_FieldSubPath) AsChallengeResponseSubPath() (VerifyRequestChallengeResponse_FieldPath, bool) {
	res, ok := fps.subPath.(VerifyRequestChallengeResponse_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VerifyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VerifyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VerifyRequest
func (fps *VerifyRequest_FieldSubPath) Get(source *VerifyRequest) (values []interface{}) {
	switch fps.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		values = append(values, fps.subPath.GetRaw(source.GetAskForChallenge())...)
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		values = append(values, fps.subPath.GetRaw(source.GetChallengeResponse())...)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fps.selector))
	}
	return
}

func (fps *VerifyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VerifyRequest))
}

// GetSingle returns value of selected field from source VerifyRequest
func (fps *VerifyRequest_FieldSubPath) GetSingle(source *VerifyRequest) (interface{}, bool) {
	switch fps.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		if source.GetAskForChallenge() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAskForChallenge())
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		if source.GetChallengeResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChallengeResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fps.selector))
	}
}

func (fps *VerifyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VerifyRequest))
}

// GetDefault returns a default value of the field type
func (fps *VerifyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VerifyRequest_FieldSubPath) ClearValue(item *VerifyRequest) {
	if item != nil {
		switch fps.selector {
		case VerifyRequest_FieldPathSelectorAskForChallenge:
			if item.Msg != nil {
				if item, ok := item.Msg.(*VerifyRequest_AskForChallenge_); ok {
					fps.subPath.ClearValueRaw(item.AskForChallenge)
				}
			}
		case VerifyRequest_FieldPathSelectorChallengeResponse:
			if item.Msg != nil {
				if item, ok := item.Msg.(*VerifyRequest_ChallengeResponse_); ok {
					fps.subPath.ClearValueRaw(item.ChallengeResponse)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fps.selector))
		}
	}
}

func (fps *VerifyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VerifyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *VerifyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VerifyRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VerifyRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VerifyRequest_FieldSubPath) WithIValue(value interface{}) VerifyRequest_FieldPathValue {
	return &VerifyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VerifyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VerifyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) VerifyRequest_FieldPathArrayOfValues {
	return &VerifyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VerifyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VerifyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) VerifyRequest_FieldPathArrayItemValue {
	return &VerifyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VerifyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VerifyRequest_FieldPathValue allows storing values for VerifyRequest fields according to their type
type VerifyRequest_FieldPathValue interface {
	VerifyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyRequest)
	CompareWith(*VerifyRequest) (cmp int, comparable bool)
}

func ParseVerifyRequest_FieldPathValue(pathStr, valueStr string) (VerifyRequest_FieldPathValue, error) {
	fp, err := ParseVerifyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VerifyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyRequest_FieldPathValue), nil
}

func MustParseVerifyRequest_FieldPathValue(pathStr, valueStr string) VerifyRequest_FieldPathValue {
	fpv, err := ParseVerifyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyRequest_FieldTerminalPathValue struct {
	VerifyRequest_FieldTerminalPath
	value interface{}
}

var _ VerifyRequest_FieldPathValue = (*VerifyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VerifyRequest' as interface{}
func (fpv *VerifyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyRequest_FieldTerminalPathValue) AsAskForChallengeValue() (*VerifyRequest_AskForChallenge, bool) {
	res, ok := fpv.value.(*VerifyRequest_AskForChallenge)
	return res, ok
}
func (fpv *VerifyRequest_FieldTerminalPathValue) AsChallengeResponseValue() (*VerifyRequest_ChallengeResponse, bool) {
	res, ok := fpv.value.(*VerifyRequest_ChallengeResponse)
	return res, ok
}

// SetTo stores value for selected field for object VerifyRequest
func (fpv *VerifyRequest_FieldTerminalPathValue) SetTo(target **VerifyRequest) {
	if *target == nil {
		*target = new(VerifyRequest)
	}
	switch fpv.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		if _, ok := (*target).Msg.(*VerifyRequest_AskForChallenge_); !ok {
			(*target).Msg = &VerifyRequest_AskForChallenge_{}
		}
		(*target).Msg.(*VerifyRequest_AskForChallenge_).AskForChallenge = fpv.value.(*VerifyRequest_AskForChallenge)
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		if _, ok := (*target).Msg.(*VerifyRequest_ChallengeResponse_); !ok {
			(*target).Msg = &VerifyRequest_ChallengeResponse_{}
		}
		(*target).Msg.(*VerifyRequest_ChallengeResponse_).ChallengeResponse = fpv.value.(*VerifyRequest_ChallengeResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fpv.selector))
	}
}

func (fpv *VerifyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyRequest_FieldTerminalPathValue' with the value under path in 'VerifyRequest'.
func (fpv *VerifyRequest_FieldTerminalPathValue) CompareWith(source *VerifyRequest) (int, bool) {
	switch fpv.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return 0, false
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fpv.selector))
	}
}

func (fpv *VerifyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyRequest))
}

type VerifyRequest_FieldSubPathValue struct {
	VerifyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VerifyRequest_FieldPathValue = (*VerifyRequest_FieldSubPathValue)(nil)

func (fpvs *VerifyRequest_FieldSubPathValue) AsAskForChallengePathValue() (VerifyRequestAskForChallenge_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VerifyRequestAskForChallenge_FieldPathValue)
	return res, ok
}
func (fpvs *VerifyRequest_FieldSubPathValue) AsChallengeResponsePathValue() (VerifyRequestChallengeResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VerifyRequestChallengeResponse_FieldPathValue)
	return res, ok
}

func (fpvs *VerifyRequest_FieldSubPathValue) SetTo(target **VerifyRequest) {
	if *target == nil {
		*target = new(VerifyRequest)
	}
	switch fpvs.Selector() {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		if _, ok := (*target).Msg.(*VerifyRequest_AskForChallenge_); !ok {
			(*target).Msg = &VerifyRequest_AskForChallenge_{}
		}
		fpvs.subPathValue.(VerifyRequestAskForChallenge_FieldPathValue).SetTo(&(*target).Msg.(*VerifyRequest_AskForChallenge_).AskForChallenge)
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		if _, ok := (*target).Msg.(*VerifyRequest_ChallengeResponse_); !ok {
			(*target).Msg = &VerifyRequest_ChallengeResponse_{}
		}
		fpvs.subPathValue.(VerifyRequestChallengeResponse_FieldPathValue).SetTo(&(*target).Msg.(*VerifyRequest_ChallengeResponse_).ChallengeResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *VerifyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VerifyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VerifyRequest_FieldSubPathValue) CompareWith(source *VerifyRequest) (int, bool) {
	switch fpvs.Selector() {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return fpvs.subPathValue.(VerifyRequestAskForChallenge_FieldPathValue).CompareWith(source.GetAskForChallenge())
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return fpvs.subPathValue.(VerifyRequestChallengeResponse_FieldPathValue).CompareWith(source.GetChallengeResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *VerifyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VerifyRequest))
}

// VerifyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for VerifyRequest according to their type
// Present only for array (repeated) types.
type VerifyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyRequest_FieldPath
	ContainsValue(*VerifyRequest) bool
}

// ParseVerifyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VerifyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyRequest_FieldPathArrayItemValue), nil
}

func MustParseVerifyRequest_FieldPathArrayItemValue(pathStr, valueStr string) VerifyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyRequest_FieldTerminalPathArrayItemValue struct {
	VerifyRequest_FieldTerminalPath
	value interface{}
}

var _ VerifyRequest_FieldPathArrayItemValue = (*VerifyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyRequest as interface{}
func (fpaiv *VerifyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VerifyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VerifyRequest'
func (fpaiv *VerifyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyRequest) bool {
	slice := fpaiv.VerifyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VerifyRequest_FieldSubPathArrayItemValue struct {
	VerifyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VerifyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VerifyRequest_FieldSubPathArrayItemValue) AsAskForChallengePathItemValue() (VerifyRequestAskForChallenge_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VerifyRequestAskForChallenge_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *VerifyRequest_FieldSubPathArrayItemValue) AsChallengeResponsePathItemValue() (VerifyRequestChallengeResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VerifyRequestChallengeResponse_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VerifyRequest'
func (fpaivs *VerifyRequest_FieldSubPathArrayItemValue) ContainsValue(source *VerifyRequest) bool {
	switch fpaivs.Selector() {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		return fpaivs.subPathItemValue.(VerifyRequestAskForChallenge_FieldPathArrayItemValue).ContainsValue(source.GetAskForChallenge())
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		return fpaivs.subPathItemValue.(VerifyRequestChallengeResponse_FieldPathArrayItemValue).ContainsValue(source.GetChallengeResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest: %d", fpaivs.Selector()))
	}
}

// VerifyRequest_FieldPathArrayOfValues allows storing slice of values for VerifyRequest fields according to their type
type VerifyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyRequest_FieldPath
}

func ParseVerifyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VerifyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyRequest_FieldPathArrayOfValues), nil
}

func MustParseVerifyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyRequest_FieldTerminalPathArrayOfValues struct {
	VerifyRequest_FieldTerminalPath
	values interface{}
}

var _ VerifyRequest_FieldPathArrayOfValues = (*VerifyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyRequest_FieldPathSelectorAskForChallenge:
		for _, v := range fpaov.values.([]*VerifyRequest_AskForChallenge) {
			values = append(values, v)
		}
	case VerifyRequest_FieldPathSelectorChallengeResponse:
		for _, v := range fpaov.values.([]*VerifyRequest_ChallengeResponse) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyRequest_FieldTerminalPathArrayOfValues) AsAskForChallengeArrayOfValues() ([]*VerifyRequest_AskForChallenge, bool) {
	res, ok := fpaov.values.([]*VerifyRequest_AskForChallenge)
	return res, ok
}
func (fpaov *VerifyRequest_FieldTerminalPathArrayOfValues) AsChallengeResponseArrayOfValues() ([]*VerifyRequest_ChallengeResponse, bool) {
	res, ok := fpaov.values.([]*VerifyRequest_ChallengeResponse)
	return res, ok
}

type VerifyRequest_FieldSubPathArrayOfValues struct {
	VerifyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VerifyRequest_FieldPathArrayOfValues = (*VerifyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VerifyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VerifyRequest_FieldSubPathArrayOfValues) AsAskForChallengePathArrayOfValues() (VerifyRequestAskForChallenge_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VerifyRequestAskForChallenge_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *VerifyRequest_FieldSubPathArrayOfValues) AsChallengeResponsePathArrayOfValues() (VerifyRequestChallengeResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VerifyRequestChallengeResponse_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyRequestAskForChallenge_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyRequestAskForChallenge_FieldPathSelector
	Get(source *VerifyRequest_AskForChallenge) []interface{}
	GetSingle(source *VerifyRequest_AskForChallenge) (interface{}, bool)
	ClearValue(item *VerifyRequest_AskForChallenge)

	// Those methods build corresponding VerifyRequestAskForChallenge_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyRequestAskForChallenge_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyRequestAskForChallenge_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyRequestAskForChallenge_FieldPathArrayItemValue
}

type VerifyRequestAskForChallenge_FieldPathSelector int32

const (
	VerifyRequestAskForChallenge_FieldPathSelectorSubject           VerifyRequestAskForChallenge_FieldPathSelector = 0
	VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain VerifyRequestAskForChallenge_FieldPathSelector = 1
	VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion        VerifyRequestAskForChallenge_FieldPathSelector = 2
	VerifyRequestAskForChallenge_FieldPathSelectorEkpub             VerifyRequestAskForChallenge_FieldPathSelector = 3
	VerifyRequestAskForChallenge_FieldPathSelectorEkcert            VerifyRequestAskForChallenge_FieldPathSelector = 4
	VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl         VerifyRequestAskForChallenge_FieldPathSelector = 5
	VerifyRequestAskForChallenge_FieldPathSelectorAkpub             VerifyRequestAskForChallenge_FieldPathSelector = 6
	VerifyRequestAskForChallenge_FieldPathSelectorCreationData      VerifyRequestAskForChallenge_FieldPathSelector = 7
	VerifyRequestAskForChallenge_FieldPathSelectorAttest            VerifyRequestAskForChallenge_FieldPathSelector = 8
	VerifyRequestAskForChallenge_FieldPathSelectorSignature         VerifyRequestAskForChallenge_FieldPathSelector = 9
	VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat   VerifyRequestAskForChallenge_FieldPathSelector = 10
)

func (s VerifyRequestAskForChallenge_FieldPathSelector) String() string {
	switch s {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		return "subject"
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		return "attestation_domain"
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		return "tpm_version"
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		return "ekpub"
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		return "ekcert"
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		return "ekcerturl"
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		return "akpub"
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		return "creation_data"
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		return "attest"
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		return "signature"
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		return "challenge_format"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", s))
	}
}

func BuildVerifyRequestAskForChallenge_FieldPath(fp gotenobject.RawFieldPath) (VerifyRequestAskForChallenge_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyRequest_AskForChallenge")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "subject":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorSubject}, nil
		case "attestation_domain", "attestationDomain", "attestation-domain":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain}, nil
		case "tpm_version", "tpmVersion", "tpm-version":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion}, nil
		case "ekpub":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkpub}, nil
		case "ekcert":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkcert}, nil
		case "ekcerturl":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl}, nil
		case "akpub":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAkpub}, nil
		case "creation_data", "creationData", "creation-data":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorCreationData}, nil
		case "attest":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorAttest}, nil
		case "signature":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorSignature}, nil
		case "challenge_format", "challengeFormat", "challenge-format":
			return &VerifyRequestAskForChallenge_FieldTerminalPath{selector: VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyRequest_AskForChallenge", fp)
}

func ParseVerifyRequestAskForChallenge_FieldPath(rawField string) (VerifyRequestAskForChallenge_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyRequestAskForChallenge_FieldPath(fp)
}

func MustParseVerifyRequestAskForChallenge_FieldPath(rawField string) VerifyRequestAskForChallenge_FieldPath {
	fp, err := ParseVerifyRequestAskForChallenge_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyRequestAskForChallenge_FieldTerminalPath struct {
	selector VerifyRequestAskForChallenge_FieldPathSelector
}

var _ VerifyRequestAskForChallenge_FieldPath = (*VerifyRequestAskForChallenge_FieldTerminalPath)(nil)

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) Selector() VerifyRequestAskForChallenge_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyRequest_AskForChallenge
func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) Get(source *VerifyRequest_AskForChallenge) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
			values = append(values, source.Subject)
		case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
			if source.AttestationDomain != nil {
				values = append(values, source.AttestationDomain)
			}
		case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
			values = append(values, source.TpmVersion)
		case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
			values = append(values, source.Ekpub)
		case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
			values = append(values, source.Ekcert)
		case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
			values = append(values, source.Ekcerturl)
		case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
			values = append(values, source.Akpub)
		case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
			values = append(values, source.CreationData)
		case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
			values = append(values, source.Attest)
		case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
			values = append(values, source.Signature)
		case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
			values = append(values, source.ChallengeFormat)
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyRequest_AskForChallenge))
}

// GetSingle returns value pointed by specific field of from source VerifyRequest_AskForChallenge
func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) GetSingle(source *VerifyRequest_AskForChallenge) (interface{}, bool) {
	switch fp.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		return source.GetSubject(), source != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		res := source.GetAttestationDomain()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		return source.GetTpmVersion(), source != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		res := source.GetEkpub()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		res := source.GetEkcert()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		return source.GetEkcerturl(), source != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		res := source.GetAkpub()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		res := source.GetCreationData()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		res := source.GetAttest()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		res := source.GetSignature()
		return res, res != nil
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		return source.GetChallengeFormat(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
	}
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyRequest_AskForChallenge))
}

// GetDefault returns a default value of the field type
func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		return ""
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		return (*attestation_domain.Reference)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		return iam_common.TpmVersion_TPMVAGNOSTIC
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		return ([]byte)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		return ([]byte)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		return ""
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		return ([]byte)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		return ([]byte)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		return ([]byte)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		return ([]byte)(nil)
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		return VerifyRequest_AskForChallenge_TPM20_CREDENTIAL
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
	}
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) ClearValue(item *VerifyRequest_AskForChallenge) {
	if item != nil {
		switch fp.selector {
		case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
			item.Subject = ""
		case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
			item.AttestationDomain = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
			item.TpmVersion = iam_common.TpmVersion_TPMVAGNOSTIC
		case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
			item.Ekpub = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
			item.Ekcert = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
			item.Ekcerturl = ""
		case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
			item.Akpub = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
			item.CreationData = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
			item.Attest = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
			item.Signature = nil
		case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
			item.ChallengeFormat = VerifyRequest_AskForChallenge_TPM20_CREDENTIAL
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
		}
	}
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyRequest_AskForChallenge))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorSubject ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorEkpub ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorEkcert ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorAkpub ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorCreationData ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorAttest ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorSignature ||
		fp.selector == VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) WithIValue(value interface{}) VerifyRequestAskForChallenge_FieldPathValue {
	switch fp.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.(string)}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.(iam_common.TpmVersion)}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.(string)}
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		return &VerifyRequestAskForChallenge_FieldTerminalPathValue{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, value: value.(VerifyRequest_AskForChallenge_ChallengeFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
	}
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyRequestAskForChallenge_FieldPathArrayOfValues {
	fpaov := &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([]string)}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Reference)}
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([]iam_common.TpmVersion)}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([]string)}
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		return &VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues{VerifyRequestAskForChallenge_FieldTerminalPath: *fp, values: values.([]VerifyRequest_AskForChallenge_ChallengeFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyRequestAskForChallenge_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fp.selector))
	}
}

func (fp *VerifyRequestAskForChallenge_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VerifyRequestAskForChallenge_FieldPathValue allows storing values for AskForChallenge fields according to their type
type VerifyRequestAskForChallenge_FieldPathValue interface {
	VerifyRequestAskForChallenge_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyRequest_AskForChallenge)
	CompareWith(*VerifyRequest_AskForChallenge) (cmp int, comparable bool)
}

func ParseVerifyRequestAskForChallenge_FieldPathValue(pathStr, valueStr string) (VerifyRequestAskForChallenge_FieldPathValue, error) {
	fp, err := ParseVerifyRequestAskForChallenge_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AskForChallenge field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyRequestAskForChallenge_FieldPathValue), nil
}

func MustParseVerifyRequestAskForChallenge_FieldPathValue(pathStr, valueStr string) VerifyRequestAskForChallenge_FieldPathValue {
	fpv, err := ParseVerifyRequestAskForChallenge_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyRequestAskForChallenge_FieldTerminalPathValue struct {
	VerifyRequestAskForChallenge_FieldTerminalPath
	value interface{}
}

var _ VerifyRequestAskForChallenge_FieldPathValue = (*VerifyRequestAskForChallenge_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AskForChallenge' as interface{}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsSubjectValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsAttestationDomainValue() (*attestation_domain.Reference, bool) {
	res, ok := fpv.value.(*attestation_domain.Reference)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsTpmVersionValue() (iam_common.TpmVersion, bool) {
	res, ok := fpv.value.(iam_common.TpmVersion)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsEkpubValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsEkcertValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsEkcerturlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsAkpubValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsCreationDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsAttestValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsSignatureValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) AsChallengeFormatValue() (VerifyRequest_AskForChallenge_ChallengeFormat, bool) {
	res, ok := fpv.value.(VerifyRequest_AskForChallenge_ChallengeFormat)
	return res, ok
}

// SetTo stores value for selected field for object AskForChallenge
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) SetTo(target **VerifyRequest_AskForChallenge) {
	if *target == nil {
		*target = new(VerifyRequest_AskForChallenge)
	}
	switch fpv.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		(*target).Subject = fpv.value.(string)
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		(*target).AttestationDomain = fpv.value.(*attestation_domain.Reference)
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		(*target).TpmVersion = fpv.value.(iam_common.TpmVersion)
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		(*target).Ekpub = fpv.value.([]byte)
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		(*target).Ekcert = fpv.value.([]byte)
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		(*target).Ekcerturl = fpv.value.(string)
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		(*target).Akpub = fpv.value.([]byte)
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		(*target).CreationData = fpv.value.([]byte)
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		(*target).Attest = fpv.value.([]byte)
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		(*target).Signature = fpv.value.([]byte)
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		(*target).ChallengeFormat = fpv.value.(VerifyRequest_AskForChallenge_ChallengeFormat)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fpv.selector))
	}
}

func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyRequest_AskForChallenge)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyRequestAskForChallenge_FieldTerminalPathValue' with the value under path in 'VerifyRequest_AskForChallenge'.
func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) CompareWith(source *VerifyRequest_AskForChallenge) (int, bool) {
	switch fpv.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		leftValue := fpv.value.(string)
		rightValue := source.GetSubject()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		leftValue := fpv.value.(*attestation_domain.Reference)
		rightValue := source.GetAttestationDomain()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		leftValue := fpv.value.(iam_common.TpmVersion)
		rightValue := source.GetTpmVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		return 0, false
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		return 0, false
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		leftValue := fpv.value.(string)
		rightValue := source.GetEkcerturl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		return 0, false
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		return 0, false
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		return 0, false
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		return 0, false
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		leftValue := fpv.value.(VerifyRequest_AskForChallenge_ChallengeFormat)
		rightValue := source.GetChallengeFormat()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_AskForChallenge: %d", fpv.selector))
	}
}

func (fpv *VerifyRequestAskForChallenge_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyRequest_AskForChallenge))
}

// VerifyRequestAskForChallenge_FieldPathArrayItemValue allows storing single item in Path-specific values for AskForChallenge according to their type
// Present only for array (repeated) types.
type VerifyRequestAskForChallenge_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyRequestAskForChallenge_FieldPath
	ContainsValue(*VerifyRequest_AskForChallenge) bool
}

// ParseVerifyRequestAskForChallenge_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyRequestAskForChallenge_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyRequestAskForChallenge_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyRequestAskForChallenge_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AskForChallenge field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyRequestAskForChallenge_FieldPathArrayItemValue), nil
}

func MustParseVerifyRequestAskForChallenge_FieldPathArrayItemValue(pathStr, valueStr string) VerifyRequestAskForChallenge_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyRequestAskForChallenge_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyRequestAskForChallenge_FieldTerminalPathArrayItemValue struct {
	VerifyRequestAskForChallenge_FieldTerminalPath
	value interface{}
}

var _ VerifyRequestAskForChallenge_FieldPathArrayItemValue = (*VerifyRequestAskForChallenge_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyRequest_AskForChallenge as interface{}
func (fpaiv *VerifyRequestAskForChallenge_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VerifyRequestAskForChallenge_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyRequest_AskForChallenge) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyRequestAskForChallenge_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyRequest_AskForChallenge))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AskForChallenge'
func (fpaiv *VerifyRequestAskForChallenge_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyRequest_AskForChallenge) bool {
	slice := fpaiv.VerifyRequestAskForChallenge_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VerifyRequestAskForChallenge_FieldPathArrayOfValues allows storing slice of values for AskForChallenge fields according to their type
type VerifyRequestAskForChallenge_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyRequestAskForChallenge_FieldPath
}

func ParseVerifyRequestAskForChallenge_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyRequestAskForChallenge_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyRequestAskForChallenge_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AskForChallenge field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyRequestAskForChallenge_FieldPathArrayOfValues), nil
}

func MustParseVerifyRequestAskForChallenge_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyRequestAskForChallenge_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyRequestAskForChallenge_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues struct {
	VerifyRequestAskForChallenge_FieldTerminalPath
	values interface{}
}

var _ VerifyRequestAskForChallenge_FieldPathArrayOfValues = (*VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyRequestAskForChallenge_FieldPathSelectorSubject:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttestationDomain:
		for _, v := range fpaov.values.([]*attestation_domain.Reference) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorTpmVersion:
		for _, v := range fpaov.values.([]iam_common.TpmVersion) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkpub:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcert:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorEkcerturl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorAkpub:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorCreationData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorAttest:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorSignature:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestAskForChallenge_FieldPathSelectorChallengeFormat:
		for _, v := range fpaov.values.([]VerifyRequest_AskForChallenge_ChallengeFormat) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsSubjectArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsAttestationDomainArrayOfValues() ([]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Reference)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsTpmVersionArrayOfValues() ([]iam_common.TpmVersion, bool) {
	res, ok := fpaov.values.([]iam_common.TpmVersion)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsEkpubArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsEkcertArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsEkcerturlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsAkpubArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsCreationDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsAttestArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsSignatureArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestAskForChallenge_FieldTerminalPathArrayOfValues) AsChallengeFormatArrayOfValues() ([]VerifyRequest_AskForChallenge_ChallengeFormat, bool) {
	res, ok := fpaov.values.([]VerifyRequest_AskForChallenge_ChallengeFormat)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyRequestChallengeResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyRequestChallengeResponse_FieldPathSelector
	Get(source *VerifyRequest_ChallengeResponse) []interface{}
	GetSingle(source *VerifyRequest_ChallengeResponse) (interface{}, bool)
	ClearValue(item *VerifyRequest_ChallengeResponse)

	// Those methods build corresponding VerifyRequestChallengeResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyRequestChallengeResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyRequestChallengeResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyRequestChallengeResponse_FieldPathArrayItemValue
}

type VerifyRequestChallengeResponse_FieldPathSelector int32

const (
	VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret VerifyRequestChallengeResponse_FieldPathSelector = 0
	VerifyRequestChallengeResponse_FieldPathSelectorQuotes                      VerifyRequestChallengeResponse_FieldPathSelector = 1
	VerifyRequestChallengeResponse_FieldPathSelectorPcrs                        VerifyRequestChallengeResponse_FieldPathSelector = 2
	VerifyRequestChallengeResponse_FieldPathSelectorEventlog                    VerifyRequestChallengeResponse_FieldPathSelector = 3
)

func (s VerifyRequestChallengeResponse_FieldPathSelector) String() string {
	switch s {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		return "ak_activation_decrypted_secret"
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return "quotes"
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return "pcrs"
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		return "eventlog"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", s))
	}
}

func BuildVerifyRequestChallengeResponse_FieldPath(fp gotenobject.RawFieldPath) (VerifyRequestChallengeResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyRequest_ChallengeResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "ak_activation_decrypted_secret", "akActivationDecryptedSecret", "ak-activation-decrypted-secret":
			return &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret}, nil
		case "quotes":
			return &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorQuotes}, nil
		case "pcrs":
			return &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorPcrs}, nil
		case "eventlog":
			return &VerifyRequestChallengeResponse_FieldTerminalPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorEventlog}, nil
		}
	} else {
		switch fp[0] {
		case "quotes":
			if subpath, err := BuildVerifyRequestChallengeResponseQuote_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VerifyRequestChallengeResponse_FieldSubPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorQuotes, subPath: subpath}, nil
			}
		case "pcrs":
			if subpath, err := iam_common.BuildPCR_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VerifyRequestChallengeResponse_FieldSubPath{selector: VerifyRequestChallengeResponse_FieldPathSelectorPcrs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyRequest_ChallengeResponse", fp)
}

func ParseVerifyRequestChallengeResponse_FieldPath(rawField string) (VerifyRequestChallengeResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyRequestChallengeResponse_FieldPath(fp)
}

func MustParseVerifyRequestChallengeResponse_FieldPath(rawField string) VerifyRequestChallengeResponse_FieldPath {
	fp, err := ParseVerifyRequestChallengeResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyRequestChallengeResponse_FieldTerminalPath struct {
	selector VerifyRequestChallengeResponse_FieldPathSelector
}

var _ VerifyRequestChallengeResponse_FieldPath = (*VerifyRequestChallengeResponse_FieldTerminalPath)(nil)

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) Selector() VerifyRequestChallengeResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyRequest_ChallengeResponse
func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) Get(source *VerifyRequest_ChallengeResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
			values = append(values, source.AkActivationDecryptedSecret)
		case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
			for _, value := range source.GetQuotes() {
				values = append(values, value)
			}
		case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
			for _, value := range source.GetPcrs() {
				values = append(values, value)
			}
		case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
			values = append(values, source.Eventlog)
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyRequest_ChallengeResponse))
}

// GetSingle returns value pointed by specific field of from source VerifyRequest_ChallengeResponse
func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) GetSingle(source *VerifyRequest_ChallengeResponse) (interface{}, bool) {
	switch fp.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		res := source.GetAkActivationDecryptedSecret()
		return res, res != nil
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		res := source.GetQuotes()
		return res, res != nil
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		res := source.GetPcrs()
		return res, res != nil
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		res := source.GetEventlog()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyRequest_ChallengeResponse))
}

// GetDefault returns a default value of the field type
func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		return ([]byte)(nil)
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return ([]*VerifyRequest_ChallengeResponse_Quote)(nil)
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return ([]*iam_common.PCR)(nil)
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) ClearValue(item *VerifyRequest_ChallengeResponse) {
	if item != nil {
		switch fp.selector {
		case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
			item.AkActivationDecryptedSecret = nil
		case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
			item.Quotes = nil
		case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
			item.Pcrs = nil
		case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
			item.Eventlog = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
		}
	}
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyRequest_ChallengeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret ||
		fp.selector == VerifyRequestChallengeResponse_FieldPathSelectorEventlog
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) WithIValue(value interface{}) VerifyRequestChallengeResponse_FieldPathValue {
	switch fp.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		return &VerifyRequestChallengeResponse_FieldTerminalPathValue{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return &VerifyRequestChallengeResponse_FieldTerminalPathValue{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, value: value.([]*VerifyRequest_ChallengeResponse_Quote)}
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return &VerifyRequestChallengeResponse_FieldTerminalPathValue{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, value: value.([]*iam_common.PCR)}
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		return &VerifyRequestChallengeResponse_FieldTerminalPathValue{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyRequestChallengeResponse_FieldPathArrayOfValues {
	fpaov := &VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		return &VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return &VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, values: values.([][]*VerifyRequest_ChallengeResponse_Quote)}
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return &VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, values: values.([][]*iam_common.PCR)}
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		return &VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyRequestChallengeResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return &VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, value: value.(*VerifyRequest_ChallengeResponse_Quote)}
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return &VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue{VerifyRequestChallengeResponse_FieldTerminalPath: *fp, value: value.(*iam_common.PCR)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VerifyRequestChallengeResponse_FieldSubPath struct {
	selector VerifyRequestChallengeResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VerifyRequestChallengeResponse_FieldPath = (*VerifyRequestChallengeResponse_FieldSubPath)(nil)

func (fps *VerifyRequestChallengeResponse_FieldSubPath) Selector() VerifyRequestChallengeResponse_FieldPathSelector {
	return fps.selector
}
func (fps *VerifyRequestChallengeResponse_FieldSubPath) AsQuotesSubPath() (VerifyRequestChallengeResponseQuote_FieldPath, bool) {
	res, ok := fps.subPath.(VerifyRequestChallengeResponseQuote_FieldPath)
	return res, ok
}
func (fps *VerifyRequestChallengeResponse_FieldSubPath) AsPcrsSubPath() (iam_common.PCR_FieldPath, bool) {
	res, ok := fps.subPath.(iam_common.PCR_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VerifyRequestChallengeResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VerifyRequestChallengeResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VerifyRequest_ChallengeResponse
func (fps *VerifyRequestChallengeResponse_FieldSubPath) Get(source *VerifyRequest_ChallengeResponse) (values []interface{}) {
	switch fps.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		for _, item := range source.GetQuotes() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		for _, item := range source.GetPcrs() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fps.selector))
	}
	return
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VerifyRequest_ChallengeResponse))
}

// GetSingle returns value of selected field from source VerifyRequest_ChallengeResponse
func (fps *VerifyRequestChallengeResponse_FieldSubPath) GetSingle(source *VerifyRequest_ChallengeResponse) (interface{}, bool) {
	switch fps.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		if len(source.GetQuotes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQuotes()[0])
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		if len(source.GetPcrs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPcrs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fps.selector))
	}
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VerifyRequest_ChallengeResponse))
}

// GetDefault returns a default value of the field type
func (fps *VerifyRequestChallengeResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) ClearValue(item *VerifyRequest_ChallengeResponse) {
	if item != nil {
		switch fps.selector {
		case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
			for _, subItem := range item.Quotes {
				fps.subPath.ClearValueRaw(subItem)
			}
		case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
			for _, subItem := range item.Pcrs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fps.selector))
		}
	}
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VerifyRequest_ChallengeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *VerifyRequestChallengeResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VerifyRequestChallengeResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) WithIValue(value interface{}) VerifyRequestChallengeResponse_FieldPathValue {
	return &VerifyRequestChallengeResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) WithIArrayOfValues(values interface{}) VerifyRequestChallengeResponse_FieldPathArrayOfValues {
	return &VerifyRequestChallengeResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) WithIArrayItemValue(value interface{}) VerifyRequestChallengeResponse_FieldPathArrayItemValue {
	return &VerifyRequestChallengeResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VerifyRequestChallengeResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VerifyRequestChallengeResponse_FieldPathValue allows storing values for ChallengeResponse fields according to their type
type VerifyRequestChallengeResponse_FieldPathValue interface {
	VerifyRequestChallengeResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyRequest_ChallengeResponse)
	CompareWith(*VerifyRequest_ChallengeResponse) (cmp int, comparable bool)
}

func ParseVerifyRequestChallengeResponse_FieldPathValue(pathStr, valueStr string) (VerifyRequestChallengeResponse_FieldPathValue, error) {
	fp, err := ParseVerifyRequestChallengeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChallengeResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyRequestChallengeResponse_FieldPathValue), nil
}

func MustParseVerifyRequestChallengeResponse_FieldPathValue(pathStr, valueStr string) VerifyRequestChallengeResponse_FieldPathValue {
	fpv, err := ParseVerifyRequestChallengeResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyRequestChallengeResponse_FieldTerminalPathValue struct {
	VerifyRequestChallengeResponse_FieldTerminalPath
	value interface{}
}

var _ VerifyRequestChallengeResponse_FieldPathValue = (*VerifyRequestChallengeResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChallengeResponse' as interface{}
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) AsAkActivationDecryptedSecretValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) AsQuotesValue() ([]*VerifyRequest_ChallengeResponse_Quote, bool) {
	res, ok := fpv.value.([]*VerifyRequest_ChallengeResponse_Quote)
	return res, ok
}
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) AsPcrsValue() ([]*iam_common.PCR, bool) {
	res, ok := fpv.value.([]*iam_common.PCR)
	return res, ok
}
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) AsEventlogValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object ChallengeResponse
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) SetTo(target **VerifyRequest_ChallengeResponse) {
	if *target == nil {
		*target = new(VerifyRequest_ChallengeResponse)
	}
	switch fpv.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		(*target).AkActivationDecryptedSecret = fpv.value.([]byte)
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		(*target).Quotes = fpv.value.([]*VerifyRequest_ChallengeResponse_Quote)
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		(*target).Pcrs = fpv.value.([]*iam_common.PCR)
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		(*target).Eventlog = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fpv.selector))
	}
}

func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyRequest_ChallengeResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyRequestChallengeResponse_FieldTerminalPathValue' with the value under path in 'VerifyRequest_ChallengeResponse'.
func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) CompareWith(source *VerifyRequest_ChallengeResponse) (int, bool) {
	switch fpv.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		return 0, false
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return 0, false
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return 0, false
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fpv.selector))
	}
}

func (fpv *VerifyRequestChallengeResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyRequest_ChallengeResponse))
}

type VerifyRequestChallengeResponse_FieldSubPathValue struct {
	VerifyRequestChallengeResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VerifyRequestChallengeResponse_FieldPathValue = (*VerifyRequestChallengeResponse_FieldSubPathValue)(nil)

func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) AsQuotesPathValue() (VerifyRequestChallengeResponseQuote_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VerifyRequestChallengeResponseQuote_FieldPathValue)
	return res, ok
}
func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) AsPcrsPathValue() (iam_common.PCR_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(iam_common.PCR_FieldPathValue)
	return res, ok
}

func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) SetTo(target **VerifyRequest_ChallengeResponse) {
	if *target == nil {
		*target = new(VerifyRequest_ChallengeResponse)
	}
	switch fpvs.Selector() {
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		panic("FieldPath setter is unsupported for array subpaths")
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyRequest_ChallengeResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) CompareWith(source *VerifyRequest_ChallengeResponse) (int, bool) {
	switch fpvs.Selector() {
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return 0, false // repeated field
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *VerifyRequestChallengeResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VerifyRequest_ChallengeResponse))
}

// VerifyRequestChallengeResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ChallengeResponse according to their type
// Present only for array (repeated) types.
type VerifyRequestChallengeResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyRequestChallengeResponse_FieldPath
	ContainsValue(*VerifyRequest_ChallengeResponse) bool
}

// ParseVerifyRequestChallengeResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyRequestChallengeResponse_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyRequestChallengeResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyRequestChallengeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChallengeResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyRequestChallengeResponse_FieldPathArrayItemValue), nil
}

func MustParseVerifyRequestChallengeResponse_FieldPathArrayItemValue(pathStr, valueStr string) VerifyRequestChallengeResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyRequestChallengeResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue struct {
	VerifyRequestChallengeResponse_FieldTerminalPath
	value interface{}
}

var _ VerifyRequestChallengeResponse_FieldPathArrayItemValue = (*VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyRequest_ChallengeResponse as interface{}
func (fpaiv *VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue) AsQuotesItemValue() (*VerifyRequest_ChallengeResponse_Quote, bool) {
	res, ok := fpaiv.value.(*VerifyRequest_ChallengeResponse_Quote)
	return res, ok
}
func (fpaiv *VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue) AsPcrsItemValue() (*iam_common.PCR, bool) {
	res, ok := fpaiv.value.(*iam_common.PCR)
	return res, ok
}

func (fpaiv *VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyRequest_ChallengeResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyRequest_ChallengeResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChallengeResponse'
func (fpaiv *VerifyRequestChallengeResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyRequest_ChallengeResponse) bool {
	slice := fpaiv.VerifyRequestChallengeResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VerifyRequestChallengeResponse_FieldSubPathArrayItemValue struct {
	VerifyRequestChallengeResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VerifyRequestChallengeResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VerifyRequestChallengeResponse_FieldSubPathArrayItemValue) AsQuotesPathItemValue() (VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *VerifyRequestChallengeResponse_FieldSubPathArrayItemValue) AsPcrsPathItemValue() (iam_common.PCR_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(iam_common.PCR_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChallengeResponse'
func (fpaivs *VerifyRequestChallengeResponse_FieldSubPathArrayItemValue) ContainsValue(source *VerifyRequest_ChallengeResponse) bool {
	switch fpaivs.Selector() {
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		return false // repeated/map field
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse: %d", fpaivs.Selector()))
	}
}

// VerifyRequestChallengeResponse_FieldPathArrayOfValues allows storing slice of values for ChallengeResponse fields according to their type
type VerifyRequestChallengeResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyRequestChallengeResponse_FieldPath
}

func ParseVerifyRequestChallengeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyRequestChallengeResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyRequestChallengeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChallengeResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyRequestChallengeResponse_FieldPathArrayOfValues), nil
}

func MustParseVerifyRequestChallengeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyRequestChallengeResponse_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyRequestChallengeResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues struct {
	VerifyRequestChallengeResponse_FieldTerminalPath
	values interface{}
}

var _ VerifyRequestChallengeResponse_FieldPathArrayOfValues = (*VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyRequestChallengeResponse_FieldPathSelectorAkActivationDecryptedSecret:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestChallengeResponse_FieldPathSelectorQuotes:
		for _, v := range fpaov.values.([][]*VerifyRequest_ChallengeResponse_Quote) {
			values = append(values, v)
		}
	case VerifyRequestChallengeResponse_FieldPathSelectorPcrs:
		for _, v := range fpaov.values.([][]*iam_common.PCR) {
			values = append(values, v)
		}
	case VerifyRequestChallengeResponse_FieldPathSelectorEventlog:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues) AsAkActivationDecryptedSecretArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues) AsQuotesArrayOfValues() ([][]*VerifyRequest_ChallengeResponse_Quote, bool) {
	res, ok := fpaov.values.([][]*VerifyRequest_ChallengeResponse_Quote)
	return res, ok
}
func (fpaov *VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues) AsPcrsArrayOfValues() ([][]*iam_common.PCR, bool) {
	res, ok := fpaov.values.([][]*iam_common.PCR)
	return res, ok
}
func (fpaov *VerifyRequestChallengeResponse_FieldTerminalPathArrayOfValues) AsEventlogArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

type VerifyRequestChallengeResponse_FieldSubPathArrayOfValues struct {
	VerifyRequestChallengeResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VerifyRequestChallengeResponse_FieldPathArrayOfValues = (*VerifyRequestChallengeResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VerifyRequestChallengeResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VerifyRequestChallengeResponse_FieldSubPathArrayOfValues) AsQuotesPathArrayOfValues() (VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *VerifyRequestChallengeResponse_FieldSubPathArrayOfValues) AsPcrsPathArrayOfValues() (iam_common.PCR_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(iam_common.PCR_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyRequestChallengeResponseQuote_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyRequestChallengeResponseQuote_FieldPathSelector
	Get(source *VerifyRequest_ChallengeResponse_Quote) []interface{}
	GetSingle(source *VerifyRequest_ChallengeResponse_Quote) (interface{}, bool)
	ClearValue(item *VerifyRequest_ChallengeResponse_Quote)

	// Those methods build corresponding VerifyRequestChallengeResponseQuote_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyRequestChallengeResponseQuote_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue
}

type VerifyRequestChallengeResponseQuote_FieldPathSelector int32

const (
	VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote     VerifyRequestChallengeResponseQuote_FieldPathSelector = 0
	VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature VerifyRequestChallengeResponseQuote_FieldPathSelector = 1
)

func (s VerifyRequestChallengeResponseQuote_FieldPathSelector) String() string {
	switch s {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		return "quote"
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		return "signature"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", s))
	}
}

func BuildVerifyRequestChallengeResponseQuote_FieldPath(fp gotenobject.RawFieldPath) (VerifyRequestChallengeResponseQuote_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyRequest_ChallengeResponse_Quote")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "quote":
			return &VerifyRequestChallengeResponseQuote_FieldTerminalPath{selector: VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote}, nil
		case "signature":
			return &VerifyRequestChallengeResponseQuote_FieldTerminalPath{selector: VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyRequest_ChallengeResponse_Quote", fp)
}

func ParseVerifyRequestChallengeResponseQuote_FieldPath(rawField string) (VerifyRequestChallengeResponseQuote_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyRequestChallengeResponseQuote_FieldPath(fp)
}

func MustParseVerifyRequestChallengeResponseQuote_FieldPath(rawField string) VerifyRequestChallengeResponseQuote_FieldPath {
	fp, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyRequestChallengeResponseQuote_FieldTerminalPath struct {
	selector VerifyRequestChallengeResponseQuote_FieldPathSelector
}

var _ VerifyRequestChallengeResponseQuote_FieldPath = (*VerifyRequestChallengeResponseQuote_FieldTerminalPath)(nil)

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) Selector() VerifyRequestChallengeResponseQuote_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyRequest_ChallengeResponse_Quote
func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) Get(source *VerifyRequest_ChallengeResponse_Quote) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
			values = append(values, source.Quote)
		case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
			values = append(values, source.Signature)
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyRequest_ChallengeResponse_Quote))
}

// GetSingle returns value pointed by specific field of from source VerifyRequest_ChallengeResponse_Quote
func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) GetSingle(source *VerifyRequest_ChallengeResponse_Quote) (interface{}, bool) {
	switch fp.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		res := source.GetQuote()
		return res, res != nil
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		res := source.GetSignature()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyRequest_ChallengeResponse_Quote))
}

// GetDefault returns a default value of the field type
func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		return ([]byte)(nil)
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) ClearValue(item *VerifyRequest_ChallengeResponse_Quote) {
	if item != nil {
		switch fp.selector {
		case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
			item.Quote = nil
		case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
			item.Signature = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
		}
	}
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyRequest_ChallengeResponse_Quote))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote ||
		fp.selector == VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) WithIValue(value interface{}) VerifyRequestChallengeResponseQuote_FieldPathValue {
	switch fp.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		return &VerifyRequestChallengeResponseQuote_FieldTerminalPathValue{VerifyRequestChallengeResponseQuote_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		return &VerifyRequestChallengeResponseQuote_FieldTerminalPathValue{VerifyRequestChallengeResponseQuote_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues {
	fpaov := &VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponseQuote_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		return &VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponseQuote_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		return &VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues{VerifyRequestChallengeResponseQuote_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fp.selector))
	}
}

func (fp *VerifyRequestChallengeResponseQuote_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VerifyRequestChallengeResponseQuote_FieldPathValue allows storing values for Quote fields according to their type
type VerifyRequestChallengeResponseQuote_FieldPathValue interface {
	VerifyRequestChallengeResponseQuote_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyRequest_ChallengeResponse_Quote)
	CompareWith(*VerifyRequest_ChallengeResponse_Quote) (cmp int, comparable bool)
}

func ParseVerifyRequestChallengeResponseQuote_FieldPathValue(pathStr, valueStr string) (VerifyRequestChallengeResponseQuote_FieldPathValue, error) {
	fp, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Quote field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyRequestChallengeResponseQuote_FieldPathValue), nil
}

func MustParseVerifyRequestChallengeResponseQuote_FieldPathValue(pathStr, valueStr string) VerifyRequestChallengeResponseQuote_FieldPathValue {
	fpv, err := ParseVerifyRequestChallengeResponseQuote_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyRequestChallengeResponseQuote_FieldTerminalPathValue struct {
	VerifyRequestChallengeResponseQuote_FieldTerminalPath
	value interface{}
}

var _ VerifyRequestChallengeResponseQuote_FieldPathValue = (*VerifyRequestChallengeResponseQuote_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Quote' as interface{}
func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) AsQuoteValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) AsSignatureValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object Quote
func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) SetTo(target **VerifyRequest_ChallengeResponse_Quote) {
	if *target == nil {
		*target = new(VerifyRequest_ChallengeResponse_Quote)
	}
	switch fpv.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		(*target).Quote = fpv.value.([]byte)
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		(*target).Signature = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fpv.selector))
	}
}

func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyRequest_ChallengeResponse_Quote)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyRequestChallengeResponseQuote_FieldTerminalPathValue' with the value under path in 'VerifyRequest_ChallengeResponse_Quote'.
func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) CompareWith(source *VerifyRequest_ChallengeResponse_Quote) (int, bool) {
	switch fpv.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		return 0, false
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyRequest_ChallengeResponse_Quote: %d", fpv.selector))
	}
}

func (fpv *VerifyRequestChallengeResponseQuote_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyRequest_ChallengeResponse_Quote))
}

// VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue allows storing single item in Path-specific values for Quote according to their type
// Present only for array (repeated) types.
type VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyRequestChallengeResponseQuote_FieldPath
	ContainsValue(*VerifyRequest_ChallengeResponse_Quote) bool
}

// ParseVerifyRequestChallengeResponseQuote_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyRequestChallengeResponseQuote_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Quote field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue), nil
}

func MustParseVerifyRequestChallengeResponseQuote_FieldPathArrayItemValue(pathStr, valueStr string) VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyRequestChallengeResponseQuote_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayItemValue struct {
	VerifyRequestChallengeResponseQuote_FieldTerminalPath
	value interface{}
}

var _ VerifyRequestChallengeResponseQuote_FieldPathArrayItemValue = (*VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyRequest_ChallengeResponse_Quote as interface{}
func (fpaiv *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyRequest_ChallengeResponse_Quote) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyRequest_ChallengeResponse_Quote))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Quote'
func (fpaiv *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyRequest_ChallengeResponse_Quote) bool {
	slice := fpaiv.VerifyRequestChallengeResponseQuote_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues allows storing slice of values for Quote fields according to their type
type VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyRequestChallengeResponseQuote_FieldPath
}

func ParseVerifyRequestChallengeResponseQuote_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyRequestChallengeResponseQuote_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Quote field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues), nil
}

func MustParseVerifyRequestChallengeResponseQuote_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyRequestChallengeResponseQuote_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues struct {
	VerifyRequestChallengeResponseQuote_FieldTerminalPath
	values interface{}
}

var _ VerifyRequestChallengeResponseQuote_FieldPathArrayOfValues = (*VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorQuote:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyRequestChallengeResponseQuote_FieldPathSelectorSignature:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues) AsQuoteArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyRequestChallengeResponseQuote_FieldTerminalPathArrayOfValues) AsSignatureArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyResponse_FieldPathSelector
	Get(source *VerifyResponse) []interface{}
	GetSingle(source *VerifyResponse) (interface{}, bool)
	ClearValue(item *VerifyResponse)

	// Those methods build corresponding VerifyResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyResponse_FieldPathArrayItemValue
}

type VerifyResponse_FieldPathSelector int32

const (
	VerifyResponse_FieldPathSelectorChallenge             VerifyResponse_FieldPathSelector = 0
	VerifyResponse_FieldPathSelectorAttestationSuccessful VerifyResponse_FieldPathSelector = 1
)

func (s VerifyResponse_FieldPathSelector) String() string {
	switch s {
	case VerifyResponse_FieldPathSelectorChallenge:
		return "challenge"
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return "attestation_successful"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", s))
	}
}

func BuildVerifyResponse_FieldPath(fp gotenobject.RawFieldPath) (VerifyResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "challenge":
			return &VerifyResponse_FieldTerminalPath{selector: VerifyResponse_FieldPathSelectorChallenge}, nil
		case "attestation_successful", "attestationSuccessful", "attestation-successful":
			return &VerifyResponse_FieldTerminalPath{selector: VerifyResponse_FieldPathSelectorAttestationSuccessful}, nil
		}
	} else {
		switch fp[0] {
		case "challenge":
			if subpath, err := BuildVerifyResponseChallenge_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VerifyResponse_FieldSubPath{selector: VerifyResponse_FieldPathSelectorChallenge, subPath: subpath}, nil
			}
		case "attestation_successful", "attestationSuccessful", "attestation-successful":
			if subpath, err := BuildVerifyResponseAttestationSuccessful_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &VerifyResponse_FieldSubPath{selector: VerifyResponse_FieldPathSelectorAttestationSuccessful, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyResponse", fp)
}

func ParseVerifyResponse_FieldPath(rawField string) (VerifyResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyResponse_FieldPath(fp)
}

func MustParseVerifyResponse_FieldPath(rawField string) VerifyResponse_FieldPath {
	fp, err := ParseVerifyResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyResponse_FieldTerminalPath struct {
	selector VerifyResponse_FieldPathSelector
}

var _ VerifyResponse_FieldPath = (*VerifyResponse_FieldTerminalPath)(nil)

func (fp *VerifyResponse_FieldTerminalPath) Selector() VerifyResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyResponse
func (fp *VerifyResponse_FieldTerminalPath) Get(source *VerifyResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyResponse_FieldPathSelectorChallenge:
			if source, ok := source.Msg.(*VerifyResponse_Challenge_); ok && source != nil {
				if source.Challenge != nil {
					values = append(values, source.Challenge)
				}
			}
		case VerifyResponse_FieldPathSelectorAttestationSuccessful:
			if source, ok := source.Msg.(*VerifyResponse_AttestationSuccessful_); ok && source != nil {
				if source.AttestationSuccessful != nil {
					values = append(values, source.AttestationSuccessful)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyResponse))
}

// GetSingle returns value pointed by specific field of from source VerifyResponse
func (fp *VerifyResponse_FieldTerminalPath) GetSingle(source *VerifyResponse) (interface{}, bool) {
	switch fp.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		res := source.GetChallenge()
		return res, res != nil
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		res := source.GetAttestationSuccessful()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
	}
}

func (fp *VerifyResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyResponse))
}

// GetDefault returns a default value of the field type
func (fp *VerifyResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		return (*VerifyResponse_Challenge)(nil)
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return (*VerifyResponse_AttestationSuccessful)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
	}
}

func (fp *VerifyResponse_FieldTerminalPath) ClearValue(item *VerifyResponse) {
	if item != nil {
		switch fp.selector {
		case VerifyResponse_FieldPathSelectorChallenge:
			if item, ok := item.Msg.(*VerifyResponse_Challenge_); ok {
				item.Challenge = nil
			}
		case VerifyResponse_FieldPathSelectorAttestationSuccessful:
			if item, ok := item.Msg.(*VerifyResponse_AttestationSuccessful_); ok {
				item.AttestationSuccessful = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
		}
	}
}

func (fp *VerifyResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *VerifyResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyResponse_FieldTerminalPath) WithIValue(value interface{}) VerifyResponse_FieldPathValue {
	switch fp.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		return &VerifyResponse_FieldTerminalPathValue{VerifyResponse_FieldTerminalPath: *fp, value: value.(*VerifyResponse_Challenge)}
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return &VerifyResponse_FieldTerminalPathValue{VerifyResponse_FieldTerminalPath: *fp, value: value.(*VerifyResponse_AttestationSuccessful)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
	}
}

func (fp *VerifyResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyResponse_FieldPathArrayOfValues {
	fpaov := &VerifyResponse_FieldTerminalPathArrayOfValues{VerifyResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		return &VerifyResponse_FieldTerminalPathArrayOfValues{VerifyResponse_FieldTerminalPath: *fp, values: values.([]*VerifyResponse_Challenge)}
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return &VerifyResponse_FieldTerminalPathArrayOfValues{VerifyResponse_FieldTerminalPath: *fp, values: values.([]*VerifyResponse_AttestationSuccessful)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fp.selector))
	}
}

func (fp *VerifyResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type VerifyResponse_FieldSubPath struct {
	selector VerifyResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ VerifyResponse_FieldPath = (*VerifyResponse_FieldSubPath)(nil)

func (fps *VerifyResponse_FieldSubPath) Selector() VerifyResponse_FieldPathSelector {
	return fps.selector
}
func (fps *VerifyResponse_FieldSubPath) AsChallengeSubPath() (VerifyResponseChallenge_FieldPath, bool) {
	res, ok := fps.subPath.(VerifyResponseChallenge_FieldPath)
	return res, ok
}
func (fps *VerifyResponse_FieldSubPath) AsAttestationSuccessfulSubPath() (VerifyResponseAttestationSuccessful_FieldPath, bool) {
	res, ok := fps.subPath.(VerifyResponseAttestationSuccessful_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *VerifyResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *VerifyResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source VerifyResponse
func (fps *VerifyResponse_FieldSubPath) Get(source *VerifyResponse) (values []interface{}) {
	switch fps.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		values = append(values, fps.subPath.GetRaw(source.GetChallenge())...)
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		values = append(values, fps.subPath.GetRaw(source.GetAttestationSuccessful())...)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fps.selector))
	}
	return
}

func (fps *VerifyResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*VerifyResponse))
}

// GetSingle returns value of selected field from source VerifyResponse
func (fps *VerifyResponse_FieldSubPath) GetSingle(source *VerifyResponse) (interface{}, bool) {
	switch fps.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		if source.GetChallenge() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChallenge())
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		if source.GetAttestationSuccessful() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAttestationSuccessful())
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fps.selector))
	}
}

func (fps *VerifyResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*VerifyResponse))
}

// GetDefault returns a default value of the field type
func (fps *VerifyResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *VerifyResponse_FieldSubPath) ClearValue(item *VerifyResponse) {
	if item != nil {
		switch fps.selector {
		case VerifyResponse_FieldPathSelectorChallenge:
			if item.Msg != nil {
				if item, ok := item.Msg.(*VerifyResponse_Challenge_); ok {
					fps.subPath.ClearValueRaw(item.Challenge)
				}
			}
		case VerifyResponse_FieldPathSelectorAttestationSuccessful:
			if item.Msg != nil {
				if item, ok := item.Msg.(*VerifyResponse_AttestationSuccessful_); ok {
					fps.subPath.ClearValueRaw(item.AttestationSuccessful)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fps.selector))
		}
	}
}

func (fps *VerifyResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*VerifyResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *VerifyResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *VerifyResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&VerifyResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *VerifyResponse_FieldSubPath) WithIValue(value interface{}) VerifyResponse_FieldPathValue {
	return &VerifyResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *VerifyResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *VerifyResponse_FieldSubPath) WithIArrayOfValues(values interface{}) VerifyResponse_FieldPathArrayOfValues {
	return &VerifyResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *VerifyResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *VerifyResponse_FieldSubPath) WithIArrayItemValue(value interface{}) VerifyResponse_FieldPathArrayItemValue {
	return &VerifyResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *VerifyResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// VerifyResponse_FieldPathValue allows storing values for VerifyResponse fields according to their type
type VerifyResponse_FieldPathValue interface {
	VerifyResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyResponse)
	CompareWith(*VerifyResponse) (cmp int, comparable bool)
}

func ParseVerifyResponse_FieldPathValue(pathStr, valueStr string) (VerifyResponse_FieldPathValue, error) {
	fp, err := ParseVerifyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VerifyResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyResponse_FieldPathValue), nil
}

func MustParseVerifyResponse_FieldPathValue(pathStr, valueStr string) VerifyResponse_FieldPathValue {
	fpv, err := ParseVerifyResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyResponse_FieldTerminalPathValue struct {
	VerifyResponse_FieldTerminalPath
	value interface{}
}

var _ VerifyResponse_FieldPathValue = (*VerifyResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VerifyResponse' as interface{}
func (fpv *VerifyResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyResponse_FieldTerminalPathValue) AsChallengeValue() (*VerifyResponse_Challenge, bool) {
	res, ok := fpv.value.(*VerifyResponse_Challenge)
	return res, ok
}
func (fpv *VerifyResponse_FieldTerminalPathValue) AsAttestationSuccessfulValue() (*VerifyResponse_AttestationSuccessful, bool) {
	res, ok := fpv.value.(*VerifyResponse_AttestationSuccessful)
	return res, ok
}

// SetTo stores value for selected field for object VerifyResponse
func (fpv *VerifyResponse_FieldTerminalPathValue) SetTo(target **VerifyResponse) {
	if *target == nil {
		*target = new(VerifyResponse)
	}
	switch fpv.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		if _, ok := (*target).Msg.(*VerifyResponse_Challenge_); !ok {
			(*target).Msg = &VerifyResponse_Challenge_{}
		}
		(*target).Msg.(*VerifyResponse_Challenge_).Challenge = fpv.value.(*VerifyResponse_Challenge)
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		if _, ok := (*target).Msg.(*VerifyResponse_AttestationSuccessful_); !ok {
			(*target).Msg = &VerifyResponse_AttestationSuccessful_{}
		}
		(*target).Msg.(*VerifyResponse_AttestationSuccessful_).AttestationSuccessful = fpv.value.(*VerifyResponse_AttestationSuccessful)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fpv.selector))
	}
}

func (fpv *VerifyResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyResponse_FieldTerminalPathValue' with the value under path in 'VerifyResponse'.
func (fpv *VerifyResponse_FieldTerminalPathValue) CompareWith(source *VerifyResponse) (int, bool) {
	switch fpv.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		return 0, false
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fpv.selector))
	}
}

func (fpv *VerifyResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyResponse))
}

type VerifyResponse_FieldSubPathValue struct {
	VerifyResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ VerifyResponse_FieldPathValue = (*VerifyResponse_FieldSubPathValue)(nil)

func (fpvs *VerifyResponse_FieldSubPathValue) AsChallengePathValue() (VerifyResponseChallenge_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VerifyResponseChallenge_FieldPathValue)
	return res, ok
}
func (fpvs *VerifyResponse_FieldSubPathValue) AsAttestationSuccessfulPathValue() (VerifyResponseAttestationSuccessful_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(VerifyResponseAttestationSuccessful_FieldPathValue)
	return res, ok
}

func (fpvs *VerifyResponse_FieldSubPathValue) SetTo(target **VerifyResponse) {
	if *target == nil {
		*target = new(VerifyResponse)
	}
	switch fpvs.Selector() {
	case VerifyResponse_FieldPathSelectorChallenge:
		if _, ok := (*target).Msg.(*VerifyResponse_Challenge_); !ok {
			(*target).Msg = &VerifyResponse_Challenge_{}
		}
		fpvs.subPathValue.(VerifyResponseChallenge_FieldPathValue).SetTo(&(*target).Msg.(*VerifyResponse_Challenge_).Challenge)
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		if _, ok := (*target).Msg.(*VerifyResponse_AttestationSuccessful_); !ok {
			(*target).Msg = &VerifyResponse_AttestationSuccessful_{}
		}
		fpvs.subPathValue.(VerifyResponseAttestationSuccessful_FieldPathValue).SetTo(&(*target).Msg.(*VerifyResponse_AttestationSuccessful_).AttestationSuccessful)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *VerifyResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *VerifyResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *VerifyResponse_FieldSubPathValue) CompareWith(source *VerifyResponse) (int, bool) {
	switch fpvs.Selector() {
	case VerifyResponse_FieldPathSelectorChallenge:
		return fpvs.subPathValue.(VerifyResponseChallenge_FieldPathValue).CompareWith(source.GetChallenge())
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return fpvs.subPathValue.(VerifyResponseAttestationSuccessful_FieldPathValue).CompareWith(source.GetAttestationSuccessful())
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *VerifyResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*VerifyResponse))
}

// VerifyResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for VerifyResponse according to their type
// Present only for array (repeated) types.
type VerifyResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyResponse_FieldPath
	ContainsValue(*VerifyResponse) bool
}

// ParseVerifyResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyResponse_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VerifyResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyResponse_FieldPathArrayItemValue), nil
}

func MustParseVerifyResponse_FieldPathArrayItemValue(pathStr, valueStr string) VerifyResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyResponse_FieldTerminalPathArrayItemValue struct {
	VerifyResponse_FieldTerminalPath
	value interface{}
}

var _ VerifyResponse_FieldPathArrayItemValue = (*VerifyResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyResponse as interface{}
func (fpaiv *VerifyResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VerifyResponse_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VerifyResponse'
func (fpaiv *VerifyResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyResponse) bool {
	slice := fpaiv.VerifyResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type VerifyResponse_FieldSubPathArrayItemValue struct {
	VerifyResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *VerifyResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *VerifyResponse_FieldSubPathArrayItemValue) AsChallengePathItemValue() (VerifyResponseChallenge_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VerifyResponseChallenge_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *VerifyResponse_FieldSubPathArrayItemValue) AsAttestationSuccessfulPathItemValue() (VerifyResponseAttestationSuccessful_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(VerifyResponseAttestationSuccessful_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VerifyResponse'
func (fpaivs *VerifyResponse_FieldSubPathArrayItemValue) ContainsValue(source *VerifyResponse) bool {
	switch fpaivs.Selector() {
	case VerifyResponse_FieldPathSelectorChallenge:
		return fpaivs.subPathItemValue.(VerifyResponseChallenge_FieldPathArrayItemValue).ContainsValue(source.GetChallenge())
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		return fpaivs.subPathItemValue.(VerifyResponseAttestationSuccessful_FieldPathArrayItemValue).ContainsValue(source.GetAttestationSuccessful())
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse: %d", fpaivs.Selector()))
	}
}

// VerifyResponse_FieldPathArrayOfValues allows storing slice of values for VerifyResponse fields according to their type
type VerifyResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyResponse_FieldPath
}

func ParseVerifyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VerifyResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyResponse_FieldPathArrayOfValues), nil
}

func MustParseVerifyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyResponse_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyResponse_FieldTerminalPathArrayOfValues struct {
	VerifyResponse_FieldTerminalPath
	values interface{}
}

var _ VerifyResponse_FieldPathArrayOfValues = (*VerifyResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyResponse_FieldPathSelectorChallenge:
		for _, v := range fpaov.values.([]*VerifyResponse_Challenge) {
			values = append(values, v)
		}
	case VerifyResponse_FieldPathSelectorAttestationSuccessful:
		for _, v := range fpaov.values.([]*VerifyResponse_AttestationSuccessful) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyResponse_FieldTerminalPathArrayOfValues) AsChallengeArrayOfValues() ([]*VerifyResponse_Challenge, bool) {
	res, ok := fpaov.values.([]*VerifyResponse_Challenge)
	return res, ok
}
func (fpaov *VerifyResponse_FieldTerminalPathArrayOfValues) AsAttestationSuccessfulArrayOfValues() ([]*VerifyResponse_AttestationSuccessful, bool) {
	res, ok := fpaov.values.([]*VerifyResponse_AttestationSuccessful)
	return res, ok
}

type VerifyResponse_FieldSubPathArrayOfValues struct {
	VerifyResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ VerifyResponse_FieldPathArrayOfValues = (*VerifyResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *VerifyResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *VerifyResponse_FieldSubPathArrayOfValues) AsChallengePathArrayOfValues() (VerifyResponseChallenge_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VerifyResponseChallenge_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *VerifyResponse_FieldSubPathArrayOfValues) AsAttestationSuccessfulPathArrayOfValues() (VerifyResponseAttestationSuccessful_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(VerifyResponseAttestationSuccessful_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyResponseChallenge_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyResponseChallenge_FieldPathSelector
	Get(source *VerifyResponse_Challenge) []interface{}
	GetSingle(source *VerifyResponse_Challenge) (interface{}, bool)
	ClearValue(item *VerifyResponse_Challenge)

	// Those methods build corresponding VerifyResponseChallenge_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyResponseChallenge_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyResponseChallenge_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyResponseChallenge_FieldPathArrayItemValue
}

type VerifyResponseChallenge_FieldPathSelector int32

const (
	VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce VerifyResponseChallenge_FieldPathSelector = 0
	VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub     VerifyResponseChallenge_FieldPathSelector = 1
	VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred    VerifyResponseChallenge_FieldPathSelector = 2
)

func (s VerifyResponseChallenge_FieldPathSelector) String() string {
	switch s {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		return "platform_attestation_nonce"
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		return "cred_encrypted_by_ekpub"
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		return "secret_encrypted_by_cred"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", s))
	}
}

func BuildVerifyResponseChallenge_FieldPath(fp gotenobject.RawFieldPath) (VerifyResponseChallenge_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyResponse_Challenge")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "platform_attestation_nonce", "platformAttestationNonce", "platform-attestation-nonce":
			return &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce}, nil
		case "cred_encrypted_by_ekpub", "credEncryptedByEkpub", "cred-encrypted-by-ekpub":
			return &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub}, nil
		case "secret_encrypted_by_cred", "secretEncryptedByCred", "secret-encrypted-by-cred":
			return &VerifyResponseChallenge_FieldTerminalPath{selector: VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyResponse_Challenge", fp)
}

func ParseVerifyResponseChallenge_FieldPath(rawField string) (VerifyResponseChallenge_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyResponseChallenge_FieldPath(fp)
}

func MustParseVerifyResponseChallenge_FieldPath(rawField string) VerifyResponseChallenge_FieldPath {
	fp, err := ParseVerifyResponseChallenge_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyResponseChallenge_FieldTerminalPath struct {
	selector VerifyResponseChallenge_FieldPathSelector
}

var _ VerifyResponseChallenge_FieldPath = (*VerifyResponseChallenge_FieldTerminalPath)(nil)

func (fp *VerifyResponseChallenge_FieldTerminalPath) Selector() VerifyResponseChallenge_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyResponseChallenge_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyResponseChallenge_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyResponse_Challenge
func (fp *VerifyResponseChallenge_FieldTerminalPath) Get(source *VerifyResponse_Challenge) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
			values = append(values, source.PlatformAttestationNonce)
		case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
			values = append(values, source.CredEncryptedByEkpub)
		case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
			values = append(values, source.SecretEncryptedByCred)
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyResponse_Challenge))
}

// GetSingle returns value pointed by specific field of from source VerifyResponse_Challenge
func (fp *VerifyResponseChallenge_FieldTerminalPath) GetSingle(source *VerifyResponse_Challenge) (interface{}, bool) {
	switch fp.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		res := source.GetPlatformAttestationNonce()
		return res, res != nil
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		res := source.GetCredEncryptedByEkpub()
		return res, res != nil
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		res := source.GetSecretEncryptedByCred()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
	}
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyResponse_Challenge))
}

// GetDefault returns a default value of the field type
func (fp *VerifyResponseChallenge_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		return ([]byte)(nil)
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		return ([]byte)(nil)
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
	}
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) ClearValue(item *VerifyResponse_Challenge) {
	if item != nil {
		switch fp.selector {
		case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
			item.PlatformAttestationNonce = nil
		case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
			item.CredEncryptedByEkpub = nil
		case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
			item.SecretEncryptedByCred = nil
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
		}
	}
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyResponse_Challenge))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyResponseChallenge_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce ||
		fp.selector == VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub ||
		fp.selector == VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) WithIValue(value interface{}) VerifyResponseChallenge_FieldPathValue {
	switch fp.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		return &VerifyResponseChallenge_FieldTerminalPathValue{VerifyResponseChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		return &VerifyResponseChallenge_FieldTerminalPathValue{VerifyResponseChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		return &VerifyResponseChallenge_FieldTerminalPathValue{VerifyResponseChallenge_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
	}
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyResponseChallenge_FieldPathArrayOfValues {
	fpaov := &VerifyResponseChallenge_FieldTerminalPathArrayOfValues{VerifyResponseChallenge_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		return &VerifyResponseChallenge_FieldTerminalPathArrayOfValues{VerifyResponseChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		return &VerifyResponseChallenge_FieldTerminalPathArrayOfValues{VerifyResponseChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		return &VerifyResponseChallenge_FieldTerminalPathArrayOfValues{VerifyResponseChallenge_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyResponseChallenge_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fp.selector))
	}
}

func (fp *VerifyResponseChallenge_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VerifyResponseChallenge_FieldPathValue allows storing values for Challenge fields according to their type
type VerifyResponseChallenge_FieldPathValue interface {
	VerifyResponseChallenge_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyResponse_Challenge)
	CompareWith(*VerifyResponse_Challenge) (cmp int, comparable bool)
}

func ParseVerifyResponseChallenge_FieldPathValue(pathStr, valueStr string) (VerifyResponseChallenge_FieldPathValue, error) {
	fp, err := ParseVerifyResponseChallenge_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Challenge field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyResponseChallenge_FieldPathValue), nil
}

func MustParseVerifyResponseChallenge_FieldPathValue(pathStr, valueStr string) VerifyResponseChallenge_FieldPathValue {
	fpv, err := ParseVerifyResponseChallenge_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyResponseChallenge_FieldTerminalPathValue struct {
	VerifyResponseChallenge_FieldTerminalPath
	value interface{}
}

var _ VerifyResponseChallenge_FieldPathValue = (*VerifyResponseChallenge_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Challenge' as interface{}
func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) AsPlatformAttestationNonceValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) AsCredEncryptedByEkpubValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) AsSecretEncryptedByCredValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object Challenge
func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) SetTo(target **VerifyResponse_Challenge) {
	if *target == nil {
		*target = new(VerifyResponse_Challenge)
	}
	switch fpv.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		(*target).PlatformAttestationNonce = fpv.value.([]byte)
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		(*target).CredEncryptedByEkpub = fpv.value.([]byte)
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		(*target).SecretEncryptedByCred = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fpv.selector))
	}
}

func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyResponse_Challenge)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyResponseChallenge_FieldTerminalPathValue' with the value under path in 'VerifyResponse_Challenge'.
func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) CompareWith(source *VerifyResponse_Challenge) (int, bool) {
	switch fpv.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		return 0, false
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		return 0, false
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_Challenge: %d", fpv.selector))
	}
}

func (fpv *VerifyResponseChallenge_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyResponse_Challenge))
}

// VerifyResponseChallenge_FieldPathArrayItemValue allows storing single item in Path-specific values for Challenge according to their type
// Present only for array (repeated) types.
type VerifyResponseChallenge_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyResponseChallenge_FieldPath
	ContainsValue(*VerifyResponse_Challenge) bool
}

// ParseVerifyResponseChallenge_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyResponseChallenge_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyResponseChallenge_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyResponseChallenge_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Challenge field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyResponseChallenge_FieldPathArrayItemValue), nil
}

func MustParseVerifyResponseChallenge_FieldPathArrayItemValue(pathStr, valueStr string) VerifyResponseChallenge_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyResponseChallenge_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyResponseChallenge_FieldTerminalPathArrayItemValue struct {
	VerifyResponseChallenge_FieldTerminalPath
	value interface{}
}

var _ VerifyResponseChallenge_FieldPathArrayItemValue = (*VerifyResponseChallenge_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyResponse_Challenge as interface{}
func (fpaiv *VerifyResponseChallenge_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VerifyResponseChallenge_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyResponse_Challenge) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyResponseChallenge_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyResponse_Challenge))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Challenge'
func (fpaiv *VerifyResponseChallenge_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyResponse_Challenge) bool {
	slice := fpaiv.VerifyResponseChallenge_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VerifyResponseChallenge_FieldPathArrayOfValues allows storing slice of values for Challenge fields according to their type
type VerifyResponseChallenge_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyResponseChallenge_FieldPath
}

func ParseVerifyResponseChallenge_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyResponseChallenge_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyResponseChallenge_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Challenge field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyResponseChallenge_FieldPathArrayOfValues), nil
}

func MustParseVerifyResponseChallenge_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyResponseChallenge_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyResponseChallenge_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyResponseChallenge_FieldTerminalPathArrayOfValues struct {
	VerifyResponseChallenge_FieldTerminalPath
	values interface{}
}

var _ VerifyResponseChallenge_FieldPathArrayOfValues = (*VerifyResponseChallenge_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyResponseChallenge_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyResponseChallenge_FieldPathSelectorPlatformAttestationNonce:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyResponseChallenge_FieldPathSelectorCredEncryptedByEkpub:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case VerifyResponseChallenge_FieldPathSelectorSecretEncryptedByCred:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyResponseChallenge_FieldTerminalPathArrayOfValues) AsPlatformAttestationNonceArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyResponseChallenge_FieldTerminalPathArrayOfValues) AsCredEncryptedByEkpubArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *VerifyResponseChallenge_FieldTerminalPathArrayOfValues) AsSecretEncryptedByCredArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type VerifyResponseAttestationSuccessful_FieldPath interface {
	gotenobject.FieldPath
	Selector() VerifyResponseAttestationSuccessful_FieldPathSelector
	Get(source *VerifyResponse_AttestationSuccessful) []interface{}
	GetSingle(source *VerifyResponse_AttestationSuccessful) (interface{}, bool)
	ClearValue(item *VerifyResponse_AttestationSuccessful)

	// Those methods build corresponding VerifyResponseAttestationSuccessful_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) VerifyResponseAttestationSuccessful_FieldPathValue
	WithIArrayOfValues(values interface{}) VerifyResponseAttestationSuccessful_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) VerifyResponseAttestationSuccessful_FieldPathArrayItemValue
}

type VerifyResponseAttestationSuccessful_FieldPathSelector int32

const (
	VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken VerifyResponseAttestationSuccessful_FieldPathSelector = 0
)

func (s VerifyResponseAttestationSuccessful_FieldPathSelector) String() string {
	switch s {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		return "attestation_token"
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", s))
	}
}

func BuildVerifyResponseAttestationSuccessful_FieldPath(fp gotenobject.RawFieldPath) (VerifyResponseAttestationSuccessful_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object VerifyResponse_AttestationSuccessful")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "attestation_token", "attestationToken", "attestation-token":
			return &VerifyResponseAttestationSuccessful_FieldTerminalPath{selector: VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object VerifyResponse_AttestationSuccessful", fp)
}

func ParseVerifyResponseAttestationSuccessful_FieldPath(rawField string) (VerifyResponseAttestationSuccessful_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildVerifyResponseAttestationSuccessful_FieldPath(fp)
}

func MustParseVerifyResponseAttestationSuccessful_FieldPath(rawField string) VerifyResponseAttestationSuccessful_FieldPath {
	fp, err := ParseVerifyResponseAttestationSuccessful_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type VerifyResponseAttestationSuccessful_FieldTerminalPath struct {
	selector VerifyResponseAttestationSuccessful_FieldPathSelector
}

var _ VerifyResponseAttestationSuccessful_FieldPath = (*VerifyResponseAttestationSuccessful_FieldTerminalPath)(nil)

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) Selector() VerifyResponseAttestationSuccessful_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source VerifyResponse_AttestationSuccessful
func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) Get(source *VerifyResponse_AttestationSuccessful) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
			values = append(values, source.AttestationToken)
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
		}
	}
	return
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*VerifyResponse_AttestationSuccessful))
}

// GetSingle returns value pointed by specific field of from source VerifyResponse_AttestationSuccessful
func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) GetSingle(source *VerifyResponse_AttestationSuccessful) (interface{}, bool) {
	switch fp.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		return source.GetAttestationToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
	}
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*VerifyResponse_AttestationSuccessful))
}

// GetDefault returns a default value of the field type
func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
	}
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) ClearValue(item *VerifyResponse_AttestationSuccessful) {
	if item != nil {
		switch fp.selector {
		case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
			item.AttestationToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
		}
	}
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*VerifyResponse_AttestationSuccessful))
}

// IsLeaf - whether field path is holds simple value
func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) WithIValue(value interface{}) VerifyResponseAttestationSuccessful_FieldPathValue {
	switch fp.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		return &VerifyResponseAttestationSuccessful_FieldTerminalPathValue{VerifyResponseAttestationSuccessful_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
	}
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) WithIArrayOfValues(values interface{}) VerifyResponseAttestationSuccessful_FieldPathArrayOfValues {
	fpaov := &VerifyResponseAttestationSuccessful_FieldTerminalPathArrayOfValues{VerifyResponseAttestationSuccessful_FieldTerminalPath: *fp}
	switch fp.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		return &VerifyResponseAttestationSuccessful_FieldTerminalPathArrayOfValues{VerifyResponseAttestationSuccessful_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
	}
	return fpaov
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) WithIArrayItemValue(value interface{}) VerifyResponseAttestationSuccessful_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fp.selector))
	}
}

func (fp *VerifyResponseAttestationSuccessful_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// VerifyResponseAttestationSuccessful_FieldPathValue allows storing values for AttestationSuccessful fields according to their type
type VerifyResponseAttestationSuccessful_FieldPathValue interface {
	VerifyResponseAttestationSuccessful_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **VerifyResponse_AttestationSuccessful)
	CompareWith(*VerifyResponse_AttestationSuccessful) (cmp int, comparable bool)
}

func ParseVerifyResponseAttestationSuccessful_FieldPathValue(pathStr, valueStr string) (VerifyResponseAttestationSuccessful_FieldPathValue, error) {
	fp, err := ParseVerifyResponseAttestationSuccessful_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationSuccessful field path value from %s: %v", valueStr, err)
	}
	return fpv.(VerifyResponseAttestationSuccessful_FieldPathValue), nil
}

func MustParseVerifyResponseAttestationSuccessful_FieldPathValue(pathStr, valueStr string) VerifyResponseAttestationSuccessful_FieldPathValue {
	fpv, err := ParseVerifyResponseAttestationSuccessful_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type VerifyResponseAttestationSuccessful_FieldTerminalPathValue struct {
	VerifyResponseAttestationSuccessful_FieldTerminalPath
	value interface{}
}

var _ VerifyResponseAttestationSuccessful_FieldPathValue = (*VerifyResponseAttestationSuccessful_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AttestationSuccessful' as interface{}
func (fpv *VerifyResponseAttestationSuccessful_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *VerifyResponseAttestationSuccessful_FieldTerminalPathValue) AsAttestationTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object AttestationSuccessful
func (fpv *VerifyResponseAttestationSuccessful_FieldTerminalPathValue) SetTo(target **VerifyResponse_AttestationSuccessful) {
	if *target == nil {
		*target = new(VerifyResponse_AttestationSuccessful)
	}
	switch fpv.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		(*target).AttestationToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fpv.selector))
	}
}

func (fpv *VerifyResponseAttestationSuccessful_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*VerifyResponse_AttestationSuccessful)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'VerifyResponseAttestationSuccessful_FieldTerminalPathValue' with the value under path in 'VerifyResponse_AttestationSuccessful'.
func (fpv *VerifyResponseAttestationSuccessful_FieldTerminalPathValue) CompareWith(source *VerifyResponse_AttestationSuccessful) (int, bool) {
	switch fpv.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetAttestationToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for VerifyResponse_AttestationSuccessful: %d", fpv.selector))
	}
}

func (fpv *VerifyResponseAttestationSuccessful_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*VerifyResponse_AttestationSuccessful))
}

// VerifyResponseAttestationSuccessful_FieldPathArrayItemValue allows storing single item in Path-specific values for AttestationSuccessful according to their type
// Present only for array (repeated) types.
type VerifyResponseAttestationSuccessful_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	VerifyResponseAttestationSuccessful_FieldPath
	ContainsValue(*VerifyResponse_AttestationSuccessful) bool
}

// ParseVerifyResponseAttestationSuccessful_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseVerifyResponseAttestationSuccessful_FieldPathArrayItemValue(pathStr, valueStr string) (VerifyResponseAttestationSuccessful_FieldPathArrayItemValue, error) {
	fp, err := ParseVerifyResponseAttestationSuccessful_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationSuccessful field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(VerifyResponseAttestationSuccessful_FieldPathArrayItemValue), nil
}

func MustParseVerifyResponseAttestationSuccessful_FieldPathArrayItemValue(pathStr, valueStr string) VerifyResponseAttestationSuccessful_FieldPathArrayItemValue {
	fpaiv, err := ParseVerifyResponseAttestationSuccessful_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type VerifyResponseAttestationSuccessful_FieldTerminalPathArrayItemValue struct {
	VerifyResponseAttestationSuccessful_FieldTerminalPath
	value interface{}
}

var _ VerifyResponseAttestationSuccessful_FieldPathArrayItemValue = (*VerifyResponseAttestationSuccessful_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object VerifyResponse_AttestationSuccessful as interface{}
func (fpaiv *VerifyResponseAttestationSuccessful_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *VerifyResponseAttestationSuccessful_FieldTerminalPathArrayItemValue) GetSingle(source *VerifyResponse_AttestationSuccessful) (interface{}, bool) {
	return nil, false
}

func (fpaiv *VerifyResponseAttestationSuccessful_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*VerifyResponse_AttestationSuccessful))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AttestationSuccessful'
func (fpaiv *VerifyResponseAttestationSuccessful_FieldTerminalPathArrayItemValue) ContainsValue(source *VerifyResponse_AttestationSuccessful) bool {
	slice := fpaiv.VerifyResponseAttestationSuccessful_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// VerifyResponseAttestationSuccessful_FieldPathArrayOfValues allows storing slice of values for AttestationSuccessful fields according to their type
type VerifyResponseAttestationSuccessful_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	VerifyResponseAttestationSuccessful_FieldPath
}

func ParseVerifyResponseAttestationSuccessful_FieldPathArrayOfValues(pathStr, valuesStr string) (VerifyResponseAttestationSuccessful_FieldPathArrayOfValues, error) {
	fp, err := ParseVerifyResponseAttestationSuccessful_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationSuccessful field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(VerifyResponseAttestationSuccessful_FieldPathArrayOfValues), nil
}

func MustParseVerifyResponseAttestationSuccessful_FieldPathArrayOfValues(pathStr, valuesStr string) VerifyResponseAttestationSuccessful_FieldPathArrayOfValues {
	fpaov, err := ParseVerifyResponseAttestationSuccessful_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type VerifyResponseAttestationSuccessful_FieldTerminalPathArrayOfValues struct {
	VerifyResponseAttestationSuccessful_FieldTerminalPath
	values interface{}
}

var _ VerifyResponseAttestationSuccessful_FieldPathArrayOfValues = (*VerifyResponseAttestationSuccessful_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *VerifyResponseAttestationSuccessful_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case VerifyResponseAttestationSuccessful_FieldPathSelectorAttestationToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *VerifyResponseAttestationSuccessful_FieldTerminalPathArrayOfValues) AsAttestationTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
