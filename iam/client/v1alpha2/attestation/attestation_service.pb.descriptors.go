// Code generated by protoc-gen-goten-client
// API: AttestationService
// DO NOT EDIT!!!

package attestation_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
)

var (
	descriptorsInitialized       bool
	attestationServiceDescriptor *AttestationServiceDescriptor
	verifyDescriptor             *VerifyDescriptor
)

type VerifyDescriptor struct{}

type VerifyDescriptorClientMsgHandle struct{}

type VerifyDescriptorServerMsgHandle struct{}

func (d *VerifyDescriptor) NewEmptyClientMsg() proto.Message {
	return &VerifyRequest{}
}

func (d *VerifyDescriptor) NewEmptyServerMsg() proto.Message {
	return &VerifyResponse{}
}

func (d *VerifyDescriptor) IsUnary() bool {
	return false
}

func (d *VerifyDescriptor) IsClientStream() bool {
	return true
}

func (d *VerifyDescriptor) IsServerStream() bool {
	return true
}

func (d *VerifyDescriptor) IsCollection() bool {
	return false
}

func (d *VerifyDescriptor) IsPlural() bool {
	return false
}

func (d *VerifyDescriptor) HasResource() bool {
	return true
}

func (d *VerifyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *VerifyDescriptor) GetVerb() string {
	return "verify"
}

func (d *VerifyDescriptor) GetMethodName() string {
	return "Verify"
}

func (d *VerifyDescriptor) GetFullMethodName() string {
	return "/ntt.iam.v1alpha2.AttestationService/Verify"
}

func (d *VerifyDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *VerifyDescriptor) GetApiName() string {
	return "AttestationService"
}

func (d *VerifyDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *VerifyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *VerifyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return attestationServiceDescriptor
}

func (d *VerifyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return attestation_domain.GetDescriptor()
}

func (d *VerifyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &VerifyDescriptorClientMsgHandle{}
}

func (d *VerifyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &VerifyDescriptorServerMsgHandle{}
}

func (h *VerifyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*VerifyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*VerifyRequest) *attestation_domain.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetAskForChallenge().GetAttestationDomain(); ref != nil {
			return &ref.Name
		}
	}
	return (*attestation_domain.Name)(nil)
}

func (h *VerifyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*VerifyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*VerifyRequest) []*attestation_domain.Name
	})
	if ok {
		return attestation_domain.AttestationDomainNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *VerifyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*VerifyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*VerifyRequest) *attestation_domain.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *VerifyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*VerifyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*VerifyResponse) *attestation_domain.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *VerifyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*VerifyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*VerifyResponse) []*attestation_domain.Name
	})
	if ok {
		return attestation_domain.AttestationDomainNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *VerifyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*VerifyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*VerifyResponse) *attestation_domain.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetVerifyDescriptor() *VerifyDescriptor {
	return verifyDescriptor
}

type AttestationServiceDescriptor struct{}

func (d *AttestationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		verifyDescriptor,
	}
}

func (d *AttestationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.iam.v1alpha2.AttestationService"
}

func (d *AttestationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.iam.v1alpha2"
}

func (d *AttestationServiceDescriptor) GetApiName() string {
	return "AttestationService"
}

func (d *AttestationServiceDescriptor) GetServiceDomain() string {
	return "iam.edgelq.com"
}

func (d *AttestationServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetAttestationServiceDescriptor() *AttestationServiceDescriptor {
	return attestationServiceDescriptor
}

func initDescriptors() {
	attestationServiceDescriptor = &AttestationServiceDescriptor{}
	verifyDescriptor = &VerifyDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(attestationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(verifyDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
