// Code generated by protoc-gen-goten-client
// API: ServiceAccountService
// DO NOT EDIT!!!

package service_account_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &service_account.ServiceAccount{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceAccountServiceClient is the client API for ServiceAccountService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceAccountServiceClient interface {
	GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*service_account.ServiceAccount, error)
	BatchGetServiceAccounts(ctx context.Context, in *BatchGetServiceAccountsRequest, opts ...grpc.CallOption) (*BatchGetServiceAccountsResponse, error)
	ListServiceAccounts(ctx context.Context, in *ListServiceAccountsRequest, opts ...grpc.CallOption) (*ListServiceAccountsResponse, error)
	WatchServiceAccount(ctx context.Context, in *WatchServiceAccountRequest, opts ...grpc.CallOption) (WatchServiceAccountClientStream, error)
	WatchServiceAccounts(ctx context.Context, in *WatchServiceAccountsRequest, opts ...grpc.CallOption) (WatchServiceAccountsClientStream, error)
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*service_account.ServiceAccount, error)
	UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*service_account.ServiceAccount, error)
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewServiceAccountServiceClient(cc grpc.ClientConnInterface) ServiceAccountServiceClient {
	return &client{cc}
}

func (c *client) GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*service_account.ServiceAccount, error) {
	out := new(service_account.ServiceAccount)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ServiceAccountService/GetServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetServiceAccounts(ctx context.Context, in *BatchGetServiceAccountsRequest, opts ...grpc.CallOption) (*BatchGetServiceAccountsResponse, error) {
	out := new(BatchGetServiceAccountsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ServiceAccountService/BatchGetServiceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListServiceAccounts(ctx context.Context, in *ListServiceAccountsRequest, opts ...grpc.CallOption) (*ListServiceAccountsResponse, error) {
	out := new(ListServiceAccountsResponse)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ServiceAccountService/ListServiceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchServiceAccount(ctx context.Context, in *WatchServiceAccountRequest, opts ...grpc.CallOption) (WatchServiceAccountClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchServiceAccount",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.ServiceAccountService/WatchServiceAccount", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchServiceAccountWatchServiceAccountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchServiceAccountClientStream interface {
	Recv() (*WatchServiceAccountResponse, error)
	grpc.ClientStream
}

type watchServiceAccountWatchServiceAccountClient struct {
	grpc.ClientStream
}

func (x *watchServiceAccountWatchServiceAccountClient) Recv() (*WatchServiceAccountResponse, error) {
	m := new(WatchServiceAccountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchServiceAccounts(ctx context.Context, in *WatchServiceAccountsRequest, opts ...grpc.CallOption) (WatchServiceAccountsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchServiceAccounts",
			ServerStreams: true,
		},
		"/ntt.iam.v1alpha2.ServiceAccountService/WatchServiceAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchServiceAccountsWatchServiceAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchServiceAccountsClientStream interface {
	Recv() (*WatchServiceAccountsResponse, error)
	grpc.ClientStream
}

type watchServiceAccountsWatchServiceAccountsClient struct {
	grpc.ClientStream
}

func (x *watchServiceAccountsWatchServiceAccountsClient) Recv() (*WatchServiceAccountsResponse, error) {
	m := new(WatchServiceAccountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*service_account.ServiceAccount, error) {
	out := new(service_account.ServiceAccount)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ServiceAccountService/CreateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*service_account.ServiceAccount, error) {
	out := new(service_account.ServiceAccount)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ServiceAccountService/UpdateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.iam.v1alpha2.ServiceAccountService/DeleteServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
