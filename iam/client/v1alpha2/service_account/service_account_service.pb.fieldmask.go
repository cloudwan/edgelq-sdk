// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/service_account_service.proto
// DO NOT EDIT!!!

package service_account_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &service_account.ServiceAccount{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetServiceAccountRequest_FieldMask struct {
	Paths []GetServiceAccountRequest_FieldPath
}

func FullGetServiceAccountRequest_FieldMask() *GetServiceAccountRequest_FieldMask {
	res := &GetServiceAccountRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetServiceAccountRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetServiceAccountRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetServiceAccountRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetServiceAccountRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetServiceAccountRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetServiceAccountRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetServiceAccountRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetServiceAccountRequest_FieldPath(raw)
	})
}

func (fieldMask *GetServiceAccountRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetServiceAccountRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetServiceAccountRequest_FieldMask) Subtract(other *GetServiceAccountRequest_FieldMask) *GetServiceAccountRequest_FieldMask {
	result := &GetServiceAccountRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetServiceAccountRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetServiceAccountRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetServiceAccountRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetServiceAccountRequest_FieldMask) FilterInputFields() *GetServiceAccountRequest_FieldMask {
	result := &GetServiceAccountRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetServiceAccountRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetServiceAccountRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetServiceAccountRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetServiceAccountRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetServiceAccountRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetServiceAccountRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetServiceAccountRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetServiceAccountRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetServiceAccountRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetServiceAccountRequest_FieldMask) AppendPath(path GetServiceAccountRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetServiceAccountRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetServiceAccountRequest_FieldPath))
}

func (fieldMask *GetServiceAccountRequest_FieldMask) GetPaths() []GetServiceAccountRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetServiceAccountRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetServiceAccountRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetServiceAccountRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetServiceAccountRequest_FieldMask) Set(target, source *GetServiceAccountRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetServiceAccountRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetServiceAccountRequest), source.(*GetServiceAccountRequest))
}

func (fieldMask *GetServiceAccountRequest_FieldMask) Project(source *GetServiceAccountRequest) *GetServiceAccountRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetServiceAccountRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetServiceAccountRequest_FieldTerminalPath:
			switch tp.selector {
			case GetServiceAccountRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetServiceAccountRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetServiceAccountRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetServiceAccountRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetServiceAccountRequest))
}

func (fieldMask *GetServiceAccountRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetServiceAccountsRequest_FieldMask struct {
	Paths []BatchGetServiceAccountsRequest_FieldPath
}

func FullBatchGetServiceAccountsRequest_FieldMask() *BatchGetServiceAccountsRequest_FieldMask {
	res := &BatchGetServiceAccountsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetServiceAccountsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetServiceAccountsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetServiceAccountsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) Subtract(other *BatchGetServiceAccountsRequest_FieldMask) *BatchGetServiceAccountsRequest_FieldMask {
	result := &BatchGetServiceAccountsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetServiceAccountsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetServiceAccountsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) FilterInputFields() *BatchGetServiceAccountsRequest_FieldMask {
	result := &BatchGetServiceAccountsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetServiceAccountsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetServiceAccountsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetServiceAccountsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetServiceAccountsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) AppendPath(path BatchGetServiceAccountsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetServiceAccountsRequest_FieldPath))
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) GetPaths() []BatchGetServiceAccountsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetServiceAccountsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) Set(target, source *BatchGetServiceAccountsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetServiceAccountsRequest), source.(*BatchGetServiceAccountsRequest))
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) Project(source *BatchGetServiceAccountsRequest) *BatchGetServiceAccountsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetServiceAccountsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetServiceAccountsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetServiceAccountsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetServiceAccountsRequest))
}

func (fieldMask *BatchGetServiceAccountsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetServiceAccountsResponse_FieldMask struct {
	Paths []BatchGetServiceAccountsResponse_FieldPath
}

func FullBatchGetServiceAccountsResponse_FieldMask() *BatchGetServiceAccountsResponse_FieldMask {
	res := &BatchGetServiceAccountsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts})
	res.Paths = append(res.Paths, &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetServiceAccountsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetServiceAccountsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetServiceAccountsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) Subtract(other *BatchGetServiceAccountsResponse_FieldMask) *BatchGetServiceAccountsResponse_FieldMask {
	result := &BatchGetServiceAccountsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetServiceAccountsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts: &service_account.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[BatchGetServiceAccountsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts: &service_account.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetServiceAccountsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetServiceAccountsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetServiceAccountsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
						mySubMasks[BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts] = service_account.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetServiceAccountsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetServiceAccountsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetServiceAccountsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) FilterInputFields() *BatchGetServiceAccountsResponse_FieldMask {
	result := &BatchGetServiceAccountsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			if _, ok := path.(*BatchGetServiceAccountsResponse_FieldTerminalPath); ok {
				for _, subpath := range service_account.FullServiceAccount_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetServiceAccountsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetServiceAccountsResponse_FieldSubPath); ok {
				selectedMask := &service_account.ServiceAccount_FieldMask{
					Paths: []service_account.ServiceAccount_FieldPath{sub.subPath.(service_account.ServiceAccount_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetServiceAccountsResponse_FieldSubPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetServiceAccountsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetServiceAccountsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetServiceAccountsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetServiceAccountsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) AppendPath(path BatchGetServiceAccountsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetServiceAccountsResponse_FieldPath))
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) GetPaths() []BatchGetServiceAccountsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetServiceAccountsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) Set(target, source *BatchGetServiceAccountsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetServiceAccountsResponse), source.(*BatchGetServiceAccountsResponse))
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) Project(source *BatchGetServiceAccountsResponse) *BatchGetServiceAccountsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetServiceAccountsResponse{}
	serviceAccountsMask := &service_account.ServiceAccount_FieldMask{}
	wholeServiceAccountsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetServiceAccountsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
				result.ServiceAccounts = source.ServiceAccounts
				wholeServiceAccountsAccepted = true
			case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetServiceAccountsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
				serviceAccountsMask.AppendPath(tp.subPath.(service_account.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeServiceAccountsAccepted == false && len(serviceAccountsMask.Paths) > 0 {
		for _, sourceItem := range source.GetServiceAccounts() {
			result.ServiceAccounts = append(result.ServiceAccounts, serviceAccountsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetServiceAccountsResponse))
}

func (fieldMask *BatchGetServiceAccountsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListServiceAccountsRequest_FieldMask struct {
	Paths []ListServiceAccountsRequest_FieldPath
}

func FullListServiceAccountsRequest_FieldMask() *ListServiceAccountsRequest_FieldMask {
	res := &ListServiceAccountsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListServiceAccountsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListServiceAccountsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListServiceAccountsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListServiceAccountsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListServiceAccountsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) Subtract(other *ListServiceAccountsRequest_FieldMask) *ListServiceAccountsRequest_FieldMask {
	result := &ListServiceAccountsRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListServiceAccountsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListServiceAccountsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListServiceAccountsRequest_FieldMask) FilterInputFields() *ListServiceAccountsRequest_FieldMask {
	result := &ListServiceAccountsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListServiceAccountsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListServiceAccountsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListServiceAccountsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListServiceAccountsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListServiceAccountsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) AppendPath(path ListServiceAccountsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListServiceAccountsRequest_FieldPath))
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) GetPaths() []ListServiceAccountsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListServiceAccountsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) Set(target, source *ListServiceAccountsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListServiceAccountsRequest), source.(*ListServiceAccountsRequest))
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) Project(source *ListServiceAccountsRequest) *ListServiceAccountsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListServiceAccountsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListServiceAccountsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListServiceAccountsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListServiceAccountsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListServiceAccountsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListServiceAccountsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListServiceAccountsRequest_FieldPathSelectorView:
				result.View = source.View
			case ListServiceAccountsRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListServiceAccountsRequest))
}

func (fieldMask *ListServiceAccountsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListServiceAccountsResponse_FieldMask struct {
	Paths []ListServiceAccountsResponse_FieldPath
}

func FullListServiceAccountsResponse_FieldMask() *ListServiceAccountsResponse_FieldMask {
	res := &ListServiceAccountsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorServiceAccounts})
	res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListServiceAccountsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListServiceAccountsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListServiceAccountsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListServiceAccountsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListServiceAccountsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) Subtract(other *ListServiceAccountsResponse_FieldMask) *ListServiceAccountsResponse_FieldMask {
	result := &ListServiceAccountsResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListServiceAccountsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListServiceAccountsResponse_FieldPathSelectorServiceAccounts: &service_account.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[ListServiceAccountsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListServiceAccountsResponse_FieldPathSelectorServiceAccounts: &service_account.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListServiceAccountsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListServiceAccountsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListServiceAccountsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
						mySubMasks[ListServiceAccountsResponse_FieldPathSelectorServiceAccounts] = service_account.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*ListServiceAccountsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListServiceAccountsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListServiceAccountsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListServiceAccountsResponse_FieldMask) FilterInputFields() *ListServiceAccountsResponse_FieldMask {
	result := &ListServiceAccountsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			if _, ok := path.(*ListServiceAccountsResponse_FieldTerminalPath); ok {
				for _, subpath := range service_account.FullServiceAccount_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListServiceAccountsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListServiceAccountsResponse_FieldSubPath); ok {
				selectedMask := &service_account.ServiceAccount_FieldMask{
					Paths: []service_account.ServiceAccount_FieldPath{sub.subPath.(service_account.ServiceAccount_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListServiceAccountsResponse_FieldSubPath{selector: ListServiceAccountsResponse_FieldPathSelectorServiceAccounts, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListServiceAccountsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListServiceAccountsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListServiceAccountsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListServiceAccountsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListServiceAccountsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) AppendPath(path ListServiceAccountsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListServiceAccountsResponse_FieldPath))
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) GetPaths() []ListServiceAccountsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListServiceAccountsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) Set(target, source *ListServiceAccountsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListServiceAccountsResponse), source.(*ListServiceAccountsResponse))
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) Project(source *ListServiceAccountsResponse) *ListServiceAccountsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListServiceAccountsResponse{}
	serviceAccountsMask := &service_account.ServiceAccount_FieldMask{}
	wholeServiceAccountsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListServiceAccountsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
				result.ServiceAccounts = source.ServiceAccounts
				wholeServiceAccountsAccepted = true
			case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListServiceAccountsResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListServiceAccountsResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListServiceAccountsResponse_FieldSubPath:
			switch tp.selector {
			case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
				serviceAccountsMask.AppendPath(tp.subPath.(service_account.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeServiceAccountsAccepted == false && len(serviceAccountsMask.Paths) > 0 {
		for _, sourceItem := range source.GetServiceAccounts() {
			result.ServiceAccounts = append(result.ServiceAccounts, serviceAccountsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListServiceAccountsResponse))
}

func (fieldMask *ListServiceAccountsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchServiceAccountRequest_FieldMask struct {
	Paths []WatchServiceAccountRequest_FieldPath
}

func FullWatchServiceAccountRequest_FieldMask() *WatchServiceAccountRequest_FieldMask {
	res := &WatchServiceAccountRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchServiceAccountRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchServiceAccountRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchServiceAccountRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchServiceAccountRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchServiceAccountRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) Subtract(other *WatchServiceAccountRequest_FieldMask) *WatchServiceAccountRequest_FieldMask {
	result := &WatchServiceAccountRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchServiceAccountRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchServiceAccountRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchServiceAccountRequest_FieldMask) FilterInputFields() *WatchServiceAccountRequest_FieldMask {
	result := &WatchServiceAccountRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchServiceAccountRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchServiceAccountRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchServiceAccountRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchServiceAccountRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchServiceAccountRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) AppendPath(path WatchServiceAccountRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchServiceAccountRequest_FieldPath))
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) GetPaths() []WatchServiceAccountRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchServiceAccountRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) Set(target, source *WatchServiceAccountRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchServiceAccountRequest), source.(*WatchServiceAccountRequest))
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) Project(source *WatchServiceAccountRequest) *WatchServiceAccountRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchServiceAccountRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchServiceAccountRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchServiceAccountRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchServiceAccountRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchServiceAccountRequest))
}

func (fieldMask *WatchServiceAccountRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchServiceAccountResponse_FieldMask struct {
	Paths []WatchServiceAccountResponse_FieldPath
}

func FullWatchServiceAccountResponse_FieldMask() *WatchServiceAccountResponse_FieldMask {
	res := &WatchServiceAccountResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchServiceAccountResponse_FieldTerminalPath{selector: WatchServiceAccountResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchServiceAccountResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchServiceAccountResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchServiceAccountResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchServiceAccountResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchServiceAccountResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) Subtract(other *WatchServiceAccountResponse_FieldMask) *WatchServiceAccountResponse_FieldMask {
	result := &WatchServiceAccountResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchServiceAccountResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchServiceAccountResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchServiceAccountResponse_FieldMask) FilterInputFields() *WatchServiceAccountResponse_FieldMask {
	result := &WatchServiceAccountResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchServiceAccountResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchServiceAccountResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchServiceAccountResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchServiceAccountResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchServiceAccountResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) AppendPath(path WatchServiceAccountResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchServiceAccountResponse_FieldPath))
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) GetPaths() []WatchServiceAccountResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchServiceAccountResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) Set(target, source *WatchServiceAccountResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchServiceAccountResponse), source.(*WatchServiceAccountResponse))
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) Project(source *WatchServiceAccountResponse) *WatchServiceAccountResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchServiceAccountResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchServiceAccountResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchServiceAccountResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchServiceAccountResponse))
}

func (fieldMask *WatchServiceAccountResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchServiceAccountsRequest_FieldMask struct {
	Paths []WatchServiceAccountsRequest_FieldPath
}

func FullWatchServiceAccountsRequest_FieldMask() *WatchServiceAccountsRequest_FieldMask {
	res := &WatchServiceAccountsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchServiceAccountsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchServiceAccountsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchServiceAccountsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchServiceAccountsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) Subtract(other *WatchServiceAccountsRequest_FieldMask) *WatchServiceAccountsRequest_FieldMask {
	result := &WatchServiceAccountsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchServiceAccountsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchServiceAccountsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchServiceAccountsRequest_FieldMask) FilterInputFields() *WatchServiceAccountsRequest_FieldMask {
	result := &WatchServiceAccountsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchServiceAccountsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchServiceAccountsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchServiceAccountsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchServiceAccountsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchServiceAccountsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) AppendPath(path WatchServiceAccountsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchServiceAccountsRequest_FieldPath))
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) GetPaths() []WatchServiceAccountsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchServiceAccountsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) Set(target, source *WatchServiceAccountsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchServiceAccountsRequest), source.(*WatchServiceAccountsRequest))
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) Project(source *WatchServiceAccountsRequest) *WatchServiceAccountsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchServiceAccountsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchServiceAccountsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchServiceAccountsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchServiceAccountsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchServiceAccountsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchServiceAccountsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchServiceAccountsRequest))
}

func (fieldMask *WatchServiceAccountsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchServiceAccountsResponse_FieldMask struct {
	Paths []WatchServiceAccountsResponse_FieldPath
}

func FullWatchServiceAccountsResponse_FieldMask() *WatchServiceAccountsResponse_FieldMask {
	res := &WatchServiceAccountsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchServiceAccountsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchServiceAccountsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchServiceAccountsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchServiceAccountsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) Subtract(other *WatchServiceAccountsResponse_FieldMask) *WatchServiceAccountsResponse_FieldMask {
	result := &WatchServiceAccountsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchServiceAccountsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange: &WatchServiceAccountsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchServiceAccountsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange: &WatchServiceAccountsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchServiceAccountsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchServiceAccountsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchServiceAccountsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange] = FullWatchServiceAccountsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchServiceAccountsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchServiceAccountsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchServiceAccountsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchServiceAccountsResponse_FieldMask) FilterInputFields() *WatchServiceAccountsResponse_FieldMask {
	result := &WatchServiceAccountsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchServiceAccountsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchServiceAccountsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchServiceAccountsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchServiceAccountsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchServiceAccountsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) AppendPath(path WatchServiceAccountsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchServiceAccountsResponse_FieldPath))
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) GetPaths() []WatchServiceAccountsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchServiceAccountsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) Set(target, source *WatchServiceAccountsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchServiceAccountsResponse), source.(*WatchServiceAccountsResponse))
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) Project(source *WatchServiceAccountsResponse) *WatchServiceAccountsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchServiceAccountsResponse{}
	pageTokenChangeMask := &WatchServiceAccountsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchServiceAccountsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
				result.ServiceAccountChanges = source.ServiceAccountChanges
			case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchServiceAccountsResponse_FieldSubPath:
			switch tp.selector {
			case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchServiceAccountsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchServiceAccountsResponse))
}

func (fieldMask *WatchServiceAccountsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchServiceAccountsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchServiceAccountsResponsePageTokenChange_FieldPath
}

func FullWatchServiceAccountsResponse_PageTokenChange_FieldMask() *WatchServiceAccountsResponse_PageTokenChange_FieldMask {
	res := &WatchServiceAccountsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) Subtract(other *WatchServiceAccountsResponse_PageTokenChange_FieldMask) *WatchServiceAccountsResponse_PageTokenChange_FieldMask {
	result := &WatchServiceAccountsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchServiceAccountsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchServiceAccountsResponse_PageTokenChange_FieldMask {
	result := &WatchServiceAccountsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchServiceAccountsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchServiceAccountsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchServiceAccountsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) AppendPath(path WatchServiceAccountsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchServiceAccountsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) GetPaths() []WatchServiceAccountsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) Set(target, source *WatchServiceAccountsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchServiceAccountsResponse_PageTokenChange), source.(*WatchServiceAccountsResponse_PageTokenChange))
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) Project(source *WatchServiceAccountsResponse_PageTokenChange) *WatchServiceAccountsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchServiceAccountsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchServiceAccountsResponse_PageTokenChange))
}

func (fieldMask *WatchServiceAccountsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateServiceAccountRequest_FieldMask struct {
	Paths []CreateServiceAccountRequest_FieldPath
}

func FullCreateServiceAccountRequest_FieldMask() *CreateServiceAccountRequest_FieldMask {
	res := &CreateServiceAccountRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateServiceAccountRequest_FieldTerminalPath{selector: CreateServiceAccountRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateServiceAccountRequest_FieldTerminalPath{selector: CreateServiceAccountRequest_FieldPathSelectorServiceAccount})
	return res
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateServiceAccountRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateServiceAccountRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateServiceAccountRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateServiceAccountRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateServiceAccountRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) Subtract(other *CreateServiceAccountRequest_FieldMask) *CreateServiceAccountRequest_FieldMask {
	result := &CreateServiceAccountRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateServiceAccountRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateServiceAccountRequest_FieldPathSelectorServiceAccount: &service_account.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[CreateServiceAccountRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateServiceAccountRequest_FieldPathSelectorServiceAccount: &service_account.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateServiceAccountRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateServiceAccountRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateServiceAccountRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
						mySubMasks[CreateServiceAccountRequest_FieldPathSelectorServiceAccount] = service_account.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*CreateServiceAccountRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateServiceAccountRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateServiceAccountRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateServiceAccountRequest_FieldMask) FilterInputFields() *CreateServiceAccountRequest_FieldMask {
	result := &CreateServiceAccountRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
			if _, ok := path.(*CreateServiceAccountRequest_FieldTerminalPath); ok {
				for _, subpath := range service_account.FullServiceAccount_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateServiceAccountRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateServiceAccountRequest_FieldSubPath); ok {
				selectedMask := &service_account.ServiceAccount_FieldMask{
					Paths: []service_account.ServiceAccount_FieldPath{sub.subPath.(service_account.ServiceAccount_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateServiceAccountRequest_FieldSubPath{selector: CreateServiceAccountRequest_FieldPathSelectorServiceAccount, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateServiceAccountRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateServiceAccountRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateServiceAccountRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateServiceAccountRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateServiceAccountRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) AppendPath(path CreateServiceAccountRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateServiceAccountRequest_FieldPath))
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) GetPaths() []CreateServiceAccountRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateServiceAccountRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) Set(target, source *CreateServiceAccountRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateServiceAccountRequest), source.(*CreateServiceAccountRequest))
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) Project(source *CreateServiceAccountRequest) *CreateServiceAccountRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateServiceAccountRequest{}
	serviceAccountMask := &service_account.ServiceAccount_FieldMask{}
	wholeServiceAccountAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateServiceAccountRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateServiceAccountRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
				wholeServiceAccountAccepted = true
			}
		case *CreateServiceAccountRequest_FieldSubPath:
			switch tp.selector {
			case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
				serviceAccountMask.AppendPath(tp.subPath.(service_account.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeServiceAccountAccepted == false && len(serviceAccountMask.Paths) > 0 {
		result.ServiceAccount = serviceAccountMask.Project(source.GetServiceAccount())
	}
	return result
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateServiceAccountRequest))
}

func (fieldMask *CreateServiceAccountRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateServiceAccountRequest_FieldMask struct {
	Paths []UpdateServiceAccountRequest_FieldPath
}

func FullUpdateServiceAccountRequest_FieldMask() *UpdateServiceAccountRequest_FieldMask {
	res := &UpdateServiceAccountRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorServiceAccount})
	res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorCas})
	res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorAllowMissing})
	return res
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateServiceAccountRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateServiceAccountRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateServiceAccountRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateServiceAccountRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) Subtract(other *UpdateServiceAccountRequest_FieldMask) *UpdateServiceAccountRequest_FieldMask {
	result := &UpdateServiceAccountRequest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[UpdateServiceAccountRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateServiceAccountRequest_FieldPathSelectorServiceAccount: &service_account.ServiceAccount_FieldMask{},
		UpdateServiceAccountRequest_FieldPathSelectorCas:            &UpdateServiceAccountRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateServiceAccountRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateServiceAccountRequest_FieldPathSelectorServiceAccount: &service_account.ServiceAccount_FieldMask{},
		UpdateServiceAccountRequest_FieldPathSelectorCas:            &UpdateServiceAccountRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateServiceAccountRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateServiceAccountRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateServiceAccountRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
						mySubMasks[UpdateServiceAccountRequest_FieldPathSelectorServiceAccount] = service_account.FullServiceAccount_FieldMask()
					case UpdateServiceAccountRequest_FieldPathSelectorCas:
						mySubMasks[UpdateServiceAccountRequest_FieldPathSelectorCas] = FullUpdateServiceAccountRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateServiceAccountRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateServiceAccountRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateServiceAccountRequest_FieldMask) FilterInputFields() *UpdateServiceAccountRequest_FieldMask {
	result := &UpdateServiceAccountRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
			if _, ok := path.(*UpdateServiceAccountRequest_FieldTerminalPath); ok {
				for _, subpath := range service_account.FullServiceAccount_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateServiceAccountRequest_FieldSubPath); ok {
				selectedMask := &service_account.ServiceAccount_FieldMask{
					Paths: []service_account.ServiceAccount_FieldPath{sub.subPath.(service_account.ServiceAccount_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: UpdateServiceAccountRequest_FieldPathSelectorServiceAccount, subPath: allowedPath})
				}
			}
		case UpdateServiceAccountRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateServiceAccountRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateServiceAccountRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateServiceAccountRequest_FieldSubPath); ok {
				selectedMask := &UpdateServiceAccountRequest_CAS_FieldMask{
					Paths: []UpdateServiceAccountRequestCAS_FieldPath{sub.subPath.(UpdateServiceAccountRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: UpdateServiceAccountRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateServiceAccountRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateServiceAccountRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateServiceAccountRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateServiceAccountRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateServiceAccountRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) AppendPath(path UpdateServiceAccountRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateServiceAccountRequest_FieldPath))
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) GetPaths() []UpdateServiceAccountRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateServiceAccountRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) Set(target, source *UpdateServiceAccountRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateServiceAccountRequest), source.(*UpdateServiceAccountRequest))
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) Project(source *UpdateServiceAccountRequest) *UpdateServiceAccountRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateServiceAccountRequest{}
	serviceAccountMask := &service_account.ServiceAccount_FieldMask{}
	wholeServiceAccountAccepted := false
	casMask := &UpdateServiceAccountRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateServiceAccountRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
				wholeServiceAccountAccepted = true
			case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateServiceAccountRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			case UpdateServiceAccountRequest_FieldPathSelectorAllowMissing:
				result.AllowMissing = source.AllowMissing
			}
		case *UpdateServiceAccountRequest_FieldSubPath:
			switch tp.selector {
			case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
				serviceAccountMask.AppendPath(tp.subPath.(service_account.ServiceAccount_FieldPath))
			case UpdateServiceAccountRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateServiceAccountRequestCAS_FieldPath))
			}
		}
	}
	if wholeServiceAccountAccepted == false && len(serviceAccountMask.Paths) > 0 {
		result.ServiceAccount = serviceAccountMask.Project(source.GetServiceAccount())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateServiceAccountRequest))
}

func (fieldMask *UpdateServiceAccountRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateServiceAccountRequest_CAS_FieldMask struct {
	Paths []UpdateServiceAccountRequestCAS_FieldPath
}

func FullUpdateServiceAccountRequest_CAS_FieldMask() *UpdateServiceAccountRequest_CAS_FieldMask {
	res := &UpdateServiceAccountRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateServiceAccountRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateServiceAccountRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateServiceAccountRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) Subtract(other *UpdateServiceAccountRequest_CAS_FieldMask) *UpdateServiceAccountRequest_CAS_FieldMask {
	result := &UpdateServiceAccountRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateServiceAccountRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState: &service_account.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[UpdateServiceAccountRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState: &service_account.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateServiceAccountRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateServiceAccountRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateServiceAccountRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState] = service_account.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*UpdateServiceAccountRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateServiceAccountRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateServiceAccountRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) FilterInputFields() *UpdateServiceAccountRequest_CAS_FieldMask {
	result := &UpdateServiceAccountRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateServiceAccountRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range service_account.FullServiceAccount_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateServiceAccountRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateServiceAccountRequestCAS_FieldSubPath); ok {
				selectedMask := &service_account.ServiceAccount_FieldMask{
					Paths: []service_account.ServiceAccount_FieldPath{sub.subPath.(service_account.ServiceAccount_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateServiceAccountRequestCAS_FieldSubPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateServiceAccountRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateServiceAccountRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateServiceAccountRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateServiceAccountRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) AppendPath(path UpdateServiceAccountRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateServiceAccountRequestCAS_FieldPath))
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) GetPaths() []UpdateServiceAccountRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateServiceAccountRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) Set(target, source *UpdateServiceAccountRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateServiceAccountRequest_CAS), source.(*UpdateServiceAccountRequest_CAS))
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) Project(source *UpdateServiceAccountRequest_CAS) *UpdateServiceAccountRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateServiceAccountRequest_CAS{}
	conditionalStateMask := &service_account.ServiceAccount_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateServiceAccountRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateServiceAccountRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(service_account.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateServiceAccountRequest_CAS))
}

func (fieldMask *UpdateServiceAccountRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteServiceAccountRequest_FieldMask struct {
	Paths []DeleteServiceAccountRequest_FieldPath
}

func FullDeleteServiceAccountRequest_FieldMask() *DeleteServiceAccountRequest_FieldMask {
	res := &DeleteServiceAccountRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteServiceAccountRequest_FieldTerminalPath{selector: DeleteServiceAccountRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteServiceAccountRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteServiceAccountRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteServiceAccountRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteServiceAccountRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) Subtract(other *DeleteServiceAccountRequest_FieldMask) *DeleteServiceAccountRequest_FieldMask {
	result := &DeleteServiceAccountRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteServiceAccountRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteServiceAccountRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteServiceAccountRequest_FieldMask) FilterInputFields() *DeleteServiceAccountRequest_FieldMask {
	result := &DeleteServiceAccountRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteServiceAccountRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteServiceAccountRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteServiceAccountRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteServiceAccountRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteServiceAccountRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) AppendPath(path DeleteServiceAccountRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteServiceAccountRequest_FieldPath))
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) GetPaths() []DeleteServiceAccountRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteServiceAccountRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) Set(target, source *DeleteServiceAccountRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteServiceAccountRequest), source.(*DeleteServiceAccountRequest))
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) Project(source *DeleteServiceAccountRequest) *DeleteServiceAccountRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteServiceAccountRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteServiceAccountRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteServiceAccountRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteServiceAccountRequest))
}

func (fieldMask *DeleteServiceAccountRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
