// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/service_account_service.proto
// DO NOT EDIT!!!

package service_account_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &service_account.ServiceAccount{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetServiceAccountRequest) GotenObjectExt() {}

func (o *GetServiceAccountRequest) MakeFullFieldMask() *GetServiceAccountRequest_FieldMask {
	return FullGetServiceAccountRequest_FieldMask()
}

func (o *GetServiceAccountRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetServiceAccountRequest_FieldMask()
}

func (o *GetServiceAccountRequest) MakeDiffFieldMask(other *GetServiceAccountRequest) *GetServiceAccountRequest_FieldMask {
	if o == nil && other == nil {
		return &GetServiceAccountRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetServiceAccountRequest_FieldMask()
	}

	res := &GetServiceAccountRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetServiceAccountRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetServiceAccountRequest))
}

func (o *GetServiceAccountRequest) Clone() *GetServiceAccountRequest {
	if o == nil {
		return nil
	}
	result := &GetServiceAccountRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service_account.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account.ServiceAccount_FieldMask)
	result.View = o.View
	return result
}

func (o *GetServiceAccountRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetServiceAccountRequest) Merge(source *GetServiceAccountRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service_account.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetServiceAccountRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetServiceAccountRequest))
}

func (o *BatchGetServiceAccountsRequest) GotenObjectExt() {}

func (o *BatchGetServiceAccountsRequest) MakeFullFieldMask() *BatchGetServiceAccountsRequest_FieldMask {
	return FullBatchGetServiceAccountsRequest_FieldMask()
}

func (o *BatchGetServiceAccountsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetServiceAccountsRequest_FieldMask()
}

func (o *BatchGetServiceAccountsRequest) MakeDiffFieldMask(other *BatchGetServiceAccountsRequest) *BatchGetServiceAccountsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetServiceAccountsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetServiceAccountsRequest_FieldMask()
	}

	res := &BatchGetServiceAccountsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetServiceAccountsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetServiceAccountsRequest))
}

func (o *BatchGetServiceAccountsRequest) Clone() *BatchGetServiceAccountsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetServiceAccountsRequest{}
	result.Names = make([]*service_account.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &service_account.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account.ServiceAccount_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetServiceAccountsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetServiceAccountsRequest) Merge(source *BatchGetServiceAccountsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &service_account.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetServiceAccountsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetServiceAccountsRequest))
}

func (o *BatchGetServiceAccountsResponse) GotenObjectExt() {}

func (o *BatchGetServiceAccountsResponse) MakeFullFieldMask() *BatchGetServiceAccountsResponse_FieldMask {
	return FullBatchGetServiceAccountsResponse_FieldMask()
}

func (o *BatchGetServiceAccountsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetServiceAccountsResponse_FieldMask()
}

func (o *BatchGetServiceAccountsResponse) MakeDiffFieldMask(other *BatchGetServiceAccountsResponse) *BatchGetServiceAccountsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetServiceAccountsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetServiceAccountsResponse_FieldMask()
	}

	res := &BatchGetServiceAccountsResponse_FieldMask{}

	if len(o.GetServiceAccounts()) == len(other.GetServiceAccounts()) {
		for i, lValue := range o.GetServiceAccounts() {
			rValue := other.GetServiceAccounts()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetServiceAccountsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetServiceAccountsResponse))
}

func (o *BatchGetServiceAccountsResponse) Clone() *BatchGetServiceAccountsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetServiceAccountsResponse{}
	result.ServiceAccounts = make([]*service_account.ServiceAccount, len(o.ServiceAccounts))
	for i, sourceValue := range o.ServiceAccounts {
		result.ServiceAccounts[i] = sourceValue.Clone()
	}
	result.Missing = make([]*service_account.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &service_account.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetServiceAccountsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetServiceAccountsResponse) Merge(source *BatchGetServiceAccountsResponse) {
	for _, sourceValue := range source.GetServiceAccounts() {
		exists := false
		for _, currentValue := range o.ServiceAccounts {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account.ServiceAccount
			if sourceValue != nil {
				newDstElement = new(service_account.ServiceAccount)
				newDstElement.Merge(sourceValue)
			}
			o.ServiceAccounts = append(o.ServiceAccounts, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &service_account.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetServiceAccountsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetServiceAccountsResponse))
}

func (o *ListServiceAccountsRequest) GotenObjectExt() {}

func (o *ListServiceAccountsRequest) MakeFullFieldMask() *ListServiceAccountsRequest_FieldMask {
	return FullListServiceAccountsRequest_FieldMask()
}

func (o *ListServiceAccountsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListServiceAccountsRequest_FieldMask()
}

func (o *ListServiceAccountsRequest) MakeDiffFieldMask(other *ListServiceAccountsRequest) *ListServiceAccountsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListServiceAccountsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListServiceAccountsRequest_FieldMask()
	}

	res := &ListServiceAccountsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListServiceAccountsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListServiceAccountsRequest))
}

func (o *ListServiceAccountsRequest) Clone() *ListServiceAccountsRequest {
	if o == nil {
		return nil
	}
	result := &ListServiceAccountsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &service_account.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &service_account.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &service_account.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &service_account.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account.ServiceAccount_FieldMask)
	result.View = o.View
	return result
}

func (o *ListServiceAccountsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListServiceAccountsRequest) Merge(source *ListServiceAccountsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &service_account.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &service_account.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &service_account.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &service_account.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListServiceAccountsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListServiceAccountsRequest))
}

func (o *ListServiceAccountsResponse) GotenObjectExt() {}

func (o *ListServiceAccountsResponse) MakeFullFieldMask() *ListServiceAccountsResponse_FieldMask {
	return FullListServiceAccountsResponse_FieldMask()
}

func (o *ListServiceAccountsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListServiceAccountsResponse_FieldMask()
}

func (o *ListServiceAccountsResponse) MakeDiffFieldMask(other *ListServiceAccountsResponse) *ListServiceAccountsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListServiceAccountsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListServiceAccountsResponse_FieldMask()
	}

	res := &ListServiceAccountsResponse_FieldMask{}

	if len(o.GetServiceAccounts()) == len(other.GetServiceAccounts()) {
		for i, lValue := range o.GetServiceAccounts() {
			rValue := other.GetServiceAccounts()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorServiceAccounts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorServiceAccounts})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListServiceAccountsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListServiceAccountsResponse))
}

func (o *ListServiceAccountsResponse) Clone() *ListServiceAccountsResponse {
	if o == nil {
		return nil
	}
	result := &ListServiceAccountsResponse{}
	result.ServiceAccounts = make([]*service_account.ServiceAccount, len(o.ServiceAccounts))
	for i, sourceValue := range o.ServiceAccounts {
		result.ServiceAccounts[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &service_account.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &service_account.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListServiceAccountsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListServiceAccountsResponse) Merge(source *ListServiceAccountsResponse) {
	for _, sourceValue := range source.GetServiceAccounts() {
		exists := false
		for _, currentValue := range o.ServiceAccounts {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account.ServiceAccount
			if sourceValue != nil {
				newDstElement = new(service_account.ServiceAccount)
				newDstElement.Merge(sourceValue)
			}
			o.ServiceAccounts = append(o.ServiceAccounts, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &service_account.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &service_account.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListServiceAccountsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListServiceAccountsResponse))
}

func (o *WatchServiceAccountRequest) GotenObjectExt() {}

func (o *WatchServiceAccountRequest) MakeFullFieldMask() *WatchServiceAccountRequest_FieldMask {
	return FullWatchServiceAccountRequest_FieldMask()
}

func (o *WatchServiceAccountRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountRequest_FieldMask()
}

func (o *WatchServiceAccountRequest) MakeDiffFieldMask(other *WatchServiceAccountRequest) *WatchServiceAccountRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountRequest_FieldMask()
	}

	res := &WatchServiceAccountRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchServiceAccountRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountRequest))
}

func (o *WatchServiceAccountRequest) Clone() *WatchServiceAccountRequest {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service_account.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account.ServiceAccount_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchServiceAccountRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountRequest) Merge(source *WatchServiceAccountRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service_account.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchServiceAccountRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountRequest))
}

func (o *WatchServiceAccountResponse) GotenObjectExt() {}

func (o *WatchServiceAccountResponse) MakeFullFieldMask() *WatchServiceAccountResponse_FieldMask {
	return FullWatchServiceAccountResponse_FieldMask()
}

func (o *WatchServiceAccountResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountResponse_FieldMask()
}

func (o *WatchServiceAccountResponse) MakeDiffFieldMask(other *WatchServiceAccountResponse) *WatchServiceAccountResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountResponse_FieldMask()
	}

	res := &WatchServiceAccountResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchServiceAccountResponse_FieldTerminalPath{selector: WatchServiceAccountResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchServiceAccountResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountResponse))
}

func (o *WatchServiceAccountResponse) Clone() *WatchServiceAccountResponse {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountResponse{}
	result.Change = proto.Clone(o.Change).(*service_account.ServiceAccountChange)
	return result
}

func (o *WatchServiceAccountResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountResponse) Merge(source *WatchServiceAccountResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(service_account.ServiceAccountChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchServiceAccountResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountResponse))
}

func (o *WatchServiceAccountsRequest) GotenObjectExt() {}

func (o *WatchServiceAccountsRequest) MakeFullFieldMask() *WatchServiceAccountsRequest_FieldMask {
	return FullWatchServiceAccountsRequest_FieldMask()
}

func (o *WatchServiceAccountsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountsRequest_FieldMask()
}

func (o *WatchServiceAccountsRequest) MakeDiffFieldMask(other *WatchServiceAccountsRequest) *WatchServiceAccountsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountsRequest_FieldMask()
	}

	res := &WatchServiceAccountsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchServiceAccountsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountsRequest))
}

func (o *WatchServiceAccountsRequest) Clone() *WatchServiceAccountsRequest {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &service_account.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &service_account.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &service_account.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &service_account.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account.ServiceAccount_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchServiceAccountsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountsRequest) Merge(source *WatchServiceAccountsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &service_account.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &service_account.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &service_account.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &service_account.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchServiceAccountsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountsRequest))
}

func (o *WatchServiceAccountsResponse) GotenObjectExt() {}

func (o *WatchServiceAccountsResponse) MakeFullFieldMask() *WatchServiceAccountsResponse_FieldMask {
	return FullWatchServiceAccountsResponse_FieldMask()
}

func (o *WatchServiceAccountsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountsResponse_FieldMask()
}

func (o *WatchServiceAccountsResponse) MakeDiffFieldMask(other *WatchServiceAccountsResponse) *WatchServiceAccountsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountsResponse_FieldMask()
	}

	res := &WatchServiceAccountsResponse_FieldMask{}

	if len(o.GetServiceAccountChanges()) == len(other.GetServiceAccountChanges()) {
		for i, lValue := range o.GetServiceAccountChanges() {
			rValue := other.GetServiceAccountChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldSubPath{selector: WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchServiceAccountsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountsResponse))
}

func (o *WatchServiceAccountsResponse) Clone() *WatchServiceAccountsResponse {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountsResponse{}
	result.ServiceAccountChanges = make([]*service_account.ServiceAccountChange, len(o.ServiceAccountChanges))
	for i, sourceValue := range o.ServiceAccountChanges {
		result.ServiceAccountChanges[i] = proto.Clone(sourceValue).(*service_account.ServiceAccountChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchServiceAccountsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountsResponse) Merge(source *WatchServiceAccountsResponse) {
	for _, sourceValue := range source.GetServiceAccountChanges() {
		exists := false
		for _, currentValue := range o.ServiceAccountChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service_account.ServiceAccountChange
			if sourceValue != nil {
				newDstElement = new(service_account.ServiceAccountChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ServiceAccountChanges = append(o.ServiceAccountChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchServiceAccountsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchServiceAccountsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountsResponse))
}

func (o *WatchServiceAccountsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchServiceAccountsResponse_PageTokenChange) MakeFullFieldMask() *WatchServiceAccountsResponse_PageTokenChange_FieldMask {
	return FullWatchServiceAccountsResponse_PageTokenChange_FieldMask()
}

func (o *WatchServiceAccountsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceAccountsResponse_PageTokenChange_FieldMask()
}

func (o *WatchServiceAccountsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchServiceAccountsResponse_PageTokenChange) *WatchServiceAccountsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceAccountsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceAccountsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchServiceAccountsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchServiceAccountsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceAccountsResponse_PageTokenChange))
}

func (o *WatchServiceAccountsResponse_PageTokenChange) Clone() *WatchServiceAccountsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchServiceAccountsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &service_account.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &service_account.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchServiceAccountsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceAccountsResponse_PageTokenChange) Merge(source *WatchServiceAccountsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &service_account.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &service_account.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchServiceAccountsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceAccountsResponse_PageTokenChange))
}

func (o *CreateServiceAccountRequest) GotenObjectExt() {}

func (o *CreateServiceAccountRequest) MakeFullFieldMask() *CreateServiceAccountRequest_FieldMask {
	return FullCreateServiceAccountRequest_FieldMask()
}

func (o *CreateServiceAccountRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateServiceAccountRequest_FieldMask()
}

func (o *CreateServiceAccountRequest) MakeDiffFieldMask(other *CreateServiceAccountRequest) *CreateServiceAccountRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateServiceAccountRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateServiceAccountRequest_FieldMask()
	}

	res := &CreateServiceAccountRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateServiceAccountRequest_FieldTerminalPath{selector: CreateServiceAccountRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetServiceAccount().MakeDiffFieldMask(other.GetServiceAccount())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateServiceAccountRequest_FieldTerminalPath{selector: CreateServiceAccountRequest_FieldPathSelectorServiceAccount})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateServiceAccountRequest_FieldSubPath{selector: CreateServiceAccountRequest_FieldPathSelectorServiceAccount, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateServiceAccountRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateServiceAccountRequest))
}

func (o *CreateServiceAccountRequest) Clone() *CreateServiceAccountRequest {
	if o == nil {
		return nil
	}
	result := &CreateServiceAccountRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &service_account.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ServiceAccount = o.ServiceAccount.Clone()
	return result
}

func (o *CreateServiceAccountRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateServiceAccountRequest) Merge(source *CreateServiceAccountRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &service_account.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetServiceAccount() != nil {
		if o.ServiceAccount == nil {
			o.ServiceAccount = new(service_account.ServiceAccount)
		}
		o.ServiceAccount.Merge(source.GetServiceAccount())
	}
}

func (o *CreateServiceAccountRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateServiceAccountRequest))
}

func (o *UpdateServiceAccountRequest) GotenObjectExt() {}

func (o *UpdateServiceAccountRequest) MakeFullFieldMask() *UpdateServiceAccountRequest_FieldMask {
	return FullUpdateServiceAccountRequest_FieldMask()
}

func (o *UpdateServiceAccountRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateServiceAccountRequest_FieldMask()
}

func (o *UpdateServiceAccountRequest) MakeDiffFieldMask(other *UpdateServiceAccountRequest) *UpdateServiceAccountRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateServiceAccountRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateServiceAccountRequest_FieldMask()
	}

	res := &UpdateServiceAccountRequest_FieldMask{}
	{
		subMask := o.GetServiceAccount().MakeDiffFieldMask(other.GetServiceAccount())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorServiceAccount})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: UpdateServiceAccountRequest_FieldPathSelectorServiceAccount, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceAccountRequest_FieldSubPath{selector: UpdateServiceAccountRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateServiceAccountRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateServiceAccountRequest))
}

func (o *UpdateServiceAccountRequest) Clone() *UpdateServiceAccountRequest {
	if o == nil {
		return nil
	}
	result := &UpdateServiceAccountRequest{}
	result.ServiceAccount = o.ServiceAccount.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*service_account.ServiceAccount_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateServiceAccountRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateServiceAccountRequest) Merge(source *UpdateServiceAccountRequest) {
	if source.GetServiceAccount() != nil {
		if o.ServiceAccount == nil {
			o.ServiceAccount = new(service_account.ServiceAccount)
		}
		o.ServiceAccount.Merge(source.GetServiceAccount())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateServiceAccountRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateServiceAccountRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateServiceAccountRequest))
}

func (o *UpdateServiceAccountRequest_CAS) GotenObjectExt() {}

func (o *UpdateServiceAccountRequest_CAS) MakeFullFieldMask() *UpdateServiceAccountRequest_CAS_FieldMask {
	return FullUpdateServiceAccountRequest_CAS_FieldMask()
}

func (o *UpdateServiceAccountRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateServiceAccountRequest_CAS_FieldMask()
}

func (o *UpdateServiceAccountRequest_CAS) MakeDiffFieldMask(other *UpdateServiceAccountRequest_CAS) *UpdateServiceAccountRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateServiceAccountRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateServiceAccountRequest_CAS_FieldMask()
	}

	res := &UpdateServiceAccountRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceAccountRequestCAS_FieldSubPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateServiceAccountRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateServiceAccountRequest_CAS))
}

func (o *UpdateServiceAccountRequest_CAS) Clone() *UpdateServiceAccountRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateServiceAccountRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*service_account.ServiceAccount_FieldMask)
	return result
}

func (o *UpdateServiceAccountRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateServiceAccountRequest_CAS) Merge(source *UpdateServiceAccountRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(service_account.ServiceAccount)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service_account.ServiceAccount_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateServiceAccountRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateServiceAccountRequest_CAS))
}

func (o *DeleteServiceAccountRequest) GotenObjectExt() {}

func (o *DeleteServiceAccountRequest) MakeFullFieldMask() *DeleteServiceAccountRequest_FieldMask {
	return FullDeleteServiceAccountRequest_FieldMask()
}

func (o *DeleteServiceAccountRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteServiceAccountRequest_FieldMask()
}

func (o *DeleteServiceAccountRequest) MakeDiffFieldMask(other *DeleteServiceAccountRequest) *DeleteServiceAccountRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteServiceAccountRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteServiceAccountRequest_FieldMask()
	}

	res := &DeleteServiceAccountRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteServiceAccountRequest_FieldTerminalPath{selector: DeleteServiceAccountRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteServiceAccountRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteServiceAccountRequest))
}

func (o *DeleteServiceAccountRequest) Clone() *DeleteServiceAccountRequest {
	if o == nil {
		return nil
	}
	result := &DeleteServiceAccountRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service_account.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteServiceAccountRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteServiceAccountRequest) Merge(source *DeleteServiceAccountRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service_account.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteServiceAccountRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteServiceAccountRequest))
}
