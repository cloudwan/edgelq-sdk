// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/service_account_service.proto
// DO NOT EDIT!!!

package service_account_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &service_account.ServiceAccount{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetServiceAccountRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetServiceAccountRequest_FieldPathSelector
	Get(source *GetServiceAccountRequest) []interface{}
	GetSingle(source *GetServiceAccountRequest) (interface{}, bool)
	ClearValue(item *GetServiceAccountRequest)

	// Those methods build corresponding GetServiceAccountRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetServiceAccountRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetServiceAccountRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetServiceAccountRequest_FieldPathArrayItemValue
}

type GetServiceAccountRequest_FieldPathSelector int32

const (
	GetServiceAccountRequest_FieldPathSelectorName      GetServiceAccountRequest_FieldPathSelector = 0
	GetServiceAccountRequest_FieldPathSelectorFieldMask GetServiceAccountRequest_FieldPathSelector = 1
	GetServiceAccountRequest_FieldPathSelectorView      GetServiceAccountRequest_FieldPathSelector = 2
)

func (s GetServiceAccountRequest_FieldPathSelector) String() string {
	switch s {
	case GetServiceAccountRequest_FieldPathSelectorName:
		return "name"
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetServiceAccountRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", s))
	}
}

func BuildGetServiceAccountRequest_FieldPath(fp gotenobject.RawFieldPath) (GetServiceAccountRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetServiceAccountRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetServiceAccountRequest_FieldTerminalPath{selector: GetServiceAccountRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetServiceAccountRequest", fp)
}

func ParseGetServiceAccountRequest_FieldPath(rawField string) (GetServiceAccountRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetServiceAccountRequest_FieldPath(fp)
}

func MustParseGetServiceAccountRequest_FieldPath(rawField string) GetServiceAccountRequest_FieldPath {
	fp, err := ParseGetServiceAccountRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetServiceAccountRequest_FieldTerminalPath struct {
	selector GetServiceAccountRequest_FieldPathSelector
}

var _ GetServiceAccountRequest_FieldPath = (*GetServiceAccountRequest_FieldTerminalPath)(nil)

func (fp *GetServiceAccountRequest_FieldTerminalPath) Selector() GetServiceAccountRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetServiceAccountRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetServiceAccountRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetServiceAccountRequest
func (fp *GetServiceAccountRequest_FieldTerminalPath) Get(source *GetServiceAccountRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetServiceAccountRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetServiceAccountRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetServiceAccountRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetServiceAccountRequest))
}

// GetSingle returns value pointed by specific field of from source GetServiceAccountRequest
func (fp *GetServiceAccountRequest_FieldTerminalPath) GetSingle(source *GetServiceAccountRequest) (interface{}, bool) {
	switch fp.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetServiceAccountRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetServiceAccountRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		return (*service_account.Reference)(nil)
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	case GetServiceAccountRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) ClearValue(item *GetServiceAccountRequest) {
	if item != nil {
		switch fp.selector {
		case GetServiceAccountRequest_FieldPathSelectorName:
			item.Name = nil
		case GetServiceAccountRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetServiceAccountRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
		}
	}
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetServiceAccountRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetServiceAccountRequest_FieldPathSelectorName ||
		fp.selector == GetServiceAccountRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetServiceAccountRequest_FieldPathSelectorView
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) WithIValue(value interface{}) GetServiceAccountRequest_FieldPathValue {
	switch fp.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		return &GetServiceAccountRequest_FieldTerminalPathValue{GetServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.Reference)}
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		return &GetServiceAccountRequest_FieldTerminalPathValue{GetServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	case GetServiceAccountRequest_FieldPathSelectorView:
		return &GetServiceAccountRequest_FieldTerminalPathValue{GetServiceAccountRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetServiceAccountRequest_FieldPathArrayOfValues {
	fpaov := &GetServiceAccountRequest_FieldTerminalPathArrayOfValues{GetServiceAccountRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		return &GetServiceAccountRequest_FieldTerminalPathArrayOfValues{GetServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.Reference)}
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		return &GetServiceAccountRequest_FieldTerminalPathArrayOfValues{GetServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	case GetServiceAccountRequest_FieldPathSelectorView:
		return &GetServiceAccountRequest_FieldTerminalPathArrayOfValues{GetServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetServiceAccountRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *GetServiceAccountRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetServiceAccountRequest_FieldPathValue allows storing values for GetServiceAccountRequest fields according to their type
type GetServiceAccountRequest_FieldPathValue interface {
	GetServiceAccountRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetServiceAccountRequest)
	CompareWith(*GetServiceAccountRequest) (cmp int, comparable bool)
}

func ParseGetServiceAccountRequest_FieldPathValue(pathStr, valueStr string) (GetServiceAccountRequest_FieldPathValue, error) {
	fp, err := ParseGetServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetServiceAccountRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetServiceAccountRequest_FieldPathValue), nil
}

func MustParseGetServiceAccountRequest_FieldPathValue(pathStr, valueStr string) GetServiceAccountRequest_FieldPathValue {
	fpv, err := ParseGetServiceAccountRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetServiceAccountRequest_FieldTerminalPathValue struct {
	GetServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ GetServiceAccountRequest_FieldPathValue = (*GetServiceAccountRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetServiceAccountRequest' as interface{}
func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) AsNameValue() (*service_account.Reference, bool) {
	res, ok := fpv.value.(*service_account.Reference)
	return res, ok
}
func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetServiceAccountRequest
func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) SetTo(target **GetServiceAccountRequest) {
	if *target == nil {
		*target = new(GetServiceAccountRequest)
	}
	switch fpv.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*service_account.Reference)
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	case GetServiceAccountRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetServiceAccountRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetServiceAccountRequest_FieldTerminalPathValue' with the value under path in 'GetServiceAccountRequest'.
func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) CompareWith(source *GetServiceAccountRequest) (int, bool) {
	switch fpv.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*service_account.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetServiceAccountRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *GetServiceAccountRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetServiceAccountRequest))
}

// GetServiceAccountRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetServiceAccountRequest according to their type
// Present only for array (repeated) types.
type GetServiceAccountRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetServiceAccountRequest_FieldPath
	ContainsValue(*GetServiceAccountRequest) bool
}

// ParseGetServiceAccountRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetServiceAccountRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetServiceAccountRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetServiceAccountRequest_FieldPathArrayItemValue), nil
}

func MustParseGetServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetServiceAccountRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetServiceAccountRequest_FieldTerminalPathArrayItemValue struct {
	GetServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ GetServiceAccountRequest_FieldPathArrayItemValue = (*GetServiceAccountRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetServiceAccountRequest as interface{}
func (fpaiv *GetServiceAccountRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetServiceAccountRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetServiceAccountRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetServiceAccountRequest'
func (fpaiv *GetServiceAccountRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetServiceAccountRequest) bool {
	slice := fpaiv.GetServiceAccountRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetServiceAccountRequest_FieldPathArrayOfValues allows storing slice of values for GetServiceAccountRequest fields according to their type
type GetServiceAccountRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetServiceAccountRequest_FieldPath
}

func ParseGetServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetServiceAccountRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetServiceAccountRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetServiceAccountRequest_FieldPathArrayOfValues), nil
}

func MustParseGetServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetServiceAccountRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetServiceAccountRequest_FieldTerminalPathArrayOfValues struct {
	GetServiceAccountRequest_FieldTerminalPath
	values interface{}
}

var _ GetServiceAccountRequest_FieldPathArrayOfValues = (*GetServiceAccountRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetServiceAccountRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetServiceAccountRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*service_account.Reference) {
			values = append(values, v)
		}
	case GetServiceAccountRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	case GetServiceAccountRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetServiceAccountRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*service_account.Reference, bool) {
	res, ok := fpaov.values.([]*service_account.Reference)
	return res, ok
}
func (fpaov *GetServiceAccountRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpaov *GetServiceAccountRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetServiceAccountsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetServiceAccountsRequest_FieldPathSelector
	Get(source *BatchGetServiceAccountsRequest) []interface{}
	GetSingle(source *BatchGetServiceAccountsRequest) (interface{}, bool)
	ClearValue(item *BatchGetServiceAccountsRequest)

	// Those methods build corresponding BatchGetServiceAccountsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetServiceAccountsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetServiceAccountsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetServiceAccountsRequest_FieldPathArrayItemValue
}

type BatchGetServiceAccountsRequest_FieldPathSelector int32

const (
	BatchGetServiceAccountsRequest_FieldPathSelectorNames     BatchGetServiceAccountsRequest_FieldPathSelector = 0
	BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask BatchGetServiceAccountsRequest_FieldPathSelector = 1
	BatchGetServiceAccountsRequest_FieldPathSelectorView      BatchGetServiceAccountsRequest_FieldPathSelector = 2
)

func (s BatchGetServiceAccountsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", s))
	}
}

func BuildBatchGetServiceAccountsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetServiceAccountsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetServiceAccountsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetServiceAccountsRequest_FieldTerminalPath{selector: BatchGetServiceAccountsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetServiceAccountsRequest", fp)
}

func ParseBatchGetServiceAccountsRequest_FieldPath(rawField string) (BatchGetServiceAccountsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetServiceAccountsRequest_FieldPath(fp)
}

func MustParseBatchGetServiceAccountsRequest_FieldPath(rawField string) BatchGetServiceAccountsRequest_FieldPath {
	fp, err := ParseBatchGetServiceAccountsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetServiceAccountsRequest_FieldTerminalPath struct {
	selector BatchGetServiceAccountsRequest_FieldPathSelector
}

var _ BatchGetServiceAccountsRequest_FieldPath = (*BatchGetServiceAccountsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) Selector() BatchGetServiceAccountsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetServiceAccountsRequest
func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) Get(source *BatchGetServiceAccountsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetServiceAccountsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetServiceAccountsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetServiceAccountsRequest
func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) GetSingle(source *BatchGetServiceAccountsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetServiceAccountsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		return ([]*service_account.Reference)(nil)
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) ClearValue(item *BatchGetServiceAccountsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetServiceAccountsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetServiceAccountsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetServiceAccountsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetServiceAccountsRequest_FieldPathSelectorView
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetServiceAccountsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathValue{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, value: value.([]*service_account.Reference)}
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathValue{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathValue{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetServiceAccountsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([][]*service_account.Reference)}
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetServiceAccountsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		return &BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue{BatchGetServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetServiceAccountsRequest_FieldPathValue allows storing values for BatchGetServiceAccountsRequest fields according to their type
type BatchGetServiceAccountsRequest_FieldPathValue interface {
	BatchGetServiceAccountsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetServiceAccountsRequest)
	CompareWith(*BatchGetServiceAccountsRequest) (cmp int, comparable bool)
}

func ParseBatchGetServiceAccountsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetServiceAccountsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServiceAccountsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetServiceAccountsRequest_FieldPathValue), nil
}

func MustParseBatchGetServiceAccountsRequest_FieldPathValue(pathStr, valueStr string) BatchGetServiceAccountsRequest_FieldPathValue {
	fpv, err := ParseBatchGetServiceAccountsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetServiceAccountsRequest_FieldTerminalPathValue struct {
	BatchGetServiceAccountsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetServiceAccountsRequest_FieldPathValue = (*BatchGetServiceAccountsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetServiceAccountsRequest' as interface{}
func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) AsNamesValue() ([]*service_account.Reference, bool) {
	res, ok := fpv.value.([]*service_account.Reference)
	return res, ok
}
func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetServiceAccountsRequest
func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) SetTo(target **BatchGetServiceAccountsRequest) {
	if *target == nil {
		*target = new(BatchGetServiceAccountsRequest)
	}
	switch fpv.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*service_account.Reference)
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetServiceAccountsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetServiceAccountsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetServiceAccountsRequest'.
func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetServiceAccountsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetServiceAccountsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetServiceAccountsRequest))
}

// BatchGetServiceAccountsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetServiceAccountsRequest according to their type
// Present only for array (repeated) types.
type BatchGetServiceAccountsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetServiceAccountsRequest_FieldPath
	ContainsValue(*BatchGetServiceAccountsRequest) bool
}

// ParseBatchGetServiceAccountsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetServiceAccountsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServiceAccountsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetServiceAccountsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetServiceAccountsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetServiceAccountsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetServiceAccountsRequest_FieldPathArrayItemValue = (*BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetServiceAccountsRequest as interface{}
func (fpaiv *BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*service_account.Reference, bool) {
	res, ok := fpaiv.value.(*service_account.Reference)
	return res, ok
}

func (fpaiv *BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetServiceAccountsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetServiceAccountsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetServiceAccountsRequest'
func (fpaiv *BatchGetServiceAccountsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetServiceAccountsRequest) bool {
	slice := fpaiv.BatchGetServiceAccountsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetServiceAccountsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetServiceAccountsRequest fields according to their type
type BatchGetServiceAccountsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetServiceAccountsRequest_FieldPath
}

func ParseBatchGetServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetServiceAccountsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServiceAccountsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetServiceAccountsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetServiceAccountsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetServiceAccountsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetServiceAccountsRequest_FieldPathArrayOfValues = (*BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetServiceAccountsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*service_account.Reference) {
			values = append(values, v)
		}
	case BatchGetServiceAccountsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	case BatchGetServiceAccountsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*service_account.Reference, bool) {
	res, ok := fpaov.values.([][]*service_account.Reference)
	return res, ok
}
func (fpaov *BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpaov *BatchGetServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetServiceAccountsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetServiceAccountsResponse_FieldPathSelector
	Get(source *BatchGetServiceAccountsResponse) []interface{}
	GetSingle(source *BatchGetServiceAccountsResponse) (interface{}, bool)
	ClearValue(item *BatchGetServiceAccountsResponse)

	// Those methods build corresponding BatchGetServiceAccountsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetServiceAccountsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetServiceAccountsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetServiceAccountsResponse_FieldPathArrayItemValue
}

type BatchGetServiceAccountsResponse_FieldPathSelector int32

const (
	BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts BatchGetServiceAccountsResponse_FieldPathSelector = 0
	BatchGetServiceAccountsResponse_FieldPathSelectorMissing         BatchGetServiceAccountsResponse_FieldPathSelector = 1
)

func (s BatchGetServiceAccountsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return "service_accounts"
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", s))
	}
}

func BuildBatchGetServiceAccountsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetServiceAccountsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetServiceAccountsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_accounts", "serviceAccounts", "service-accounts":
			return &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts}, nil
		case "missing":
			return &BatchGetServiceAccountsResponse_FieldTerminalPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "service_accounts", "serviceAccounts", "service-accounts":
			if subpath, err := service_account.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetServiceAccountsResponse_FieldSubPath{selector: BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetServiceAccountsResponse", fp)
}

func ParseBatchGetServiceAccountsResponse_FieldPath(rawField string) (BatchGetServiceAccountsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetServiceAccountsResponse_FieldPath(fp)
}

func MustParseBatchGetServiceAccountsResponse_FieldPath(rawField string) BatchGetServiceAccountsResponse_FieldPath {
	fp, err := ParseBatchGetServiceAccountsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetServiceAccountsResponse_FieldTerminalPath struct {
	selector BatchGetServiceAccountsResponse_FieldPathSelector
}

var _ BatchGetServiceAccountsResponse_FieldPath = (*BatchGetServiceAccountsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) Selector() BatchGetServiceAccountsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetServiceAccountsResponse
func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) Get(source *BatchGetServiceAccountsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			for _, value := range source.GetServiceAccounts() {
				values = append(values, value)
			}
		case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetServiceAccountsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetServiceAccountsResponse
func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) GetSingle(source *BatchGetServiceAccountsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		res := source.GetServiceAccounts()
		return res, res != nil
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetServiceAccountsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return ([]*service_account.ServiceAccount)(nil)
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		return ([]*service_account.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) ClearValue(item *BatchGetServiceAccountsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			item.ServiceAccounts = nil
		case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetServiceAccountsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetServiceAccountsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetServiceAccountsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return &BatchGetServiceAccountsResponse_FieldTerminalPathValue{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp, value: value.([]*service_account.ServiceAccount)}
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		return &BatchGetServiceAccountsResponse_FieldTerminalPathValue{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp, value: value.([]*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetServiceAccountsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return &BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([][]*service_account.ServiceAccount)}
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		return &BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([][]*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetServiceAccountsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return &BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount)}
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		return &BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue{BatchGetServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServiceAccountsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetServiceAccountsResponse_FieldSubPath struct {
	selector BatchGetServiceAccountsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetServiceAccountsResponse_FieldPath = (*BatchGetServiceAccountsResponse_FieldSubPath)(nil)

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) Selector() BatchGetServiceAccountsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) AsServiceAccountsSubPath() (service_account.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(service_account.ServiceAccount_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetServiceAccountsResponse
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) Get(source *BatchGetServiceAccountsResponse) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsServiceAccountsSubPath(); ok {
		for _, item := range source.GetServiceAccounts() {
			values = append(values, asServiceAccountFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetServiceAccountsResponse))
}

// GetSingle returns value of selected field from source BatchGetServiceAccountsResponse
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) GetSingle(source *BatchGetServiceAccountsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		if len(source.GetServiceAccounts()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccounts()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetServiceAccountsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) ClearValue(item *BatchGetServiceAccountsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			for _, subItem := range item.ServiceAccounts {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetServiceAccountsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetServiceAccountsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetServiceAccountsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetServiceAccountsResponse_FieldPathValue {
	return &BatchGetServiceAccountsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetServiceAccountsResponse_FieldPathArrayOfValues {
	return &BatchGetServiceAccountsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetServiceAccountsResponse_FieldPathArrayItemValue {
	return &BatchGetServiceAccountsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetServiceAccountsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetServiceAccountsResponse_FieldPathValue allows storing values for BatchGetServiceAccountsResponse fields according to their type
type BatchGetServiceAccountsResponse_FieldPathValue interface {
	BatchGetServiceAccountsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetServiceAccountsResponse)
	CompareWith(*BatchGetServiceAccountsResponse) (cmp int, comparable bool)
}

func ParseBatchGetServiceAccountsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetServiceAccountsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServiceAccountsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetServiceAccountsResponse_FieldPathValue), nil
}

func MustParseBatchGetServiceAccountsResponse_FieldPathValue(pathStr, valueStr string) BatchGetServiceAccountsResponse_FieldPathValue {
	fpv, err := ParseBatchGetServiceAccountsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetServiceAccountsResponse_FieldTerminalPathValue struct {
	BatchGetServiceAccountsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetServiceAccountsResponse_FieldPathValue = (*BatchGetServiceAccountsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetServiceAccountsResponse' as interface{}
func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) AsServiceAccountsValue() ([]*service_account.ServiceAccount, bool) {
	res, ok := fpv.value.([]*service_account.ServiceAccount)
	return res, ok
}
func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) AsMissingValue() ([]*service_account.Reference, bool) {
	res, ok := fpv.value.([]*service_account.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetServiceAccountsResponse
func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) SetTo(target **BatchGetServiceAccountsResponse) {
	if *target == nil {
		*target = new(BatchGetServiceAccountsResponse)
	}
	switch fpv.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		(*target).ServiceAccounts = fpv.value.([]*service_account.ServiceAccount)
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*service_account.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetServiceAccountsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetServiceAccountsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetServiceAccountsResponse'.
func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetServiceAccountsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return 0, false
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetServiceAccountsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetServiceAccountsResponse))
}

type BatchGetServiceAccountsResponse_FieldSubPathValue struct {
	BatchGetServiceAccountsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetServiceAccountsResponse_FieldPathValue = (*BatchGetServiceAccountsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetServiceAccountsResponse_FieldSubPathValue) AsServiceAccountsPathValue() (service_account.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetServiceAccountsResponse_FieldSubPathValue) SetTo(target **BatchGetServiceAccountsResponse) {
	if *target == nil {
		*target = new(BatchGetServiceAccountsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetServiceAccountsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetServiceAccountsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetServiceAccountsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetServiceAccountsResponse_FieldSubPathValue) CompareWith(source *BatchGetServiceAccountsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetServiceAccountsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetServiceAccountsResponse))
}

// BatchGetServiceAccountsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetServiceAccountsResponse according to their type
// Present only for array (repeated) types.
type BatchGetServiceAccountsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetServiceAccountsResponse_FieldPath
	ContainsValue(*BatchGetServiceAccountsResponse) bool
}

// ParseBatchGetServiceAccountsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetServiceAccountsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServiceAccountsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetServiceAccountsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetServiceAccountsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetServiceAccountsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetServiceAccountsResponse_FieldPathArrayItemValue = (*BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetServiceAccountsResponse as interface{}
func (fpaiv *BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue) AsServiceAccountsItemValue() (*service_account.ServiceAccount, bool) {
	res, ok := fpaiv.value.(*service_account.ServiceAccount)
	return res, ok
}
func (fpaiv *BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*service_account.Reference, bool) {
	res, ok := fpaiv.value.(*service_account.Reference)
	return res, ok
}

func (fpaiv *BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetServiceAccountsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetServiceAccountsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetServiceAccountsResponse'
func (fpaiv *BatchGetServiceAccountsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetServiceAccountsResponse) bool {
	slice := fpaiv.BatchGetServiceAccountsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetServiceAccountsResponse_FieldSubPathArrayItemValue struct {
	BatchGetServiceAccountsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetServiceAccountsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetServiceAccountsResponse_FieldSubPathArrayItemValue) AsServiceAccountsPathItemValue() (service_account.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetServiceAccountsResponse'
func (fpaivs *BatchGetServiceAccountsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetServiceAccountsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServiceAccountsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetServiceAccountsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetServiceAccountsResponse fields according to their type
type BatchGetServiceAccountsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetServiceAccountsResponse_FieldPath
}

func ParseBatchGetServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetServiceAccountsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServiceAccountsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetServiceAccountsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetServiceAccountsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetServiceAccountsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetServiceAccountsResponse_FieldPathArrayOfValues = (*BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		for _, v := range fpaov.values.([][]*service_account.ServiceAccount) {
			values = append(values, v)
		}
	case BatchGetServiceAccountsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*service_account.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsServiceAccountsArrayOfValues() ([][]*service_account.ServiceAccount, bool) {
	res, ok := fpaov.values.([][]*service_account.ServiceAccount)
	return res, ok
}
func (fpaov *BatchGetServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*service_account.Reference, bool) {
	res, ok := fpaov.values.([][]*service_account.Reference)
	return res, ok
}

type BatchGetServiceAccountsResponse_FieldSubPathArrayOfValues struct {
	BatchGetServiceAccountsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetServiceAccountsResponse_FieldPathArrayOfValues = (*BatchGetServiceAccountsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetServiceAccountsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetServiceAccountsResponse_FieldSubPathArrayOfValues) AsServiceAccountsPathArrayOfValues() (service_account.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service_account.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListServiceAccountsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListServiceAccountsRequest_FieldPathSelector
	Get(source *ListServiceAccountsRequest) []interface{}
	GetSingle(source *ListServiceAccountsRequest) (interface{}, bool)
	ClearValue(item *ListServiceAccountsRequest)

	// Those methods build corresponding ListServiceAccountsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListServiceAccountsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListServiceAccountsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListServiceAccountsRequest_FieldPathArrayItemValue
}

type ListServiceAccountsRequest_FieldPathSelector int32

const (
	ListServiceAccountsRequest_FieldPathSelectorParent    ListServiceAccountsRequest_FieldPathSelector = 0
	ListServiceAccountsRequest_FieldPathSelectorPageSize  ListServiceAccountsRequest_FieldPathSelector = 1
	ListServiceAccountsRequest_FieldPathSelectorPageToken ListServiceAccountsRequest_FieldPathSelector = 2
	ListServiceAccountsRequest_FieldPathSelectorOrderBy   ListServiceAccountsRequest_FieldPathSelector = 3
	ListServiceAccountsRequest_FieldPathSelectorFilter    ListServiceAccountsRequest_FieldPathSelector = 4
	ListServiceAccountsRequest_FieldPathSelectorFieldMask ListServiceAccountsRequest_FieldPathSelector = 5
	ListServiceAccountsRequest_FieldPathSelectorView      ListServiceAccountsRequest_FieldPathSelector = 6
)

func (s ListServiceAccountsRequest_FieldPathSelector) String() string {
	switch s {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		return "parent"
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListServiceAccountsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", s))
	}
}

func BuildListServiceAccountsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListServiceAccountsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListServiceAccountsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListServiceAccountsRequest_FieldTerminalPath{selector: ListServiceAccountsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListServiceAccountsRequest", fp)
}

func ParseListServiceAccountsRequest_FieldPath(rawField string) (ListServiceAccountsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListServiceAccountsRequest_FieldPath(fp)
}

func MustParseListServiceAccountsRequest_FieldPath(rawField string) ListServiceAccountsRequest_FieldPath {
	fp, err := ParseListServiceAccountsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListServiceAccountsRequest_FieldTerminalPath struct {
	selector ListServiceAccountsRequest_FieldPathSelector
}

var _ ListServiceAccountsRequest_FieldPath = (*ListServiceAccountsRequest_FieldTerminalPath)(nil)

func (fp *ListServiceAccountsRequest_FieldTerminalPath) Selector() ListServiceAccountsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListServiceAccountsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListServiceAccountsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListServiceAccountsRequest
func (fp *ListServiceAccountsRequest_FieldTerminalPath) Get(source *ListServiceAccountsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListServiceAccountsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListServiceAccountsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListServiceAccountsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListServiceAccountsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListServiceAccountsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListServiceAccountsRequest))
}

// GetSingle returns value pointed by specific field of from source ListServiceAccountsRequest
func (fp *ListServiceAccountsRequest_FieldTerminalPath) GetSingle(source *ListServiceAccountsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListServiceAccountsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListServiceAccountsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListServiceAccountsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		return (*service_account.ParentName)(nil)
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		return (*service_account.PagerCursor)(nil)
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		return (*service_account.OrderBy)(nil)
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		return (*service_account.Filter)(nil)
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	case ListServiceAccountsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) ClearValue(item *ListServiceAccountsRequest) {
	if item != nil {
		switch fp.selector {
		case ListServiceAccountsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListServiceAccountsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListServiceAccountsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListServiceAccountsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListServiceAccountsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListServiceAccountsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListServiceAccountsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListServiceAccountsRequest_FieldPathSelectorParent ||
		fp.selector == ListServiceAccountsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListServiceAccountsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListServiceAccountsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListServiceAccountsRequest_FieldPathSelectorFilter ||
		fp.selector == ListServiceAccountsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListServiceAccountsRequest_FieldPathSelectorView
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) WithIValue(value interface{}) ListServiceAccountsRequest_FieldPathValue {
	switch fp.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.ParentName)}
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.PagerCursor)}
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.OrderBy)}
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.Filter)}
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	case ListServiceAccountsRequest_FieldPathSelectorView:
		return &ListServiceAccountsRequest_FieldTerminalPathValue{ListServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListServiceAccountsRequest_FieldPathArrayOfValues {
	fpaov := &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ParentName)}
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.PagerCursor)}
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.OrderBy)}
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.Filter)}
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	case ListServiceAccountsRequest_FieldPathSelectorView:
		return &ListServiceAccountsRequest_FieldTerminalPathArrayOfValues{ListServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListServiceAccountsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListServiceAccountsRequest_FieldPathValue allows storing values for ListServiceAccountsRequest fields according to their type
type ListServiceAccountsRequest_FieldPathValue interface {
	ListServiceAccountsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListServiceAccountsRequest)
	CompareWith(*ListServiceAccountsRequest) (cmp int, comparable bool)
}

func ParseListServiceAccountsRequest_FieldPathValue(pathStr, valueStr string) (ListServiceAccountsRequest_FieldPathValue, error) {
	fp, err := ParseListServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServiceAccountsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListServiceAccountsRequest_FieldPathValue), nil
}

func MustParseListServiceAccountsRequest_FieldPathValue(pathStr, valueStr string) ListServiceAccountsRequest_FieldPathValue {
	fpv, err := ParseListServiceAccountsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListServiceAccountsRequest_FieldTerminalPathValue struct {
	ListServiceAccountsRequest_FieldTerminalPath
	value interface{}
}

var _ ListServiceAccountsRequest_FieldPathValue = (*ListServiceAccountsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListServiceAccountsRequest' as interface{}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsParentValue() (*service_account.ParentName, bool) {
	res, ok := fpv.value.(*service_account.ParentName)
	return res, ok
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsPageTokenValue() (*service_account.PagerCursor, bool) {
	res, ok := fpv.value.(*service_account.PagerCursor)
	return res, ok
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsOrderByValue() (*service_account.OrderBy, bool) {
	res, ok := fpv.value.(*service_account.OrderBy)
	return res, ok
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsFilterValue() (*service_account.Filter, bool) {
	res, ok := fpv.value.(*service_account.Filter)
	return res, ok
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListServiceAccountsRequest
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) SetTo(target **ListServiceAccountsRequest) {
	if *target == nil {
		*target = new(ListServiceAccountsRequest)
	}
	switch fpv.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*service_account.ParentName)
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*service_account.PagerCursor)
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*service_account.OrderBy)
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*service_account.Filter)
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	case ListServiceAccountsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fpv.selector))
	}
}

func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListServiceAccountsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListServiceAccountsRequest_FieldTerminalPathValue' with the value under path in 'ListServiceAccountsRequest'.
func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) CompareWith(source *ListServiceAccountsRequest) (int, bool) {
	switch fpv.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*service_account.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListServiceAccountsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsRequest: %d", fpv.selector))
	}
}

func (fpv *ListServiceAccountsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListServiceAccountsRequest))
}

// ListServiceAccountsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListServiceAccountsRequest according to their type
// Present only for array (repeated) types.
type ListServiceAccountsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListServiceAccountsRequest_FieldPath
	ContainsValue(*ListServiceAccountsRequest) bool
}

// ParseListServiceAccountsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListServiceAccountsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServiceAccountsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListServiceAccountsRequest_FieldPathArrayItemValue), nil
}

func MustParseListServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListServiceAccountsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListServiceAccountsRequest_FieldTerminalPathArrayItemValue struct {
	ListServiceAccountsRequest_FieldTerminalPath
	value interface{}
}

var _ ListServiceAccountsRequest_FieldPathArrayItemValue = (*ListServiceAccountsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListServiceAccountsRequest as interface{}
func (fpaiv *ListServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListServiceAccountsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListServiceAccountsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListServiceAccountsRequest'
func (fpaiv *ListServiceAccountsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListServiceAccountsRequest) bool {
	slice := fpaiv.ListServiceAccountsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListServiceAccountsRequest_FieldPathArrayOfValues allows storing slice of values for ListServiceAccountsRequest fields according to their type
type ListServiceAccountsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListServiceAccountsRequest_FieldPath
}

func ParseListServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListServiceAccountsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServiceAccountsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListServiceAccountsRequest_FieldPathArrayOfValues), nil
}

func MustParseListServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListServiceAccountsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListServiceAccountsRequest_FieldTerminalPathArrayOfValues struct {
	ListServiceAccountsRequest_FieldTerminalPath
	values interface{}
}

var _ ListServiceAccountsRequest_FieldPathArrayOfValues = (*ListServiceAccountsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListServiceAccountsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*service_account.ParentName) {
			values = append(values, v)
		}
	case ListServiceAccountsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListServiceAccountsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*service_account.PagerCursor) {
			values = append(values, v)
		}
	case ListServiceAccountsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*service_account.OrderBy) {
			values = append(values, v)
		}
	case ListServiceAccountsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*service_account.Filter) {
			values = append(values, v)
		}
	case ListServiceAccountsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	case ListServiceAccountsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*service_account.ParentName, bool) {
	res, ok := fpaov.values.([]*service_account.ParentName)
	return res, ok
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*service_account.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service_account.PagerCursor)
	return res, ok
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*service_account.OrderBy, bool) {
	res, ok := fpaov.values.([]*service_account.OrderBy)
	return res, ok
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*service_account.Filter, bool) {
	res, ok := fpaov.values.([]*service_account.Filter)
	return res, ok
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpaov *ListServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListServiceAccountsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListServiceAccountsResponse_FieldPathSelector
	Get(source *ListServiceAccountsResponse) []interface{}
	GetSingle(source *ListServiceAccountsResponse) (interface{}, bool)
	ClearValue(item *ListServiceAccountsResponse)

	// Those methods build corresponding ListServiceAccountsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListServiceAccountsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListServiceAccountsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListServiceAccountsResponse_FieldPathArrayItemValue
}

type ListServiceAccountsResponse_FieldPathSelector int32

const (
	ListServiceAccountsResponse_FieldPathSelectorServiceAccounts ListServiceAccountsResponse_FieldPathSelector = 0
	ListServiceAccountsResponse_FieldPathSelectorPrevPageToken   ListServiceAccountsResponse_FieldPathSelector = 1
	ListServiceAccountsResponse_FieldPathSelectorNextPageToken   ListServiceAccountsResponse_FieldPathSelector = 2
)

func (s ListServiceAccountsResponse_FieldPathSelector) String() string {
	switch s {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return "service_accounts"
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", s))
	}
}

func BuildListServiceAccountsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListServiceAccountsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListServiceAccountsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_accounts", "serviceAccounts", "service-accounts":
			return &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorServiceAccounts}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListServiceAccountsResponse_FieldTerminalPath{selector: ListServiceAccountsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "service_accounts", "serviceAccounts", "service-accounts":
			if subpath, err := service_account.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListServiceAccountsResponse_FieldSubPath{selector: ListServiceAccountsResponse_FieldPathSelectorServiceAccounts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListServiceAccountsResponse", fp)
}

func ParseListServiceAccountsResponse_FieldPath(rawField string) (ListServiceAccountsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListServiceAccountsResponse_FieldPath(fp)
}

func MustParseListServiceAccountsResponse_FieldPath(rawField string) ListServiceAccountsResponse_FieldPath {
	fp, err := ParseListServiceAccountsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListServiceAccountsResponse_FieldTerminalPath struct {
	selector ListServiceAccountsResponse_FieldPathSelector
}

var _ ListServiceAccountsResponse_FieldPath = (*ListServiceAccountsResponse_FieldTerminalPath)(nil)

func (fp *ListServiceAccountsResponse_FieldTerminalPath) Selector() ListServiceAccountsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListServiceAccountsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListServiceAccountsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListServiceAccountsResponse
func (fp *ListServiceAccountsResponse_FieldTerminalPath) Get(source *ListServiceAccountsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			for _, value := range source.GetServiceAccounts() {
				values = append(values, value)
			}
		case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListServiceAccountsResponse))
}

// GetSingle returns value pointed by specific field of from source ListServiceAccountsResponse
func (fp *ListServiceAccountsResponse_FieldTerminalPath) GetSingle(source *ListServiceAccountsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		res := source.GetServiceAccounts()
		return res, res != nil
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListServiceAccountsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListServiceAccountsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return ([]*service_account.ServiceAccount)(nil)
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		return (*service_account.PagerCursor)(nil)
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		return (*service_account.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) ClearValue(item *ListServiceAccountsResponse) {
	if item != nil {
		switch fp.selector {
		case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			item.ServiceAccounts = nil
		case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListServiceAccountsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListServiceAccountsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListServiceAccountsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListServiceAccountsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) WithIValue(value interface{}) ListServiceAccountsResponse_FieldPathValue {
	switch fp.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return &ListServiceAccountsResponse_FieldTerminalPathValue{ListServiceAccountsResponse_FieldTerminalPath: *fp, value: value.([]*service_account.ServiceAccount)}
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		return &ListServiceAccountsResponse_FieldTerminalPathValue{ListServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*service_account.PagerCursor)}
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		return &ListServiceAccountsResponse_FieldTerminalPathValue{ListServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*service_account.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListServiceAccountsResponse_FieldPathArrayOfValues {
	fpaov := &ListServiceAccountsResponse_FieldTerminalPathArrayOfValues{ListServiceAccountsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return &ListServiceAccountsResponse_FieldTerminalPathArrayOfValues{ListServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([][]*service_account.ServiceAccount)}
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		return &ListServiceAccountsResponse_FieldTerminalPathArrayOfValues{ListServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]*service_account.PagerCursor)}
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		return &ListServiceAccountsResponse_FieldTerminalPathArrayOfValues{ListServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]*service_account.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListServiceAccountsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return &ListServiceAccountsResponse_FieldTerminalPathArrayItemValue{ListServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *ListServiceAccountsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListServiceAccountsResponse_FieldSubPath struct {
	selector ListServiceAccountsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListServiceAccountsResponse_FieldPath = (*ListServiceAccountsResponse_FieldSubPath)(nil)

func (fps *ListServiceAccountsResponse_FieldSubPath) Selector() ListServiceAccountsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListServiceAccountsResponse_FieldSubPath) AsServiceAccountsSubPath() (service_account.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(service_account.ServiceAccount_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListServiceAccountsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListServiceAccountsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListServiceAccountsResponse
func (fps *ListServiceAccountsResponse_FieldSubPath) Get(source *ListServiceAccountsResponse) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsServiceAccountsSubPath(); ok {
		for _, item := range source.GetServiceAccounts() {
			values = append(values, asServiceAccountFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListServiceAccountsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListServiceAccountsResponse))
}

// GetSingle returns value of selected field from source ListServiceAccountsResponse
func (fps *ListServiceAccountsResponse_FieldSubPath) GetSingle(source *ListServiceAccountsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		if len(source.GetServiceAccounts()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccounts()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fps.selector))
	}
}

func (fps *ListServiceAccountsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListServiceAccountsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListServiceAccountsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListServiceAccountsResponse_FieldSubPath) ClearValue(item *ListServiceAccountsResponse) {
	if item != nil {
		switch fps.selector {
		case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
			for _, subItem := range item.ServiceAccounts {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListServiceAccountsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListServiceAccountsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListServiceAccountsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListServiceAccountsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListServiceAccountsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListServiceAccountsResponse_FieldSubPath) WithIValue(value interface{}) ListServiceAccountsResponse_FieldPathValue {
	return &ListServiceAccountsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListServiceAccountsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListServiceAccountsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListServiceAccountsResponse_FieldPathArrayOfValues {
	return &ListServiceAccountsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListServiceAccountsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListServiceAccountsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListServiceAccountsResponse_FieldPathArrayItemValue {
	return &ListServiceAccountsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListServiceAccountsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListServiceAccountsResponse_FieldPathValue allows storing values for ListServiceAccountsResponse fields according to their type
type ListServiceAccountsResponse_FieldPathValue interface {
	ListServiceAccountsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListServiceAccountsResponse)
	CompareWith(*ListServiceAccountsResponse) (cmp int, comparable bool)
}

func ParseListServiceAccountsResponse_FieldPathValue(pathStr, valueStr string) (ListServiceAccountsResponse_FieldPathValue, error) {
	fp, err := ParseListServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServiceAccountsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListServiceAccountsResponse_FieldPathValue), nil
}

func MustParseListServiceAccountsResponse_FieldPathValue(pathStr, valueStr string) ListServiceAccountsResponse_FieldPathValue {
	fpv, err := ParseListServiceAccountsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListServiceAccountsResponse_FieldTerminalPathValue struct {
	ListServiceAccountsResponse_FieldTerminalPath
	value interface{}
}

var _ ListServiceAccountsResponse_FieldPathValue = (*ListServiceAccountsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListServiceAccountsResponse' as interface{}
func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) AsServiceAccountsValue() ([]*service_account.ServiceAccount, bool) {
	res, ok := fpv.value.([]*service_account.ServiceAccount)
	return res, ok
}
func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*service_account.PagerCursor, bool) {
	res, ok := fpv.value.(*service_account.PagerCursor)
	return res, ok
}
func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*service_account.PagerCursor, bool) {
	res, ok := fpv.value.(*service_account.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListServiceAccountsResponse
func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) SetTo(target **ListServiceAccountsResponse) {
	if *target == nil {
		*target = new(ListServiceAccountsResponse)
	}
	switch fpv.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		(*target).ServiceAccounts = fpv.value.([]*service_account.ServiceAccount)
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*service_account.PagerCursor)
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*service_account.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fpv.selector))
	}
}

func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListServiceAccountsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListServiceAccountsResponse_FieldTerminalPathValue' with the value under path in 'ListServiceAccountsResponse'.
func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) CompareWith(source *ListServiceAccountsResponse) (int, bool) {
	switch fpv.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return 0, false
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fpv.selector))
	}
}

func (fpv *ListServiceAccountsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListServiceAccountsResponse))
}

type ListServiceAccountsResponse_FieldSubPathValue struct {
	ListServiceAccountsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListServiceAccountsResponse_FieldPathValue = (*ListServiceAccountsResponse_FieldSubPathValue)(nil)

func (fpvs *ListServiceAccountsResponse_FieldSubPathValue) AsServiceAccountsPathValue() (service_account.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue)
	return res, ok
}

func (fpvs *ListServiceAccountsResponse_FieldSubPathValue) SetTo(target **ListServiceAccountsResponse) {
	if *target == nil {
		*target = new(ListServiceAccountsResponse)
	}
	switch fpvs.Selector() {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListServiceAccountsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListServiceAccountsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListServiceAccountsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListServiceAccountsResponse_FieldSubPathValue) CompareWith(source *ListServiceAccountsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListServiceAccountsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListServiceAccountsResponse))
}

// ListServiceAccountsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListServiceAccountsResponse according to their type
// Present only for array (repeated) types.
type ListServiceAccountsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListServiceAccountsResponse_FieldPath
	ContainsValue(*ListServiceAccountsResponse) bool
}

// ParseListServiceAccountsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListServiceAccountsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServiceAccountsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListServiceAccountsResponse_FieldPathArrayItemValue), nil
}

func MustParseListServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListServiceAccountsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListServiceAccountsResponse_FieldTerminalPathArrayItemValue struct {
	ListServiceAccountsResponse_FieldTerminalPath
	value interface{}
}

var _ ListServiceAccountsResponse_FieldPathArrayItemValue = (*ListServiceAccountsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListServiceAccountsResponse as interface{}
func (fpaiv *ListServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListServiceAccountsResponse_FieldTerminalPathArrayItemValue) AsServiceAccountsItemValue() (*service_account.ServiceAccount, bool) {
	res, ok := fpaiv.value.(*service_account.ServiceAccount)
	return res, ok
}

func (fpaiv *ListServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListServiceAccountsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListServiceAccountsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListServiceAccountsResponse'
func (fpaiv *ListServiceAccountsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListServiceAccountsResponse) bool {
	slice := fpaiv.ListServiceAccountsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListServiceAccountsResponse_FieldSubPathArrayItemValue struct {
	ListServiceAccountsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListServiceAccountsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListServiceAccountsResponse_FieldSubPathArrayItemValue) AsServiceAccountsPathItemValue() (service_account.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListServiceAccountsResponse'
func (fpaivs *ListServiceAccountsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListServiceAccountsResponse) bool {
	switch fpaivs.Selector() {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListServiceAccountsResponse: %d", fpaivs.Selector()))
	}
}

// ListServiceAccountsResponse_FieldPathArrayOfValues allows storing slice of values for ListServiceAccountsResponse fields according to their type
type ListServiceAccountsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListServiceAccountsResponse_FieldPath
}

func ParseListServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListServiceAccountsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServiceAccountsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListServiceAccountsResponse_FieldPathArrayOfValues), nil
}

func MustParseListServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListServiceAccountsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListServiceAccountsResponse_FieldTerminalPathArrayOfValues struct {
	ListServiceAccountsResponse_FieldTerminalPath
	values interface{}
}

var _ ListServiceAccountsResponse_FieldPathArrayOfValues = (*ListServiceAccountsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListServiceAccountsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListServiceAccountsResponse_FieldPathSelectorServiceAccounts:
		for _, v := range fpaov.values.([][]*service_account.ServiceAccount) {
			values = append(values, v)
		}
	case ListServiceAccountsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*service_account.PagerCursor) {
			values = append(values, v)
		}
	case ListServiceAccountsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*service_account.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsServiceAccountsArrayOfValues() ([][]*service_account.ServiceAccount, bool) {
	res, ok := fpaov.values.([][]*service_account.ServiceAccount)
	return res, ok
}
func (fpaov *ListServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*service_account.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service_account.PagerCursor)
	return res, ok
}
func (fpaov *ListServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*service_account.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service_account.PagerCursor)
	return res, ok
}

type ListServiceAccountsResponse_FieldSubPathArrayOfValues struct {
	ListServiceAccountsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListServiceAccountsResponse_FieldPathArrayOfValues = (*ListServiceAccountsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListServiceAccountsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListServiceAccountsResponse_FieldSubPathArrayOfValues) AsServiceAccountsPathArrayOfValues() (service_account.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service_account.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceAccountRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceAccountRequest_FieldPathSelector
	Get(source *WatchServiceAccountRequest) []interface{}
	GetSingle(source *WatchServiceAccountRequest) (interface{}, bool)
	ClearValue(item *WatchServiceAccountRequest)

	// Those methods build corresponding WatchServiceAccountRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceAccountRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceAccountRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceAccountRequest_FieldPathArrayItemValue
}

type WatchServiceAccountRequest_FieldPathSelector int32

const (
	WatchServiceAccountRequest_FieldPathSelectorName      WatchServiceAccountRequest_FieldPathSelector = 0
	WatchServiceAccountRequest_FieldPathSelectorFieldMask WatchServiceAccountRequest_FieldPathSelector = 1
	WatchServiceAccountRequest_FieldPathSelectorView      WatchServiceAccountRequest_FieldPathSelector = 2
)

func (s WatchServiceAccountRequest_FieldPathSelector) String() string {
	switch s {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		return "name"
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchServiceAccountRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", s))
	}
}

func BuildWatchServiceAccountRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceAccountRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceAccountRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchServiceAccountRequest_FieldTerminalPath{selector: WatchServiceAccountRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceAccountRequest", fp)
}

func ParseWatchServiceAccountRequest_FieldPath(rawField string) (WatchServiceAccountRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceAccountRequest_FieldPath(fp)
}

func MustParseWatchServiceAccountRequest_FieldPath(rawField string) WatchServiceAccountRequest_FieldPath {
	fp, err := ParseWatchServiceAccountRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceAccountRequest_FieldTerminalPath struct {
	selector WatchServiceAccountRequest_FieldPathSelector
}

var _ WatchServiceAccountRequest_FieldPath = (*WatchServiceAccountRequest_FieldTerminalPath)(nil)

func (fp *WatchServiceAccountRequest_FieldTerminalPath) Selector() WatchServiceAccountRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceAccountRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceAccountRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceAccountRequest
func (fp *WatchServiceAccountRequest_FieldTerminalPath) Get(source *WatchServiceAccountRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceAccountRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchServiceAccountRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceAccountRequest))
}

// GetSingle returns value pointed by specific field of from source WatchServiceAccountRequest
func (fp *WatchServiceAccountRequest_FieldTerminalPath) GetSingle(source *WatchServiceAccountRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchServiceAccountRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceAccountRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		return (*service_account.Reference)(nil)
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	case WatchServiceAccountRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) ClearValue(item *WatchServiceAccountRequest) {
	if item != nil {
		switch fp.selector {
		case WatchServiceAccountRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchServiceAccountRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceAccountRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceAccountRequest_FieldPathSelectorName ||
		fp.selector == WatchServiceAccountRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchServiceAccountRequest_FieldPathSelectorView
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) WithIValue(value interface{}) WatchServiceAccountRequest_FieldPathValue {
	switch fp.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		return &WatchServiceAccountRequest_FieldTerminalPathValue{WatchServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.Reference)}
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		return &WatchServiceAccountRequest_FieldTerminalPathValue{WatchServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	case WatchServiceAccountRequest_FieldPathSelectorView:
		return &WatchServiceAccountRequest_FieldTerminalPathValue{WatchServiceAccountRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceAccountRequest_FieldPathArrayOfValues {
	fpaov := &WatchServiceAccountRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		return &WatchServiceAccountRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.Reference)}
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		return &WatchServiceAccountRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	case WatchServiceAccountRequest_FieldPathSelectorView:
		return &WatchServiceAccountRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceAccountRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServiceAccountRequest_FieldPathValue allows storing values for WatchServiceAccountRequest fields according to their type
type WatchServiceAccountRequest_FieldPathValue interface {
	WatchServiceAccountRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceAccountRequest)
	CompareWith(*WatchServiceAccountRequest) (cmp int, comparable bool)
}

func ParseWatchServiceAccountRequest_FieldPathValue(pathStr, valueStr string) (WatchServiceAccountRequest_FieldPathValue, error) {
	fp, err := ParseWatchServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceAccountRequest_FieldPathValue), nil
}

func MustParseWatchServiceAccountRequest_FieldPathValue(pathStr, valueStr string) WatchServiceAccountRequest_FieldPathValue {
	fpv, err := ParseWatchServiceAccountRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceAccountRequest_FieldTerminalPathValue struct {
	WatchServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountRequest_FieldPathValue = (*WatchServiceAccountRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServiceAccountRequest' as interface{}
func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) AsNameValue() (*service_account.Reference, bool) {
	res, ok := fpv.value.(*service_account.Reference)
	return res, ok
}
func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchServiceAccountRequest
func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) SetTo(target **WatchServiceAccountRequest) {
	if *target == nil {
		*target = new(WatchServiceAccountRequest)
	}
	switch fpv.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*service_account.Reference)
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	case WatchServiceAccountRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceAccountRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceAccountRequest_FieldTerminalPathValue' with the value under path in 'WatchServiceAccountRequest'.
func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) CompareWith(source *WatchServiceAccountRequest) (int, bool) {
	switch fpv.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*service_account.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchServiceAccountRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceAccountRequest))
}

// WatchServiceAccountRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServiceAccountRequest according to their type
// Present only for array (repeated) types.
type WatchServiceAccountRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceAccountRequest_FieldPath
	ContainsValue(*WatchServiceAccountRequest) bool
}

// ParseWatchServiceAccountRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceAccountRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceAccountRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceAccountRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceAccountRequest_FieldTerminalPathArrayItemValue struct {
	WatchServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountRequest_FieldPathArrayItemValue = (*WatchServiceAccountRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceAccountRequest as interface{}
func (fpaiv *WatchServiceAccountRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceAccountRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceAccountRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceAccountRequest'
func (fpaiv *WatchServiceAccountRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceAccountRequest) bool {
	slice := fpaiv.WatchServiceAccountRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServiceAccountRequest_FieldPathArrayOfValues allows storing slice of values for WatchServiceAccountRequest fields according to their type
type WatchServiceAccountRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceAccountRequest_FieldPath
}

func ParseWatchServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceAccountRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceAccountRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceAccountRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceAccountRequest_FieldTerminalPathArrayOfValues struct {
	WatchServiceAccountRequest_FieldTerminalPath
	values interface{}
}

var _ WatchServiceAccountRequest_FieldPathArrayOfValues = (*WatchServiceAccountRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceAccountRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceAccountRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*service_account.Reference) {
			values = append(values, v)
		}
	case WatchServiceAccountRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	case WatchServiceAccountRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceAccountRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*service_account.Reference, bool) {
	res, ok := fpaov.values.([]*service_account.Reference)
	return res, ok
}
func (fpaov *WatchServiceAccountRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpaov *WatchServiceAccountRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceAccountResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceAccountResponse_FieldPathSelector
	Get(source *WatchServiceAccountResponse) []interface{}
	GetSingle(source *WatchServiceAccountResponse) (interface{}, bool)
	ClearValue(item *WatchServiceAccountResponse)

	// Those methods build corresponding WatchServiceAccountResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceAccountResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceAccountResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceAccountResponse_FieldPathArrayItemValue
}

type WatchServiceAccountResponse_FieldPathSelector int32

const (
	WatchServiceAccountResponse_FieldPathSelectorChange WatchServiceAccountResponse_FieldPathSelector = 0
)

func (s WatchServiceAccountResponse_FieldPathSelector) String() string {
	switch s {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", s))
	}
}

func BuildWatchServiceAccountResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceAccountResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceAccountResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchServiceAccountResponse_FieldTerminalPath{selector: WatchServiceAccountResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceAccountResponse", fp)
}

func ParseWatchServiceAccountResponse_FieldPath(rawField string) (WatchServiceAccountResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceAccountResponse_FieldPath(fp)
}

func MustParseWatchServiceAccountResponse_FieldPath(rawField string) WatchServiceAccountResponse_FieldPath {
	fp, err := ParseWatchServiceAccountResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceAccountResponse_FieldTerminalPath struct {
	selector WatchServiceAccountResponse_FieldPathSelector
}

var _ WatchServiceAccountResponse_FieldPath = (*WatchServiceAccountResponse_FieldTerminalPath)(nil)

func (fp *WatchServiceAccountResponse_FieldTerminalPath) Selector() WatchServiceAccountResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceAccountResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceAccountResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceAccountResponse
func (fp *WatchServiceAccountResponse_FieldTerminalPath) Get(source *WatchServiceAccountResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceAccountResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceAccountResponse))
}

// GetSingle returns value pointed by specific field of from source WatchServiceAccountResponse
func (fp *WatchServiceAccountResponse_FieldTerminalPath) GetSingle(source *WatchServiceAccountResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceAccountResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceAccountResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		return (*service_account.ServiceAccountChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) ClearValue(item *WatchServiceAccountResponse) {
	if item != nil {
		switch fp.selector {
		case WatchServiceAccountResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceAccountResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceAccountResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceAccountResponse_FieldPathSelectorChange
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) WithIValue(value interface{}) WatchServiceAccountResponse_FieldPathValue {
	switch fp.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		return &WatchServiceAccountResponse_FieldTerminalPathValue{WatchServiceAccountResponse_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccountChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceAccountResponse_FieldPathArrayOfValues {
	fpaov := &WatchServiceAccountResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		return &WatchServiceAccountResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountResponse_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccountChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceAccountResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServiceAccountResponse_FieldPathValue allows storing values for WatchServiceAccountResponse fields according to their type
type WatchServiceAccountResponse_FieldPathValue interface {
	WatchServiceAccountResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceAccountResponse)
	CompareWith(*WatchServiceAccountResponse) (cmp int, comparable bool)
}

func ParseWatchServiceAccountResponse_FieldPathValue(pathStr, valueStr string) (WatchServiceAccountResponse_FieldPathValue, error) {
	fp, err := ParseWatchServiceAccountResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceAccountResponse_FieldPathValue), nil
}

func MustParseWatchServiceAccountResponse_FieldPathValue(pathStr, valueStr string) WatchServiceAccountResponse_FieldPathValue {
	fpv, err := ParseWatchServiceAccountResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceAccountResponse_FieldTerminalPathValue struct {
	WatchServiceAccountResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountResponse_FieldPathValue = (*WatchServiceAccountResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServiceAccountResponse' as interface{}
func (fpv *WatchServiceAccountResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceAccountResponse_FieldTerminalPathValue) AsChangeValue() (*service_account.ServiceAccountChange, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccountChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchServiceAccountResponse
func (fpv *WatchServiceAccountResponse_FieldTerminalPathValue) SetTo(target **WatchServiceAccountResponse) {
	if *target == nil {
		*target = new(WatchServiceAccountResponse)
	}
	switch fpv.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*service_account.ServiceAccountChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceAccountResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceAccountResponse_FieldTerminalPathValue' with the value under path in 'WatchServiceAccountResponse'.
func (fpv *WatchServiceAccountResponse_FieldTerminalPathValue) CompareWith(source *WatchServiceAccountResponse) (int, bool) {
	switch fpv.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceAccountResponse))
}

// WatchServiceAccountResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServiceAccountResponse according to their type
// Present only for array (repeated) types.
type WatchServiceAccountResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceAccountResponse_FieldPath
	ContainsValue(*WatchServiceAccountResponse) bool
}

// ParseWatchServiceAccountResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceAccountResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceAccountResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceAccountResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceAccountResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceAccountResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceAccountResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceAccountResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceAccountResponse_FieldTerminalPathArrayItemValue struct {
	WatchServiceAccountResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountResponse_FieldPathArrayItemValue = (*WatchServiceAccountResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceAccountResponse as interface{}
func (fpaiv *WatchServiceAccountResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServiceAccountResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceAccountResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceAccountResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceAccountResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceAccountResponse'
func (fpaiv *WatchServiceAccountResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceAccountResponse) bool {
	slice := fpaiv.WatchServiceAccountResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServiceAccountResponse_FieldPathArrayOfValues allows storing slice of values for WatchServiceAccountResponse fields according to their type
type WatchServiceAccountResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceAccountResponse_FieldPath
}

func ParseWatchServiceAccountResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceAccountResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceAccountResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceAccountResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceAccountResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceAccountResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceAccountResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceAccountResponse_FieldTerminalPathArrayOfValues struct {
	WatchServiceAccountResponse_FieldTerminalPath
	values interface{}
}

var _ WatchServiceAccountResponse_FieldPathArrayOfValues = (*WatchServiceAccountResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceAccountResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceAccountResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*service_account.ServiceAccountChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceAccountResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*service_account.ServiceAccountChange, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccountChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceAccountsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceAccountsRequest_FieldPathSelector
	Get(source *WatchServiceAccountsRequest) []interface{}
	GetSingle(source *WatchServiceAccountsRequest) (interface{}, bool)
	ClearValue(item *WatchServiceAccountsRequest)

	// Those methods build corresponding WatchServiceAccountsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceAccountsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceAccountsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceAccountsRequest_FieldPathArrayItemValue
}

type WatchServiceAccountsRequest_FieldPathSelector int32

const (
	WatchServiceAccountsRequest_FieldPathSelectorType         WatchServiceAccountsRequest_FieldPathSelector = 0
	WatchServiceAccountsRequest_FieldPathSelectorParent       WatchServiceAccountsRequest_FieldPathSelector = 1
	WatchServiceAccountsRequest_FieldPathSelectorPageSize     WatchServiceAccountsRequest_FieldPathSelector = 2
	WatchServiceAccountsRequest_FieldPathSelectorPageToken    WatchServiceAccountsRequest_FieldPathSelector = 3
	WatchServiceAccountsRequest_FieldPathSelectorOrderBy      WatchServiceAccountsRequest_FieldPathSelector = 4
	WatchServiceAccountsRequest_FieldPathSelectorResumeToken  WatchServiceAccountsRequest_FieldPathSelector = 5
	WatchServiceAccountsRequest_FieldPathSelectorStartingTime WatchServiceAccountsRequest_FieldPathSelector = 6
	WatchServiceAccountsRequest_FieldPathSelectorFilter       WatchServiceAccountsRequest_FieldPathSelector = 7
	WatchServiceAccountsRequest_FieldPathSelectorFieldMask    WatchServiceAccountsRequest_FieldPathSelector = 8
	WatchServiceAccountsRequest_FieldPathSelectorView         WatchServiceAccountsRequest_FieldPathSelector = 9
	WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize WatchServiceAccountsRequest_FieldPathSelector = 10
)

func (s WatchServiceAccountsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		return "type"
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		return "view"
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", s))
	}
}

func BuildWatchServiceAccountsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceAccountsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceAccountsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchServiceAccountsRequest_FieldTerminalPath{selector: WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceAccountsRequest", fp)
}

func ParseWatchServiceAccountsRequest_FieldPath(rawField string) (WatchServiceAccountsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceAccountsRequest_FieldPath(fp)
}

func MustParseWatchServiceAccountsRequest_FieldPath(rawField string) WatchServiceAccountsRequest_FieldPath {
	fp, err := ParseWatchServiceAccountsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceAccountsRequest_FieldTerminalPath struct {
	selector WatchServiceAccountsRequest_FieldPathSelector
}

var _ WatchServiceAccountsRequest_FieldPath = (*WatchServiceAccountsRequest_FieldTerminalPath)(nil)

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) Selector() WatchServiceAccountsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceAccountsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceAccountsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceAccountsRequest
func (fp *WatchServiceAccountsRequest_FieldTerminalPath) Get(source *WatchServiceAccountsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceAccountsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchServiceAccountsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchServiceAccountsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchServiceAccountsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceAccountsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchServiceAccountsRequest
func (fp *WatchServiceAccountsRequest_FieldTerminalPath) GetSingle(source *WatchServiceAccountsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceAccountsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceAccountsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		return (*service_account.ParentReference)(nil)
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		return (*service_account.PagerCursor)(nil)
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		return (*service_account.OrderBy)(nil)
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		return (*service_account.Filter)(nil)
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) ClearValue(item *WatchServiceAccountsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchServiceAccountsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchServiceAccountsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchServiceAccountsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchServiceAccountsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceAccountsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceAccountsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceAccountsRequest_FieldPathSelectorType ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorParent ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorView ||
		fp.selector == WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchServiceAccountsRequest_FieldPathValue {
	switch fp.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.ParentReference)}
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.PagerCursor)}
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.OrderBy)}
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.Filter)}
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchServiceAccountsRequest_FieldTerminalPathValue{WatchServiceAccountsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceAccountsRequest_FieldPathArrayOfValues {
	fpaov := &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ParentReference)}
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.PagerCursor)}
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.OrderBy)}
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.Filter)}
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues{WatchServiceAccountsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceAccountsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServiceAccountsRequest_FieldPathValue allows storing values for WatchServiceAccountsRequest fields according to their type
type WatchServiceAccountsRequest_FieldPathValue interface {
	WatchServiceAccountsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceAccountsRequest)
	CompareWith(*WatchServiceAccountsRequest) (cmp int, comparable bool)
}

func ParseWatchServiceAccountsRequest_FieldPathValue(pathStr, valueStr string) (WatchServiceAccountsRequest_FieldPathValue, error) {
	fp, err := ParseWatchServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceAccountsRequest_FieldPathValue), nil
}

func MustParseWatchServiceAccountsRequest_FieldPathValue(pathStr, valueStr string) WatchServiceAccountsRequest_FieldPathValue {
	fpv, err := ParseWatchServiceAccountsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceAccountsRequest_FieldTerminalPathValue struct {
	WatchServiceAccountsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountsRequest_FieldPathValue = (*WatchServiceAccountsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServiceAccountsRequest' as interface{}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsParentValue() (*service_account.ParentReference, bool) {
	res, ok := fpv.value.(*service_account.ParentReference)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsPageTokenValue() (*service_account.PagerCursor, bool) {
	res, ok := fpv.value.(*service_account.PagerCursor)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsOrderByValue() (*service_account.OrderBy, bool) {
	res, ok := fpv.value.(*service_account.OrderBy)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsFilterValue() (*service_account.Filter, bool) {
	res, ok := fpv.value.(*service_account.Filter)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchServiceAccountsRequest
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) SetTo(target **WatchServiceAccountsRequest) {
	if *target == nil {
		*target = new(WatchServiceAccountsRequest)
	}
	switch fpv.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*service_account.ParentReference)
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*service_account.PagerCursor)
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*service_account.OrderBy)
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*service_account.Filter)
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceAccountsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceAccountsRequest_FieldTerminalPathValue' with the value under path in 'WatchServiceAccountsRequest'.
func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) CompareWith(source *WatchServiceAccountsRequest) (int, bool) {
	switch fpv.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*service_account.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceAccountsRequest))
}

// WatchServiceAccountsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServiceAccountsRequest according to their type
// Present only for array (repeated) types.
type WatchServiceAccountsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceAccountsRequest_FieldPath
	ContainsValue(*WatchServiceAccountsRequest) bool
}

// ParseWatchServiceAccountsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceAccountsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceAccountsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceAccountsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceAccountsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceAccountsRequest_FieldTerminalPathArrayItemValue struct {
	WatchServiceAccountsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountsRequest_FieldPathArrayItemValue = (*WatchServiceAccountsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceAccountsRequest as interface{}
func (fpaiv *WatchServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceAccountsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceAccountsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceAccountsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceAccountsRequest'
func (fpaiv *WatchServiceAccountsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceAccountsRequest) bool {
	slice := fpaiv.WatchServiceAccountsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServiceAccountsRequest_FieldPathArrayOfValues allows storing slice of values for WatchServiceAccountsRequest fields according to their type
type WatchServiceAccountsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceAccountsRequest_FieldPath
}

func ParseWatchServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceAccountsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceAccountsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceAccountsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceAccountsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceAccountsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues struct {
	WatchServiceAccountsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchServiceAccountsRequest_FieldPathArrayOfValues = (*WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceAccountsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*service_account.ParentReference) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*service_account.PagerCursor) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*service_account.OrderBy) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*service_account.Filter) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchServiceAccountsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*service_account.ParentReference, bool) {
	res, ok := fpaov.values.([]*service_account.ParentReference)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*service_account.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service_account.PagerCursor)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*service_account.OrderBy, bool) {
	res, ok := fpaov.values.([]*service_account.OrderBy)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*service_account.Filter, bool) {
	res, ok := fpaov.values.([]*service_account.Filter)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchServiceAccountsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceAccountsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceAccountsResponse_FieldPathSelector
	Get(source *WatchServiceAccountsResponse) []interface{}
	GetSingle(source *WatchServiceAccountsResponse) (interface{}, bool)
	ClearValue(item *WatchServiceAccountsResponse)

	// Those methods build corresponding WatchServiceAccountsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceAccountsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceAccountsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceAccountsResponse_FieldPathArrayItemValue
}

type WatchServiceAccountsResponse_FieldPathSelector int32

const (
	WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges WatchServiceAccountsResponse_FieldPathSelector = 0
	WatchServiceAccountsResponse_FieldPathSelectorIsCurrent             WatchServiceAccountsResponse_FieldPathSelector = 1
	WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange       WatchServiceAccountsResponse_FieldPathSelector = 2
	WatchServiceAccountsResponse_FieldPathSelectorResumeToken           WatchServiceAccountsResponse_FieldPathSelector = 3
	WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize          WatchServiceAccountsResponse_FieldPathSelector = 4
	WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset           WatchServiceAccountsResponse_FieldPathSelector = 5
	WatchServiceAccountsResponse_FieldPathSelectorIsHardReset           WatchServiceAccountsResponse_FieldPathSelector = 6
)

func (s WatchServiceAccountsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		return "service_account_changes"
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", s))
	}
}

func BuildWatchServiceAccountsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceAccountsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceAccountsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_account_changes", "serviceAccountChanges", "service-account-changes":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchServiceAccountsResponse_FieldTerminalPath{selector: WatchServiceAccountsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchServiceAccountsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchServiceAccountsResponse_FieldSubPath{selector: WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceAccountsResponse", fp)
}

func ParseWatchServiceAccountsResponse_FieldPath(rawField string) (WatchServiceAccountsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceAccountsResponse_FieldPath(fp)
}

func MustParseWatchServiceAccountsResponse_FieldPath(rawField string) WatchServiceAccountsResponse_FieldPath {
	fp, err := ParseWatchServiceAccountsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceAccountsResponse_FieldTerminalPath struct {
	selector WatchServiceAccountsResponse_FieldPathSelector
}

var _ WatchServiceAccountsResponse_FieldPath = (*WatchServiceAccountsResponse_FieldTerminalPath)(nil)

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) Selector() WatchServiceAccountsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceAccountsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceAccountsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceAccountsResponse
func (fp *WatchServiceAccountsResponse_FieldTerminalPath) Get(source *WatchServiceAccountsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
			for _, value := range source.GetServiceAccountChanges() {
				values = append(values, value)
			}
		case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceAccountsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchServiceAccountsResponse
func (fp *WatchServiceAccountsResponse_FieldTerminalPath) GetSingle(source *WatchServiceAccountsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		res := source.GetServiceAccountChanges()
		return res, res != nil
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceAccountsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceAccountsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		return ([]*service_account.ServiceAccountChange)(nil)
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchServiceAccountsResponse_PageTokenChange)(nil)
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) ClearValue(item *WatchServiceAccountsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
			item.ServiceAccountChanges = nil
		case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceAccountsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceAccountsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges ||
		fp.selector == WatchServiceAccountsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchServiceAccountsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchServiceAccountsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchServiceAccountsResponse_FieldPathValue {
	switch fp.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.([]*service_account.ServiceAccountChange)}
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*WatchServiceAccountsResponse_PageTokenChange)}
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		return &WatchServiceAccountsResponse_FieldTerminalPathValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceAccountsResponse_FieldPathArrayOfValues {
	fpaov := &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([][]*service_account.ServiceAccountChange)}
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]*WatchServiceAccountsResponse_PageTokenChange)}
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceAccountsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		return &WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue{WatchServiceAccountsResponse_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccountChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchServiceAccountsResponse_FieldSubPath struct {
	selector WatchServiceAccountsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchServiceAccountsResponse_FieldPath = (*WatchServiceAccountsResponse_FieldSubPath)(nil)

func (fps *WatchServiceAccountsResponse_FieldSubPath) Selector() WatchServiceAccountsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchServiceAccountsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchServiceAccountsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchServiceAccountsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchServiceAccountsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchServiceAccountsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchServiceAccountsResponse
func (fps *WatchServiceAccountsResponse_FieldSubPath) Get(source *WatchServiceAccountsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchServiceAccountsResponse))
}

// GetSingle returns value of selected field from source WatchServiceAccountsResponse
func (fps *WatchServiceAccountsResponse_FieldSubPath) GetSingle(source *WatchServiceAccountsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fps.selector))
	}
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchServiceAccountsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchServiceAccountsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) ClearValue(item *WatchServiceAccountsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchServiceAccountsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchServiceAccountsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchServiceAccountsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) WithIValue(value interface{}) WatchServiceAccountsResponse_FieldPathValue {
	return &WatchServiceAccountsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchServiceAccountsResponse_FieldPathArrayOfValues {
	return &WatchServiceAccountsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchServiceAccountsResponse_FieldPathArrayItemValue {
	return &WatchServiceAccountsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchServiceAccountsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchServiceAccountsResponse_FieldPathValue allows storing values for WatchServiceAccountsResponse fields according to their type
type WatchServiceAccountsResponse_FieldPathValue interface {
	WatchServiceAccountsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceAccountsResponse)
	CompareWith(*WatchServiceAccountsResponse) (cmp int, comparable bool)
}

func ParseWatchServiceAccountsResponse_FieldPathValue(pathStr, valueStr string) (WatchServiceAccountsResponse_FieldPathValue, error) {
	fp, err := ParseWatchServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceAccountsResponse_FieldPathValue), nil
}

func MustParseWatchServiceAccountsResponse_FieldPathValue(pathStr, valueStr string) WatchServiceAccountsResponse_FieldPathValue {
	fpv, err := ParseWatchServiceAccountsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceAccountsResponse_FieldTerminalPathValue struct {
	WatchServiceAccountsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountsResponse_FieldPathValue = (*WatchServiceAccountsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServiceAccountsResponse' as interface{}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsServiceAccountChangesValue() ([]*service_account.ServiceAccountChange, bool) {
	res, ok := fpv.value.([]*service_account.ServiceAccountChange)
	return res, ok
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchServiceAccountsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchServiceAccountsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchServiceAccountsResponse
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) SetTo(target **WatchServiceAccountsResponse) {
	if *target == nil {
		*target = new(WatchServiceAccountsResponse)
	}
	switch fpv.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		(*target).ServiceAccountChanges = fpv.value.([]*service_account.ServiceAccountChange)
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchServiceAccountsResponse_PageTokenChange)
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceAccountsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceAccountsResponse_FieldTerminalPathValue' with the value under path in 'WatchServiceAccountsResponse'.
func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) CompareWith(source *WatchServiceAccountsResponse) (int, bool) {
	switch fpv.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		return 0, false
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceAccountsResponse))
}

type WatchServiceAccountsResponse_FieldSubPathValue struct {
	WatchServiceAccountsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchServiceAccountsResponse_FieldPathValue = (*WatchServiceAccountsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchServiceAccountsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchServiceAccountsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchServiceAccountsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchServiceAccountsResponse_FieldSubPathValue) SetTo(target **WatchServiceAccountsResponse) {
	if *target == nil {
		*target = new(WatchServiceAccountsResponse)
	}
	switch fpvs.Selector() {
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchServiceAccountsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchServiceAccountsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceAccountsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchServiceAccountsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchServiceAccountsResponse_FieldSubPathValue) CompareWith(source *WatchServiceAccountsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchServiceAccountsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchServiceAccountsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchServiceAccountsResponse))
}

// WatchServiceAccountsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServiceAccountsResponse according to their type
// Present only for array (repeated) types.
type WatchServiceAccountsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceAccountsResponse_FieldPath
	ContainsValue(*WatchServiceAccountsResponse) bool
}

// ParseWatchServiceAccountsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceAccountsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceAccountsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceAccountsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceAccountsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue struct {
	WatchServiceAccountsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountsResponse_FieldPathArrayItemValue = (*WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceAccountsResponse as interface{}
func (fpaiv *WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue) AsServiceAccountChangesItemValue() (*service_account.ServiceAccountChange, bool) {
	res, ok := fpaiv.value.(*service_account.ServiceAccountChange)
	return res, ok
}

func (fpaiv *WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceAccountsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceAccountsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceAccountsResponse'
func (fpaiv *WatchServiceAccountsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceAccountsResponse) bool {
	slice := fpaiv.WatchServiceAccountsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchServiceAccountsResponse_FieldSubPathArrayItemValue struct {
	WatchServiceAccountsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchServiceAccountsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchServiceAccountsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceAccountsResponse'
func (fpaivs *WatchServiceAccountsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchServiceAccountsResponse) bool {
	switch fpaivs.Selector() {
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse: %d", fpaivs.Selector()))
	}
}

// WatchServiceAccountsResponse_FieldPathArrayOfValues allows storing slice of values for WatchServiceAccountsResponse fields according to their type
type WatchServiceAccountsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceAccountsResponse_FieldPath
}

func ParseWatchServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceAccountsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceAccountsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceAccountsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceAccountsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceAccountsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceAccountsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues struct {
	WatchServiceAccountsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchServiceAccountsResponse_FieldPathArrayOfValues = (*WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceAccountsResponse_FieldPathSelectorServiceAccountChanges:
		for _, v := range fpaov.values.([][]*service_account.ServiceAccountChange) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchServiceAccountsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsServiceAccountChangesArrayOfValues() ([][]*service_account.ServiceAccountChange, bool) {
	res, ok := fpaov.values.([][]*service_account.ServiceAccountChange)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchServiceAccountsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchServiceAccountsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchServiceAccountsResponse_FieldSubPathArrayOfValues struct {
	WatchServiceAccountsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchServiceAccountsResponse_FieldPathArrayOfValues = (*WatchServiceAccountsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchServiceAccountsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchServiceAccountsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceAccountsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceAccountsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchServiceAccountsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchServiceAccountsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchServiceAccountsResponse_PageTokenChange)

	// Those methods build corresponding WatchServiceAccountsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceAccountsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchServiceAccountsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchServiceAccountsResponsePageTokenChange_FieldPathSelector = 0
	WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchServiceAccountsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchServiceAccountsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchServiceAccountsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceAccountsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceAccountsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath{selector: WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceAccountsResponse_PageTokenChange", fp)
}

func ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(rawField string) (WatchServiceAccountsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceAccountsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchServiceAccountsResponsePageTokenChange_FieldPath(rawField string) WatchServiceAccountsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchServiceAccountsResponsePageTokenChange_FieldPathSelector
}

var _ WatchServiceAccountsResponsePageTokenChange_FieldPath = (*WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) Selector() WatchServiceAccountsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceAccountsResponse_PageTokenChange
func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchServiceAccountsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceAccountsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchServiceAccountsResponse_PageTokenChange
func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchServiceAccountsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceAccountsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*service_account.PagerCursor)(nil)
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*service_account.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchServiceAccountsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceAccountsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchServiceAccountsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue{WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*service_account.PagerCursor)}
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue{WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*service_account.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*service_account.PagerCursor)}
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*service_account.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServiceAccountsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchServiceAccountsResponsePageTokenChange_FieldPathValue interface {
	WatchServiceAccountsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceAccountsResponse_PageTokenChange)
	CompareWith(*WatchServiceAccountsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchServiceAccountsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchServiceAccountsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceAccountsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchServiceAccountsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchServiceAccountsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountsResponsePageTokenChange_FieldPathValue = (*WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*service_account.PagerCursor, bool) {
	res, ok := fpv.value.(*service_account.PagerCursor)
	return res, ok
}
func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*service_account.PagerCursor, bool) {
	res, ok := fpv.value.(*service_account.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchServiceAccountsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchServiceAccountsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*service_account.PagerCursor)
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*service_account.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceAccountsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchServiceAccountsResponse_PageTokenChange'.
func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchServiceAccountsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceAccountsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceAccountsResponse_PageTokenChange))
}

// WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceAccountsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchServiceAccountsResponse_PageTokenChange) bool
}

// ParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchServiceAccountsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceAccountsResponse_PageTokenChange as interface{}
func (fpaiv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceAccountsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceAccountsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceAccountsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceAccountsResponsePageTokenChange_FieldPath
}

func ParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchServiceAccountsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchServiceAccountsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*service_account.PagerCursor) {
			values = append(values, v)
		}
	case WatchServiceAccountsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*service_account.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*service_account.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service_account.PagerCursor)
	return res, ok
}
func (fpaov *WatchServiceAccountsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*service_account.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service_account.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateServiceAccountRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateServiceAccountRequest_FieldPathSelector
	Get(source *CreateServiceAccountRequest) []interface{}
	GetSingle(source *CreateServiceAccountRequest) (interface{}, bool)
	ClearValue(item *CreateServiceAccountRequest)

	// Those methods build corresponding CreateServiceAccountRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateServiceAccountRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateServiceAccountRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateServiceAccountRequest_FieldPathArrayItemValue
}

type CreateServiceAccountRequest_FieldPathSelector int32

const (
	CreateServiceAccountRequest_FieldPathSelectorParent         CreateServiceAccountRequest_FieldPathSelector = 0
	CreateServiceAccountRequest_FieldPathSelectorServiceAccount CreateServiceAccountRequest_FieldPathSelector = 1
)

func (s CreateServiceAccountRequest_FieldPathSelector) String() string {
	switch s {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		return "parent"
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return "service_account"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", s))
	}
}

func BuildCreateServiceAccountRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateServiceAccountRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateServiceAccountRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateServiceAccountRequest_FieldTerminalPath{selector: CreateServiceAccountRequest_FieldPathSelectorParent}, nil
		case "service_account", "serviceAccount", "service-account":
			return &CreateServiceAccountRequest_FieldTerminalPath{selector: CreateServiceAccountRequest_FieldPathSelectorServiceAccount}, nil
		}
	} else {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			if subpath, err := service_account.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateServiceAccountRequest_FieldSubPath{selector: CreateServiceAccountRequest_FieldPathSelectorServiceAccount, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateServiceAccountRequest", fp)
}

func ParseCreateServiceAccountRequest_FieldPath(rawField string) (CreateServiceAccountRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateServiceAccountRequest_FieldPath(fp)
}

func MustParseCreateServiceAccountRequest_FieldPath(rawField string) CreateServiceAccountRequest_FieldPath {
	fp, err := ParseCreateServiceAccountRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateServiceAccountRequest_FieldTerminalPath struct {
	selector CreateServiceAccountRequest_FieldPathSelector
}

var _ CreateServiceAccountRequest_FieldPath = (*CreateServiceAccountRequest_FieldTerminalPath)(nil)

func (fp *CreateServiceAccountRequest_FieldTerminalPath) Selector() CreateServiceAccountRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateServiceAccountRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateServiceAccountRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateServiceAccountRequest
func (fp *CreateServiceAccountRequest_FieldTerminalPath) Get(source *CreateServiceAccountRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateServiceAccountRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateServiceAccountRequest))
}

// GetSingle returns value pointed by specific field of from source CreateServiceAccountRequest
func (fp *CreateServiceAccountRequest_FieldTerminalPath) GetSingle(source *CreateServiceAccountRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateServiceAccountRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		return (*service_account.ParentReference)(nil)
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return (*service_account.ServiceAccount)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) ClearValue(item *CreateServiceAccountRequest) {
	if item != nil {
		switch fp.selector {
		case CreateServiceAccountRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateServiceAccountRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateServiceAccountRequest_FieldPathSelectorParent
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) WithIValue(value interface{}) CreateServiceAccountRequest_FieldPathValue {
	switch fp.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		return &CreateServiceAccountRequest_FieldTerminalPathValue{CreateServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.ParentReference)}
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return &CreateServiceAccountRequest_FieldTerminalPathValue{CreateServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateServiceAccountRequest_FieldPathArrayOfValues {
	fpaov := &CreateServiceAccountRequest_FieldTerminalPathArrayOfValues{CreateServiceAccountRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		return &CreateServiceAccountRequest_FieldTerminalPathArrayOfValues{CreateServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ParentReference)}
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return &CreateServiceAccountRequest_FieldTerminalPathArrayOfValues{CreateServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateServiceAccountRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceAccountRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateServiceAccountRequest_FieldSubPath struct {
	selector CreateServiceAccountRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateServiceAccountRequest_FieldPath = (*CreateServiceAccountRequest_FieldSubPath)(nil)

func (fps *CreateServiceAccountRequest_FieldSubPath) Selector() CreateServiceAccountRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateServiceAccountRequest_FieldSubPath) AsServiceAccountSubPath() (service_account.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(service_account.ServiceAccount_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateServiceAccountRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateServiceAccountRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateServiceAccountRequest
func (fps *CreateServiceAccountRequest_FieldSubPath) Get(source *CreateServiceAccountRequest) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsServiceAccountSubPath(); ok {
		values = append(values, asServiceAccountFieldPath.Get(source.GetServiceAccount())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateServiceAccountRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateServiceAccountRequest))
}

// GetSingle returns value of selected field from source CreateServiceAccountRequest
func (fps *CreateServiceAccountRequest_FieldSubPath) GetSingle(source *CreateServiceAccountRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		if source.GetServiceAccount() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fps.selector))
	}
}

func (fps *CreateServiceAccountRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateServiceAccountRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateServiceAccountRequest_FieldSubPath) ClearValue(item *CreateServiceAccountRequest) {
	if item != nil {
		switch fps.selector {
		case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
			fps.subPath.ClearValueRaw(item.ServiceAccount)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateServiceAccountRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateServiceAccountRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateServiceAccountRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateServiceAccountRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateServiceAccountRequest_FieldSubPath) WithIValue(value interface{}) CreateServiceAccountRequest_FieldPathValue {
	return &CreateServiceAccountRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateServiceAccountRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateServiceAccountRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateServiceAccountRequest_FieldPathArrayOfValues {
	return &CreateServiceAccountRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateServiceAccountRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateServiceAccountRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateServiceAccountRequest_FieldPathArrayItemValue {
	return &CreateServiceAccountRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateServiceAccountRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateServiceAccountRequest_FieldPathValue allows storing values for CreateServiceAccountRequest fields according to their type
type CreateServiceAccountRequest_FieldPathValue interface {
	CreateServiceAccountRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateServiceAccountRequest)
	CompareWith(*CreateServiceAccountRequest) (cmp int, comparable bool)
}

func ParseCreateServiceAccountRequest_FieldPathValue(pathStr, valueStr string) (CreateServiceAccountRequest_FieldPathValue, error) {
	fp, err := ParseCreateServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateServiceAccountRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateServiceAccountRequest_FieldPathValue), nil
}

func MustParseCreateServiceAccountRequest_FieldPathValue(pathStr, valueStr string) CreateServiceAccountRequest_FieldPathValue {
	fpv, err := ParseCreateServiceAccountRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateServiceAccountRequest_FieldTerminalPathValue struct {
	CreateServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ CreateServiceAccountRequest_FieldPathValue = (*CreateServiceAccountRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateServiceAccountRequest' as interface{}
func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) AsParentValue() (*service_account.ParentReference, bool) {
	res, ok := fpv.value.(*service_account.ParentReference)
	return res, ok
}
func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) AsServiceAccountValue() (*service_account.ServiceAccount, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount)
	return res, ok
}

// SetTo stores value for selected field for object CreateServiceAccountRequest
func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) SetTo(target **CreateServiceAccountRequest) {
	if *target == nil {
		*target = new(CreateServiceAccountRequest)
	}
	switch fpv.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*service_account.ParentReference)
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*service_account.ServiceAccount)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateServiceAccountRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateServiceAccountRequest_FieldTerminalPathValue' with the value under path in 'CreateServiceAccountRequest'.
func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) CompareWith(source *CreateServiceAccountRequest) (int, bool) {
	switch fpv.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*service_account.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *CreateServiceAccountRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateServiceAccountRequest))
}

type CreateServiceAccountRequest_FieldSubPathValue struct {
	CreateServiceAccountRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateServiceAccountRequest_FieldPathValue = (*CreateServiceAccountRequest_FieldSubPathValue)(nil)

func (fpvs *CreateServiceAccountRequest_FieldSubPathValue) AsServiceAccountPathValue() (service_account.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue)
	return res, ok
}

func (fpvs *CreateServiceAccountRequest_FieldSubPathValue) SetTo(target **CreateServiceAccountRequest) {
	if *target == nil {
		*target = new(CreateServiceAccountRequest)
	}
	switch fpvs.Selector() {
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue).SetTo(&(*target).ServiceAccount)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateServiceAccountRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateServiceAccountRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateServiceAccountRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateServiceAccountRequest_FieldSubPathValue) CompareWith(source *CreateServiceAccountRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue).CompareWith(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateServiceAccountRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateServiceAccountRequest))
}

// CreateServiceAccountRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateServiceAccountRequest according to their type
// Present only for array (repeated) types.
type CreateServiceAccountRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateServiceAccountRequest_FieldPath
	ContainsValue(*CreateServiceAccountRequest) bool
}

// ParseCreateServiceAccountRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateServiceAccountRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateServiceAccountRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateServiceAccountRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateServiceAccountRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateServiceAccountRequest_FieldTerminalPathArrayItemValue struct {
	CreateServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ CreateServiceAccountRequest_FieldPathArrayItemValue = (*CreateServiceAccountRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateServiceAccountRequest as interface{}
func (fpaiv *CreateServiceAccountRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateServiceAccountRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateServiceAccountRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateServiceAccountRequest'
func (fpaiv *CreateServiceAccountRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateServiceAccountRequest) bool {
	slice := fpaiv.CreateServiceAccountRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateServiceAccountRequest_FieldSubPathArrayItemValue struct {
	CreateServiceAccountRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateServiceAccountRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateServiceAccountRequest_FieldSubPathArrayItemValue) AsServiceAccountPathItemValue() (service_account.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateServiceAccountRequest'
func (fpaivs *CreateServiceAccountRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateServiceAccountRequest) bool {
	switch fpaivs.Selector() {
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue).ContainsValue(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceAccountRequest: %d", fpaivs.Selector()))
	}
}

// CreateServiceAccountRequest_FieldPathArrayOfValues allows storing slice of values for CreateServiceAccountRequest fields according to their type
type CreateServiceAccountRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateServiceAccountRequest_FieldPath
}

func ParseCreateServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateServiceAccountRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateServiceAccountRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateServiceAccountRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateServiceAccountRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateServiceAccountRequest_FieldTerminalPathArrayOfValues struct {
	CreateServiceAccountRequest_FieldTerminalPath
	values interface{}
}

var _ CreateServiceAccountRequest_FieldPathArrayOfValues = (*CreateServiceAccountRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateServiceAccountRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateServiceAccountRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*service_account.ParentReference) {
			values = append(values, v)
		}
	case CreateServiceAccountRequest_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateServiceAccountRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*service_account.ParentReference, bool) {
	res, ok := fpaov.values.([]*service_account.ParentReference)
	return res, ok
}
func (fpaov *CreateServiceAccountRequest_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*service_account.ServiceAccount, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount)
	return res, ok
}

type CreateServiceAccountRequest_FieldSubPathArrayOfValues struct {
	CreateServiceAccountRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateServiceAccountRequest_FieldPathArrayOfValues = (*CreateServiceAccountRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateServiceAccountRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateServiceAccountRequest_FieldSubPathArrayOfValues) AsServiceAccountPathArrayOfValues() (service_account.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service_account.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateServiceAccountRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateServiceAccountRequest_FieldPathSelector
	Get(source *UpdateServiceAccountRequest) []interface{}
	GetSingle(source *UpdateServiceAccountRequest) (interface{}, bool)
	ClearValue(item *UpdateServiceAccountRequest)

	// Those methods build corresponding UpdateServiceAccountRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateServiceAccountRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateServiceAccountRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateServiceAccountRequest_FieldPathArrayItemValue
}

type UpdateServiceAccountRequest_FieldPathSelector int32

const (
	UpdateServiceAccountRequest_FieldPathSelectorServiceAccount UpdateServiceAccountRequest_FieldPathSelector = 0
	UpdateServiceAccountRequest_FieldPathSelectorUpdateMask     UpdateServiceAccountRequest_FieldPathSelector = 1
	UpdateServiceAccountRequest_FieldPathSelectorCas            UpdateServiceAccountRequest_FieldPathSelector = 2
)

func (s UpdateServiceAccountRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return "service_account"
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", s))
	}
}

func BuildUpdateServiceAccountRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateServiceAccountRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateServiceAccountRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			return &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorServiceAccount}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateServiceAccountRequest_FieldTerminalPath{selector: UpdateServiceAccountRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			if subpath, err := service_account.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateServiceAccountRequest_FieldSubPath{selector: UpdateServiceAccountRequest_FieldPathSelectorServiceAccount, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateServiceAccountRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateServiceAccountRequest_FieldSubPath{selector: UpdateServiceAccountRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateServiceAccountRequest", fp)
}

func ParseUpdateServiceAccountRequest_FieldPath(rawField string) (UpdateServiceAccountRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateServiceAccountRequest_FieldPath(fp)
}

func MustParseUpdateServiceAccountRequest_FieldPath(rawField string) UpdateServiceAccountRequest_FieldPath {
	fp, err := ParseUpdateServiceAccountRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateServiceAccountRequest_FieldTerminalPath struct {
	selector UpdateServiceAccountRequest_FieldPathSelector
}

var _ UpdateServiceAccountRequest_FieldPath = (*UpdateServiceAccountRequest_FieldTerminalPath)(nil)

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) Selector() UpdateServiceAccountRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateServiceAccountRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateServiceAccountRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateServiceAccountRequest
func (fp *UpdateServiceAccountRequest_FieldTerminalPath) Get(source *UpdateServiceAccountRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateServiceAccountRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateServiceAccountRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateServiceAccountRequest
func (fp *UpdateServiceAccountRequest_FieldTerminalPath) GetSingle(source *UpdateServiceAccountRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateServiceAccountRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return (*service_account.ServiceAccount)(nil)
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return (*UpdateServiceAccountRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) ClearValue(item *UpdateServiceAccountRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateServiceAccountRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateServiceAccountRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateServiceAccountRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateServiceAccountRequest_FieldPathValue {
	switch fp.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return &UpdateServiceAccountRequest_FieldTerminalPathValue{UpdateServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount)}
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		return &UpdateServiceAccountRequest_FieldTerminalPathValue{UpdateServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return &UpdateServiceAccountRequest_FieldTerminalPathValue{UpdateServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*UpdateServiceAccountRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateServiceAccountRequest_FieldPathArrayOfValues {
	fpaov := &UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return &UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount)}
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		return &UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return &UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*UpdateServiceAccountRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateServiceAccountRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateServiceAccountRequest_FieldSubPath struct {
	selector UpdateServiceAccountRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateServiceAccountRequest_FieldPath = (*UpdateServiceAccountRequest_FieldSubPath)(nil)

func (fps *UpdateServiceAccountRequest_FieldSubPath) Selector() UpdateServiceAccountRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateServiceAccountRequest_FieldSubPath) AsServiceAccountSubPath() (service_account.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(service_account.ServiceAccount_FieldPath)
	return res, ok
}
func (fps *UpdateServiceAccountRequest_FieldSubPath) AsCasSubPath() (UpdateServiceAccountRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateServiceAccountRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateServiceAccountRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateServiceAccountRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateServiceAccountRequest
func (fps *UpdateServiceAccountRequest_FieldSubPath) Get(source *UpdateServiceAccountRequest) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsServiceAccountSubPath(); ok {
		values = append(values, asServiceAccountFieldPath.Get(source.GetServiceAccount())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateServiceAccountRequest))
}

// GetSingle returns value of selected field from source UpdateServiceAccountRequest
func (fps *UpdateServiceAccountRequest_FieldSubPath) GetSingle(source *UpdateServiceAccountRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		if source.GetServiceAccount() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccount())
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fps.selector))
	}
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateServiceAccountRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) ClearValue(item *UpdateServiceAccountRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
			fps.subPath.ClearValueRaw(item.ServiceAccount)
		case UpdateServiceAccountRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateServiceAccountRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateServiceAccountRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) WithIValue(value interface{}) UpdateServiceAccountRequest_FieldPathValue {
	return &UpdateServiceAccountRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateServiceAccountRequest_FieldPathArrayOfValues {
	return &UpdateServiceAccountRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateServiceAccountRequest_FieldPathArrayItemValue {
	return &UpdateServiceAccountRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateServiceAccountRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateServiceAccountRequest_FieldPathValue allows storing values for UpdateServiceAccountRequest fields according to their type
type UpdateServiceAccountRequest_FieldPathValue interface {
	UpdateServiceAccountRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateServiceAccountRequest)
	CompareWith(*UpdateServiceAccountRequest) (cmp int, comparable bool)
}

func ParseUpdateServiceAccountRequest_FieldPathValue(pathStr, valueStr string) (UpdateServiceAccountRequest_FieldPathValue, error) {
	fp, err := ParseUpdateServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateServiceAccountRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateServiceAccountRequest_FieldPathValue), nil
}

func MustParseUpdateServiceAccountRequest_FieldPathValue(pathStr, valueStr string) UpdateServiceAccountRequest_FieldPathValue {
	fpv, err := ParseUpdateServiceAccountRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateServiceAccountRequest_FieldTerminalPathValue struct {
	UpdateServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceAccountRequest_FieldPathValue = (*UpdateServiceAccountRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateServiceAccountRequest' as interface{}
func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) AsServiceAccountValue() (*service_account.ServiceAccount, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount)
	return res, ok
}
func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) AsCasValue() (*UpdateServiceAccountRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateServiceAccountRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateServiceAccountRequest
func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) SetTo(target **UpdateServiceAccountRequest) {
	if *target == nil {
		*target = new(UpdateServiceAccountRequest)
	}
	switch fpv.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*service_account.ServiceAccount)
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateServiceAccountRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceAccountRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateServiceAccountRequest_FieldTerminalPathValue' with the value under path in 'UpdateServiceAccountRequest'.
func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) CompareWith(source *UpdateServiceAccountRequest) (int, bool) {
	switch fpv.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return 0, false
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceAccountRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateServiceAccountRequest))
}

type UpdateServiceAccountRequest_FieldSubPathValue struct {
	UpdateServiceAccountRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateServiceAccountRequest_FieldPathValue = (*UpdateServiceAccountRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) AsServiceAccountPathValue() (service_account.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) AsCasPathValue() (UpdateServiceAccountRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateServiceAccountRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) SetTo(target **UpdateServiceAccountRequest) {
	if *target == nil {
		*target = new(UpdateServiceAccountRequest)
	}
	switch fpvs.Selector() {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue).SetTo(&(*target).ServiceAccount)
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateServiceAccountRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceAccountRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) CompareWith(source *UpdateServiceAccountRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue).CompareWith(source.GetServiceAccount())
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateServiceAccountRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceAccountRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateServiceAccountRequest))
}

// UpdateServiceAccountRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateServiceAccountRequest according to their type
// Present only for array (repeated) types.
type UpdateServiceAccountRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateServiceAccountRequest_FieldPath
	ContainsValue(*UpdateServiceAccountRequest) bool
}

// ParseUpdateServiceAccountRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateServiceAccountRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateServiceAccountRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateServiceAccountRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateServiceAccountRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateServiceAccountRequest_FieldTerminalPathArrayItemValue struct {
	UpdateServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceAccountRequest_FieldPathArrayItemValue = (*UpdateServiceAccountRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateServiceAccountRequest as interface{}
func (fpaiv *UpdateServiceAccountRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateServiceAccountRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateServiceAccountRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateServiceAccountRequest'
func (fpaiv *UpdateServiceAccountRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateServiceAccountRequest) bool {
	slice := fpaiv.UpdateServiceAccountRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateServiceAccountRequest_FieldSubPathArrayItemValue struct {
	UpdateServiceAccountRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateServiceAccountRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateServiceAccountRequest_FieldSubPathArrayItemValue) AsServiceAccountPathItemValue() (service_account.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateServiceAccountRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateServiceAccountRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateServiceAccountRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateServiceAccountRequest'
func (fpaivs *UpdateServiceAccountRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateServiceAccountRequest) bool {
	switch fpaivs.Selector() {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		return fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue).ContainsValue(source.GetServiceAccount())
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateServiceAccountRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest: %d", fpaivs.Selector()))
	}
}

// UpdateServiceAccountRequest_FieldPathArrayOfValues allows storing slice of values for UpdateServiceAccountRequest fields according to their type
type UpdateServiceAccountRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateServiceAccountRequest_FieldPath
}

func ParseUpdateServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateServiceAccountRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateServiceAccountRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateServiceAccountRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateServiceAccountRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues struct {
	UpdateServiceAccountRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateServiceAccountRequest_FieldPathArrayOfValues = (*UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateServiceAccountRequest_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount) {
			values = append(values, v)
		}
	case UpdateServiceAccountRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	case UpdateServiceAccountRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateServiceAccountRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*service_account.ServiceAccount, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount)
	return res, ok
}
func (fpaov *UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}
func (fpaov *UpdateServiceAccountRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateServiceAccountRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateServiceAccountRequest_CAS)
	return res, ok
}

type UpdateServiceAccountRequest_FieldSubPathArrayOfValues struct {
	UpdateServiceAccountRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateServiceAccountRequest_FieldPathArrayOfValues = (*UpdateServiceAccountRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateServiceAccountRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateServiceAccountRequest_FieldSubPathArrayOfValues) AsServiceAccountPathArrayOfValues() (service_account.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service_account.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateServiceAccountRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateServiceAccountRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateServiceAccountRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateServiceAccountRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateServiceAccountRequestCAS_FieldPathSelector
	Get(source *UpdateServiceAccountRequest_CAS) []interface{}
	GetSingle(source *UpdateServiceAccountRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateServiceAccountRequest_CAS)

	// Those methods build corresponding UpdateServiceAccountRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateServiceAccountRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateServiceAccountRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateServiceAccountRequestCAS_FieldPathArrayItemValue
}

type UpdateServiceAccountRequestCAS_FieldPathSelector int32

const (
	UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState UpdateServiceAccountRequestCAS_FieldPathSelector = 0
	UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask        UpdateServiceAccountRequestCAS_FieldPathSelector = 1
)

func (s UpdateServiceAccountRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", s))
	}
}

func BuildUpdateServiceAccountRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateServiceAccountRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateServiceAccountRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := service_account.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateServiceAccountRequestCAS_FieldSubPath{selector: UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateServiceAccountRequest_CAS", fp)
}

func ParseUpdateServiceAccountRequestCAS_FieldPath(rawField string) (UpdateServiceAccountRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateServiceAccountRequestCAS_FieldPath(fp)
}

func MustParseUpdateServiceAccountRequestCAS_FieldPath(rawField string) UpdateServiceAccountRequestCAS_FieldPath {
	fp, err := ParseUpdateServiceAccountRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateServiceAccountRequestCAS_FieldTerminalPath struct {
	selector UpdateServiceAccountRequestCAS_FieldPathSelector
}

var _ UpdateServiceAccountRequestCAS_FieldPath = (*UpdateServiceAccountRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) Selector() UpdateServiceAccountRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateServiceAccountRequest_CAS
func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) Get(source *UpdateServiceAccountRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateServiceAccountRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateServiceAccountRequest_CAS
func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) GetSingle(source *UpdateServiceAccountRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateServiceAccountRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return (*service_account.ServiceAccount)(nil)
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		return (*service_account.ServiceAccount_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) ClearValue(item *UpdateServiceAccountRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateServiceAccountRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateServiceAccountRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateServiceAccountRequestCAS_FieldTerminalPathValue{UpdateServiceAccountRequestCAS_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount)}
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateServiceAccountRequestCAS_FieldTerminalPathValue{UpdateServiceAccountRequestCAS_FieldTerminalPath: *fp, value: value.(*service_account.ServiceAccount_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateServiceAccountRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequestCAS_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount)}
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues{UpdateServiceAccountRequestCAS_FieldTerminalPath: *fp, values: values.([]*service_account.ServiceAccount_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateServiceAccountRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceAccountRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateServiceAccountRequestCAS_FieldSubPath struct {
	selector UpdateServiceAccountRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateServiceAccountRequestCAS_FieldPath = (*UpdateServiceAccountRequestCAS_FieldSubPath)(nil)

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) Selector() UpdateServiceAccountRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) AsConditionalStateSubPath() (service_account.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(service_account.ServiceAccount_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateServiceAccountRequest_CAS
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) Get(source *UpdateServiceAccountRequest_CAS) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asServiceAccountFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateServiceAccountRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateServiceAccountRequest_CAS
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) GetSingle(source *UpdateServiceAccountRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateServiceAccountRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) ClearValue(item *UpdateServiceAccountRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateServiceAccountRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateServiceAccountRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateServiceAccountRequestCAS_FieldPathValue {
	return &UpdateServiceAccountRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateServiceAccountRequestCAS_FieldPathArrayOfValues {
	return &UpdateServiceAccountRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateServiceAccountRequestCAS_FieldPathArrayItemValue {
	return &UpdateServiceAccountRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateServiceAccountRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateServiceAccountRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateServiceAccountRequestCAS_FieldPathValue interface {
	UpdateServiceAccountRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateServiceAccountRequest_CAS)
	CompareWith(*UpdateServiceAccountRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateServiceAccountRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateServiceAccountRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateServiceAccountRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateServiceAccountRequestCAS_FieldPathValue), nil
}

func MustParseUpdateServiceAccountRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateServiceAccountRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateServiceAccountRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateServiceAccountRequestCAS_FieldTerminalPathValue struct {
	UpdateServiceAccountRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceAccountRequestCAS_FieldPathValue = (*UpdateServiceAccountRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*service_account.ServiceAccount, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount)
	return res, ok
}
func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpv.value.(*service_account.ServiceAccount_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateServiceAccountRequest_CAS) {
	if *target == nil {
		*target = new(UpdateServiceAccountRequest_CAS)
	}
	switch fpv.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*service_account.ServiceAccount)
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service_account.ServiceAccount_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceAccountRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateServiceAccountRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateServiceAccountRequest_CAS'.
func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateServiceAccountRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceAccountRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateServiceAccountRequest_CAS))
}

type UpdateServiceAccountRequestCAS_FieldSubPathValue struct {
	UpdateServiceAccountRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateServiceAccountRequestCAS_FieldPathValue = (*UpdateServiceAccountRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateServiceAccountRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (service_account.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateServiceAccountRequestCAS_FieldSubPathValue) SetTo(target **UpdateServiceAccountRequest_CAS) {
	if *target == nil {
		*target = new(UpdateServiceAccountRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceAccountRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceAccountRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateServiceAccountRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateServiceAccountRequestCAS_FieldSubPathValue) CompareWith(source *UpdateServiceAccountRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(service_account.ServiceAccount_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceAccountRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateServiceAccountRequest_CAS))
}

// UpdateServiceAccountRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateServiceAccountRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateServiceAccountRequestCAS_FieldPath
	ContainsValue(*UpdateServiceAccountRequest_CAS) bool
}

// ParseUpdateServiceAccountRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateServiceAccountRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateServiceAccountRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateServiceAccountRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateServiceAccountRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateServiceAccountRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateServiceAccountRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateServiceAccountRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateServiceAccountRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateServiceAccountRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceAccountRequestCAS_FieldPathArrayItemValue = (*UpdateServiceAccountRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateServiceAccountRequest_CAS as interface{}
func (fpaiv *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateServiceAccountRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateServiceAccountRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateServiceAccountRequest_CAS) bool {
	slice := fpaiv.UpdateServiceAccountRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateServiceAccountRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateServiceAccountRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateServiceAccountRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateServiceAccountRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (service_account.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateServiceAccountRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateServiceAccountRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(service_account.ServiceAccount_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceAccountRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateServiceAccountRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateServiceAccountRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateServiceAccountRequestCAS_FieldPath
}

func ParseUpdateServiceAccountRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateServiceAccountRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateServiceAccountRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateServiceAccountRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateServiceAccountRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateServiceAccountRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateServiceAccountRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateServiceAccountRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateServiceAccountRequestCAS_FieldPathArrayOfValues = (*UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateServiceAccountRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount) {
			values = append(values, v)
		}
	case UpdateServiceAccountRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service_account.ServiceAccount_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*service_account.ServiceAccount, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount)
	return res, ok
}
func (fpaov *UpdateServiceAccountRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service_account.ServiceAccount_FieldMask, bool) {
	res, ok := fpaov.values.([]*service_account.ServiceAccount_FieldMask)
	return res, ok
}

type UpdateServiceAccountRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateServiceAccountRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateServiceAccountRequestCAS_FieldPathArrayOfValues = (*UpdateServiceAccountRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateServiceAccountRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateServiceAccountRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (service_account.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service_account.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteServiceAccountRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteServiceAccountRequest_FieldPathSelector
	Get(source *DeleteServiceAccountRequest) []interface{}
	GetSingle(source *DeleteServiceAccountRequest) (interface{}, bool)
	ClearValue(item *DeleteServiceAccountRequest)

	// Those methods build corresponding DeleteServiceAccountRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteServiceAccountRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteServiceAccountRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteServiceAccountRequest_FieldPathArrayItemValue
}

type DeleteServiceAccountRequest_FieldPathSelector int32

const (
	DeleteServiceAccountRequest_FieldPathSelectorName DeleteServiceAccountRequest_FieldPathSelector = 0
)

func (s DeleteServiceAccountRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", s))
	}
}

func BuildDeleteServiceAccountRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteServiceAccountRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteServiceAccountRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteServiceAccountRequest_FieldTerminalPath{selector: DeleteServiceAccountRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteServiceAccountRequest", fp)
}

func ParseDeleteServiceAccountRequest_FieldPath(rawField string) (DeleteServiceAccountRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteServiceAccountRequest_FieldPath(fp)
}

func MustParseDeleteServiceAccountRequest_FieldPath(rawField string) DeleteServiceAccountRequest_FieldPath {
	fp, err := ParseDeleteServiceAccountRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteServiceAccountRequest_FieldTerminalPath struct {
	selector DeleteServiceAccountRequest_FieldPathSelector
}

var _ DeleteServiceAccountRequest_FieldPath = (*DeleteServiceAccountRequest_FieldTerminalPath)(nil)

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) Selector() DeleteServiceAccountRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteServiceAccountRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteServiceAccountRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteServiceAccountRequest
func (fp *DeleteServiceAccountRequest_FieldTerminalPath) Get(source *DeleteServiceAccountRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteServiceAccountRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteServiceAccountRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteServiceAccountRequest
func (fp *DeleteServiceAccountRequest_FieldTerminalPath) GetSingle(source *DeleteServiceAccountRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteServiceAccountRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteServiceAccountRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		return (*service_account.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) ClearValue(item *DeleteServiceAccountRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteServiceAccountRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteServiceAccountRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteServiceAccountRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteServiceAccountRequest_FieldPathSelectorName
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteServiceAccountRequest_FieldPathValue {
	switch fp.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		return &DeleteServiceAccountRequest_FieldTerminalPathValue{DeleteServiceAccountRequest_FieldTerminalPath: *fp, value: value.(*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteServiceAccountRequest_FieldPathArrayOfValues {
	fpaov := &DeleteServiceAccountRequest_FieldTerminalPathArrayOfValues{DeleteServiceAccountRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		return &DeleteServiceAccountRequest_FieldTerminalPathArrayOfValues{DeleteServiceAccountRequest_FieldTerminalPath: *fp, values: values.([]*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteServiceAccountRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceAccountRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteServiceAccountRequest_FieldPathValue allows storing values for DeleteServiceAccountRequest fields according to their type
type DeleteServiceAccountRequest_FieldPathValue interface {
	DeleteServiceAccountRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteServiceAccountRequest)
	CompareWith(*DeleteServiceAccountRequest) (cmp int, comparable bool)
}

func ParseDeleteServiceAccountRequest_FieldPathValue(pathStr, valueStr string) (DeleteServiceAccountRequest_FieldPathValue, error) {
	fp, err := ParseDeleteServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteServiceAccountRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteServiceAccountRequest_FieldPathValue), nil
}

func MustParseDeleteServiceAccountRequest_FieldPathValue(pathStr, valueStr string) DeleteServiceAccountRequest_FieldPathValue {
	fpv, err := ParseDeleteServiceAccountRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteServiceAccountRequest_FieldTerminalPathValue struct {
	DeleteServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteServiceAccountRequest_FieldPathValue = (*DeleteServiceAccountRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteServiceAccountRequest' as interface{}
func (fpv *DeleteServiceAccountRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteServiceAccountRequest_FieldTerminalPathValue) AsNameValue() (*service_account.Reference, bool) {
	res, ok := fpv.value.(*service_account.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteServiceAccountRequest
func (fpv *DeleteServiceAccountRequest_FieldTerminalPathValue) SetTo(target **DeleteServiceAccountRequest) {
	if *target == nil {
		*target = new(DeleteServiceAccountRequest)
	}
	switch fpv.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*service_account.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteServiceAccountRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteServiceAccountRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteServiceAccountRequest_FieldTerminalPathValue' with the value under path in 'DeleteServiceAccountRequest'.
func (fpv *DeleteServiceAccountRequest_FieldTerminalPathValue) CompareWith(source *DeleteServiceAccountRequest) (int, bool) {
	switch fpv.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*service_account.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceAccountRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteServiceAccountRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteServiceAccountRequest))
}

// DeleteServiceAccountRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteServiceAccountRequest according to their type
// Present only for array (repeated) types.
type DeleteServiceAccountRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteServiceAccountRequest_FieldPath
	ContainsValue(*DeleteServiceAccountRequest) bool
}

// ParseDeleteServiceAccountRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteServiceAccountRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteServiceAccountRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteServiceAccountRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteServiceAccountRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteServiceAccountRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteServiceAccountRequest_FieldTerminalPathArrayItemValue struct {
	DeleteServiceAccountRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteServiceAccountRequest_FieldPathArrayItemValue = (*DeleteServiceAccountRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteServiceAccountRequest as interface{}
func (fpaiv *DeleteServiceAccountRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteServiceAccountRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteServiceAccountRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteServiceAccountRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteServiceAccountRequest'
func (fpaiv *DeleteServiceAccountRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteServiceAccountRequest) bool {
	slice := fpaiv.DeleteServiceAccountRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteServiceAccountRequest_FieldPathArrayOfValues allows storing slice of values for DeleteServiceAccountRequest fields according to their type
type DeleteServiceAccountRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteServiceAccountRequest_FieldPath
}

func ParseDeleteServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteServiceAccountRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteServiceAccountRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteServiceAccountRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteServiceAccountRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteServiceAccountRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteServiceAccountRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteServiceAccountRequest_FieldTerminalPathArrayOfValues struct {
	DeleteServiceAccountRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteServiceAccountRequest_FieldPathArrayOfValues = (*DeleteServiceAccountRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteServiceAccountRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteServiceAccountRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*service_account.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteServiceAccountRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*service_account.Reference, bool) {
	res, ok := fpaov.values.([]*service_account.Reference)
	return res, ok
}
