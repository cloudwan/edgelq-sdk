// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/role.proto
// DO NOT EDIT!!!

package role

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &organization.Organization{}
	_ = &permission.Permission{}
	_ = &project.Project{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type Role_FieldMask struct {
	Paths []Role_FieldPath
}

func FullRole_FieldMask() *Role_FieldMask {
	res := &Role_FieldMask{}
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorCategory})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorScopeParams})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorConstValues})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDefaultValues})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorGrants})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorOwnedObjects})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorServices})
	res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorRbSpecGeneration})
	return res
}

func (fieldMask *Role_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Role_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 12)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Role_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Role_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRole_FieldPath(raw)
	})
}

func (fieldMask *Role_FieldMask) ProtoMessage() {}

func (fieldMask *Role_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Role_FieldMask) Subtract(other *Role_FieldMask) *Role_FieldMask {
	result := &Role_FieldMask{}
	removedSelectors := make([]bool, 12)
	otherSubMasks := map[Role_FieldPathSelector]gotenobject.FieldMask{
		Role_FieldPathSelectorMetadata:      &meta.Meta_FieldMask{},
		Role_FieldPathSelectorScopeParams:   &Role_ScopeParamType_FieldMask{},
		Role_FieldPathSelectorConstValues:   &ScopeParam_FieldMask{},
		Role_FieldPathSelectorDefaultValues: &ScopeParam_FieldMask{},
		Role_FieldPathSelectorGrants:        &Role_Grant_FieldMask{},
	}
	mySubMasks := map[Role_FieldPathSelector]gotenobject.FieldMask{
		Role_FieldPathSelectorMetadata:      &meta.Meta_FieldMask{},
		Role_FieldPathSelectorScopeParams:   &Role_ScopeParamType_FieldMask{},
		Role_FieldPathSelectorConstValues:   &ScopeParam_FieldMask{},
		Role_FieldPathSelectorDefaultValues: &ScopeParam_FieldMask{},
		Role_FieldPathSelectorGrants:        &Role_Grant_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Role_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Role_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Role_FieldTerminalPath); ok {
					switch tp.selector {
					case Role_FieldPathSelectorMetadata:
						mySubMasks[Role_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Role_FieldPathSelectorScopeParams:
						mySubMasks[Role_FieldPathSelectorScopeParams] = FullRole_ScopeParamType_FieldMask()
					case Role_FieldPathSelectorConstValues:
						mySubMasks[Role_FieldPathSelectorConstValues] = FullScopeParam_FieldMask()
					case Role_FieldPathSelectorDefaultValues:
						mySubMasks[Role_FieldPathSelectorDefaultValues] = FullScopeParam_FieldMask()
					case Role_FieldPathSelectorGrants:
						mySubMasks[Role_FieldPathSelectorGrants] = FullRole_Grant_FieldMask()
					}
				} else if tp, ok := path.(*Role_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Role_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Role_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Role_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Role_FieldMask) FilterInputFields() *Role_FieldMask {
	result := &Role_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Role_FieldPathSelectorServices:
		case Role_FieldPathSelectorRbSpecGeneration:
		case Role_FieldPathSelectorMetadata:
			if _, ok := path.(*Role_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Role_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Role_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Role_FieldSubPath{selector: Role_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Role_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Role_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Role_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRole_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Role_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Role_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Role_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Role_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_FieldMask) AppendPath(path Role_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Role_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Role_FieldPath))
}

func (fieldMask *Role_FieldMask) GetPaths() []Role_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Role_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Role_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRole_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Role_FieldMask) Set(target, source *Role) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Role_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Role), source.(*Role))
}

func (fieldMask *Role_FieldMask) Project(source *Role) *Role {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Role{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	scopeParamsMask := &Role_ScopeParamType_FieldMask{}
	wholeScopeParamsAccepted := false
	constValuesMask := &ScopeParam_FieldMask{}
	wholeConstValuesAccepted := false
	defaultValuesMask := &ScopeParam_FieldMask{}
	wholeDefaultValuesAccepted := false
	grantsMask := &Role_Grant_FieldMask{}
	wholeGrantsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Role_FieldTerminalPath:
			switch tp.selector {
			case Role_FieldPathSelectorName:
				result.Name = source.Name
			case Role_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Role_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Role_FieldPathSelectorDescription:
				result.Description = source.Description
			case Role_FieldPathSelectorCategory:
				result.Category = source.Category
			case Role_FieldPathSelectorScopeParams:
				result.ScopeParams = source.ScopeParams
				wholeScopeParamsAccepted = true
			case Role_FieldPathSelectorConstValues:
				result.ConstValues = source.ConstValues
				wholeConstValuesAccepted = true
			case Role_FieldPathSelectorDefaultValues:
				result.DefaultValues = source.DefaultValues
				wholeDefaultValuesAccepted = true
			case Role_FieldPathSelectorGrants:
				result.Grants = source.Grants
				wholeGrantsAccepted = true
			case Role_FieldPathSelectorOwnedObjects:
				result.OwnedObjects = source.OwnedObjects
			case Role_FieldPathSelectorServices:
				result.Services = source.Services
			case Role_FieldPathSelectorRbSpecGeneration:
				result.RbSpecGeneration = source.RbSpecGeneration
			}
		case *Role_FieldSubPath:
			switch tp.selector {
			case Role_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Role_FieldPathSelectorScopeParams:
				scopeParamsMask.AppendPath(tp.subPath.(RoleScopeParamType_FieldPath))
			case Role_FieldPathSelectorConstValues:
				constValuesMask.AppendPath(tp.subPath.(ScopeParam_FieldPath))
			case Role_FieldPathSelectorDefaultValues:
				defaultValuesMask.AppendPath(tp.subPath.(ScopeParam_FieldPath))
			case Role_FieldPathSelectorGrants:
				grantsMask.AppendPath(tp.subPath.(RoleGrant_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeScopeParamsAccepted == false && len(scopeParamsMask.Paths) > 0 {
		for _, sourceItem := range source.GetScopeParams() {
			result.ScopeParams = append(result.ScopeParams, scopeParamsMask.Project(sourceItem))
		}
	}
	if wholeConstValuesAccepted == false && len(constValuesMask.Paths) > 0 {
		for _, sourceItem := range source.GetConstValues() {
			result.ConstValues = append(result.ConstValues, constValuesMask.Project(sourceItem))
		}
	}
	if wholeDefaultValuesAccepted == false && len(defaultValuesMask.Paths) > 0 {
		for _, sourceItem := range source.GetDefaultValues() {
			result.DefaultValues = append(result.DefaultValues, defaultValuesMask.Project(sourceItem))
		}
	}
	if wholeGrantsAccepted == false && len(grantsMask.Paths) > 0 {
		for _, sourceItem := range source.GetGrants() {
			result.Grants = append(result.Grants, grantsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Role_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Role))
}

func (fieldMask *Role_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Role_ScopeParamType_FieldMask struct {
	Paths []RoleScopeParamType_FieldPath
}

func FullRole_ScopeParamType_FieldMask() *Role_ScopeParamType_FieldMask {
	res := &Role_ScopeParamType_FieldMask{}
	res.Paths = append(res.Paths, &RoleScopeParamType_FieldTerminalPath{selector: RoleScopeParamType_FieldPathSelectorName})
	res.Paths = append(res.Paths, &RoleScopeParamType_FieldTerminalPath{selector: RoleScopeParamType_FieldPathSelectorType})
	return res
}

func (fieldMask *Role_ScopeParamType_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Role_ScopeParamType_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RoleScopeParamType_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Role_ScopeParamType_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRoleScopeParamType_FieldPath(raw)
	})
}

func (fieldMask *Role_ScopeParamType_FieldMask) ProtoMessage() {}

func (fieldMask *Role_ScopeParamType_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Role_ScopeParamType_FieldMask) Subtract(other *Role_ScopeParamType_FieldMask) *Role_ScopeParamType_FieldMask {
	result := &Role_ScopeParamType_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RoleScopeParamType_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Role_ScopeParamType_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Role_ScopeParamType_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Role_ScopeParamType_FieldMask) FilterInputFields() *Role_ScopeParamType_FieldMask {
	result := &Role_ScopeParamType_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Role_ScopeParamType_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Role_ScopeParamType_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RoleScopeParamType_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRoleScopeParamType_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Role_ScopeParamType_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Role_ScopeParamType_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_ScopeParamType_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Role_ScopeParamType_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Role_ScopeParamType_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_ScopeParamType_FieldMask) AppendPath(path RoleScopeParamType_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Role_ScopeParamType_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RoleScopeParamType_FieldPath))
}

func (fieldMask *Role_ScopeParamType_FieldMask) GetPaths() []RoleScopeParamType_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Role_ScopeParamType_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Role_ScopeParamType_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRoleScopeParamType_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Role_ScopeParamType_FieldMask) Set(target, source *Role_ScopeParamType) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Role_ScopeParamType_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Role_ScopeParamType), source.(*Role_ScopeParamType))
}

func (fieldMask *Role_ScopeParamType_FieldMask) Project(source *Role_ScopeParamType) *Role_ScopeParamType {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Role_ScopeParamType{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RoleScopeParamType_FieldTerminalPath:
			switch tp.selector {
			case RoleScopeParamType_FieldPathSelectorName:
				result.Name = source.Name
			case RoleScopeParamType_FieldPathSelectorType:
				result.Type = source.Type
			}
		}
	}
	return result
}

func (fieldMask *Role_ScopeParamType_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Role_ScopeParamType))
}

func (fieldMask *Role_ScopeParamType_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Role_Grant_FieldMask struct {
	Paths []RoleGrant_FieldPath
}

func FullRole_Grant_FieldMask() *Role_Grant_FieldMask {
	res := &Role_Grant_FieldMask{}
	res.Paths = append(res.Paths, &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorSubScope})
	res.Paths = append(res.Paths, &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorPermissions})
	res.Paths = append(res.Paths, &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorResourceFieldConditions})
	res.Paths = append(res.Paths, &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorRequestFieldConditions})
	res.Paths = append(res.Paths, &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorExecutableConditions})
	return res
}

func (fieldMask *Role_Grant_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Role_Grant_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RoleGrant_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Role_Grant_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRoleGrant_FieldPath(raw)
	})
}

func (fieldMask *Role_Grant_FieldMask) ProtoMessage() {}

func (fieldMask *Role_Grant_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Role_Grant_FieldMask) Subtract(other *Role_Grant_FieldMask) *Role_Grant_FieldMask {
	result := &Role_Grant_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[RoleGrant_FieldPathSelector]gotenobject.FieldMask{
		RoleGrant_FieldPathSelectorResourceFieldConditions: &Role_Grant_FieldCondition_FieldMask{},
		RoleGrant_FieldPathSelectorRequestFieldConditions:  &Role_Grant_FieldCondition_FieldMask{},
		RoleGrant_FieldPathSelectorExecutableConditions:    &condition.ExecutableCondition_FieldMask{},
	}
	mySubMasks := map[RoleGrant_FieldPathSelector]gotenobject.FieldMask{
		RoleGrant_FieldPathSelectorResourceFieldConditions: &Role_Grant_FieldCondition_FieldMask{},
		RoleGrant_FieldPathSelectorRequestFieldConditions:  &Role_Grant_FieldCondition_FieldMask{},
		RoleGrant_FieldPathSelectorExecutableConditions:    &condition.ExecutableCondition_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RoleGrant_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RoleGrant_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RoleGrant_FieldTerminalPath); ok {
					switch tp.selector {
					case RoleGrant_FieldPathSelectorResourceFieldConditions:
						mySubMasks[RoleGrant_FieldPathSelectorResourceFieldConditions] = FullRole_Grant_FieldCondition_FieldMask()
					case RoleGrant_FieldPathSelectorRequestFieldConditions:
						mySubMasks[RoleGrant_FieldPathSelectorRequestFieldConditions] = FullRole_Grant_FieldCondition_FieldMask()
					case RoleGrant_FieldPathSelectorExecutableConditions:
						mySubMasks[RoleGrant_FieldPathSelectorExecutableConditions] = condition.FullExecutableCondition_FieldMask()
					}
				} else if tp, ok := path.(*RoleGrant_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RoleGrant_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Role_Grant_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Role_Grant_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Role_Grant_FieldMask) FilterInputFields() *Role_Grant_FieldMask {
	result := &Role_Grant_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Role_Grant_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Role_Grant_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RoleGrant_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRoleGrant_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Role_Grant_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Role_Grant_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_Grant_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Role_Grant_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Role_Grant_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_Grant_FieldMask) AppendPath(path RoleGrant_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Role_Grant_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RoleGrant_FieldPath))
}

func (fieldMask *Role_Grant_FieldMask) GetPaths() []RoleGrant_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Role_Grant_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Role_Grant_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRoleGrant_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Role_Grant_FieldMask) Set(target, source *Role_Grant) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Role_Grant_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Role_Grant), source.(*Role_Grant))
}

func (fieldMask *Role_Grant_FieldMask) Project(source *Role_Grant) *Role_Grant {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Role_Grant{}
	resourceFieldConditionsMask := &Role_Grant_FieldCondition_FieldMask{}
	wholeResourceFieldConditionsAccepted := false
	requestFieldConditionsMask := &Role_Grant_FieldCondition_FieldMask{}
	wholeRequestFieldConditionsAccepted := false
	executableConditionsMask := &condition.ExecutableCondition_FieldMask{}
	wholeExecutableConditionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RoleGrant_FieldTerminalPath:
			switch tp.selector {
			case RoleGrant_FieldPathSelectorSubScope:
				result.SubScope = source.SubScope
			case RoleGrant_FieldPathSelectorPermissions:
				result.Permissions = source.Permissions
			case RoleGrant_FieldPathSelectorResourceFieldConditions:
				result.ResourceFieldConditions = source.ResourceFieldConditions
				wholeResourceFieldConditionsAccepted = true
			case RoleGrant_FieldPathSelectorRequestFieldConditions:
				result.RequestFieldConditions = source.RequestFieldConditions
				wholeRequestFieldConditionsAccepted = true
			case RoleGrant_FieldPathSelectorExecutableConditions:
				result.ExecutableConditions = source.ExecutableConditions
				wholeExecutableConditionsAccepted = true
			}
		case *RoleGrant_FieldSubPath:
			switch tp.selector {
			case RoleGrant_FieldPathSelectorResourceFieldConditions:
				resourceFieldConditionsMask.AppendPath(tp.subPath.(RoleGrantFieldCondition_FieldPath))
			case RoleGrant_FieldPathSelectorRequestFieldConditions:
				requestFieldConditionsMask.AppendPath(tp.subPath.(RoleGrantFieldCondition_FieldPath))
			case RoleGrant_FieldPathSelectorExecutableConditions:
				executableConditionsMask.AppendPath(tp.subPath.(condition.ExecutableCondition_FieldPath))
			}
		}
	}
	if wholeResourceFieldConditionsAccepted == false && len(resourceFieldConditionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetResourceFieldConditions() {
			result.ResourceFieldConditions = append(result.ResourceFieldConditions, resourceFieldConditionsMask.Project(sourceItem))
		}
	}
	if wholeRequestFieldConditionsAccepted == false && len(requestFieldConditionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetRequestFieldConditions() {
			result.RequestFieldConditions = append(result.RequestFieldConditions, requestFieldConditionsMask.Project(sourceItem))
		}
	}
	if wholeExecutableConditionsAccepted == false && len(executableConditionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetExecutableConditions() {
			result.ExecutableConditions = append(result.ExecutableConditions, executableConditionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Role_Grant_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Role_Grant))
}

func (fieldMask *Role_Grant_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Role_Grant_FieldCondition_FieldMask struct {
	Paths []RoleGrantFieldCondition_FieldPath
}

func FullRole_Grant_FieldCondition_FieldMask() *Role_Grant_FieldCondition_FieldMask {
	res := &Role_Grant_FieldCondition_FieldMask{}
	res.Paths = append(res.Paths, &RoleGrantFieldCondition_FieldTerminalPath{selector: RoleGrantFieldCondition_FieldPathSelectorPath})
	res.Paths = append(res.Paths, &RoleGrantFieldCondition_FieldTerminalPath{selector: RoleGrantFieldCondition_FieldPathSelectorValue})
	return res
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RoleGrantFieldCondition_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRoleGrantFieldCondition_FieldPath(raw)
	})
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) ProtoMessage() {}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) Subtract(other *Role_Grant_FieldCondition_FieldMask) *Role_Grant_FieldCondition_FieldMask {
	result := &Role_Grant_FieldCondition_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RoleGrantFieldCondition_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Role_Grant_FieldCondition_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Role_Grant_FieldCondition_FieldMask) FilterInputFields() *Role_Grant_FieldCondition_FieldMask {
	result := &Role_Grant_FieldCondition_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Role_Grant_FieldCondition_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RoleGrantFieldCondition_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRoleGrantFieldCondition_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Role_Grant_FieldCondition_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Role_Grant_FieldCondition_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) AppendPath(path RoleGrantFieldCondition_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RoleGrantFieldCondition_FieldPath))
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) GetPaths() []RoleGrantFieldCondition_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRoleGrantFieldCondition_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) Set(target, source *Role_Grant_FieldCondition) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Role_Grant_FieldCondition), source.(*Role_Grant_FieldCondition))
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) Project(source *Role_Grant_FieldCondition) *Role_Grant_FieldCondition {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Role_Grant_FieldCondition{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RoleGrantFieldCondition_FieldTerminalPath:
			switch tp.selector {
			case RoleGrantFieldCondition_FieldPathSelectorPath:
				result.Path = source.Path
			case RoleGrantFieldCondition_FieldPathSelectorValue:
				result.Value = source.Value
			}
		}
	}
	return result
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Role_Grant_FieldCondition))
}

func (fieldMask *Role_Grant_FieldCondition_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ScopeParam_FieldMask struct {
	Paths []ScopeParam_FieldPath
}

func FullScopeParam_FieldMask() *ScopeParam_FieldMask {
	res := &ScopeParam_FieldMask{}
	res.Paths = append(res.Paths, &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorString})
	res.Paths = append(res.Paths, &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorStrings})
	res.Paths = append(res.Paths, &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorValueFrom})
	return res
}

func (fieldMask *ScopeParam_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ScopeParam_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ScopeParam_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ScopeParam_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseScopeParam_FieldPath(raw)
	})
}

func (fieldMask *ScopeParam_FieldMask) ProtoMessage() {}

func (fieldMask *ScopeParam_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ScopeParam_FieldMask) Subtract(other *ScopeParam_FieldMask) *ScopeParam_FieldMask {
	result := &ScopeParam_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[ScopeParam_FieldPathSelector]gotenobject.FieldMask{
		ScopeParam_FieldPathSelectorString:    &ScopeParam_StringValue_FieldMask{},
		ScopeParam_FieldPathSelectorStrings:   &ScopeParam_ArrayOfStringsValue_FieldMask{},
		ScopeParam_FieldPathSelectorValueFrom: &ScopeParam_FromValue_FieldMask{},
	}
	mySubMasks := map[ScopeParam_FieldPathSelector]gotenobject.FieldMask{
		ScopeParam_FieldPathSelectorString:    &ScopeParam_StringValue_FieldMask{},
		ScopeParam_FieldPathSelectorStrings:   &ScopeParam_ArrayOfStringsValue_FieldMask{},
		ScopeParam_FieldPathSelectorValueFrom: &ScopeParam_FromValue_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ScopeParam_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ScopeParam_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ScopeParam_FieldTerminalPath); ok {
					switch tp.selector {
					case ScopeParam_FieldPathSelectorString:
						mySubMasks[ScopeParam_FieldPathSelectorString] = FullScopeParam_StringValue_FieldMask()
					case ScopeParam_FieldPathSelectorStrings:
						mySubMasks[ScopeParam_FieldPathSelectorStrings] = FullScopeParam_ArrayOfStringsValue_FieldMask()
					case ScopeParam_FieldPathSelectorValueFrom:
						mySubMasks[ScopeParam_FieldPathSelectorValueFrom] = FullScopeParam_FromValue_FieldMask()
					}
				} else if tp, ok := path.(*ScopeParam_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ScopeParam_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ScopeParam_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ScopeParam_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ScopeParam_FieldMask) FilterInputFields() *ScopeParam_FieldMask {
	result := &ScopeParam_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ScopeParam_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ScopeParam_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ScopeParam_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseScopeParam_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ScopeParam_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ScopeParam_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ScopeParam_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ScopeParam_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_FieldMask) AppendPath(path ScopeParam_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ScopeParam_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ScopeParam_FieldPath))
}

func (fieldMask *ScopeParam_FieldMask) GetPaths() []ScopeParam_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ScopeParam_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ScopeParam_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseScopeParam_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ScopeParam_FieldMask) Set(target, source *ScopeParam) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ScopeParam_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ScopeParam), source.(*ScopeParam))
}

func (fieldMask *ScopeParam_FieldMask) Project(source *ScopeParam) *ScopeParam {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ScopeParam{}
	stringMask := &ScopeParam_StringValue_FieldMask{}
	wholeStringAccepted := false
	stringsMask := &ScopeParam_ArrayOfStringsValue_FieldMask{}
	wholeStringsAccepted := false
	valueFromMask := &ScopeParam_FromValue_FieldMask{}
	wholeValueFromAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ScopeParam_FieldTerminalPath:
			switch tp.selector {
			case ScopeParam_FieldPathSelectorName:
				result.Name = source.Name
			case ScopeParam_FieldPathSelectorString:
				if source, ok := source.Value.(*ScopeParam_String_); ok {
					result.Value = &ScopeParam_String_{
						String_: source.String_,
					}
				}
				wholeStringAccepted = true
			case ScopeParam_FieldPathSelectorStrings:
				if source, ok := source.Value.(*ScopeParam_Strings); ok {
					result.Value = &ScopeParam_Strings{
						Strings: source.Strings,
					}
				}
				wholeStringsAccepted = true
			case ScopeParam_FieldPathSelectorValueFrom:
				if source, ok := source.Value.(*ScopeParam_ValueFrom); ok {
					result.Value = &ScopeParam_ValueFrom{
						ValueFrom: source.ValueFrom,
					}
				}
				wholeValueFromAccepted = true
			}
		case *ScopeParam_FieldSubPath:
			switch tp.selector {
			case ScopeParam_FieldPathSelectorString:
				stringMask.AppendPath(tp.subPath.(ScopeParamStringValue_FieldPath))
			case ScopeParam_FieldPathSelectorStrings:
				stringsMask.AppendPath(tp.subPath.(ScopeParamArrayOfStringsValue_FieldPath))
			case ScopeParam_FieldPathSelectorValueFrom:
				valueFromMask.AppendPath(tp.subPath.(ScopeParamFromValue_FieldPath))
			}
		}
	}
	if wholeStringAccepted == false && len(stringMask.Paths) > 0 {
		if asOneOf, ok := source.Value.(*ScopeParam_String_); ok {
			result.Value = (*ScopeParam_String_)(nil)
			if asOneOf != nil {
				oneOfRes := &ScopeParam_String_{}
				oneOfRes.String_ = stringMask.Project(asOneOf.String_)
				result.Value = oneOfRes
			}
		}
	}
	if wholeStringsAccepted == false && len(stringsMask.Paths) > 0 {
		if asOneOf, ok := source.Value.(*ScopeParam_Strings); ok {
			result.Value = (*ScopeParam_Strings)(nil)
			if asOneOf != nil {
				oneOfRes := &ScopeParam_Strings{}
				oneOfRes.Strings = stringsMask.Project(asOneOf.Strings)
				result.Value = oneOfRes
			}
		}
	}
	if wholeValueFromAccepted == false && len(valueFromMask.Paths) > 0 {
		if asOneOf, ok := source.Value.(*ScopeParam_ValueFrom); ok {
			result.Value = (*ScopeParam_ValueFrom)(nil)
			if asOneOf != nil {
				oneOfRes := &ScopeParam_ValueFrom{}
				oneOfRes.ValueFrom = valueFromMask.Project(asOneOf.ValueFrom)
				result.Value = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *ScopeParam_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ScopeParam))
}

func (fieldMask *ScopeParam_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ScopeParam_StringValue_FieldMask struct {
	Paths []ScopeParamStringValue_FieldPath
}

func FullScopeParam_StringValue_FieldMask() *ScopeParam_StringValue_FieldMask {
	res := &ScopeParam_StringValue_FieldMask{}
	res.Paths = append(res.Paths, &ScopeParamStringValue_FieldTerminalPath{selector: ScopeParamStringValue_FieldPathSelectorValue})
	return res
}

func (fieldMask *ScopeParam_StringValue_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ScopeParam_StringValue_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ScopeParamStringValue_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ScopeParam_StringValue_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseScopeParamStringValue_FieldPath(raw)
	})
}

func (fieldMask *ScopeParam_StringValue_FieldMask) ProtoMessage() {}

func (fieldMask *ScopeParam_StringValue_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ScopeParam_StringValue_FieldMask) Subtract(other *ScopeParam_StringValue_FieldMask) *ScopeParam_StringValue_FieldMask {
	result := &ScopeParam_StringValue_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ScopeParamStringValue_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ScopeParam_StringValue_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ScopeParam_StringValue_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ScopeParam_StringValue_FieldMask) FilterInputFields() *ScopeParam_StringValue_FieldMask {
	result := &ScopeParam_StringValue_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ScopeParam_StringValue_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ScopeParam_StringValue_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ScopeParamStringValue_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseScopeParamStringValue_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ScopeParam_StringValue_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ScopeParam_StringValue_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_StringValue_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ScopeParam_StringValue_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ScopeParam_StringValue_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_StringValue_FieldMask) AppendPath(path ScopeParamStringValue_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ScopeParam_StringValue_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ScopeParamStringValue_FieldPath))
}

func (fieldMask *ScopeParam_StringValue_FieldMask) GetPaths() []ScopeParamStringValue_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ScopeParam_StringValue_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ScopeParam_StringValue_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseScopeParamStringValue_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ScopeParam_StringValue_FieldMask) Set(target, source *ScopeParam_StringValue) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ScopeParam_StringValue_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ScopeParam_StringValue), source.(*ScopeParam_StringValue))
}

func (fieldMask *ScopeParam_StringValue_FieldMask) Project(source *ScopeParam_StringValue) *ScopeParam_StringValue {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ScopeParam_StringValue{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ScopeParamStringValue_FieldTerminalPath:
			switch tp.selector {
			case ScopeParamStringValue_FieldPathSelectorValue:
				result.Value = source.Value
			}
		}
	}
	return result
}

func (fieldMask *ScopeParam_StringValue_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ScopeParam_StringValue))
}

func (fieldMask *ScopeParam_StringValue_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ScopeParam_ArrayOfStringsValue_FieldMask struct {
	Paths []ScopeParamArrayOfStringsValue_FieldPath
}

func FullScopeParam_ArrayOfStringsValue_FieldMask() *ScopeParam_ArrayOfStringsValue_FieldMask {
	res := &ScopeParam_ArrayOfStringsValue_FieldMask{}
	res.Paths = append(res.Paths, &ScopeParamArrayOfStringsValue_FieldTerminalPath{selector: ScopeParamArrayOfStringsValue_FieldPathSelectorValues})
	return res
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ScopeParamArrayOfStringsValue_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseScopeParamArrayOfStringsValue_FieldPath(raw)
	})
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) ProtoMessage() {}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) Subtract(other *ScopeParam_ArrayOfStringsValue_FieldMask) *ScopeParam_ArrayOfStringsValue_FieldMask {
	result := &ScopeParam_ArrayOfStringsValue_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ScopeParamArrayOfStringsValue_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ScopeParam_ArrayOfStringsValue_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) FilterInputFields() *ScopeParam_ArrayOfStringsValue_FieldMask {
	result := &ScopeParam_ArrayOfStringsValue_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ScopeParamArrayOfStringsValue_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseScopeParamArrayOfStringsValue_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ScopeParam_ArrayOfStringsValue_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ScopeParam_ArrayOfStringsValue_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) AppendPath(path ScopeParamArrayOfStringsValue_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ScopeParamArrayOfStringsValue_FieldPath))
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) GetPaths() []ScopeParamArrayOfStringsValue_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseScopeParamArrayOfStringsValue_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) Set(target, source *ScopeParam_ArrayOfStringsValue) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ScopeParam_ArrayOfStringsValue), source.(*ScopeParam_ArrayOfStringsValue))
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) Project(source *ScopeParam_ArrayOfStringsValue) *ScopeParam_ArrayOfStringsValue {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ScopeParam_ArrayOfStringsValue{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ScopeParamArrayOfStringsValue_FieldTerminalPath:
			switch tp.selector {
			case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ScopeParam_ArrayOfStringsValue))
}

func (fieldMask *ScopeParam_ArrayOfStringsValue_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ScopeParam_FromValue_FieldMask struct {
	Paths []ScopeParamFromValue_FieldPath
}

func FullScopeParam_FromValue_FieldMask() *ScopeParam_FromValue_FieldMask {
	res := &ScopeParam_FromValue_FieldMask{}
	res.Paths = append(res.Paths, &ScopeParamFromValue_FieldTerminalPath{selector: ScopeParamFromValue_FieldPathSelectorSource})
	res.Paths = append(res.Paths, &ScopeParamFromValue_FieldTerminalPath{selector: ScopeParamFromValue_FieldPathSelectorPath})
	return res
}

func (fieldMask *ScopeParam_FromValue_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ScopeParam_FromValue_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ScopeParamFromValue_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ScopeParam_FromValue_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseScopeParamFromValue_FieldPath(raw)
	})
}

func (fieldMask *ScopeParam_FromValue_FieldMask) ProtoMessage() {}

func (fieldMask *ScopeParam_FromValue_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ScopeParam_FromValue_FieldMask) Subtract(other *ScopeParam_FromValue_FieldMask) *ScopeParam_FromValue_FieldMask {
	result := &ScopeParam_FromValue_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ScopeParamFromValue_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ScopeParam_FromValue_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ScopeParam_FromValue_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ScopeParam_FromValue_FieldMask) FilterInputFields() *ScopeParam_FromValue_FieldMask {
	result := &ScopeParam_FromValue_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ScopeParam_FromValue_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ScopeParam_FromValue_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ScopeParamFromValue_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseScopeParamFromValue_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ScopeParam_FromValue_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ScopeParam_FromValue_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_FromValue_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ScopeParam_FromValue_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ScopeParam_FromValue_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ScopeParam_FromValue_FieldMask) AppendPath(path ScopeParamFromValue_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ScopeParam_FromValue_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ScopeParamFromValue_FieldPath))
}

func (fieldMask *ScopeParam_FromValue_FieldMask) GetPaths() []ScopeParamFromValue_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ScopeParam_FromValue_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ScopeParam_FromValue_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseScopeParamFromValue_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ScopeParam_FromValue_FieldMask) Set(target, source *ScopeParam_FromValue) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ScopeParam_FromValue_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ScopeParam_FromValue), source.(*ScopeParam_FromValue))
}

func (fieldMask *ScopeParam_FromValue_FieldMask) Project(source *ScopeParam_FromValue) *ScopeParam_FromValue {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ScopeParam_FromValue{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ScopeParamFromValue_FieldTerminalPath:
			switch tp.selector {
			case ScopeParamFromValue_FieldPathSelectorSource:
				result.Source = source.Source
			case ScopeParamFromValue_FieldPathSelectorPath:
				result.Path = source.Path
			}
		}
	}
	return result
}

func (fieldMask *ScopeParam_FromValue_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ScopeParam_FromValue))
}

func (fieldMask *ScopeParam_FromValue_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
