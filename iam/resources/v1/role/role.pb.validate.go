// Code generated by protoc-gen-goten-validate
// File: edgelq/iam/proto/v1/role.proto
// DO NOT EDIT!!!

package role

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &permission.Permission{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

func (obj *Role) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Role", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.ScopeParams {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Role", "scopeParams", obj.ScopeParams[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.Grants {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Role", "grants", obj.Grants[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Role_ScopeParamType) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Name) > 128 {
		return gotenvalidate.NewValidationError("ScopeParamType", "name", obj.Name, "field must contain at most 128 characters", nil)
	}
	if obj.Name == "" {
		return gotenvalidate.NewValidationError("ScopeParamType", "name", obj.Name, "field is required", nil)
	}
	if _, ok := Role_ScopeParamType_Type_name[int32(obj.Type)]; !ok {
		return gotenvalidate.NewValidationError("ScopeParamType", "type", obj.Type, "field must be a defined enum value", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Role_Grant) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.SubScope) > 512 {
		return gotenvalidate.NewValidationError("Grant", "subScope", obj.SubScope, "field must contain at most 512 characters", nil)
	}
	for idx, elem := range obj.ResourceFieldConditions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Grant", "resourceFieldConditions", obj.ResourceFieldConditions[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.RequestFieldConditions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Grant", "requestFieldConditions", obj.RequestFieldConditions[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ExecutableConditions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Grant", "executableConditions", obj.ExecutableConditions[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Role_Grant_FieldCondition) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Path) > 512 {
		return gotenvalidate.NewValidationError("FieldCondition", "path", obj.Path, "field must contain at most 512 characters", nil)
	}
	if obj.Path == "" {
		return gotenvalidate.NewValidationError("FieldCondition", "path", obj.Path, "field is required", nil)
	}
	if len(obj.Value) > 512 {
		return gotenvalidate.NewValidationError("FieldCondition", "value", obj.Value, "field must contain at most 512 characters", nil)
	}
	if obj.Value == "" {
		return gotenvalidate.NewValidationError("FieldCondition", "value", obj.Value, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ScopeParam) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Value.(type) {
	case *ScopeParam_String_:
		if subobj, ok := interface{}(opt.String_).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ScopeParam", "string", opt.String_, "nested object validation failed", err)
			}
		}
	case *ScopeParam_Strings:
		if subobj, ok := interface{}(opt.Strings).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ScopeParam", "strings", opt.Strings, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ScopeParam_StringValue) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ScopeParam_ArrayOfStringsValue) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
