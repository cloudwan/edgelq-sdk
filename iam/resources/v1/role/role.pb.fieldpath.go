// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/role.proto
// DO NOT EDIT!!!

package role

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &organization.Organization{}
	_ = &permission.Permission{}
	_ = &project.Project{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Role_FieldPath interface {
	gotenobject.FieldPath
	Selector() Role_FieldPathSelector
	Get(source *Role) []interface{}
	GetSingle(source *Role) (interface{}, bool)
	ClearValue(item *Role)

	// Those methods build corresponding Role_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Role_FieldPathValue
	WithIArrayOfValues(values interface{}) Role_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Role_FieldPathArrayItemValue
}

type Role_FieldPathSelector int32

const (
	Role_FieldPathSelectorName             Role_FieldPathSelector = 0
	Role_FieldPathSelectorMetadata         Role_FieldPathSelector = 1
	Role_FieldPathSelectorDisplayName      Role_FieldPathSelector = 2
	Role_FieldPathSelectorDescription      Role_FieldPathSelector = 3
	Role_FieldPathSelectorCategory         Role_FieldPathSelector = 4
	Role_FieldPathSelectorScopeParams      Role_FieldPathSelector = 5
	Role_FieldPathSelectorGrants           Role_FieldPathSelector = 6
	Role_FieldPathSelectorOwnedObjects     Role_FieldPathSelector = 7
	Role_FieldPathSelectorServices         Role_FieldPathSelector = 8
	Role_FieldPathSelectorRbSpecGeneration Role_FieldPathSelector = 9
)

func (s Role_FieldPathSelector) String() string {
	switch s {
	case Role_FieldPathSelectorName:
		return "name"
	case Role_FieldPathSelectorMetadata:
		return "metadata"
	case Role_FieldPathSelectorDisplayName:
		return "display_name"
	case Role_FieldPathSelectorDescription:
		return "description"
	case Role_FieldPathSelectorCategory:
		return "category"
	case Role_FieldPathSelectorScopeParams:
		return "scope_params"
	case Role_FieldPathSelectorGrants:
		return "grants"
	case Role_FieldPathSelectorOwnedObjects:
		return "owned_objects"
	case Role_FieldPathSelectorServices:
		return "services"
	case Role_FieldPathSelectorRbSpecGeneration:
		return "rb_spec_generation"
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", s))
	}
}

func BuildRole_FieldPath(fp gotenobject.RawFieldPath) (Role_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Role")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorName}, nil
		case "metadata":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDescription}, nil
		case "category":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorCategory}, nil
		case "scope_params", "scopeParams", "scope-params":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorScopeParams}, nil
		case "grants":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorGrants}, nil
		case "owned_objects", "ownedObjects", "owned-objects":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorOwnedObjects}, nil
		case "services":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorServices}, nil
		case "rb_spec_generation", "rbSpecGeneration", "rb-spec-generation":
			return &Role_FieldTerminalPath{selector: Role_FieldPathSelectorRbSpecGeneration}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Role_FieldSubPath{selector: Role_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "scope_params", "scopeParams", "scope-params":
			if subpath, err := BuildRoleScopeParamType_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Role_FieldSubPath{selector: Role_FieldPathSelectorScopeParams, subPath: subpath}, nil
			}
		case "grants":
			if subpath, err := BuildRoleGrant_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Role_FieldSubPath{selector: Role_FieldPathSelectorGrants, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Role", fp)
}

func ParseRole_FieldPath(rawField string) (Role_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRole_FieldPath(fp)
}

func MustParseRole_FieldPath(rawField string) Role_FieldPath {
	fp, err := ParseRole_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Role_FieldTerminalPath struct {
	selector Role_FieldPathSelector
}

var _ Role_FieldPath = (*Role_FieldTerminalPath)(nil)

func (fp *Role_FieldTerminalPath) Selector() Role_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Role_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Role_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Role
func (fp *Role_FieldTerminalPath) Get(source *Role) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Role_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Role_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Role_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Role_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Role_FieldPathSelectorCategory:
			values = append(values, source.Category)
		case Role_FieldPathSelectorScopeParams:
			for _, value := range source.GetScopeParams() {
				values = append(values, value)
			}
		case Role_FieldPathSelectorGrants:
			for _, value := range source.GetGrants() {
				values = append(values, value)
			}
		case Role_FieldPathSelectorOwnedObjects:
			for _, value := range source.GetOwnedObjects() {
				values = append(values, value)
			}
		case Role_FieldPathSelectorServices:
			for _, value := range source.GetServices() {
				values = append(values, value)
			}
		case Role_FieldPathSelectorRbSpecGeneration:
			values = append(values, source.RbSpecGeneration)
		default:
			panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
		}
	}
	return
}

func (fp *Role_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Role))
}

// GetSingle returns value pointed by specific field of from source Role
func (fp *Role_FieldTerminalPath) GetSingle(source *Role) (interface{}, bool) {
	switch fp.selector {
	case Role_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Role_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Role_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Role_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Role_FieldPathSelectorCategory:
		return source.GetCategory(), source != nil
	case Role_FieldPathSelectorScopeParams:
		res := source.GetScopeParams()
		return res, res != nil
	case Role_FieldPathSelectorGrants:
		res := source.GetGrants()
		return res, res != nil
	case Role_FieldPathSelectorOwnedObjects:
		res := source.GetOwnedObjects()
		return res, res != nil
	case Role_FieldPathSelectorServices:
		res := source.GetServices()
		return res, res != nil
	case Role_FieldPathSelectorRbSpecGeneration:
		return source.GetRbSpecGeneration(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
	}
}

func (fp *Role_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Role))
}

// GetDefault returns a default value of the field type
func (fp *Role_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Role_FieldPathSelectorName:
		return (*Name)(nil)
	case Role_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Role_FieldPathSelectorDisplayName:
		return ""
	case Role_FieldPathSelectorDescription:
		return ""
	case Role_FieldPathSelectorCategory:
		return Role_UNDEFINED
	case Role_FieldPathSelectorScopeParams:
		return ([]*Role_ScopeParamType)(nil)
	case Role_FieldPathSelectorGrants:
		return ([]*Role_Grant)(nil)
	case Role_FieldPathSelectorOwnedObjects:
		return ([]string)(nil)
	case Role_FieldPathSelectorServices:
		return ([]*meta_service.Reference)(nil)
	case Role_FieldPathSelectorRbSpecGeneration:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
	}
}

func (fp *Role_FieldTerminalPath) ClearValue(item *Role) {
	if item != nil {
		switch fp.selector {
		case Role_FieldPathSelectorName:
			item.Name = nil
		case Role_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Role_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Role_FieldPathSelectorDescription:
			item.Description = ""
		case Role_FieldPathSelectorCategory:
			item.Category = Role_UNDEFINED
		case Role_FieldPathSelectorScopeParams:
			item.ScopeParams = nil
		case Role_FieldPathSelectorGrants:
			item.Grants = nil
		case Role_FieldPathSelectorOwnedObjects:
			item.OwnedObjects = nil
		case Role_FieldPathSelectorServices:
			item.Services = nil
		case Role_FieldPathSelectorRbSpecGeneration:
			item.RbSpecGeneration = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
		}
	}
}

func (fp *Role_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Role))
}

// IsLeaf - whether field path is holds simple value
func (fp *Role_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Role_FieldPathSelectorName ||
		fp.selector == Role_FieldPathSelectorDisplayName ||
		fp.selector == Role_FieldPathSelectorDescription ||
		fp.selector == Role_FieldPathSelectorCategory ||
		fp.selector == Role_FieldPathSelectorOwnedObjects ||
		fp.selector == Role_FieldPathSelectorServices ||
		fp.selector == Role_FieldPathSelectorRbSpecGeneration
}

func (fp *Role_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Role_FieldTerminalPath) WithIValue(value interface{}) Role_FieldPathValue {
	switch fp.selector {
	case Role_FieldPathSelectorName:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.(*Name)}
	case Role_FieldPathSelectorMetadata:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Role_FieldPathSelectorDisplayName:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.(string)}
	case Role_FieldPathSelectorDescription:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.(string)}
	case Role_FieldPathSelectorCategory:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.(Role_Category)}
	case Role_FieldPathSelectorScopeParams:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.([]*Role_ScopeParamType)}
	case Role_FieldPathSelectorGrants:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.([]*Role_Grant)}
	case Role_FieldPathSelectorOwnedObjects:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.([]string)}
	case Role_FieldPathSelectorServices:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.([]*meta_service.Reference)}
	case Role_FieldPathSelectorRbSpecGeneration:
		return &Role_FieldTerminalPathValue{Role_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
	}
}

func (fp *Role_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Role_FieldTerminalPath) WithIArrayOfValues(values interface{}) Role_FieldPathArrayOfValues {
	fpaov := &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp}
	switch fp.selector {
	case Role_FieldPathSelectorName:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Role_FieldPathSelectorMetadata:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Role_FieldPathSelectorDisplayName:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([]string)}
	case Role_FieldPathSelectorDescription:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([]string)}
	case Role_FieldPathSelectorCategory:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([]Role_Category)}
	case Role_FieldPathSelectorScopeParams:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([][]*Role_ScopeParamType)}
	case Role_FieldPathSelectorGrants:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([][]*Role_Grant)}
	case Role_FieldPathSelectorOwnedObjects:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([][]string)}
	case Role_FieldPathSelectorServices:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([][]*meta_service.Reference)}
	case Role_FieldPathSelectorRbSpecGeneration:
		return &Role_FieldTerminalPathArrayOfValues{Role_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
	}
	return fpaov
}

func (fp *Role_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Role_FieldTerminalPath) WithIArrayItemValue(value interface{}) Role_FieldPathArrayItemValue {
	switch fp.selector {
	case Role_FieldPathSelectorScopeParams:
		return &Role_FieldTerminalPathArrayItemValue{Role_FieldTerminalPath: *fp, value: value.(*Role_ScopeParamType)}
	case Role_FieldPathSelectorGrants:
		return &Role_FieldTerminalPathArrayItemValue{Role_FieldTerminalPath: *fp, value: value.(*Role_Grant)}
	case Role_FieldPathSelectorOwnedObjects:
		return &Role_FieldTerminalPathArrayItemValue{Role_FieldTerminalPath: *fp, value: value.(string)}
	case Role_FieldPathSelectorServices:
		return &Role_FieldTerminalPathArrayItemValue{Role_FieldTerminalPath: *fp, value: value.(*meta_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fp.selector))
	}
}

func (fp *Role_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Role_FieldSubPath struct {
	selector Role_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Role_FieldPath = (*Role_FieldSubPath)(nil)

func (fps *Role_FieldSubPath) Selector() Role_FieldPathSelector {
	return fps.selector
}
func (fps *Role_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Role_FieldSubPath) AsScopeParamsSubPath() (RoleScopeParamType_FieldPath, bool) {
	res, ok := fps.subPath.(RoleScopeParamType_FieldPath)
	return res, ok
}
func (fps *Role_FieldSubPath) AsGrantsSubPath() (RoleGrant_FieldPath, bool) {
	res, ok := fps.subPath.(RoleGrant_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Role_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Role_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Role
func (fps *Role_FieldSubPath) Get(source *Role) (values []interface{}) {
	switch fps.selector {
	case Role_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Role_FieldPathSelectorScopeParams:
		for _, item := range source.GetScopeParams() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case Role_FieldPathSelectorGrants:
		for _, item := range source.GetGrants() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fps.selector))
	}
	return
}

func (fps *Role_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Role))
}

// GetSingle returns value of selected field from source Role
func (fps *Role_FieldSubPath) GetSingle(source *Role) (interface{}, bool) {
	switch fps.selector {
	case Role_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Role_FieldPathSelectorScopeParams:
		if len(source.GetScopeParams()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetScopeParams()[0])
	case Role_FieldPathSelectorGrants:
		if len(source.GetGrants()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGrants()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fps.selector))
	}
}

func (fps *Role_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Role))
}

// GetDefault returns a default value of the field type
func (fps *Role_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Role_FieldSubPath) ClearValue(item *Role) {
	if item != nil {
		switch fps.selector {
		case Role_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Role_FieldPathSelectorScopeParams:
			for _, subItem := range item.ScopeParams {
				fps.subPath.ClearValueRaw(subItem)
			}
		case Role_FieldPathSelectorGrants:
			for _, subItem := range item.Grants {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Role: %d", fps.selector))
		}
	}
}

func (fps *Role_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Role))
}

// IsLeaf - whether field path is holds simple value
func (fps *Role_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Role_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Role_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Role_FieldSubPath) WithIValue(value interface{}) Role_FieldPathValue {
	return &Role_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Role_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Role_FieldSubPath) WithIArrayOfValues(values interface{}) Role_FieldPathArrayOfValues {
	return &Role_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Role_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Role_FieldSubPath) WithIArrayItemValue(value interface{}) Role_FieldPathArrayItemValue {
	return &Role_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Role_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Role_FieldPathValue allows storing values for Role fields according to their type
type Role_FieldPathValue interface {
	Role_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Role)
	CompareWith(*Role) (cmp int, comparable bool)
}

func ParseRole_FieldPathValue(pathStr, valueStr string) (Role_FieldPathValue, error) {
	fp, err := ParseRole_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Role field path value from %s: %v", valueStr, err)
	}
	return fpv.(Role_FieldPathValue), nil
}

func MustParseRole_FieldPathValue(pathStr, valueStr string) Role_FieldPathValue {
	fpv, err := ParseRole_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Role_FieldTerminalPathValue struct {
	Role_FieldTerminalPath
	value interface{}
}

var _ Role_FieldPathValue = (*Role_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Role' as interface{}
func (fpv *Role_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Role_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsCategoryValue() (Role_Category, bool) {
	res, ok := fpv.value.(Role_Category)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsScopeParamsValue() ([]*Role_ScopeParamType, bool) {
	res, ok := fpv.value.([]*Role_ScopeParamType)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsGrantsValue() ([]*Role_Grant, bool) {
	res, ok := fpv.value.([]*Role_Grant)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsOwnedObjectsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsServicesValue() ([]*meta_service.Reference, bool) {
	res, ok := fpv.value.([]*meta_service.Reference)
	return res, ok
}
func (fpv *Role_FieldTerminalPathValue) AsRbSpecGenerationValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object Role
func (fpv *Role_FieldTerminalPathValue) SetTo(target **Role) {
	if *target == nil {
		*target = new(Role)
	}
	switch fpv.selector {
	case Role_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Role_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Role_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Role_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Role_FieldPathSelectorCategory:
		(*target).Category = fpv.value.(Role_Category)
	case Role_FieldPathSelectorScopeParams:
		(*target).ScopeParams = fpv.value.([]*Role_ScopeParamType)
	case Role_FieldPathSelectorGrants:
		(*target).Grants = fpv.value.([]*Role_Grant)
	case Role_FieldPathSelectorOwnedObjects:
		(*target).OwnedObjects = fpv.value.([]string)
	case Role_FieldPathSelectorServices:
		(*target).Services = fpv.value.([]*meta_service.Reference)
	case Role_FieldPathSelectorRbSpecGeneration:
		(*target).RbSpecGeneration = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fpv.selector))
	}
}

func (fpv *Role_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Role)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Role_FieldTerminalPathValue' with the value under path in 'Role'.
func (fpv *Role_FieldTerminalPathValue) CompareWith(source *Role) (int, bool) {
	switch fpv.selector {
	case Role_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Role_FieldPathSelectorMetadata:
		return 0, false
	case Role_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Role_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Role_FieldPathSelectorCategory:
		leftValue := fpv.value.(Role_Category)
		rightValue := source.GetCategory()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Role_FieldPathSelectorScopeParams:
		return 0, false
	case Role_FieldPathSelectorGrants:
		return 0, false
	case Role_FieldPathSelectorOwnedObjects:
		return 0, false
	case Role_FieldPathSelectorServices:
		return 0, false
	case Role_FieldPathSelectorRbSpecGeneration:
		leftValue := fpv.value.(int64)
		rightValue := source.GetRbSpecGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fpv.selector))
	}
}

func (fpv *Role_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Role))
}

type Role_FieldSubPathValue struct {
	Role_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Role_FieldPathValue = (*Role_FieldSubPathValue)(nil)

func (fpvs *Role_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Role_FieldSubPathValue) AsScopeParamsPathValue() (RoleScopeParamType_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RoleScopeParamType_FieldPathValue)
	return res, ok
}
func (fpvs *Role_FieldSubPathValue) AsGrantsPathValue() (RoleGrant_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RoleGrant_FieldPathValue)
	return res, ok
}

func (fpvs *Role_FieldSubPathValue) SetTo(target **Role) {
	if *target == nil {
		*target = new(Role)
	}
	switch fpvs.Selector() {
	case Role_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Role_FieldPathSelectorScopeParams:
		panic("FieldPath setter is unsupported for array subpaths")
	case Role_FieldPathSelectorGrants:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fpvs.Selector()))
	}
}

func (fpvs *Role_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Role)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Role_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Role_FieldSubPathValue) CompareWith(source *Role) (int, bool) {
	switch fpvs.Selector() {
	case Role_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Role_FieldPathSelectorScopeParams:
		return 0, false // repeated field
	case Role_FieldPathSelectorGrants:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fpvs.Selector()))
	}
}

func (fpvs *Role_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Role))
}

// Role_FieldPathArrayItemValue allows storing single item in Path-specific values for Role according to their type
// Present only for array (repeated) types.
type Role_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Role_FieldPath
	ContainsValue(*Role) bool
}

// ParseRole_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRole_FieldPathArrayItemValue(pathStr, valueStr string) (Role_FieldPathArrayItemValue, error) {
	fp, err := ParseRole_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Role field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Role_FieldPathArrayItemValue), nil
}

func MustParseRole_FieldPathArrayItemValue(pathStr, valueStr string) Role_FieldPathArrayItemValue {
	fpaiv, err := ParseRole_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Role_FieldTerminalPathArrayItemValue struct {
	Role_FieldTerminalPath
	value interface{}
}

var _ Role_FieldPathArrayItemValue = (*Role_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Role as interface{}
func (fpaiv *Role_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Role_FieldTerminalPathArrayItemValue) AsScopeParamsItemValue() (*Role_ScopeParamType, bool) {
	res, ok := fpaiv.value.(*Role_ScopeParamType)
	return res, ok
}
func (fpaiv *Role_FieldTerminalPathArrayItemValue) AsGrantsItemValue() (*Role_Grant, bool) {
	res, ok := fpaiv.value.(*Role_Grant)
	return res, ok
}
func (fpaiv *Role_FieldTerminalPathArrayItemValue) AsOwnedObjectsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *Role_FieldTerminalPathArrayItemValue) AsServicesItemValue() (*meta_service.Reference, bool) {
	res, ok := fpaiv.value.(*meta_service.Reference)
	return res, ok
}

func (fpaiv *Role_FieldTerminalPathArrayItemValue) GetSingle(source *Role) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Role_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Role))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Role'
func (fpaiv *Role_FieldTerminalPathArrayItemValue) ContainsValue(source *Role) bool {
	slice := fpaiv.Role_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Role_FieldSubPathArrayItemValue struct {
	Role_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Role_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Role_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Role_FieldSubPathArrayItemValue) AsScopeParamsPathItemValue() (RoleScopeParamType_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RoleScopeParamType_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Role_FieldSubPathArrayItemValue) AsGrantsPathItemValue() (RoleGrant_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RoleGrant_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Role'
func (fpaivs *Role_FieldSubPathArrayItemValue) ContainsValue(source *Role) bool {
	switch fpaivs.Selector() {
	case Role_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Role_FieldPathSelectorScopeParams:
		return false // repeated/map field
	case Role_FieldPathSelectorGrants:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Role: %d", fpaivs.Selector()))
	}
}

// Role_FieldPathArrayOfValues allows storing slice of values for Role fields according to their type
type Role_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Role_FieldPath
}

func ParseRole_FieldPathArrayOfValues(pathStr, valuesStr string) (Role_FieldPathArrayOfValues, error) {
	fp, err := ParseRole_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Role field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Role_FieldPathArrayOfValues), nil
}

func MustParseRole_FieldPathArrayOfValues(pathStr, valuesStr string) Role_FieldPathArrayOfValues {
	fpaov, err := ParseRole_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Role_FieldTerminalPathArrayOfValues struct {
	Role_FieldTerminalPath
	values interface{}
}

var _ Role_FieldPathArrayOfValues = (*Role_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Role_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Role_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorCategory:
		for _, v := range fpaov.values.([]Role_Category) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorScopeParams:
		for _, v := range fpaov.values.([][]*Role_ScopeParamType) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorGrants:
		for _, v := range fpaov.values.([][]*Role_Grant) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorOwnedObjects:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorServices:
		for _, v := range fpaov.values.([][]*meta_service.Reference) {
			values = append(values, v)
		}
	case Role_FieldPathSelectorRbSpecGeneration:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsCategoryArrayOfValues() ([]Role_Category, bool) {
	res, ok := fpaov.values.([]Role_Category)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsScopeParamsArrayOfValues() ([][]*Role_ScopeParamType, bool) {
	res, ok := fpaov.values.([][]*Role_ScopeParamType)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsGrantsArrayOfValues() ([][]*Role_Grant, bool) {
	res, ok := fpaov.values.([][]*Role_Grant)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsOwnedObjectsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsServicesArrayOfValues() ([][]*meta_service.Reference, bool) {
	res, ok := fpaov.values.([][]*meta_service.Reference)
	return res, ok
}
func (fpaov *Role_FieldTerminalPathArrayOfValues) AsRbSpecGenerationArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}

type Role_FieldSubPathArrayOfValues struct {
	Role_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Role_FieldPathArrayOfValues = (*Role_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Role_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Role_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Role_FieldSubPathArrayOfValues) AsScopeParamsPathArrayOfValues() (RoleScopeParamType_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RoleScopeParamType_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Role_FieldSubPathArrayOfValues) AsGrantsPathArrayOfValues() (RoleGrant_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RoleGrant_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RoleScopeParamType_FieldPath interface {
	gotenobject.FieldPath
	Selector() RoleScopeParamType_FieldPathSelector
	Get(source *Role_ScopeParamType) []interface{}
	GetSingle(source *Role_ScopeParamType) (interface{}, bool)
	ClearValue(item *Role_ScopeParamType)

	// Those methods build corresponding RoleScopeParamType_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RoleScopeParamType_FieldPathValue
	WithIArrayOfValues(values interface{}) RoleScopeParamType_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RoleScopeParamType_FieldPathArrayItemValue
}

type RoleScopeParamType_FieldPathSelector int32

const (
	RoleScopeParamType_FieldPathSelectorName RoleScopeParamType_FieldPathSelector = 0
	RoleScopeParamType_FieldPathSelectorType RoleScopeParamType_FieldPathSelector = 1
)

func (s RoleScopeParamType_FieldPathSelector) String() string {
	switch s {
	case RoleScopeParamType_FieldPathSelectorName:
		return "name"
	case RoleScopeParamType_FieldPathSelectorType:
		return "type"
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", s))
	}
}

func BuildRoleScopeParamType_FieldPath(fp gotenobject.RawFieldPath) (RoleScopeParamType_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Role_ScopeParamType")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RoleScopeParamType_FieldTerminalPath{selector: RoleScopeParamType_FieldPathSelectorName}, nil
		case "type":
			return &RoleScopeParamType_FieldTerminalPath{selector: RoleScopeParamType_FieldPathSelectorType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Role_ScopeParamType", fp)
}

func ParseRoleScopeParamType_FieldPath(rawField string) (RoleScopeParamType_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRoleScopeParamType_FieldPath(fp)
}

func MustParseRoleScopeParamType_FieldPath(rawField string) RoleScopeParamType_FieldPath {
	fp, err := ParseRoleScopeParamType_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RoleScopeParamType_FieldTerminalPath struct {
	selector RoleScopeParamType_FieldPathSelector
}

var _ RoleScopeParamType_FieldPath = (*RoleScopeParamType_FieldTerminalPath)(nil)

func (fp *RoleScopeParamType_FieldTerminalPath) Selector() RoleScopeParamType_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RoleScopeParamType_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RoleScopeParamType_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Role_ScopeParamType
func (fp *RoleScopeParamType_FieldTerminalPath) Get(source *Role_ScopeParamType) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RoleScopeParamType_FieldPathSelectorName:
			values = append(values, source.Name)
		case RoleScopeParamType_FieldPathSelectorType:
			values = append(values, source.Type)
		default:
			panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
		}
	}
	return
}

func (fp *RoleScopeParamType_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Role_ScopeParamType))
}

// GetSingle returns value pointed by specific field of from source Role_ScopeParamType
func (fp *RoleScopeParamType_FieldTerminalPath) GetSingle(source *Role_ScopeParamType) (interface{}, bool) {
	switch fp.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		return source.GetName(), source != nil
	case RoleScopeParamType_FieldPathSelectorType:
		return source.GetType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
	}
}

func (fp *RoleScopeParamType_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Role_ScopeParamType))
}

// GetDefault returns a default value of the field type
func (fp *RoleScopeParamType_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		return ""
	case RoleScopeParamType_FieldPathSelectorType:
		return Role_ScopeParamType_UNDEFINED
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
	}
}

func (fp *RoleScopeParamType_FieldTerminalPath) ClearValue(item *Role_ScopeParamType) {
	if item != nil {
		switch fp.selector {
		case RoleScopeParamType_FieldPathSelectorName:
			item.Name = ""
		case RoleScopeParamType_FieldPathSelectorType:
			item.Type = Role_ScopeParamType_UNDEFINED
		default:
			panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
		}
	}
}

func (fp *RoleScopeParamType_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Role_ScopeParamType))
}

// IsLeaf - whether field path is holds simple value
func (fp *RoleScopeParamType_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RoleScopeParamType_FieldPathSelectorName ||
		fp.selector == RoleScopeParamType_FieldPathSelectorType
}

func (fp *RoleScopeParamType_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RoleScopeParamType_FieldTerminalPath) WithIValue(value interface{}) RoleScopeParamType_FieldPathValue {
	switch fp.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		return &RoleScopeParamType_FieldTerminalPathValue{RoleScopeParamType_FieldTerminalPath: *fp, value: value.(string)}
	case RoleScopeParamType_FieldPathSelectorType:
		return &RoleScopeParamType_FieldTerminalPathValue{RoleScopeParamType_FieldTerminalPath: *fp, value: value.(Role_ScopeParamType_Type)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
	}
}

func (fp *RoleScopeParamType_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RoleScopeParamType_FieldTerminalPath) WithIArrayOfValues(values interface{}) RoleScopeParamType_FieldPathArrayOfValues {
	fpaov := &RoleScopeParamType_FieldTerminalPathArrayOfValues{RoleScopeParamType_FieldTerminalPath: *fp}
	switch fp.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		return &RoleScopeParamType_FieldTerminalPathArrayOfValues{RoleScopeParamType_FieldTerminalPath: *fp, values: values.([]string)}
	case RoleScopeParamType_FieldPathSelectorType:
		return &RoleScopeParamType_FieldTerminalPathArrayOfValues{RoleScopeParamType_FieldTerminalPath: *fp, values: values.([]Role_ScopeParamType_Type)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
	}
	return fpaov
}

func (fp *RoleScopeParamType_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RoleScopeParamType_FieldTerminalPath) WithIArrayItemValue(value interface{}) RoleScopeParamType_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fp.selector))
	}
}

func (fp *RoleScopeParamType_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RoleScopeParamType_FieldPathValue allows storing values for ScopeParamType fields according to their type
type RoleScopeParamType_FieldPathValue interface {
	RoleScopeParamType_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Role_ScopeParamType)
	CompareWith(*Role_ScopeParamType) (cmp int, comparable bool)
}

func ParseRoleScopeParamType_FieldPathValue(pathStr, valueStr string) (RoleScopeParamType_FieldPathValue, error) {
	fp, err := ParseRoleScopeParamType_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ScopeParamType field path value from %s: %v", valueStr, err)
	}
	return fpv.(RoleScopeParamType_FieldPathValue), nil
}

func MustParseRoleScopeParamType_FieldPathValue(pathStr, valueStr string) RoleScopeParamType_FieldPathValue {
	fpv, err := ParseRoleScopeParamType_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RoleScopeParamType_FieldTerminalPathValue struct {
	RoleScopeParamType_FieldTerminalPath
	value interface{}
}

var _ RoleScopeParamType_FieldPathValue = (*RoleScopeParamType_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ScopeParamType' as interface{}
func (fpv *RoleScopeParamType_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RoleScopeParamType_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RoleScopeParamType_FieldTerminalPathValue) AsTypeValue() (Role_ScopeParamType_Type, bool) {
	res, ok := fpv.value.(Role_ScopeParamType_Type)
	return res, ok
}

// SetTo stores value for selected field for object ScopeParamType
func (fpv *RoleScopeParamType_FieldTerminalPathValue) SetTo(target **Role_ScopeParamType) {
	if *target == nil {
		*target = new(Role_ScopeParamType)
	}
	switch fpv.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case RoleScopeParamType_FieldPathSelectorType:
		(*target).Type = fpv.value.(Role_ScopeParamType_Type)
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fpv.selector))
	}
}

func (fpv *RoleScopeParamType_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Role_ScopeParamType)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RoleScopeParamType_FieldTerminalPathValue' with the value under path in 'Role_ScopeParamType'.
func (fpv *RoleScopeParamType_FieldTerminalPathValue) CompareWith(source *Role_ScopeParamType) (int, bool) {
	switch fpv.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RoleScopeParamType_FieldPathSelectorType:
		leftValue := fpv.value.(Role_ScopeParamType_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_ScopeParamType: %d", fpv.selector))
	}
}

func (fpv *RoleScopeParamType_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Role_ScopeParamType))
}

// RoleScopeParamType_FieldPathArrayItemValue allows storing single item in Path-specific values for ScopeParamType according to their type
// Present only for array (repeated) types.
type RoleScopeParamType_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RoleScopeParamType_FieldPath
	ContainsValue(*Role_ScopeParamType) bool
}

// ParseRoleScopeParamType_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRoleScopeParamType_FieldPathArrayItemValue(pathStr, valueStr string) (RoleScopeParamType_FieldPathArrayItemValue, error) {
	fp, err := ParseRoleScopeParamType_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ScopeParamType field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RoleScopeParamType_FieldPathArrayItemValue), nil
}

func MustParseRoleScopeParamType_FieldPathArrayItemValue(pathStr, valueStr string) RoleScopeParamType_FieldPathArrayItemValue {
	fpaiv, err := ParseRoleScopeParamType_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RoleScopeParamType_FieldTerminalPathArrayItemValue struct {
	RoleScopeParamType_FieldTerminalPath
	value interface{}
}

var _ RoleScopeParamType_FieldPathArrayItemValue = (*RoleScopeParamType_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Role_ScopeParamType as interface{}
func (fpaiv *RoleScopeParamType_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RoleScopeParamType_FieldTerminalPathArrayItemValue) GetSingle(source *Role_ScopeParamType) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RoleScopeParamType_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Role_ScopeParamType))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ScopeParamType'
func (fpaiv *RoleScopeParamType_FieldTerminalPathArrayItemValue) ContainsValue(source *Role_ScopeParamType) bool {
	slice := fpaiv.RoleScopeParamType_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RoleScopeParamType_FieldPathArrayOfValues allows storing slice of values for ScopeParamType fields according to their type
type RoleScopeParamType_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RoleScopeParamType_FieldPath
}

func ParseRoleScopeParamType_FieldPathArrayOfValues(pathStr, valuesStr string) (RoleScopeParamType_FieldPathArrayOfValues, error) {
	fp, err := ParseRoleScopeParamType_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ScopeParamType field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RoleScopeParamType_FieldPathArrayOfValues), nil
}

func MustParseRoleScopeParamType_FieldPathArrayOfValues(pathStr, valuesStr string) RoleScopeParamType_FieldPathArrayOfValues {
	fpaov, err := ParseRoleScopeParamType_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RoleScopeParamType_FieldTerminalPathArrayOfValues struct {
	RoleScopeParamType_FieldTerminalPath
	values interface{}
}

var _ RoleScopeParamType_FieldPathArrayOfValues = (*RoleScopeParamType_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RoleScopeParamType_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RoleScopeParamType_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RoleScopeParamType_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Role_ScopeParamType_Type) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RoleScopeParamType_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RoleScopeParamType_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Role_ScopeParamType_Type, bool) {
	res, ok := fpaov.values.([]Role_ScopeParamType_Type)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RoleGrant_FieldPath interface {
	gotenobject.FieldPath
	Selector() RoleGrant_FieldPathSelector
	Get(source *Role_Grant) []interface{}
	GetSingle(source *Role_Grant) (interface{}, bool)
	ClearValue(item *Role_Grant)

	// Those methods build corresponding RoleGrant_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RoleGrant_FieldPathValue
	WithIArrayOfValues(values interface{}) RoleGrant_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RoleGrant_FieldPathArrayItemValue
}

type RoleGrant_FieldPathSelector int32

const (
	RoleGrant_FieldPathSelectorSubScope                RoleGrant_FieldPathSelector = 0
	RoleGrant_FieldPathSelectorPermissions             RoleGrant_FieldPathSelector = 1
	RoleGrant_FieldPathSelectorResourceFieldConditions RoleGrant_FieldPathSelector = 2
	RoleGrant_FieldPathSelectorRequestFieldConditions  RoleGrant_FieldPathSelector = 3
	RoleGrant_FieldPathSelectorExecutableConditions    RoleGrant_FieldPathSelector = 4
)

func (s RoleGrant_FieldPathSelector) String() string {
	switch s {
	case RoleGrant_FieldPathSelectorSubScope:
		return "sub_scope"
	case RoleGrant_FieldPathSelectorPermissions:
		return "permissions"
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return "resource_field_conditions"
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return "request_field_conditions"
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return "executable_conditions"
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", s))
	}
}

func BuildRoleGrant_FieldPath(fp gotenobject.RawFieldPath) (RoleGrant_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Role_Grant")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "sub_scope", "subScope", "sub-scope":
			return &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorSubScope}, nil
		case "permissions":
			return &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorPermissions}, nil
		case "resource_field_conditions", "resourceFieldConditions", "resource-field-conditions":
			return &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorResourceFieldConditions}, nil
		case "request_field_conditions", "requestFieldConditions", "request-field-conditions":
			return &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorRequestFieldConditions}, nil
		case "executable_conditions", "executableConditions", "executable-conditions":
			return &RoleGrant_FieldTerminalPath{selector: RoleGrant_FieldPathSelectorExecutableConditions}, nil
		}
	} else {
		switch fp[0] {
		case "resource_field_conditions", "resourceFieldConditions", "resource-field-conditions":
			if subpath, err := BuildRoleGrantFieldCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RoleGrant_FieldSubPath{selector: RoleGrant_FieldPathSelectorResourceFieldConditions, subPath: subpath}, nil
			}
		case "request_field_conditions", "requestFieldConditions", "request-field-conditions":
			if subpath, err := BuildRoleGrantFieldCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RoleGrant_FieldSubPath{selector: RoleGrant_FieldPathSelectorRequestFieldConditions, subPath: subpath}, nil
			}
		case "executable_conditions", "executableConditions", "executable-conditions":
			if subpath, err := condition.BuildExecutableCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RoleGrant_FieldSubPath{selector: RoleGrant_FieldPathSelectorExecutableConditions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Role_Grant", fp)
}

func ParseRoleGrant_FieldPath(rawField string) (RoleGrant_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRoleGrant_FieldPath(fp)
}

func MustParseRoleGrant_FieldPath(rawField string) RoleGrant_FieldPath {
	fp, err := ParseRoleGrant_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RoleGrant_FieldTerminalPath struct {
	selector RoleGrant_FieldPathSelector
}

var _ RoleGrant_FieldPath = (*RoleGrant_FieldTerminalPath)(nil)

func (fp *RoleGrant_FieldTerminalPath) Selector() RoleGrant_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RoleGrant_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RoleGrant_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Role_Grant
func (fp *RoleGrant_FieldTerminalPath) Get(source *Role_Grant) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RoleGrant_FieldPathSelectorSubScope:
			values = append(values, source.SubScope)
		case RoleGrant_FieldPathSelectorPermissions:
			for _, value := range source.GetPermissions() {
				values = append(values, value)
			}
		case RoleGrant_FieldPathSelectorResourceFieldConditions:
			for _, value := range source.GetResourceFieldConditions() {
				values = append(values, value)
			}
		case RoleGrant_FieldPathSelectorRequestFieldConditions:
			for _, value := range source.GetRequestFieldConditions() {
				values = append(values, value)
			}
		case RoleGrant_FieldPathSelectorExecutableConditions:
			for _, value := range source.GetExecutableConditions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
		}
	}
	return
}

func (fp *RoleGrant_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Role_Grant))
}

// GetSingle returns value pointed by specific field of from source Role_Grant
func (fp *RoleGrant_FieldTerminalPath) GetSingle(source *Role_Grant) (interface{}, bool) {
	switch fp.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		return source.GetSubScope(), source != nil
	case RoleGrant_FieldPathSelectorPermissions:
		res := source.GetPermissions()
		return res, res != nil
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		res := source.GetResourceFieldConditions()
		return res, res != nil
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		res := source.GetRequestFieldConditions()
		return res, res != nil
	case RoleGrant_FieldPathSelectorExecutableConditions:
		res := source.GetExecutableConditions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
	}
}

func (fp *RoleGrant_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Role_Grant))
}

// GetDefault returns a default value of the field type
func (fp *RoleGrant_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		return ""
	case RoleGrant_FieldPathSelectorPermissions:
		return ([]*permission.Reference)(nil)
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return ([]*Role_Grant_FieldCondition)(nil)
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return ([]*Role_Grant_FieldCondition)(nil)
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return ([]*condition.ExecutableCondition)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
	}
}

func (fp *RoleGrant_FieldTerminalPath) ClearValue(item *Role_Grant) {
	if item != nil {
		switch fp.selector {
		case RoleGrant_FieldPathSelectorSubScope:
			item.SubScope = ""
		case RoleGrant_FieldPathSelectorPermissions:
			item.Permissions = nil
		case RoleGrant_FieldPathSelectorResourceFieldConditions:
			item.ResourceFieldConditions = nil
		case RoleGrant_FieldPathSelectorRequestFieldConditions:
			item.RequestFieldConditions = nil
		case RoleGrant_FieldPathSelectorExecutableConditions:
			item.ExecutableConditions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
		}
	}
}

func (fp *RoleGrant_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Role_Grant))
}

// IsLeaf - whether field path is holds simple value
func (fp *RoleGrant_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RoleGrant_FieldPathSelectorSubScope ||
		fp.selector == RoleGrant_FieldPathSelectorPermissions
}

func (fp *RoleGrant_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RoleGrant_FieldTerminalPath) WithIValue(value interface{}) RoleGrant_FieldPathValue {
	switch fp.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		return &RoleGrant_FieldTerminalPathValue{RoleGrant_FieldTerminalPath: *fp, value: value.(string)}
	case RoleGrant_FieldPathSelectorPermissions:
		return &RoleGrant_FieldTerminalPathValue{RoleGrant_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return &RoleGrant_FieldTerminalPathValue{RoleGrant_FieldTerminalPath: *fp, value: value.([]*Role_Grant_FieldCondition)}
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return &RoleGrant_FieldTerminalPathValue{RoleGrant_FieldTerminalPath: *fp, value: value.([]*Role_Grant_FieldCondition)}
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return &RoleGrant_FieldTerminalPathValue{RoleGrant_FieldTerminalPath: *fp, value: value.([]*condition.ExecutableCondition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
	}
}

func (fp *RoleGrant_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RoleGrant_FieldTerminalPath) WithIArrayOfValues(values interface{}) RoleGrant_FieldPathArrayOfValues {
	fpaov := &RoleGrant_FieldTerminalPathArrayOfValues{RoleGrant_FieldTerminalPath: *fp}
	switch fp.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		return &RoleGrant_FieldTerminalPathArrayOfValues{RoleGrant_FieldTerminalPath: *fp, values: values.([]string)}
	case RoleGrant_FieldPathSelectorPermissions:
		return &RoleGrant_FieldTerminalPathArrayOfValues{RoleGrant_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return &RoleGrant_FieldTerminalPathArrayOfValues{RoleGrant_FieldTerminalPath: *fp, values: values.([][]*Role_Grant_FieldCondition)}
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return &RoleGrant_FieldTerminalPathArrayOfValues{RoleGrant_FieldTerminalPath: *fp, values: values.([][]*Role_Grant_FieldCondition)}
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return &RoleGrant_FieldTerminalPathArrayOfValues{RoleGrant_FieldTerminalPath: *fp, values: values.([][]*condition.ExecutableCondition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
	}
	return fpaov
}

func (fp *RoleGrant_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RoleGrant_FieldTerminalPath) WithIArrayItemValue(value interface{}) RoleGrant_FieldPathArrayItemValue {
	switch fp.selector {
	case RoleGrant_FieldPathSelectorPermissions:
		return &RoleGrant_FieldTerminalPathArrayItemValue{RoleGrant_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return &RoleGrant_FieldTerminalPathArrayItemValue{RoleGrant_FieldTerminalPath: *fp, value: value.(*Role_Grant_FieldCondition)}
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return &RoleGrant_FieldTerminalPathArrayItemValue{RoleGrant_FieldTerminalPath: *fp, value: value.(*Role_Grant_FieldCondition)}
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return &RoleGrant_FieldTerminalPathArrayItemValue{RoleGrant_FieldTerminalPath: *fp, value: value.(*condition.ExecutableCondition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fp.selector))
	}
}

func (fp *RoleGrant_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RoleGrant_FieldSubPath struct {
	selector RoleGrant_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RoleGrant_FieldPath = (*RoleGrant_FieldSubPath)(nil)

func (fps *RoleGrant_FieldSubPath) Selector() RoleGrant_FieldPathSelector {
	return fps.selector
}
func (fps *RoleGrant_FieldSubPath) AsResourceFieldConditionsSubPath() (RoleGrantFieldCondition_FieldPath, bool) {
	res, ok := fps.subPath.(RoleGrantFieldCondition_FieldPath)
	return res, ok
}
func (fps *RoleGrant_FieldSubPath) AsRequestFieldConditionsSubPath() (RoleGrantFieldCondition_FieldPath, bool) {
	res, ok := fps.subPath.(RoleGrantFieldCondition_FieldPath)
	return res, ok
}
func (fps *RoleGrant_FieldSubPath) AsExecutableConditionsSubPath() (condition.ExecutableCondition_FieldPath, bool) {
	res, ok := fps.subPath.(condition.ExecutableCondition_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RoleGrant_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RoleGrant_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Role_Grant
func (fps *RoleGrant_FieldSubPath) Get(source *Role_Grant) (values []interface{}) {
	switch fps.selector {
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		for _, item := range source.GetResourceFieldConditions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		for _, item := range source.GetRequestFieldConditions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case RoleGrant_FieldPathSelectorExecutableConditions:
		for _, item := range source.GetExecutableConditions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fps.selector))
	}
	return
}

func (fps *RoleGrant_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Role_Grant))
}

// GetSingle returns value of selected field from source Role_Grant
func (fps *RoleGrant_FieldSubPath) GetSingle(source *Role_Grant) (interface{}, bool) {
	switch fps.selector {
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		if len(source.GetResourceFieldConditions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResourceFieldConditions()[0])
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		if len(source.GetRequestFieldConditions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRequestFieldConditions()[0])
	case RoleGrant_FieldPathSelectorExecutableConditions:
		if len(source.GetExecutableConditions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetExecutableConditions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fps.selector))
	}
}

func (fps *RoleGrant_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Role_Grant))
}

// GetDefault returns a default value of the field type
func (fps *RoleGrant_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RoleGrant_FieldSubPath) ClearValue(item *Role_Grant) {
	if item != nil {
		switch fps.selector {
		case RoleGrant_FieldPathSelectorResourceFieldConditions:
			for _, subItem := range item.ResourceFieldConditions {
				fps.subPath.ClearValueRaw(subItem)
			}
		case RoleGrant_FieldPathSelectorRequestFieldConditions:
			for _, subItem := range item.RequestFieldConditions {
				fps.subPath.ClearValueRaw(subItem)
			}
		case RoleGrant_FieldPathSelectorExecutableConditions:
			for _, subItem := range item.ExecutableConditions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fps.selector))
		}
	}
}

func (fps *RoleGrant_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Role_Grant))
}

// IsLeaf - whether field path is holds simple value
func (fps *RoleGrant_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RoleGrant_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RoleGrant_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RoleGrant_FieldSubPath) WithIValue(value interface{}) RoleGrant_FieldPathValue {
	return &RoleGrant_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RoleGrant_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RoleGrant_FieldSubPath) WithIArrayOfValues(values interface{}) RoleGrant_FieldPathArrayOfValues {
	return &RoleGrant_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RoleGrant_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RoleGrant_FieldSubPath) WithIArrayItemValue(value interface{}) RoleGrant_FieldPathArrayItemValue {
	return &RoleGrant_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RoleGrant_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RoleGrant_FieldPathValue allows storing values for Grant fields according to their type
type RoleGrant_FieldPathValue interface {
	RoleGrant_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Role_Grant)
	CompareWith(*Role_Grant) (cmp int, comparable bool)
}

func ParseRoleGrant_FieldPathValue(pathStr, valueStr string) (RoleGrant_FieldPathValue, error) {
	fp, err := ParseRoleGrant_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Grant field path value from %s: %v", valueStr, err)
	}
	return fpv.(RoleGrant_FieldPathValue), nil
}

func MustParseRoleGrant_FieldPathValue(pathStr, valueStr string) RoleGrant_FieldPathValue {
	fpv, err := ParseRoleGrant_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RoleGrant_FieldTerminalPathValue struct {
	RoleGrant_FieldTerminalPath
	value interface{}
}

var _ RoleGrant_FieldPathValue = (*RoleGrant_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Grant' as interface{}
func (fpv *RoleGrant_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RoleGrant_FieldTerminalPathValue) AsSubScopeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RoleGrant_FieldTerminalPathValue) AsPermissionsValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}
func (fpv *RoleGrant_FieldTerminalPathValue) AsResourceFieldConditionsValue() ([]*Role_Grant_FieldCondition, bool) {
	res, ok := fpv.value.([]*Role_Grant_FieldCondition)
	return res, ok
}
func (fpv *RoleGrant_FieldTerminalPathValue) AsRequestFieldConditionsValue() ([]*Role_Grant_FieldCondition, bool) {
	res, ok := fpv.value.([]*Role_Grant_FieldCondition)
	return res, ok
}
func (fpv *RoleGrant_FieldTerminalPathValue) AsExecutableConditionsValue() ([]*condition.ExecutableCondition, bool) {
	res, ok := fpv.value.([]*condition.ExecutableCondition)
	return res, ok
}

// SetTo stores value for selected field for object Grant
func (fpv *RoleGrant_FieldTerminalPathValue) SetTo(target **Role_Grant) {
	if *target == nil {
		*target = new(Role_Grant)
	}
	switch fpv.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		(*target).SubScope = fpv.value.(string)
	case RoleGrant_FieldPathSelectorPermissions:
		(*target).Permissions = fpv.value.([]*permission.Reference)
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		(*target).ResourceFieldConditions = fpv.value.([]*Role_Grant_FieldCondition)
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		(*target).RequestFieldConditions = fpv.value.([]*Role_Grant_FieldCondition)
	case RoleGrant_FieldPathSelectorExecutableConditions:
		(*target).ExecutableConditions = fpv.value.([]*condition.ExecutableCondition)
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fpv.selector))
	}
}

func (fpv *RoleGrant_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Role_Grant)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RoleGrant_FieldTerminalPathValue' with the value under path in 'Role_Grant'.
func (fpv *RoleGrant_FieldTerminalPathValue) CompareWith(source *Role_Grant) (int, bool) {
	switch fpv.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		leftValue := fpv.value.(string)
		rightValue := source.GetSubScope()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RoleGrant_FieldPathSelectorPermissions:
		return 0, false
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return 0, false
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return 0, false
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fpv.selector))
	}
}

func (fpv *RoleGrant_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Role_Grant))
}

type RoleGrant_FieldSubPathValue struct {
	RoleGrant_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RoleGrant_FieldPathValue = (*RoleGrant_FieldSubPathValue)(nil)

func (fpvs *RoleGrant_FieldSubPathValue) AsResourceFieldConditionsPathValue() (RoleGrantFieldCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RoleGrantFieldCondition_FieldPathValue)
	return res, ok
}
func (fpvs *RoleGrant_FieldSubPathValue) AsRequestFieldConditionsPathValue() (RoleGrantFieldCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RoleGrantFieldCondition_FieldPathValue)
	return res, ok
}
func (fpvs *RoleGrant_FieldSubPathValue) AsExecutableConditionsPathValue() (condition.ExecutableCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(condition.ExecutableCondition_FieldPathValue)
	return res, ok
}

func (fpvs *RoleGrant_FieldSubPathValue) SetTo(target **Role_Grant) {
	if *target == nil {
		*target = new(Role_Grant)
	}
	switch fpvs.Selector() {
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		panic("FieldPath setter is unsupported for array subpaths")
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		panic("FieldPath setter is unsupported for array subpaths")
	case RoleGrant_FieldPathSelectorExecutableConditions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fpvs.Selector()))
	}
}

func (fpvs *RoleGrant_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Role_Grant)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RoleGrant_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RoleGrant_FieldSubPathValue) CompareWith(source *Role_Grant) (int, bool) {
	switch fpvs.Selector() {
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return 0, false // repeated field
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return 0, false // repeated field
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fpvs.Selector()))
	}
}

func (fpvs *RoleGrant_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Role_Grant))
}

// RoleGrant_FieldPathArrayItemValue allows storing single item in Path-specific values for Grant according to their type
// Present only for array (repeated) types.
type RoleGrant_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RoleGrant_FieldPath
	ContainsValue(*Role_Grant) bool
}

// ParseRoleGrant_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRoleGrant_FieldPathArrayItemValue(pathStr, valueStr string) (RoleGrant_FieldPathArrayItemValue, error) {
	fp, err := ParseRoleGrant_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Grant field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RoleGrant_FieldPathArrayItemValue), nil
}

func MustParseRoleGrant_FieldPathArrayItemValue(pathStr, valueStr string) RoleGrant_FieldPathArrayItemValue {
	fpaiv, err := ParseRoleGrant_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RoleGrant_FieldTerminalPathArrayItemValue struct {
	RoleGrant_FieldTerminalPath
	value interface{}
}

var _ RoleGrant_FieldPathArrayItemValue = (*RoleGrant_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Role_Grant as interface{}
func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) AsPermissionsItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}
func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) AsResourceFieldConditionsItemValue() (*Role_Grant_FieldCondition, bool) {
	res, ok := fpaiv.value.(*Role_Grant_FieldCondition)
	return res, ok
}
func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) AsRequestFieldConditionsItemValue() (*Role_Grant_FieldCondition, bool) {
	res, ok := fpaiv.value.(*Role_Grant_FieldCondition)
	return res, ok
}
func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) AsExecutableConditionsItemValue() (*condition.ExecutableCondition, bool) {
	res, ok := fpaiv.value.(*condition.ExecutableCondition)
	return res, ok
}

func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) GetSingle(source *Role_Grant) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Role_Grant))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Grant'
func (fpaiv *RoleGrant_FieldTerminalPathArrayItemValue) ContainsValue(source *Role_Grant) bool {
	slice := fpaiv.RoleGrant_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RoleGrant_FieldSubPathArrayItemValue struct {
	RoleGrant_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RoleGrant_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RoleGrant_FieldSubPathArrayItemValue) AsResourceFieldConditionsPathItemValue() (RoleGrantFieldCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RoleGrantFieldCondition_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RoleGrant_FieldSubPathArrayItemValue) AsRequestFieldConditionsPathItemValue() (RoleGrantFieldCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RoleGrantFieldCondition_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RoleGrant_FieldSubPathArrayItemValue) AsExecutableConditionsPathItemValue() (condition.ExecutableCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(condition.ExecutableCondition_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Grant'
func (fpaivs *RoleGrant_FieldSubPathArrayItemValue) ContainsValue(source *Role_Grant) bool {
	switch fpaivs.Selector() {
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		return false // repeated/map field
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		return false // repeated/map field
	case RoleGrant_FieldPathSelectorExecutableConditions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant: %d", fpaivs.Selector()))
	}
}

// RoleGrant_FieldPathArrayOfValues allows storing slice of values for Grant fields according to their type
type RoleGrant_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RoleGrant_FieldPath
}

func ParseRoleGrant_FieldPathArrayOfValues(pathStr, valuesStr string) (RoleGrant_FieldPathArrayOfValues, error) {
	fp, err := ParseRoleGrant_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Grant field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RoleGrant_FieldPathArrayOfValues), nil
}

func MustParseRoleGrant_FieldPathArrayOfValues(pathStr, valuesStr string) RoleGrant_FieldPathArrayOfValues {
	fpaov, err := ParseRoleGrant_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RoleGrant_FieldTerminalPathArrayOfValues struct {
	RoleGrant_FieldTerminalPath
	values interface{}
}

var _ RoleGrant_FieldPathArrayOfValues = (*RoleGrant_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RoleGrant_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RoleGrant_FieldPathSelectorSubScope:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RoleGrant_FieldPathSelectorPermissions:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	case RoleGrant_FieldPathSelectorResourceFieldConditions:
		for _, v := range fpaov.values.([][]*Role_Grant_FieldCondition) {
			values = append(values, v)
		}
	case RoleGrant_FieldPathSelectorRequestFieldConditions:
		for _, v := range fpaov.values.([][]*Role_Grant_FieldCondition) {
			values = append(values, v)
		}
	case RoleGrant_FieldPathSelectorExecutableConditions:
		for _, v := range fpaov.values.([][]*condition.ExecutableCondition) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RoleGrant_FieldTerminalPathArrayOfValues) AsSubScopeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RoleGrant_FieldTerminalPathArrayOfValues) AsPermissionsArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}
func (fpaov *RoleGrant_FieldTerminalPathArrayOfValues) AsResourceFieldConditionsArrayOfValues() ([][]*Role_Grant_FieldCondition, bool) {
	res, ok := fpaov.values.([][]*Role_Grant_FieldCondition)
	return res, ok
}
func (fpaov *RoleGrant_FieldTerminalPathArrayOfValues) AsRequestFieldConditionsArrayOfValues() ([][]*Role_Grant_FieldCondition, bool) {
	res, ok := fpaov.values.([][]*Role_Grant_FieldCondition)
	return res, ok
}
func (fpaov *RoleGrant_FieldTerminalPathArrayOfValues) AsExecutableConditionsArrayOfValues() ([][]*condition.ExecutableCondition, bool) {
	res, ok := fpaov.values.([][]*condition.ExecutableCondition)
	return res, ok
}

type RoleGrant_FieldSubPathArrayOfValues struct {
	RoleGrant_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RoleGrant_FieldPathArrayOfValues = (*RoleGrant_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RoleGrant_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RoleGrant_FieldSubPathArrayOfValues) AsResourceFieldConditionsPathArrayOfValues() (RoleGrantFieldCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RoleGrantFieldCondition_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RoleGrant_FieldSubPathArrayOfValues) AsRequestFieldConditionsPathArrayOfValues() (RoleGrantFieldCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RoleGrantFieldCondition_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RoleGrant_FieldSubPathArrayOfValues) AsExecutableConditionsPathArrayOfValues() (condition.ExecutableCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(condition.ExecutableCondition_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RoleGrantFieldCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() RoleGrantFieldCondition_FieldPathSelector
	Get(source *Role_Grant_FieldCondition) []interface{}
	GetSingle(source *Role_Grant_FieldCondition) (interface{}, bool)
	ClearValue(item *Role_Grant_FieldCondition)

	// Those methods build corresponding RoleGrantFieldCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RoleGrantFieldCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) RoleGrantFieldCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RoleGrantFieldCondition_FieldPathArrayItemValue
}

type RoleGrantFieldCondition_FieldPathSelector int32

const (
	RoleGrantFieldCondition_FieldPathSelectorPath  RoleGrantFieldCondition_FieldPathSelector = 0
	RoleGrantFieldCondition_FieldPathSelectorValue RoleGrantFieldCondition_FieldPathSelector = 1
)

func (s RoleGrantFieldCondition_FieldPathSelector) String() string {
	switch s {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		return "path"
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		return "value"
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", s))
	}
}

func BuildRoleGrantFieldCondition_FieldPath(fp gotenobject.RawFieldPath) (RoleGrantFieldCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Role_Grant_FieldCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "path":
			return &RoleGrantFieldCondition_FieldTerminalPath{selector: RoleGrantFieldCondition_FieldPathSelectorPath}, nil
		case "value":
			return &RoleGrantFieldCondition_FieldTerminalPath{selector: RoleGrantFieldCondition_FieldPathSelectorValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Role_Grant_FieldCondition", fp)
}

func ParseRoleGrantFieldCondition_FieldPath(rawField string) (RoleGrantFieldCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRoleGrantFieldCondition_FieldPath(fp)
}

func MustParseRoleGrantFieldCondition_FieldPath(rawField string) RoleGrantFieldCondition_FieldPath {
	fp, err := ParseRoleGrantFieldCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RoleGrantFieldCondition_FieldTerminalPath struct {
	selector RoleGrantFieldCondition_FieldPathSelector
}

var _ RoleGrantFieldCondition_FieldPath = (*RoleGrantFieldCondition_FieldTerminalPath)(nil)

func (fp *RoleGrantFieldCondition_FieldTerminalPath) Selector() RoleGrantFieldCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RoleGrantFieldCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RoleGrantFieldCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Role_Grant_FieldCondition
func (fp *RoleGrantFieldCondition_FieldTerminalPath) Get(source *Role_Grant_FieldCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RoleGrantFieldCondition_FieldPathSelectorPath:
			values = append(values, source.Path)
		case RoleGrantFieldCondition_FieldPathSelectorValue:
			values = append(values, source.Value)
		default:
			panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Role_Grant_FieldCondition))
}

// GetSingle returns value pointed by specific field of from source Role_Grant_FieldCondition
func (fp *RoleGrantFieldCondition_FieldTerminalPath) GetSingle(source *Role_Grant_FieldCondition) (interface{}, bool) {
	switch fp.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		return source.GetPath(), source != nil
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		return source.GetValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
	}
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Role_Grant_FieldCondition))
}

// GetDefault returns a default value of the field type
func (fp *RoleGrantFieldCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		return ""
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
	}
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) ClearValue(item *Role_Grant_FieldCondition) {
	if item != nil {
		switch fp.selector {
		case RoleGrantFieldCondition_FieldPathSelectorPath:
			item.Path = ""
		case RoleGrantFieldCondition_FieldPathSelectorValue:
			item.Value = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
		}
	}
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Role_Grant_FieldCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *RoleGrantFieldCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RoleGrantFieldCondition_FieldPathSelectorPath ||
		fp.selector == RoleGrantFieldCondition_FieldPathSelectorValue
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) WithIValue(value interface{}) RoleGrantFieldCondition_FieldPathValue {
	switch fp.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		return &RoleGrantFieldCondition_FieldTerminalPathValue{RoleGrantFieldCondition_FieldTerminalPath: *fp, value: value.(string)}
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		return &RoleGrantFieldCondition_FieldTerminalPathValue{RoleGrantFieldCondition_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
	}
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) RoleGrantFieldCondition_FieldPathArrayOfValues {
	fpaov := &RoleGrantFieldCondition_FieldTerminalPathArrayOfValues{RoleGrantFieldCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		return &RoleGrantFieldCondition_FieldTerminalPathArrayOfValues{RoleGrantFieldCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		return &RoleGrantFieldCondition_FieldTerminalPathArrayOfValues{RoleGrantFieldCondition_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) RoleGrantFieldCondition_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fp.selector))
	}
}

func (fp *RoleGrantFieldCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RoleGrantFieldCondition_FieldPathValue allows storing values for FieldCondition fields according to their type
type RoleGrantFieldCondition_FieldPathValue interface {
	RoleGrantFieldCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Role_Grant_FieldCondition)
	CompareWith(*Role_Grant_FieldCondition) (cmp int, comparable bool)
}

func ParseRoleGrantFieldCondition_FieldPathValue(pathStr, valueStr string) (RoleGrantFieldCondition_FieldPathValue, error) {
	fp, err := ParseRoleGrantFieldCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing FieldCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(RoleGrantFieldCondition_FieldPathValue), nil
}

func MustParseRoleGrantFieldCondition_FieldPathValue(pathStr, valueStr string) RoleGrantFieldCondition_FieldPathValue {
	fpv, err := ParseRoleGrantFieldCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RoleGrantFieldCondition_FieldTerminalPathValue struct {
	RoleGrantFieldCondition_FieldTerminalPath
	value interface{}
}

var _ RoleGrantFieldCondition_FieldPathValue = (*RoleGrantFieldCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'FieldCondition' as interface{}
func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) AsPathValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) AsValueValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object FieldCondition
func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) SetTo(target **Role_Grant_FieldCondition) {
	if *target == nil {
		*target = new(Role_Grant_FieldCondition)
	}
	switch fpv.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		(*target).Path = fpv.value.(string)
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		(*target).Value = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fpv.selector))
	}
}

func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Role_Grant_FieldCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RoleGrantFieldCondition_FieldTerminalPathValue' with the value under path in 'Role_Grant_FieldCondition'.
func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) CompareWith(source *Role_Grant_FieldCondition) (int, bool) {
	switch fpv.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		leftValue := fpv.value.(string)
		rightValue := source.GetPath()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		leftValue := fpv.value.(string)
		rightValue := source.GetValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Role_Grant_FieldCondition: %d", fpv.selector))
	}
}

func (fpv *RoleGrantFieldCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Role_Grant_FieldCondition))
}

// RoleGrantFieldCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for FieldCondition according to their type
// Present only for array (repeated) types.
type RoleGrantFieldCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RoleGrantFieldCondition_FieldPath
	ContainsValue(*Role_Grant_FieldCondition) bool
}

// ParseRoleGrantFieldCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRoleGrantFieldCondition_FieldPathArrayItemValue(pathStr, valueStr string) (RoleGrantFieldCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseRoleGrantFieldCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing FieldCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RoleGrantFieldCondition_FieldPathArrayItemValue), nil
}

func MustParseRoleGrantFieldCondition_FieldPathArrayItemValue(pathStr, valueStr string) RoleGrantFieldCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseRoleGrantFieldCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RoleGrantFieldCondition_FieldTerminalPathArrayItemValue struct {
	RoleGrantFieldCondition_FieldTerminalPath
	value interface{}
}

var _ RoleGrantFieldCondition_FieldPathArrayItemValue = (*RoleGrantFieldCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Role_Grant_FieldCondition as interface{}
func (fpaiv *RoleGrantFieldCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RoleGrantFieldCondition_FieldTerminalPathArrayItemValue) GetSingle(source *Role_Grant_FieldCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RoleGrantFieldCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Role_Grant_FieldCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'FieldCondition'
func (fpaiv *RoleGrantFieldCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *Role_Grant_FieldCondition) bool {
	slice := fpaiv.RoleGrantFieldCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RoleGrantFieldCondition_FieldPathArrayOfValues allows storing slice of values for FieldCondition fields according to their type
type RoleGrantFieldCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RoleGrantFieldCondition_FieldPath
}

func ParseRoleGrantFieldCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (RoleGrantFieldCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseRoleGrantFieldCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing FieldCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RoleGrantFieldCondition_FieldPathArrayOfValues), nil
}

func MustParseRoleGrantFieldCondition_FieldPathArrayOfValues(pathStr, valuesStr string) RoleGrantFieldCondition_FieldPathArrayOfValues {
	fpaov, err := ParseRoleGrantFieldCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RoleGrantFieldCondition_FieldTerminalPathArrayOfValues struct {
	RoleGrantFieldCondition_FieldTerminalPath
	values interface{}
}

var _ RoleGrantFieldCondition_FieldPathArrayOfValues = (*RoleGrantFieldCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RoleGrantFieldCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RoleGrantFieldCondition_FieldPathSelectorPath:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RoleGrantFieldCondition_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RoleGrantFieldCondition_FieldTerminalPathArrayOfValues) AsPathArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RoleGrantFieldCondition_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ScopeParam_FieldPath interface {
	gotenobject.FieldPath
	Selector() ScopeParam_FieldPathSelector
	Get(source *ScopeParam) []interface{}
	GetSingle(source *ScopeParam) (interface{}, bool)
	ClearValue(item *ScopeParam)

	// Those methods build corresponding ScopeParam_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ScopeParam_FieldPathValue
	WithIArrayOfValues(values interface{}) ScopeParam_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ScopeParam_FieldPathArrayItemValue
}

type ScopeParam_FieldPathSelector int32

const (
	ScopeParam_FieldPathSelectorName      ScopeParam_FieldPathSelector = 0
	ScopeParam_FieldPathSelectorString    ScopeParam_FieldPathSelector = 1
	ScopeParam_FieldPathSelectorStrings   ScopeParam_FieldPathSelector = 2
	ScopeParam_FieldPathSelectorValueFrom ScopeParam_FieldPathSelector = 3
)

func (s ScopeParam_FieldPathSelector) String() string {
	switch s {
	case ScopeParam_FieldPathSelectorName:
		return "name"
	case ScopeParam_FieldPathSelectorString:
		return "string"
	case ScopeParam_FieldPathSelectorStrings:
		return "strings"
	case ScopeParam_FieldPathSelectorValueFrom:
		return "value_from"
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", s))
	}
}

func BuildScopeParam_FieldPath(fp gotenobject.RawFieldPath) (ScopeParam_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ScopeParam")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorName}, nil
		case "string":
			return &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorString}, nil
		case "strings":
			return &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorStrings}, nil
		case "value_from", "valueFrom", "value-from":
			return &ScopeParam_FieldTerminalPath{selector: ScopeParam_FieldPathSelectorValueFrom}, nil
		}
	} else {
		switch fp[0] {
		case "string":
			if subpath, err := BuildScopeParamStringValue_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ScopeParam_FieldSubPath{selector: ScopeParam_FieldPathSelectorString, subPath: subpath}, nil
			}
		case "strings":
			if subpath, err := BuildScopeParamArrayOfStringsValue_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ScopeParam_FieldSubPath{selector: ScopeParam_FieldPathSelectorStrings, subPath: subpath}, nil
			}
		case "value_from", "valueFrom", "value-from":
			if subpath, err := BuildScopeParamFromValue_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ScopeParam_FieldSubPath{selector: ScopeParam_FieldPathSelectorValueFrom, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ScopeParam", fp)
}

func ParseScopeParam_FieldPath(rawField string) (ScopeParam_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildScopeParam_FieldPath(fp)
}

func MustParseScopeParam_FieldPath(rawField string) ScopeParam_FieldPath {
	fp, err := ParseScopeParam_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ScopeParam_FieldTerminalPath struct {
	selector ScopeParam_FieldPathSelector
}

var _ ScopeParam_FieldPath = (*ScopeParam_FieldTerminalPath)(nil)

func (fp *ScopeParam_FieldTerminalPath) Selector() ScopeParam_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ScopeParam_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ScopeParam_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ScopeParam
func (fp *ScopeParam_FieldTerminalPath) Get(source *ScopeParam) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ScopeParam_FieldPathSelectorName:
			values = append(values, source.Name)
		case ScopeParam_FieldPathSelectorString:
			if source, ok := source.Value.(*ScopeParam_String_); ok && source != nil {
				if source.String_ != nil {
					values = append(values, source.String_)
				}
			}
		case ScopeParam_FieldPathSelectorStrings:
			if source, ok := source.Value.(*ScopeParam_Strings); ok && source != nil {
				if source.Strings != nil {
					values = append(values, source.Strings)
				}
			}
		case ScopeParam_FieldPathSelectorValueFrom:
			if source, ok := source.Value.(*ScopeParam_ValueFrom); ok && source != nil {
				if source.ValueFrom != nil {
					values = append(values, source.ValueFrom)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
		}
	}
	return
}

func (fp *ScopeParam_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ScopeParam))
}

// GetSingle returns value pointed by specific field of from source ScopeParam
func (fp *ScopeParam_FieldTerminalPath) GetSingle(source *ScopeParam) (interface{}, bool) {
	switch fp.selector {
	case ScopeParam_FieldPathSelectorName:
		return source.GetName(), source != nil
	case ScopeParam_FieldPathSelectorString:
		res := source.GetString_()
		return res, res != nil
	case ScopeParam_FieldPathSelectorStrings:
		res := source.GetStrings()
		return res, res != nil
	case ScopeParam_FieldPathSelectorValueFrom:
		res := source.GetValueFrom()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
	}
}

func (fp *ScopeParam_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ScopeParam))
}

// GetDefault returns a default value of the field type
func (fp *ScopeParam_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ScopeParam_FieldPathSelectorName:
		return ""
	case ScopeParam_FieldPathSelectorString:
		return (*ScopeParam_StringValue)(nil)
	case ScopeParam_FieldPathSelectorStrings:
		return (*ScopeParam_ArrayOfStringsValue)(nil)
	case ScopeParam_FieldPathSelectorValueFrom:
		return (*ScopeParam_FromValue)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
	}
}

func (fp *ScopeParam_FieldTerminalPath) ClearValue(item *ScopeParam) {
	if item != nil {
		switch fp.selector {
		case ScopeParam_FieldPathSelectorName:
			item.Name = ""
		case ScopeParam_FieldPathSelectorString:
			if item, ok := item.Value.(*ScopeParam_String_); ok {
				item.String_ = nil
			}
		case ScopeParam_FieldPathSelectorStrings:
			if item, ok := item.Value.(*ScopeParam_Strings); ok {
				item.Strings = nil
			}
		case ScopeParam_FieldPathSelectorValueFrom:
			if item, ok := item.Value.(*ScopeParam_ValueFrom); ok {
				item.ValueFrom = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
		}
	}
}

func (fp *ScopeParam_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ScopeParam))
}

// IsLeaf - whether field path is holds simple value
func (fp *ScopeParam_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ScopeParam_FieldPathSelectorName
}

func (fp *ScopeParam_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ScopeParam_FieldTerminalPath) WithIValue(value interface{}) ScopeParam_FieldPathValue {
	switch fp.selector {
	case ScopeParam_FieldPathSelectorName:
		return &ScopeParam_FieldTerminalPathValue{ScopeParam_FieldTerminalPath: *fp, value: value.(string)}
	case ScopeParam_FieldPathSelectorString:
		return &ScopeParam_FieldTerminalPathValue{ScopeParam_FieldTerminalPath: *fp, value: value.(*ScopeParam_StringValue)}
	case ScopeParam_FieldPathSelectorStrings:
		return &ScopeParam_FieldTerminalPathValue{ScopeParam_FieldTerminalPath: *fp, value: value.(*ScopeParam_ArrayOfStringsValue)}
	case ScopeParam_FieldPathSelectorValueFrom:
		return &ScopeParam_FieldTerminalPathValue{ScopeParam_FieldTerminalPath: *fp, value: value.(*ScopeParam_FromValue)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
	}
}

func (fp *ScopeParam_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ScopeParam_FieldTerminalPath) WithIArrayOfValues(values interface{}) ScopeParam_FieldPathArrayOfValues {
	fpaov := &ScopeParam_FieldTerminalPathArrayOfValues{ScopeParam_FieldTerminalPath: *fp}
	switch fp.selector {
	case ScopeParam_FieldPathSelectorName:
		return &ScopeParam_FieldTerminalPathArrayOfValues{ScopeParam_FieldTerminalPath: *fp, values: values.([]string)}
	case ScopeParam_FieldPathSelectorString:
		return &ScopeParam_FieldTerminalPathArrayOfValues{ScopeParam_FieldTerminalPath: *fp, values: values.([]*ScopeParam_StringValue)}
	case ScopeParam_FieldPathSelectorStrings:
		return &ScopeParam_FieldTerminalPathArrayOfValues{ScopeParam_FieldTerminalPath: *fp, values: values.([]*ScopeParam_ArrayOfStringsValue)}
	case ScopeParam_FieldPathSelectorValueFrom:
		return &ScopeParam_FieldTerminalPathArrayOfValues{ScopeParam_FieldTerminalPath: *fp, values: values.([]*ScopeParam_FromValue)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
	}
	return fpaov
}

func (fp *ScopeParam_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ScopeParam_FieldTerminalPath) WithIArrayItemValue(value interface{}) ScopeParam_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fp.selector))
	}
}

func (fp *ScopeParam_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ScopeParam_FieldSubPath struct {
	selector ScopeParam_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ScopeParam_FieldPath = (*ScopeParam_FieldSubPath)(nil)

func (fps *ScopeParam_FieldSubPath) Selector() ScopeParam_FieldPathSelector {
	return fps.selector
}
func (fps *ScopeParam_FieldSubPath) AsStringSubPath() (ScopeParamStringValue_FieldPath, bool) {
	res, ok := fps.subPath.(ScopeParamStringValue_FieldPath)
	return res, ok
}
func (fps *ScopeParam_FieldSubPath) AsStringsSubPath() (ScopeParamArrayOfStringsValue_FieldPath, bool) {
	res, ok := fps.subPath.(ScopeParamArrayOfStringsValue_FieldPath)
	return res, ok
}
func (fps *ScopeParam_FieldSubPath) AsValueFromSubPath() (ScopeParamFromValue_FieldPath, bool) {
	res, ok := fps.subPath.(ScopeParamFromValue_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ScopeParam_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ScopeParam_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ScopeParam
func (fps *ScopeParam_FieldSubPath) Get(source *ScopeParam) (values []interface{}) {
	switch fps.selector {
	case ScopeParam_FieldPathSelectorString:
		values = append(values, fps.subPath.GetRaw(source.GetString_())...)
	case ScopeParam_FieldPathSelectorStrings:
		values = append(values, fps.subPath.GetRaw(source.GetStrings())...)
	case ScopeParam_FieldPathSelectorValueFrom:
		values = append(values, fps.subPath.GetRaw(source.GetValueFrom())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fps.selector))
	}
	return
}

func (fps *ScopeParam_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ScopeParam))
}

// GetSingle returns value of selected field from source ScopeParam
func (fps *ScopeParam_FieldSubPath) GetSingle(source *ScopeParam) (interface{}, bool) {
	switch fps.selector {
	case ScopeParam_FieldPathSelectorString:
		if source.GetString_() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetString_())
	case ScopeParam_FieldPathSelectorStrings:
		if source.GetStrings() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStrings())
	case ScopeParam_FieldPathSelectorValueFrom:
		if source.GetValueFrom() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetValueFrom())
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fps.selector))
	}
}

func (fps *ScopeParam_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ScopeParam))
}

// GetDefault returns a default value of the field type
func (fps *ScopeParam_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ScopeParam_FieldSubPath) ClearValue(item *ScopeParam) {
	if item != nil {
		switch fps.selector {
		case ScopeParam_FieldPathSelectorString:
			if item.Value != nil {
				if item, ok := item.Value.(*ScopeParam_String_); ok {
					fps.subPath.ClearValueRaw(item.String_)
				}
			}
		case ScopeParam_FieldPathSelectorStrings:
			if item.Value != nil {
				if item, ok := item.Value.(*ScopeParam_Strings); ok {
					fps.subPath.ClearValueRaw(item.Strings)
				}
			}
		case ScopeParam_FieldPathSelectorValueFrom:
			if item.Value != nil {
				if item, ok := item.Value.(*ScopeParam_ValueFrom); ok {
					fps.subPath.ClearValueRaw(item.ValueFrom)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fps.selector))
		}
	}
}

func (fps *ScopeParam_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ScopeParam))
}

// IsLeaf - whether field path is holds simple value
func (fps *ScopeParam_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ScopeParam_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ScopeParam_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ScopeParam_FieldSubPath) WithIValue(value interface{}) ScopeParam_FieldPathValue {
	return &ScopeParam_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ScopeParam_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ScopeParam_FieldSubPath) WithIArrayOfValues(values interface{}) ScopeParam_FieldPathArrayOfValues {
	return &ScopeParam_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ScopeParam_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ScopeParam_FieldSubPath) WithIArrayItemValue(value interface{}) ScopeParam_FieldPathArrayItemValue {
	return &ScopeParam_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ScopeParam_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ScopeParam_FieldPathValue allows storing values for ScopeParam fields according to their type
type ScopeParam_FieldPathValue interface {
	ScopeParam_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ScopeParam)
	CompareWith(*ScopeParam) (cmp int, comparable bool)
}

func ParseScopeParam_FieldPathValue(pathStr, valueStr string) (ScopeParam_FieldPathValue, error) {
	fp, err := ParseScopeParam_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ScopeParam field path value from %s: %v", valueStr, err)
	}
	return fpv.(ScopeParam_FieldPathValue), nil
}

func MustParseScopeParam_FieldPathValue(pathStr, valueStr string) ScopeParam_FieldPathValue {
	fpv, err := ParseScopeParam_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ScopeParam_FieldTerminalPathValue struct {
	ScopeParam_FieldTerminalPath
	value interface{}
}

var _ ScopeParam_FieldPathValue = (*ScopeParam_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ScopeParam' as interface{}
func (fpv *ScopeParam_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ScopeParam_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ScopeParam_FieldTerminalPathValue) AsStringValue() (*ScopeParam_StringValue, bool) {
	res, ok := fpv.value.(*ScopeParam_StringValue)
	return res, ok
}
func (fpv *ScopeParam_FieldTerminalPathValue) AsStringsValue() (*ScopeParam_ArrayOfStringsValue, bool) {
	res, ok := fpv.value.(*ScopeParam_ArrayOfStringsValue)
	return res, ok
}
func (fpv *ScopeParam_FieldTerminalPathValue) AsValueFromValue() (*ScopeParam_FromValue, bool) {
	res, ok := fpv.value.(*ScopeParam_FromValue)
	return res, ok
}

// SetTo stores value for selected field for object ScopeParam
func (fpv *ScopeParam_FieldTerminalPathValue) SetTo(target **ScopeParam) {
	if *target == nil {
		*target = new(ScopeParam)
	}
	switch fpv.selector {
	case ScopeParam_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case ScopeParam_FieldPathSelectorString:
		if _, ok := (*target).Value.(*ScopeParam_String_); !ok {
			(*target).Value = &ScopeParam_String_{}
		}
		(*target).Value.(*ScopeParam_String_).String_ = fpv.value.(*ScopeParam_StringValue)
	case ScopeParam_FieldPathSelectorStrings:
		if _, ok := (*target).Value.(*ScopeParam_Strings); !ok {
			(*target).Value = &ScopeParam_Strings{}
		}
		(*target).Value.(*ScopeParam_Strings).Strings = fpv.value.(*ScopeParam_ArrayOfStringsValue)
	case ScopeParam_FieldPathSelectorValueFrom:
		if _, ok := (*target).Value.(*ScopeParam_ValueFrom); !ok {
			(*target).Value = &ScopeParam_ValueFrom{}
		}
		(*target).Value.(*ScopeParam_ValueFrom).ValueFrom = fpv.value.(*ScopeParam_FromValue)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fpv.selector))
	}
}

func (fpv *ScopeParam_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ScopeParam)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ScopeParam_FieldTerminalPathValue' with the value under path in 'ScopeParam'.
func (fpv *ScopeParam_FieldTerminalPathValue) CompareWith(source *ScopeParam) (int, bool) {
	switch fpv.selector {
	case ScopeParam_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ScopeParam_FieldPathSelectorString:
		return 0, false
	case ScopeParam_FieldPathSelectorStrings:
		return 0, false
	case ScopeParam_FieldPathSelectorValueFrom:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fpv.selector))
	}
}

func (fpv *ScopeParam_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ScopeParam))
}

type ScopeParam_FieldSubPathValue struct {
	ScopeParam_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ScopeParam_FieldPathValue = (*ScopeParam_FieldSubPathValue)(nil)

func (fpvs *ScopeParam_FieldSubPathValue) AsStringPathValue() (ScopeParamStringValue_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ScopeParamStringValue_FieldPathValue)
	return res, ok
}
func (fpvs *ScopeParam_FieldSubPathValue) AsStringsPathValue() (ScopeParamArrayOfStringsValue_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ScopeParamArrayOfStringsValue_FieldPathValue)
	return res, ok
}
func (fpvs *ScopeParam_FieldSubPathValue) AsValueFromPathValue() (ScopeParamFromValue_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ScopeParamFromValue_FieldPathValue)
	return res, ok
}

func (fpvs *ScopeParam_FieldSubPathValue) SetTo(target **ScopeParam) {
	if *target == nil {
		*target = new(ScopeParam)
	}
	switch fpvs.Selector() {
	case ScopeParam_FieldPathSelectorString:
		if _, ok := (*target).Value.(*ScopeParam_String_); !ok {
			(*target).Value = &ScopeParam_String_{}
		}
		fpvs.subPathValue.(ScopeParamStringValue_FieldPathValue).SetTo(&(*target).Value.(*ScopeParam_String_).String_)
	case ScopeParam_FieldPathSelectorStrings:
		if _, ok := (*target).Value.(*ScopeParam_Strings); !ok {
			(*target).Value = &ScopeParam_Strings{}
		}
		fpvs.subPathValue.(ScopeParamArrayOfStringsValue_FieldPathValue).SetTo(&(*target).Value.(*ScopeParam_Strings).Strings)
	case ScopeParam_FieldPathSelectorValueFrom:
		if _, ok := (*target).Value.(*ScopeParam_ValueFrom); !ok {
			(*target).Value = &ScopeParam_ValueFrom{}
		}
		fpvs.subPathValue.(ScopeParamFromValue_FieldPathValue).SetTo(&(*target).Value.(*ScopeParam_ValueFrom).ValueFrom)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fpvs.Selector()))
	}
}

func (fpvs *ScopeParam_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ScopeParam)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ScopeParam_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ScopeParam_FieldSubPathValue) CompareWith(source *ScopeParam) (int, bool) {
	switch fpvs.Selector() {
	case ScopeParam_FieldPathSelectorString:
		return fpvs.subPathValue.(ScopeParamStringValue_FieldPathValue).CompareWith(source.GetString_())
	case ScopeParam_FieldPathSelectorStrings:
		return fpvs.subPathValue.(ScopeParamArrayOfStringsValue_FieldPathValue).CompareWith(source.GetStrings())
	case ScopeParam_FieldPathSelectorValueFrom:
		return fpvs.subPathValue.(ScopeParamFromValue_FieldPathValue).CompareWith(source.GetValueFrom())
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fpvs.Selector()))
	}
}

func (fpvs *ScopeParam_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ScopeParam))
}

// ScopeParam_FieldPathArrayItemValue allows storing single item in Path-specific values for ScopeParam according to their type
// Present only for array (repeated) types.
type ScopeParam_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ScopeParam_FieldPath
	ContainsValue(*ScopeParam) bool
}

// ParseScopeParam_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseScopeParam_FieldPathArrayItemValue(pathStr, valueStr string) (ScopeParam_FieldPathArrayItemValue, error) {
	fp, err := ParseScopeParam_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ScopeParam field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ScopeParam_FieldPathArrayItemValue), nil
}

func MustParseScopeParam_FieldPathArrayItemValue(pathStr, valueStr string) ScopeParam_FieldPathArrayItemValue {
	fpaiv, err := ParseScopeParam_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ScopeParam_FieldTerminalPathArrayItemValue struct {
	ScopeParam_FieldTerminalPath
	value interface{}
}

var _ ScopeParam_FieldPathArrayItemValue = (*ScopeParam_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ScopeParam as interface{}
func (fpaiv *ScopeParam_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ScopeParam_FieldTerminalPathArrayItemValue) GetSingle(source *ScopeParam) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ScopeParam_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ScopeParam))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ScopeParam'
func (fpaiv *ScopeParam_FieldTerminalPathArrayItemValue) ContainsValue(source *ScopeParam) bool {
	slice := fpaiv.ScopeParam_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ScopeParam_FieldSubPathArrayItemValue struct {
	ScopeParam_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ScopeParam_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ScopeParam_FieldSubPathArrayItemValue) AsStringPathItemValue() (ScopeParamStringValue_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ScopeParamStringValue_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ScopeParam_FieldSubPathArrayItemValue) AsStringsPathItemValue() (ScopeParamArrayOfStringsValue_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ScopeParamArrayOfStringsValue_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ScopeParam_FieldSubPathArrayItemValue) AsValueFromPathItemValue() (ScopeParamFromValue_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ScopeParamFromValue_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ScopeParam'
func (fpaivs *ScopeParam_FieldSubPathArrayItemValue) ContainsValue(source *ScopeParam) bool {
	switch fpaivs.Selector() {
	case ScopeParam_FieldPathSelectorString:
		return fpaivs.subPathItemValue.(ScopeParamStringValue_FieldPathArrayItemValue).ContainsValue(source.GetString_())
	case ScopeParam_FieldPathSelectorStrings:
		return fpaivs.subPathItemValue.(ScopeParamArrayOfStringsValue_FieldPathArrayItemValue).ContainsValue(source.GetStrings())
	case ScopeParam_FieldPathSelectorValueFrom:
		return fpaivs.subPathItemValue.(ScopeParamFromValue_FieldPathArrayItemValue).ContainsValue(source.GetValueFrom())
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam: %d", fpaivs.Selector()))
	}
}

// ScopeParam_FieldPathArrayOfValues allows storing slice of values for ScopeParam fields according to their type
type ScopeParam_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ScopeParam_FieldPath
}

func ParseScopeParam_FieldPathArrayOfValues(pathStr, valuesStr string) (ScopeParam_FieldPathArrayOfValues, error) {
	fp, err := ParseScopeParam_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ScopeParam field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ScopeParam_FieldPathArrayOfValues), nil
}

func MustParseScopeParam_FieldPathArrayOfValues(pathStr, valuesStr string) ScopeParam_FieldPathArrayOfValues {
	fpaov, err := ParseScopeParam_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ScopeParam_FieldTerminalPathArrayOfValues struct {
	ScopeParam_FieldTerminalPath
	values interface{}
}

var _ ScopeParam_FieldPathArrayOfValues = (*ScopeParam_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ScopeParam_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ScopeParam_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ScopeParam_FieldPathSelectorString:
		for _, v := range fpaov.values.([]*ScopeParam_StringValue) {
			values = append(values, v)
		}
	case ScopeParam_FieldPathSelectorStrings:
		for _, v := range fpaov.values.([]*ScopeParam_ArrayOfStringsValue) {
			values = append(values, v)
		}
	case ScopeParam_FieldPathSelectorValueFrom:
		for _, v := range fpaov.values.([]*ScopeParam_FromValue) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ScopeParam_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ScopeParam_FieldTerminalPathArrayOfValues) AsStringArrayOfValues() ([]*ScopeParam_StringValue, bool) {
	res, ok := fpaov.values.([]*ScopeParam_StringValue)
	return res, ok
}
func (fpaov *ScopeParam_FieldTerminalPathArrayOfValues) AsStringsArrayOfValues() ([]*ScopeParam_ArrayOfStringsValue, bool) {
	res, ok := fpaov.values.([]*ScopeParam_ArrayOfStringsValue)
	return res, ok
}
func (fpaov *ScopeParam_FieldTerminalPathArrayOfValues) AsValueFromArrayOfValues() ([]*ScopeParam_FromValue, bool) {
	res, ok := fpaov.values.([]*ScopeParam_FromValue)
	return res, ok
}

type ScopeParam_FieldSubPathArrayOfValues struct {
	ScopeParam_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ScopeParam_FieldPathArrayOfValues = (*ScopeParam_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ScopeParam_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ScopeParam_FieldSubPathArrayOfValues) AsStringPathArrayOfValues() (ScopeParamStringValue_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ScopeParamStringValue_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ScopeParam_FieldSubPathArrayOfValues) AsStringsPathArrayOfValues() (ScopeParamArrayOfStringsValue_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ScopeParamArrayOfStringsValue_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ScopeParam_FieldSubPathArrayOfValues) AsValueFromPathArrayOfValues() (ScopeParamFromValue_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ScopeParamFromValue_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ScopeParamStringValue_FieldPath interface {
	gotenobject.FieldPath
	Selector() ScopeParamStringValue_FieldPathSelector
	Get(source *ScopeParam_StringValue) []interface{}
	GetSingle(source *ScopeParam_StringValue) (interface{}, bool)
	ClearValue(item *ScopeParam_StringValue)

	// Those methods build corresponding ScopeParamStringValue_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ScopeParamStringValue_FieldPathValue
	WithIArrayOfValues(values interface{}) ScopeParamStringValue_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ScopeParamStringValue_FieldPathArrayItemValue
}

type ScopeParamStringValue_FieldPathSelector int32

const (
	ScopeParamStringValue_FieldPathSelectorValue ScopeParamStringValue_FieldPathSelector = 0
)

func (s ScopeParamStringValue_FieldPathSelector) String() string {
	switch s {
	case ScopeParamStringValue_FieldPathSelectorValue:
		return "value"
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", s))
	}
}

func BuildScopeParamStringValue_FieldPath(fp gotenobject.RawFieldPath) (ScopeParamStringValue_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ScopeParam_StringValue")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "value":
			return &ScopeParamStringValue_FieldTerminalPath{selector: ScopeParamStringValue_FieldPathSelectorValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ScopeParam_StringValue", fp)
}

func ParseScopeParamStringValue_FieldPath(rawField string) (ScopeParamStringValue_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildScopeParamStringValue_FieldPath(fp)
}

func MustParseScopeParamStringValue_FieldPath(rawField string) ScopeParamStringValue_FieldPath {
	fp, err := ParseScopeParamStringValue_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ScopeParamStringValue_FieldTerminalPath struct {
	selector ScopeParamStringValue_FieldPathSelector
}

var _ ScopeParamStringValue_FieldPath = (*ScopeParamStringValue_FieldTerminalPath)(nil)

func (fp *ScopeParamStringValue_FieldTerminalPath) Selector() ScopeParamStringValue_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ScopeParamStringValue_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ScopeParamStringValue_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ScopeParam_StringValue
func (fp *ScopeParamStringValue_FieldTerminalPath) Get(source *ScopeParam_StringValue) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ScopeParamStringValue_FieldPathSelectorValue:
			values = append(values, source.Value)
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
		}
	}
	return
}

func (fp *ScopeParamStringValue_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ScopeParam_StringValue))
}

// GetSingle returns value pointed by specific field of from source ScopeParam_StringValue
func (fp *ScopeParamStringValue_FieldTerminalPath) GetSingle(source *ScopeParam_StringValue) (interface{}, bool) {
	switch fp.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		return source.GetValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
	}
}

func (fp *ScopeParamStringValue_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ScopeParam_StringValue))
}

// GetDefault returns a default value of the field type
func (fp *ScopeParamStringValue_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
	}
}

func (fp *ScopeParamStringValue_FieldTerminalPath) ClearValue(item *ScopeParam_StringValue) {
	if item != nil {
		switch fp.selector {
		case ScopeParamStringValue_FieldPathSelectorValue:
			item.Value = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
		}
	}
}

func (fp *ScopeParamStringValue_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ScopeParam_StringValue))
}

// IsLeaf - whether field path is holds simple value
func (fp *ScopeParamStringValue_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ScopeParamStringValue_FieldPathSelectorValue
}

func (fp *ScopeParamStringValue_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ScopeParamStringValue_FieldTerminalPath) WithIValue(value interface{}) ScopeParamStringValue_FieldPathValue {
	switch fp.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		return &ScopeParamStringValue_FieldTerminalPathValue{ScopeParamStringValue_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
	}
}

func (fp *ScopeParamStringValue_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ScopeParamStringValue_FieldTerminalPath) WithIArrayOfValues(values interface{}) ScopeParamStringValue_FieldPathArrayOfValues {
	fpaov := &ScopeParamStringValue_FieldTerminalPathArrayOfValues{ScopeParamStringValue_FieldTerminalPath: *fp}
	switch fp.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		return &ScopeParamStringValue_FieldTerminalPathArrayOfValues{ScopeParamStringValue_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
	}
	return fpaov
}

func (fp *ScopeParamStringValue_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ScopeParamStringValue_FieldTerminalPath) WithIArrayItemValue(value interface{}) ScopeParamStringValue_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fp.selector))
	}
}

func (fp *ScopeParamStringValue_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ScopeParamStringValue_FieldPathValue allows storing values for StringValue fields according to their type
type ScopeParamStringValue_FieldPathValue interface {
	ScopeParamStringValue_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ScopeParam_StringValue)
	CompareWith(*ScopeParam_StringValue) (cmp int, comparable bool)
}

func ParseScopeParamStringValue_FieldPathValue(pathStr, valueStr string) (ScopeParamStringValue_FieldPathValue, error) {
	fp, err := ParseScopeParamStringValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StringValue field path value from %s: %v", valueStr, err)
	}
	return fpv.(ScopeParamStringValue_FieldPathValue), nil
}

func MustParseScopeParamStringValue_FieldPathValue(pathStr, valueStr string) ScopeParamStringValue_FieldPathValue {
	fpv, err := ParseScopeParamStringValue_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ScopeParamStringValue_FieldTerminalPathValue struct {
	ScopeParamStringValue_FieldTerminalPath
	value interface{}
}

var _ ScopeParamStringValue_FieldPathValue = (*ScopeParamStringValue_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'StringValue' as interface{}
func (fpv *ScopeParamStringValue_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ScopeParamStringValue_FieldTerminalPathValue) AsValueValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object StringValue
func (fpv *ScopeParamStringValue_FieldTerminalPathValue) SetTo(target **ScopeParam_StringValue) {
	if *target == nil {
		*target = new(ScopeParam_StringValue)
	}
	switch fpv.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		(*target).Value = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fpv.selector))
	}
}

func (fpv *ScopeParamStringValue_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ScopeParam_StringValue)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ScopeParamStringValue_FieldTerminalPathValue' with the value under path in 'ScopeParam_StringValue'.
func (fpv *ScopeParamStringValue_FieldTerminalPathValue) CompareWith(source *ScopeParam_StringValue) (int, bool) {
	switch fpv.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		leftValue := fpv.value.(string)
		rightValue := source.GetValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_StringValue: %d", fpv.selector))
	}
}

func (fpv *ScopeParamStringValue_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ScopeParam_StringValue))
}

// ScopeParamStringValue_FieldPathArrayItemValue allows storing single item in Path-specific values for StringValue according to their type
// Present only for array (repeated) types.
type ScopeParamStringValue_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ScopeParamStringValue_FieldPath
	ContainsValue(*ScopeParam_StringValue) bool
}

// ParseScopeParamStringValue_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseScopeParamStringValue_FieldPathArrayItemValue(pathStr, valueStr string) (ScopeParamStringValue_FieldPathArrayItemValue, error) {
	fp, err := ParseScopeParamStringValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StringValue field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ScopeParamStringValue_FieldPathArrayItemValue), nil
}

func MustParseScopeParamStringValue_FieldPathArrayItemValue(pathStr, valueStr string) ScopeParamStringValue_FieldPathArrayItemValue {
	fpaiv, err := ParseScopeParamStringValue_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ScopeParamStringValue_FieldTerminalPathArrayItemValue struct {
	ScopeParamStringValue_FieldTerminalPath
	value interface{}
}

var _ ScopeParamStringValue_FieldPathArrayItemValue = (*ScopeParamStringValue_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ScopeParam_StringValue as interface{}
func (fpaiv *ScopeParamStringValue_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ScopeParamStringValue_FieldTerminalPathArrayItemValue) GetSingle(source *ScopeParam_StringValue) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ScopeParamStringValue_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ScopeParam_StringValue))
}

// Contains returns a boolean indicating if value that is being held is present in given 'StringValue'
func (fpaiv *ScopeParamStringValue_FieldTerminalPathArrayItemValue) ContainsValue(source *ScopeParam_StringValue) bool {
	slice := fpaiv.ScopeParamStringValue_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ScopeParamStringValue_FieldPathArrayOfValues allows storing slice of values for StringValue fields according to their type
type ScopeParamStringValue_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ScopeParamStringValue_FieldPath
}

func ParseScopeParamStringValue_FieldPathArrayOfValues(pathStr, valuesStr string) (ScopeParamStringValue_FieldPathArrayOfValues, error) {
	fp, err := ParseScopeParamStringValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StringValue field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ScopeParamStringValue_FieldPathArrayOfValues), nil
}

func MustParseScopeParamStringValue_FieldPathArrayOfValues(pathStr, valuesStr string) ScopeParamStringValue_FieldPathArrayOfValues {
	fpaov, err := ParseScopeParamStringValue_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ScopeParamStringValue_FieldTerminalPathArrayOfValues struct {
	ScopeParamStringValue_FieldTerminalPath
	values interface{}
}

var _ ScopeParamStringValue_FieldPathArrayOfValues = (*ScopeParamStringValue_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ScopeParamStringValue_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ScopeParamStringValue_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ScopeParamStringValue_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ScopeParamArrayOfStringsValue_FieldPath interface {
	gotenobject.FieldPath
	Selector() ScopeParamArrayOfStringsValue_FieldPathSelector
	Get(source *ScopeParam_ArrayOfStringsValue) []interface{}
	GetSingle(source *ScopeParam_ArrayOfStringsValue) (interface{}, bool)
	ClearValue(item *ScopeParam_ArrayOfStringsValue)

	// Those methods build corresponding ScopeParamArrayOfStringsValue_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ScopeParamArrayOfStringsValue_FieldPathValue
	WithIArrayOfValues(values interface{}) ScopeParamArrayOfStringsValue_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ScopeParamArrayOfStringsValue_FieldPathArrayItemValue
}

type ScopeParamArrayOfStringsValue_FieldPathSelector int32

const (
	ScopeParamArrayOfStringsValue_FieldPathSelectorValues ScopeParamArrayOfStringsValue_FieldPathSelector = 0
)

func (s ScopeParamArrayOfStringsValue_FieldPathSelector) String() string {
	switch s {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		return "values"
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", s))
	}
}

func BuildScopeParamArrayOfStringsValue_FieldPath(fp gotenobject.RawFieldPath) (ScopeParamArrayOfStringsValue_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ScopeParam_ArrayOfStringsValue")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "values":
			return &ScopeParamArrayOfStringsValue_FieldTerminalPath{selector: ScopeParamArrayOfStringsValue_FieldPathSelectorValues}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ScopeParam_ArrayOfStringsValue", fp)
}

func ParseScopeParamArrayOfStringsValue_FieldPath(rawField string) (ScopeParamArrayOfStringsValue_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildScopeParamArrayOfStringsValue_FieldPath(fp)
}

func MustParseScopeParamArrayOfStringsValue_FieldPath(rawField string) ScopeParamArrayOfStringsValue_FieldPath {
	fp, err := ParseScopeParamArrayOfStringsValue_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ScopeParamArrayOfStringsValue_FieldTerminalPath struct {
	selector ScopeParamArrayOfStringsValue_FieldPathSelector
}

var _ ScopeParamArrayOfStringsValue_FieldPath = (*ScopeParamArrayOfStringsValue_FieldTerminalPath)(nil)

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) Selector() ScopeParamArrayOfStringsValue_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ScopeParam_ArrayOfStringsValue
func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) Get(source *ScopeParam_ArrayOfStringsValue) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
			for _, value := range source.GetValues() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
		}
	}
	return
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ScopeParam_ArrayOfStringsValue))
}

// GetSingle returns value pointed by specific field of from source ScopeParam_ArrayOfStringsValue
func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) GetSingle(source *ScopeParam_ArrayOfStringsValue) (interface{}, bool) {
	switch fp.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		res := source.GetValues()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
	}
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ScopeParam_ArrayOfStringsValue))
}

// GetDefault returns a default value of the field type
func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
	}
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) ClearValue(item *ScopeParam_ArrayOfStringsValue) {
	if item != nil {
		switch fp.selector {
		case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
			item.Values = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
		}
	}
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ScopeParam_ArrayOfStringsValue))
}

// IsLeaf - whether field path is holds simple value
func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ScopeParamArrayOfStringsValue_FieldPathSelectorValues
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) WithIValue(value interface{}) ScopeParamArrayOfStringsValue_FieldPathValue {
	switch fp.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		return &ScopeParamArrayOfStringsValue_FieldTerminalPathValue{ScopeParamArrayOfStringsValue_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
	}
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) WithIArrayOfValues(values interface{}) ScopeParamArrayOfStringsValue_FieldPathArrayOfValues {
	fpaov := &ScopeParamArrayOfStringsValue_FieldTerminalPathArrayOfValues{ScopeParamArrayOfStringsValue_FieldTerminalPath: *fp}
	switch fp.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		return &ScopeParamArrayOfStringsValue_FieldTerminalPathArrayOfValues{ScopeParamArrayOfStringsValue_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
	}
	return fpaov
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) WithIArrayItemValue(value interface{}) ScopeParamArrayOfStringsValue_FieldPathArrayItemValue {
	switch fp.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		return &ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue{ScopeParamArrayOfStringsValue_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fp.selector))
	}
}

func (fp *ScopeParamArrayOfStringsValue_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ScopeParamArrayOfStringsValue_FieldPathValue allows storing values for ArrayOfStringsValue fields according to their type
type ScopeParamArrayOfStringsValue_FieldPathValue interface {
	ScopeParamArrayOfStringsValue_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ScopeParam_ArrayOfStringsValue)
	CompareWith(*ScopeParam_ArrayOfStringsValue) (cmp int, comparable bool)
}

func ParseScopeParamArrayOfStringsValue_FieldPathValue(pathStr, valueStr string) (ScopeParamArrayOfStringsValue_FieldPathValue, error) {
	fp, err := ParseScopeParamArrayOfStringsValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ArrayOfStringsValue field path value from %s: %v", valueStr, err)
	}
	return fpv.(ScopeParamArrayOfStringsValue_FieldPathValue), nil
}

func MustParseScopeParamArrayOfStringsValue_FieldPathValue(pathStr, valueStr string) ScopeParamArrayOfStringsValue_FieldPathValue {
	fpv, err := ParseScopeParamArrayOfStringsValue_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ScopeParamArrayOfStringsValue_FieldTerminalPathValue struct {
	ScopeParamArrayOfStringsValue_FieldTerminalPath
	value interface{}
}

var _ ScopeParamArrayOfStringsValue_FieldPathValue = (*ScopeParamArrayOfStringsValue_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ArrayOfStringsValue' as interface{}
func (fpv *ScopeParamArrayOfStringsValue_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ScopeParamArrayOfStringsValue_FieldTerminalPathValue) AsValuesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object ArrayOfStringsValue
func (fpv *ScopeParamArrayOfStringsValue_FieldTerminalPathValue) SetTo(target **ScopeParam_ArrayOfStringsValue) {
	if *target == nil {
		*target = new(ScopeParam_ArrayOfStringsValue)
	}
	switch fpv.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		(*target).Values = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fpv.selector))
	}
}

func (fpv *ScopeParamArrayOfStringsValue_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ScopeParam_ArrayOfStringsValue)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ScopeParamArrayOfStringsValue_FieldTerminalPathValue' with the value under path in 'ScopeParam_ArrayOfStringsValue'.
func (fpv *ScopeParamArrayOfStringsValue_FieldTerminalPathValue) CompareWith(source *ScopeParam_ArrayOfStringsValue) (int, bool) {
	switch fpv.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_ArrayOfStringsValue: %d", fpv.selector))
	}
}

func (fpv *ScopeParamArrayOfStringsValue_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ScopeParam_ArrayOfStringsValue))
}

// ScopeParamArrayOfStringsValue_FieldPathArrayItemValue allows storing single item in Path-specific values for ArrayOfStringsValue according to their type
// Present only for array (repeated) types.
type ScopeParamArrayOfStringsValue_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ScopeParamArrayOfStringsValue_FieldPath
	ContainsValue(*ScopeParam_ArrayOfStringsValue) bool
}

// ParseScopeParamArrayOfStringsValue_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseScopeParamArrayOfStringsValue_FieldPathArrayItemValue(pathStr, valueStr string) (ScopeParamArrayOfStringsValue_FieldPathArrayItemValue, error) {
	fp, err := ParseScopeParamArrayOfStringsValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ArrayOfStringsValue field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ScopeParamArrayOfStringsValue_FieldPathArrayItemValue), nil
}

func MustParseScopeParamArrayOfStringsValue_FieldPathArrayItemValue(pathStr, valueStr string) ScopeParamArrayOfStringsValue_FieldPathArrayItemValue {
	fpaiv, err := ParseScopeParamArrayOfStringsValue_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue struct {
	ScopeParamArrayOfStringsValue_FieldTerminalPath
	value interface{}
}

var _ ScopeParamArrayOfStringsValue_FieldPathArrayItemValue = (*ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ScopeParam_ArrayOfStringsValue as interface{}
func (fpaiv *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue) AsValuesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue) GetSingle(source *ScopeParam_ArrayOfStringsValue) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ScopeParam_ArrayOfStringsValue))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ArrayOfStringsValue'
func (fpaiv *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayItemValue) ContainsValue(source *ScopeParam_ArrayOfStringsValue) bool {
	slice := fpaiv.ScopeParamArrayOfStringsValue_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ScopeParamArrayOfStringsValue_FieldPathArrayOfValues allows storing slice of values for ArrayOfStringsValue fields according to their type
type ScopeParamArrayOfStringsValue_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ScopeParamArrayOfStringsValue_FieldPath
}

func ParseScopeParamArrayOfStringsValue_FieldPathArrayOfValues(pathStr, valuesStr string) (ScopeParamArrayOfStringsValue_FieldPathArrayOfValues, error) {
	fp, err := ParseScopeParamArrayOfStringsValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ArrayOfStringsValue field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ScopeParamArrayOfStringsValue_FieldPathArrayOfValues), nil
}

func MustParseScopeParamArrayOfStringsValue_FieldPathArrayOfValues(pathStr, valuesStr string) ScopeParamArrayOfStringsValue_FieldPathArrayOfValues {
	fpaov, err := ParseScopeParamArrayOfStringsValue_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ScopeParamArrayOfStringsValue_FieldTerminalPathArrayOfValues struct {
	ScopeParamArrayOfStringsValue_FieldTerminalPath
	values interface{}
}

var _ ScopeParamArrayOfStringsValue_FieldPathArrayOfValues = (*ScopeParamArrayOfStringsValue_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ScopeParamArrayOfStringsValue_FieldPathSelectorValues:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ScopeParamArrayOfStringsValue_FieldTerminalPathArrayOfValues) AsValuesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ScopeParamFromValue_FieldPath interface {
	gotenobject.FieldPath
	Selector() ScopeParamFromValue_FieldPathSelector
	Get(source *ScopeParam_FromValue) []interface{}
	GetSingle(source *ScopeParam_FromValue) (interface{}, bool)
	ClearValue(item *ScopeParam_FromValue)

	// Those methods build corresponding ScopeParamFromValue_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ScopeParamFromValue_FieldPathValue
	WithIArrayOfValues(values interface{}) ScopeParamFromValue_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ScopeParamFromValue_FieldPathArrayItemValue
}

type ScopeParamFromValue_FieldPathSelector int32

const (
	ScopeParamFromValue_FieldPathSelectorSource ScopeParamFromValue_FieldPathSelector = 0
	ScopeParamFromValue_FieldPathSelectorPath   ScopeParamFromValue_FieldPathSelector = 1
)

func (s ScopeParamFromValue_FieldPathSelector) String() string {
	switch s {
	case ScopeParamFromValue_FieldPathSelectorSource:
		return "source"
	case ScopeParamFromValue_FieldPathSelectorPath:
		return "path"
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", s))
	}
}

func BuildScopeParamFromValue_FieldPath(fp gotenobject.RawFieldPath) (ScopeParamFromValue_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ScopeParam_FromValue")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "source":
			return &ScopeParamFromValue_FieldTerminalPath{selector: ScopeParamFromValue_FieldPathSelectorSource}, nil
		case "path":
			return &ScopeParamFromValue_FieldTerminalPath{selector: ScopeParamFromValue_FieldPathSelectorPath}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ScopeParam_FromValue", fp)
}

func ParseScopeParamFromValue_FieldPath(rawField string) (ScopeParamFromValue_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildScopeParamFromValue_FieldPath(fp)
}

func MustParseScopeParamFromValue_FieldPath(rawField string) ScopeParamFromValue_FieldPath {
	fp, err := ParseScopeParamFromValue_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ScopeParamFromValue_FieldTerminalPath struct {
	selector ScopeParamFromValue_FieldPathSelector
}

var _ ScopeParamFromValue_FieldPath = (*ScopeParamFromValue_FieldTerminalPath)(nil)

func (fp *ScopeParamFromValue_FieldTerminalPath) Selector() ScopeParamFromValue_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ScopeParamFromValue_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ScopeParamFromValue_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ScopeParam_FromValue
func (fp *ScopeParamFromValue_FieldTerminalPath) Get(source *ScopeParam_FromValue) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ScopeParamFromValue_FieldPathSelectorSource:
			values = append(values, source.Source)
		case ScopeParamFromValue_FieldPathSelectorPath:
			values = append(values, source.Path)
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
		}
	}
	return
}

func (fp *ScopeParamFromValue_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ScopeParam_FromValue))
}

// GetSingle returns value pointed by specific field of from source ScopeParam_FromValue
func (fp *ScopeParamFromValue_FieldTerminalPath) GetSingle(source *ScopeParam_FromValue) (interface{}, bool) {
	switch fp.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		return source.GetSource(), source != nil
	case ScopeParamFromValue_FieldPathSelectorPath:
		return source.GetPath(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
	}
}

func (fp *ScopeParamFromValue_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ScopeParam_FromValue))
}

// GetDefault returns a default value of the field type
func (fp *ScopeParamFromValue_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		return ScopeParam_FromValue_UNDEFINED
	case ScopeParamFromValue_FieldPathSelectorPath:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
	}
}

func (fp *ScopeParamFromValue_FieldTerminalPath) ClearValue(item *ScopeParam_FromValue) {
	if item != nil {
		switch fp.selector {
		case ScopeParamFromValue_FieldPathSelectorSource:
			item.Source = ScopeParam_FromValue_UNDEFINED
		case ScopeParamFromValue_FieldPathSelectorPath:
			item.Path = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
		}
	}
}

func (fp *ScopeParamFromValue_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ScopeParam_FromValue))
}

// IsLeaf - whether field path is holds simple value
func (fp *ScopeParamFromValue_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ScopeParamFromValue_FieldPathSelectorSource ||
		fp.selector == ScopeParamFromValue_FieldPathSelectorPath
}

func (fp *ScopeParamFromValue_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ScopeParamFromValue_FieldTerminalPath) WithIValue(value interface{}) ScopeParamFromValue_FieldPathValue {
	switch fp.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		return &ScopeParamFromValue_FieldTerminalPathValue{ScopeParamFromValue_FieldTerminalPath: *fp, value: value.(ScopeParam_FromValue_Source)}
	case ScopeParamFromValue_FieldPathSelectorPath:
		return &ScopeParamFromValue_FieldTerminalPathValue{ScopeParamFromValue_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
	}
}

func (fp *ScopeParamFromValue_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ScopeParamFromValue_FieldTerminalPath) WithIArrayOfValues(values interface{}) ScopeParamFromValue_FieldPathArrayOfValues {
	fpaov := &ScopeParamFromValue_FieldTerminalPathArrayOfValues{ScopeParamFromValue_FieldTerminalPath: *fp}
	switch fp.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		return &ScopeParamFromValue_FieldTerminalPathArrayOfValues{ScopeParamFromValue_FieldTerminalPath: *fp, values: values.([]ScopeParam_FromValue_Source)}
	case ScopeParamFromValue_FieldPathSelectorPath:
		return &ScopeParamFromValue_FieldTerminalPathArrayOfValues{ScopeParamFromValue_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
	}
	return fpaov
}

func (fp *ScopeParamFromValue_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ScopeParamFromValue_FieldTerminalPath) WithIArrayItemValue(value interface{}) ScopeParamFromValue_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fp.selector))
	}
}

func (fp *ScopeParamFromValue_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ScopeParamFromValue_FieldPathValue allows storing values for FromValue fields according to their type
type ScopeParamFromValue_FieldPathValue interface {
	ScopeParamFromValue_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ScopeParam_FromValue)
	CompareWith(*ScopeParam_FromValue) (cmp int, comparable bool)
}

func ParseScopeParamFromValue_FieldPathValue(pathStr, valueStr string) (ScopeParamFromValue_FieldPathValue, error) {
	fp, err := ParseScopeParamFromValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing FromValue field path value from %s: %v", valueStr, err)
	}
	return fpv.(ScopeParamFromValue_FieldPathValue), nil
}

func MustParseScopeParamFromValue_FieldPathValue(pathStr, valueStr string) ScopeParamFromValue_FieldPathValue {
	fpv, err := ParseScopeParamFromValue_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ScopeParamFromValue_FieldTerminalPathValue struct {
	ScopeParamFromValue_FieldTerminalPath
	value interface{}
}

var _ ScopeParamFromValue_FieldPathValue = (*ScopeParamFromValue_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'FromValue' as interface{}
func (fpv *ScopeParamFromValue_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ScopeParamFromValue_FieldTerminalPathValue) AsSourceValue() (ScopeParam_FromValue_Source, bool) {
	res, ok := fpv.value.(ScopeParam_FromValue_Source)
	return res, ok
}
func (fpv *ScopeParamFromValue_FieldTerminalPathValue) AsPathValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object FromValue
func (fpv *ScopeParamFromValue_FieldTerminalPathValue) SetTo(target **ScopeParam_FromValue) {
	if *target == nil {
		*target = new(ScopeParam_FromValue)
	}
	switch fpv.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		(*target).Source = fpv.value.(ScopeParam_FromValue_Source)
	case ScopeParamFromValue_FieldPathSelectorPath:
		(*target).Path = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fpv.selector))
	}
}

func (fpv *ScopeParamFromValue_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ScopeParam_FromValue)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ScopeParamFromValue_FieldTerminalPathValue' with the value under path in 'ScopeParam_FromValue'.
func (fpv *ScopeParamFromValue_FieldTerminalPathValue) CompareWith(source *ScopeParam_FromValue) (int, bool) {
	switch fpv.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		leftValue := fpv.value.(ScopeParam_FromValue_Source)
		rightValue := source.GetSource()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ScopeParamFromValue_FieldPathSelectorPath:
		leftValue := fpv.value.(string)
		rightValue := source.GetPath()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ScopeParam_FromValue: %d", fpv.selector))
	}
}

func (fpv *ScopeParamFromValue_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ScopeParam_FromValue))
}

// ScopeParamFromValue_FieldPathArrayItemValue allows storing single item in Path-specific values for FromValue according to their type
// Present only for array (repeated) types.
type ScopeParamFromValue_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ScopeParamFromValue_FieldPath
	ContainsValue(*ScopeParam_FromValue) bool
}

// ParseScopeParamFromValue_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseScopeParamFromValue_FieldPathArrayItemValue(pathStr, valueStr string) (ScopeParamFromValue_FieldPathArrayItemValue, error) {
	fp, err := ParseScopeParamFromValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing FromValue field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ScopeParamFromValue_FieldPathArrayItemValue), nil
}

func MustParseScopeParamFromValue_FieldPathArrayItemValue(pathStr, valueStr string) ScopeParamFromValue_FieldPathArrayItemValue {
	fpaiv, err := ParseScopeParamFromValue_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ScopeParamFromValue_FieldTerminalPathArrayItemValue struct {
	ScopeParamFromValue_FieldTerminalPath
	value interface{}
}

var _ ScopeParamFromValue_FieldPathArrayItemValue = (*ScopeParamFromValue_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ScopeParam_FromValue as interface{}
func (fpaiv *ScopeParamFromValue_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ScopeParamFromValue_FieldTerminalPathArrayItemValue) GetSingle(source *ScopeParam_FromValue) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ScopeParamFromValue_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ScopeParam_FromValue))
}

// Contains returns a boolean indicating if value that is being held is present in given 'FromValue'
func (fpaiv *ScopeParamFromValue_FieldTerminalPathArrayItemValue) ContainsValue(source *ScopeParam_FromValue) bool {
	slice := fpaiv.ScopeParamFromValue_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ScopeParamFromValue_FieldPathArrayOfValues allows storing slice of values for FromValue fields according to their type
type ScopeParamFromValue_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ScopeParamFromValue_FieldPath
}

func ParseScopeParamFromValue_FieldPathArrayOfValues(pathStr, valuesStr string) (ScopeParamFromValue_FieldPathArrayOfValues, error) {
	fp, err := ParseScopeParamFromValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing FromValue field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ScopeParamFromValue_FieldPathArrayOfValues), nil
}

func MustParseScopeParamFromValue_FieldPathArrayOfValues(pathStr, valuesStr string) ScopeParamFromValue_FieldPathArrayOfValues {
	fpaov, err := ParseScopeParamFromValue_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ScopeParamFromValue_FieldTerminalPathArrayOfValues struct {
	ScopeParamFromValue_FieldTerminalPath
	values interface{}
}

var _ ScopeParamFromValue_FieldPathArrayOfValues = (*ScopeParamFromValue_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ScopeParamFromValue_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ScopeParamFromValue_FieldPathSelectorSource:
		for _, v := range fpaov.values.([]ScopeParam_FromValue_Source) {
			values = append(values, v)
		}
	case ScopeParamFromValue_FieldPathSelectorPath:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ScopeParamFromValue_FieldTerminalPathArrayOfValues) AsSourceArrayOfValues() ([]ScopeParam_FromValue_Source, bool) {
	res, ok := fpaov.values.([]ScopeParam_FromValue_Source)
	return res, ok
}
func (fpaov *ScopeParamFromValue_FieldTerminalPathArrayOfValues) AsPathArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
