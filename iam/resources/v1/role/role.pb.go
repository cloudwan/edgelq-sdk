// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1/role.proto
// DO NOT EDIT!!!

package role

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &organization.Organization{}
	_ = &permission.Permission{}
	_ = &project.Project{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Category points to the intended role use. It may restrict how RoleBindings
// are created.
type Role_Category int32

const (
	// Undefined, not allowed.
	Role_UNDEFINED Role_Category = 0
	// Role is intended for public access. Restricted members: allUsers,
	// allAuthenticatedUsers. No RoleBinding scope restrictions.
	Role_PUBLIC Role_Category = 1
	// Role is for internal purposes, defined by a parent service. There are no
	// restrictions to scope and members.
	Role_INTERNAL Role_Category = 2
	// Special owner role - reserved to "scope-admin" role in IAM. It is de
	// facto reserved category for EdgeLQ core services only, but is also kind
	// of USER type.
	Role_OWNER Role_Category = 3
	// Role relevant for Service Management, check display name and/or
	// description for more information.
	Role_SERVICE Role_Category = 4
	// Role for various edge agents. Restricted to project scope and service
	// account member types. Cannot be assigned to groups.
	Role_AGENT Role_Category = 5
	// Role relevant for users, provides an access to various actions on
	// organization/project level. Typically should be given to users, but
	// ServiceAccount is also possible. Can be assigned to group members.
	Role_USER Role_Category = 6
)

var (
	Role_Category_name = map[int32]string{
		0: "UNDEFINED",
		1: "PUBLIC",
		2: "INTERNAL",
		3: "OWNER",
		4: "SERVICE",
		5: "AGENT",
		6: "USER",
	}

	Role_Category_value = map[string]int32{
		"UNDEFINED": 0,
		"PUBLIC":    1,
		"INTERNAL":  2,
		"OWNER":     3,
		"SERVICE":   4,
		"AGENT":     5,
		"USER":      6,
	}
)

func (x Role_Category) Enum() *Role_Category {
	p := new(Role_Category)
	*p = x
	return p
}

func (x Role_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Role_Category) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1_role_proto_enumTypes[0].Descriptor()
}

func (Role_Category) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1_role_proto_enumTypes[0]
}

func (x Role_Category) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Role_Category.ProtoReflect.Descriptor instead.
func (Role_Category) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{0, 0}
}

type Role_ScopeParamType_Type int32

const (
	Role_ScopeParamType_UNDEFINED        Role_ScopeParamType_Type = 0
	Role_ScopeParamType_STRING           Role_ScopeParamType_Type = 1
	Role_ScopeParamType_ARRAY_OF_STRINGS Role_ScopeParamType_Type = 2
)

var (
	Role_ScopeParamType_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "STRING",
		2: "ARRAY_OF_STRINGS",
	}

	Role_ScopeParamType_Type_value = map[string]int32{
		"UNDEFINED":        0,
		"STRING":           1,
		"ARRAY_OF_STRINGS": 2,
	}
)

func (x Role_ScopeParamType_Type) Enum() *Role_ScopeParamType_Type {
	p := new(Role_ScopeParamType_Type)
	*p = x
	return p
}

func (x Role_ScopeParamType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Role_ScopeParamType_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1_role_proto_enumTypes[1].Descriptor()
}

func (Role_ScopeParamType_Type) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1_role_proto_enumTypes[1]
}

func (x Role_ScopeParamType_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Role_ScopeParamType_Type.ProtoReflect.Descriptor instead.
func (Role_ScopeParamType_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Source indicates which dynamic object is used to extract value from.
type ScopeParam_FromValue_Source int32

const (
	ScopeParam_FromValue_UNDEFINED ScopeParam_FromValue_Source = 0
	// Object from which value is taken is metadata.
	// Valid for Service Accounts and user types.
	ScopeParam_FromValue_PRINCIPAL_METADATA ScopeParam_FromValue_Source = 1
	// Object from which value is taken is User principal.
	// If principal executing an Action is not a User, then
	// value will be empty.
	ScopeParam_FromValue_PRINCIPAL_USER ScopeParam_FromValue_Source = 2
	// Object from which value is taken is ServiceAccount principal.
	// If principal executing an Action is not a ServiceAccount, then
	// value will be empty.
	ScopeParam_FromValue_PRINCIPAL_SVCACC ScopeParam_FromValue_Source = 3
)

var (
	ScopeParam_FromValue_Source_name = map[int32]string{
		0: "UNDEFINED",
		1: "PRINCIPAL_METADATA",
		2: "PRINCIPAL_USER",
		3: "PRINCIPAL_SVCACC",
	}

	ScopeParam_FromValue_Source_value = map[string]int32{
		"UNDEFINED":          0,
		"PRINCIPAL_METADATA": 1,
		"PRINCIPAL_USER":     2,
		"PRINCIPAL_SVCACC":   3,
	}
)

func (x ScopeParam_FromValue_Source) Enum() *ScopeParam_FromValue_Source {
	p := new(ScopeParam_FromValue_Source)
	*p = x
	return p
}

func (x ScopeParam_FromValue_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ScopeParam_FromValue_Source) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1_role_proto_enumTypes[2].Descriptor()
}

func (ScopeParam_FromValue_Source) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1_role_proto_enumTypes[2]
}

func (x ScopeParam_FromValue_Source) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ScopeParam_FromValue_Source.ProtoReflect.Descriptor instead.
func (ScopeParam_FromValue_Source) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{1, 2, 0}
}

// Role Resource
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Role
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional description
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// Category to which Role belongs to. It cannot be changed.
	Category Role_Category `protobuf:"varint,10,opt,name=category,proto3,enum=ntt.iam.v1.Role_Category" json:"category,omitempty"`
	// List of scope params, they are used to evaluate object prefixes in
	// grants and values in their field conditions, if any.
	ScopeParams []*Role_ScopeParamType `protobuf:"bytes,3,rep,name=scope_params,json=scopeParams,proto3" json:"scope_params,omitempty"`
	// List of const scope params for this role
	ConstValues []*ScopeParam `protobuf:"bytes,11,rep,name=const_values,json=constValues,proto3" json:"const_values,omitempty"`
	// List of default value for the passed scope params
	DefaultValues []*ScopeParam `protobuf:"bytes,12,rep,name=default_values,json=defaultValues,proto3" json:"default_values,omitempty"`
	// List of permissions granted per each object prefix.
	Grants []*Role_Grant `protobuf:"bytes,5,rep,name=grants,proto3" json:"grants,omitempty"`
	// List of owned objects templates - during binding of a role, each owned
	// object specified in this role is computed against scope params from role
	// binding to evaluate final owned objects. For example, if owned_objects in
	// Role contains value "regions/{region}/devices/{device}, and RoleBinding
	// specifies region=useast and device=d1, then final owned_object will be
	// regions/useast/devices/d1. Ownership also would include any potential child
	// resources of this device. Note that RoleBinding scope (project,
	// organization, service) will still be prepended before each owned object to
	// form fully qualified name of the owned resource. Owned objects may contain
	// wildcards: '-'. As a special case, if owned objects contain string with
	// only single character: '-', then it means member of the role binding is
	// considered as full owner of the scope.
	// This field cannot be modified after role creation.
	OwnedObjects []string `protobuf:"bytes,6,rep,name=owned_objects,json=ownedObjects,proto3" json:"owned_objects,omitempty"`
	// List of services used by this role. It is being detected by the usage of
	// permissions in grants - or if it has owned objects, it contains all
	// services used by parent service.
	Services []*meta_service.Reference `protobuf:"bytes,7,rep,customtype=Reference,name=services,proto3" json:"services,omitempty"`
	// Internal field used by controller to ensure role bindings are in sync with
	// role updates.
	RbSpecGeneration int64 `protobuf:"varint,8,opt,name=rb_spec_generation,json=rbSpecGeneration,proto3" json:"rb_spec_generation,omitempty"`
}

func (m *Role) Reset() {
	*m = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Role) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Role) ProtoMessage() {}

func (m *Role) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Role) GotenMessage() {}

// Deprecated, Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{0}
}

func (m *Role) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Role) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Role) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Role) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Role) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Role) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Role) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Role) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Role) GetCategory() Role_Category {
	if m != nil {
		return m.Category
	}
	return Role_UNDEFINED
}

func (m *Role) GetScopeParams() []*Role_ScopeParamType {
	if m != nil {
		return m.ScopeParams
	}
	return nil
}

func (m *Role) GetConstValues() []*ScopeParam {
	if m != nil {
		return m.ConstValues
	}
	return nil
}

func (m *Role) GetDefaultValues() []*ScopeParam {
	if m != nil {
		return m.DefaultValues
	}
	return nil
}

func (m *Role) GetGrants() []*Role_Grant {
	if m != nil {
		return m.Grants
	}
	return nil
}

func (m *Role) GetOwnedObjects() []string {
	if m != nil {
		return m.OwnedObjects
	}
	return nil
}

func (m *Role) GetServices() []*meta_service.Reference {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Role) GetRbSpecGeneration() int64 {
	if m != nil {
		return m.RbSpecGeneration
	}
	return int64(0)
}

func (m *Role) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Role"))
	}
	m.Name = fv
}

func (m *Role) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Role"))
	}
	m.Metadata = fv
}

func (m *Role) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Role"))
	}
	m.DisplayName = fv
}

func (m *Role) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Role"))
	}
	m.Description = fv
}

func (m *Role) SetCategory(fv Role_Category) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Category", "Role"))
	}
	m.Category = fv
}

func (m *Role) SetScopeParams(fv []*Role_ScopeParamType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ScopeParams", "Role"))
	}
	m.ScopeParams = fv
}

func (m *Role) SetConstValues(fv []*ScopeParam) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConstValues", "Role"))
	}
	m.ConstValues = fv
}

func (m *Role) SetDefaultValues(fv []*ScopeParam) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultValues", "Role"))
	}
	m.DefaultValues = fv
}

func (m *Role) SetGrants(fv []*Role_Grant) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Grants", "Role"))
	}
	m.Grants = fv
}

func (m *Role) SetOwnedObjects(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwnedObjects", "Role"))
	}
	m.OwnedObjects = fv
}

func (m *Role) SetServices(fv []*meta_service.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Services", "Role"))
	}
	m.Services = fv
}

func (m *Role) SetRbSpecGeneration(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RbSpecGeneration", "Role"))
	}
	m.RbSpecGeneration = fv
}

type ScopeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the variable to be used in conditions/scope values.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ScopeParam_String_
	//	*ScopeParam_Strings
	//	*ScopeParam_ValueFrom
	Value isScopeParam_Value `protobuf_oneof:"value"`
}

func (m *ScopeParam) Reset() {
	*m = ScopeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ScopeParam) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ScopeParam) ProtoMessage() {}

func (m *ScopeParam) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ScopeParam) GotenMessage() {}

// Deprecated, Use ScopeParam.ProtoReflect.Descriptor instead.
func (*ScopeParam) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{1}
}

func (m *ScopeParam) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ScopeParam) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ScopeParam) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ScopeParam) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isScopeParam_Value interface {
	isScopeParam_Value()
}

type ScopeParam_String_ struct {
	// Value is a single string
	String_ *ScopeParam_StringValue `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}
type ScopeParam_Strings struct {
	// List of alternative values.
	Strings *ScopeParam_ArrayOfStringsValue `protobuf:"bytes,3,opt,name=strings,proto3,oneof"`
}
type ScopeParam_ValueFrom struct {
	// Value is extracted dynamically from pointed object type.
	ValueFrom *ScopeParam_FromValue `protobuf:"bytes,4,opt,name=value_from,json=valueFrom,proto3,oneof"`
}

func (*ScopeParam_String_) isScopeParam_Value()   {}
func (*ScopeParam_Strings) isScopeParam_Value()   {}
func (*ScopeParam_ValueFrom) isScopeParam_Value() {}
func (m *ScopeParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScopeParam) GetValue() isScopeParam_Value {
	if m != nil {
		return m.Value
	}
	return nil
}
func (m *ScopeParam) GetString_() *ScopeParam_StringValue {
	if x, ok := m.GetValue().(*ScopeParam_String_); ok {
		return x.String_
	}
	return nil
}
func (m *ScopeParam) GetStrings() *ScopeParam_ArrayOfStringsValue {
	if x, ok := m.GetValue().(*ScopeParam_Strings); ok {
		return x.Strings
	}
	return nil
}
func (m *ScopeParam) GetValueFrom() *ScopeParam_FromValue {
	if x, ok := m.GetValue().(*ScopeParam_ValueFrom); ok {
		return x.ValueFrom
	}
	return nil
}
func (m *ScopeParam) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ScopeParam"))
	}
	m.Name = fv
}

func (m *ScopeParam) SetValue(ofv isScopeParam_Value) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isScopeParam_Value", "ScopeParam"))
	}
	m.Value = ofv
}
func (m *ScopeParam) SetString_(fv *ScopeParam_StringValue) {
	m.SetValue(&ScopeParam_String_{String_: fv})
}
func (m *ScopeParam) SetStrings(fv *ScopeParam_ArrayOfStringsValue) {
	m.SetValue(&ScopeParam_Strings{Strings: fv})
}
func (m *ScopeParam) SetValueFrom(fv *ScopeParam_FromValue) {
	m.SetValue(&ScopeParam_ValueFrom{ValueFrom: fv})
}

type Role_ScopeParamType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          Role_ScopeParamType_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ntt.iam.v1.Role_ScopeParamType_Type" json:"type,omitempty"`
}

func (m *Role_ScopeParamType) Reset() {
	*m = Role_ScopeParamType{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Role_ScopeParamType) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Role_ScopeParamType) ProtoMessage() {}

func (m *Role_ScopeParamType) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Role_ScopeParamType) GotenMessage() {}

// Deprecated, Use Role_ScopeParamType.ProtoReflect.Descriptor instead.
func (*Role_ScopeParamType) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Role_ScopeParamType) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Role_ScopeParamType) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Role_ScopeParamType) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Role_ScopeParamType) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Role_ScopeParamType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role_ScopeParamType) GetType() Role_ScopeParamType_Type {
	if m != nil {
		return m.Type
	}
	return Role_ScopeParamType_UNDEFINED
}

func (m *Role_ScopeParamType) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Role_ScopeParamType"))
	}
	m.Name = fv
}

func (m *Role_ScopeParamType) SetType(fv Role_ScopeParamType_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Role_ScopeParamType"))
	}
	m.Type = fv
}

type Role_Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional prefix that is APPENDED to the scope inherited from RoleBinding
	// (project, organization, service). If not specified, then scope is
	// equal to the one from RoleBinding.
	SubScope string `protobuf:"bytes,1,opt,name=sub_scope,json=subScope,proto3" json:"sub_scope,omitempty"`
	// List of applicable permissions for this grant. Not relevant if is_owner
	// is true.
	Permissions []*permission.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=permissions,proto3" json:"permissions,omitempty"`
	// List of resource field conditions. Values for conditions are extracted
	// from assigned RoleBinding (scope params).
	// Resource extraction is following:
	// - If request has resource body, then it is used.
	// - If request has resource name, then resource is extracted from database
	//   and its fields are used.
	// - If request has filter object applicable for collection requests (like
	// list,
	//   collection watch...), then service uses resource field paths and values
	//   extracted from filter conditions.
	ResourceFieldConditions []*Role_Grant_FieldCondition `protobuf:"bytes,3,rep,name=resource_field_conditions,json=resourceFieldConditions,proto3" json:"resource_field_conditions,omitempty"`
	// List of request field conditions. Values for conditions are extracted
	// from assigned RoleBinding (scope params).
	RequestFieldConditions []*Role_Grant_FieldCondition `protobuf:"bytes,4,rep,name=request_field_conditions,json=requestFieldConditions,proto3" json:"request_field_conditions,omitempty"`
	// List of executable conditions to be applied in order to validate this
	// grant. Note that executable conditions are also specified in RoleBinding,
	// as often it is not possible to define all params in the Role itself,
	// before binding. Final executable conditions, in RoleBinding context, are
	// computed in the following way:
	// - Executable conditions from RoleBinding and Role are matched by
	//   condition reference.
	// - Params are merged FROM condition in Role into condition in RoleBinding.
	//   It is expected that Role defined "common" params and RoleBinding
	//   defines remaining ones.
	ExecutableConditions []*condition.ExecutableCondition `protobuf:"bytes,5,rep,name=executable_conditions,json=executableConditions,proto3" json:"executable_conditions,omitempty"`
}

func (m *Role_Grant) Reset() {
	*m = Role_Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Role_Grant) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Role_Grant) ProtoMessage() {}

func (m *Role_Grant) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Role_Grant) GotenMessage() {}

// Deprecated, Use Role_Grant.ProtoReflect.Descriptor instead.
func (*Role_Grant) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Role_Grant) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Role_Grant) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Role_Grant) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Role_Grant) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Role_Grant) GetSubScope() string {
	if m != nil {
		return m.SubScope
	}
	return ""
}

func (m *Role_Grant) GetPermissions() []*permission.Reference {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Role_Grant) GetResourceFieldConditions() []*Role_Grant_FieldCondition {
	if m != nil {
		return m.ResourceFieldConditions
	}
	return nil
}

func (m *Role_Grant) GetRequestFieldConditions() []*Role_Grant_FieldCondition {
	if m != nil {
		return m.RequestFieldConditions
	}
	return nil
}

func (m *Role_Grant) GetExecutableConditions() []*condition.ExecutableCondition {
	if m != nil {
		return m.ExecutableConditions
	}
	return nil
}

func (m *Role_Grant) SetSubScope(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SubScope", "Role_Grant"))
	}
	m.SubScope = fv
}

func (m *Role_Grant) SetPermissions(fv []*permission.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Permissions", "Role_Grant"))
	}
	m.Permissions = fv
}

func (m *Role_Grant) SetResourceFieldConditions(fv []*Role_Grant_FieldCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceFieldConditions", "Role_Grant"))
	}
	m.ResourceFieldConditions = fv
}

func (m *Role_Grant) SetRequestFieldConditions(fv []*Role_Grant_FieldCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestFieldConditions", "Role_Grant"))
	}
	m.RequestFieldConditions = fv
}

func (m *Role_Grant) SetExecutableConditions(fv []*condition.ExecutableCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExecutableConditions", "Role_Grant"))
	}
	m.ExecutableConditions = fv
}

type Role_Grant_FieldCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Role_Grant_FieldCondition) Reset() {
	*m = Role_Grant_FieldCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Role_Grant_FieldCondition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Role_Grant_FieldCondition) ProtoMessage() {}

func (m *Role_Grant_FieldCondition) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Role_Grant_FieldCondition) GotenMessage() {}

// Deprecated, Use Role_Grant_FieldCondition.ProtoReflect.Descriptor instead.
func (*Role_Grant_FieldCondition) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Role_Grant_FieldCondition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Role_Grant_FieldCondition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Role_Grant_FieldCondition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Role_Grant_FieldCondition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Role_Grant_FieldCondition) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Role_Grant_FieldCondition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Role_Grant_FieldCondition) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "Role_Grant_FieldCondition"))
	}
	m.Path = fv
}

func (m *Role_Grant_FieldCondition) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "Role_Grant_FieldCondition"))
	}
	m.Value = fv
}

// StringValue represents single value
type ScopeParam_StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ScopeParam_StringValue) Reset() {
	*m = ScopeParam_StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ScopeParam_StringValue) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ScopeParam_StringValue) ProtoMessage() {}

func (m *ScopeParam_StringValue) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ScopeParam_StringValue) GotenMessage() {}

// Deprecated, Use ScopeParam_StringValue.ProtoReflect.Descriptor instead.
func (*ScopeParam_StringValue) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ScopeParam_StringValue) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ScopeParam_StringValue) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ScopeParam_StringValue) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ScopeParam_StringValue) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ScopeParam_StringValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ScopeParam_StringValue) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "ScopeParam_StringValue"))
	}
	m.Value = fv
}

// ArrayOfStringsValue represents array of strings value
type ScopeParam_ArrayOfStringsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *ScopeParam_ArrayOfStringsValue) Reset() {
	*m = ScopeParam_ArrayOfStringsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ScopeParam_ArrayOfStringsValue) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ScopeParam_ArrayOfStringsValue) ProtoMessage() {}

func (m *ScopeParam_ArrayOfStringsValue) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ScopeParam_ArrayOfStringsValue) GotenMessage() {}

// Deprecated, Use ScopeParam_ArrayOfStringsValue.ProtoReflect.Descriptor instead.
func (*ScopeParam_ArrayOfStringsValue) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{1, 1}
}

func (m *ScopeParam_ArrayOfStringsValue) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ScopeParam_ArrayOfStringsValue) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ScopeParam_ArrayOfStringsValue) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ScopeParam_ArrayOfStringsValue) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ScopeParam_ArrayOfStringsValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ScopeParam_ArrayOfStringsValue) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "ScopeParam_ArrayOfStringsValue"))
	}
	m.Values = fv
}

// FromValue represents a value(s) from specific dynamic object.
type ScopeParam_FromValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Source indicates type of dynamic object from where we take value(s).
	Source ScopeParam_FromValue_Source `protobuf:"varint,1,opt,name=source,proto3,enum=ntt.iam.v1.ScopeParam_FromValue_Source" json:"source,omitempty"`
	// Path within specified object from which exactly we get value(s).
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ScopeParam_FromValue) Reset() {
	*m = ScopeParam_FromValue{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_role_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ScopeParam_FromValue) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ScopeParam_FromValue) ProtoMessage() {}

func (m *ScopeParam_FromValue) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_role_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ScopeParam_FromValue) GotenMessage() {}

// Deprecated, Use ScopeParam_FromValue.ProtoReflect.Descriptor instead.
func (*ScopeParam_FromValue) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_role_proto_rawDescGZIP(), []int{1, 2}
}

func (m *ScopeParam_FromValue) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ScopeParam_FromValue) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ScopeParam_FromValue) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ScopeParam_FromValue) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ScopeParam_FromValue) GetSource() ScopeParam_FromValue_Source {
	if m != nil {
		return m.Source
	}
	return ScopeParam_FromValue_UNDEFINED
}

func (m *ScopeParam_FromValue) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ScopeParam_FromValue) SetSource(fv ScopeParam_FromValue_Source) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Source", "ScopeParam_FromValue"))
	}
	m.Source = fv
}

func (m *ScopeParam_FromValue) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "ScopeParam_FromValue"))
	}
	m.Path = fv
}

var edgelq_iam_proto_v1_role_proto preflect.FileDescriptor

var edgelq_iam_proto_v1_role_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xee, 0x0e, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x0a, 0x06, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x02,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x08, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a,
	0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x24, 0xf0, 0xd9, 0x21, 0x01, 0xb2, 0xda, 0x21, 0x1c, 0x12, 0x1a, 0x0a, 0x16,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x10, 0x72, 0x62, 0x53, 0x70, 0x65, 0x63, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb0, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a,
	0x03, 0x08, 0x80, 0x01, 0x68, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x1a, 0xdd, 0x03, 0x0a, 0x05, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x3a, 0x03,
	0x08, 0x80, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x58, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x04, 0x68, 0x01, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x04,
	0x68, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x06, 0x3a, 0xf6, 0x03, 0xea, 0x41,
	0x82, 0x01, 0x0a, 0x13, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x7d, 0x12, 0x1f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x7d, 0x12, 0x29, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x6f, 0x6c, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0xbe, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x13, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x38, 0x05, 0x42, 0x26, 0x08,
	0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x40, 0x08, 0x03, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x08, 0x0a,
	0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x03, 0xc2, 0x85, 0x2c, 0x96, 0x01, 0x22, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x12, 0x72, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x04, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x1a, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2d, 0x0a, 0x13, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x59, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4e,
	0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x53, 0x56, 0x43, 0x41, 0x43, 0x43,
	0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xdb, 0x01, 0xe8, 0xde,
	0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x3a, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0xa2, 0x80, 0xd1, 0x02, 0x3c, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x3b, 0x72, 0x6f, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	edgelq_iam_proto_v1_role_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1_role_proto_rawDescData = edgelq_iam_proto_v1_role_proto_rawDesc
)

func edgelq_iam_proto_v1_role_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1_role_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1_role_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1_role_proto_rawDescData)
	})
	return edgelq_iam_proto_v1_role_proto_rawDescData
}

var edgelq_iam_proto_v1_role_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var edgelq_iam_proto_v1_role_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var edgelq_iam_proto_v1_role_proto_goTypes = []interface{}{
	(Role_Category)(0),                     // 0: ntt.iam.v1.Role_Category
	(Role_ScopeParamType_Type)(0),          // 1: ntt.iam.v1.Role_ScopeParamType_Type
	(ScopeParam_FromValue_Source)(0),       // 2: ntt.iam.v1.ScopeParam_FromValue_Source
	(*Role)(nil),                           // 3: ntt.iam.v1.Role
	(*ScopeParam)(nil),                     // 4: ntt.iam.v1.ScopeParam
	(*Role_ScopeParamType)(nil),            // 5: ntt.iam.v1.Role.ScopeParamType
	(*Role_Grant)(nil),                     // 6: ntt.iam.v1.Role.Grant
	(*Role_Grant_FieldCondition)(nil),      // 7: ntt.iam.v1.Role.Grant.FieldCondition
	(*ScopeParam_StringValue)(nil),         // 8: ntt.iam.v1.ScopeParam.StringValue
	(*ScopeParam_ArrayOfStringsValue)(nil), // 9: ntt.iam.v1.ScopeParam.ArrayOfStringsValue
	(*ScopeParam_FromValue)(nil),           // 10: ntt.iam.v1.ScopeParam.FromValue
	(*meta.Meta)(nil),                      // 11: goten.types.Meta
	(*condition.ExecutableCondition)(nil),  // 12: ntt.iam.v1.ExecutableCondition
}
var edgelq_iam_proto_v1_role_proto_depIdxs = []int32{
	11, // 0: ntt.iam.v1.Role.metadata:type_name -> goten.types.Meta
	0,  // 1: ntt.iam.v1.Role.category:type_name -> ntt.iam.v1.Role_Category
	5,  // 2: ntt.iam.v1.Role.scope_params:type_name -> ntt.iam.v1.Role.ScopeParamType
	4,  // 3: ntt.iam.v1.Role.const_values:type_name -> ntt.iam.v1.ScopeParam
	4,  // 4: ntt.iam.v1.Role.default_values:type_name -> ntt.iam.v1.ScopeParam
	6,  // 5: ntt.iam.v1.Role.grants:type_name -> ntt.iam.v1.Role.Grant
	8,  // 6: ntt.iam.v1.ScopeParam.string:type_name -> ntt.iam.v1.ScopeParam.StringValue
	9,  // 7: ntt.iam.v1.ScopeParam.strings:type_name -> ntt.iam.v1.ScopeParam.ArrayOfStringsValue
	10, // 8: ntt.iam.v1.ScopeParam.value_from:type_name -> ntt.iam.v1.ScopeParam.FromValue
	1,  // 9: ntt.iam.v1.Role.ScopeParamType.type:type_name -> ntt.iam.v1.Role_ScopeParamType_Type
	7,  // 10: ntt.iam.v1.Role.Grant.resource_field_conditions:type_name -> ntt.iam.v1.Role.Grant.FieldCondition
	7,  // 11: ntt.iam.v1.Role.Grant.request_field_conditions:type_name -> ntt.iam.v1.Role.Grant.FieldCondition
	12, // 12: ntt.iam.v1.Role.Grant.executable_conditions:type_name -> ntt.iam.v1.ExecutableCondition
	2,  // 13: ntt.iam.v1.ScopeParam.FromValue.source:type_name -> ntt.iam.v1.ScopeParam_FromValue_Source
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1_role_proto_init() }
func edgelq_iam_proto_v1_role_proto_init() {
	if edgelq_iam_proto_v1_role_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1_role_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role_ScopeParamType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role_Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role_Grant_FieldCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeParam_StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeParam_ArrayOfStringsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_role_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeParam_FromValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_iam_proto_v1_role_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ScopeParam_String_)(nil),
		(*ScopeParam_Strings)(nil),
		(*ScopeParam_ValueFrom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1_role_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_iam_proto_v1_role_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1_role_proto_depIdxs,
		EnumInfos:         edgelq_iam_proto_v1_role_proto_enumTypes,
		MessageInfos:      edgelq_iam_proto_v1_role_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1_role_proto = out.File
	edgelq_iam_proto_v1_role_proto_rawDesc = nil
	edgelq_iam_proto_v1_role_proto_goTypes = nil
	edgelq_iam_proto_v1_role_proto_depIdxs = nil
}
