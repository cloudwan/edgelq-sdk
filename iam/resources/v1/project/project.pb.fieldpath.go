// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/project.proto
// DO NOT EDIT!!!

package project

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_common.PCR{}
	_ = &organization.Organization{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Project_FieldPath interface {
	gotenobject.FieldPath
	Selector() Project_FieldPathSelector
	Get(source *Project) []interface{}
	GetSingle(source *Project) (interface{}, bool)
	ClearValue(item *Project)

	// Those methods build corresponding Project_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Project_FieldPathValue
	WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue
}

type Project_FieldPathSelector int32

const (
	Project_FieldPathSelectorName               Project_FieldPathSelector = 0
	Project_FieldPathSelectorMetadata           Project_FieldPathSelector = 1
	Project_FieldPathSelectorTitle              Project_FieldPathSelector = 2
	Project_FieldPathSelectorDescription        Project_FieldPathSelector = 3
	Project_FieldPathSelectorParentOrganization Project_FieldPathSelector = 4
	Project_FieldPathSelectorMultiRegionPolicy  Project_FieldPathSelector = 5
	Project_FieldPathSelectorEnabledServices    Project_FieldPathSelector = 6
	Project_FieldPathSelectorBusinessTier       Project_FieldPathSelector = 7
	Project_FieldPathSelectorServiceTiers       Project_FieldPathSelector = 8
	Project_FieldPathSelectorRootOrganization   Project_FieldPathSelector = 9
	Project_FieldPathSelectorAncestryPath       Project_FieldPathSelector = 10
	Project_FieldPathSelectorServiceErrors      Project_FieldPathSelector = 11
	Project_FieldPathSelectorServicesGeneration Project_FieldPathSelector = 12
)

func (s Project_FieldPathSelector) String() string {
	switch s {
	case Project_FieldPathSelectorName:
		return "name"
	case Project_FieldPathSelectorMetadata:
		return "metadata"
	case Project_FieldPathSelectorTitle:
		return "title"
	case Project_FieldPathSelectorDescription:
		return "description"
	case Project_FieldPathSelectorParentOrganization:
		return "parent_organization"
	case Project_FieldPathSelectorMultiRegionPolicy:
		return "multi_region_policy"
	case Project_FieldPathSelectorEnabledServices:
		return "enabled_services"
	case Project_FieldPathSelectorBusinessTier:
		return "business_tier"
	case Project_FieldPathSelectorServiceTiers:
		return "service_tiers"
	case Project_FieldPathSelectorRootOrganization:
		return "root_organization"
	case Project_FieldPathSelectorAncestryPath:
		return "ancestry_path"
	case Project_FieldPathSelectorServiceErrors:
		return "service_errors"
	case Project_FieldPathSelectorServicesGeneration:
		return "services_generation"
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", s))
	}
}

func BuildProject_FieldPath(fp gotenobject.RawFieldPath) (Project_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Project")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorName}, nil
		case "metadata":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorMetadata}, nil
		case "title":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorTitle}, nil
		case "description":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorDescription}, nil
		case "parent_organization", "parentOrganization", "parent-organization":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorParentOrganization}, nil
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorMultiRegionPolicy}, nil
		case "enabled_services", "enabledServices", "enabled-services":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorEnabledServices}, nil
		case "business_tier", "businessTier", "business-tier":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorBusinessTier}, nil
		case "service_tiers", "serviceTiers", "service-tiers":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorServiceTiers}, nil
		case "root_organization", "rootOrganization", "root-organization":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorRootOrganization}, nil
		case "ancestry_path", "ancestryPath", "ancestry-path":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorAncestryPath}, nil
		case "service_errors", "serviceErrors", "service-errors":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorServiceErrors}, nil
		case "services_generation", "servicesGeneration", "services-generation":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorServicesGeneration}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Project_FieldSubPath{selector: Project_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			if subpath, err := multi_region_policy.BuildMultiRegionPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Project_FieldSubPath{selector: Project_FieldPathSelectorMultiRegionPolicy, subPath: subpath}, nil
			}
		case "service_tiers", "serviceTiers", "service-tiers":
			if subpath, err := iam_common.BuildServiceBusinessTier_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Project_FieldSubPath{selector: Project_FieldPathSelectorServiceTiers, subPath: subpath}, nil
			}
		case "service_errors", "serviceErrors", "service-errors":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Project)", fp)
			}
			return &Project_FieldPathMap{selector: Project_FieldPathSelectorServiceErrors, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Project", fp)
}

func ParseProject_FieldPath(rawField string) (Project_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProject_FieldPath(fp)
}

func MustParseProject_FieldPath(rawField string) Project_FieldPath {
	fp, err := ParseProject_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Project_FieldTerminalPath struct {
	selector Project_FieldPathSelector
}

var _ Project_FieldPath = (*Project_FieldTerminalPath)(nil)

func (fp *Project_FieldTerminalPath) Selector() Project_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Project_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Project_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Project
func (fp *Project_FieldTerminalPath) Get(source *Project) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Project_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Project_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Project_FieldPathSelectorTitle:
			values = append(values, source.Title)
		case Project_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Project_FieldPathSelectorParentOrganization:
			if source.ParentOrganization != nil {
				values = append(values, source.ParentOrganization)
			}
		case Project_FieldPathSelectorMultiRegionPolicy:
			if source.MultiRegionPolicy != nil {
				values = append(values, source.MultiRegionPolicy)
			}
		case Project_FieldPathSelectorEnabledServices:
			for _, value := range source.GetEnabledServices() {
				values = append(values, value)
			}
		case Project_FieldPathSelectorBusinessTier:
			values = append(values, source.BusinessTier)
		case Project_FieldPathSelectorServiceTiers:
			for _, value := range source.GetServiceTiers() {
				values = append(values, value)
			}
		case Project_FieldPathSelectorRootOrganization:
			if source.RootOrganization != nil {
				values = append(values, source.RootOrganization)
			}
		case Project_FieldPathSelectorAncestryPath:
			for _, value := range source.GetAncestryPath() {
				values = append(values, value)
			}
		case Project_FieldPathSelectorServiceErrors:
			if source.ServiceErrors != nil {
				values = append(values, source.ServiceErrors)
			}
		case Project_FieldPathSelectorServicesGeneration:
			values = append(values, source.ServicesGeneration)
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
		}
	}
	return
}

func (fp *Project_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Project))
}

// GetSingle returns value pointed by specific field of from source Project
func (fp *Project_FieldTerminalPath) GetSingle(source *Project) (interface{}, bool) {
	switch fp.selector {
	case Project_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Project_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Project_FieldPathSelectorTitle:
		return source.GetTitle(), source != nil
	case Project_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Project_FieldPathSelectorParentOrganization:
		res := source.GetParentOrganization()
		return res, res != nil
	case Project_FieldPathSelectorMultiRegionPolicy:
		res := source.GetMultiRegionPolicy()
		return res, res != nil
	case Project_FieldPathSelectorEnabledServices:
		res := source.GetEnabledServices()
		return res, res != nil
	case Project_FieldPathSelectorBusinessTier:
		return source.GetBusinessTier(), source != nil
	case Project_FieldPathSelectorServiceTiers:
		res := source.GetServiceTiers()
		return res, res != nil
	case Project_FieldPathSelectorRootOrganization:
		res := source.GetRootOrganization()
		return res, res != nil
	case Project_FieldPathSelectorAncestryPath:
		res := source.GetAncestryPath()
		return res, res != nil
	case Project_FieldPathSelectorServiceErrors:
		res := source.GetServiceErrors()
		return res, res != nil
	case Project_FieldPathSelectorServicesGeneration:
		return source.GetServicesGeneration(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Project))
}

// GetDefault returns a default value of the field type
func (fp *Project_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Project_FieldPathSelectorName:
		return (*Name)(nil)
	case Project_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Project_FieldPathSelectorTitle:
		return ""
	case Project_FieldPathSelectorDescription:
		return ""
	case Project_FieldPathSelectorParentOrganization:
		return (*organization.Reference)(nil)
	case Project_FieldPathSelectorMultiRegionPolicy:
		return (*multi_region_policy.MultiRegionPolicy)(nil)
	case Project_FieldPathSelectorEnabledServices:
		return ([]*meta_service.Reference)(nil)
	case Project_FieldPathSelectorBusinessTier:
		return iam_common.BusinessTier_UNDEFINED
	case Project_FieldPathSelectorServiceTiers:
		return ([]*iam_common.ServiceBusinessTier)(nil)
	case Project_FieldPathSelectorRootOrganization:
		return (*organization.Name)(nil)
	case Project_FieldPathSelectorAncestryPath:
		return ([]*organization.Name)(nil)
	case Project_FieldPathSelectorServiceErrors:
		return (map[string]*iam_common.ServiceErrors)(nil)
	case Project_FieldPathSelectorServicesGeneration:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) ClearValue(item *Project) {
	if item != nil {
		switch fp.selector {
		case Project_FieldPathSelectorName:
			item.Name = nil
		case Project_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Project_FieldPathSelectorTitle:
			item.Title = ""
		case Project_FieldPathSelectorDescription:
			item.Description = ""
		case Project_FieldPathSelectorParentOrganization:
			item.ParentOrganization = nil
		case Project_FieldPathSelectorMultiRegionPolicy:
			item.MultiRegionPolicy = nil
		case Project_FieldPathSelectorEnabledServices:
			item.EnabledServices = nil
		case Project_FieldPathSelectorBusinessTier:
			item.BusinessTier = iam_common.BusinessTier_UNDEFINED
		case Project_FieldPathSelectorServiceTiers:
			item.ServiceTiers = nil
		case Project_FieldPathSelectorRootOrganization:
			item.RootOrganization = nil
		case Project_FieldPathSelectorAncestryPath:
			item.AncestryPath = nil
		case Project_FieldPathSelectorServiceErrors:
			item.ServiceErrors = nil
		case Project_FieldPathSelectorServicesGeneration:
			item.ServicesGeneration = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
		}
	}
}

func (fp *Project_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Project))
}

// IsLeaf - whether field path is holds simple value
func (fp *Project_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Project_FieldPathSelectorName ||
		fp.selector == Project_FieldPathSelectorTitle ||
		fp.selector == Project_FieldPathSelectorDescription ||
		fp.selector == Project_FieldPathSelectorParentOrganization ||
		fp.selector == Project_FieldPathSelectorEnabledServices ||
		fp.selector == Project_FieldPathSelectorBusinessTier ||
		fp.selector == Project_FieldPathSelectorRootOrganization ||
		fp.selector == Project_FieldPathSelectorAncestryPath ||
		fp.selector == Project_FieldPathSelectorServicesGeneration
}

func (fp *Project_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Project_FieldTerminalPath) WithIValue(value interface{}) Project_FieldPathValue {
	switch fp.selector {
	case Project_FieldPathSelectorName:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*Name)}
	case Project_FieldPathSelectorMetadata:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Project_FieldPathSelectorTitle:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(string)}
	case Project_FieldPathSelectorDescription:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(string)}
	case Project_FieldPathSelectorParentOrganization:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*organization.Reference)}
	case Project_FieldPathSelectorMultiRegionPolicy:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*multi_region_policy.MultiRegionPolicy)}
	case Project_FieldPathSelectorEnabledServices:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.([]*meta_service.Reference)}
	case Project_FieldPathSelectorBusinessTier:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(iam_common.BusinessTier)}
	case Project_FieldPathSelectorServiceTiers:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.([]*iam_common.ServiceBusinessTier)}
	case Project_FieldPathSelectorRootOrganization:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*organization.Name)}
	case Project_FieldPathSelectorAncestryPath:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.([]*organization.Name)}
	case Project_FieldPathSelectorServiceErrors:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(map[string]*iam_common.ServiceErrors)}
	case Project_FieldPathSelectorServicesGeneration:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Project_FieldTerminalPath) WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues {
	fpaov := &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp}
	switch fp.selector {
	case Project_FieldPathSelectorName:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Project_FieldPathSelectorMetadata:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Project_FieldPathSelectorTitle:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]string)}
	case Project_FieldPathSelectorDescription:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]string)}
	case Project_FieldPathSelectorParentOrganization:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*organization.Reference)}
	case Project_FieldPathSelectorMultiRegionPolicy:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*multi_region_policy.MultiRegionPolicy)}
	case Project_FieldPathSelectorEnabledServices:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([][]*meta_service.Reference)}
	case Project_FieldPathSelectorBusinessTier:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]iam_common.BusinessTier)}
	case Project_FieldPathSelectorServiceTiers:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([][]*iam_common.ServiceBusinessTier)}
	case Project_FieldPathSelectorRootOrganization:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*organization.Name)}
	case Project_FieldPathSelectorAncestryPath:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([][]*organization.Name)}
	case Project_FieldPathSelectorServiceErrors:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]map[string]*iam_common.ServiceErrors)}
	case Project_FieldPathSelectorServicesGeneration:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
	return fpaov
}

func (fp *Project_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Project_FieldTerminalPath) WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue {
	switch fp.selector {
	case Project_FieldPathSelectorEnabledServices:
		return &Project_FieldTerminalPathArrayItemValue{Project_FieldTerminalPath: *fp, value: value.(*meta_service.Reference)}
	case Project_FieldPathSelectorServiceTiers:
		return &Project_FieldTerminalPathArrayItemValue{Project_FieldTerminalPath: *fp, value: value.(*iam_common.ServiceBusinessTier)}
	case Project_FieldPathSelectorAncestryPath:
		return &Project_FieldTerminalPathArrayItemValue{Project_FieldTerminalPath: *fp, value: value.(*organization.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type Project_FieldPathMap struct {
	key      string
	selector Project_FieldPathSelector
}

var _ Project_FieldPath = (*Project_FieldPathMap)(nil)

func (fpm *Project_FieldPathMap) Selector() Project_FieldPathSelector {
	return fpm.selector
}

func (fpm *Project_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *Project_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *Project_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Project
func (fpm *Project_FieldPathMap) Get(source *Project) (values []interface{}) {
	switch fpm.selector {
	case Project_FieldPathSelectorServiceErrors:
		if value, ok := source.GetServiceErrors()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
	}
	return
}

func (fpm *Project_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Project))
}

// GetSingle returns value by selected field map key from source Project
func (fpm *Project_FieldPathMap) GetSingle(source *Project) (interface{}, bool) {
	switch fpm.selector {
	case Project_FieldPathSelectorServiceErrors:
		res, ok := source.GetServiceErrors()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
	}
}

func (fpm *Project_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Project))
}

// GetDefault returns a default value of the field type
func (fpm *Project_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case Project_FieldPathSelectorServiceErrors:
		var v *iam_common.ServiceErrors
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
	}
}

func (fpm *Project_FieldPathMap) ClearValue(item *Project) {
	if item != nil {
		switch fpm.selector {
		case Project_FieldPathSelectorServiceErrors:
			delete(item.ServiceErrors, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
		}
	}
}

func (fpm *Project_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Project))
}

// IsLeaf - whether field path is holds simple value
func (fpm *Project_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case Project_FieldPathSelectorServiceErrors:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
	}
}

func (fpm *Project_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *Project_FieldPathMap) WithIValue(value interface{}) Project_FieldPathValue {
	switch fpm.selector {
	case Project_FieldPathSelectorServiceErrors:
		return &Project_FieldPathMapValue{Project_FieldPathMap: *fpm, value: value.(*iam_common.ServiceErrors)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
	}
}

func (fpm *Project_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *Project_FieldPathMap) WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues {
	switch fpm.selector {
	case Project_FieldPathSelectorServiceErrors:
		return &Project_FieldPathMapArrayOfValues{Project_FieldPathMap: *fpm, values: values.([]*iam_common.ServiceErrors)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpm.selector))
	}
}

func (fpm *Project_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *Project_FieldPathMap) WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *Project_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type Project_FieldSubPath struct {
	selector Project_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Project_FieldPath = (*Project_FieldSubPath)(nil)

func (fps *Project_FieldSubPath) Selector() Project_FieldPathSelector {
	return fps.selector
}
func (fps *Project_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Project_FieldSubPath) AsMultiRegionPolicySubPath() (multi_region_policy.MultiRegionPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(multi_region_policy.MultiRegionPolicy_FieldPath)
	return res, ok
}
func (fps *Project_FieldSubPath) AsServiceTiersSubPath() (iam_common.ServiceBusinessTier_FieldPath, bool) {
	res, ok := fps.subPath.(iam_common.ServiceBusinessTier_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Project_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Project_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Project
func (fps *Project_FieldSubPath) Get(source *Project) (values []interface{}) {
	switch fps.selector {
	case Project_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Project_FieldPathSelectorMultiRegionPolicy:
		values = append(values, fps.subPath.GetRaw(source.GetMultiRegionPolicy())...)
	case Project_FieldPathSelectorServiceTiers:
		for _, item := range source.GetServiceTiers() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fps.selector))
	}
	return
}

func (fps *Project_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Project))
}

// GetSingle returns value of selected field from source Project
func (fps *Project_FieldSubPath) GetSingle(source *Project) (interface{}, bool) {
	switch fps.selector {
	case Project_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Project_FieldPathSelectorMultiRegionPolicy:
		if source.GetMultiRegionPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMultiRegionPolicy())
	case Project_FieldPathSelectorServiceTiers:
		if len(source.GetServiceTiers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceTiers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fps.selector))
	}
}

func (fps *Project_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Project))
}

// GetDefault returns a default value of the field type
func (fps *Project_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Project_FieldSubPath) ClearValue(item *Project) {
	if item != nil {
		switch fps.selector {
		case Project_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Project_FieldPathSelectorMultiRegionPolicy:
			fps.subPath.ClearValueRaw(item.MultiRegionPolicy)
		case Project_FieldPathSelectorServiceTiers:
			for _, subItem := range item.ServiceTiers {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fps.selector))
		}
	}
}

func (fps *Project_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Project))
}

// IsLeaf - whether field path is holds simple value
func (fps *Project_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Project_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Project_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Project_FieldSubPath) WithIValue(value interface{}) Project_FieldPathValue {
	return &Project_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Project_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Project_FieldSubPath) WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues {
	return &Project_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Project_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Project_FieldSubPath) WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue {
	return &Project_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Project_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Project_FieldPathValue allows storing values for Project fields according to their type
type Project_FieldPathValue interface {
	Project_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Project)
	CompareWith(*Project) (cmp int, comparable bool)
}

func ParseProject_FieldPathValue(pathStr, valueStr string) (Project_FieldPathValue, error) {
	fp, err := ParseProject_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Project field path value from %s: %v", valueStr, err)
	}
	return fpv.(Project_FieldPathValue), nil
}

func MustParseProject_FieldPathValue(pathStr, valueStr string) Project_FieldPathValue {
	fpv, err := ParseProject_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Project_FieldTerminalPathValue struct {
	Project_FieldTerminalPath
	value interface{}
}

var _ Project_FieldPathValue = (*Project_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Project' as interface{}
func (fpv *Project_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Project_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsTitleValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsParentOrganizationValue() (*organization.Reference, bool) {
	res, ok := fpv.value.(*organization.Reference)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsMultiRegionPolicyValue() (*multi_region_policy.MultiRegionPolicy, bool) {
	res, ok := fpv.value.(*multi_region_policy.MultiRegionPolicy)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsEnabledServicesValue() ([]*meta_service.Reference, bool) {
	res, ok := fpv.value.([]*meta_service.Reference)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsBusinessTierValue() (iam_common.BusinessTier, bool) {
	res, ok := fpv.value.(iam_common.BusinessTier)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsServiceTiersValue() ([]*iam_common.ServiceBusinessTier, bool) {
	res, ok := fpv.value.([]*iam_common.ServiceBusinessTier)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsRootOrganizationValue() (*organization.Name, bool) {
	res, ok := fpv.value.(*organization.Name)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsAncestryPathValue() ([]*organization.Name, bool) {
	res, ok := fpv.value.([]*organization.Name)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsServiceErrorsValue() (map[string]*iam_common.ServiceErrors, bool) {
	res, ok := fpv.value.(map[string]*iam_common.ServiceErrors)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsServicesGenerationValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object Project
func (fpv *Project_FieldTerminalPathValue) SetTo(target **Project) {
	if *target == nil {
		*target = new(Project)
	}
	switch fpv.selector {
	case Project_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Project_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Project_FieldPathSelectorTitle:
		(*target).Title = fpv.value.(string)
	case Project_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Project_FieldPathSelectorParentOrganization:
		(*target).ParentOrganization = fpv.value.(*organization.Reference)
	case Project_FieldPathSelectorMultiRegionPolicy:
		(*target).MultiRegionPolicy = fpv.value.(*multi_region_policy.MultiRegionPolicy)
	case Project_FieldPathSelectorEnabledServices:
		(*target).EnabledServices = fpv.value.([]*meta_service.Reference)
	case Project_FieldPathSelectorBusinessTier:
		(*target).BusinessTier = fpv.value.(iam_common.BusinessTier)
	case Project_FieldPathSelectorServiceTiers:
		(*target).ServiceTiers = fpv.value.([]*iam_common.ServiceBusinessTier)
	case Project_FieldPathSelectorRootOrganization:
		(*target).RootOrganization = fpv.value.(*organization.Name)
	case Project_FieldPathSelectorAncestryPath:
		(*target).AncestryPath = fpv.value.([]*organization.Name)
	case Project_FieldPathSelectorServiceErrors:
		(*target).ServiceErrors = fpv.value.(map[string]*iam_common.ServiceErrors)
	case Project_FieldPathSelectorServicesGeneration:
		(*target).ServicesGeneration = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpv.selector))
	}
}

func (fpv *Project_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Project)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Project_FieldTerminalPathValue' with the value under path in 'Project'.
func (fpv *Project_FieldTerminalPathValue) CompareWith(source *Project) (int, bool) {
	switch fpv.selector {
	case Project_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorMetadata:
		return 0, false
	case Project_FieldPathSelectorTitle:
		leftValue := fpv.value.(string)
		rightValue := source.GetTitle()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorParentOrganization:
		leftValue := fpv.value.(*organization.Reference)
		rightValue := source.GetParentOrganization()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorMultiRegionPolicy:
		return 0, false
	case Project_FieldPathSelectorEnabledServices:
		return 0, false
	case Project_FieldPathSelectorBusinessTier:
		leftValue := fpv.value.(iam_common.BusinessTier)
		rightValue := source.GetBusinessTier()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorServiceTiers:
		return 0, false
	case Project_FieldPathSelectorRootOrganization:
		leftValue := fpv.value.(*organization.Name)
		rightValue := source.GetRootOrganization()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorAncestryPath:
		return 0, false
	case Project_FieldPathSelectorServiceErrors:
		return 0, false
	case Project_FieldPathSelectorServicesGeneration:
		leftValue := fpv.value.(int64)
		rightValue := source.GetServicesGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpv.selector))
	}
}

func (fpv *Project_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Project))
}

type Project_FieldPathMapValue struct {
	Project_FieldPathMap
	value interface{}
}

var _ Project_FieldPathValue = (*Project_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Project as interface{}
func (fpmv *Project_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *Project_FieldPathMapValue) AsServiceErrorsElementValue() (*iam_common.ServiceErrors, bool) {
	res, ok := fpmv.value.(*iam_common.ServiceErrors)
	return res, ok
}

// SetTo stores value for selected field in Project
func (fpmv *Project_FieldPathMapValue) SetTo(target **Project) {
	if *target == nil {
		*target = new(Project)
	}
	switch fpmv.selector {
	case Project_FieldPathSelectorServiceErrors:
		if (*target).ServiceErrors == nil {
			(*target).ServiceErrors = make(map[string]*iam_common.ServiceErrors)
		}
		(*target).ServiceErrors[fpmv.key] = fpmv.value.(*iam_common.ServiceErrors)
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpmv.selector))
	}
}

func (fpmv *Project_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Project)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Project_FieldPathMapValue' with the value under path in 'Project'.
func (fpmv *Project_FieldPathMapValue) CompareWith(source *Project) (int, bool) {
	switch fpmv.selector {
	case Project_FieldPathSelectorServiceErrors:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpmv.selector))
	}
}

func (fpmv *Project_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Project))
}

type Project_FieldSubPathValue struct {
	Project_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Project_FieldPathValue = (*Project_FieldSubPathValue)(nil)

func (fpvs *Project_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Project_FieldSubPathValue) AsMultiRegionPolicyPathValue() (multi_region_policy.MultiRegionPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(multi_region_policy.MultiRegionPolicy_FieldPathValue)
	return res, ok
}
func (fpvs *Project_FieldSubPathValue) AsServiceTiersPathValue() (iam_common.ServiceBusinessTier_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(iam_common.ServiceBusinessTier_FieldPathValue)
	return res, ok
}

func (fpvs *Project_FieldSubPathValue) SetTo(target **Project) {
	if *target == nil {
		*target = new(Project)
	}
	switch fpvs.Selector() {
	case Project_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Project_FieldPathSelectorMultiRegionPolicy:
		fpvs.subPathValue.(multi_region_policy.MultiRegionPolicy_FieldPathValue).SetTo(&(*target).MultiRegionPolicy)
	case Project_FieldPathSelectorServiceTiers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpvs.Selector()))
	}
}

func (fpvs *Project_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Project)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Project_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Project_FieldSubPathValue) CompareWith(source *Project) (int, bool) {
	switch fpvs.Selector() {
	case Project_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Project_FieldPathSelectorMultiRegionPolicy:
		return fpvs.subPathValue.(multi_region_policy.MultiRegionPolicy_FieldPathValue).CompareWith(source.GetMultiRegionPolicy())
	case Project_FieldPathSelectorServiceTiers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpvs.Selector()))
	}
}

func (fpvs *Project_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Project))
}

// Project_FieldPathArrayItemValue allows storing single item in Path-specific values for Project according to their type
// Present only for array (repeated) types.
type Project_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Project_FieldPath
	ContainsValue(*Project) bool
}

// ParseProject_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProject_FieldPathArrayItemValue(pathStr, valueStr string) (Project_FieldPathArrayItemValue, error) {
	fp, err := ParseProject_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Project field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Project_FieldPathArrayItemValue), nil
}

func MustParseProject_FieldPathArrayItemValue(pathStr, valueStr string) Project_FieldPathArrayItemValue {
	fpaiv, err := ParseProject_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Project_FieldTerminalPathArrayItemValue struct {
	Project_FieldTerminalPath
	value interface{}
}

var _ Project_FieldPathArrayItemValue = (*Project_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Project as interface{}
func (fpaiv *Project_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Project_FieldTerminalPathArrayItemValue) AsEnabledServicesItemValue() (*meta_service.Reference, bool) {
	res, ok := fpaiv.value.(*meta_service.Reference)
	return res, ok
}
func (fpaiv *Project_FieldTerminalPathArrayItemValue) AsServiceTiersItemValue() (*iam_common.ServiceBusinessTier, bool) {
	res, ok := fpaiv.value.(*iam_common.ServiceBusinessTier)
	return res, ok
}
func (fpaiv *Project_FieldTerminalPathArrayItemValue) AsAncestryPathItemValue() (*organization.Name, bool) {
	res, ok := fpaiv.value.(*organization.Name)
	return res, ok
}

func (fpaiv *Project_FieldTerminalPathArrayItemValue) GetSingle(source *Project) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Project_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Project))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Project'
func (fpaiv *Project_FieldTerminalPathArrayItemValue) ContainsValue(source *Project) bool {
	slice := fpaiv.Project_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Project_FieldSubPathArrayItemValue struct {
	Project_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Project_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Project_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Project_FieldSubPathArrayItemValue) AsMultiRegionPolicyPathItemValue() (multi_region_policy.MultiRegionPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(multi_region_policy.MultiRegionPolicy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Project_FieldSubPathArrayItemValue) AsServiceTiersPathItemValue() (iam_common.ServiceBusinessTier_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(iam_common.ServiceBusinessTier_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Project'
func (fpaivs *Project_FieldSubPathArrayItemValue) ContainsValue(source *Project) bool {
	switch fpaivs.Selector() {
	case Project_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Project_FieldPathSelectorMultiRegionPolicy:
		return fpaivs.subPathItemValue.(multi_region_policy.MultiRegionPolicy_FieldPathArrayItemValue).ContainsValue(source.GetMultiRegionPolicy())
	case Project_FieldPathSelectorServiceTiers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpaivs.Selector()))
	}
}

// Project_FieldPathArrayOfValues allows storing slice of values for Project fields according to their type
type Project_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Project_FieldPath
}

func ParseProject_FieldPathArrayOfValues(pathStr, valuesStr string) (Project_FieldPathArrayOfValues, error) {
	fp, err := ParseProject_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Project field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Project_FieldPathArrayOfValues), nil
}

func MustParseProject_FieldPathArrayOfValues(pathStr, valuesStr string) Project_FieldPathArrayOfValues {
	fpaov, err := ParseProject_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Project_FieldTerminalPathArrayOfValues struct {
	Project_FieldTerminalPath
	values interface{}
}

var _ Project_FieldPathArrayOfValues = (*Project_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Project_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Project_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorTitle:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorParentOrganization:
		for _, v := range fpaov.values.([]*organization.Reference) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorMultiRegionPolicy:
		for _, v := range fpaov.values.([]*multi_region_policy.MultiRegionPolicy) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorEnabledServices:
		for _, v := range fpaov.values.([][]*meta_service.Reference) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorBusinessTier:
		for _, v := range fpaov.values.([]iam_common.BusinessTier) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorServiceTiers:
		for _, v := range fpaov.values.([][]*iam_common.ServiceBusinessTier) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorRootOrganization:
		for _, v := range fpaov.values.([]*organization.Name) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorAncestryPath:
		for _, v := range fpaov.values.([][]*organization.Name) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorServiceErrors:
		for _, v := range fpaov.values.([]map[string]*iam_common.ServiceErrors) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorServicesGeneration:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsTitleArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsParentOrganizationArrayOfValues() ([]*organization.Reference, bool) {
	res, ok := fpaov.values.([]*organization.Reference)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsMultiRegionPolicyArrayOfValues() ([]*multi_region_policy.MultiRegionPolicy, bool) {
	res, ok := fpaov.values.([]*multi_region_policy.MultiRegionPolicy)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsEnabledServicesArrayOfValues() ([][]*meta_service.Reference, bool) {
	res, ok := fpaov.values.([][]*meta_service.Reference)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsBusinessTierArrayOfValues() ([]iam_common.BusinessTier, bool) {
	res, ok := fpaov.values.([]iam_common.BusinessTier)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsServiceTiersArrayOfValues() ([][]*iam_common.ServiceBusinessTier, bool) {
	res, ok := fpaov.values.([][]*iam_common.ServiceBusinessTier)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsRootOrganizationArrayOfValues() ([]*organization.Name, bool) {
	res, ok := fpaov.values.([]*organization.Name)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsAncestryPathArrayOfValues() ([][]*organization.Name, bool) {
	res, ok := fpaov.values.([][]*organization.Name)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsServiceErrorsArrayOfValues() ([]map[string]*iam_common.ServiceErrors, bool) {
	res, ok := fpaov.values.([]map[string]*iam_common.ServiceErrors)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsServicesGenerationArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}

type Project_FieldPathMapArrayOfValues struct {
	Project_FieldPathMap
	values interface{}
}

var _ Project_FieldPathArrayOfValues = (*Project_FieldPathMapArrayOfValues)(nil)

func (fpmaov *Project_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case Project_FieldPathSelectorServiceErrors:
		for _, v := range fpmaov.values.([]*iam_common.ServiceErrors) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *Project_FieldPathMapArrayOfValues) AsServiceErrorsArrayOfElementValues() ([]*iam_common.ServiceErrors, bool) {
	res, ok := fpmaov.values.([]*iam_common.ServiceErrors)
	return res, ok
}

type Project_FieldSubPathArrayOfValues struct {
	Project_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Project_FieldPathArrayOfValues = (*Project_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Project_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Project_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Project_FieldSubPathArrayOfValues) AsMultiRegionPolicyPathArrayOfValues() (multi_region_policy.MultiRegionPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(multi_region_policy.MultiRegionPolicy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Project_FieldSubPathArrayOfValues) AsServiceTiersPathArrayOfValues() (iam_common.ServiceBusinessTier_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(iam_common.ServiceBusinessTier_FieldPathArrayOfValues)
	return res, ok
}
