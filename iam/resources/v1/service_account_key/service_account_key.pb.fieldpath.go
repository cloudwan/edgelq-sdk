// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/service_account_key.proto
// DO NOT EDIT!!!

package service_account_key

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &service_account.ServiceAccount{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ServiceAccountKey_FieldPath interface {
	gotenobject.FieldPath
	Selector() ServiceAccountKey_FieldPathSelector
	Get(source *ServiceAccountKey) []interface{}
	GetSingle(source *ServiceAccountKey) (interface{}, bool)
	ClearValue(item *ServiceAccountKey)

	// Those methods build corresponding ServiceAccountKey_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ServiceAccountKey_FieldPathValue
	WithIArrayOfValues(values interface{}) ServiceAccountKey_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ServiceAccountKey_FieldPathArrayItemValue
}

type ServiceAccountKey_FieldPathSelector int32

const (
	ServiceAccountKey_FieldPathSelectorName           ServiceAccountKey_FieldPathSelector = 0
	ServiceAccountKey_FieldPathSelectorMetadata       ServiceAccountKey_FieldPathSelector = 1
	ServiceAccountKey_FieldPathSelectorDisplayName    ServiceAccountKey_FieldPathSelector = 2
	ServiceAccountKey_FieldPathSelectorDescription    ServiceAccountKey_FieldPathSelector = 3
	ServiceAccountKey_FieldPathSelectorPublicKeyData  ServiceAccountKey_FieldPathSelector = 4
	ServiceAccountKey_FieldPathSelectorPrivateKeyData ServiceAccountKey_FieldPathSelector = 5
	ServiceAccountKey_FieldPathSelectorApiKey         ServiceAccountKey_FieldPathSelector = 6
	ServiceAccountKey_FieldPathSelectorAlgorithm      ServiceAccountKey_FieldPathSelector = 7
	ServiceAccountKey_FieldPathSelectorValidNotBefore ServiceAccountKey_FieldPathSelector = 8
	ServiceAccountKey_FieldPathSelectorValidNotAfter  ServiceAccountKey_FieldPathSelector = 9
)

func (s ServiceAccountKey_FieldPathSelector) String() string {
	switch s {
	case ServiceAccountKey_FieldPathSelectorName:
		return "name"
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return "metadata"
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		return "display_name"
	case ServiceAccountKey_FieldPathSelectorDescription:
		return "description"
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		return "public_key_data"
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		return "private_key_data"
	case ServiceAccountKey_FieldPathSelectorApiKey:
		return "api_key"
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		return "algorithm"
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		return "valid_not_before"
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		return "valid_not_after"
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", s))
	}
}

func BuildServiceAccountKey_FieldPath(fp gotenobject.RawFieldPath) (ServiceAccountKey_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ServiceAccountKey")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorName}, nil
		case "metadata":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorDisplayName}, nil
		case "description":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorDescription}, nil
		case "public_key_data", "publicKeyData", "public-key-data":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorPublicKeyData}, nil
		case "private_key_data", "privateKeyData", "private-key-data":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorPrivateKeyData}, nil
		case "api_key", "apiKey", "api-key":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorApiKey}, nil
		case "algorithm":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorAlgorithm}, nil
		case "valid_not_before", "validNotBefore", "valid-not-before":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorValidNotBefore}, nil
		case "valid_not_after", "validNotAfter", "valid-not-after":
			return &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorValidNotAfter}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ServiceAccountKey_FieldSubPath{selector: ServiceAccountKey_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ServiceAccountKey", fp)
}

func ParseServiceAccountKey_FieldPath(rawField string) (ServiceAccountKey_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildServiceAccountKey_FieldPath(fp)
}

func MustParseServiceAccountKey_FieldPath(rawField string) ServiceAccountKey_FieldPath {
	fp, err := ParseServiceAccountKey_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ServiceAccountKey_FieldTerminalPath struct {
	selector ServiceAccountKey_FieldPathSelector
}

var _ ServiceAccountKey_FieldPath = (*ServiceAccountKey_FieldTerminalPath)(nil)

func (fp *ServiceAccountKey_FieldTerminalPath) Selector() ServiceAccountKey_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ServiceAccountKey_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ServiceAccountKey_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ServiceAccountKey
func (fp *ServiceAccountKey_FieldTerminalPath) Get(source *ServiceAccountKey) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ServiceAccountKey_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ServiceAccountKey_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ServiceAccountKey_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ServiceAccountKey_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case ServiceAccountKey_FieldPathSelectorPublicKeyData:
			values = append(values, source.PublicKeyData)
		case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
			values = append(values, source.PrivateKeyData)
		case ServiceAccountKey_FieldPathSelectorApiKey:
			values = append(values, source.ApiKey)
		case ServiceAccountKey_FieldPathSelectorAlgorithm:
			values = append(values, source.Algorithm)
		case ServiceAccountKey_FieldPathSelectorValidNotBefore:
			if source.ValidNotBefore != nil {
				values = append(values, source.ValidNotBefore)
			}
		case ServiceAccountKey_FieldPathSelectorValidNotAfter:
			if source.ValidNotAfter != nil {
				values = append(values, source.ValidNotAfter)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
		}
	}
	return
}

func (fp *ServiceAccountKey_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ServiceAccountKey))
}

// GetSingle returns value pointed by specific field of from source ServiceAccountKey
func (fp *ServiceAccountKey_FieldTerminalPath) GetSingle(source *ServiceAccountKey) (interface{}, bool) {
	switch fp.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ServiceAccountKey_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ServiceAccountKey_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		return source.GetPublicKeyData(), source != nil
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		return source.GetPrivateKeyData(), source != nil
	case ServiceAccountKey_FieldPathSelectorApiKey:
		return source.GetApiKey(), source != nil
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		return source.GetAlgorithm(), source != nil
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		res := source.GetValidNotBefore()
		return res, res != nil
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		res := source.GetValidNotAfter()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
	}
}

func (fp *ServiceAccountKey_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ServiceAccountKey))
}

// GetDefault returns a default value of the field type
func (fp *ServiceAccountKey_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		return (*Name)(nil)
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		return ""
	case ServiceAccountKey_FieldPathSelectorDescription:
		return ""
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		return ""
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		return ""
	case ServiceAccountKey_FieldPathSelectorApiKey:
		return ""
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		return ServiceAccountKey_KEY_ALGORITHM_UNSPECIFIED
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		return (*timestamppb.Timestamp)(nil)
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		return (*timestamppb.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
	}
}

func (fp *ServiceAccountKey_FieldTerminalPath) ClearValue(item *ServiceAccountKey) {
	if item != nil {
		switch fp.selector {
		case ServiceAccountKey_FieldPathSelectorName:
			item.Name = nil
		case ServiceAccountKey_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ServiceAccountKey_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ServiceAccountKey_FieldPathSelectorDescription:
			item.Description = ""
		case ServiceAccountKey_FieldPathSelectorPublicKeyData:
			item.PublicKeyData = ""
		case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
			item.PrivateKeyData = ""
		case ServiceAccountKey_FieldPathSelectorApiKey:
			item.ApiKey = ""
		case ServiceAccountKey_FieldPathSelectorAlgorithm:
			item.Algorithm = ServiceAccountKey_KEY_ALGORITHM_UNSPECIFIED
		case ServiceAccountKey_FieldPathSelectorValidNotBefore:
			item.ValidNotBefore = nil
		case ServiceAccountKey_FieldPathSelectorValidNotAfter:
			item.ValidNotAfter = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
		}
	}
}

func (fp *ServiceAccountKey_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ServiceAccountKey))
}

// IsLeaf - whether field path is holds simple value
func (fp *ServiceAccountKey_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ServiceAccountKey_FieldPathSelectorName ||
		fp.selector == ServiceAccountKey_FieldPathSelectorDisplayName ||
		fp.selector == ServiceAccountKey_FieldPathSelectorDescription ||
		fp.selector == ServiceAccountKey_FieldPathSelectorPublicKeyData ||
		fp.selector == ServiceAccountKey_FieldPathSelectorPrivateKeyData ||
		fp.selector == ServiceAccountKey_FieldPathSelectorApiKey ||
		fp.selector == ServiceAccountKey_FieldPathSelectorAlgorithm ||
		fp.selector == ServiceAccountKey_FieldPathSelectorValidNotBefore ||
		fp.selector == ServiceAccountKey_FieldPathSelectorValidNotAfter
}

func (fp *ServiceAccountKey_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ServiceAccountKey_FieldTerminalPath) WithIValue(value interface{}) ServiceAccountKey_FieldPathValue {
	switch fp.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(*Name)}
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccountKey_FieldPathSelectorDescription:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccountKey_FieldPathSelectorApiKey:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(ServiceAccountKey_Algorithm)}
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		return &ServiceAccountKey_FieldTerminalPathValue{ServiceAccountKey_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
	}
}

func (fp *ServiceAccountKey_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ServiceAccountKey_FieldTerminalPath) WithIArrayOfValues(values interface{}) ServiceAccountKey_FieldPathArrayOfValues {
	fpaov := &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp}
	switch fp.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccountKey_FieldPathSelectorDescription:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccountKey_FieldPathSelectorApiKey:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]ServiceAccountKey_Algorithm)}
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		return &ServiceAccountKey_FieldTerminalPathArrayOfValues{ServiceAccountKey_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
	}
	return fpaov
}

func (fp *ServiceAccountKey_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ServiceAccountKey_FieldTerminalPath) WithIArrayItemValue(value interface{}) ServiceAccountKey_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fp.selector))
	}
}

func (fp *ServiceAccountKey_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ServiceAccountKey_FieldSubPath struct {
	selector ServiceAccountKey_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ServiceAccountKey_FieldPath = (*ServiceAccountKey_FieldSubPath)(nil)

func (fps *ServiceAccountKey_FieldSubPath) Selector() ServiceAccountKey_FieldPathSelector {
	return fps.selector
}
func (fps *ServiceAccountKey_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ServiceAccountKey_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ServiceAccountKey_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ServiceAccountKey
func (fps *ServiceAccountKey_FieldSubPath) Get(source *ServiceAccountKey) (values []interface{}) {
	switch fps.selector {
	case ServiceAccountKey_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fps.selector))
	}
	return
}

func (fps *ServiceAccountKey_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ServiceAccountKey))
}

// GetSingle returns value of selected field from source ServiceAccountKey
func (fps *ServiceAccountKey_FieldSubPath) GetSingle(source *ServiceAccountKey) (interface{}, bool) {
	switch fps.selector {
	case ServiceAccountKey_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fps.selector))
	}
}

func (fps *ServiceAccountKey_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ServiceAccountKey))
}

// GetDefault returns a default value of the field type
func (fps *ServiceAccountKey_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ServiceAccountKey_FieldSubPath) ClearValue(item *ServiceAccountKey) {
	if item != nil {
		switch fps.selector {
		case ServiceAccountKey_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fps.selector))
		}
	}
}

func (fps *ServiceAccountKey_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ServiceAccountKey))
}

// IsLeaf - whether field path is holds simple value
func (fps *ServiceAccountKey_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ServiceAccountKey_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ServiceAccountKey_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ServiceAccountKey_FieldSubPath) WithIValue(value interface{}) ServiceAccountKey_FieldPathValue {
	return &ServiceAccountKey_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ServiceAccountKey_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ServiceAccountKey_FieldSubPath) WithIArrayOfValues(values interface{}) ServiceAccountKey_FieldPathArrayOfValues {
	return &ServiceAccountKey_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ServiceAccountKey_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ServiceAccountKey_FieldSubPath) WithIArrayItemValue(value interface{}) ServiceAccountKey_FieldPathArrayItemValue {
	return &ServiceAccountKey_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ServiceAccountKey_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ServiceAccountKey_FieldPathValue allows storing values for ServiceAccountKey fields according to their type
type ServiceAccountKey_FieldPathValue interface {
	ServiceAccountKey_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ServiceAccountKey)
	CompareWith(*ServiceAccountKey) (cmp int, comparable bool)
}

func ParseServiceAccountKey_FieldPathValue(pathStr, valueStr string) (ServiceAccountKey_FieldPathValue, error) {
	fp, err := ParseServiceAccountKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ServiceAccountKey field path value from %s: %v", valueStr, err)
	}
	return fpv.(ServiceAccountKey_FieldPathValue), nil
}

func MustParseServiceAccountKey_FieldPathValue(pathStr, valueStr string) ServiceAccountKey_FieldPathValue {
	fpv, err := ParseServiceAccountKey_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ServiceAccountKey_FieldTerminalPathValue struct {
	ServiceAccountKey_FieldTerminalPath
	value interface{}
}

var _ ServiceAccountKey_FieldPathValue = (*ServiceAccountKey_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ServiceAccountKey' as interface{}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsPublicKeyDataValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsPrivateKeyDataValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsApiKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsAlgorithmValue() (ServiceAccountKey_Algorithm, bool) {
	res, ok := fpv.value.(ServiceAccountKey_Algorithm)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsValidNotBeforeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *ServiceAccountKey_FieldTerminalPathValue) AsValidNotAfterValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object ServiceAccountKey
func (fpv *ServiceAccountKey_FieldTerminalPathValue) SetTo(target **ServiceAccountKey) {
	if *target == nil {
		*target = new(ServiceAccountKey)
	}
	switch fpv.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ServiceAccountKey_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ServiceAccountKey_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		(*target).PublicKeyData = fpv.value.(string)
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		(*target).PrivateKeyData = fpv.value.(string)
	case ServiceAccountKey_FieldPathSelectorApiKey:
		(*target).ApiKey = fpv.value.(string)
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		(*target).Algorithm = fpv.value.(ServiceAccountKey_Algorithm)
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		(*target).ValidNotBefore = fpv.value.(*timestamppb.Timestamp)
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		(*target).ValidNotAfter = fpv.value.(*timestamppb.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fpv.selector))
	}
}

func (fpv *ServiceAccountKey_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ServiceAccountKey)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ServiceAccountKey_FieldTerminalPathValue' with the value under path in 'ServiceAccountKey'.
func (fpv *ServiceAccountKey_FieldTerminalPathValue) CompareWith(source *ServiceAccountKey) (int, bool) {
	switch fpv.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return 0, false
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		leftValue := fpv.value.(string)
		rightValue := source.GetPublicKeyData()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrivateKeyData()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorApiKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetApiKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		leftValue := fpv.value.(ServiceAccountKey_Algorithm)
		rightValue := source.GetAlgorithm()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetValidNotBefore()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetValidNotAfter()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fpv.selector))
	}
}

func (fpv *ServiceAccountKey_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ServiceAccountKey))
}

type ServiceAccountKey_FieldSubPathValue struct {
	ServiceAccountKey_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ServiceAccountKey_FieldPathValue = (*ServiceAccountKey_FieldSubPathValue)(nil)

func (fpvs *ServiceAccountKey_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *ServiceAccountKey_FieldSubPathValue) SetTo(target **ServiceAccountKey) {
	if *target == nil {
		*target = new(ServiceAccountKey)
	}
	switch fpvs.Selector() {
	case ServiceAccountKey_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fpvs.Selector()))
	}
}

func (fpvs *ServiceAccountKey_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ServiceAccountKey)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ServiceAccountKey_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ServiceAccountKey_FieldSubPathValue) CompareWith(source *ServiceAccountKey) (int, bool) {
	switch fpvs.Selector() {
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fpvs.Selector()))
	}
}

func (fpvs *ServiceAccountKey_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ServiceAccountKey))
}

// ServiceAccountKey_FieldPathArrayItemValue allows storing single item in Path-specific values for ServiceAccountKey according to their type
// Present only for array (repeated) types.
type ServiceAccountKey_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ServiceAccountKey_FieldPath
	ContainsValue(*ServiceAccountKey) bool
}

// ParseServiceAccountKey_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseServiceAccountKey_FieldPathArrayItemValue(pathStr, valueStr string) (ServiceAccountKey_FieldPathArrayItemValue, error) {
	fp, err := ParseServiceAccountKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ServiceAccountKey field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ServiceAccountKey_FieldPathArrayItemValue), nil
}

func MustParseServiceAccountKey_FieldPathArrayItemValue(pathStr, valueStr string) ServiceAccountKey_FieldPathArrayItemValue {
	fpaiv, err := ParseServiceAccountKey_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ServiceAccountKey_FieldTerminalPathArrayItemValue struct {
	ServiceAccountKey_FieldTerminalPath
	value interface{}
}

var _ ServiceAccountKey_FieldPathArrayItemValue = (*ServiceAccountKey_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ServiceAccountKey as interface{}
func (fpaiv *ServiceAccountKey_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ServiceAccountKey_FieldTerminalPathArrayItemValue) GetSingle(source *ServiceAccountKey) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ServiceAccountKey_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ServiceAccountKey))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ServiceAccountKey'
func (fpaiv *ServiceAccountKey_FieldTerminalPathArrayItemValue) ContainsValue(source *ServiceAccountKey) bool {
	slice := fpaiv.ServiceAccountKey_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ServiceAccountKey_FieldSubPathArrayItemValue struct {
	ServiceAccountKey_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ServiceAccountKey_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ServiceAccountKey_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ServiceAccountKey'
func (fpaivs *ServiceAccountKey_FieldSubPathArrayItemValue) ContainsValue(source *ServiceAccountKey) bool {
	switch fpaivs.Selector() {
	case ServiceAccountKey_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccountKey: %d", fpaivs.Selector()))
	}
}

// ServiceAccountKey_FieldPathArrayOfValues allows storing slice of values for ServiceAccountKey fields according to their type
type ServiceAccountKey_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ServiceAccountKey_FieldPath
}

func ParseServiceAccountKey_FieldPathArrayOfValues(pathStr, valuesStr string) (ServiceAccountKey_FieldPathArrayOfValues, error) {
	fp, err := ParseServiceAccountKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ServiceAccountKey field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ServiceAccountKey_FieldPathArrayOfValues), nil
}

func MustParseServiceAccountKey_FieldPathArrayOfValues(pathStr, valuesStr string) ServiceAccountKey_FieldPathArrayOfValues {
	fpaov, err := ParseServiceAccountKey_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ServiceAccountKey_FieldTerminalPathArrayOfValues struct {
	ServiceAccountKey_FieldTerminalPath
	values interface{}
}

var _ ServiceAccountKey_FieldPathArrayOfValues = (*ServiceAccountKey_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ServiceAccountKey_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorPublicKeyData:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorPrivateKeyData:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorApiKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorAlgorithm:
		for _, v := range fpaov.values.([]ServiceAccountKey_Algorithm) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorValidNotBefore:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case ServiceAccountKey_FieldPathSelectorValidNotAfter:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsPublicKeyDataArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsPrivateKeyDataArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsApiKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsAlgorithmArrayOfValues() ([]ServiceAccountKey_Algorithm, bool) {
	res, ok := fpaov.values.([]ServiceAccountKey_Algorithm)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsValidNotBeforeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *ServiceAccountKey_FieldTerminalPathArrayOfValues) AsValidNotAfterArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}

type ServiceAccountKey_FieldSubPathArrayOfValues struct {
	ServiceAccountKey_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ServiceAccountKey_FieldPathArrayOfValues = (*ServiceAccountKey_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ServiceAccountKey_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ServiceAccountKey_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
