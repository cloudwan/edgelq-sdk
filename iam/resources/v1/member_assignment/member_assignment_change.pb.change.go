// Code generated by protoc-gen-goten-resource
// Resource change: MemberAssignmentChange
// DO NOT EDIT!!!

package member_assignment

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &fieldmaskpb.FieldMask{}
)

func (c *MemberAssignmentChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MemberAssignmentChange_Added_)
	return ok
}

func (c *MemberAssignmentChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MemberAssignmentChange_Modified_)
	return ok
}

func (c *MemberAssignmentChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MemberAssignmentChange_Current_)
	return ok
}

func (c *MemberAssignmentChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MemberAssignmentChange_Removed_)
	return ok
}

func (c *MemberAssignmentChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *MemberAssignmentChange_Added_:
		return cType.Added.ViewIndex
	case *MemberAssignmentChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *MemberAssignmentChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *MemberAssignmentChange_Removed_:
		return cType.Removed.ViewIndex
	case *MemberAssignmentChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *MemberAssignmentChange) GetMemberAssignment() *MemberAssignment {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *MemberAssignmentChange_Added_:
		return cType.Added.MemberAssignment
	case *MemberAssignmentChange_Modified_:
		return cType.Modified.MemberAssignment
	case *MemberAssignmentChange_Current_:
		return cType.Current.MemberAssignment
	case *MemberAssignmentChange_Removed_:
		return nil
	}
	return nil
}

func (c *MemberAssignmentChange) GetRawResource() gotenresource.Resource {
	return c.GetMemberAssignment()
}

func (c *MemberAssignmentChange) GetMemberAssignmentName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *MemberAssignmentChange_Added_:
		return cType.Added.MemberAssignment.GetName()
	case *MemberAssignmentChange_Modified_:
		return cType.Modified.Name
	case *MemberAssignmentChange_Current_:
		return cType.Current.MemberAssignment.GetName()
	case *MemberAssignmentChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *MemberAssignmentChange) GetRawName() gotenresource.Name {
	return c.GetMemberAssignmentName()
}

func (c *MemberAssignmentChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &MemberAssignmentChange_Added_{
		Added: &MemberAssignmentChange_Added{
			MemberAssignment: snapshot.(*MemberAssignment),
			ViewIndex:        int32(idx),
		},
	}
}

func (c *MemberAssignmentChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &MemberAssignmentChange_Modified_{
		Modified: &MemberAssignmentChange_Modified{
			Name:              name.(*Name),
			MemberAssignment:  snapshot.(*MemberAssignment),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *MemberAssignmentChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &MemberAssignmentChange_Current_{
		Current: &MemberAssignmentChange_Current{
			MemberAssignment: snapshot.(*MemberAssignment),
		},
	}
}

func (c *MemberAssignmentChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &MemberAssignmentChange_Removed_{
		Removed: &MemberAssignmentChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
