// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/member_assignment.proto
// DO NOT EDIT!!!

package member_assignment

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role_binding"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_common.PCR{}
	_ = &organization.Organization{}
	_ = &role_binding.RoleBinding{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

func (o *MemberAssignment) GotenObjectExt() {}

func (o *MemberAssignment) MakeFullFieldMask() *MemberAssignment_FieldMask {
	return FullMemberAssignment_FieldMask()
}

func (o *MemberAssignment) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullMemberAssignment_FieldMask()
}

func (o *MemberAssignment) MakeDiffFieldMask(other *MemberAssignment) *MemberAssignment_FieldMask {
	if o == nil && other == nil {
		return &MemberAssignment_FieldMask{}
	}
	if o == nil || other == nil {
		return FullMemberAssignment_FieldMask()
	}

	res := &MemberAssignment_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &MemberAssignment_FieldSubPath{selector: MemberAssignment_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetScope().String() != other.GetScope().String() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScope})
	}
	if o.GetScopeTitle() != other.GetScopeTitle() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeTitle})
	}
	if o.GetParentOrganization().String() != other.GetParentOrganization().String() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorParentOrganization})
	}
	{
		subMask := o.GetScopeMetadata().MakeDiffFieldMask(other.GetScopeMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &MemberAssignment_FieldSubPath{selector: MemberAssignment_FieldPathSelectorScopeMetadata, subPath: subpath})
			}
		}
	}
	if o.GetMultiRegionControlRegion() != other.GetMultiRegionControlRegion() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMultiRegionControlRegion})
	}

	if len(o.GetMultiRegionEnabledRegions()) == len(other.GetMultiRegionEnabledRegions()) {
		for i, lValue := range o.GetMultiRegionEnabledRegions() {
			rValue := other.GetMultiRegionEnabledRegions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions})
	}

	if len(o.GetScopeServices()) == len(other.GetScopeServices()) {
		for i, lValue := range o.GetScopeServices() {
			rValue := other.GetScopeServices()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeServices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeServices})
	}
	if o.GetBusinessTier() != other.GetBusinessTier() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorBusinessTier})
	}
	if o.GetMember() != other.GetMember() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMember})
	}
	if o.GetMemberRegion() != other.GetMemberRegion() {
		res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMemberRegion})
	}
	{
		subMask := o.GetCtrlStatus().MakeDiffFieldMask(other.GetCtrlStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorCtrlStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &MemberAssignment_FieldSubPath{selector: MemberAssignment_FieldPathSelectorCtrlStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *MemberAssignment) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*MemberAssignment))
}

func (o *MemberAssignment) Clone() *MemberAssignment {
	if o == nil {
		return nil
	}
	result := &MemberAssignment{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o.Scope == nil {
		result.Scope = nil
	} else if data, err := o.Scope.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Scope = &role_binding.ParentName{}
		if err := result.Scope.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ScopeTitle = o.ScopeTitle
	if o.ParentOrganization == nil {
		result.ParentOrganization = nil
	} else if data, err := o.ParentOrganization.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ParentOrganization = &organization.Name{}
		if err := result.ParentOrganization.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ScopeMetadata = o.ScopeMetadata.Clone()
	result.MultiRegionControlRegion = o.MultiRegionControlRegion
	result.MultiRegionEnabledRegions = make([]string, len(o.MultiRegionEnabledRegions))
	for i, sourceValue := range o.MultiRegionEnabledRegions {
		result.MultiRegionEnabledRegions[i] = sourceValue
	}
	result.ScopeServices = make([]*meta_service.Name, len(o.ScopeServices))
	for i, sourceValue := range o.ScopeServices {
		if sourceValue == nil {
			result.ScopeServices[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.ScopeServices[i] = &meta_service.Name{}
			if err := result.ScopeServices[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.BusinessTier = o.BusinessTier
	result.Member = o.Member
	result.MemberRegion = o.MemberRegion
	result.CtrlStatus = o.CtrlStatus.Clone()
	return result
}

func (o *MemberAssignment) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *MemberAssignment) Merge(source *MemberAssignment) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetScope() != nil {
		if data, err := source.GetScope().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Scope = &role_binding.ParentName{}
			if err := o.Scope.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Scope = nil
	}
	o.ScopeTitle = source.GetScopeTitle()
	if source.GetParentOrganization() != nil {
		if data, err := source.GetParentOrganization().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ParentOrganization = &organization.Name{}
			if err := o.ParentOrganization.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ParentOrganization = nil
	}
	if source.GetScopeMetadata() != nil {
		if o.ScopeMetadata == nil {
			o.ScopeMetadata = new(meta.Meta)
		}
		o.ScopeMetadata.Merge(source.GetScopeMetadata())
	}
	o.MultiRegionControlRegion = source.GetMultiRegionControlRegion()
	for _, sourceValue := range source.GetMultiRegionEnabledRegions() {
		exists := false
		for _, currentValue := range o.MultiRegionEnabledRegions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.MultiRegionEnabledRegions = append(o.MultiRegionEnabledRegions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetScopeServices() {
		exists := false
		for _, currentValue := range o.ScopeServices {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *meta_service.Name
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &meta_service.Name{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.ScopeServices = append(o.ScopeServices, newDstElement)
		}
	}

	o.BusinessTier = source.GetBusinessTier()
	o.Member = source.GetMember()
	o.MemberRegion = source.GetMemberRegion()
	if source.GetCtrlStatus() != nil {
		if o.CtrlStatus == nil {
			o.CtrlStatus = new(MemberAssignment_WorkStatus)
		}
		o.CtrlStatus.Merge(source.GetCtrlStatus())
	}
}

func (o *MemberAssignment) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*MemberAssignment))
}

func (o *MemberAssignment_WorkStatus) GotenObjectExt() {}

func (o *MemberAssignment_WorkStatus) MakeFullFieldMask() *MemberAssignment_WorkStatus_FieldMask {
	return FullMemberAssignment_WorkStatus_FieldMask()
}

func (o *MemberAssignment_WorkStatus) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullMemberAssignment_WorkStatus_FieldMask()
}

func (o *MemberAssignment_WorkStatus) MakeDiffFieldMask(other *MemberAssignment_WorkStatus) *MemberAssignment_WorkStatus_FieldMask {
	if o == nil && other == nil {
		return &MemberAssignment_WorkStatus_FieldMask{}
	}
	if o == nil || other == nil {
		return FullMemberAssignment_WorkStatus_FieldMask()
	}

	res := &MemberAssignment_WorkStatus_FieldMask{}
	if o.GetPending() != other.GetPending() {
		res.Paths = append(res.Paths, &MemberAssignmentWorkStatus_FieldTerminalPath{selector: MemberAssignmentWorkStatus_FieldPathSelectorPending})
	}
	if o.GetPendingDeletion() != other.GetPendingDeletion() {
		res.Paths = append(res.Paths, &MemberAssignmentWorkStatus_FieldTerminalPath{selector: MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion})
	}
	return res
}

func (o *MemberAssignment_WorkStatus) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*MemberAssignment_WorkStatus))
}

func (o *MemberAssignment_WorkStatus) Clone() *MemberAssignment_WorkStatus {
	if o == nil {
		return nil
	}
	result := &MemberAssignment_WorkStatus{}
	result.Pending = o.Pending
	result.PendingDeletion = o.PendingDeletion
	return result
}

func (o *MemberAssignment_WorkStatus) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *MemberAssignment_WorkStatus) Merge(source *MemberAssignment_WorkStatus) {
	o.Pending = source.GetPending()
	o.PendingDeletion = source.GetPendingDeletion()
}

func (o *MemberAssignment_WorkStatus) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*MemberAssignment_WorkStatus))
}
