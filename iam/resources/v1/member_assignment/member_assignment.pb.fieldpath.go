// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/member_assignment.proto
// DO NOT EDIT!!!

package member_assignment

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	role_binding "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role_binding"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_common.PCR{}
	_ = &organization.Organization{}
	_ = &role_binding.RoleBinding{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MemberAssignment_FieldPath interface {
	gotenobject.FieldPath
	Selector() MemberAssignment_FieldPathSelector
	Get(source *MemberAssignment) []interface{}
	GetSingle(source *MemberAssignment) (interface{}, bool)
	ClearValue(item *MemberAssignment)

	// Those methods build corresponding MemberAssignment_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MemberAssignment_FieldPathValue
	WithIArrayOfValues(values interface{}) MemberAssignment_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MemberAssignment_FieldPathArrayItemValue
}

type MemberAssignment_FieldPathSelector int32

const (
	MemberAssignment_FieldPathSelectorName                      MemberAssignment_FieldPathSelector = 0
	MemberAssignment_FieldPathSelectorMetadata                  MemberAssignment_FieldPathSelector = 1
	MemberAssignment_FieldPathSelectorScope                     MemberAssignment_FieldPathSelector = 2
	MemberAssignment_FieldPathSelectorScopeTitle                MemberAssignment_FieldPathSelector = 3
	MemberAssignment_FieldPathSelectorParentOrganization        MemberAssignment_FieldPathSelector = 4
	MemberAssignment_FieldPathSelectorScopeMetadata             MemberAssignment_FieldPathSelector = 5
	MemberAssignment_FieldPathSelectorMultiRegionControlRegion  MemberAssignment_FieldPathSelector = 6
	MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions MemberAssignment_FieldPathSelector = 7
	MemberAssignment_FieldPathSelectorScopeServices             MemberAssignment_FieldPathSelector = 8
	MemberAssignment_FieldPathSelectorBusinessTier              MemberAssignment_FieldPathSelector = 9
	MemberAssignment_FieldPathSelectorMember                    MemberAssignment_FieldPathSelector = 10
	MemberAssignment_FieldPathSelectorMemberRegion              MemberAssignment_FieldPathSelector = 11
	MemberAssignment_FieldPathSelectorCtrlStatus                MemberAssignment_FieldPathSelector = 12
)

func (s MemberAssignment_FieldPathSelector) String() string {
	switch s {
	case MemberAssignment_FieldPathSelectorName:
		return "name"
	case MemberAssignment_FieldPathSelectorMetadata:
		return "metadata"
	case MemberAssignment_FieldPathSelectorScope:
		return "scope"
	case MemberAssignment_FieldPathSelectorScopeTitle:
		return "scope_title"
	case MemberAssignment_FieldPathSelectorParentOrganization:
		return "parent_organization"
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return "scope_metadata"
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		return "multi_region_control_region"
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		return "multi_region_enabled_regions"
	case MemberAssignment_FieldPathSelectorScopeServices:
		return "scope_services"
	case MemberAssignment_FieldPathSelectorBusinessTier:
		return "business_tier"
	case MemberAssignment_FieldPathSelectorMember:
		return "member"
	case MemberAssignment_FieldPathSelectorMemberRegion:
		return "member_region"
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return "ctrl_status"
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", s))
	}
}

func BuildMemberAssignment_FieldPath(fp gotenobject.RawFieldPath) (MemberAssignment_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MemberAssignment")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorName}, nil
		case "metadata":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMetadata}, nil
		case "scope":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScope}, nil
		case "scope_title", "scopeTitle", "scope-title":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeTitle}, nil
		case "parent_organization", "parentOrganization", "parent-organization":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorParentOrganization}, nil
		case "scope_metadata", "scopeMetadata", "scope-metadata":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeMetadata}, nil
		case "multi_region_control_region", "multiRegionControlRegion", "multi-region-control-region":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMultiRegionControlRegion}, nil
		case "multi_region_enabled_regions", "multiRegionEnabledRegions", "multi-region-enabled-regions":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions}, nil
		case "scope_services", "scopeServices", "scope-services":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorScopeServices}, nil
		case "business_tier", "businessTier", "business-tier":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorBusinessTier}, nil
		case "member":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMember}, nil
		case "member_region", "memberRegion", "member-region":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorMemberRegion}, nil
		case "ctrl_status", "ctrlStatus", "ctrl-status":
			return &MemberAssignment_FieldTerminalPath{selector: MemberAssignment_FieldPathSelectorCtrlStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &MemberAssignment_FieldSubPath{selector: MemberAssignment_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "scope_metadata", "scopeMetadata", "scope-metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &MemberAssignment_FieldSubPath{selector: MemberAssignment_FieldPathSelectorScopeMetadata, subPath: subpath}, nil
			}
		case "ctrl_status", "ctrlStatus", "ctrl-status":
			if subpath, err := BuildMemberAssignmentWorkStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &MemberAssignment_FieldSubPath{selector: MemberAssignment_FieldPathSelectorCtrlStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MemberAssignment", fp)
}

func ParseMemberAssignment_FieldPath(rawField string) (MemberAssignment_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMemberAssignment_FieldPath(fp)
}

func MustParseMemberAssignment_FieldPath(rawField string) MemberAssignment_FieldPath {
	fp, err := ParseMemberAssignment_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MemberAssignment_FieldTerminalPath struct {
	selector MemberAssignment_FieldPathSelector
}

var _ MemberAssignment_FieldPath = (*MemberAssignment_FieldTerminalPath)(nil)

func (fp *MemberAssignment_FieldTerminalPath) Selector() MemberAssignment_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MemberAssignment_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MemberAssignment_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MemberAssignment
func (fp *MemberAssignment_FieldTerminalPath) Get(source *MemberAssignment) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MemberAssignment_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case MemberAssignment_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case MemberAssignment_FieldPathSelectorScope:
			if source.Scope != nil {
				values = append(values, source.Scope)
			}
		case MemberAssignment_FieldPathSelectorScopeTitle:
			values = append(values, source.ScopeTitle)
		case MemberAssignment_FieldPathSelectorParentOrganization:
			if source.ParentOrganization != nil {
				values = append(values, source.ParentOrganization)
			}
		case MemberAssignment_FieldPathSelectorScopeMetadata:
			if source.ScopeMetadata != nil {
				values = append(values, source.ScopeMetadata)
			}
		case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
			values = append(values, source.MultiRegionControlRegion)
		case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
			for _, value := range source.GetMultiRegionEnabledRegions() {
				values = append(values, value)
			}
		case MemberAssignment_FieldPathSelectorScopeServices:
			for _, value := range source.GetScopeServices() {
				values = append(values, value)
			}
		case MemberAssignment_FieldPathSelectorBusinessTier:
			values = append(values, source.BusinessTier)
		case MemberAssignment_FieldPathSelectorMember:
			values = append(values, source.Member)
		case MemberAssignment_FieldPathSelectorMemberRegion:
			values = append(values, source.MemberRegion)
		case MemberAssignment_FieldPathSelectorCtrlStatus:
			if source.CtrlStatus != nil {
				values = append(values, source.CtrlStatus)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
		}
	}
	return
}

func (fp *MemberAssignment_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MemberAssignment))
}

// GetSingle returns value pointed by specific field of from source MemberAssignment
func (fp *MemberAssignment_FieldTerminalPath) GetSingle(source *MemberAssignment) (interface{}, bool) {
	switch fp.selector {
	case MemberAssignment_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorScope:
		res := source.GetScope()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorScopeTitle:
		return source.GetScopeTitle(), source != nil
	case MemberAssignment_FieldPathSelectorParentOrganization:
		res := source.GetParentOrganization()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		res := source.GetScopeMetadata()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		return source.GetMultiRegionControlRegion(), source != nil
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		res := source.GetMultiRegionEnabledRegions()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorScopeServices:
		res := source.GetScopeServices()
		return res, res != nil
	case MemberAssignment_FieldPathSelectorBusinessTier:
		return source.GetBusinessTier(), source != nil
	case MemberAssignment_FieldPathSelectorMember:
		return source.GetMember(), source != nil
	case MemberAssignment_FieldPathSelectorMemberRegion:
		return source.GetMemberRegion(), source != nil
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		res := source.GetCtrlStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
	}
}

func (fp *MemberAssignment_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MemberAssignment))
}

// GetDefault returns a default value of the field type
func (fp *MemberAssignment_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MemberAssignment_FieldPathSelectorName:
		return (*Name)(nil)
	case MemberAssignment_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case MemberAssignment_FieldPathSelectorScope:
		return (*role_binding.ParentName)(nil)
	case MemberAssignment_FieldPathSelectorScopeTitle:
		return ""
	case MemberAssignment_FieldPathSelectorParentOrganization:
		return (*organization.Name)(nil)
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return (*meta.Meta)(nil)
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		return ""
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		return ([]string)(nil)
	case MemberAssignment_FieldPathSelectorScopeServices:
		return ([]*meta_service.Name)(nil)
	case MemberAssignment_FieldPathSelectorBusinessTier:
		return iam_common.BusinessTier_UNDEFINED
	case MemberAssignment_FieldPathSelectorMember:
		return ""
	case MemberAssignment_FieldPathSelectorMemberRegion:
		return ""
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return (*MemberAssignment_WorkStatus)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
	}
}

func (fp *MemberAssignment_FieldTerminalPath) ClearValue(item *MemberAssignment) {
	if item != nil {
		switch fp.selector {
		case MemberAssignment_FieldPathSelectorName:
			item.Name = nil
		case MemberAssignment_FieldPathSelectorMetadata:
			item.Metadata = nil
		case MemberAssignment_FieldPathSelectorScope:
			item.Scope = nil
		case MemberAssignment_FieldPathSelectorScopeTitle:
			item.ScopeTitle = ""
		case MemberAssignment_FieldPathSelectorParentOrganization:
			item.ParentOrganization = nil
		case MemberAssignment_FieldPathSelectorScopeMetadata:
			item.ScopeMetadata = nil
		case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
			item.MultiRegionControlRegion = ""
		case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
			item.MultiRegionEnabledRegions = nil
		case MemberAssignment_FieldPathSelectorScopeServices:
			item.ScopeServices = nil
		case MemberAssignment_FieldPathSelectorBusinessTier:
			item.BusinessTier = iam_common.BusinessTier_UNDEFINED
		case MemberAssignment_FieldPathSelectorMember:
			item.Member = ""
		case MemberAssignment_FieldPathSelectorMemberRegion:
			item.MemberRegion = ""
		case MemberAssignment_FieldPathSelectorCtrlStatus:
			item.CtrlStatus = nil
		default:
			panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
		}
	}
}

func (fp *MemberAssignment_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MemberAssignment))
}

// IsLeaf - whether field path is holds simple value
func (fp *MemberAssignment_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MemberAssignment_FieldPathSelectorName ||
		fp.selector == MemberAssignment_FieldPathSelectorScope ||
		fp.selector == MemberAssignment_FieldPathSelectorScopeTitle ||
		fp.selector == MemberAssignment_FieldPathSelectorParentOrganization ||
		fp.selector == MemberAssignment_FieldPathSelectorMultiRegionControlRegion ||
		fp.selector == MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions ||
		fp.selector == MemberAssignment_FieldPathSelectorScopeServices ||
		fp.selector == MemberAssignment_FieldPathSelectorBusinessTier ||
		fp.selector == MemberAssignment_FieldPathSelectorMember ||
		fp.selector == MemberAssignment_FieldPathSelectorMemberRegion
}

func (fp *MemberAssignment_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MemberAssignment_FieldTerminalPath) WithIValue(value interface{}) MemberAssignment_FieldPathValue {
	switch fp.selector {
	case MemberAssignment_FieldPathSelectorName:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*Name)}
	case MemberAssignment_FieldPathSelectorMetadata:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case MemberAssignment_FieldPathSelectorScope:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*role_binding.ParentName)}
	case MemberAssignment_FieldPathSelectorScopeTitle:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(string)}
	case MemberAssignment_FieldPathSelectorParentOrganization:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*organization.Name)}
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(string)}
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.([]string)}
	case MemberAssignment_FieldPathSelectorScopeServices:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.([]*meta_service.Name)}
	case MemberAssignment_FieldPathSelectorBusinessTier:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(iam_common.BusinessTier)}
	case MemberAssignment_FieldPathSelectorMember:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(string)}
	case MemberAssignment_FieldPathSelectorMemberRegion:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(string)}
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return &MemberAssignment_FieldTerminalPathValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*MemberAssignment_WorkStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
	}
}

func (fp *MemberAssignment_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MemberAssignment_FieldTerminalPath) WithIArrayOfValues(values interface{}) MemberAssignment_FieldPathArrayOfValues {
	fpaov := &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp}
	switch fp.selector {
	case MemberAssignment_FieldPathSelectorName:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]*Name)}
	case MemberAssignment_FieldPathSelectorMetadata:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case MemberAssignment_FieldPathSelectorScope:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]*role_binding.ParentName)}
	case MemberAssignment_FieldPathSelectorScopeTitle:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]string)}
	case MemberAssignment_FieldPathSelectorParentOrganization:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]*organization.Name)}
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]string)}
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([][]string)}
	case MemberAssignment_FieldPathSelectorScopeServices:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([][]*meta_service.Name)}
	case MemberAssignment_FieldPathSelectorBusinessTier:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]iam_common.BusinessTier)}
	case MemberAssignment_FieldPathSelectorMember:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]string)}
	case MemberAssignment_FieldPathSelectorMemberRegion:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]string)}
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return &MemberAssignment_FieldTerminalPathArrayOfValues{MemberAssignment_FieldTerminalPath: *fp, values: values.([]*MemberAssignment_WorkStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
	}
	return fpaov
}

func (fp *MemberAssignment_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MemberAssignment_FieldTerminalPath) WithIArrayItemValue(value interface{}) MemberAssignment_FieldPathArrayItemValue {
	switch fp.selector {
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		return &MemberAssignment_FieldTerminalPathArrayItemValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(string)}
	case MemberAssignment_FieldPathSelectorScopeServices:
		return &MemberAssignment_FieldTerminalPathArrayItemValue{MemberAssignment_FieldTerminalPath: *fp, value: value.(*meta_service.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fp.selector))
	}
}

func (fp *MemberAssignment_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type MemberAssignment_FieldSubPath struct {
	selector MemberAssignment_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ MemberAssignment_FieldPath = (*MemberAssignment_FieldSubPath)(nil)

func (fps *MemberAssignment_FieldSubPath) Selector() MemberAssignment_FieldPathSelector {
	return fps.selector
}
func (fps *MemberAssignment_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *MemberAssignment_FieldSubPath) AsScopeMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *MemberAssignment_FieldSubPath) AsCtrlStatusSubPath() (MemberAssignmentWorkStatus_FieldPath, bool) {
	res, ok := fps.subPath.(MemberAssignmentWorkStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *MemberAssignment_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *MemberAssignment_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source MemberAssignment
func (fps *MemberAssignment_FieldSubPath) Get(source *MemberAssignment) (values []interface{}) {
	switch fps.selector {
	case MemberAssignment_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetScopeMetadata())...)
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		values = append(values, fps.subPath.GetRaw(source.GetCtrlStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fps.selector))
	}
	return
}

func (fps *MemberAssignment_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*MemberAssignment))
}

// GetSingle returns value of selected field from source MemberAssignment
func (fps *MemberAssignment_FieldSubPath) GetSingle(source *MemberAssignment) (interface{}, bool) {
	switch fps.selector {
	case MemberAssignment_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		if source.GetScopeMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetScopeMetadata())
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		if source.GetCtrlStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCtrlStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fps.selector))
	}
}

func (fps *MemberAssignment_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*MemberAssignment))
}

// GetDefault returns a default value of the field type
func (fps *MemberAssignment_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *MemberAssignment_FieldSubPath) ClearValue(item *MemberAssignment) {
	if item != nil {
		switch fps.selector {
		case MemberAssignment_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case MemberAssignment_FieldPathSelectorScopeMetadata:
			fps.subPath.ClearValueRaw(item.ScopeMetadata)
		case MemberAssignment_FieldPathSelectorCtrlStatus:
			fps.subPath.ClearValueRaw(item.CtrlStatus)
		default:
			panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fps.selector))
		}
	}
}

func (fps *MemberAssignment_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*MemberAssignment))
}

// IsLeaf - whether field path is holds simple value
func (fps *MemberAssignment_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *MemberAssignment_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&MemberAssignment_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *MemberAssignment_FieldSubPath) WithIValue(value interface{}) MemberAssignment_FieldPathValue {
	return &MemberAssignment_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *MemberAssignment_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *MemberAssignment_FieldSubPath) WithIArrayOfValues(values interface{}) MemberAssignment_FieldPathArrayOfValues {
	return &MemberAssignment_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *MemberAssignment_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *MemberAssignment_FieldSubPath) WithIArrayItemValue(value interface{}) MemberAssignment_FieldPathArrayItemValue {
	return &MemberAssignment_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *MemberAssignment_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// MemberAssignment_FieldPathValue allows storing values for MemberAssignment fields according to their type
type MemberAssignment_FieldPathValue interface {
	MemberAssignment_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MemberAssignment)
	CompareWith(*MemberAssignment) (cmp int, comparable bool)
}

func ParseMemberAssignment_FieldPathValue(pathStr, valueStr string) (MemberAssignment_FieldPathValue, error) {
	fp, err := ParseMemberAssignment_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemberAssignment field path value from %s: %v", valueStr, err)
	}
	return fpv.(MemberAssignment_FieldPathValue), nil
}

func MustParseMemberAssignment_FieldPathValue(pathStr, valueStr string) MemberAssignment_FieldPathValue {
	fpv, err := ParseMemberAssignment_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MemberAssignment_FieldTerminalPathValue struct {
	MemberAssignment_FieldTerminalPath
	value interface{}
}

var _ MemberAssignment_FieldPathValue = (*MemberAssignment_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MemberAssignment' as interface{}
func (fpv *MemberAssignment_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsScopeValue() (*role_binding.ParentName, bool) {
	res, ok := fpv.value.(*role_binding.ParentName)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsScopeTitleValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsParentOrganizationValue() (*organization.Name, bool) {
	res, ok := fpv.value.(*organization.Name)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsScopeMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsMultiRegionControlRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsMultiRegionEnabledRegionsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsScopeServicesValue() ([]*meta_service.Name, bool) {
	res, ok := fpv.value.([]*meta_service.Name)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsBusinessTierValue() (iam_common.BusinessTier, bool) {
	res, ok := fpv.value.(iam_common.BusinessTier)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsMemberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsMemberRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MemberAssignment_FieldTerminalPathValue) AsCtrlStatusValue() (*MemberAssignment_WorkStatus, bool) {
	res, ok := fpv.value.(*MemberAssignment_WorkStatus)
	return res, ok
}

// SetTo stores value for selected field for object MemberAssignment
func (fpv *MemberAssignment_FieldTerminalPathValue) SetTo(target **MemberAssignment) {
	if *target == nil {
		*target = new(MemberAssignment)
	}
	switch fpv.selector {
	case MemberAssignment_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case MemberAssignment_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case MemberAssignment_FieldPathSelectorScope:
		(*target).Scope = fpv.value.(*role_binding.ParentName)
	case MemberAssignment_FieldPathSelectorScopeTitle:
		(*target).ScopeTitle = fpv.value.(string)
	case MemberAssignment_FieldPathSelectorParentOrganization:
		(*target).ParentOrganization = fpv.value.(*organization.Name)
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		(*target).ScopeMetadata = fpv.value.(*meta.Meta)
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		(*target).MultiRegionControlRegion = fpv.value.(string)
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		(*target).MultiRegionEnabledRegions = fpv.value.([]string)
	case MemberAssignment_FieldPathSelectorScopeServices:
		(*target).ScopeServices = fpv.value.([]*meta_service.Name)
	case MemberAssignment_FieldPathSelectorBusinessTier:
		(*target).BusinessTier = fpv.value.(iam_common.BusinessTier)
	case MemberAssignment_FieldPathSelectorMember:
		(*target).Member = fpv.value.(string)
	case MemberAssignment_FieldPathSelectorMemberRegion:
		(*target).MemberRegion = fpv.value.(string)
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		(*target).CtrlStatus = fpv.value.(*MemberAssignment_WorkStatus)
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fpv.selector))
	}
}

func (fpv *MemberAssignment_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MemberAssignment)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MemberAssignment_FieldTerminalPathValue' with the value under path in 'MemberAssignment'.
func (fpv *MemberAssignment_FieldTerminalPathValue) CompareWith(source *MemberAssignment) (int, bool) {
	switch fpv.selector {
	case MemberAssignment_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorMetadata:
		return 0, false
	case MemberAssignment_FieldPathSelectorScope:
		leftValue := fpv.value.(*role_binding.ParentName)
		rightValue := source.GetScope()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorScopeTitle:
		leftValue := fpv.value.(string)
		rightValue := source.GetScopeTitle()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorParentOrganization:
		leftValue := fpv.value.(*organization.Name)
		rightValue := source.GetParentOrganization()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return 0, false
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetMultiRegionControlRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		return 0, false
	case MemberAssignment_FieldPathSelectorScopeServices:
		return 0, false
	case MemberAssignment_FieldPathSelectorBusinessTier:
		leftValue := fpv.value.(iam_common.BusinessTier)
		rightValue := source.GetBusinessTier()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorMember:
		leftValue := fpv.value.(string)
		rightValue := source.GetMember()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorMemberRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetMemberRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fpv.selector))
	}
}

func (fpv *MemberAssignment_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MemberAssignment))
}

type MemberAssignment_FieldSubPathValue struct {
	MemberAssignment_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ MemberAssignment_FieldPathValue = (*MemberAssignment_FieldSubPathValue)(nil)

func (fpvs *MemberAssignment_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *MemberAssignment_FieldSubPathValue) AsScopeMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *MemberAssignment_FieldSubPathValue) AsCtrlStatusPathValue() (MemberAssignmentWorkStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(MemberAssignmentWorkStatus_FieldPathValue)
	return res, ok
}

func (fpvs *MemberAssignment_FieldSubPathValue) SetTo(target **MemberAssignment) {
	if *target == nil {
		*target = new(MemberAssignment)
	}
	switch fpvs.Selector() {
	case MemberAssignment_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).ScopeMetadata)
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		fpvs.subPathValue.(MemberAssignmentWorkStatus_FieldPathValue).SetTo(&(*target).CtrlStatus)
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fpvs.Selector()))
	}
}

func (fpvs *MemberAssignment_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MemberAssignment)
	fpvs.SetTo(&typedObject)
}

func (fpvs *MemberAssignment_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *MemberAssignment_FieldSubPathValue) CompareWith(source *MemberAssignment) (int, bool) {
	switch fpvs.Selector() {
	case MemberAssignment_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetScopeMetadata())
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return fpvs.subPathValue.(MemberAssignmentWorkStatus_FieldPathValue).CompareWith(source.GetCtrlStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fpvs.Selector()))
	}
}

func (fpvs *MemberAssignment_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*MemberAssignment))
}

// MemberAssignment_FieldPathArrayItemValue allows storing single item in Path-specific values for MemberAssignment according to their type
// Present only for array (repeated) types.
type MemberAssignment_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MemberAssignment_FieldPath
	ContainsValue(*MemberAssignment) bool
}

// ParseMemberAssignment_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMemberAssignment_FieldPathArrayItemValue(pathStr, valueStr string) (MemberAssignment_FieldPathArrayItemValue, error) {
	fp, err := ParseMemberAssignment_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemberAssignment field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MemberAssignment_FieldPathArrayItemValue), nil
}

func MustParseMemberAssignment_FieldPathArrayItemValue(pathStr, valueStr string) MemberAssignment_FieldPathArrayItemValue {
	fpaiv, err := ParseMemberAssignment_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MemberAssignment_FieldTerminalPathArrayItemValue struct {
	MemberAssignment_FieldTerminalPath
	value interface{}
}

var _ MemberAssignment_FieldPathArrayItemValue = (*MemberAssignment_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MemberAssignment as interface{}
func (fpaiv *MemberAssignment_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *MemberAssignment_FieldTerminalPathArrayItemValue) AsMultiRegionEnabledRegionsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *MemberAssignment_FieldTerminalPathArrayItemValue) AsScopeServicesItemValue() (*meta_service.Name, bool) {
	res, ok := fpaiv.value.(*meta_service.Name)
	return res, ok
}

func (fpaiv *MemberAssignment_FieldTerminalPathArrayItemValue) GetSingle(source *MemberAssignment) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MemberAssignment_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MemberAssignment))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MemberAssignment'
func (fpaiv *MemberAssignment_FieldTerminalPathArrayItemValue) ContainsValue(source *MemberAssignment) bool {
	slice := fpaiv.MemberAssignment_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type MemberAssignment_FieldSubPathArrayItemValue struct {
	MemberAssignment_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *MemberAssignment_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *MemberAssignment_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *MemberAssignment_FieldSubPathArrayItemValue) AsScopeMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *MemberAssignment_FieldSubPathArrayItemValue) AsCtrlStatusPathItemValue() (MemberAssignmentWorkStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(MemberAssignmentWorkStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'MemberAssignment'
func (fpaivs *MemberAssignment_FieldSubPathArrayItemValue) ContainsValue(source *MemberAssignment) bool {
	switch fpaivs.Selector() {
	case MemberAssignment_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetScopeMetadata())
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		return fpaivs.subPathItemValue.(MemberAssignmentWorkStatus_FieldPathArrayItemValue).ContainsValue(source.GetCtrlStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment: %d", fpaivs.Selector()))
	}
}

// MemberAssignment_FieldPathArrayOfValues allows storing slice of values for MemberAssignment fields according to their type
type MemberAssignment_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MemberAssignment_FieldPath
}

func ParseMemberAssignment_FieldPathArrayOfValues(pathStr, valuesStr string) (MemberAssignment_FieldPathArrayOfValues, error) {
	fp, err := ParseMemberAssignment_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemberAssignment field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MemberAssignment_FieldPathArrayOfValues), nil
}

func MustParseMemberAssignment_FieldPathArrayOfValues(pathStr, valuesStr string) MemberAssignment_FieldPathArrayOfValues {
	fpaov, err := ParseMemberAssignment_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MemberAssignment_FieldTerminalPathArrayOfValues struct {
	MemberAssignment_FieldTerminalPath
	values interface{}
}

var _ MemberAssignment_FieldPathArrayOfValues = (*MemberAssignment_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MemberAssignment_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorScope:
		for _, v := range fpaov.values.([]*role_binding.ParentName) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorScopeTitle:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorParentOrganization:
		for _, v := range fpaov.values.([]*organization.Name) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorScopeMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorMultiRegionControlRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorMultiRegionEnabledRegions:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorScopeServices:
		for _, v := range fpaov.values.([][]*meta_service.Name) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorBusinessTier:
		for _, v := range fpaov.values.([]iam_common.BusinessTier) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorMember:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorMemberRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MemberAssignment_FieldPathSelectorCtrlStatus:
		for _, v := range fpaov.values.([]*MemberAssignment_WorkStatus) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsScopeArrayOfValues() ([]*role_binding.ParentName, bool) {
	res, ok := fpaov.values.([]*role_binding.ParentName)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsScopeTitleArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsParentOrganizationArrayOfValues() ([]*organization.Name, bool) {
	res, ok := fpaov.values.([]*organization.Name)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsScopeMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsMultiRegionControlRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsMultiRegionEnabledRegionsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsScopeServicesArrayOfValues() ([][]*meta_service.Name, bool) {
	res, ok := fpaov.values.([][]*meta_service.Name)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsBusinessTierArrayOfValues() ([]iam_common.BusinessTier, bool) {
	res, ok := fpaov.values.([]iam_common.BusinessTier)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsMemberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsMemberRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MemberAssignment_FieldTerminalPathArrayOfValues) AsCtrlStatusArrayOfValues() ([]*MemberAssignment_WorkStatus, bool) {
	res, ok := fpaov.values.([]*MemberAssignment_WorkStatus)
	return res, ok
}

type MemberAssignment_FieldSubPathArrayOfValues struct {
	MemberAssignment_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ MemberAssignment_FieldPathArrayOfValues = (*MemberAssignment_FieldSubPathArrayOfValues)(nil)

func (fpsaov *MemberAssignment_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *MemberAssignment_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *MemberAssignment_FieldSubPathArrayOfValues) AsScopeMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *MemberAssignment_FieldSubPathArrayOfValues) AsCtrlStatusPathArrayOfValues() (MemberAssignmentWorkStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(MemberAssignmentWorkStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MemberAssignmentWorkStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() MemberAssignmentWorkStatus_FieldPathSelector
	Get(source *MemberAssignment_WorkStatus) []interface{}
	GetSingle(source *MemberAssignment_WorkStatus) (interface{}, bool)
	ClearValue(item *MemberAssignment_WorkStatus)

	// Those methods build corresponding MemberAssignmentWorkStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MemberAssignmentWorkStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) MemberAssignmentWorkStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MemberAssignmentWorkStatus_FieldPathArrayItemValue
}

type MemberAssignmentWorkStatus_FieldPathSelector int32

const (
	MemberAssignmentWorkStatus_FieldPathSelectorPending         MemberAssignmentWorkStatus_FieldPathSelector = 0
	MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion MemberAssignmentWorkStatus_FieldPathSelector = 1
)

func (s MemberAssignmentWorkStatus_FieldPathSelector) String() string {
	switch s {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		return "pending"
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		return "pending_deletion"
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", s))
	}
}

func BuildMemberAssignmentWorkStatus_FieldPath(fp gotenobject.RawFieldPath) (MemberAssignmentWorkStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MemberAssignment_WorkStatus")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pending":
			return &MemberAssignmentWorkStatus_FieldTerminalPath{selector: MemberAssignmentWorkStatus_FieldPathSelectorPending}, nil
		case "pending_deletion", "pendingDeletion", "pending-deletion":
			return &MemberAssignmentWorkStatus_FieldTerminalPath{selector: MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MemberAssignment_WorkStatus", fp)
}

func ParseMemberAssignmentWorkStatus_FieldPath(rawField string) (MemberAssignmentWorkStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMemberAssignmentWorkStatus_FieldPath(fp)
}

func MustParseMemberAssignmentWorkStatus_FieldPath(rawField string) MemberAssignmentWorkStatus_FieldPath {
	fp, err := ParseMemberAssignmentWorkStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MemberAssignmentWorkStatus_FieldTerminalPath struct {
	selector MemberAssignmentWorkStatus_FieldPathSelector
}

var _ MemberAssignmentWorkStatus_FieldPath = (*MemberAssignmentWorkStatus_FieldTerminalPath)(nil)

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) Selector() MemberAssignmentWorkStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MemberAssignment_WorkStatus
func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) Get(source *MemberAssignment_WorkStatus) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MemberAssignmentWorkStatus_FieldPathSelectorPending:
			values = append(values, source.Pending)
		case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
			values = append(values, source.PendingDeletion)
		default:
			panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
		}
	}
	return
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MemberAssignment_WorkStatus))
}

// GetSingle returns value pointed by specific field of from source MemberAssignment_WorkStatus
func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) GetSingle(source *MemberAssignment_WorkStatus) (interface{}, bool) {
	switch fp.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		return source.GetPending(), source != nil
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		return source.GetPendingDeletion(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
	}
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MemberAssignment_WorkStatus))
}

// GetDefault returns a default value of the field type
func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		return false
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
	}
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) ClearValue(item *MemberAssignment_WorkStatus) {
	if item != nil {
		switch fp.selector {
		case MemberAssignmentWorkStatus_FieldPathSelectorPending:
			item.Pending = false
		case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
			item.PendingDeletion = false
		default:
			panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
		}
	}
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MemberAssignment_WorkStatus))
}

// IsLeaf - whether field path is holds simple value
func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MemberAssignmentWorkStatus_FieldPathSelectorPending ||
		fp.selector == MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) WithIValue(value interface{}) MemberAssignmentWorkStatus_FieldPathValue {
	switch fp.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		return &MemberAssignmentWorkStatus_FieldTerminalPathValue{MemberAssignmentWorkStatus_FieldTerminalPath: *fp, value: value.(bool)}
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		return &MemberAssignmentWorkStatus_FieldTerminalPathValue{MemberAssignmentWorkStatus_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
	}
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) MemberAssignmentWorkStatus_FieldPathArrayOfValues {
	fpaov := &MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues{MemberAssignmentWorkStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		return &MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues{MemberAssignmentWorkStatus_FieldTerminalPath: *fp, values: values.([]bool)}
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		return &MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues{MemberAssignmentWorkStatus_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
	}
	return fpaov
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) MemberAssignmentWorkStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fp.selector))
	}
}

func (fp *MemberAssignmentWorkStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// MemberAssignmentWorkStatus_FieldPathValue allows storing values for WorkStatus fields according to their type
type MemberAssignmentWorkStatus_FieldPathValue interface {
	MemberAssignmentWorkStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MemberAssignment_WorkStatus)
	CompareWith(*MemberAssignment_WorkStatus) (cmp int, comparable bool)
}

func ParseMemberAssignmentWorkStatus_FieldPathValue(pathStr, valueStr string) (MemberAssignmentWorkStatus_FieldPathValue, error) {
	fp, err := ParseMemberAssignmentWorkStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WorkStatus field path value from %s: %v", valueStr, err)
	}
	return fpv.(MemberAssignmentWorkStatus_FieldPathValue), nil
}

func MustParseMemberAssignmentWorkStatus_FieldPathValue(pathStr, valueStr string) MemberAssignmentWorkStatus_FieldPathValue {
	fpv, err := ParseMemberAssignmentWorkStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MemberAssignmentWorkStatus_FieldTerminalPathValue struct {
	MemberAssignmentWorkStatus_FieldTerminalPath
	value interface{}
}

var _ MemberAssignmentWorkStatus_FieldPathValue = (*MemberAssignmentWorkStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WorkStatus' as interface{}
func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) AsPendingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) AsPendingDeletionValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WorkStatus
func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) SetTo(target **MemberAssignment_WorkStatus) {
	if *target == nil {
		*target = new(MemberAssignment_WorkStatus)
	}
	switch fpv.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		(*target).Pending = fpv.value.(bool)
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		(*target).PendingDeletion = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fpv.selector))
	}
}

func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MemberAssignment_WorkStatus)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MemberAssignmentWorkStatus_FieldTerminalPathValue' with the value under path in 'MemberAssignment_WorkStatus'.
func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) CompareWith(source *MemberAssignment_WorkStatus) (int, bool) {
	switch fpv.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		leftValue := fpv.value.(bool)
		rightValue := source.GetPending()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		leftValue := fpv.value.(bool)
		rightValue := source.GetPendingDeletion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for MemberAssignment_WorkStatus: %d", fpv.selector))
	}
}

func (fpv *MemberAssignmentWorkStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MemberAssignment_WorkStatus))
}

// MemberAssignmentWorkStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for WorkStatus according to their type
// Present only for array (repeated) types.
type MemberAssignmentWorkStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MemberAssignmentWorkStatus_FieldPath
	ContainsValue(*MemberAssignment_WorkStatus) bool
}

// ParseMemberAssignmentWorkStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMemberAssignmentWorkStatus_FieldPathArrayItemValue(pathStr, valueStr string) (MemberAssignmentWorkStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseMemberAssignmentWorkStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WorkStatus field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MemberAssignmentWorkStatus_FieldPathArrayItemValue), nil
}

func MustParseMemberAssignmentWorkStatus_FieldPathArrayItemValue(pathStr, valueStr string) MemberAssignmentWorkStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseMemberAssignmentWorkStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MemberAssignmentWorkStatus_FieldTerminalPathArrayItemValue struct {
	MemberAssignmentWorkStatus_FieldTerminalPath
	value interface{}
}

var _ MemberAssignmentWorkStatus_FieldPathArrayItemValue = (*MemberAssignmentWorkStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MemberAssignment_WorkStatus as interface{}
func (fpaiv *MemberAssignmentWorkStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *MemberAssignmentWorkStatus_FieldTerminalPathArrayItemValue) GetSingle(source *MemberAssignment_WorkStatus) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MemberAssignmentWorkStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MemberAssignment_WorkStatus))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WorkStatus'
func (fpaiv *MemberAssignmentWorkStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *MemberAssignment_WorkStatus) bool {
	slice := fpaiv.MemberAssignmentWorkStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// MemberAssignmentWorkStatus_FieldPathArrayOfValues allows storing slice of values for WorkStatus fields according to their type
type MemberAssignmentWorkStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MemberAssignmentWorkStatus_FieldPath
}

func ParseMemberAssignmentWorkStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (MemberAssignmentWorkStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseMemberAssignmentWorkStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WorkStatus field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MemberAssignmentWorkStatus_FieldPathArrayOfValues), nil
}

func MustParseMemberAssignmentWorkStatus_FieldPathArrayOfValues(pathStr, valuesStr string) MemberAssignmentWorkStatus_FieldPathArrayOfValues {
	fpaov, err := ParseMemberAssignmentWorkStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues struct {
	MemberAssignmentWorkStatus_FieldTerminalPath
	values interface{}
}

var _ MemberAssignmentWorkStatus_FieldPathArrayOfValues = (*MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MemberAssignmentWorkStatus_FieldPathSelectorPending:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case MemberAssignmentWorkStatus_FieldPathSelectorPendingDeletion:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues) AsPendingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *MemberAssignmentWorkStatus_FieldTerminalPathArrayOfValues) AsPendingDeletionArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
