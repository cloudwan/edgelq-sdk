// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/condition.proto
// DO NOT EDIT!!!

package condition

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1/attestation_domain"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &attestation_domain.AttestationDomain{}
	_ = &organization.Organization{}
	_ = &permission.Permission{}
	_ = &project.Project{}
	_ = &structpb.Struct{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Condition_FieldPath interface {
	gotenobject.FieldPath
	Selector() Condition_FieldPathSelector
	Get(source *Condition) []interface{}
	GetSingle(source *Condition) (interface{}, bool)
	ClearValue(item *Condition)

	// Those methods build corresponding Condition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Condition_FieldPathValue
	WithIArrayOfValues(values interface{}) Condition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Condition_FieldPathArrayItemValue
}

type Condition_FieldPathSelector int32

const (
	Condition_FieldPathSelectorName                  Condition_FieldPathSelector = 0
	Condition_FieldPathSelectorMetadata              Condition_FieldPathSelector = 1
	Condition_FieldPathSelectorDisplayName           Condition_FieldPathSelector = 2
	Condition_FieldPathSelectorDescription           Condition_FieldPathSelector = 3
	Condition_FieldPathSelectorIpCondition           Condition_FieldPathSelector = 4
	Condition_FieldPathSelectorAttestationCondition  Condition_FieldPathSelector = 5
	Condition_FieldPathSelectorExpression            Condition_FieldPathSelector = 6
	Condition_FieldPathSelectorParameterDeclarations Condition_FieldPathSelector = 7
)

func (s Condition_FieldPathSelector) String() string {
	switch s {
	case Condition_FieldPathSelectorName:
		return "name"
	case Condition_FieldPathSelectorMetadata:
		return "metadata"
	case Condition_FieldPathSelectorDisplayName:
		return "display_name"
	case Condition_FieldPathSelectorDescription:
		return "description"
	case Condition_FieldPathSelectorIpCondition:
		return "ip_condition"
	case Condition_FieldPathSelectorAttestationCondition:
		return "attestation_condition"
	case Condition_FieldPathSelectorExpression:
		return "expression"
	case Condition_FieldPathSelectorParameterDeclarations:
		return "parameter_declarations"
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", s))
	}
}

func BuildCondition_FieldPath(fp gotenobject.RawFieldPath) (Condition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Condition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorName}, nil
		case "metadata":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorDescription}, nil
		case "ip_condition", "ipCondition", "ip-condition":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorIpCondition}, nil
		case "attestation_condition", "attestationCondition", "attestation-condition":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorAttestationCondition}, nil
		case "expression":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorExpression}, nil
		case "parameter_declarations", "parameterDeclarations", "parameter-declarations":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorParameterDeclarations}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Condition_FieldSubPath{selector: Condition_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "ip_condition", "ipCondition", "ip-condition":
			if subpath, err := BuildConditionIpCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Condition_FieldSubPath{selector: Condition_FieldPathSelectorIpCondition, subPath: subpath}, nil
			}
		case "attestation_condition", "attestationCondition", "attestation-condition":
			if subpath, err := BuildConditionAttestationCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Condition_FieldSubPath{selector: Condition_FieldPathSelectorAttestationCondition, subPath: subpath}, nil
			}
		case "parameter_declarations", "parameterDeclarations", "parameter-declarations":
			if subpath, err := BuildConditionParameterDeclaration_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Condition_FieldSubPath{selector: Condition_FieldPathSelectorParameterDeclarations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Condition", fp)
}

func ParseCondition_FieldPath(rawField string) (Condition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCondition_FieldPath(fp)
}

func MustParseCondition_FieldPath(rawField string) Condition_FieldPath {
	fp, err := ParseCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Condition_FieldTerminalPath struct {
	selector Condition_FieldPathSelector
}

var _ Condition_FieldPath = (*Condition_FieldTerminalPath)(nil)

func (fp *Condition_FieldTerminalPath) Selector() Condition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Condition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Condition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Condition
func (fp *Condition_FieldTerminalPath) Get(source *Condition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Condition_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Condition_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Condition_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Condition_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Condition_FieldPathSelectorIpCondition:
			if source, ok := source.Condition.(*Condition_IpCondition_); ok && source != nil {
				if source.IpCondition != nil {
					values = append(values, source.IpCondition)
				}
			}
		case Condition_FieldPathSelectorAttestationCondition:
			if source, ok := source.Condition.(*Condition_AttestationCondition_); ok && source != nil {
				if source.AttestationCondition != nil {
					values = append(values, source.AttestationCondition)
				}
			}
		case Condition_FieldPathSelectorExpression:
			values = append(values, source.Expression)
		case Condition_FieldPathSelectorParameterDeclarations:
			for _, value := range source.GetParameterDeclarations() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
		}
	}
	return
}

func (fp *Condition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Condition))
}

// GetSingle returns value pointed by specific field of from source Condition
func (fp *Condition_FieldTerminalPath) GetSingle(source *Condition) (interface{}, bool) {
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Condition_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Condition_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Condition_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Condition_FieldPathSelectorIpCondition:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetIpCondition(), false
		}
		_, oneOfSelected := source.Condition.(*Condition_IpCondition_)
		if !oneOfSelected {
			return source.GetIpCondition(), false // to return "type" information
		}
		res := source.GetIpCondition()
		return res, res != nil
	case Condition_FieldPathSelectorAttestationCondition:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetAttestationCondition(), false
		}
		_, oneOfSelected := source.Condition.(*Condition_AttestationCondition_)
		if !oneOfSelected {
			return source.GetAttestationCondition(), false // to return "type" information
		}
		res := source.GetAttestationCondition()
		return res, res != nil
	case Condition_FieldPathSelectorExpression:
		return source.GetExpression(), source != nil
	case Condition_FieldPathSelectorParameterDeclarations:
		res := source.GetParameterDeclarations()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Condition))
}

// GetDefault returns a default value of the field type
func (fp *Condition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		return (*Name)(nil)
	case Condition_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Condition_FieldPathSelectorDisplayName:
		return ""
	case Condition_FieldPathSelectorDescription:
		return ""
	case Condition_FieldPathSelectorIpCondition:
		return (*Condition_IpCondition)(nil)
	case Condition_FieldPathSelectorAttestationCondition:
		return (*Condition_AttestationCondition)(nil)
	case Condition_FieldPathSelectorExpression:
		return ""
	case Condition_FieldPathSelectorParameterDeclarations:
		return ([]*Condition_ParameterDeclaration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) ClearValue(item *Condition) {
	if item != nil {
		switch fp.selector {
		case Condition_FieldPathSelectorName:
			item.Name = nil
		case Condition_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Condition_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Condition_FieldPathSelectorDescription:
			item.Description = ""
		case Condition_FieldPathSelectorIpCondition:
			if item, ok := item.Condition.(*Condition_IpCondition_); ok {
				item.IpCondition = nil
			}
		case Condition_FieldPathSelectorAttestationCondition:
			if item, ok := item.Condition.(*Condition_AttestationCondition_); ok {
				item.AttestationCondition = nil
			}
		case Condition_FieldPathSelectorExpression:
			item.Expression = ""
		case Condition_FieldPathSelectorParameterDeclarations:
			item.ParameterDeclarations = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
		}
	}
}

func (fp *Condition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Condition))
}

// IsLeaf - whether field path is holds simple value
func (fp *Condition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Condition_FieldPathSelectorName ||
		fp.selector == Condition_FieldPathSelectorDisplayName ||
		fp.selector == Condition_FieldPathSelectorDescription ||
		fp.selector == Condition_FieldPathSelectorExpression
}

func (fp *Condition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Condition_FieldTerminalPath) WithIValue(value interface{}) Condition_FieldPathValue {
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(*Name)}
	case Condition_FieldPathSelectorMetadata:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Condition_FieldPathSelectorDisplayName:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(string)}
	case Condition_FieldPathSelectorDescription:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(string)}
	case Condition_FieldPathSelectorIpCondition:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(*Condition_IpCondition)}
	case Condition_FieldPathSelectorAttestationCondition:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(*Condition_AttestationCondition)}
	case Condition_FieldPathSelectorExpression:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(string)}
	case Condition_FieldPathSelectorParameterDeclarations:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.([]*Condition_ParameterDeclaration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Condition_FieldTerminalPath) WithIArrayOfValues(values interface{}) Condition_FieldPathArrayOfValues {
	fpaov := &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp}
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Condition_FieldPathSelectorMetadata:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Condition_FieldPathSelectorDisplayName:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]string)}
	case Condition_FieldPathSelectorDescription:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]string)}
	case Condition_FieldPathSelectorIpCondition:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]*Condition_IpCondition)}
	case Condition_FieldPathSelectorAttestationCondition:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]*Condition_AttestationCondition)}
	case Condition_FieldPathSelectorExpression:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]string)}
	case Condition_FieldPathSelectorParameterDeclarations:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([][]*Condition_ParameterDeclaration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
	return fpaov
}

func (fp *Condition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Condition_FieldTerminalPath) WithIArrayItemValue(value interface{}) Condition_FieldPathArrayItemValue {
	switch fp.selector {
	case Condition_FieldPathSelectorParameterDeclarations:
		return &Condition_FieldTerminalPathArrayItemValue{Condition_FieldTerminalPath: *fp, value: value.(*Condition_ParameterDeclaration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Condition_FieldSubPath struct {
	selector Condition_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Condition_FieldPath = (*Condition_FieldSubPath)(nil)

func (fps *Condition_FieldSubPath) Selector() Condition_FieldPathSelector {
	return fps.selector
}
func (fps *Condition_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Condition_FieldSubPath) AsIpConditionSubPath() (ConditionIpCondition_FieldPath, bool) {
	res, ok := fps.subPath.(ConditionIpCondition_FieldPath)
	return res, ok
}
func (fps *Condition_FieldSubPath) AsAttestationConditionSubPath() (ConditionAttestationCondition_FieldPath, bool) {
	res, ok := fps.subPath.(ConditionAttestationCondition_FieldPath)
	return res, ok
}
func (fps *Condition_FieldSubPath) AsParameterDeclarationsSubPath() (ConditionParameterDeclaration_FieldPath, bool) {
	res, ok := fps.subPath.(ConditionParameterDeclaration_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Condition_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Condition_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Condition
func (fps *Condition_FieldSubPath) Get(source *Condition) (values []interface{}) {
	switch fps.selector {
	case Condition_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Condition_FieldPathSelectorIpCondition:
		values = append(values, fps.subPath.GetRaw(source.GetIpCondition())...)
	case Condition_FieldPathSelectorAttestationCondition:
		values = append(values, fps.subPath.GetRaw(source.GetAttestationCondition())...)
	case Condition_FieldPathSelectorParameterDeclarations:
		for _, item := range source.GetParameterDeclarations() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fps.selector))
	}
	return
}

func (fps *Condition_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Condition))
}

// GetSingle returns value of selected field from source Condition
func (fps *Condition_FieldSubPath) GetSingle(source *Condition) (interface{}, bool) {
	switch fps.selector {
	case Condition_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Condition_FieldPathSelectorIpCondition:
		if source.GetIpCondition() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetIpCondition())
	case Condition_FieldPathSelectorAttestationCondition:
		if source.GetAttestationCondition() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAttestationCondition())
	case Condition_FieldPathSelectorParameterDeclarations:
		if len(source.GetParameterDeclarations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetParameterDeclarations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fps.selector))
	}
}

func (fps *Condition_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Condition))
}

// GetDefault returns a default value of the field type
func (fps *Condition_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Condition_FieldSubPath) ClearValue(item *Condition) {
	if item != nil {
		switch fps.selector {
		case Condition_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Condition_FieldPathSelectorIpCondition:
			if item.Condition != nil {
				if item, ok := item.Condition.(*Condition_IpCondition_); ok {
					fps.subPath.ClearValueRaw(item.IpCondition)
				}
			}
		case Condition_FieldPathSelectorAttestationCondition:
			if item.Condition != nil {
				if item, ok := item.Condition.(*Condition_AttestationCondition_); ok {
					fps.subPath.ClearValueRaw(item.AttestationCondition)
				}
			}
		case Condition_FieldPathSelectorParameterDeclarations:
			for _, subItem := range item.ParameterDeclarations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Condition: %d", fps.selector))
		}
	}
}

func (fps *Condition_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Condition))
}

// IsLeaf - whether field path is holds simple value
func (fps *Condition_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Condition_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Condition_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Condition_FieldSubPath) WithIValue(value interface{}) Condition_FieldPathValue {
	return &Condition_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Condition_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Condition_FieldSubPath) WithIArrayOfValues(values interface{}) Condition_FieldPathArrayOfValues {
	return &Condition_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Condition_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Condition_FieldSubPath) WithIArrayItemValue(value interface{}) Condition_FieldPathArrayItemValue {
	return &Condition_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Condition_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Condition_FieldPathValue allows storing values for Condition fields according to their type
type Condition_FieldPathValue interface {
	Condition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Condition)
	CompareWith(*Condition) (cmp int, comparable bool)
}

func ParseCondition_FieldPathValue(pathStr, valueStr string) (Condition_FieldPathValue, error) {
	fp, err := ParseCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path value from %s: %v", valueStr, err)
	}
	return fpv.(Condition_FieldPathValue), nil
}

func MustParseCondition_FieldPathValue(pathStr, valueStr string) Condition_FieldPathValue {
	fpv, err := ParseCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Condition_FieldTerminalPathValue struct {
	Condition_FieldTerminalPath
	value interface{}
}

var _ Condition_FieldPathValue = (*Condition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Condition' as interface{}
func (fpv *Condition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Condition_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsIpConditionValue() (*Condition_IpCondition, bool) {
	res, ok := fpv.value.(*Condition_IpCondition)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsAttestationConditionValue() (*Condition_AttestationCondition, bool) {
	res, ok := fpv.value.(*Condition_AttestationCondition)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsExpressionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsParameterDeclarationsValue() ([]*Condition_ParameterDeclaration, bool) {
	res, ok := fpv.value.([]*Condition_ParameterDeclaration)
	return res, ok
}

// SetTo stores value for selected field for object Condition
func (fpv *Condition_FieldTerminalPathValue) SetTo(target **Condition) {
	if *target == nil {
		*target = new(Condition)
	}
	switch fpv.selector {
	case Condition_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Condition_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Condition_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Condition_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Condition_FieldPathSelectorIpCondition:
		if _, ok := (*target).Condition.(*Condition_IpCondition_); !ok {
			(*target).Condition = &Condition_IpCondition_{}
		}
		(*target).Condition.(*Condition_IpCondition_).IpCondition = fpv.value.(*Condition_IpCondition)
	case Condition_FieldPathSelectorAttestationCondition:
		if _, ok := (*target).Condition.(*Condition_AttestationCondition_); !ok {
			(*target).Condition = &Condition_AttestationCondition_{}
		}
		(*target).Condition.(*Condition_AttestationCondition_).AttestationCondition = fpv.value.(*Condition_AttestationCondition)
	case Condition_FieldPathSelectorExpression:
		(*target).Expression = fpv.value.(string)
	case Condition_FieldPathSelectorParameterDeclarations:
		(*target).ParameterDeclarations = fpv.value.([]*Condition_ParameterDeclaration)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpv.selector))
	}
}

func (fpv *Condition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Condition_FieldTerminalPathValue' with the value under path in 'Condition'.
func (fpv *Condition_FieldTerminalPathValue) CompareWith(source *Condition) (int, bool) {
	switch fpv.selector {
	case Condition_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorMetadata:
		return 0, false
	case Condition_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorIpCondition:
		return 0, false
	case Condition_FieldPathSelectorAttestationCondition:
		return 0, false
	case Condition_FieldPathSelectorExpression:
		leftValue := fpv.value.(string)
		rightValue := source.GetExpression()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorParameterDeclarations:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpv.selector))
	}
}

func (fpv *Condition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Condition))
}

type Condition_FieldSubPathValue struct {
	Condition_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Condition_FieldPathValue = (*Condition_FieldSubPathValue)(nil)

func (fpvs *Condition_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Condition_FieldSubPathValue) AsIpConditionPathValue() (ConditionIpCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConditionIpCondition_FieldPathValue)
	return res, ok
}
func (fpvs *Condition_FieldSubPathValue) AsAttestationConditionPathValue() (ConditionAttestationCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConditionAttestationCondition_FieldPathValue)
	return res, ok
}
func (fpvs *Condition_FieldSubPathValue) AsParameterDeclarationsPathValue() (ConditionParameterDeclaration_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConditionParameterDeclaration_FieldPathValue)
	return res, ok
}

func (fpvs *Condition_FieldSubPathValue) SetTo(target **Condition) {
	if *target == nil {
		*target = new(Condition)
	}
	switch fpvs.Selector() {
	case Condition_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Condition_FieldPathSelectorIpCondition:
		if _, ok := (*target).Condition.(*Condition_IpCondition_); !ok {
			(*target).Condition = &Condition_IpCondition_{}
		}
		fpvs.subPathValue.(ConditionIpCondition_FieldPathValue).SetTo(&(*target).Condition.(*Condition_IpCondition_).IpCondition)
	case Condition_FieldPathSelectorAttestationCondition:
		if _, ok := (*target).Condition.(*Condition_AttestationCondition_); !ok {
			(*target).Condition = &Condition_AttestationCondition_{}
		}
		fpvs.subPathValue.(ConditionAttestationCondition_FieldPathValue).SetTo(&(*target).Condition.(*Condition_AttestationCondition_).AttestationCondition)
	case Condition_FieldPathSelectorParameterDeclarations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpvs.Selector()))
	}
}

func (fpvs *Condition_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Condition_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Condition_FieldSubPathValue) CompareWith(source *Condition) (int, bool) {
	switch fpvs.Selector() {
	case Condition_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Condition_FieldPathSelectorIpCondition:
		return fpvs.subPathValue.(ConditionIpCondition_FieldPathValue).CompareWith(source.GetIpCondition())
	case Condition_FieldPathSelectorAttestationCondition:
		return fpvs.subPathValue.(ConditionAttestationCondition_FieldPathValue).CompareWith(source.GetAttestationCondition())
	case Condition_FieldPathSelectorParameterDeclarations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpvs.Selector()))
	}
}

func (fpvs *Condition_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Condition))
}

// Condition_FieldPathArrayItemValue allows storing single item in Path-specific values for Condition according to their type
// Present only for array (repeated) types.
type Condition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Condition_FieldPath
	ContainsValue(*Condition) bool
}

// ParseCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCondition_FieldPathArrayItemValue(pathStr, valueStr string) (Condition_FieldPathArrayItemValue, error) {
	fp, err := ParseCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Condition_FieldPathArrayItemValue), nil
}

func MustParseCondition_FieldPathArrayItemValue(pathStr, valueStr string) Condition_FieldPathArrayItemValue {
	fpaiv, err := ParseCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Condition_FieldTerminalPathArrayItemValue struct {
	Condition_FieldTerminalPath
	value interface{}
}

var _ Condition_FieldPathArrayItemValue = (*Condition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Condition as interface{}
func (fpaiv *Condition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Condition_FieldTerminalPathArrayItemValue) AsParameterDeclarationsItemValue() (*Condition_ParameterDeclaration, bool) {
	res, ok := fpaiv.value.(*Condition_ParameterDeclaration)
	return res, ok
}

func (fpaiv *Condition_FieldTerminalPathArrayItemValue) GetSingle(source *Condition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Condition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Condition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Condition'
func (fpaiv *Condition_FieldTerminalPathArrayItemValue) ContainsValue(source *Condition) bool {
	slice := fpaiv.Condition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Condition_FieldSubPathArrayItemValue struct {
	Condition_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Condition_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Condition_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Condition_FieldSubPathArrayItemValue) AsIpConditionPathItemValue() (ConditionIpCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConditionIpCondition_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Condition_FieldSubPathArrayItemValue) AsAttestationConditionPathItemValue() (ConditionAttestationCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConditionAttestationCondition_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Condition_FieldSubPathArrayItemValue) AsParameterDeclarationsPathItemValue() (ConditionParameterDeclaration_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConditionParameterDeclaration_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Condition'
func (fpaivs *Condition_FieldSubPathArrayItemValue) ContainsValue(source *Condition) bool {
	switch fpaivs.Selector() {
	case Condition_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Condition_FieldPathSelectorIpCondition:
		return fpaivs.subPathItemValue.(ConditionIpCondition_FieldPathArrayItemValue).ContainsValue(source.GetIpCondition())
	case Condition_FieldPathSelectorAttestationCondition:
		return fpaivs.subPathItemValue.(ConditionAttestationCondition_FieldPathArrayItemValue).ContainsValue(source.GetAttestationCondition())
	case Condition_FieldPathSelectorParameterDeclarations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpaivs.Selector()))
	}
}

// Condition_FieldPathArrayOfValues allows storing slice of values for Condition fields according to their type
type Condition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Condition_FieldPath
}

func ParseCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (Condition_FieldPathArrayOfValues, error) {
	fp, err := ParseCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Condition_FieldPathArrayOfValues), nil
}

func MustParseCondition_FieldPathArrayOfValues(pathStr, valuesStr string) Condition_FieldPathArrayOfValues {
	fpaov, err := ParseCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Condition_FieldTerminalPathArrayOfValues struct {
	Condition_FieldTerminalPath
	values interface{}
}

var _ Condition_FieldPathArrayOfValues = (*Condition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Condition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Condition_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorIpCondition:
		for _, v := range fpaov.values.([]*Condition_IpCondition) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorAttestationCondition:
		for _, v := range fpaov.values.([]*Condition_AttestationCondition) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorExpression:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorParameterDeclarations:
		for _, v := range fpaov.values.([][]*Condition_ParameterDeclaration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsIpConditionArrayOfValues() ([]*Condition_IpCondition, bool) {
	res, ok := fpaov.values.([]*Condition_IpCondition)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsAttestationConditionArrayOfValues() ([]*Condition_AttestationCondition, bool) {
	res, ok := fpaov.values.([]*Condition_AttestationCondition)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsExpressionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsParameterDeclarationsArrayOfValues() ([][]*Condition_ParameterDeclaration, bool) {
	res, ok := fpaov.values.([][]*Condition_ParameterDeclaration)
	return res, ok
}

type Condition_FieldSubPathArrayOfValues struct {
	Condition_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Condition_FieldPathArrayOfValues = (*Condition_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Condition_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Condition_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Condition_FieldSubPathArrayOfValues) AsIpConditionPathArrayOfValues() (ConditionIpCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConditionIpCondition_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Condition_FieldSubPathArrayOfValues) AsAttestationConditionPathArrayOfValues() (ConditionAttestationCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConditionAttestationCondition_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Condition_FieldSubPathArrayOfValues) AsParameterDeclarationsPathArrayOfValues() (ConditionParameterDeclaration_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConditionParameterDeclaration_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConditionParameterDeclaration_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConditionParameterDeclaration_FieldPathSelector
	Get(source *Condition_ParameterDeclaration) []interface{}
	GetSingle(source *Condition_ParameterDeclaration) (interface{}, bool)
	ClearValue(item *Condition_ParameterDeclaration)

	// Those methods build corresponding ConditionParameterDeclaration_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConditionParameterDeclaration_FieldPathValue
	WithIArrayOfValues(values interface{}) ConditionParameterDeclaration_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConditionParameterDeclaration_FieldPathArrayItemValue
}

type ConditionParameterDeclaration_FieldPathSelector int32

const (
	ConditionParameterDeclaration_FieldPathSelectorKey  ConditionParameterDeclaration_FieldPathSelector = 0
	ConditionParameterDeclaration_FieldPathSelectorType ConditionParameterDeclaration_FieldPathSelector = 1
)

func (s ConditionParameterDeclaration_FieldPathSelector) String() string {
	switch s {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return "key"
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return "type"
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", s))
	}
}

func BuildConditionParameterDeclaration_FieldPath(fp gotenobject.RawFieldPath) (ConditionParameterDeclaration_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Condition_ParameterDeclaration")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &ConditionParameterDeclaration_FieldTerminalPath{selector: ConditionParameterDeclaration_FieldPathSelectorKey}, nil
		case "type":
			return &ConditionParameterDeclaration_FieldTerminalPath{selector: ConditionParameterDeclaration_FieldPathSelectorType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Condition_ParameterDeclaration", fp)
}

func ParseConditionParameterDeclaration_FieldPath(rawField string) (ConditionParameterDeclaration_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConditionParameterDeclaration_FieldPath(fp)
}

func MustParseConditionParameterDeclaration_FieldPath(rawField string) ConditionParameterDeclaration_FieldPath {
	fp, err := ParseConditionParameterDeclaration_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConditionParameterDeclaration_FieldTerminalPath struct {
	selector ConditionParameterDeclaration_FieldPathSelector
}

var _ ConditionParameterDeclaration_FieldPath = (*ConditionParameterDeclaration_FieldTerminalPath)(nil)

func (fp *ConditionParameterDeclaration_FieldTerminalPath) Selector() ConditionParameterDeclaration_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConditionParameterDeclaration_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConditionParameterDeclaration_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Condition_ParameterDeclaration
func (fp *ConditionParameterDeclaration_FieldTerminalPath) Get(source *Condition_ParameterDeclaration) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConditionParameterDeclaration_FieldPathSelectorKey:
			values = append(values, source.Key)
		case ConditionParameterDeclaration_FieldPathSelectorType:
			values = append(values, source.Type)
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
		}
	}
	return
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Condition_ParameterDeclaration))
}

// GetSingle returns value pointed by specific field of from source Condition_ParameterDeclaration
func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetSingle(source *Condition_ParameterDeclaration) (interface{}, bool) {
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return source.GetType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Condition_ParameterDeclaration))
}

// GetDefault returns a default value of the field type
func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return ""
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return Condition_TYPE_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) ClearValue(item *Condition_ParameterDeclaration) {
	if item != nil {
		switch fp.selector {
		case ConditionParameterDeclaration_FieldPathSelectorKey:
			item.Key = ""
		case ConditionParameterDeclaration_FieldPathSelectorType:
			item.Type = Condition_TYPE_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
		}
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Condition_ParameterDeclaration))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConditionParameterDeclaration_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConditionParameterDeclaration_FieldPathSelectorKey ||
		fp.selector == ConditionParameterDeclaration_FieldPathSelectorType
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithIValue(value interface{}) ConditionParameterDeclaration_FieldPathValue {
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return &ConditionParameterDeclaration_FieldTerminalPathValue{ConditionParameterDeclaration_FieldTerminalPath: *fp, value: value.(string)}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return &ConditionParameterDeclaration_FieldTerminalPathValue{ConditionParameterDeclaration_FieldTerminalPath: *fp, value: value.(Condition_ParameterType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConditionParameterDeclaration_FieldPathArrayOfValues {
	fpaov := &ConditionParameterDeclaration_FieldTerminalPathArrayOfValues{ConditionParameterDeclaration_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return &ConditionParameterDeclaration_FieldTerminalPathArrayOfValues{ConditionParameterDeclaration_FieldTerminalPath: *fp, values: values.([]string)}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return &ConditionParameterDeclaration_FieldTerminalPathArrayOfValues{ConditionParameterDeclaration_FieldTerminalPath: *fp, values: values.([]Condition_ParameterType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConditionParameterDeclaration_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConditionParameterDeclaration_FieldPathValue allows storing values for ParameterDeclaration fields according to their type
type ConditionParameterDeclaration_FieldPathValue interface {
	ConditionParameterDeclaration_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Condition_ParameterDeclaration)
	CompareWith(*Condition_ParameterDeclaration) (cmp int, comparable bool)
}

func ParseConditionParameterDeclaration_FieldPathValue(pathStr, valueStr string) (ConditionParameterDeclaration_FieldPathValue, error) {
	fp, err := ParseConditionParameterDeclaration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ParameterDeclaration field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConditionParameterDeclaration_FieldPathValue), nil
}

func MustParseConditionParameterDeclaration_FieldPathValue(pathStr, valueStr string) ConditionParameterDeclaration_FieldPathValue {
	fpv, err := ParseConditionParameterDeclaration_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConditionParameterDeclaration_FieldTerminalPathValue struct {
	ConditionParameterDeclaration_FieldTerminalPath
	value interface{}
}

var _ ConditionParameterDeclaration_FieldPathValue = (*ConditionParameterDeclaration_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ParameterDeclaration' as interface{}
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) AsTypeValue() (Condition_ParameterType, bool) {
	res, ok := fpv.value.(Condition_ParameterType)
	return res, ok
}

// SetTo stores value for selected field for object ParameterDeclaration
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) SetTo(target **Condition_ParameterDeclaration) {
	if *target == nil {
		*target = new(Condition_ParameterDeclaration)
	}
	switch fpv.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case ConditionParameterDeclaration_FieldPathSelectorType:
		(*target).Type = fpv.value.(Condition_ParameterType)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fpv.selector))
	}
}

func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition_ParameterDeclaration)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionParameterDeclaration_FieldTerminalPathValue' with the value under path in 'Condition_ParameterDeclaration'.
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) CompareWith(source *Condition_ParameterDeclaration) (int, bool) {
	switch fpv.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		leftValue := fpv.value.(Condition_ParameterType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fpv.selector))
	}
}

func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Condition_ParameterDeclaration))
}

// ConditionParameterDeclaration_FieldPathArrayItemValue allows storing single item in Path-specific values for ParameterDeclaration according to their type
// Present only for array (repeated) types.
type ConditionParameterDeclaration_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConditionParameterDeclaration_FieldPath
	ContainsValue(*Condition_ParameterDeclaration) bool
}

// ParseConditionParameterDeclaration_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConditionParameterDeclaration_FieldPathArrayItemValue(pathStr, valueStr string) (ConditionParameterDeclaration_FieldPathArrayItemValue, error) {
	fp, err := ParseConditionParameterDeclaration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ParameterDeclaration field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConditionParameterDeclaration_FieldPathArrayItemValue), nil
}

func MustParseConditionParameterDeclaration_FieldPathArrayItemValue(pathStr, valueStr string) ConditionParameterDeclaration_FieldPathArrayItemValue {
	fpaiv, err := ParseConditionParameterDeclaration_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConditionParameterDeclaration_FieldTerminalPathArrayItemValue struct {
	ConditionParameterDeclaration_FieldTerminalPath
	value interface{}
}

var _ ConditionParameterDeclaration_FieldPathArrayItemValue = (*ConditionParameterDeclaration_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Condition_ParameterDeclaration as interface{}
func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) GetSingle(source *Condition_ParameterDeclaration) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Condition_ParameterDeclaration))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ParameterDeclaration'
func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) ContainsValue(source *Condition_ParameterDeclaration) bool {
	slice := fpaiv.ConditionParameterDeclaration_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConditionParameterDeclaration_FieldPathArrayOfValues allows storing slice of values for ParameterDeclaration fields according to their type
type ConditionParameterDeclaration_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConditionParameterDeclaration_FieldPath
}

func ParseConditionParameterDeclaration_FieldPathArrayOfValues(pathStr, valuesStr string) (ConditionParameterDeclaration_FieldPathArrayOfValues, error) {
	fp, err := ParseConditionParameterDeclaration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ParameterDeclaration field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConditionParameterDeclaration_FieldPathArrayOfValues), nil
}

func MustParseConditionParameterDeclaration_FieldPathArrayOfValues(pathStr, valuesStr string) ConditionParameterDeclaration_FieldPathArrayOfValues {
	fpaov, err := ParseConditionParameterDeclaration_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConditionParameterDeclaration_FieldTerminalPathArrayOfValues struct {
	ConditionParameterDeclaration_FieldTerminalPath
	values interface{}
}

var _ ConditionParameterDeclaration_FieldPathArrayOfValues = (*ConditionParameterDeclaration_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConditionParameterDeclaration_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Condition_ParameterType) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConditionParameterDeclaration_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConditionParameterDeclaration_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Condition_ParameterType, bool) {
	res, ok := fpaov.values.([]Condition_ParameterType)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConditionIpCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConditionIpCondition_FieldPathSelector
	Get(source *Condition_IpCondition) []interface{}
	GetSingle(source *Condition_IpCondition) (interface{}, bool)
	ClearValue(item *Condition_IpCondition)

	// Those methods build corresponding ConditionIpCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConditionIpCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) ConditionIpCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConditionIpCondition_FieldPathArrayItemValue
}

type ConditionIpCondition_FieldPathSelector int32

const (
	ConditionIpCondition_FieldPathSelectorAllowedCidrs  ConditionIpCondition_FieldPathSelector = 0
	ConditionIpCondition_FieldPathSelectorDisabledCidrs ConditionIpCondition_FieldPathSelector = 1
)

func (s ConditionIpCondition_FieldPathSelector) String() string {
	switch s {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		return "allowed_cidrs"
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		return "disabled_cidrs"
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", s))
	}
}

func BuildConditionIpCondition_FieldPath(fp gotenobject.RawFieldPath) (ConditionIpCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Condition_IpCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "allowed_cidrs", "allowedCidrs", "allowed-cidrs":
			return &ConditionIpCondition_FieldTerminalPath{selector: ConditionIpCondition_FieldPathSelectorAllowedCidrs}, nil
		case "disabled_cidrs", "disabledCidrs", "disabled-cidrs":
			return &ConditionIpCondition_FieldTerminalPath{selector: ConditionIpCondition_FieldPathSelectorDisabledCidrs}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Condition_IpCondition", fp)
}

func ParseConditionIpCondition_FieldPath(rawField string) (ConditionIpCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConditionIpCondition_FieldPath(fp)
}

func MustParseConditionIpCondition_FieldPath(rawField string) ConditionIpCondition_FieldPath {
	fp, err := ParseConditionIpCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConditionIpCondition_FieldTerminalPath struct {
	selector ConditionIpCondition_FieldPathSelector
}

var _ ConditionIpCondition_FieldPath = (*ConditionIpCondition_FieldTerminalPath)(nil)

func (fp *ConditionIpCondition_FieldTerminalPath) Selector() ConditionIpCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConditionIpCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConditionIpCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Condition_IpCondition
func (fp *ConditionIpCondition_FieldTerminalPath) Get(source *Condition_IpCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
			for _, value := range source.GetAllowedCidrs() {
				values = append(values, value)
			}
		case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
			for _, value := range source.GetDisabledCidrs() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *ConditionIpCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Condition_IpCondition))
}

// GetSingle returns value pointed by specific field of from source Condition_IpCondition
func (fp *ConditionIpCondition_FieldTerminalPath) GetSingle(source *Condition_IpCondition) (interface{}, bool) {
	switch fp.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		res := source.GetAllowedCidrs()
		return res, res != nil
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		res := source.GetDisabledCidrs()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
	}
}

func (fp *ConditionIpCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Condition_IpCondition))
}

// GetDefault returns a default value of the field type
func (fp *ConditionIpCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		return ([]string)(nil)
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
	}
}

func (fp *ConditionIpCondition_FieldTerminalPath) ClearValue(item *Condition_IpCondition) {
	if item != nil {
		switch fp.selector {
		case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
			item.AllowedCidrs = nil
		case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
			item.DisabledCidrs = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
		}
	}
}

func (fp *ConditionIpCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Condition_IpCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConditionIpCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConditionIpCondition_FieldPathSelectorAllowedCidrs ||
		fp.selector == ConditionIpCondition_FieldPathSelectorDisabledCidrs
}

func (fp *ConditionIpCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConditionIpCondition_FieldTerminalPath) WithIValue(value interface{}) ConditionIpCondition_FieldPathValue {
	switch fp.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		return &ConditionIpCondition_FieldTerminalPathValue{ConditionIpCondition_FieldTerminalPath: *fp, value: value.([]string)}
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		return &ConditionIpCondition_FieldTerminalPathValue{ConditionIpCondition_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
	}
}

func (fp *ConditionIpCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConditionIpCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConditionIpCondition_FieldPathArrayOfValues {
	fpaov := &ConditionIpCondition_FieldTerminalPathArrayOfValues{ConditionIpCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		return &ConditionIpCondition_FieldTerminalPathArrayOfValues{ConditionIpCondition_FieldTerminalPath: *fp, values: values.([][]string)}
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		return &ConditionIpCondition_FieldTerminalPathArrayOfValues{ConditionIpCondition_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConditionIpCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConditionIpCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConditionIpCondition_FieldPathArrayItemValue {
	switch fp.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		return &ConditionIpCondition_FieldTerminalPathArrayItemValue{ConditionIpCondition_FieldTerminalPath: *fp, value: value.(string)}
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		return &ConditionIpCondition_FieldTerminalPathArrayItemValue{ConditionIpCondition_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fp.selector))
	}
}

func (fp *ConditionIpCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConditionIpCondition_FieldPathValue allows storing values for IpCondition fields according to their type
type ConditionIpCondition_FieldPathValue interface {
	ConditionIpCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Condition_IpCondition)
	CompareWith(*Condition_IpCondition) (cmp int, comparable bool)
}

func ParseConditionIpCondition_FieldPathValue(pathStr, valueStr string) (ConditionIpCondition_FieldPathValue, error) {
	fp, err := ParseConditionIpCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing IpCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConditionIpCondition_FieldPathValue), nil
}

func MustParseConditionIpCondition_FieldPathValue(pathStr, valueStr string) ConditionIpCondition_FieldPathValue {
	fpv, err := ParseConditionIpCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConditionIpCondition_FieldTerminalPathValue struct {
	ConditionIpCondition_FieldTerminalPath
	value interface{}
}

var _ ConditionIpCondition_FieldPathValue = (*ConditionIpCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'IpCondition' as interface{}
func (fpv *ConditionIpCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConditionIpCondition_FieldTerminalPathValue) AsAllowedCidrsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ConditionIpCondition_FieldTerminalPathValue) AsDisabledCidrsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object IpCondition
func (fpv *ConditionIpCondition_FieldTerminalPathValue) SetTo(target **Condition_IpCondition) {
	if *target == nil {
		*target = new(Condition_IpCondition)
	}
	switch fpv.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		(*target).AllowedCidrs = fpv.value.([]string)
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		(*target).DisabledCidrs = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fpv.selector))
	}
}

func (fpv *ConditionIpCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition_IpCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionIpCondition_FieldTerminalPathValue' with the value under path in 'Condition_IpCondition'.
func (fpv *ConditionIpCondition_FieldTerminalPathValue) CompareWith(source *Condition_IpCondition) (int, bool) {
	switch fpv.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		return 0, false
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_IpCondition: %d", fpv.selector))
	}
}

func (fpv *ConditionIpCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Condition_IpCondition))
}

// ConditionIpCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for IpCondition according to their type
// Present only for array (repeated) types.
type ConditionIpCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConditionIpCondition_FieldPath
	ContainsValue(*Condition_IpCondition) bool
}

// ParseConditionIpCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConditionIpCondition_FieldPathArrayItemValue(pathStr, valueStr string) (ConditionIpCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseConditionIpCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing IpCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConditionIpCondition_FieldPathArrayItemValue), nil
}

func MustParseConditionIpCondition_FieldPathArrayItemValue(pathStr, valueStr string) ConditionIpCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseConditionIpCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConditionIpCondition_FieldTerminalPathArrayItemValue struct {
	ConditionIpCondition_FieldTerminalPath
	value interface{}
}

var _ ConditionIpCondition_FieldPathArrayItemValue = (*ConditionIpCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Condition_IpCondition as interface{}
func (fpaiv *ConditionIpCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ConditionIpCondition_FieldTerminalPathArrayItemValue) AsAllowedCidrsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *ConditionIpCondition_FieldTerminalPathArrayItemValue) AsDisabledCidrsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ConditionIpCondition_FieldTerminalPathArrayItemValue) GetSingle(source *Condition_IpCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConditionIpCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Condition_IpCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'IpCondition'
func (fpaiv *ConditionIpCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *Condition_IpCondition) bool {
	slice := fpaiv.ConditionIpCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConditionIpCondition_FieldPathArrayOfValues allows storing slice of values for IpCondition fields according to their type
type ConditionIpCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConditionIpCondition_FieldPath
}

func ParseConditionIpCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (ConditionIpCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseConditionIpCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing IpCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConditionIpCondition_FieldPathArrayOfValues), nil
}

func MustParseConditionIpCondition_FieldPathArrayOfValues(pathStr, valuesStr string) ConditionIpCondition_FieldPathArrayOfValues {
	fpaov, err := ParseConditionIpCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConditionIpCondition_FieldTerminalPathArrayOfValues struct {
	ConditionIpCondition_FieldTerminalPath
	values interface{}
}

var _ ConditionIpCondition_FieldPathArrayOfValues = (*ConditionIpCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConditionIpCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConditionIpCondition_FieldPathSelectorAllowedCidrs:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ConditionIpCondition_FieldPathSelectorDisabledCidrs:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConditionIpCondition_FieldTerminalPathArrayOfValues) AsAllowedCidrsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ConditionIpCondition_FieldTerminalPathArrayOfValues) AsDisabledCidrsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConditionAttestationCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConditionAttestationCondition_FieldPathSelector
	Get(source *Condition_AttestationCondition) []interface{}
	GetSingle(source *Condition_AttestationCondition) (interface{}, bool)
	ClearValue(item *Condition_AttestationCondition)

	// Those methods build corresponding ConditionAttestationCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConditionAttestationCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) ConditionAttestationCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConditionAttestationCondition_FieldPathArrayItemValue
}

type ConditionAttestationCondition_FieldPathSelector int32

const (
	ConditionAttestationCondition_FieldPathSelectorDomain            ConditionAttestationCondition_FieldPathSelector = 0
	ConditionAttestationCondition_FieldPathSelectorExceptPermissions ConditionAttestationCondition_FieldPathSelector = 1
)

func (s ConditionAttestationCondition_FieldPathSelector) String() string {
	switch s {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		return "domain"
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		return "except_permissions"
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", s))
	}
}

func BuildConditionAttestationCondition_FieldPath(fp gotenobject.RawFieldPath) (ConditionAttestationCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Condition_AttestationCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "domain":
			return &ConditionAttestationCondition_FieldTerminalPath{selector: ConditionAttestationCondition_FieldPathSelectorDomain}, nil
		case "except_permissions", "exceptPermissions", "except-permissions":
			return &ConditionAttestationCondition_FieldTerminalPath{selector: ConditionAttestationCondition_FieldPathSelectorExceptPermissions}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Condition_AttestationCondition", fp)
}

func ParseConditionAttestationCondition_FieldPath(rawField string) (ConditionAttestationCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConditionAttestationCondition_FieldPath(fp)
}

func MustParseConditionAttestationCondition_FieldPath(rawField string) ConditionAttestationCondition_FieldPath {
	fp, err := ParseConditionAttestationCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConditionAttestationCondition_FieldTerminalPath struct {
	selector ConditionAttestationCondition_FieldPathSelector
}

var _ ConditionAttestationCondition_FieldPath = (*ConditionAttestationCondition_FieldTerminalPath)(nil)

func (fp *ConditionAttestationCondition_FieldTerminalPath) Selector() ConditionAttestationCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConditionAttestationCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConditionAttestationCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Condition_AttestationCondition
func (fp *ConditionAttestationCondition_FieldTerminalPath) Get(source *Condition_AttestationCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConditionAttestationCondition_FieldPathSelectorDomain:
			if source.Domain != nil {
				values = append(values, source.Domain)
			}
		case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
			for _, value := range source.GetExceptPermissions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Condition_AttestationCondition))
}

// GetSingle returns value pointed by specific field of from source Condition_AttestationCondition
func (fp *ConditionAttestationCondition_FieldTerminalPath) GetSingle(source *Condition_AttestationCondition) (interface{}, bool) {
	switch fp.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		res := source.GetDomain()
		return res, res != nil
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		res := source.GetExceptPermissions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
	}
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Condition_AttestationCondition))
}

// GetDefault returns a default value of the field type
func (fp *ConditionAttestationCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		return (*attestation_domain.Reference)(nil)
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		return ([]*permission.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
	}
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) ClearValue(item *Condition_AttestationCondition) {
	if item != nil {
		switch fp.selector {
		case ConditionAttestationCondition_FieldPathSelectorDomain:
			item.Domain = nil
		case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
			item.ExceptPermissions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
		}
	}
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Condition_AttestationCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConditionAttestationCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConditionAttestationCondition_FieldPathSelectorDomain ||
		fp.selector == ConditionAttestationCondition_FieldPathSelectorExceptPermissions
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) WithIValue(value interface{}) ConditionAttestationCondition_FieldPathValue {
	switch fp.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		return &ConditionAttestationCondition_FieldTerminalPathValue{ConditionAttestationCondition_FieldTerminalPath: *fp, value: value.(*attestation_domain.Reference)}
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		return &ConditionAttestationCondition_FieldTerminalPathValue{ConditionAttestationCondition_FieldTerminalPath: *fp, value: value.([]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
	}
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConditionAttestationCondition_FieldPathArrayOfValues {
	fpaov := &ConditionAttestationCondition_FieldTerminalPathArrayOfValues{ConditionAttestationCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		return &ConditionAttestationCondition_FieldTerminalPathArrayOfValues{ConditionAttestationCondition_FieldTerminalPath: *fp, values: values.([]*attestation_domain.Reference)}
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		return &ConditionAttestationCondition_FieldTerminalPathArrayOfValues{ConditionAttestationCondition_FieldTerminalPath: *fp, values: values.([][]*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConditionAttestationCondition_FieldPathArrayItemValue {
	switch fp.selector {
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		return &ConditionAttestationCondition_FieldTerminalPathArrayItemValue{ConditionAttestationCondition_FieldTerminalPath: *fp, value: value.(*permission.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fp.selector))
	}
}

func (fp *ConditionAttestationCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConditionAttestationCondition_FieldPathValue allows storing values for AttestationCondition fields according to their type
type ConditionAttestationCondition_FieldPathValue interface {
	ConditionAttestationCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Condition_AttestationCondition)
	CompareWith(*Condition_AttestationCondition) (cmp int, comparable bool)
}

func ParseConditionAttestationCondition_FieldPathValue(pathStr, valueStr string) (ConditionAttestationCondition_FieldPathValue, error) {
	fp, err := ParseConditionAttestationCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConditionAttestationCondition_FieldPathValue), nil
}

func MustParseConditionAttestationCondition_FieldPathValue(pathStr, valueStr string) ConditionAttestationCondition_FieldPathValue {
	fpv, err := ParseConditionAttestationCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConditionAttestationCondition_FieldTerminalPathValue struct {
	ConditionAttestationCondition_FieldTerminalPath
	value interface{}
}

var _ ConditionAttestationCondition_FieldPathValue = (*ConditionAttestationCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AttestationCondition' as interface{}
func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) AsDomainValue() (*attestation_domain.Reference, bool) {
	res, ok := fpv.value.(*attestation_domain.Reference)
	return res, ok
}
func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) AsExceptPermissionsValue() ([]*permission.Reference, bool) {
	res, ok := fpv.value.([]*permission.Reference)
	return res, ok
}

// SetTo stores value for selected field for object AttestationCondition
func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) SetTo(target **Condition_AttestationCondition) {
	if *target == nil {
		*target = new(Condition_AttestationCondition)
	}
	switch fpv.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		(*target).Domain = fpv.value.(*attestation_domain.Reference)
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		(*target).ExceptPermissions = fpv.value.([]*permission.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fpv.selector))
	}
}

func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition_AttestationCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionAttestationCondition_FieldTerminalPathValue' with the value under path in 'Condition_AttestationCondition'.
func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) CompareWith(source *Condition_AttestationCondition) (int, bool) {
	switch fpv.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		leftValue := fpv.value.(*attestation_domain.Reference)
		rightValue := source.GetDomain()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_AttestationCondition: %d", fpv.selector))
	}
}

func (fpv *ConditionAttestationCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Condition_AttestationCondition))
}

// ConditionAttestationCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for AttestationCondition according to their type
// Present only for array (repeated) types.
type ConditionAttestationCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConditionAttestationCondition_FieldPath
	ContainsValue(*Condition_AttestationCondition) bool
}

// ParseConditionAttestationCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConditionAttestationCondition_FieldPathArrayItemValue(pathStr, valueStr string) (ConditionAttestationCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseConditionAttestationCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConditionAttestationCondition_FieldPathArrayItemValue), nil
}

func MustParseConditionAttestationCondition_FieldPathArrayItemValue(pathStr, valueStr string) ConditionAttestationCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseConditionAttestationCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConditionAttestationCondition_FieldTerminalPathArrayItemValue struct {
	ConditionAttestationCondition_FieldTerminalPath
	value interface{}
}

var _ ConditionAttestationCondition_FieldPathArrayItemValue = (*ConditionAttestationCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Condition_AttestationCondition as interface{}
func (fpaiv *ConditionAttestationCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ConditionAttestationCondition_FieldTerminalPathArrayItemValue) AsExceptPermissionsItemValue() (*permission.Reference, bool) {
	res, ok := fpaiv.value.(*permission.Reference)
	return res, ok
}

func (fpaiv *ConditionAttestationCondition_FieldTerminalPathArrayItemValue) GetSingle(source *Condition_AttestationCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConditionAttestationCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Condition_AttestationCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AttestationCondition'
func (fpaiv *ConditionAttestationCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *Condition_AttestationCondition) bool {
	slice := fpaiv.ConditionAttestationCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConditionAttestationCondition_FieldPathArrayOfValues allows storing slice of values for AttestationCondition fields according to their type
type ConditionAttestationCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConditionAttestationCondition_FieldPath
}

func ParseConditionAttestationCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (ConditionAttestationCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseConditionAttestationCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConditionAttestationCondition_FieldPathArrayOfValues), nil
}

func MustParseConditionAttestationCondition_FieldPathArrayOfValues(pathStr, valuesStr string) ConditionAttestationCondition_FieldPathArrayOfValues {
	fpaov, err := ParseConditionAttestationCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConditionAttestationCondition_FieldTerminalPathArrayOfValues struct {
	ConditionAttestationCondition_FieldTerminalPath
	values interface{}
}

var _ ConditionAttestationCondition_FieldPathArrayOfValues = (*ConditionAttestationCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConditionAttestationCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConditionAttestationCondition_FieldPathSelectorDomain:
		for _, v := range fpaov.values.([]*attestation_domain.Reference) {
			values = append(values, v)
		}
	case ConditionAttestationCondition_FieldPathSelectorExceptPermissions:
		for _, v := range fpaov.values.([][]*permission.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConditionAttestationCondition_FieldTerminalPathArrayOfValues) AsDomainArrayOfValues() ([]*attestation_domain.Reference, bool) {
	res, ok := fpaov.values.([]*attestation_domain.Reference)
	return res, ok
}
func (fpaov *ConditionAttestationCondition_FieldTerminalPathArrayOfValues) AsExceptPermissionsArrayOfValues() ([][]*permission.Reference, bool) {
	res, ok := fpaov.values.([][]*permission.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ExecutableCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() ExecutableCondition_FieldPathSelector
	Get(source *ExecutableCondition) []interface{}
	GetSingle(source *ExecutableCondition) (interface{}, bool)
	ClearValue(item *ExecutableCondition)

	// Those methods build corresponding ExecutableCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ExecutableCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) ExecutableCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ExecutableCondition_FieldPathArrayItemValue
}

type ExecutableCondition_FieldPathSelector int32

const (
	ExecutableCondition_FieldPathSelectorCondition ExecutableCondition_FieldPathSelector = 0
	ExecutableCondition_FieldPathSelectorParams    ExecutableCondition_FieldPathSelector = 1
)

func (s ExecutableCondition_FieldPathSelector) String() string {
	switch s {
	case ExecutableCondition_FieldPathSelectorCondition:
		return "condition"
	case ExecutableCondition_FieldPathSelectorParams:
		return "params"
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", s))
	}
}

func BuildExecutableCondition_FieldPath(fp gotenobject.RawFieldPath) (ExecutableCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ExecutableCondition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "condition":
			return &ExecutableCondition_FieldTerminalPath{selector: ExecutableCondition_FieldPathSelectorCondition}, nil
		case "params":
			return &ExecutableCondition_FieldTerminalPath{selector: ExecutableCondition_FieldPathSelectorParams}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ExecutableCondition", fp)
}

func ParseExecutableCondition_FieldPath(rawField string) (ExecutableCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildExecutableCondition_FieldPath(fp)
}

func MustParseExecutableCondition_FieldPath(rawField string) ExecutableCondition_FieldPath {
	fp, err := ParseExecutableCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ExecutableCondition_FieldTerminalPath struct {
	selector ExecutableCondition_FieldPathSelector
}

var _ ExecutableCondition_FieldPath = (*ExecutableCondition_FieldTerminalPath)(nil)

func (fp *ExecutableCondition_FieldTerminalPath) Selector() ExecutableCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ExecutableCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ExecutableCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ExecutableCondition
func (fp *ExecutableCondition_FieldTerminalPath) Get(source *ExecutableCondition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ExecutableCondition_FieldPathSelectorCondition:
			if source.Condition != nil {
				values = append(values, source.Condition)
			}
		case ExecutableCondition_FieldPathSelectorParams:
			if source.Params != nil {
				values = append(values, source.Params)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
		}
	}
	return
}

func (fp *ExecutableCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ExecutableCondition))
}

// GetSingle returns value pointed by specific field of from source ExecutableCondition
func (fp *ExecutableCondition_FieldTerminalPath) GetSingle(source *ExecutableCondition) (interface{}, bool) {
	switch fp.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		res := source.GetCondition()
		return res, res != nil
	case ExecutableCondition_FieldPathSelectorParams:
		res := source.GetParams()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
	}
}

func (fp *ExecutableCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ExecutableCondition))
}

// GetDefault returns a default value of the field type
func (fp *ExecutableCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		return (*Reference)(nil)
	case ExecutableCondition_FieldPathSelectorParams:
		return (*structpb.Struct)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
	}
}

func (fp *ExecutableCondition_FieldTerminalPath) ClearValue(item *ExecutableCondition) {
	if item != nil {
		switch fp.selector {
		case ExecutableCondition_FieldPathSelectorCondition:
			item.Condition = nil
		case ExecutableCondition_FieldPathSelectorParams:
			item.Params = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
		}
	}
}

func (fp *ExecutableCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ExecutableCondition))
}

// IsLeaf - whether field path is holds simple value
func (fp *ExecutableCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ExecutableCondition_FieldPathSelectorCondition ||
		fp.selector == ExecutableCondition_FieldPathSelectorParams
}

func (fp *ExecutableCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ExecutableCondition_FieldTerminalPath) WithIValue(value interface{}) ExecutableCondition_FieldPathValue {
	switch fp.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		return &ExecutableCondition_FieldTerminalPathValue{ExecutableCondition_FieldTerminalPath: *fp, value: value.(*Reference)}
	case ExecutableCondition_FieldPathSelectorParams:
		return &ExecutableCondition_FieldTerminalPathValue{ExecutableCondition_FieldTerminalPath: *fp, value: value.(*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
	}
}

func (fp *ExecutableCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ExecutableCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) ExecutableCondition_FieldPathArrayOfValues {
	fpaov := &ExecutableCondition_FieldTerminalPathArrayOfValues{ExecutableCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		return &ExecutableCondition_FieldTerminalPathArrayOfValues{ExecutableCondition_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case ExecutableCondition_FieldPathSelectorParams:
		return &ExecutableCondition_FieldTerminalPathArrayOfValues{ExecutableCondition_FieldTerminalPath: *fp, values: values.([]*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
	}
	return fpaov
}

func (fp *ExecutableCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ExecutableCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) ExecutableCondition_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fp.selector))
	}
}

func (fp *ExecutableCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ExecutableCondition_FieldPathValue allows storing values for ExecutableCondition fields according to their type
type ExecutableCondition_FieldPathValue interface {
	ExecutableCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ExecutableCondition)
	CompareWith(*ExecutableCondition) (cmp int, comparable bool)
}

func ParseExecutableCondition_FieldPathValue(pathStr, valueStr string) (ExecutableCondition_FieldPathValue, error) {
	fp, err := ParseExecutableCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ExecutableCondition field path value from %s: %v", valueStr, err)
	}
	return fpv.(ExecutableCondition_FieldPathValue), nil
}

func MustParseExecutableCondition_FieldPathValue(pathStr, valueStr string) ExecutableCondition_FieldPathValue {
	fpv, err := ParseExecutableCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ExecutableCondition_FieldTerminalPathValue struct {
	ExecutableCondition_FieldTerminalPath
	value interface{}
}

var _ ExecutableCondition_FieldPathValue = (*ExecutableCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ExecutableCondition' as interface{}
func (fpv *ExecutableCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ExecutableCondition_FieldTerminalPathValue) AsConditionValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *ExecutableCondition_FieldTerminalPathValue) AsParamsValue() (*structpb.Struct, bool) {
	res, ok := fpv.value.(*structpb.Struct)
	return res, ok
}

// SetTo stores value for selected field for object ExecutableCondition
func (fpv *ExecutableCondition_FieldTerminalPathValue) SetTo(target **ExecutableCondition) {
	if *target == nil {
		*target = new(ExecutableCondition)
	}
	switch fpv.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		(*target).Condition = fpv.value.(*Reference)
	case ExecutableCondition_FieldPathSelectorParams:
		(*target).Params = fpv.value.(*structpb.Struct)
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fpv.selector))
	}
}

func (fpv *ExecutableCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ExecutableCondition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ExecutableCondition_FieldTerminalPathValue' with the value under path in 'ExecutableCondition'.
func (fpv *ExecutableCondition_FieldTerminalPathValue) CompareWith(source *ExecutableCondition) (int, bool) {
	switch fpv.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetCondition()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ExecutableCondition_FieldPathSelectorParams:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ExecutableCondition: %d", fpv.selector))
	}
}

func (fpv *ExecutableCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ExecutableCondition))
}

// ExecutableCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for ExecutableCondition according to their type
// Present only for array (repeated) types.
type ExecutableCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ExecutableCondition_FieldPath
	ContainsValue(*ExecutableCondition) bool
}

// ParseExecutableCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseExecutableCondition_FieldPathArrayItemValue(pathStr, valueStr string) (ExecutableCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseExecutableCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ExecutableCondition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ExecutableCondition_FieldPathArrayItemValue), nil
}

func MustParseExecutableCondition_FieldPathArrayItemValue(pathStr, valueStr string) ExecutableCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseExecutableCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ExecutableCondition_FieldTerminalPathArrayItemValue struct {
	ExecutableCondition_FieldTerminalPath
	value interface{}
}

var _ ExecutableCondition_FieldPathArrayItemValue = (*ExecutableCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ExecutableCondition as interface{}
func (fpaiv *ExecutableCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ExecutableCondition_FieldTerminalPathArrayItemValue) GetSingle(source *ExecutableCondition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ExecutableCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ExecutableCondition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ExecutableCondition'
func (fpaiv *ExecutableCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *ExecutableCondition) bool {
	slice := fpaiv.ExecutableCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ExecutableCondition_FieldPathArrayOfValues allows storing slice of values for ExecutableCondition fields according to their type
type ExecutableCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ExecutableCondition_FieldPath
}

func ParseExecutableCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (ExecutableCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseExecutableCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ExecutableCondition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ExecutableCondition_FieldPathArrayOfValues), nil
}

func MustParseExecutableCondition_FieldPathArrayOfValues(pathStr, valuesStr string) ExecutableCondition_FieldPathArrayOfValues {
	fpaov, err := ParseExecutableCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ExecutableCondition_FieldTerminalPathArrayOfValues struct {
	ExecutableCondition_FieldTerminalPath
	values interface{}
}

var _ ExecutableCondition_FieldPathArrayOfValues = (*ExecutableCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ExecutableCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ExecutableCondition_FieldPathSelectorCondition:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case ExecutableCondition_FieldPathSelectorParams:
		for _, v := range fpaov.values.([]*structpb.Struct) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ExecutableCondition_FieldTerminalPathArrayOfValues) AsConditionArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *ExecutableCondition_FieldTerminalPathArrayOfValues) AsParamsArrayOfValues() ([]*structpb.Struct, bool) {
	res, ok := fpaov.values.([]*structpb.Struct)
	return res, ok
}
