// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1/condition.proto
// DO NOT EDIT!!!

package condition

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &structpb.Struct{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

func (o *Condition) GotenObjectExt() {}

func (o *Condition) MakeFullFieldMask() *Condition_FieldMask {
	return FullCondition_FieldMask()
}

func (o *Condition) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCondition_FieldMask()
}

func (o *Condition) MakeDiffFieldMask(other *Condition) *Condition_FieldMask {
	if o == nil && other == nil {
		return &Condition_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCondition_FieldMask()
	}

	res := &Condition_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Condition_FieldSubPath{selector: Condition_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorDescription})
	}
	if o.GetExpression() != other.GetExpression() {
		res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorExpression})
	}

	if len(o.GetParameterDeclarations()) == len(other.GetParameterDeclarations()) {
		for i, lValue := range o.GetParameterDeclarations() {
			rValue := other.GetParameterDeclarations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorParameterDeclarations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorParameterDeclarations})
	}
	return res
}

func (o *Condition) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Condition))
}

func (o *Condition) Clone() *Condition {
	if o == nil {
		return nil
	}
	result := &Condition{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.Expression = o.Expression
	result.ParameterDeclarations = make([]*Condition_ParameterDeclaration, len(o.ParameterDeclarations))
	for i, sourceValue := range o.ParameterDeclarations {
		result.ParameterDeclarations[i] = sourceValue.Clone()
	}
	return result
}

func (o *Condition) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Condition) Merge(source *Condition) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	o.Expression = source.GetExpression()
	for _, sourceValue := range source.GetParameterDeclarations() {
		exists := false
		for _, currentValue := range o.ParameterDeclarations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Condition_ParameterDeclaration
			if sourceValue != nil {
				newDstElement = new(Condition_ParameterDeclaration)
				newDstElement.Merge(sourceValue)
			}
			o.ParameterDeclarations = append(o.ParameterDeclarations, newDstElement)
		}
	}

}

func (o *Condition) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Condition))
}

func (o *Condition_ParameterDeclaration) GotenObjectExt() {}

func (o *Condition_ParameterDeclaration) MakeFullFieldMask() *Condition_ParameterDeclaration_FieldMask {
	return FullCondition_ParameterDeclaration_FieldMask()
}

func (o *Condition_ParameterDeclaration) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCondition_ParameterDeclaration_FieldMask()
}

func (o *Condition_ParameterDeclaration) MakeDiffFieldMask(other *Condition_ParameterDeclaration) *Condition_ParameterDeclaration_FieldMask {
	if o == nil && other == nil {
		return &Condition_ParameterDeclaration_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCondition_ParameterDeclaration_FieldMask()
	}

	res := &Condition_ParameterDeclaration_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &ConditionParameterDeclaration_FieldTerminalPath{selector: ConditionParameterDeclaration_FieldPathSelectorKey})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &ConditionParameterDeclaration_FieldTerminalPath{selector: ConditionParameterDeclaration_FieldPathSelectorType})
	}
	return res
}

func (o *Condition_ParameterDeclaration) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Condition_ParameterDeclaration))
}

func (o *Condition_ParameterDeclaration) Clone() *Condition_ParameterDeclaration {
	if o == nil {
		return nil
	}
	result := &Condition_ParameterDeclaration{}
	result.Key = o.Key
	result.Type = o.Type
	return result
}

func (o *Condition_ParameterDeclaration) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Condition_ParameterDeclaration) Merge(source *Condition_ParameterDeclaration) {
	o.Key = source.GetKey()
	o.Type = source.GetType()
}

func (o *Condition_ParameterDeclaration) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Condition_ParameterDeclaration))
}

func (o *ExecutableCondition) GotenObjectExt() {}

func (o *ExecutableCondition) MakeFullFieldMask() *ExecutableCondition_FieldMask {
	return FullExecutableCondition_FieldMask()
}

func (o *ExecutableCondition) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullExecutableCondition_FieldMask()
}

func (o *ExecutableCondition) MakeDiffFieldMask(other *ExecutableCondition) *ExecutableCondition_FieldMask {
	if o == nil && other == nil {
		return &ExecutableCondition_FieldMask{}
	}
	if o == nil || other == nil {
		return FullExecutableCondition_FieldMask()
	}

	res := &ExecutableCondition_FieldMask{}
	if o.GetCondition().String() != other.GetCondition().String() {
		res.Paths = append(res.Paths, &ExecutableCondition_FieldTerminalPath{selector: ExecutableCondition_FieldPathSelectorCondition})
	}
	if !proto.Equal(o.GetParams(), other.GetParams()) {
		res.Paths = append(res.Paths, &ExecutableCondition_FieldTerminalPath{selector: ExecutableCondition_FieldPathSelectorParams})
	}
	return res
}

func (o *ExecutableCondition) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ExecutableCondition))
}

func (o *ExecutableCondition) Clone() *ExecutableCondition {
	if o == nil {
		return nil
	}
	result := &ExecutableCondition{}
	if o.Condition == nil {
		result.Condition = nil
	} else if data, err := o.Condition.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Condition = &Reference{}
		if err := result.Condition.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Params = proto.Clone(o.Params).(*structpb.Struct)
	return result
}

func (o *ExecutableCondition) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ExecutableCondition) Merge(source *ExecutableCondition) {
	if source.GetCondition() != nil {
		if data, err := source.GetCondition().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Condition = &Reference{}
			if err := o.Condition.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Condition = nil
	}
	if source.GetParams() != nil {
		if o.Params == nil {
			o.Params = new(structpb.Struct)
		}
		proto.Merge(o.Params, source.GetParams())
	}
}

func (o *ExecutableCondition) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ExecutableCondition))
}
