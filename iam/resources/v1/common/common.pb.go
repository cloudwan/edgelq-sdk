// Code generated by protoc-gen-goten-go
// File: edgelq/iam/proto/v1/common.proto
// DO NOT EDIT!!!

package iam_common

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &meta_service.Service{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TpmVersion int32

const (
	TpmVersion_TPMVAGNOSTIC TpmVersion = 0
	TpmVersion_TPMV12       TpmVersion = 1
	TpmVersion_TPMV20       TpmVersion = 2
)

var (
	TpmVersion_name = map[int32]string{
		0: "TPMVAGNOSTIC",
		1: "TPMV12",
		2: "TPMV20",
	}

	TpmVersion_value = map[string]int32{
		"TPMVAGNOSTIC": 0,
		"TPMV12":       1,
		"TPMV20":       2,
	}
)

func (x TpmVersion) Enum() *TpmVersion {
	p := new(TpmVersion)
	*p = x
	return p
}

func (x TpmVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (TpmVersion) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1_common_proto_enumTypes[0].Descriptor()
}

func (TpmVersion) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1_common_proto_enumTypes[0]
}

func (x TpmVersion) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use TpmVersion.ProtoReflect.Descriptor instead.
func (TpmVersion) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

type DigestAlg int32

const (
	DigestAlg_SHA1   DigestAlg = 0
	DigestAlg_SHA256 DigestAlg = 1
)

var (
	DigestAlg_name = map[int32]string{
		0: "SHA1",
		1: "SHA256",
	}

	DigestAlg_value = map[string]int32{
		"SHA1":   0,
		"SHA256": 1,
	}
)

func (x DigestAlg) Enum() *DigestAlg {
	p := new(DigestAlg)
	*p = x
	return p
}

func (x DigestAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (DigestAlg) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1_common_proto_enumTypes[1].Descriptor()
}

func (DigestAlg) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1_common_proto_enumTypes[1]
}

func (x DigestAlg) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use DigestAlg.ProtoReflect.Descriptor instead.
func (DigestAlg) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

// BusinessTier indicates size of organizational entity (project or
// organization). Size-type sizes are used in core edgelq services,
// SKU-types can be used optionally by 3rd party services.
type BusinessTier int32

const (
	BusinessTier_UNDEFINED BusinessTier = 0
	BusinessTier_LARGE     BusinessTier = 1
	BusinessTier_MEDIUM    BusinessTier = 2
	BusinessTier_SMALL     BusinessTier = 3
	BusinessTier_XSMALL    BusinessTier = 4
	BusinessTier_SKU0      BusinessTier = 5
	BusinessTier_SKU1      BusinessTier = 6
	BusinessTier_SKU2      BusinessTier = 7
	BusinessTier_SKU3      BusinessTier = 8
	BusinessTier_SKU4      BusinessTier = 9
	BusinessTier_SKU5      BusinessTier = 10
	BusinessTier_SKU6      BusinessTier = 11
	BusinessTier_SKU7      BusinessTier = 12
	BusinessTier_SKU8      BusinessTier = 13
	BusinessTier_SKU9      BusinessTier = 14
	BusinessTier_SKU10     BusinessTier = 15
	BusinessTier_SKU11     BusinessTier = 16
	BusinessTier_SKU12     BusinessTier = 17
)

var (
	BusinessTier_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "LARGE",
		2:  "MEDIUM",
		3:  "SMALL",
		4:  "XSMALL",
		5:  "SKU0",
		6:  "SKU1",
		7:  "SKU2",
		8:  "SKU3",
		9:  "SKU4",
		10: "SKU5",
		11: "SKU6",
		12: "SKU7",
		13: "SKU8",
		14: "SKU9",
		15: "SKU10",
		16: "SKU11",
		17: "SKU12",
	}

	BusinessTier_value = map[string]int32{
		"UNDEFINED": 0,
		"LARGE":     1,
		"MEDIUM":    2,
		"SMALL":     3,
		"XSMALL":    4,
		"SKU0":      5,
		"SKU1":      6,
		"SKU2":      7,
		"SKU3":      8,
		"SKU4":      9,
		"SKU5":      10,
		"SKU6":      11,
		"SKU7":      12,
		"SKU8":      13,
		"SKU9":      14,
		"SKU10":     15,
		"SKU11":     16,
		"SKU12":     17,
	}
)

func (x BusinessTier) Enum() *BusinessTier {
	p := new(BusinessTier)
	*p = x
	return p
}

func (x BusinessTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (BusinessTier) Descriptor() preflect.EnumDescriptor {
	return edgelq_iam_proto_v1_common_proto_enumTypes[2].Descriptor()
}

func (BusinessTier) Type() preflect.EnumType {
	return &edgelq_iam_proto_v1_common_proto_enumTypes[2]
}

func (x BusinessTier) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use BusinessTier.ProtoReflect.Descriptor instead.
func (BusinessTier) EnumDescriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

type PCR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Index         uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Hex-encoded digest string (without 0x prefix, e.g. "DEADBEEF")
	DigestHex string    `protobuf:"bytes,2,opt,name=digest_hex,json=digestHex,proto3" json:"digest_hex,omitempty"`
	DigestAlg DigestAlg `protobuf:"varint,3,opt,name=digest_alg,json=digestAlg,proto3,enum=ntt.iam.v1.DigestAlg" json:"digest_alg,omitempty"`
	// User's comments for this entry
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *PCR) Reset() {
	*m = PCR{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PCR) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PCR) ProtoMessage() {}

func (m *PCR) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PCR) GotenMessage() {}

// Deprecated, Use PCR.ProtoReflect.Descriptor instead.
func (*PCR) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

func (m *PCR) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PCR) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PCR) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PCR) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PCR) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return uint32(0)
}

func (m *PCR) GetDigestHex() string {
	if m != nil {
		return m.DigestHex
	}
	return ""
}

func (m *PCR) GetDigestAlg() DigestAlg {
	if m != nil {
		return m.DigestAlg
	}
	return DigestAlg_SHA1
}

func (m *PCR) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *PCR) SetIndex(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Index", "PCR"))
	}
	m.Index = fv
}

func (m *PCR) SetDigestHex(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DigestHex", "PCR"))
	}
	m.DigestHex = fv
}

func (m *PCR) SetDigestAlg(fv DigestAlg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DigestAlg", "PCR"))
	}
	m.DigestAlg = fv
}

func (m *PCR) SetComment(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Comment", "PCR"))
	}
	m.Comment = fv
}

// ServiceBusinessTier binds specific service with specific business tier.
// It may be useful if two services use different tier in one organizational
// entity (project or organization).
type ServiceBusinessTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service
	Service *meta_service.Name `protobuf:"bytes,1,opt,customtype=Name,name=service,proto3" json:"service,omitempty"`
	// Entity tier value for given service. It may be also set to UNDEFINED,
	// if this service is not supposed to be used at all for given entity.
	// This way we can opt out from core edgelq services if needed.
	BusinessTier BusinessTier `protobuf:"varint,2,opt,name=business_tier,json=businessTier,proto3,enum=ntt.iam.v1.BusinessTier" json:"business_tier,omitempty"`
}

func (m *ServiceBusinessTier) Reset() {
	*m = ServiceBusinessTier{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ServiceBusinessTier) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ServiceBusinessTier) ProtoMessage() {}

func (m *ServiceBusinessTier) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ServiceBusinessTier) GotenMessage() {}

// Deprecated, Use ServiceBusinessTier.ProtoReflect.Descriptor instead.
func (*ServiceBusinessTier) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

func (m *ServiceBusinessTier) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ServiceBusinessTier) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ServiceBusinessTier) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ServiceBusinessTier) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ServiceBusinessTier) GetService() *meta_service.Name {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceBusinessTier) GetBusinessTier() BusinessTier {
	if m != nil {
		return m.BusinessTier
	}
	return BusinessTier_UNDEFINED
}

func (m *ServiceBusinessTier) SetService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ServiceBusinessTier"))
	}
	m.Service = fv
}

func (m *ServiceBusinessTier) SetBusinessTier(fv BusinessTier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BusinessTier", "ServiceBusinessTier"))
	}
	m.BusinessTier = fv
}

// ServiceErrors is generic container wrapping errors with services.
type ServiceErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Errors
	Errors []*ServiceErrors_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *ServiceErrors) Reset() {
	*m = ServiceErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ServiceErrors) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ServiceErrors) ProtoMessage() {}

func (m *ServiceErrors) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ServiceErrors) GotenMessage() {}

// Deprecated, Use ServiceErrors.ProtoReflect.Descriptor instead.
func (*ServiceErrors) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

func (m *ServiceErrors) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ServiceErrors) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ServiceErrors) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ServiceErrors) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ServiceErrors) GetErrors() []*ServiceErrors_Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ServiceErrors) SetErrors(fv []*ServiceErrors_Error) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Errors", "ServiceErrors"))
	}
	m.Errors = fv
}

type ServiceErrors_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service for which there are error reports. May be skipped if error is
	// cross-service or is about core EdgeLQ components.
	Service *meta_service.Name `protobuf:"bytes,1,opt,customtype=Name,name=service,proto3" json:"service,omitempty"`
	// Error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ServiceErrors_Error) Reset() {
	*m = ServiceErrors_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_iam_proto_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ServiceErrors_Error) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ServiceErrors_Error) ProtoMessage() {}

func (m *ServiceErrors_Error) ProtoReflect() preflect.Message {
	mi := &edgelq_iam_proto_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ServiceErrors_Error) GotenMessage() {}

// Deprecated, Use ServiceErrors_Error.ProtoReflect.Descriptor instead.
func (*ServiceErrors_Error) Descriptor() ([]byte, []int) {
	return edgelq_iam_proto_v1_common_proto_rawDescGZIP(), []int{2, 0}
}

func (m *ServiceErrors_Error) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ServiceErrors_Error) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ServiceErrors_Error) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ServiceErrors_Error) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ServiceErrors_Error) GetService() *meta_service.Name {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceErrors_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ServiceErrors_Error) SetService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ServiceErrors_Error"))
	}
	m.Service = fv
}

func (m *ServiceErrors_Error) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "ServiceErrors_Error"))
	}
	m.Message = fv
}

var edgelq_iam_proto_v1_common_proto preflect.FileDescriptor

var edgelq_iam_proto_v1_common_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x03, 0x50, 0x43, 0x52, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x6c, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x52,
	0x09, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2,
	0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x5b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a,
	0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x36, 0x0a,
	0x0a, 0x54, 0x70, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x50, 0x4d, 0x56, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x50, 0x4d, 0x56, 0x31, 0x32, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x4d,
	0x56, 0x32, 0x30, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x09, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41,
	0x6c, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x41, 0x31, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x2a, 0xd0, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x53,
	0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x30, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x31, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b,
	0x55, 0x32, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x33, 0x10, 0x08, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x4b, 0x55, 0x34, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x35,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x36, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x4b, 0x55, 0x37, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x38, 0x10, 0x0d,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x55, 0x39, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4b,
	0x55, 0x31, 0x30, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4b, 0x55, 0x31, 0x31, 0x10, 0x10,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x4b, 0x55, 0x31, 0x32, 0x10, 0x11, 0x42, 0x58, 0xe8, 0xde, 0x21,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x69, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_iam_proto_v1_common_proto_rawDescOnce sync.Once
	edgelq_iam_proto_v1_common_proto_rawDescData = edgelq_iam_proto_v1_common_proto_rawDesc
)

func edgelq_iam_proto_v1_common_proto_rawDescGZIP() []byte {
	edgelq_iam_proto_v1_common_proto_rawDescOnce.Do(func() {
		edgelq_iam_proto_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_iam_proto_v1_common_proto_rawDescData)
	})
	return edgelq_iam_proto_v1_common_proto_rawDescData
}

var edgelq_iam_proto_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var edgelq_iam_proto_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var edgelq_iam_proto_v1_common_proto_goTypes = []interface{}{
	(TpmVersion)(0),             // 0: ntt.iam.v1.TpmVersion
	(DigestAlg)(0),              // 1: ntt.iam.v1.DigestAlg
	(BusinessTier)(0),           // 2: ntt.iam.v1.BusinessTier
	(*PCR)(nil),                 // 3: ntt.iam.v1.PCR
	(*ServiceBusinessTier)(nil), // 4: ntt.iam.v1.ServiceBusinessTier
	(*ServiceErrors)(nil),       // 5: ntt.iam.v1.ServiceErrors
	(*ServiceErrors_Error)(nil), // 6: ntt.iam.v1.ServiceErrors.Error
}
var edgelq_iam_proto_v1_common_proto_depIdxs = []int32{
	1, // 0: ntt.iam.v1.PCR.digest_alg:type_name -> ntt.iam.v1.DigestAlg
	2, // 1: ntt.iam.v1.ServiceBusinessTier.business_tier:type_name -> ntt.iam.v1.BusinessTier
	6, // 2: ntt.iam.v1.ServiceErrors.errors:type_name -> ntt.iam.v1.ServiceErrors.Error
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { edgelq_iam_proto_v1_common_proto_init() }
func edgelq_iam_proto_v1_common_proto_init() {
	if edgelq_iam_proto_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_iam_proto_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceBusinessTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_iam_proto_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceErrors_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_iam_proto_v1_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_iam_proto_v1_common_proto_goTypes,
		DependencyIndexes: edgelq_iam_proto_v1_common_proto_depIdxs,
		EnumInfos:         edgelq_iam_proto_v1_common_proto_enumTypes,
		MessageInfos:      edgelq_iam_proto_v1_common_proto_msgTypes,
	}.Build()
	edgelq_iam_proto_v1_common_proto = out.File
	edgelq_iam_proto_v1_common_proto_rawDesc = nil
	edgelq_iam_proto_v1_common_proto_goTypes = nil
	edgelq_iam_proto_v1_common_proto_depIdxs = nil
}
