// Code generated by protoc-gen-goten-resource
// Resource: OrganizationInvitation
// DO NOT EDIT!!!

package organization_invitation

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	iam_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1/invitation"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &iam_common.PCR{}
	_ = &condition.Condition{}
	_ = &iam_invitation.Actor{}
	_ = &organization.Organization{}
	_ = &permission.Permission{}
	_ = &project.Project{}
	_ = &role.Role{}
	_ = &service_account.ServiceAccount{}
	_ = &user.User{}
	_ = &structpb.Struct{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsOrganizationInvitationFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsOrganizationInvitationFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp OrganizationInvitation_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      OrganizationInvitation_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Invitation() *filterCndBuilderInvitation {
	return &filterCndBuilderInvitation{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().Tags()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().Tags()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderInvitation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitation) Eq(value *iam_invitation.Invitation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitation) Neq(value *iam_invitation.Invitation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitation) Gt(value *iam_invitation.Invitation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitation) Gte(value *iam_invitation.Invitation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitation) Lt(value *iam_invitation.Invitation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitation) Lte(value *iam_invitation.Invitation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitation) In(values []*iam_invitation.Invitation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitation) NotIn(values []*iam_invitation.Invitation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().FieldPath(),
	})
}

func (b *filterCndBuilderInvitation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().FieldPath(),
	})
}

func (b *filterCndBuilderInvitation) compare(op gotenfilter.CompareOperator, value *iam_invitation.Invitation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().WithValue(value),
	})
}

func (b *filterCndBuilderInvitation) InviteeEmail() *filterCndBuilderInvitationInviteeEmail {
	return &filterCndBuilderInvitationInviteeEmail{builder: b.builder}
}

func (b *filterCndBuilderInvitation) InviterActor() *filterCndBuilderInvitationInviterActor {
	return &filterCndBuilderInvitationInviterActor{builder: b.builder}
}

func (b *filterCndBuilderInvitation) InviterFullName() *filterCndBuilderInvitationInviterFullName {
	return &filterCndBuilderInvitationInviterFullName{builder: b.builder}
}

func (b *filterCndBuilderInvitation) InviterEmail() *filterCndBuilderInvitationInviterEmail {
	return &filterCndBuilderInvitationInviterEmail{builder: b.builder}
}

func (b *filterCndBuilderInvitation) LanguageCode() *filterCndBuilderInvitationLanguageCode {
	return &filterCndBuilderInvitationLanguageCode{builder: b.builder}
}

func (b *filterCndBuilderInvitation) BindingRoles() *filterCndBuilderInvitationBindingRoles {
	return &filterCndBuilderInvitationBindingRoles{builder: b.builder}
}

func (b *filterCndBuilderInvitation) ExpirationDate() *filterCndBuilderInvitationExpirationDate {
	return &filterCndBuilderInvitationExpirationDate{builder: b.builder}
}

func (b *filterCndBuilderInvitation) Extras() *filterCndBuilderInvitationExtras {
	return &filterCndBuilderInvitationExtras{builder: b.builder}
}

func (b *filterCndBuilderInvitation) State() *filterCndBuilderInvitationState {
	return &filterCndBuilderInvitationState{builder: b.builder}
}

type filterCndBuilderInvitationInviteeEmail struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationInviteeEmail) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationInviteeEmail) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationInviteeEmail) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationInviteeEmail) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationInviteeEmail) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationInviteeEmail) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationInviteeEmail) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviteeEmail().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviteeEmail) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviteeEmail().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviteeEmail) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviteeEmail().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviteeEmail) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviteeEmail().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviteeEmail) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().InviteeEmail().WithValue(value),
	})
}

type filterCndBuilderInvitationInviterActor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationInviterActor) Eq(value *iam_invitation.Actor) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationInviterActor) Neq(value *iam_invitation.Actor) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationInviterActor) Gt(value *iam_invitation.Actor) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationInviterActor) Gte(value *iam_invitation.Actor) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationInviterActor) Lt(value *iam_invitation.Actor) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationInviterActor) Lte(value *iam_invitation.Actor) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationInviterActor) In(values []*iam_invitation.Actor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterActor) NotIn(values []*iam_invitation.Actor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterActor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterActor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterActor) compare(op gotenfilter.CompareOperator, value *iam_invitation.Actor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationInviterActor) User() *filterCndBuilderInvitationInviterActorUser {
	return &filterCndBuilderInvitationInviterActorUser{builder: b.builder}
}

func (b *filterCndBuilderInvitationInviterActor) ServiceAccount() *filterCndBuilderInvitationInviterActorServiceAccount {
	return &filterCndBuilderInvitationInviterActorServiceAccount{builder: b.builder}
}

type filterCndBuilderInvitationInviterActorUser struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationInviterActorUser) Eq(value *user.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationInviterActorUser) Neq(value *user.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationInviterActorUser) Gt(value *user.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationInviterActorUser) Gte(value *user.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationInviterActorUser) Lt(value *user.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationInviterActorUser) Lte(value *user.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationInviterActorUser) In(values []*user.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().User().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterActorUser) NotIn(values []*user.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().User().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterActorUser) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().User().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterActorUser) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().User().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterActorUser) compare(op gotenfilter.CompareOperator, value *user.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().User().WithValue(value),
	})
}

type filterCndBuilderInvitationInviterActorServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) Eq(value *service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) Neq(value *service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) Gt(value *service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) Gte(value *service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) Lt(value *service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) Lte(value *service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) In(values []*service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) NotIn(values []*service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterActorServiceAccount) compare(op gotenfilter.CompareOperator, value *service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterActor().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderInvitationInviterFullName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationInviterFullName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationInviterFullName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationInviterFullName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationInviterFullName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationInviterFullName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationInviterFullName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationInviterFullName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterFullName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterFullName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterFullName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterFullName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterFullName().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterFullName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterFullName().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterFullName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterFullName().WithValue(value),
	})
}

type filterCndBuilderInvitationInviterEmail struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationInviterEmail) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationInviterEmail) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationInviterEmail) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationInviterEmail) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationInviterEmail) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationInviterEmail) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationInviterEmail) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterEmail().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterEmail) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterEmail().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationInviterEmail) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterEmail().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterEmail) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterEmail().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationInviterEmail) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().InviterEmail().WithValue(value),
	})
}

type filterCndBuilderInvitationLanguageCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationLanguageCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationLanguageCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationLanguageCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationLanguageCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationLanguageCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationLanguageCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationLanguageCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().LanguageCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationLanguageCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().LanguageCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationLanguageCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().LanguageCode().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationLanguageCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().LanguageCode().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationLanguageCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().LanguageCode().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRoles struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRoles) Eq(value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRoles) Neq(value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRoles) Gt(value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRoles) Gte(value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRoles) Lt(value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRoles) Lte(value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRoles) In(values [][]*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRoles) NotIn(values [][]*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRoles) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRoles) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRoles) Contains(value *iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().WithItemValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRoles) ContainsAnyOf(values []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRoles) ContainsAll(values []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRoles) compare(op gotenfilter.CompareOperator, value []*iam_invitation.Invitation_BindingRole) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRoles) Role() *filterCndBuilderInvitationBindingRolesRole {
	return &filterCndBuilderInvitationBindingRolesRole{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRoles) ExecutableConditions() *filterCndBuilderInvitationBindingRolesExecutableConditions {
	return &filterCndBuilderInvitationBindingRolesExecutableConditions{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRoles) ScopeParams() *filterCndBuilderInvitationBindingRolesScopeParams {
	return &filterCndBuilderInvitationBindingRolesScopeParams{builder: b.builder}
}

type filterCndBuilderInvitationBindingRolesRole struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesRole) Eq(value *role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesRole) Neq(value *role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesRole) Gt(value *role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesRole) Gte(value *role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesRole) Lt(value *role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesRole) Lte(value *role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesRole) In(values []*role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().Role().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesRole) NotIn(values []*role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().Role().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesRole) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().Role().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesRole) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().Role().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesRole) compare(op gotenfilter.CompareOperator, value *role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().Role().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesExecutableConditions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Eq(value []*condition.ExecutableCondition) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Neq(value []*condition.ExecutableCondition) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Gt(value []*condition.ExecutableCondition) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Gte(value []*condition.ExecutableCondition) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Lt(value []*condition.ExecutableCondition) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Lte(value []*condition.ExecutableCondition) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) In(values [][]*condition.ExecutableCondition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) NotIn(values [][]*condition.ExecutableCondition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Contains(value *condition.ExecutableCondition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().WithItemValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) ContainsAnyOf(values []*condition.ExecutableCondition) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) ContainsAll(values []*condition.ExecutableCondition) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) compare(op gotenfilter.CompareOperator, value []*condition.ExecutableCondition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Condition() *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition {
	return &filterCndBuilderInvitationBindingRolesExecutableConditionsCondition{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditions) Params() *filterCndBuilderInvitationBindingRolesExecutableConditionsParams {
	return &filterCndBuilderInvitationBindingRolesExecutableConditionsParams{builder: b.builder}
}

type filterCndBuilderInvitationBindingRolesExecutableConditionsCondition struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) Eq(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) Neq(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) Gt(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) Gte(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) Lt(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) Lte(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) In(values []*condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) NotIn(values []*condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsCondition) compare(op gotenfilter.CompareOperator, value *condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Condition().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesExecutableConditionsParams struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) Eq(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) Neq(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) Gt(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) Gte(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) Lt(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) Lte(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) In(values []*structpb.Struct) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Params().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) NotIn(values []*structpb.Struct) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Params().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Params().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Params().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesExecutableConditionsParams) compare(op gotenfilter.CompareOperator, value *structpb.Struct) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ExecutableConditions().Params().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesScopeParams struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Eq(value []*role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Neq(value []*role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Gt(value []*role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Gte(value []*role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Lt(value []*role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Lte(value []*role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) In(values [][]*role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) NotIn(values [][]*role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Contains(value *role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().WithItemValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) ContainsAnyOf(values []*role.ScopeParam) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) ContainsAll(values []*role.ScopeParam) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) compare(op gotenfilter.CompareOperator, value []*role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Name() *filterCndBuilderInvitationBindingRolesScopeParamsName {
	return &filterCndBuilderInvitationBindingRolesScopeParamsName{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) String_() *filterCndBuilderInvitationBindingRolesScopeParamsString {
	return &filterCndBuilderInvitationBindingRolesScopeParamsString{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) Strings() *filterCndBuilderInvitationBindingRolesScopeParamsStrings {
	return &filterCndBuilderInvitationBindingRolesScopeParamsStrings{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRolesScopeParams) ValueFrom() *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom {
	return &filterCndBuilderInvitationBindingRolesScopeParamsValueFrom{builder: b.builder}
}

type filterCndBuilderInvitationBindingRolesScopeParamsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Name().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Name().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Name().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesScopeParamsString struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Eq(value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Neq(value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Gt(value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Gte(value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Lt(value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Lte(value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) In(values []*role.ScopeParam_StringValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) NotIn(values []*role.ScopeParam_StringValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) compare(op gotenfilter.CompareOperator, value *role.ScopeParam_StringValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsString) Value() *filterCndBuilderInvitationBindingRolesScopeParamsStringValue {
	return &filterCndBuilderInvitationBindingRolesScopeParamsStringValue{builder: b.builder}
}

type filterCndBuilderInvitationBindingRolesScopeParamsStringValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().Value().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().Value().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringValue) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().String_().Value().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesScopeParamsStrings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Eq(value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Neq(value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Gt(value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Gte(value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Lt(value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Lte(value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) In(values []*role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) NotIn(values []*role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) compare(op gotenfilter.CompareOperator, value *role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStrings) Values() *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues {
	return &filterCndBuilderInvitationBindingRolesScopeParamsStringsValues{builder: b.builder}
}

type filterCndBuilderInvitationBindingRolesScopeParamsStringsValues struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().FieldPath(),
		Value:     NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().WithItemValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values()
	itemValues := make([]OrganizationInvitation_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsStringsValues) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().Strings().Values().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesScopeParamsValueFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Eq(value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Neq(value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Gt(value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Gte(value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Lt(value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Lte(value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) In(values []*role.ScopeParam_FromValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) NotIn(values []*role.ScopeParam_FromValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) compare(op gotenfilter.CompareOperator, value *role.ScopeParam_FromValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Source() *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource {
	return &filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource{builder: b.builder}
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFrom) Path() *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath {
	return &filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath{builder: b.builder}
}

type filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) Eq(value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) Neq(value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) Gt(value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) Gte(value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) Lt(value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) Lte(value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) In(values []role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Source().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) NotIn(values []role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Source().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Source().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Source().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromSource) compare(op gotenfilter.CompareOperator, value role.ScopeParam_FromValue_Source) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Source().WithValue(value),
	})
}

type filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Path().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Path().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationBindingRolesScopeParamsValueFromPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().BindingRoles().ScopeParams().ValueFrom().Path().WithValue(value),
	})
}

type filterCndBuilderInvitationExpirationDate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationExpirationDate) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationExpirationDate) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationExpirationDate) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationExpirationDate) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationExpirationDate) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationExpirationDate) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationExpirationDate) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().ExpirationDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationExpirationDate) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().ExpirationDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationExpirationDate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().ExpirationDate().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationExpirationDate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().ExpirationDate().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationExpirationDate) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().ExpirationDate().WithValue(value),
	})
}

type filterCndBuilderInvitationExtras struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationExtras) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationExtras) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationExtras) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationExtras) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationExtras) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationExtras) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationExtras) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationExtras) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationExtras) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationExtras) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationExtras) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithValue(value),
	})
}

func (b *filterCndBuilderInvitationExtras) WithKey(key string) *mapFilterCndBuilderInvitationExtras {
	return &mapFilterCndBuilderInvitationExtras{builder: b.builder, key: key}
}

type mapFilterCndBuilderInvitationExtras struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderInvitationExtras) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderInvitationExtras) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderInvitationExtras) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderInvitationExtras) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderInvitationExtras) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderInvitationExtras) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderInvitationExtras) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInvitationExtras) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInvitationExtras) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInvitationExtras) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInvitationExtras) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().Extras().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderInvitationState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInvitationState) Eq(value iam_invitation.Invitation_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInvitationState) Neq(value iam_invitation.Invitation_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInvitationState) Gt(value iam_invitation.Invitation_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInvitationState) Gte(value iam_invitation.Invitation_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInvitationState) Lt(value iam_invitation.Invitation_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInvitationState) Lte(value iam_invitation.Invitation_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInvitationState) In(values []iam_invitation.Invitation_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationState) NotIn(values []iam_invitation.Invitation_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		OrganizationInvitation_FieldPathArrayOfValues: NewOrganizationInvitationFieldPathBuilder().Invitation().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInvitationState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().State().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewOrganizationInvitationFieldPathBuilder().Invitation().State().FieldPath(),
	})
}

func (b *filterCndBuilderInvitationState) compare(op gotenfilter.CompareOperator, value iam_invitation.Invitation_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                              op,
		OrganizationInvitation_FieldPathValue: NewOrganizationInvitationFieldPathBuilder().Invitation().State().WithValue(value),
	})
}
