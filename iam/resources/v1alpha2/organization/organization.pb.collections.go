// Code generated by protoc-gen-goten-resource
// Resource: Organization
// DO NOT EDIT!!!

package organization

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	multi_region_policy "github.com/cloudwan/edgelq-sdk/common/types/multi_region_policy"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type OrganizationList []*Organization

func (l OrganizationList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Organization))
}

func (l OrganizationList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(OrganizationList)...)
}

func (l OrganizationList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OrganizationList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l OrganizationList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Organization)
}

func (l OrganizationList) Length() int {
	return len(l)
}

type OrganizationChangeList []*OrganizationChange

func (l OrganizationChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*OrganizationChange))
}

func (l OrganizationChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(OrganizationChangeList)...)
}

func (l OrganizationChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OrganizationChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l OrganizationChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*OrganizationChange)
}

func (l OrganizationChangeList) Length() int {
	return len(l)
}

type OrganizationNameList []*Name

func (l OrganizationNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l OrganizationNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(OrganizationNameList)...)
}

func (l OrganizationNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OrganizationNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l OrganizationNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l OrganizationNameList) Length() int {
	return len(l)
}

type OrganizationReferenceList []*Reference

func (l OrganizationReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l OrganizationReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(OrganizationReferenceList)...)
}

func (l OrganizationReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OrganizationReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l OrganizationReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l OrganizationReferenceList) Length() int {
	return len(l)
}

type OrganizationMap map[Name]*Organization

func (m OrganizationMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m OrganizationMap) Set(res gotenresource.Resource) {
	tRes := res.(*Organization)
	m[*tRes.Name] = tRes
}

func (m OrganizationMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m OrganizationMap) Length() int {
	return len(m)
}

func (m OrganizationMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type OrganizationChangeMap map[Name]*OrganizationChange

func (m OrganizationChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m OrganizationChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*OrganizationChange)
	m[*tChange.GetOrganizationName()] = tChange
}

func (m OrganizationChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m OrganizationChangeMap) Length() int {
	return len(m)
}

func (m OrganizationChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
