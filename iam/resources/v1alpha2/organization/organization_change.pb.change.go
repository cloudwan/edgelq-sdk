// Code generated by protoc-gen-goten-resource
// Resource change: OrganizationChange
// DO NOT EDIT!!!

package organization

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
)

func (c *OrganizationChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*OrganizationChange_Added_)
	return ok
}

func (c *OrganizationChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*OrganizationChange_Modified_)
	return ok
}

func (c *OrganizationChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*OrganizationChange_Current_)
	return ok
}

func (c *OrganizationChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*OrganizationChange_Removed_)
	return ok
}

func (c *OrganizationChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *OrganizationChange_Added_:
		return cType.Added.ViewIndex
	case *OrganizationChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *OrganizationChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *OrganizationChange_Removed_:
		return cType.Removed.ViewIndex
	case *OrganizationChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *OrganizationChange) GetOrganization() *Organization {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *OrganizationChange_Added_:
		return cType.Added.Organization
	case *OrganizationChange_Modified_:
		return cType.Modified.Organization
	case *OrganizationChange_Current_:
		return cType.Current.Organization
	case *OrganizationChange_Removed_:
		return nil
	}
	return nil
}

func (c *OrganizationChange) GetRawResource() gotenresource.Resource {
	return c.GetOrganization()
}

func (c *OrganizationChange) GetOrganizationName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *OrganizationChange_Added_:
		return cType.Added.Organization.GetName()
	case *OrganizationChange_Modified_:
		return cType.Modified.Name
	case *OrganizationChange_Current_:
		return cType.Current.Organization.GetName()
	case *OrganizationChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *OrganizationChange) GetRawName() gotenresource.Name {
	return c.GetOrganizationName()
}

func (c *OrganizationChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &OrganizationChange_Added_{
		Added: &OrganizationChange_Added{
			Organization: snapshot.(*Organization),
			ViewIndex:    int32(idx),
		},
	}
}

func (c *OrganizationChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &OrganizationChange_Modified_{
		Modified: &OrganizationChange_Modified{
			Name:              name.(*Name),
			Organization:      snapshot.(*Organization),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *OrganizationChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &OrganizationChange_Current_{
		Current: &OrganizationChange_Current{
			Organization: snapshot.(*Organization),
		},
	}
}

func (c *OrganizationChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &OrganizationChange_Removed_{
		Removed: &OrganizationChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
