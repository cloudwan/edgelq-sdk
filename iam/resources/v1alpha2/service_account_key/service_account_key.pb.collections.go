// Code generated by protoc-gen-goten-resource
// Resource: ServiceAccountKey
// DO NOT EDIT!!!

package service_account_key

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &service_account.ServiceAccount{}
	_ = &timestamp.Timestamp{}
)

type ServiceAccountKeyList []*ServiceAccountKey

func (l ServiceAccountKeyList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ServiceAccountKey))
}

func (l ServiceAccountKeyList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ServiceAccountKeyList)...)
}

func (l ServiceAccountKeyList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceAccountKeyList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ServiceAccountKeyList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ServiceAccountKey)
}

func (l ServiceAccountKeyList) Length() int {
	return len(l)
}

type ServiceAccountKeyChangeList []*ServiceAccountKeyChange

func (l ServiceAccountKeyChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ServiceAccountKeyChange))
}

func (l ServiceAccountKeyChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ServiceAccountKeyChangeList)...)
}

func (l ServiceAccountKeyChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceAccountKeyChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ServiceAccountKeyChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ServiceAccountKeyChange)
}

func (l ServiceAccountKeyChangeList) Length() int {
	return len(l)
}

type ServiceAccountKeyNameList []*Name

func (l ServiceAccountKeyNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ServiceAccountKeyNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ServiceAccountKeyNameList)...)
}

func (l ServiceAccountKeyNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceAccountKeyNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ServiceAccountKeyNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ServiceAccountKeyNameList) Length() int {
	return len(l)
}

type ServiceAccountKeyReferenceList []*Reference

func (l ServiceAccountKeyReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ServiceAccountKeyReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ServiceAccountKeyReferenceList)...)
}

func (l ServiceAccountKeyReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceAccountKeyReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ServiceAccountKeyReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ServiceAccountKeyReferenceList) Length() int {
	return len(l)
}

type ServiceAccountKeyParentNameList []*ParentName

func (l ServiceAccountKeyParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ServiceAccountKeyParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ServiceAccountKeyParentNameList)...)
}

func (l ServiceAccountKeyParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceAccountKeyParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ServiceAccountKeyParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ServiceAccountKeyParentNameList) Length() int {
	return len(l)
}

type ServiceAccountKeyParentReferenceList []*ParentReference

func (l ServiceAccountKeyParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ServiceAccountKeyParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ServiceAccountKeyParentReferenceList)...)
}

func (l ServiceAccountKeyParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceAccountKeyParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ServiceAccountKeyParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ServiceAccountKeyParentReferenceList) Length() int {
	return len(l)
}

type ServiceAccountKeyMap map[Name]*ServiceAccountKey

func (m ServiceAccountKeyMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ServiceAccountKeyMap) Set(res gotenresource.Resource) {
	tRes := res.(*ServiceAccountKey)
	m[*tRes.Name] = tRes
}

func (m ServiceAccountKeyMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ServiceAccountKeyMap) Length() int {
	return len(m)
}

func (m ServiceAccountKeyMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ServiceAccountKeyChangeMap map[Name]*ServiceAccountKeyChange

func (m ServiceAccountKeyChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ServiceAccountKeyChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ServiceAccountKeyChange)
	m[*tChange.GetServiceAccountKeyName()] = tChange
}

func (m ServiceAccountKeyChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ServiceAccountKeyChangeMap) Length() int {
	return len(m)
}

func (m ServiceAccountKeyChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
