// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/service_account_key.proto
// DO NOT EDIT!!!

package service_account_key

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &service_account.ServiceAccount{}
	_ = &timestamp.Timestamp{}
)

func (o *ServiceAccountKey) GotenObjectExt() {}

func (o *ServiceAccountKey) MakeFullFieldMask() *ServiceAccountKey_FieldMask {
	return FullServiceAccountKey_FieldMask()
}

func (o *ServiceAccountKey) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullServiceAccountKey_FieldMask()
}

func (o *ServiceAccountKey) MakeDiffFieldMask(other *ServiceAccountKey) *ServiceAccountKey_FieldMask {
	if o == nil && other == nil {
		return &ServiceAccountKey_FieldMask{}
	}
	if o == nil || other == nil {
		return FullServiceAccountKey_FieldMask()
	}

	res := &ServiceAccountKey_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorDisplayName})
	}
	if o.GetPublicKeyData() != other.GetPublicKeyData() {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorPublicKeyData})
	}
	if o.GetPrivateKeyData() != other.GetPrivateKeyData() {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorPrivateKeyData})
	}
	if o.GetApiKey() != other.GetApiKey() {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorApiKey})
	}
	if o.GetAlgorithm() != other.GetAlgorithm() {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorAlgorithm})
	}
	if !proto.Equal(o.GetValidNotBefore(), other.GetValidNotBefore()) {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorValidNotBefore})
	}
	if !proto.Equal(o.GetValidNotAfter(), other.GetValidNotAfter()) {
		res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorValidNotAfter})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ServiceAccountKey_FieldTerminalPath{selector: ServiceAccountKey_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ServiceAccountKey_FieldSubPath{selector: ServiceAccountKey_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ServiceAccountKey) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ServiceAccountKey))
}

func (o *ServiceAccountKey) Clone() *ServiceAccountKey {
	if o == nil {
		return nil
	}
	result := &ServiceAccountKey{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.PublicKeyData = o.PublicKeyData
	result.PrivateKeyData = o.PrivateKeyData
	result.ApiKey = o.ApiKey
	result.Algorithm = o.Algorithm
	result.ValidNotBefore = proto.Clone(o.ValidNotBefore).(*timestamp.Timestamp)
	result.ValidNotAfter = proto.Clone(o.ValidNotAfter).(*timestamp.Timestamp)
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *ServiceAccountKey) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ServiceAccountKey) Merge(source *ServiceAccountKey) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	o.PublicKeyData = source.GetPublicKeyData()
	o.PrivateKeyData = source.GetPrivateKeyData()
	o.ApiKey = source.GetApiKey()
	o.Algorithm = source.GetAlgorithm()
	if source.GetValidNotBefore() != nil {
		if o.ValidNotBefore == nil {
			o.ValidNotBefore = new(timestamp.Timestamp)
		}
		proto.Merge(o.ValidNotBefore, source.GetValidNotBefore())
	}
	if source.GetValidNotAfter() != nil {
		if o.ValidNotAfter == nil {
			o.ValidNotAfter = new(timestamp.Timestamp)
		}
		proto.Merge(o.ValidNotAfter, source.GetValidNotAfter())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *ServiceAccountKey) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ServiceAccountKey))
}
