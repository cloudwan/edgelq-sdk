// Code generated by protoc-gen-goten-resource
// Resource: Condition
// DO NOT EDIT!!!

package condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &organization.Organization{}
	_ = &project.Project{}
)

type ConditionList []*Condition

func (l ConditionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Condition))
}

func (l ConditionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ConditionList)...)
}

func (l ConditionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConditionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ConditionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Condition)
}

func (l ConditionList) Length() int {
	return len(l)
}

type ConditionChangeList []*ConditionChange

func (l ConditionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ConditionChange))
}

func (l ConditionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ConditionChangeList)...)
}

func (l ConditionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConditionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ConditionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ConditionChange)
}

func (l ConditionChangeList) Length() int {
	return len(l)
}

type ConditionNameList []*Name

func (l ConditionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ConditionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ConditionNameList)...)
}

func (l ConditionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConditionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConditionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ConditionNameList) Length() int {
	return len(l)
}

type ConditionReferenceList []*Reference

func (l ConditionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ConditionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ConditionReferenceList)...)
}

func (l ConditionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConditionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConditionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ConditionReferenceList) Length() int {
	return len(l)
}

type ConditionParentNameList []*ParentName

func (l ConditionParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ConditionParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ConditionParentNameList)...)
}

func (l ConditionParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConditionParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConditionParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ConditionParentNameList) Length() int {
	return len(l)
}

type ConditionParentReferenceList []*ParentReference

func (l ConditionParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ConditionParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ConditionParentReferenceList)...)
}

func (l ConditionParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConditionParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConditionParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ConditionParentReferenceList) Length() int {
	return len(l)
}

type ConditionMap map[Name]*Condition

func (m ConditionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ConditionMap) Set(res gotenresource.Resource) {
	tRes := res.(*Condition)
	m[*tRes.Name] = tRes
}

func (m ConditionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConditionMap) Length() int {
	return len(m)
}

func (m ConditionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ConditionChangeMap map[Name]*ConditionChange

func (m ConditionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ConditionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ConditionChange)
	m[*tChange.GetConditionName()] = tChange
}

func (m ConditionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConditionChangeMap) Length() int {
	return len(m)
}

func (m ConditionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
