// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/role_binding.proto
// DO NOT EDIT!!!

package role_binding

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &condition.Condition{}
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &role.Role{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RoleBinding_FieldPath interface {
	gotenobject.FieldPath
	Selector() RoleBinding_FieldPathSelector
	Get(source *RoleBinding) []interface{}
	GetSingle(source *RoleBinding) (interface{}, bool)
	ClearValue(item *RoleBinding)

	// Those methods build corresponding RoleBinding_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RoleBinding_FieldPathValue
	WithIArrayOfValues(values interface{}) RoleBinding_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RoleBinding_FieldPathArrayItemValue
}

type RoleBinding_FieldPathSelector int32

const (
	RoleBinding_FieldPathSelectorName             RoleBinding_FieldPathSelector = 0
	RoleBinding_FieldPathSelectorRole             RoleBinding_FieldPathSelector = 1
	RoleBinding_FieldPathSelectorMember           RoleBinding_FieldPathSelector = 2
	RoleBinding_FieldPathSelectorConditionBinding RoleBinding_FieldPathSelector = 3
	RoleBinding_FieldPathSelectorAncestryPath     RoleBinding_FieldPathSelector = 4
	RoleBinding_FieldPathSelectorMetadata         RoleBinding_FieldPathSelector = 5
)

func (s RoleBinding_FieldPathSelector) String() string {
	switch s {
	case RoleBinding_FieldPathSelectorName:
		return "name"
	case RoleBinding_FieldPathSelectorRole:
		return "role"
	case RoleBinding_FieldPathSelectorMember:
		return "member"
	case RoleBinding_FieldPathSelectorConditionBinding:
		return "condition_binding"
	case RoleBinding_FieldPathSelectorAncestryPath:
		return "ancestry_path"
	case RoleBinding_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", s))
	}
}

func BuildRoleBinding_FieldPath(fp gotenobject.RawFieldPath) (RoleBinding_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RoleBinding")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RoleBinding_FieldTerminalPath{selector: RoleBinding_FieldPathSelectorName}, nil
		case "role":
			return &RoleBinding_FieldTerminalPath{selector: RoleBinding_FieldPathSelectorRole}, nil
		case "member":
			return &RoleBinding_FieldTerminalPath{selector: RoleBinding_FieldPathSelectorMember}, nil
		case "condition_binding", "conditionBinding", "condition-binding":
			return &RoleBinding_FieldTerminalPath{selector: RoleBinding_FieldPathSelectorConditionBinding}, nil
		case "ancestry_path", "ancestryPath", "ancestry-path":
			return &RoleBinding_FieldTerminalPath{selector: RoleBinding_FieldPathSelectorAncestryPath}, nil
		case "metadata":
			return &RoleBinding_FieldTerminalPath{selector: RoleBinding_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "condition_binding", "conditionBinding", "condition-binding":
			if subpath, err := condition.BuildConditionBinding_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RoleBinding_FieldSubPath{selector: RoleBinding_FieldPathSelectorConditionBinding, subPath: subpath}, nil
			}
		case "ancestry_path", "ancestryPath", "ancestry-path":
			if subpath, err := BuildRoleBindingParent_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RoleBinding_FieldSubPath{selector: RoleBinding_FieldPathSelectorAncestryPath, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RoleBinding_FieldSubPath{selector: RoleBinding_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RoleBinding", fp)
}

func ParseRoleBinding_FieldPath(rawField string) (RoleBinding_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRoleBinding_FieldPath(fp)
}

func MustParseRoleBinding_FieldPath(rawField string) RoleBinding_FieldPath {
	fp, err := ParseRoleBinding_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RoleBinding_FieldTerminalPath struct {
	selector RoleBinding_FieldPathSelector
}

var _ RoleBinding_FieldPath = (*RoleBinding_FieldTerminalPath)(nil)

func (fp *RoleBinding_FieldTerminalPath) Selector() RoleBinding_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RoleBinding_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RoleBinding_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RoleBinding
func (fp *RoleBinding_FieldTerminalPath) Get(source *RoleBinding) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RoleBinding_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case RoleBinding_FieldPathSelectorRole:
			if source.Role != nil {
				values = append(values, source.Role)
			}
		case RoleBinding_FieldPathSelectorMember:
			values = append(values, source.Member)
		case RoleBinding_FieldPathSelectorConditionBinding:
			if source.ConditionBinding != nil {
				values = append(values, source.ConditionBinding)
			}
		case RoleBinding_FieldPathSelectorAncestryPath:
			for _, value := range source.GetAncestryPath() {
				values = append(values, value)
			}
		case RoleBinding_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
		}
	}
	return
}

func (fp *RoleBinding_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RoleBinding))
}

// GetSingle returns value pointed by specific field of from source RoleBinding
func (fp *RoleBinding_FieldTerminalPath) GetSingle(source *RoleBinding) (interface{}, bool) {
	switch fp.selector {
	case RoleBinding_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case RoleBinding_FieldPathSelectorRole:
		res := source.GetRole()
		return res, res != nil
	case RoleBinding_FieldPathSelectorMember:
		return source.GetMember(), source != nil
	case RoleBinding_FieldPathSelectorConditionBinding:
		res := source.GetConditionBinding()
		return res, res != nil
	case RoleBinding_FieldPathSelectorAncestryPath:
		res := source.GetAncestryPath()
		return res, res != nil
	case RoleBinding_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
	}
}

func (fp *RoleBinding_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RoleBinding))
}

// GetDefault returns a default value of the field type
func (fp *RoleBinding_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RoleBinding_FieldPathSelectorName:
		return (*Name)(nil)
	case RoleBinding_FieldPathSelectorRole:
		return (*role.Reference)(nil)
	case RoleBinding_FieldPathSelectorMember:
		return ""
	case RoleBinding_FieldPathSelectorConditionBinding:
		return (*condition.ConditionBinding)(nil)
	case RoleBinding_FieldPathSelectorAncestryPath:
		return ([]*RoleBinding_Parent)(nil)
	case RoleBinding_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
	}
}

func (fp *RoleBinding_FieldTerminalPath) ClearValue(item *RoleBinding) {
	if item != nil {
		switch fp.selector {
		case RoleBinding_FieldPathSelectorName:
			item.Name = nil
		case RoleBinding_FieldPathSelectorRole:
			item.Role = nil
		case RoleBinding_FieldPathSelectorMember:
			item.Member = ""
		case RoleBinding_FieldPathSelectorConditionBinding:
			item.ConditionBinding = nil
		case RoleBinding_FieldPathSelectorAncestryPath:
			item.AncestryPath = nil
		case RoleBinding_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
		}
	}
}

func (fp *RoleBinding_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RoleBinding))
}

// IsLeaf - whether field path is holds simple value
func (fp *RoleBinding_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RoleBinding_FieldPathSelectorName ||
		fp.selector == RoleBinding_FieldPathSelectorRole ||
		fp.selector == RoleBinding_FieldPathSelectorMember
}

func (fp *RoleBinding_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RoleBinding_FieldTerminalPath) WithIValue(value interface{}) RoleBinding_FieldPathValue {
	switch fp.selector {
	case RoleBinding_FieldPathSelectorName:
		return &RoleBinding_FieldTerminalPathValue{RoleBinding_FieldTerminalPath: *fp, value: value.(*Name)}
	case RoleBinding_FieldPathSelectorRole:
		return &RoleBinding_FieldTerminalPathValue{RoleBinding_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	case RoleBinding_FieldPathSelectorMember:
		return &RoleBinding_FieldTerminalPathValue{RoleBinding_FieldTerminalPath: *fp, value: value.(string)}
	case RoleBinding_FieldPathSelectorConditionBinding:
		return &RoleBinding_FieldTerminalPathValue{RoleBinding_FieldTerminalPath: *fp, value: value.(*condition.ConditionBinding)}
	case RoleBinding_FieldPathSelectorAncestryPath:
		return &RoleBinding_FieldTerminalPathValue{RoleBinding_FieldTerminalPath: *fp, value: value.([]*RoleBinding_Parent)}
	case RoleBinding_FieldPathSelectorMetadata:
		return &RoleBinding_FieldTerminalPathValue{RoleBinding_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
	}
}

func (fp *RoleBinding_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RoleBinding_FieldTerminalPath) WithIArrayOfValues(values interface{}) RoleBinding_FieldPathArrayOfValues {
	fpaov := &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp}
	switch fp.selector {
	case RoleBinding_FieldPathSelectorName:
		return &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp, values: values.([]*Name)}
	case RoleBinding_FieldPathSelectorRole:
		return &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp, values: values.([]*role.Reference)}
	case RoleBinding_FieldPathSelectorMember:
		return &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp, values: values.([]string)}
	case RoleBinding_FieldPathSelectorConditionBinding:
		return &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp, values: values.([]*condition.ConditionBinding)}
	case RoleBinding_FieldPathSelectorAncestryPath:
		return &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp, values: values.([][]*RoleBinding_Parent)}
	case RoleBinding_FieldPathSelectorMetadata:
		return &RoleBinding_FieldTerminalPathArrayOfValues{RoleBinding_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
	}
	return fpaov
}

func (fp *RoleBinding_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RoleBinding_FieldTerminalPath) WithIArrayItemValue(value interface{}) RoleBinding_FieldPathArrayItemValue {
	switch fp.selector {
	case RoleBinding_FieldPathSelectorAncestryPath:
		return &RoleBinding_FieldTerminalPathArrayItemValue{RoleBinding_FieldTerminalPath: *fp, value: value.(*RoleBinding_Parent)}
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fp.selector))
	}
}

func (fp *RoleBinding_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RoleBinding_FieldSubPath struct {
	selector RoleBinding_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RoleBinding_FieldPath = (*RoleBinding_FieldSubPath)(nil)

func (fps *RoleBinding_FieldSubPath) Selector() RoleBinding_FieldPathSelector {
	return fps.selector
}
func (fps *RoleBinding_FieldSubPath) AsConditionBindingSubPath() (condition.ConditionBinding_FieldPath, bool) {
	res, ok := fps.subPath.(condition.ConditionBinding_FieldPath)
	return res, ok
}
func (fps *RoleBinding_FieldSubPath) AsAncestryPathSubPath() (RoleBindingParent_FieldPath, bool) {
	res, ok := fps.subPath.(RoleBindingParent_FieldPath)
	return res, ok
}
func (fps *RoleBinding_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RoleBinding_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RoleBinding_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RoleBinding
func (fps *RoleBinding_FieldSubPath) Get(source *RoleBinding) (values []interface{}) {
	if asConditionBindingFieldPath, ok := fps.AsConditionBindingSubPath(); ok {
		values = append(values, asConditionBindingFieldPath.Get(source.GetConditionBinding())...)
	} else if asParentFieldPath, ok := fps.AsAncestryPathSubPath(); ok {
		for _, item := range source.GetAncestryPath() {
			values = append(values, asParentFieldPath.Get(item)...)
		}
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fps.selector))
	}
	return
}

func (fps *RoleBinding_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RoleBinding))
}

// GetSingle returns value of selected field from source RoleBinding
func (fps *RoleBinding_FieldSubPath) GetSingle(source *RoleBinding) (interface{}, bool) {
	switch fps.selector {
	case RoleBinding_FieldPathSelectorConditionBinding:
		if source.GetConditionBinding() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionBinding())
	case RoleBinding_FieldPathSelectorAncestryPath:
		if len(source.GetAncestryPath()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAncestryPath()[0])
	case RoleBinding_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fps.selector))
	}
}

func (fps *RoleBinding_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RoleBinding))
}

// GetDefault returns a default value of the field type
func (fps *RoleBinding_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RoleBinding_FieldSubPath) ClearValue(item *RoleBinding) {
	if item != nil {
		switch fps.selector {
		case RoleBinding_FieldPathSelectorConditionBinding:
			fps.subPath.ClearValueRaw(item.ConditionBinding)
		case RoleBinding_FieldPathSelectorAncestryPath:
			for _, subItem := range item.AncestryPath {
				fps.subPath.ClearValueRaw(subItem)
			}
		case RoleBinding_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fps.selector))
		}
	}
}

func (fps *RoleBinding_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RoleBinding))
}

// IsLeaf - whether field path is holds simple value
func (fps *RoleBinding_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RoleBinding_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RoleBinding_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RoleBinding_FieldSubPath) WithIValue(value interface{}) RoleBinding_FieldPathValue {
	return &RoleBinding_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RoleBinding_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RoleBinding_FieldSubPath) WithIArrayOfValues(values interface{}) RoleBinding_FieldPathArrayOfValues {
	return &RoleBinding_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RoleBinding_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RoleBinding_FieldSubPath) WithIArrayItemValue(value interface{}) RoleBinding_FieldPathArrayItemValue {
	return &RoleBinding_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RoleBinding_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RoleBinding_FieldPathValue allows storing values for RoleBinding fields according to their type
type RoleBinding_FieldPathValue interface {
	RoleBinding_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RoleBinding)
	CompareWith(*RoleBinding) (cmp int, comparable bool)
}

func ParseRoleBinding_FieldPathValue(pathStr, valueStr string) (RoleBinding_FieldPathValue, error) {
	fp, err := ParseRoleBinding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RoleBinding field path value from %s: %v", valueStr, err)
	}
	return fpv.(RoleBinding_FieldPathValue), nil
}

func MustParseRoleBinding_FieldPathValue(pathStr, valueStr string) RoleBinding_FieldPathValue {
	fpv, err := ParseRoleBinding_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RoleBinding_FieldTerminalPathValue struct {
	RoleBinding_FieldTerminalPath
	value interface{}
}

var _ RoleBinding_FieldPathValue = (*RoleBinding_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RoleBinding' as interface{}
func (fpv *RoleBinding_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RoleBinding_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *RoleBinding_FieldTerminalPathValue) AsRoleValue() (*role.Reference, bool) {
	res, ok := fpv.value.(*role.Reference)
	return res, ok
}
func (fpv *RoleBinding_FieldTerminalPathValue) AsMemberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RoleBinding_FieldTerminalPathValue) AsConditionBindingValue() (*condition.ConditionBinding, bool) {
	res, ok := fpv.value.(*condition.ConditionBinding)
	return res, ok
}
func (fpv *RoleBinding_FieldTerminalPathValue) AsAncestryPathValue() ([]*RoleBinding_Parent, bool) {
	res, ok := fpv.value.([]*RoleBinding_Parent)
	return res, ok
}
func (fpv *RoleBinding_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object RoleBinding
func (fpv *RoleBinding_FieldTerminalPathValue) SetTo(target **RoleBinding) {
	if *target == nil {
		*target = new(RoleBinding)
	}
	switch fpv.selector {
	case RoleBinding_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case RoleBinding_FieldPathSelectorRole:
		(*target).Role = fpv.value.(*role.Reference)
	case RoleBinding_FieldPathSelectorMember:
		(*target).Member = fpv.value.(string)
	case RoleBinding_FieldPathSelectorConditionBinding:
		(*target).ConditionBinding = fpv.value.(*condition.ConditionBinding)
	case RoleBinding_FieldPathSelectorAncestryPath:
		(*target).AncestryPath = fpv.value.([]*RoleBinding_Parent)
	case RoleBinding_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fpv.selector))
	}
}

func (fpv *RoleBinding_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RoleBinding)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RoleBinding_FieldTerminalPathValue' with the value under path in 'RoleBinding'.
func (fpv *RoleBinding_FieldTerminalPathValue) CompareWith(source *RoleBinding) (int, bool) {
	switch fpv.selector {
	case RoleBinding_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RoleBinding_FieldPathSelectorRole:
		leftValue := fpv.value.(*role.Reference)
		rightValue := source.GetRole()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RoleBinding_FieldPathSelectorMember:
		leftValue := fpv.value.(string)
		rightValue := source.GetMember()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RoleBinding_FieldPathSelectorConditionBinding:
		return 0, false
	case RoleBinding_FieldPathSelectorAncestryPath:
		return 0, false
	case RoleBinding_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fpv.selector))
	}
}

func (fpv *RoleBinding_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RoleBinding))
}

type RoleBinding_FieldSubPathValue struct {
	RoleBinding_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RoleBinding_FieldPathValue = (*RoleBinding_FieldSubPathValue)(nil)

func (fpvs *RoleBinding_FieldSubPathValue) AsConditionBindingPathValue() (condition.ConditionBinding_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(condition.ConditionBinding_FieldPathValue)
	return res, ok
}
func (fpvs *RoleBinding_FieldSubPathValue) AsAncestryPathPathValue() (RoleBindingParent_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RoleBindingParent_FieldPathValue)
	return res, ok
}
func (fpvs *RoleBinding_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *RoleBinding_FieldSubPathValue) SetTo(target **RoleBinding) {
	if *target == nil {
		*target = new(RoleBinding)
	}
	switch fpvs.Selector() {
	case RoleBinding_FieldPathSelectorConditionBinding:
		fpvs.subPathValue.(condition.ConditionBinding_FieldPathValue).SetTo(&(*target).ConditionBinding)
	case RoleBinding_FieldPathSelectorAncestryPath:
		panic("FieldPath setter is unsupported for array subpaths")
	case RoleBinding_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fpvs.Selector()))
	}
}

func (fpvs *RoleBinding_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RoleBinding)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RoleBinding_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RoleBinding_FieldSubPathValue) CompareWith(source *RoleBinding) (int, bool) {
	switch fpvs.Selector() {
	case RoleBinding_FieldPathSelectorConditionBinding:
		return fpvs.subPathValue.(condition.ConditionBinding_FieldPathValue).CompareWith(source.GetConditionBinding())
	case RoleBinding_FieldPathSelectorAncestryPath:
		return 0, false // repeated field
	case RoleBinding_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fpvs.Selector()))
	}
}

func (fpvs *RoleBinding_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RoleBinding))
}

// RoleBinding_FieldPathArrayItemValue allows storing single item in Path-specific values for RoleBinding according to their type
// Present only for array (repeated) types.
type RoleBinding_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RoleBinding_FieldPath
	ContainsValue(*RoleBinding) bool
}

// ParseRoleBinding_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRoleBinding_FieldPathArrayItemValue(pathStr, valueStr string) (RoleBinding_FieldPathArrayItemValue, error) {
	fp, err := ParseRoleBinding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RoleBinding field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RoleBinding_FieldPathArrayItemValue), nil
}

func MustParseRoleBinding_FieldPathArrayItemValue(pathStr, valueStr string) RoleBinding_FieldPathArrayItemValue {
	fpaiv, err := ParseRoleBinding_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RoleBinding_FieldTerminalPathArrayItemValue struct {
	RoleBinding_FieldTerminalPath
	value interface{}
}

var _ RoleBinding_FieldPathArrayItemValue = (*RoleBinding_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RoleBinding as interface{}
func (fpaiv *RoleBinding_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RoleBinding_FieldTerminalPathArrayItemValue) AsAncestryPathItemValue() (*RoleBinding_Parent, bool) {
	res, ok := fpaiv.value.(*RoleBinding_Parent)
	return res, ok
}

func (fpaiv *RoleBinding_FieldTerminalPathArrayItemValue) GetSingle(source *RoleBinding) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RoleBinding_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RoleBinding))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RoleBinding'
func (fpaiv *RoleBinding_FieldTerminalPathArrayItemValue) ContainsValue(source *RoleBinding) bool {
	slice := fpaiv.RoleBinding_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RoleBinding_FieldSubPathArrayItemValue struct {
	RoleBinding_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RoleBinding_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RoleBinding_FieldSubPathArrayItemValue) AsConditionBindingPathItemValue() (condition.ConditionBinding_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(condition.ConditionBinding_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RoleBinding_FieldSubPathArrayItemValue) AsAncestryPathPathItemValue() (RoleBindingParent_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RoleBindingParent_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RoleBinding_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RoleBinding'
func (fpaivs *RoleBinding_FieldSubPathArrayItemValue) ContainsValue(source *RoleBinding) bool {
	switch fpaivs.Selector() {
	case RoleBinding_FieldPathSelectorConditionBinding:
		return fpaivs.subPathItemValue.(condition.ConditionBinding_FieldPathArrayItemValue).ContainsValue(source.GetConditionBinding())
	case RoleBinding_FieldPathSelectorAncestryPath:
		return false // repeated/map field
	case RoleBinding_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding: %d", fpaivs.Selector()))
	}
}

// RoleBinding_FieldPathArrayOfValues allows storing slice of values for RoleBinding fields according to their type
type RoleBinding_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RoleBinding_FieldPath
}

func ParseRoleBinding_FieldPathArrayOfValues(pathStr, valuesStr string) (RoleBinding_FieldPathArrayOfValues, error) {
	fp, err := ParseRoleBinding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RoleBinding field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RoleBinding_FieldPathArrayOfValues), nil
}

func MustParseRoleBinding_FieldPathArrayOfValues(pathStr, valuesStr string) RoleBinding_FieldPathArrayOfValues {
	fpaov, err := ParseRoleBinding_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RoleBinding_FieldTerminalPathArrayOfValues struct {
	RoleBinding_FieldTerminalPath
	values interface{}
}

var _ RoleBinding_FieldPathArrayOfValues = (*RoleBinding_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RoleBinding_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case RoleBinding_FieldPathSelectorRole:
		for _, v := range fpaov.values.([]*role.Reference) {
			values = append(values, v)
		}
	case RoleBinding_FieldPathSelectorMember:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RoleBinding_FieldPathSelectorConditionBinding:
		for _, v := range fpaov.values.([]*condition.ConditionBinding) {
			values = append(values, v)
		}
	case RoleBinding_FieldPathSelectorAncestryPath:
		for _, v := range fpaov.values.([][]*RoleBinding_Parent) {
			values = append(values, v)
		}
	case RoleBinding_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) AsRoleArrayOfValues() ([]*role.Reference, bool) {
	res, ok := fpaov.values.([]*role.Reference)
	return res, ok
}
func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) AsMemberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) AsConditionBindingArrayOfValues() ([]*condition.ConditionBinding, bool) {
	res, ok := fpaov.values.([]*condition.ConditionBinding)
	return res, ok
}
func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) AsAncestryPathArrayOfValues() ([][]*RoleBinding_Parent, bool) {
	res, ok := fpaov.values.([][]*RoleBinding_Parent)
	return res, ok
}
func (fpaov *RoleBinding_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type RoleBinding_FieldSubPathArrayOfValues struct {
	RoleBinding_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RoleBinding_FieldPathArrayOfValues = (*RoleBinding_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RoleBinding_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RoleBinding_FieldSubPathArrayOfValues) AsConditionBindingPathArrayOfValues() (condition.ConditionBinding_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(condition.ConditionBinding_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RoleBinding_FieldSubPathArrayOfValues) AsAncestryPathPathArrayOfValues() (RoleBindingParent_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RoleBindingParent_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RoleBinding_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RoleBindingParent_FieldPath interface {
	gotenobject.FieldPath
	Selector() RoleBindingParent_FieldPathSelector
	Get(source *RoleBinding_Parent) []interface{}
	GetSingle(source *RoleBinding_Parent) (interface{}, bool)
	ClearValue(item *RoleBinding_Parent)

	// Those methods build corresponding RoleBindingParent_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RoleBindingParent_FieldPathValue
	WithIArrayOfValues(values interface{}) RoleBindingParent_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RoleBindingParent_FieldPathArrayItemValue
}

type RoleBindingParent_FieldPathSelector int32

const (
	RoleBindingParent_FieldPathSelectorParent RoleBindingParent_FieldPathSelector = 0
	RoleBindingParent_FieldPathSelectorMember RoleBindingParent_FieldPathSelector = 1
)

func (s RoleBindingParent_FieldPathSelector) String() string {
	switch s {
	case RoleBindingParent_FieldPathSelectorParent:
		return "parent"
	case RoleBindingParent_FieldPathSelectorMember:
		return "member"
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", s))
	}
}

func BuildRoleBindingParent_FieldPath(fp gotenobject.RawFieldPath) (RoleBindingParent_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RoleBinding_Parent")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &RoleBindingParent_FieldTerminalPath{selector: RoleBindingParent_FieldPathSelectorParent}, nil
		case "member":
			return &RoleBindingParent_FieldTerminalPath{selector: RoleBindingParent_FieldPathSelectorMember}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RoleBinding_Parent", fp)
}

func ParseRoleBindingParent_FieldPath(rawField string) (RoleBindingParent_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRoleBindingParent_FieldPath(fp)
}

func MustParseRoleBindingParent_FieldPath(rawField string) RoleBindingParent_FieldPath {
	fp, err := ParseRoleBindingParent_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RoleBindingParent_FieldTerminalPath struct {
	selector RoleBindingParent_FieldPathSelector
}

var _ RoleBindingParent_FieldPath = (*RoleBindingParent_FieldTerminalPath)(nil)

func (fp *RoleBindingParent_FieldTerminalPath) Selector() RoleBindingParent_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RoleBindingParent_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RoleBindingParent_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RoleBinding_Parent
func (fp *RoleBindingParent_FieldTerminalPath) Get(source *RoleBinding_Parent) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RoleBindingParent_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case RoleBindingParent_FieldPathSelectorMember:
			values = append(values, source.Member)
		default:
			panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
		}
	}
	return
}

func (fp *RoleBindingParent_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RoleBinding_Parent))
}

// GetSingle returns value pointed by specific field of from source RoleBinding_Parent
func (fp *RoleBindingParent_FieldTerminalPath) GetSingle(source *RoleBinding_Parent) (interface{}, bool) {
	switch fp.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case RoleBindingParent_FieldPathSelectorMember:
		return source.GetMember(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
	}
}

func (fp *RoleBindingParent_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RoleBinding_Parent))
}

// GetDefault returns a default value of the field type
func (fp *RoleBindingParent_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		return (*Reference)(nil)
	case RoleBindingParent_FieldPathSelectorMember:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
	}
}

func (fp *RoleBindingParent_FieldTerminalPath) ClearValue(item *RoleBinding_Parent) {
	if item != nil {
		switch fp.selector {
		case RoleBindingParent_FieldPathSelectorParent:
			item.Parent = nil
		case RoleBindingParent_FieldPathSelectorMember:
			item.Member = ""
		default:
			panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
		}
	}
}

func (fp *RoleBindingParent_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RoleBinding_Parent))
}

// IsLeaf - whether field path is holds simple value
func (fp *RoleBindingParent_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RoleBindingParent_FieldPathSelectorParent ||
		fp.selector == RoleBindingParent_FieldPathSelectorMember
}

func (fp *RoleBindingParent_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RoleBindingParent_FieldTerminalPath) WithIValue(value interface{}) RoleBindingParent_FieldPathValue {
	switch fp.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		return &RoleBindingParent_FieldTerminalPathValue{RoleBindingParent_FieldTerminalPath: *fp, value: value.(*Reference)}
	case RoleBindingParent_FieldPathSelectorMember:
		return &RoleBindingParent_FieldTerminalPathValue{RoleBindingParent_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
	}
}

func (fp *RoleBindingParent_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RoleBindingParent_FieldTerminalPath) WithIArrayOfValues(values interface{}) RoleBindingParent_FieldPathArrayOfValues {
	fpaov := &RoleBindingParent_FieldTerminalPathArrayOfValues{RoleBindingParent_FieldTerminalPath: *fp}
	switch fp.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		return &RoleBindingParent_FieldTerminalPathArrayOfValues{RoleBindingParent_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case RoleBindingParent_FieldPathSelectorMember:
		return &RoleBindingParent_FieldTerminalPathArrayOfValues{RoleBindingParent_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
	}
	return fpaov
}

func (fp *RoleBindingParent_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RoleBindingParent_FieldTerminalPath) WithIArrayItemValue(value interface{}) RoleBindingParent_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fp.selector))
	}
}

func (fp *RoleBindingParent_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RoleBindingParent_FieldPathValue allows storing values for Parent fields according to their type
type RoleBindingParent_FieldPathValue interface {
	RoleBindingParent_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RoleBinding_Parent)
	CompareWith(*RoleBinding_Parent) (cmp int, comparable bool)
}

func ParseRoleBindingParent_FieldPathValue(pathStr, valueStr string) (RoleBindingParent_FieldPathValue, error) {
	fp, err := ParseRoleBindingParent_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parent field path value from %s: %v", valueStr, err)
	}
	return fpv.(RoleBindingParent_FieldPathValue), nil
}

func MustParseRoleBindingParent_FieldPathValue(pathStr, valueStr string) RoleBindingParent_FieldPathValue {
	fpv, err := ParseRoleBindingParent_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RoleBindingParent_FieldTerminalPathValue struct {
	RoleBindingParent_FieldTerminalPath
	value interface{}
}

var _ RoleBindingParent_FieldPathValue = (*RoleBindingParent_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Parent' as interface{}
func (fpv *RoleBindingParent_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RoleBindingParent_FieldTerminalPathValue) AsParentValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *RoleBindingParent_FieldTerminalPathValue) AsMemberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Parent
func (fpv *RoleBindingParent_FieldTerminalPathValue) SetTo(target **RoleBinding_Parent) {
	if *target == nil {
		*target = new(RoleBinding_Parent)
	}
	switch fpv.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*Reference)
	case RoleBindingParent_FieldPathSelectorMember:
		(*target).Member = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fpv.selector))
	}
}

func (fpv *RoleBindingParent_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RoleBinding_Parent)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RoleBindingParent_FieldTerminalPathValue' with the value under path in 'RoleBinding_Parent'.
func (fpv *RoleBindingParent_FieldTerminalPathValue) CompareWith(source *RoleBinding_Parent) (int, bool) {
	switch fpv.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RoleBindingParent_FieldPathSelectorMember:
		leftValue := fpv.value.(string)
		rightValue := source.GetMember()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RoleBinding_Parent: %d", fpv.selector))
	}
}

func (fpv *RoleBindingParent_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RoleBinding_Parent))
}

// RoleBindingParent_FieldPathArrayItemValue allows storing single item in Path-specific values for Parent according to their type
// Present only for array (repeated) types.
type RoleBindingParent_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RoleBindingParent_FieldPath
	ContainsValue(*RoleBinding_Parent) bool
}

// ParseRoleBindingParent_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRoleBindingParent_FieldPathArrayItemValue(pathStr, valueStr string) (RoleBindingParent_FieldPathArrayItemValue, error) {
	fp, err := ParseRoleBindingParent_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parent field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RoleBindingParent_FieldPathArrayItemValue), nil
}

func MustParseRoleBindingParent_FieldPathArrayItemValue(pathStr, valueStr string) RoleBindingParent_FieldPathArrayItemValue {
	fpaiv, err := ParseRoleBindingParent_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RoleBindingParent_FieldTerminalPathArrayItemValue struct {
	RoleBindingParent_FieldTerminalPath
	value interface{}
}

var _ RoleBindingParent_FieldPathArrayItemValue = (*RoleBindingParent_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RoleBinding_Parent as interface{}
func (fpaiv *RoleBindingParent_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RoleBindingParent_FieldTerminalPathArrayItemValue) GetSingle(source *RoleBinding_Parent) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RoleBindingParent_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RoleBinding_Parent))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Parent'
func (fpaiv *RoleBindingParent_FieldTerminalPathArrayItemValue) ContainsValue(source *RoleBinding_Parent) bool {
	slice := fpaiv.RoleBindingParent_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RoleBindingParent_FieldPathArrayOfValues allows storing slice of values for Parent fields according to their type
type RoleBindingParent_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RoleBindingParent_FieldPath
}

func ParseRoleBindingParent_FieldPathArrayOfValues(pathStr, valuesStr string) (RoleBindingParent_FieldPathArrayOfValues, error) {
	fp, err := ParseRoleBindingParent_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parent field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RoleBindingParent_FieldPathArrayOfValues), nil
}

func MustParseRoleBindingParent_FieldPathArrayOfValues(pathStr, valuesStr string) RoleBindingParent_FieldPathArrayOfValues {
	fpaov, err := ParseRoleBindingParent_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RoleBindingParent_FieldTerminalPathArrayOfValues struct {
	RoleBindingParent_FieldTerminalPath
	values interface{}
}

var _ RoleBindingParent_FieldPathArrayOfValues = (*RoleBindingParent_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RoleBindingParent_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RoleBindingParent_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case RoleBindingParent_FieldPathSelectorMember:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RoleBindingParent_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *RoleBindingParent_FieldTerminalPathArrayOfValues) AsMemberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
