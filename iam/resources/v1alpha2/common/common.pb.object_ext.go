// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package iam_common

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &meta_service.Service{}
)

func (o *PCR) GotenObjectExt() {}

func (o *PCR) MakeFullFieldMask() *PCR_FieldMask {
	return FullPCR_FieldMask()
}

func (o *PCR) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPCR_FieldMask()
}

func (o *PCR) MakeDiffFieldMask(other *PCR) *PCR_FieldMask {
	if o == nil && other == nil {
		return &PCR_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPCR_FieldMask()
	}

	res := &PCR_FieldMask{}
	if o.GetIndex() != other.GetIndex() {
		res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorIndex})
	}
	if o.GetDigestHex() != other.GetDigestHex() {
		res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorDigestHex})
	}
	if o.GetDigestAlg() != other.GetDigestAlg() {
		res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorDigestAlg})
	}
	if o.GetComment() != other.GetComment() {
		res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorComment})
	}
	return res
}

func (o *PCR) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PCR))
}

func (o *PCR) Clone() *PCR {
	if o == nil {
		return nil
	}
	result := &PCR{}
	result.Index = o.Index
	result.DigestHex = o.DigestHex
	result.DigestAlg = o.DigestAlg
	result.Comment = o.Comment
	return result
}

func (o *PCR) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PCR) Merge(source *PCR) {
	o.Index = source.GetIndex()
	o.DigestHex = source.GetDigestHex()
	o.DigestAlg = source.GetDigestAlg()
	o.Comment = source.GetComment()
}

func (o *PCR) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PCR))
}

func (o *ServiceBusinessTier) GotenObjectExt() {}

func (o *ServiceBusinessTier) MakeFullFieldMask() *ServiceBusinessTier_FieldMask {
	return FullServiceBusinessTier_FieldMask()
}

func (o *ServiceBusinessTier) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullServiceBusinessTier_FieldMask()
}

func (o *ServiceBusinessTier) MakeDiffFieldMask(other *ServiceBusinessTier) *ServiceBusinessTier_FieldMask {
	if o == nil && other == nil {
		return &ServiceBusinessTier_FieldMask{}
	}
	if o == nil || other == nil {
		return FullServiceBusinessTier_FieldMask()
	}

	res := &ServiceBusinessTier_FieldMask{}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &ServiceBusinessTier_FieldTerminalPath{selector: ServiceBusinessTier_FieldPathSelectorService})
	}
	if o.GetBusinessTier() != other.GetBusinessTier() {
		res.Paths = append(res.Paths, &ServiceBusinessTier_FieldTerminalPath{selector: ServiceBusinessTier_FieldPathSelectorBusinessTier})
	}
	return res
}

func (o *ServiceBusinessTier) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ServiceBusinessTier))
}

func (o *ServiceBusinessTier) Clone() *ServiceBusinessTier {
	if o == nil {
		return nil
	}
	result := &ServiceBusinessTier{}
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Name{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.BusinessTier = o.BusinessTier
	return result
}

func (o *ServiceBusinessTier) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ServiceBusinessTier) Merge(source *ServiceBusinessTier) {
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Name{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	o.BusinessTier = source.GetBusinessTier()
}

func (o *ServiceBusinessTier) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ServiceBusinessTier))
}

func (o *ServiceErrors) GotenObjectExt() {}

func (o *ServiceErrors) MakeFullFieldMask() *ServiceErrors_FieldMask {
	return FullServiceErrors_FieldMask()
}

func (o *ServiceErrors) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullServiceErrors_FieldMask()
}

func (o *ServiceErrors) MakeDiffFieldMask(other *ServiceErrors) *ServiceErrors_FieldMask {
	if o == nil && other == nil {
		return &ServiceErrors_FieldMask{}
	}
	if o == nil || other == nil {
		return FullServiceErrors_FieldMask()
	}

	res := &ServiceErrors_FieldMask{}

	if len(o.GetErrors()) == len(other.GetErrors()) {
		for i, lValue := range o.GetErrors() {
			rValue := other.GetErrors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ServiceErrors_FieldTerminalPath{selector: ServiceErrors_FieldPathSelectorErrors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ServiceErrors_FieldTerminalPath{selector: ServiceErrors_FieldPathSelectorErrors})
	}
	return res
}

func (o *ServiceErrors) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ServiceErrors))
}

func (o *ServiceErrors) Clone() *ServiceErrors {
	if o == nil {
		return nil
	}
	result := &ServiceErrors{}
	result.Errors = make([]*ServiceErrors_Error, len(o.Errors))
	for i, sourceValue := range o.Errors {
		result.Errors[i] = sourceValue.Clone()
	}
	return result
}

func (o *ServiceErrors) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ServiceErrors) Merge(source *ServiceErrors) {
	for _, sourceValue := range source.GetErrors() {
		exists := false
		for _, currentValue := range o.Errors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *ServiceErrors_Error
			if sourceValue != nil {
				newDstElement = new(ServiceErrors_Error)
				newDstElement.Merge(sourceValue)
			}
			o.Errors = append(o.Errors, newDstElement)
		}
	}

}

func (o *ServiceErrors) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ServiceErrors))
}

func (o *ServiceErrors_Error) GotenObjectExt() {}

func (o *ServiceErrors_Error) MakeFullFieldMask() *ServiceErrors_Error_FieldMask {
	return FullServiceErrors_Error_FieldMask()
}

func (o *ServiceErrors_Error) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullServiceErrors_Error_FieldMask()
}

func (o *ServiceErrors_Error) MakeDiffFieldMask(other *ServiceErrors_Error) *ServiceErrors_Error_FieldMask {
	if o == nil && other == nil {
		return &ServiceErrors_Error_FieldMask{}
	}
	if o == nil || other == nil {
		return FullServiceErrors_Error_FieldMask()
	}

	res := &ServiceErrors_Error_FieldMask{}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &ServiceErrorsError_FieldTerminalPath{selector: ServiceErrorsError_FieldPathSelectorService})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &ServiceErrorsError_FieldTerminalPath{selector: ServiceErrorsError_FieldPathSelectorMessage})
	}
	return res
}

func (o *ServiceErrors_Error) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ServiceErrors_Error))
}

func (o *ServiceErrors_Error) Clone() *ServiceErrors_Error {
	if o == nil {
		return nil
	}
	result := &ServiceErrors_Error{}
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Name{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Message = o.Message
	return result
}

func (o *ServiceErrors_Error) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ServiceErrors_Error) Merge(source *ServiceErrors_Error) {
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Name{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	o.Message = source.GetMessage()
}

func (o *ServiceErrors_Error) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ServiceErrors_Error))
}
