// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package iam_common

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &meta_service.Service{}
)

type PCR_FieldMask struct {
	Paths []PCR_FieldPath
}

func FullPCR_FieldMask() *PCR_FieldMask {
	res := &PCR_FieldMask{}
	res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorIndex})
	res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorDigestHex})
	res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorDigestAlg})
	res.Paths = append(res.Paths, &PCR_FieldTerminalPath{selector: PCR_FieldPathSelectorComment})
	return res
}

func (fieldMask *PCR_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *PCR_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PCR_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *PCR_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePCR_FieldPath(raw)
	})
}

func (fieldMask *PCR_FieldMask) ProtoMessage() {}

func (fieldMask *PCR_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *PCR_FieldMask) Subtract(other *PCR_FieldMask) *PCR_FieldMask {
	result := &PCR_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PCR_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *PCR_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*PCR_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *PCR_FieldMask) FilterInputFields() *PCR_FieldMask {
	result := &PCR_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *PCR_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *PCR_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PCR_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePCR_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask PCR_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *PCR_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PCR_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask PCR_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *PCR_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PCR_FieldMask) AppendPath(path PCR_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *PCR_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PCR_FieldPath))
}

func (fieldMask *PCR_FieldMask) GetPaths() []PCR_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *PCR_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *PCR_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePCR_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *PCR_FieldMask) Set(target, source *PCR) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *PCR_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*PCR), source.(*PCR))
}

func (fieldMask *PCR_FieldMask) Project(source *PCR) *PCR {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &PCR{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PCR_FieldTerminalPath:
			switch tp.selector {
			case PCR_FieldPathSelectorIndex:
				result.Index = source.Index
			case PCR_FieldPathSelectorDigestHex:
				result.DigestHex = source.DigestHex
			case PCR_FieldPathSelectorDigestAlg:
				result.DigestAlg = source.DigestAlg
			case PCR_FieldPathSelectorComment:
				result.Comment = source.Comment
			}
		}
	}
	return result
}

func (fieldMask *PCR_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*PCR))
}

func (fieldMask *PCR_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ServiceBusinessTier_FieldMask struct {
	Paths []ServiceBusinessTier_FieldPath
}

func FullServiceBusinessTier_FieldMask() *ServiceBusinessTier_FieldMask {
	res := &ServiceBusinessTier_FieldMask{}
	res.Paths = append(res.Paths, &ServiceBusinessTier_FieldTerminalPath{selector: ServiceBusinessTier_FieldPathSelectorService})
	res.Paths = append(res.Paths, &ServiceBusinessTier_FieldTerminalPath{selector: ServiceBusinessTier_FieldPathSelectorBusinessTier})
	return res
}

func (fieldMask *ServiceBusinessTier_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ServiceBusinessTier_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ServiceBusinessTier_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ServiceBusinessTier_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseServiceBusinessTier_FieldPath(raw)
	})
}

func (fieldMask *ServiceBusinessTier_FieldMask) ProtoMessage() {}

func (fieldMask *ServiceBusinessTier_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ServiceBusinessTier_FieldMask) Subtract(other *ServiceBusinessTier_FieldMask) *ServiceBusinessTier_FieldMask {
	result := &ServiceBusinessTier_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ServiceBusinessTier_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ServiceBusinessTier_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ServiceBusinessTier_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ServiceBusinessTier_FieldMask) FilterInputFields() *ServiceBusinessTier_FieldMask {
	result := &ServiceBusinessTier_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ServiceBusinessTier_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ServiceBusinessTier_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ServiceBusinessTier_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseServiceBusinessTier_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ServiceBusinessTier_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ServiceBusinessTier_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ServiceBusinessTier_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ServiceBusinessTier_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ServiceBusinessTier_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ServiceBusinessTier_FieldMask) AppendPath(path ServiceBusinessTier_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ServiceBusinessTier_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ServiceBusinessTier_FieldPath))
}

func (fieldMask *ServiceBusinessTier_FieldMask) GetPaths() []ServiceBusinessTier_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ServiceBusinessTier_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ServiceBusinessTier_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseServiceBusinessTier_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ServiceBusinessTier_FieldMask) Set(target, source *ServiceBusinessTier) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ServiceBusinessTier_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ServiceBusinessTier), source.(*ServiceBusinessTier))
}

func (fieldMask *ServiceBusinessTier_FieldMask) Project(source *ServiceBusinessTier) *ServiceBusinessTier {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ServiceBusinessTier{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ServiceBusinessTier_FieldTerminalPath:
			switch tp.selector {
			case ServiceBusinessTier_FieldPathSelectorService:
				result.Service = source.Service
			case ServiceBusinessTier_FieldPathSelectorBusinessTier:
				result.BusinessTier = source.BusinessTier
			}
		}
	}
	return result
}

func (fieldMask *ServiceBusinessTier_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ServiceBusinessTier))
}

func (fieldMask *ServiceBusinessTier_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ServiceErrors_FieldMask struct {
	Paths []ServiceErrors_FieldPath
}

func FullServiceErrors_FieldMask() *ServiceErrors_FieldMask {
	res := &ServiceErrors_FieldMask{}
	res.Paths = append(res.Paths, &ServiceErrors_FieldTerminalPath{selector: ServiceErrors_FieldPathSelectorErrors})
	return res
}

func (fieldMask *ServiceErrors_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ServiceErrors_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ServiceErrors_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ServiceErrors_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseServiceErrors_FieldPath(raw)
	})
}

func (fieldMask *ServiceErrors_FieldMask) ProtoMessage() {}

func (fieldMask *ServiceErrors_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ServiceErrors_FieldMask) Subtract(other *ServiceErrors_FieldMask) *ServiceErrors_FieldMask {
	result := &ServiceErrors_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[ServiceErrors_FieldPathSelector]gotenobject.FieldMask{
		ServiceErrors_FieldPathSelectorErrors: &ServiceErrors_Error_FieldMask{},
	}
	mySubMasks := map[ServiceErrors_FieldPathSelector]gotenobject.FieldMask{
		ServiceErrors_FieldPathSelectorErrors: &ServiceErrors_Error_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ServiceErrors_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ServiceErrors_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ServiceErrors_FieldTerminalPath); ok {
					switch tp.selector {
					case ServiceErrors_FieldPathSelectorErrors:
						mySubMasks[ServiceErrors_FieldPathSelectorErrors] = FullServiceErrors_Error_FieldMask()
					}
				} else if tp, ok := path.(*ServiceErrors_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ServiceErrors_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ServiceErrors_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ServiceErrors_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ServiceErrors_FieldMask) FilterInputFields() *ServiceErrors_FieldMask {
	result := &ServiceErrors_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ServiceErrors_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ServiceErrors_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ServiceErrors_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseServiceErrors_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ServiceErrors_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ServiceErrors_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ServiceErrors_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ServiceErrors_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ServiceErrors_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ServiceErrors_FieldMask) AppendPath(path ServiceErrors_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ServiceErrors_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ServiceErrors_FieldPath))
}

func (fieldMask *ServiceErrors_FieldMask) GetPaths() []ServiceErrors_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ServiceErrors_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ServiceErrors_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseServiceErrors_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ServiceErrors_FieldMask) Set(target, source *ServiceErrors) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ServiceErrors_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ServiceErrors), source.(*ServiceErrors))
}

func (fieldMask *ServiceErrors_FieldMask) Project(source *ServiceErrors) *ServiceErrors {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ServiceErrors{}
	errorsMask := &ServiceErrors_Error_FieldMask{}
	wholeErrorsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ServiceErrors_FieldTerminalPath:
			switch tp.selector {
			case ServiceErrors_FieldPathSelectorErrors:
				result.Errors = source.Errors
				wholeErrorsAccepted = true
			}
		case *ServiceErrors_FieldSubPath:
			switch tp.selector {
			case ServiceErrors_FieldPathSelectorErrors:
				errorsMask.AppendPath(tp.subPath.(ServiceErrorsError_FieldPath))
			}
		}
	}
	if wholeErrorsAccepted == false && len(errorsMask.Paths) > 0 {
		for _, sourceItem := range source.GetErrors() {
			result.Errors = append(result.Errors, errorsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ServiceErrors_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ServiceErrors))
}

func (fieldMask *ServiceErrors_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ServiceErrors_Error_FieldMask struct {
	Paths []ServiceErrorsError_FieldPath
}

func FullServiceErrors_Error_FieldMask() *ServiceErrors_Error_FieldMask {
	res := &ServiceErrors_Error_FieldMask{}
	res.Paths = append(res.Paths, &ServiceErrorsError_FieldTerminalPath{selector: ServiceErrorsError_FieldPathSelectorService})
	res.Paths = append(res.Paths, &ServiceErrorsError_FieldTerminalPath{selector: ServiceErrorsError_FieldPathSelectorMessage})
	return res
}

func (fieldMask *ServiceErrors_Error_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *ServiceErrors_Error_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ServiceErrorsError_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ServiceErrors_Error_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseServiceErrorsError_FieldPath(raw)
	})
}

func (fieldMask *ServiceErrors_Error_FieldMask) ProtoMessage() {}

func (fieldMask *ServiceErrors_Error_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ServiceErrors_Error_FieldMask) Subtract(other *ServiceErrors_Error_FieldMask) *ServiceErrors_Error_FieldMask {
	result := &ServiceErrors_Error_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ServiceErrorsError_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ServiceErrors_Error_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ServiceErrors_Error_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ServiceErrors_Error_FieldMask) FilterInputFields() *ServiceErrors_Error_FieldMask {
	result := &ServiceErrors_Error_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ServiceErrors_Error_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ServiceErrors_Error_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ServiceErrorsError_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseServiceErrorsError_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ServiceErrors_Error_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ServiceErrors_Error_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ServiceErrors_Error_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ServiceErrors_Error_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ServiceErrors_Error_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ServiceErrors_Error_FieldMask) AppendPath(path ServiceErrorsError_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ServiceErrors_Error_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ServiceErrorsError_FieldPath))
}

func (fieldMask *ServiceErrors_Error_FieldMask) GetPaths() []ServiceErrorsError_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ServiceErrors_Error_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ServiceErrors_Error_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseServiceErrorsError_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ServiceErrors_Error_FieldMask) Set(target, source *ServiceErrors_Error) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ServiceErrors_Error_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ServiceErrors_Error), source.(*ServiceErrors_Error))
}

func (fieldMask *ServiceErrors_Error_FieldMask) Project(source *ServiceErrors_Error) *ServiceErrors_Error {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ServiceErrors_Error{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ServiceErrorsError_FieldTerminalPath:
			switch tp.selector {
			case ServiceErrorsError_FieldPathSelectorService:
				result.Service = source.Service
			case ServiceErrorsError_FieldPathSelectorMessage:
				result.Message = source.Message
			}
		}
	}
	return result
}

func (fieldMask *ServiceErrors_Error_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ServiceErrors_Error))
}

func (fieldMask *ServiceErrors_Error_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
