// Code generated by protoc-gen-goten-resource
// Resource change: PermissionChange
// DO NOT EDIT!!!

package permission

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
)

func (c *PermissionChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PermissionChange_Added_)
	return ok
}

func (c *PermissionChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PermissionChange_Modified_)
	return ok
}

func (c *PermissionChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PermissionChange_Current_)
	return ok
}

func (c *PermissionChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PermissionChange_Removed_)
	return ok
}

func (c *PermissionChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PermissionChange_Added_:
		return cType.Added.ViewIndex
	case *PermissionChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *PermissionChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PermissionChange_Removed_:
		return cType.Removed.ViewIndex
	case *PermissionChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *PermissionChange) GetPermission() *Permission {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PermissionChange_Added_:
		return cType.Added.Permission
	case *PermissionChange_Modified_:
		return cType.Modified.Permission
	case *PermissionChange_Current_:
		return cType.Current.Permission
	case *PermissionChange_Removed_:
		return nil
	}
	return nil
}

func (c *PermissionChange) GetResource() gotenresource.Resource {
	return c.GetPermission()
}

func (c *PermissionChange) GetPermissionName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PermissionChange_Added_:
		return cType.Added.Permission.GetName()
	case *PermissionChange_Modified_:
		return cType.Modified.Name
	case *PermissionChange_Current_:
		return cType.Current.Permission.GetName()
	case *PermissionChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *PermissionChange) GetRawName() gotenresource.Name {
	return c.GetPermissionName()
}

func (c *PermissionChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &PermissionChange_Added_{
		Added: &PermissionChange_Added{
			Permission: snapshot.(*Permission),
			ViewIndex:  int32(idx),
		},
	}
}

func (c *PermissionChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &PermissionChange_Modified_{
		Modified: &PermissionChange_Modified{
			Name:              name.(*Name),
			Permission:        snapshot.(*Permission),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *PermissionChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &PermissionChange_Current_{
		Current: &PermissionChange_Current{
			Permission: snapshot.(*Permission),
		},
	}
}

func (c *PermissionChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &PermissionChange_Removed_{
		Removed: &PermissionChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
