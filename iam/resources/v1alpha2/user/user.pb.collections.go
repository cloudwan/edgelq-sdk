// Code generated by protoc-gen-goten-resource
// Resource: User
// DO NOT EDIT!!!

package user

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
)

type UserList []*User

func (l UserList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*User))
}

func (l UserList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(UserList)...)
}

func (l UserList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l UserList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l UserList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*User)
}

func (l UserList) Length() int {
	return len(l)
}

type UserChangeList []*UserChange

func (l UserChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*UserChange))
}

func (l UserChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(UserChangeList)...)
}

func (l UserChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l UserChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l UserChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*UserChange)
}

func (l UserChangeList) Length() int {
	return len(l)
}

type UserNameList []*Name

func (l UserNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l UserNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(UserNameList)...)
}

func (l UserNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l UserNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l UserNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l UserNameList) Length() int {
	return len(l)
}

type UserReferenceList []*Reference

func (l UserReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l UserReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(UserReferenceList)...)
}

func (l UserReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l UserReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l UserReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l UserReferenceList) Length() int {
	return len(l)
}

type UserMap map[Name]*User

func (m UserMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m UserMap) Set(res gotenresource.Resource) {
	tRes := res.(*User)
	m[*tRes.Name] = tRes
}

func (m UserMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m UserMap) Length() int {
	return len(m)
}

func (m UserMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type UserChangeMap map[Name]*UserChange

func (m UserChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m UserChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*UserChange)
	m[*tChange.GetUserName()] = tChange
}

func (m UserChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m UserChangeMap) Length() int {
	return len(m)
}

func (m UserChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
