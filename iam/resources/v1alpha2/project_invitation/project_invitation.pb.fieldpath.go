// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/project_invitation.proto
// DO NOT EDIT!!!

package project_invitation

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/invitation"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_invitation.Actor{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProjectInvitation_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProjectInvitation_FieldPathSelector
	Get(source *ProjectInvitation) []interface{}
	GetSingle(source *ProjectInvitation) (interface{}, bool)
	ClearValue(item *ProjectInvitation)

	// Those methods build corresponding ProjectInvitation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProjectInvitation_FieldPathValue
	WithIArrayOfValues(values interface{}) ProjectInvitation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProjectInvitation_FieldPathArrayItemValue
}

type ProjectInvitation_FieldPathSelector int32

const (
	ProjectInvitation_FieldPathSelectorName               ProjectInvitation_FieldPathSelector = 0
	ProjectInvitation_FieldPathSelectorProjectDisplayName ProjectInvitation_FieldPathSelector = 1
	ProjectInvitation_FieldPathSelectorInvitation         ProjectInvitation_FieldPathSelector = 2
	ProjectInvitation_FieldPathSelectorMetadata           ProjectInvitation_FieldPathSelector = 3
)

func (s ProjectInvitation_FieldPathSelector) String() string {
	switch s {
	case ProjectInvitation_FieldPathSelectorName:
		return "name"
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		return "project_display_name"
	case ProjectInvitation_FieldPathSelectorInvitation:
		return "invitation"
	case ProjectInvitation_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", s))
	}
}

func BuildProjectInvitation_FieldPath(fp gotenobject.RawFieldPath) (ProjectInvitation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProjectInvitation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProjectInvitation_FieldTerminalPath{selector: ProjectInvitation_FieldPathSelectorName}, nil
		case "project_display_name", "projectDisplayName", "project-display-name":
			return &ProjectInvitation_FieldTerminalPath{selector: ProjectInvitation_FieldPathSelectorProjectDisplayName}, nil
		case "invitation":
			return &ProjectInvitation_FieldTerminalPath{selector: ProjectInvitation_FieldPathSelectorInvitation}, nil
		case "metadata":
			return &ProjectInvitation_FieldTerminalPath{selector: ProjectInvitation_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "invitation":
			if subpath, err := iam_invitation.BuildInvitation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProjectInvitation_FieldSubPath{selector: ProjectInvitation_FieldPathSelectorInvitation, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProjectInvitation_FieldSubPath{selector: ProjectInvitation_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProjectInvitation", fp)
}

func ParseProjectInvitation_FieldPath(rawField string) (ProjectInvitation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProjectInvitation_FieldPath(fp)
}

func MustParseProjectInvitation_FieldPath(rawField string) ProjectInvitation_FieldPath {
	fp, err := ParseProjectInvitation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProjectInvitation_FieldTerminalPath struct {
	selector ProjectInvitation_FieldPathSelector
}

var _ ProjectInvitation_FieldPath = (*ProjectInvitation_FieldTerminalPath)(nil)

func (fp *ProjectInvitation_FieldTerminalPath) Selector() ProjectInvitation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProjectInvitation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProjectInvitation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProjectInvitation
func (fp *ProjectInvitation_FieldTerminalPath) Get(source *ProjectInvitation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProjectInvitation_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProjectInvitation_FieldPathSelectorProjectDisplayName:
			values = append(values, source.ProjectDisplayName)
		case ProjectInvitation_FieldPathSelectorInvitation:
			if source.Invitation != nil {
				values = append(values, source.Invitation)
			}
		case ProjectInvitation_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
		}
	}
	return
}

func (fp *ProjectInvitation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProjectInvitation))
}

// GetSingle returns value pointed by specific field of from source ProjectInvitation
func (fp *ProjectInvitation_FieldTerminalPath) GetSingle(source *ProjectInvitation) (interface{}, bool) {
	switch fp.selector {
	case ProjectInvitation_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		return source.GetProjectDisplayName(), source != nil
	case ProjectInvitation_FieldPathSelectorInvitation:
		res := source.GetInvitation()
		return res, res != nil
	case ProjectInvitation_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
	}
}

func (fp *ProjectInvitation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProjectInvitation))
}

// GetDefault returns a default value of the field type
func (fp *ProjectInvitation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProjectInvitation_FieldPathSelectorName:
		return (*Name)(nil)
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		return ""
	case ProjectInvitation_FieldPathSelectorInvitation:
		return (*iam_invitation.Invitation)(nil)
	case ProjectInvitation_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
	}
}

func (fp *ProjectInvitation_FieldTerminalPath) ClearValue(item *ProjectInvitation) {
	if item != nil {
		switch fp.selector {
		case ProjectInvitation_FieldPathSelectorName:
			item.Name = nil
		case ProjectInvitation_FieldPathSelectorProjectDisplayName:
			item.ProjectDisplayName = ""
		case ProjectInvitation_FieldPathSelectorInvitation:
			item.Invitation = nil
		case ProjectInvitation_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
		}
	}
}

func (fp *ProjectInvitation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProjectInvitation))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProjectInvitation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProjectInvitation_FieldPathSelectorName ||
		fp.selector == ProjectInvitation_FieldPathSelectorProjectDisplayName
}

func (fp *ProjectInvitation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProjectInvitation_FieldTerminalPath) WithIValue(value interface{}) ProjectInvitation_FieldPathValue {
	switch fp.selector {
	case ProjectInvitation_FieldPathSelectorName:
		return &ProjectInvitation_FieldTerminalPathValue{ProjectInvitation_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		return &ProjectInvitation_FieldTerminalPathValue{ProjectInvitation_FieldTerminalPath: *fp, value: value.(string)}
	case ProjectInvitation_FieldPathSelectorInvitation:
		return &ProjectInvitation_FieldTerminalPathValue{ProjectInvitation_FieldTerminalPath: *fp, value: value.(*iam_invitation.Invitation)}
	case ProjectInvitation_FieldPathSelectorMetadata:
		return &ProjectInvitation_FieldTerminalPathValue{ProjectInvitation_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
	}
}

func (fp *ProjectInvitation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProjectInvitation_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProjectInvitation_FieldPathArrayOfValues {
	fpaov := &ProjectInvitation_FieldTerminalPathArrayOfValues{ProjectInvitation_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProjectInvitation_FieldPathSelectorName:
		return &ProjectInvitation_FieldTerminalPathArrayOfValues{ProjectInvitation_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		return &ProjectInvitation_FieldTerminalPathArrayOfValues{ProjectInvitation_FieldTerminalPath: *fp, values: values.([]string)}
	case ProjectInvitation_FieldPathSelectorInvitation:
		return &ProjectInvitation_FieldTerminalPathArrayOfValues{ProjectInvitation_FieldTerminalPath: *fp, values: values.([]*iam_invitation.Invitation)}
	case ProjectInvitation_FieldPathSelectorMetadata:
		return &ProjectInvitation_FieldTerminalPathArrayOfValues{ProjectInvitation_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProjectInvitation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProjectInvitation_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProjectInvitation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fp.selector))
	}
}

func (fp *ProjectInvitation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProjectInvitation_FieldSubPath struct {
	selector ProjectInvitation_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProjectInvitation_FieldPath = (*ProjectInvitation_FieldSubPath)(nil)

func (fps *ProjectInvitation_FieldSubPath) Selector() ProjectInvitation_FieldPathSelector {
	return fps.selector
}
func (fps *ProjectInvitation_FieldSubPath) AsInvitationSubPath() (iam_invitation.Invitation_FieldPath, bool) {
	res, ok := fps.subPath.(iam_invitation.Invitation_FieldPath)
	return res, ok
}
func (fps *ProjectInvitation_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProjectInvitation_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProjectInvitation_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProjectInvitation
func (fps *ProjectInvitation_FieldSubPath) Get(source *ProjectInvitation) (values []interface{}) {
	switch fps.selector {
	case ProjectInvitation_FieldPathSelectorInvitation:
		values = append(values, fps.subPath.GetRaw(source.GetInvitation())...)
	case ProjectInvitation_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fps.selector))
	}
	return
}

func (fps *ProjectInvitation_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProjectInvitation))
}

// GetSingle returns value of selected field from source ProjectInvitation
func (fps *ProjectInvitation_FieldSubPath) GetSingle(source *ProjectInvitation) (interface{}, bool) {
	switch fps.selector {
	case ProjectInvitation_FieldPathSelectorInvitation:
		if source.GetInvitation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInvitation())
	case ProjectInvitation_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fps.selector))
	}
}

func (fps *ProjectInvitation_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProjectInvitation))
}

// GetDefault returns a default value of the field type
func (fps *ProjectInvitation_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProjectInvitation_FieldSubPath) ClearValue(item *ProjectInvitation) {
	if item != nil {
		switch fps.selector {
		case ProjectInvitation_FieldPathSelectorInvitation:
			fps.subPath.ClearValueRaw(item.Invitation)
		case ProjectInvitation_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fps.selector))
		}
	}
}

func (fps *ProjectInvitation_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProjectInvitation))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProjectInvitation_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProjectInvitation_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProjectInvitation_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProjectInvitation_FieldSubPath) WithIValue(value interface{}) ProjectInvitation_FieldPathValue {
	return &ProjectInvitation_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProjectInvitation_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProjectInvitation_FieldSubPath) WithIArrayOfValues(values interface{}) ProjectInvitation_FieldPathArrayOfValues {
	return &ProjectInvitation_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProjectInvitation_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProjectInvitation_FieldSubPath) WithIArrayItemValue(value interface{}) ProjectInvitation_FieldPathArrayItemValue {
	return &ProjectInvitation_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProjectInvitation_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProjectInvitation_FieldPathValue allows storing values for ProjectInvitation fields according to their type
type ProjectInvitation_FieldPathValue interface {
	ProjectInvitation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProjectInvitation)
	CompareWith(*ProjectInvitation) (cmp int, comparable bool)
}

func ParseProjectInvitation_FieldPathValue(pathStr, valueStr string) (ProjectInvitation_FieldPathValue, error) {
	fp, err := ParseProjectInvitation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProjectInvitation field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProjectInvitation_FieldPathValue), nil
}

func MustParseProjectInvitation_FieldPathValue(pathStr, valueStr string) ProjectInvitation_FieldPathValue {
	fpv, err := ParseProjectInvitation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProjectInvitation_FieldTerminalPathValue struct {
	ProjectInvitation_FieldTerminalPath
	value interface{}
}

var _ ProjectInvitation_FieldPathValue = (*ProjectInvitation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProjectInvitation' as interface{}
func (fpv *ProjectInvitation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProjectInvitation_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProjectInvitation_FieldTerminalPathValue) AsProjectDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProjectInvitation_FieldTerminalPathValue) AsInvitationValue() (*iam_invitation.Invitation, bool) {
	res, ok := fpv.value.(*iam_invitation.Invitation)
	return res, ok
}
func (fpv *ProjectInvitation_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object ProjectInvitation
func (fpv *ProjectInvitation_FieldTerminalPathValue) SetTo(target **ProjectInvitation) {
	if *target == nil {
		*target = new(ProjectInvitation)
	}
	switch fpv.selector {
	case ProjectInvitation_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		(*target).ProjectDisplayName = fpv.value.(string)
	case ProjectInvitation_FieldPathSelectorInvitation:
		(*target).Invitation = fpv.value.(*iam_invitation.Invitation)
	case ProjectInvitation_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fpv.selector))
	}
}

func (fpv *ProjectInvitation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProjectInvitation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProjectInvitation_FieldTerminalPathValue' with the value under path in 'ProjectInvitation'.
func (fpv *ProjectInvitation_FieldTerminalPathValue) CompareWith(source *ProjectInvitation) (int, bool) {
	switch fpv.selector {
	case ProjectInvitation_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProjectDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProjectInvitation_FieldPathSelectorInvitation:
		return 0, false
	case ProjectInvitation_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fpv.selector))
	}
}

func (fpv *ProjectInvitation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProjectInvitation))
}

type ProjectInvitation_FieldSubPathValue struct {
	ProjectInvitation_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProjectInvitation_FieldPathValue = (*ProjectInvitation_FieldSubPathValue)(nil)

func (fpvs *ProjectInvitation_FieldSubPathValue) AsInvitationPathValue() (iam_invitation.Invitation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(iam_invitation.Invitation_FieldPathValue)
	return res, ok
}
func (fpvs *ProjectInvitation_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *ProjectInvitation_FieldSubPathValue) SetTo(target **ProjectInvitation) {
	if *target == nil {
		*target = new(ProjectInvitation)
	}
	switch fpvs.Selector() {
	case ProjectInvitation_FieldPathSelectorInvitation:
		fpvs.subPathValue.(iam_invitation.Invitation_FieldPathValue).SetTo(&(*target).Invitation)
	case ProjectInvitation_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fpvs.Selector()))
	}
}

func (fpvs *ProjectInvitation_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProjectInvitation)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProjectInvitation_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProjectInvitation_FieldSubPathValue) CompareWith(source *ProjectInvitation) (int, bool) {
	switch fpvs.Selector() {
	case ProjectInvitation_FieldPathSelectorInvitation:
		return fpvs.subPathValue.(iam_invitation.Invitation_FieldPathValue).CompareWith(source.GetInvitation())
	case ProjectInvitation_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fpvs.Selector()))
	}
}

func (fpvs *ProjectInvitation_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProjectInvitation))
}

// ProjectInvitation_FieldPathArrayItemValue allows storing single item in Path-specific values for ProjectInvitation according to their type
// Present only for array (repeated) types.
type ProjectInvitation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProjectInvitation_FieldPath
	ContainsValue(*ProjectInvitation) bool
}

// ParseProjectInvitation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProjectInvitation_FieldPathArrayItemValue(pathStr, valueStr string) (ProjectInvitation_FieldPathArrayItemValue, error) {
	fp, err := ParseProjectInvitation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProjectInvitation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProjectInvitation_FieldPathArrayItemValue), nil
}

func MustParseProjectInvitation_FieldPathArrayItemValue(pathStr, valueStr string) ProjectInvitation_FieldPathArrayItemValue {
	fpaiv, err := ParseProjectInvitation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProjectInvitation_FieldTerminalPathArrayItemValue struct {
	ProjectInvitation_FieldTerminalPath
	value interface{}
}

var _ ProjectInvitation_FieldPathArrayItemValue = (*ProjectInvitation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProjectInvitation as interface{}
func (fpaiv *ProjectInvitation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProjectInvitation_FieldTerminalPathArrayItemValue) GetSingle(source *ProjectInvitation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProjectInvitation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProjectInvitation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProjectInvitation'
func (fpaiv *ProjectInvitation_FieldTerminalPathArrayItemValue) ContainsValue(source *ProjectInvitation) bool {
	slice := fpaiv.ProjectInvitation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProjectInvitation_FieldSubPathArrayItemValue struct {
	ProjectInvitation_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProjectInvitation_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProjectInvitation_FieldSubPathArrayItemValue) AsInvitationPathItemValue() (iam_invitation.Invitation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(iam_invitation.Invitation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProjectInvitation_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProjectInvitation'
func (fpaivs *ProjectInvitation_FieldSubPathArrayItemValue) ContainsValue(source *ProjectInvitation) bool {
	switch fpaivs.Selector() {
	case ProjectInvitation_FieldPathSelectorInvitation:
		return fpaivs.subPathItemValue.(iam_invitation.Invitation_FieldPathArrayItemValue).ContainsValue(source.GetInvitation())
	case ProjectInvitation_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProjectInvitation: %d", fpaivs.Selector()))
	}
}

// ProjectInvitation_FieldPathArrayOfValues allows storing slice of values for ProjectInvitation fields according to their type
type ProjectInvitation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProjectInvitation_FieldPath
}

func ParseProjectInvitation_FieldPathArrayOfValues(pathStr, valuesStr string) (ProjectInvitation_FieldPathArrayOfValues, error) {
	fp, err := ParseProjectInvitation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProjectInvitation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProjectInvitation_FieldPathArrayOfValues), nil
}

func MustParseProjectInvitation_FieldPathArrayOfValues(pathStr, valuesStr string) ProjectInvitation_FieldPathArrayOfValues {
	fpaov, err := ParseProjectInvitation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProjectInvitation_FieldTerminalPathArrayOfValues struct {
	ProjectInvitation_FieldTerminalPath
	values interface{}
}

var _ ProjectInvitation_FieldPathArrayOfValues = (*ProjectInvitation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProjectInvitation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProjectInvitation_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProjectInvitation_FieldPathSelectorProjectDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProjectInvitation_FieldPathSelectorInvitation:
		for _, v := range fpaov.values.([]*iam_invitation.Invitation) {
			values = append(values, v)
		}
	case ProjectInvitation_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProjectInvitation_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProjectInvitation_FieldTerminalPathArrayOfValues) AsProjectDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProjectInvitation_FieldTerminalPathArrayOfValues) AsInvitationArrayOfValues() ([]*iam_invitation.Invitation, bool) {
	res, ok := fpaov.values.([]*iam_invitation.Invitation)
	return res, ok
}
func (fpaov *ProjectInvitation_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type ProjectInvitation_FieldSubPathArrayOfValues struct {
	ProjectInvitation_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProjectInvitation_FieldPathArrayOfValues = (*ProjectInvitation_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProjectInvitation_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProjectInvitation_FieldSubPathArrayOfValues) AsInvitationPathArrayOfValues() (iam_invitation.Invitation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(iam_invitation.Invitation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProjectInvitation_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
