// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/invitation.proto
// DO NOT EDIT!!!

package iam_invitation

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &role.Role{}
	_ = &service_account.ServiceAccount{}
	_ = &user.User{}
	_ = &timestamppb.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Actor_FieldPath interface {
	gotenobject.FieldPath
	Selector() Actor_FieldPathSelector
	Get(source *Actor) []interface{}
	GetSingle(source *Actor) (interface{}, bool)
	ClearValue(item *Actor)

	// Those methods build corresponding Actor_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Actor_FieldPathValue
	WithIArrayOfValues(values interface{}) Actor_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Actor_FieldPathArrayItemValue
}

type Actor_FieldPathSelector int32

const (
	Actor_FieldPathSelectorUser           Actor_FieldPathSelector = 0
	Actor_FieldPathSelectorServiceAccount Actor_FieldPathSelector = 1
)

func (s Actor_FieldPathSelector) String() string {
	switch s {
	case Actor_FieldPathSelectorUser:
		return "user"
	case Actor_FieldPathSelectorServiceAccount:
		return "service_account"
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", s))
	}
}

func BuildActor_FieldPath(fp gotenobject.RawFieldPath) (Actor_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Actor")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "user":
			return &Actor_FieldTerminalPath{selector: Actor_FieldPathSelectorUser}, nil
		case "service_account", "serviceAccount", "service-account":
			return &Actor_FieldTerminalPath{selector: Actor_FieldPathSelectorServiceAccount}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Actor", fp)
}

func ParseActor_FieldPath(rawField string) (Actor_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActor_FieldPath(fp)
}

func MustParseActor_FieldPath(rawField string) Actor_FieldPath {
	fp, err := ParseActor_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Actor_FieldTerminalPath struct {
	selector Actor_FieldPathSelector
}

var _ Actor_FieldPath = (*Actor_FieldTerminalPath)(nil)

func (fp *Actor_FieldTerminalPath) Selector() Actor_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Actor_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Actor_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Actor
func (fp *Actor_FieldTerminalPath) Get(source *Actor) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Actor_FieldPathSelectorUser:
			if source.User != nil {
				values = append(values, source.User)
			}
		case Actor_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
		}
	}
	return
}

func (fp *Actor_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Actor))
}

// GetSingle returns value pointed by specific field of from source Actor
func (fp *Actor_FieldTerminalPath) GetSingle(source *Actor) (interface{}, bool) {
	switch fp.selector {
	case Actor_FieldPathSelectorUser:
		res := source.GetUser()
		return res, res != nil
	case Actor_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
	}
}

func (fp *Actor_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Actor))
}

// GetDefault returns a default value of the field type
func (fp *Actor_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Actor_FieldPathSelectorUser:
		return (*user.Reference)(nil)
	case Actor_FieldPathSelectorServiceAccount:
		return (*service_account.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
	}
}

func (fp *Actor_FieldTerminalPath) ClearValue(item *Actor) {
	if item != nil {
		switch fp.selector {
		case Actor_FieldPathSelectorUser:
			item.User = nil
		case Actor_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
		}
	}
}

func (fp *Actor_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Actor))
}

// IsLeaf - whether field path is holds simple value
func (fp *Actor_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Actor_FieldPathSelectorUser ||
		fp.selector == Actor_FieldPathSelectorServiceAccount
}

func (fp *Actor_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Actor_FieldTerminalPath) WithIValue(value interface{}) Actor_FieldPathValue {
	switch fp.selector {
	case Actor_FieldPathSelectorUser:
		return &Actor_FieldTerminalPathValue{Actor_FieldTerminalPath: *fp, value: value.(*user.Reference)}
	case Actor_FieldPathSelectorServiceAccount:
		return &Actor_FieldTerminalPathValue{Actor_FieldTerminalPath: *fp, value: value.(*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
	}
}

func (fp *Actor_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Actor_FieldTerminalPath) WithIArrayOfValues(values interface{}) Actor_FieldPathArrayOfValues {
	fpaov := &Actor_FieldTerminalPathArrayOfValues{Actor_FieldTerminalPath: *fp}
	switch fp.selector {
	case Actor_FieldPathSelectorUser:
		return &Actor_FieldTerminalPathArrayOfValues{Actor_FieldTerminalPath: *fp, values: values.([]*user.Reference)}
	case Actor_FieldPathSelectorServiceAccount:
		return &Actor_FieldTerminalPathArrayOfValues{Actor_FieldTerminalPath: *fp, values: values.([]*service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
	}
	return fpaov
}

func (fp *Actor_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Actor_FieldTerminalPath) WithIArrayItemValue(value interface{}) Actor_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fp.selector))
	}
}

func (fp *Actor_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Actor_FieldPathValue allows storing values for Actor fields according to their type
type Actor_FieldPathValue interface {
	Actor_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Actor)
	CompareWith(*Actor) (cmp int, comparable bool)
}

func ParseActor_FieldPathValue(pathStr, valueStr string) (Actor_FieldPathValue, error) {
	fp, err := ParseActor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Actor field path value from %s: %v", valueStr, err)
	}
	return fpv.(Actor_FieldPathValue), nil
}

func MustParseActor_FieldPathValue(pathStr, valueStr string) Actor_FieldPathValue {
	fpv, err := ParseActor_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Actor_FieldTerminalPathValue struct {
	Actor_FieldTerminalPath
	value interface{}
}

var _ Actor_FieldPathValue = (*Actor_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Actor' as interface{}
func (fpv *Actor_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Actor_FieldTerminalPathValue) AsUserValue() (*user.Reference, bool) {
	res, ok := fpv.value.(*user.Reference)
	return res, ok
}
func (fpv *Actor_FieldTerminalPathValue) AsServiceAccountValue() (*service_account.Reference, bool) {
	res, ok := fpv.value.(*service_account.Reference)
	return res, ok
}

// SetTo stores value for selected field for object Actor
func (fpv *Actor_FieldTerminalPathValue) SetTo(target **Actor) {
	if *target == nil {
		*target = new(Actor)
	}
	switch fpv.selector {
	case Actor_FieldPathSelectorUser:
		(*target).User = fpv.value.(*user.Reference)
	case Actor_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*service_account.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fpv.selector))
	}
}

func (fpv *Actor_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Actor)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Actor_FieldTerminalPathValue' with the value under path in 'Actor'.
func (fpv *Actor_FieldTerminalPathValue) CompareWith(source *Actor) (int, bool) {
	switch fpv.selector {
	case Actor_FieldPathSelectorUser:
		leftValue := fpv.value.(*user.Reference)
		rightValue := source.GetUser()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Actor_FieldPathSelectorServiceAccount:
		leftValue := fpv.value.(*service_account.Reference)
		rightValue := source.GetServiceAccount()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Actor: %d", fpv.selector))
	}
}

func (fpv *Actor_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Actor))
}

// Actor_FieldPathArrayItemValue allows storing single item in Path-specific values for Actor according to their type
// Present only for array (repeated) types.
type Actor_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Actor_FieldPath
	ContainsValue(*Actor) bool
}

// ParseActor_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActor_FieldPathArrayItemValue(pathStr, valueStr string) (Actor_FieldPathArrayItemValue, error) {
	fp, err := ParseActor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Actor field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Actor_FieldPathArrayItemValue), nil
}

func MustParseActor_FieldPathArrayItemValue(pathStr, valueStr string) Actor_FieldPathArrayItemValue {
	fpaiv, err := ParseActor_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Actor_FieldTerminalPathArrayItemValue struct {
	Actor_FieldTerminalPath
	value interface{}
}

var _ Actor_FieldPathArrayItemValue = (*Actor_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Actor as interface{}
func (fpaiv *Actor_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Actor_FieldTerminalPathArrayItemValue) GetSingle(source *Actor) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Actor_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Actor))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Actor'
func (fpaiv *Actor_FieldTerminalPathArrayItemValue) ContainsValue(source *Actor) bool {
	slice := fpaiv.Actor_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Actor_FieldPathArrayOfValues allows storing slice of values for Actor fields according to their type
type Actor_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Actor_FieldPath
}

func ParseActor_FieldPathArrayOfValues(pathStr, valuesStr string) (Actor_FieldPathArrayOfValues, error) {
	fp, err := ParseActor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Actor field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Actor_FieldPathArrayOfValues), nil
}

func MustParseActor_FieldPathArrayOfValues(pathStr, valuesStr string) Actor_FieldPathArrayOfValues {
	fpaov, err := ParseActor_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Actor_FieldTerminalPathArrayOfValues struct {
	Actor_FieldTerminalPath
	values interface{}
}

var _ Actor_FieldPathArrayOfValues = (*Actor_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Actor_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Actor_FieldPathSelectorUser:
		for _, v := range fpaov.values.([]*user.Reference) {
			values = append(values, v)
		}
	case Actor_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*service_account.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Actor_FieldTerminalPathArrayOfValues) AsUserArrayOfValues() ([]*user.Reference, bool) {
	res, ok := fpaov.values.([]*user.Reference)
	return res, ok
}
func (fpaov *Actor_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*service_account.Reference, bool) {
	res, ok := fpaov.values.([]*service_account.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Invitation_FieldPath interface {
	gotenobject.FieldPath
	Selector() Invitation_FieldPathSelector
	Get(source *Invitation) []interface{}
	GetSingle(source *Invitation) (interface{}, bool)
	ClearValue(item *Invitation)

	// Those methods build corresponding Invitation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Invitation_FieldPathValue
	WithIArrayOfValues(values interface{}) Invitation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Invitation_FieldPathArrayItemValue
}

type Invitation_FieldPathSelector int32

const (
	Invitation_FieldPathSelectorInviteeEmail    Invitation_FieldPathSelector = 0
	Invitation_FieldPathSelectorInviterActor    Invitation_FieldPathSelector = 1
	Invitation_FieldPathSelectorInviterFullName Invitation_FieldPathSelector = 2
	Invitation_FieldPathSelectorInviterEmail    Invitation_FieldPathSelector = 3
	Invitation_FieldPathSelectorLanguageCode    Invitation_FieldPathSelector = 4
	Invitation_FieldPathSelectorRoles           Invitation_FieldPathSelector = 5
	Invitation_FieldPathSelectorExpirationDate  Invitation_FieldPathSelector = 6
	Invitation_FieldPathSelectorExtras          Invitation_FieldPathSelector = 7
	Invitation_FieldPathSelectorState           Invitation_FieldPathSelector = 8
)

func (s Invitation_FieldPathSelector) String() string {
	switch s {
	case Invitation_FieldPathSelectorInviteeEmail:
		return "invitee_email"
	case Invitation_FieldPathSelectorInviterActor:
		return "inviter_actor"
	case Invitation_FieldPathSelectorInviterFullName:
		return "inviter_full_name"
	case Invitation_FieldPathSelectorInviterEmail:
		return "inviter_email"
	case Invitation_FieldPathSelectorLanguageCode:
		return "language_code"
	case Invitation_FieldPathSelectorRoles:
		return "roles"
	case Invitation_FieldPathSelectorExpirationDate:
		return "expiration_date"
	case Invitation_FieldPathSelectorExtras:
		return "extras"
	case Invitation_FieldPathSelectorState:
		return "state"
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", s))
	}
}

func BuildInvitation_FieldPath(fp gotenobject.RawFieldPath) (Invitation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Invitation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "invitee_email", "inviteeEmail", "invitee-email":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorInviteeEmail}, nil
		case "inviter_actor", "inviterActor", "inviter-actor":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorInviterActor}, nil
		case "inviter_full_name", "inviterFullName", "inviter-full-name":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorInviterFullName}, nil
		case "inviter_email", "inviterEmail", "inviter-email":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorInviterEmail}, nil
		case "language_code", "languageCode", "language-code":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorLanguageCode}, nil
		case "roles":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorRoles}, nil
		case "expiration_date", "expirationDate", "expiration-date":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorExpirationDate}, nil
		case "extras":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorExtras}, nil
		case "state":
			return &Invitation_FieldTerminalPath{selector: Invitation_FieldPathSelectorState}, nil
		}
	} else {
		switch fp[0] {
		case "inviter_actor", "inviterActor", "inviter-actor":
			if subpath, err := BuildActor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Invitation_FieldSubPath{selector: Invitation_FieldPathSelectorInviterActor, subPath: subpath}, nil
			}
		case "extras":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Invitation)", fp)
			}
			return &Invitation_FieldPathMap{selector: Invitation_FieldPathSelectorExtras, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Invitation", fp)
}

func ParseInvitation_FieldPath(rawField string) (Invitation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildInvitation_FieldPath(fp)
}

func MustParseInvitation_FieldPath(rawField string) Invitation_FieldPath {
	fp, err := ParseInvitation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Invitation_FieldTerminalPath struct {
	selector Invitation_FieldPathSelector
}

var _ Invitation_FieldPath = (*Invitation_FieldTerminalPath)(nil)

func (fp *Invitation_FieldTerminalPath) Selector() Invitation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Invitation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Invitation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Invitation
func (fp *Invitation_FieldTerminalPath) Get(source *Invitation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Invitation_FieldPathSelectorInviteeEmail:
			values = append(values, source.InviteeEmail)
		case Invitation_FieldPathSelectorInviterActor:
			if source.InviterActor != nil {
				values = append(values, source.InviterActor)
			}
		case Invitation_FieldPathSelectorInviterFullName:
			values = append(values, source.InviterFullName)
		case Invitation_FieldPathSelectorInviterEmail:
			values = append(values, source.InviterEmail)
		case Invitation_FieldPathSelectorLanguageCode:
			values = append(values, source.LanguageCode)
		case Invitation_FieldPathSelectorRoles:
			for _, value := range source.GetRoles() {
				values = append(values, value)
			}
		case Invitation_FieldPathSelectorExpirationDate:
			if source.ExpirationDate != nil {
				values = append(values, source.ExpirationDate)
			}
		case Invitation_FieldPathSelectorExtras:
			values = append(values, source.Extras)
		case Invitation_FieldPathSelectorState:
			values = append(values, source.State)
		default:
			panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
		}
	}
	return
}

func (fp *Invitation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Invitation))
}

// GetSingle returns value pointed by specific field of from source Invitation
func (fp *Invitation_FieldTerminalPath) GetSingle(source *Invitation) (interface{}, bool) {
	switch fp.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		return source.GetInviteeEmail(), source != nil
	case Invitation_FieldPathSelectorInviterActor:
		res := source.GetInviterActor()
		return res, res != nil
	case Invitation_FieldPathSelectorInviterFullName:
		return source.GetInviterFullName(), source != nil
	case Invitation_FieldPathSelectorInviterEmail:
		return source.GetInviterEmail(), source != nil
	case Invitation_FieldPathSelectorLanguageCode:
		return source.GetLanguageCode(), source != nil
	case Invitation_FieldPathSelectorRoles:
		res := source.GetRoles()
		return res, res != nil
	case Invitation_FieldPathSelectorExpirationDate:
		res := source.GetExpirationDate()
		return res, res != nil
	case Invitation_FieldPathSelectorExtras:
		res := source.GetExtras()
		return res, res != nil
	case Invitation_FieldPathSelectorState:
		return source.GetState(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
	}
}

func (fp *Invitation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Invitation))
}

// GetDefault returns a default value of the field type
func (fp *Invitation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		return ""
	case Invitation_FieldPathSelectorInviterActor:
		return (*Actor)(nil)
	case Invitation_FieldPathSelectorInviterFullName:
		return ""
	case Invitation_FieldPathSelectorInviterEmail:
		return ""
	case Invitation_FieldPathSelectorLanguageCode:
		return ""
	case Invitation_FieldPathSelectorRoles:
		return ([]*role.Reference)(nil)
	case Invitation_FieldPathSelectorExpirationDate:
		return (*timestamppb.Timestamp)(nil)
	case Invitation_FieldPathSelectorExtras:
		return (map[string]string)(nil)
	case Invitation_FieldPathSelectorState:
		return Invitation_STATE_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
	}
}

func (fp *Invitation_FieldTerminalPath) ClearValue(item *Invitation) {
	if item != nil {
		switch fp.selector {
		case Invitation_FieldPathSelectorInviteeEmail:
			item.InviteeEmail = ""
		case Invitation_FieldPathSelectorInviterActor:
			item.InviterActor = nil
		case Invitation_FieldPathSelectorInviterFullName:
			item.InviterFullName = ""
		case Invitation_FieldPathSelectorInviterEmail:
			item.InviterEmail = ""
		case Invitation_FieldPathSelectorLanguageCode:
			item.LanguageCode = ""
		case Invitation_FieldPathSelectorRoles:
			item.Roles = nil
		case Invitation_FieldPathSelectorExpirationDate:
			item.ExpirationDate = nil
		case Invitation_FieldPathSelectorExtras:
			item.Extras = nil
		case Invitation_FieldPathSelectorState:
			item.State = Invitation_STATE_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
		}
	}
}

func (fp *Invitation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Invitation))
}

// IsLeaf - whether field path is holds simple value
func (fp *Invitation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Invitation_FieldPathSelectorInviteeEmail ||
		fp.selector == Invitation_FieldPathSelectorInviterFullName ||
		fp.selector == Invitation_FieldPathSelectorInviterEmail ||
		fp.selector == Invitation_FieldPathSelectorLanguageCode ||
		fp.selector == Invitation_FieldPathSelectorRoles ||
		fp.selector == Invitation_FieldPathSelectorExpirationDate ||
		fp.selector == Invitation_FieldPathSelectorExtras ||
		fp.selector == Invitation_FieldPathSelectorState
}

func (fp *Invitation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Invitation_FieldTerminalPath) WithIValue(value interface{}) Invitation_FieldPathValue {
	switch fp.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(string)}
	case Invitation_FieldPathSelectorInviterActor:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(*Actor)}
	case Invitation_FieldPathSelectorInviterFullName:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(string)}
	case Invitation_FieldPathSelectorInviterEmail:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(string)}
	case Invitation_FieldPathSelectorLanguageCode:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(string)}
	case Invitation_FieldPathSelectorRoles:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.([]*role.Reference)}
	case Invitation_FieldPathSelectorExpirationDate:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case Invitation_FieldPathSelectorExtras:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case Invitation_FieldPathSelectorState:
		return &Invitation_FieldTerminalPathValue{Invitation_FieldTerminalPath: *fp, value: value.(Invitation_State)}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
	}
}

func (fp *Invitation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Invitation_FieldTerminalPath) WithIArrayOfValues(values interface{}) Invitation_FieldPathArrayOfValues {
	fpaov := &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp}
	switch fp.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]string)}
	case Invitation_FieldPathSelectorInviterActor:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]*Actor)}
	case Invitation_FieldPathSelectorInviterFullName:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]string)}
	case Invitation_FieldPathSelectorInviterEmail:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]string)}
	case Invitation_FieldPathSelectorLanguageCode:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]string)}
	case Invitation_FieldPathSelectorRoles:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([][]*role.Reference)}
	case Invitation_FieldPathSelectorExpirationDate:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case Invitation_FieldPathSelectorExtras:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case Invitation_FieldPathSelectorState:
		return &Invitation_FieldTerminalPathArrayOfValues{Invitation_FieldTerminalPath: *fp, values: values.([]Invitation_State)}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
	}
	return fpaov
}

func (fp *Invitation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Invitation_FieldTerminalPath) WithIArrayItemValue(value interface{}) Invitation_FieldPathArrayItemValue {
	switch fp.selector {
	case Invitation_FieldPathSelectorRoles:
		return &Invitation_FieldTerminalPathArrayItemValue{Invitation_FieldTerminalPath: *fp, value: value.(*role.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fp.selector))
	}
}

func (fp *Invitation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type Invitation_FieldPathMap struct {
	key      string
	selector Invitation_FieldPathSelector
}

var _ Invitation_FieldPath = (*Invitation_FieldPathMap)(nil)

func (fpm *Invitation_FieldPathMap) Selector() Invitation_FieldPathSelector {
	return fpm.selector
}

func (fpm *Invitation_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *Invitation_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *Invitation_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Invitation
func (fpm *Invitation_FieldPathMap) Get(source *Invitation) (values []interface{}) {
	switch fpm.selector {
	case Invitation_FieldPathSelectorExtras:
		if value, ok := source.GetExtras()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
	}
	return
}

func (fpm *Invitation_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Invitation))
}

// GetSingle returns value by selected field map key from source Invitation
func (fpm *Invitation_FieldPathMap) GetSingle(source *Invitation) (interface{}, bool) {
	switch fpm.selector {
	case Invitation_FieldPathSelectorExtras:
		res, ok := source.GetExtras()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
	}
}

func (fpm *Invitation_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Invitation))
}

// GetDefault returns a default value of the field type
func (fpm *Invitation_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case Invitation_FieldPathSelectorExtras:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
	}
}

func (fpm *Invitation_FieldPathMap) ClearValue(item *Invitation) {
	if item != nil {
		switch fpm.selector {
		case Invitation_FieldPathSelectorExtras:
			delete(item.Extras, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
		}
	}
}

func (fpm *Invitation_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Invitation))
}

// IsLeaf - whether field path is holds simple value
func (fpm *Invitation_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case Invitation_FieldPathSelectorExtras:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
	}
}

func (fpm *Invitation_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *Invitation_FieldPathMap) WithIValue(value interface{}) Invitation_FieldPathValue {
	switch fpm.selector {
	case Invitation_FieldPathSelectorExtras:
		return &Invitation_FieldPathMapValue{Invitation_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
	}
}

func (fpm *Invitation_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *Invitation_FieldPathMap) WithIArrayOfValues(values interface{}) Invitation_FieldPathArrayOfValues {
	switch fpm.selector {
	case Invitation_FieldPathSelectorExtras:
		return &Invitation_FieldPathMapArrayOfValues{Invitation_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpm.selector))
	}
}

func (fpm *Invitation_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *Invitation_FieldPathMap) WithIArrayItemValue(value interface{}) Invitation_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *Invitation_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type Invitation_FieldSubPath struct {
	selector Invitation_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Invitation_FieldPath = (*Invitation_FieldSubPath)(nil)

func (fps *Invitation_FieldSubPath) Selector() Invitation_FieldPathSelector {
	return fps.selector
}
func (fps *Invitation_FieldSubPath) AsInviterActorSubPath() (Actor_FieldPath, bool) {
	res, ok := fps.subPath.(Actor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Invitation_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Invitation_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Invitation
func (fps *Invitation_FieldSubPath) Get(source *Invitation) (values []interface{}) {
	switch fps.selector {
	case Invitation_FieldPathSelectorInviterActor:
		values = append(values, fps.subPath.GetRaw(source.GetInviterActor())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fps.selector))
	}
	return
}

func (fps *Invitation_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Invitation))
}

// GetSingle returns value of selected field from source Invitation
func (fps *Invitation_FieldSubPath) GetSingle(source *Invitation) (interface{}, bool) {
	switch fps.selector {
	case Invitation_FieldPathSelectorInviterActor:
		if source.GetInviterActor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInviterActor())
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fps.selector))
	}
}

func (fps *Invitation_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Invitation))
}

// GetDefault returns a default value of the field type
func (fps *Invitation_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Invitation_FieldSubPath) ClearValue(item *Invitation) {
	if item != nil {
		switch fps.selector {
		case Invitation_FieldPathSelectorInviterActor:
			fps.subPath.ClearValueRaw(item.InviterActor)
		default:
			panic(fmt.Sprintf("Invalid selector for Invitation: %d", fps.selector))
		}
	}
}

func (fps *Invitation_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Invitation))
}

// IsLeaf - whether field path is holds simple value
func (fps *Invitation_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Invitation_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Invitation_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Invitation_FieldSubPath) WithIValue(value interface{}) Invitation_FieldPathValue {
	return &Invitation_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Invitation_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Invitation_FieldSubPath) WithIArrayOfValues(values interface{}) Invitation_FieldPathArrayOfValues {
	return &Invitation_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Invitation_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Invitation_FieldSubPath) WithIArrayItemValue(value interface{}) Invitation_FieldPathArrayItemValue {
	return &Invitation_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Invitation_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Invitation_FieldPathValue allows storing values for Invitation fields according to their type
type Invitation_FieldPathValue interface {
	Invitation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Invitation)
	CompareWith(*Invitation) (cmp int, comparable bool)
}

func ParseInvitation_FieldPathValue(pathStr, valueStr string) (Invitation_FieldPathValue, error) {
	fp, err := ParseInvitation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Invitation field path value from %s: %v", valueStr, err)
	}
	return fpv.(Invitation_FieldPathValue), nil
}

func MustParseInvitation_FieldPathValue(pathStr, valueStr string) Invitation_FieldPathValue {
	fpv, err := ParseInvitation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Invitation_FieldTerminalPathValue struct {
	Invitation_FieldTerminalPath
	value interface{}
}

var _ Invitation_FieldPathValue = (*Invitation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Invitation' as interface{}
func (fpv *Invitation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Invitation_FieldTerminalPathValue) AsInviteeEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsInviterActorValue() (*Actor, bool) {
	res, ok := fpv.value.(*Actor)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsInviterFullNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsInviterEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsLanguageCodeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsRolesValue() ([]*role.Reference, bool) {
	res, ok := fpv.value.([]*role.Reference)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsExpirationDateValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsExtrasValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *Invitation_FieldTerminalPathValue) AsStateValue() (Invitation_State, bool) {
	res, ok := fpv.value.(Invitation_State)
	return res, ok
}

// SetTo stores value for selected field for object Invitation
func (fpv *Invitation_FieldTerminalPathValue) SetTo(target **Invitation) {
	if *target == nil {
		*target = new(Invitation)
	}
	switch fpv.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		(*target).InviteeEmail = fpv.value.(string)
	case Invitation_FieldPathSelectorInviterActor:
		(*target).InviterActor = fpv.value.(*Actor)
	case Invitation_FieldPathSelectorInviterFullName:
		(*target).InviterFullName = fpv.value.(string)
	case Invitation_FieldPathSelectorInviterEmail:
		(*target).InviterEmail = fpv.value.(string)
	case Invitation_FieldPathSelectorLanguageCode:
		(*target).LanguageCode = fpv.value.(string)
	case Invitation_FieldPathSelectorRoles:
		(*target).Roles = fpv.value.([]*role.Reference)
	case Invitation_FieldPathSelectorExpirationDate:
		(*target).ExpirationDate = fpv.value.(*timestamppb.Timestamp)
	case Invitation_FieldPathSelectorExtras:
		(*target).Extras = fpv.value.(map[string]string)
	case Invitation_FieldPathSelectorState:
		(*target).State = fpv.value.(Invitation_State)
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpv.selector))
	}
}

func (fpv *Invitation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Invitation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Invitation_FieldTerminalPathValue' with the value under path in 'Invitation'.
func (fpv *Invitation_FieldTerminalPathValue) CompareWith(source *Invitation) (int, bool) {
	switch fpv.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetInviteeEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Invitation_FieldPathSelectorInviterActor:
		return 0, false
	case Invitation_FieldPathSelectorInviterFullName:
		leftValue := fpv.value.(string)
		rightValue := source.GetInviterFullName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Invitation_FieldPathSelectorInviterEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetInviterEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Invitation_FieldPathSelectorLanguageCode:
		leftValue := fpv.value.(string)
		rightValue := source.GetLanguageCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Invitation_FieldPathSelectorRoles:
		return 0, false
	case Invitation_FieldPathSelectorExpirationDate:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetExpirationDate()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case Invitation_FieldPathSelectorExtras:
		return 0, false
	case Invitation_FieldPathSelectorState:
		leftValue := fpv.value.(Invitation_State)
		rightValue := source.GetState()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpv.selector))
	}
}

func (fpv *Invitation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Invitation))
}

type Invitation_FieldPathMapValue struct {
	Invitation_FieldPathMap
	value interface{}
}

var _ Invitation_FieldPathValue = (*Invitation_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Invitation as interface{}
func (fpmv *Invitation_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *Invitation_FieldPathMapValue) AsExtrasElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in Invitation
func (fpmv *Invitation_FieldPathMapValue) SetTo(target **Invitation) {
	if *target == nil {
		*target = new(Invitation)
	}
	switch fpmv.selector {
	case Invitation_FieldPathSelectorExtras:
		if (*target).Extras == nil {
			(*target).Extras = make(map[string]string)
		}
		(*target).Extras[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpmv.selector))
	}
}

func (fpmv *Invitation_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Invitation)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Invitation_FieldPathMapValue' with the value under path in 'Invitation'.
func (fpmv *Invitation_FieldPathMapValue) CompareWith(source *Invitation) (int, bool) {
	switch fpmv.selector {
	case Invitation_FieldPathSelectorExtras:
		leftValue := fpmv.value.(string)
		rightValue := source.GetExtras()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpmv.selector))
	}
}

func (fpmv *Invitation_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Invitation))
}

type Invitation_FieldSubPathValue struct {
	Invitation_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Invitation_FieldPathValue = (*Invitation_FieldSubPathValue)(nil)

func (fpvs *Invitation_FieldSubPathValue) AsInviterActorPathValue() (Actor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Actor_FieldPathValue)
	return res, ok
}

func (fpvs *Invitation_FieldSubPathValue) SetTo(target **Invitation) {
	if *target == nil {
		*target = new(Invitation)
	}
	switch fpvs.Selector() {
	case Invitation_FieldPathSelectorInviterActor:
		fpvs.subPathValue.(Actor_FieldPathValue).SetTo(&(*target).InviterActor)
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpvs.Selector()))
	}
}

func (fpvs *Invitation_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Invitation)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Invitation_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Invitation_FieldSubPathValue) CompareWith(source *Invitation) (int, bool) {
	switch fpvs.Selector() {
	case Invitation_FieldPathSelectorInviterActor:
		return fpvs.subPathValue.(Actor_FieldPathValue).CompareWith(source.GetInviterActor())
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpvs.Selector()))
	}
}

func (fpvs *Invitation_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Invitation))
}

// Invitation_FieldPathArrayItemValue allows storing single item in Path-specific values for Invitation according to their type
// Present only for array (repeated) types.
type Invitation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Invitation_FieldPath
	ContainsValue(*Invitation) bool
}

// ParseInvitation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseInvitation_FieldPathArrayItemValue(pathStr, valueStr string) (Invitation_FieldPathArrayItemValue, error) {
	fp, err := ParseInvitation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Invitation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Invitation_FieldPathArrayItemValue), nil
}

func MustParseInvitation_FieldPathArrayItemValue(pathStr, valueStr string) Invitation_FieldPathArrayItemValue {
	fpaiv, err := ParseInvitation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Invitation_FieldTerminalPathArrayItemValue struct {
	Invitation_FieldTerminalPath
	value interface{}
}

var _ Invitation_FieldPathArrayItemValue = (*Invitation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Invitation as interface{}
func (fpaiv *Invitation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Invitation_FieldTerminalPathArrayItemValue) AsRolesItemValue() (*role.Reference, bool) {
	res, ok := fpaiv.value.(*role.Reference)
	return res, ok
}

func (fpaiv *Invitation_FieldTerminalPathArrayItemValue) GetSingle(source *Invitation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Invitation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Invitation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Invitation'
func (fpaiv *Invitation_FieldTerminalPathArrayItemValue) ContainsValue(source *Invitation) bool {
	slice := fpaiv.Invitation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Invitation_FieldSubPathArrayItemValue struct {
	Invitation_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Invitation_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Invitation_FieldSubPathArrayItemValue) AsInviterActorPathItemValue() (Actor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Actor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Invitation'
func (fpaivs *Invitation_FieldSubPathArrayItemValue) ContainsValue(source *Invitation) bool {
	switch fpaivs.Selector() {
	case Invitation_FieldPathSelectorInviterActor:
		return fpaivs.subPathItemValue.(Actor_FieldPathArrayItemValue).ContainsValue(source.GetInviterActor())
	default:
		panic(fmt.Sprintf("Invalid selector for Invitation: %d", fpaivs.Selector()))
	}
}

// Invitation_FieldPathArrayOfValues allows storing slice of values for Invitation fields according to their type
type Invitation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Invitation_FieldPath
}

func ParseInvitation_FieldPathArrayOfValues(pathStr, valuesStr string) (Invitation_FieldPathArrayOfValues, error) {
	fp, err := ParseInvitation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Invitation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Invitation_FieldPathArrayOfValues), nil
}

func MustParseInvitation_FieldPathArrayOfValues(pathStr, valuesStr string) Invitation_FieldPathArrayOfValues {
	fpaov, err := ParseInvitation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Invitation_FieldTerminalPathArrayOfValues struct {
	Invitation_FieldTerminalPath
	values interface{}
}

var _ Invitation_FieldPathArrayOfValues = (*Invitation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Invitation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Invitation_FieldPathSelectorInviteeEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorInviterActor:
		for _, v := range fpaov.values.([]*Actor) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorInviterFullName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorInviterEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorLanguageCode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorRoles:
		for _, v := range fpaov.values.([][]*role.Reference) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorExpirationDate:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorExtras:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case Invitation_FieldPathSelectorState:
		for _, v := range fpaov.values.([]Invitation_State) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsInviteeEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsInviterActorArrayOfValues() ([]*Actor, bool) {
	res, ok := fpaov.values.([]*Actor)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsInviterFullNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsInviterEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsLanguageCodeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsRolesArrayOfValues() ([][]*role.Reference, bool) {
	res, ok := fpaov.values.([][]*role.Reference)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsExpirationDateArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsExtrasArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *Invitation_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]Invitation_State, bool) {
	res, ok := fpaov.values.([]Invitation_State)
	return res, ok
}

type Invitation_FieldPathMapArrayOfValues struct {
	Invitation_FieldPathMap
	values interface{}
}

var _ Invitation_FieldPathArrayOfValues = (*Invitation_FieldPathMapArrayOfValues)(nil)

func (fpmaov *Invitation_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case Invitation_FieldPathSelectorExtras:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *Invitation_FieldPathMapArrayOfValues) AsExtrasArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type Invitation_FieldSubPathArrayOfValues struct {
	Invitation_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Invitation_FieldPathArrayOfValues = (*Invitation_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Invitation_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Invitation_FieldSubPathArrayOfValues) AsInviterActorPathArrayOfValues() (Actor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Actor_FieldPathArrayOfValues)
	return res, ok
}
