// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_domain.proto
// DO NOT EDIT!!!

package attestation_domain

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_common.Actor{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AttestationDomain_FieldPath interface {
	gotenobject.FieldPath
	Selector() AttestationDomain_FieldPathSelector
	Get(source *AttestationDomain) []interface{}
	GetSingle(source *AttestationDomain) (interface{}, bool)
	ClearValue(item *AttestationDomain)

	// Those methods build corresponding AttestationDomain_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AttestationDomain_FieldPathValue
	WithIArrayOfValues(values interface{}) AttestationDomain_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AttestationDomain_FieldPathArrayItemValue
}

type AttestationDomain_FieldPathSelector int32

const (
	AttestationDomain_FieldPathSelectorMetadata                                   AttestationDomain_FieldPathSelector = 0
	AttestationDomain_FieldPathSelectorName                                       AttestationDomain_FieldPathSelector = 1
	AttestationDomain_FieldPathSelectorDisplayName                                AttestationDomain_FieldPathSelector = 2
	AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification AttestationDomain_FieldPathSelector = 3
	AttestationDomain_FieldPathSelectorPolicies                                   AttestationDomain_FieldPathSelector = 4
	AttestationDomain_FieldPathSelectorEnrollmentList                             AttestationDomain_FieldPathSelector = 5
)

func (s AttestationDomain_FieldPathSelector) String() string {
	switch s {
	case AttestationDomain_FieldPathSelectorMetadata:
		return "metadata"
	case AttestationDomain_FieldPathSelectorName:
		return "name"
	case AttestationDomain_FieldPathSelectorDisplayName:
		return "display_name"
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		return "insecure_skip_manufacturer_ekcert_verification"
	case AttestationDomain_FieldPathSelectorPolicies:
		return "policies"
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return "enrollment_list"
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", s))
	}
}

func BuildAttestationDomain_FieldPath(fp gotenobject.RawFieldPath) (AttestationDomain_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AttestationDomain")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metadata":
			return &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorMetadata}, nil
		case "name":
			return &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorDisplayName}, nil
		case "insecure_skip_manufacturer_ekcert_verification", "insecureSkipManufacturerEkcertVerification", "insecure-skip-manufacturer-ekcert-verification":
			return &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification}, nil
		case "policies":
			return &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorPolicies}, nil
		case "enrollment_list", "enrollmentList", "enrollment-list":
			return &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorEnrollmentList}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AttestationDomain_FieldSubPath{selector: AttestationDomain_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "policies":
			if subpath, err := BuildAttestationDomainPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AttestationDomain_FieldSubPath{selector: AttestationDomain_FieldPathSelectorPolicies, subPath: subpath}, nil
			}
		case "enrollment_list", "enrollmentList", "enrollment-list":
			if subpath, err := BuildAttestationDomainEnrolledKey_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AttestationDomain_FieldSubPath{selector: AttestationDomain_FieldPathSelectorEnrollmentList, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AttestationDomain", fp)
}

func ParseAttestationDomain_FieldPath(rawField string) (AttestationDomain_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAttestationDomain_FieldPath(fp)
}

func MustParseAttestationDomain_FieldPath(rawField string) AttestationDomain_FieldPath {
	fp, err := ParseAttestationDomain_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AttestationDomain_FieldTerminalPath struct {
	selector AttestationDomain_FieldPathSelector
}

var _ AttestationDomain_FieldPath = (*AttestationDomain_FieldTerminalPath)(nil)

func (fp *AttestationDomain_FieldTerminalPath) Selector() AttestationDomain_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AttestationDomain_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AttestationDomain_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AttestationDomain
func (fp *AttestationDomain_FieldTerminalPath) Get(source *AttestationDomain) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AttestationDomain_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case AttestationDomain_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case AttestationDomain_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
			values = append(values, source.InsecureSkipManufacturerEkcertVerification)
		case AttestationDomain_FieldPathSelectorPolicies:
			for _, value := range source.GetPolicies() {
				values = append(values, value)
			}
		case AttestationDomain_FieldPathSelectorEnrollmentList:
			for _, value := range source.GetEnrollmentList() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
		}
	}
	return
}

func (fp *AttestationDomain_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AttestationDomain))
}

// GetSingle returns value pointed by specific field of from source AttestationDomain
func (fp *AttestationDomain_FieldTerminalPath) GetSingle(source *AttestationDomain) (interface{}, bool) {
	switch fp.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case AttestationDomain_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case AttestationDomain_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		return source.GetInsecureSkipManufacturerEkcertVerification(), source != nil
	case AttestationDomain_FieldPathSelectorPolicies:
		res := source.GetPolicies()
		return res, res != nil
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		res := source.GetEnrollmentList()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
	}
}

func (fp *AttestationDomain_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AttestationDomain))
}

// GetDefault returns a default value of the field type
func (fp *AttestationDomain_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case AttestationDomain_FieldPathSelectorName:
		return (*Name)(nil)
	case AttestationDomain_FieldPathSelectorDisplayName:
		return ""
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		return false
	case AttestationDomain_FieldPathSelectorPolicies:
		return ([]*AttestationDomain_Policy)(nil)
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return ([]*AttestationDomain_EnrolledKey)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
	}
}

func (fp *AttestationDomain_FieldTerminalPath) ClearValue(item *AttestationDomain) {
	if item != nil {
		switch fp.selector {
		case AttestationDomain_FieldPathSelectorMetadata:
			item.Metadata = nil
		case AttestationDomain_FieldPathSelectorName:
			item.Name = nil
		case AttestationDomain_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
			item.InsecureSkipManufacturerEkcertVerification = false
		case AttestationDomain_FieldPathSelectorPolicies:
			item.Policies = nil
		case AttestationDomain_FieldPathSelectorEnrollmentList:
			item.EnrollmentList = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
		}
	}
}

func (fp *AttestationDomain_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AttestationDomain))
}

// IsLeaf - whether field path is holds simple value
func (fp *AttestationDomain_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AttestationDomain_FieldPathSelectorName ||
		fp.selector == AttestationDomain_FieldPathSelectorDisplayName ||
		fp.selector == AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification
}

func (fp *AttestationDomain_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AttestationDomain_FieldTerminalPath) WithIValue(value interface{}) AttestationDomain_FieldPathValue {
	switch fp.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		return &AttestationDomain_FieldTerminalPathValue{AttestationDomain_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case AttestationDomain_FieldPathSelectorName:
		return &AttestationDomain_FieldTerminalPathValue{AttestationDomain_FieldTerminalPath: *fp, value: value.(*Name)}
	case AttestationDomain_FieldPathSelectorDisplayName:
		return &AttestationDomain_FieldTerminalPathValue{AttestationDomain_FieldTerminalPath: *fp, value: value.(string)}
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		return &AttestationDomain_FieldTerminalPathValue{AttestationDomain_FieldTerminalPath: *fp, value: value.(bool)}
	case AttestationDomain_FieldPathSelectorPolicies:
		return &AttestationDomain_FieldTerminalPathValue{AttestationDomain_FieldTerminalPath: *fp, value: value.([]*AttestationDomain_Policy)}
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return &AttestationDomain_FieldTerminalPathValue{AttestationDomain_FieldTerminalPath: *fp, value: value.([]*AttestationDomain_EnrolledKey)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
	}
}

func (fp *AttestationDomain_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AttestationDomain_FieldTerminalPath) WithIArrayOfValues(values interface{}) AttestationDomain_FieldPathArrayOfValues {
	fpaov := &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp}
	switch fp.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		return &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case AttestationDomain_FieldPathSelectorName:
		return &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp, values: values.([]*Name)}
	case AttestationDomain_FieldPathSelectorDisplayName:
		return &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp, values: values.([]string)}
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		return &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp, values: values.([]bool)}
	case AttestationDomain_FieldPathSelectorPolicies:
		return &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp, values: values.([][]*AttestationDomain_Policy)}
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return &AttestationDomain_FieldTerminalPathArrayOfValues{AttestationDomain_FieldTerminalPath: *fp, values: values.([][]*AttestationDomain_EnrolledKey)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
	}
	return fpaov
}

func (fp *AttestationDomain_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AttestationDomain_FieldTerminalPath) WithIArrayItemValue(value interface{}) AttestationDomain_FieldPathArrayItemValue {
	switch fp.selector {
	case AttestationDomain_FieldPathSelectorPolicies:
		return &AttestationDomain_FieldTerminalPathArrayItemValue{AttestationDomain_FieldTerminalPath: *fp, value: value.(*AttestationDomain_Policy)}
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return &AttestationDomain_FieldTerminalPathArrayItemValue{AttestationDomain_FieldTerminalPath: *fp, value: value.(*AttestationDomain_EnrolledKey)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fp.selector))
	}
}

func (fp *AttestationDomain_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AttestationDomain_FieldSubPath struct {
	selector AttestationDomain_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AttestationDomain_FieldPath = (*AttestationDomain_FieldSubPath)(nil)

func (fps *AttestationDomain_FieldSubPath) Selector() AttestationDomain_FieldPathSelector {
	return fps.selector
}
func (fps *AttestationDomain_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *AttestationDomain_FieldSubPath) AsPoliciesSubPath() (AttestationDomainPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(AttestationDomainPolicy_FieldPath)
	return res, ok
}
func (fps *AttestationDomain_FieldSubPath) AsEnrollmentListSubPath() (AttestationDomainEnrolledKey_FieldPath, bool) {
	res, ok := fps.subPath.(AttestationDomainEnrolledKey_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AttestationDomain_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AttestationDomain_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AttestationDomain
func (fps *AttestationDomain_FieldSubPath) Get(source *AttestationDomain) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asPolicyFieldPath, ok := fps.AsPoliciesSubPath(); ok {
		for _, item := range source.GetPolicies() {
			values = append(values, asPolicyFieldPath.Get(item)...)
		}
	} else if asEnrolledKeyFieldPath, ok := fps.AsEnrollmentListSubPath(); ok {
		for _, item := range source.GetEnrollmentList() {
			values = append(values, asEnrolledKeyFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fps.selector))
	}
	return
}

func (fps *AttestationDomain_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AttestationDomain))
}

// GetSingle returns value of selected field from source AttestationDomain
func (fps *AttestationDomain_FieldSubPath) GetSingle(source *AttestationDomain) (interface{}, bool) {
	switch fps.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case AttestationDomain_FieldPathSelectorPolicies:
		if len(source.GetPolicies()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPolicies()[0])
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		if len(source.GetEnrollmentList()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetEnrollmentList()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fps.selector))
	}
}

func (fps *AttestationDomain_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AttestationDomain))
}

// GetDefault returns a default value of the field type
func (fps *AttestationDomain_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AttestationDomain_FieldSubPath) ClearValue(item *AttestationDomain) {
	if item != nil {
		switch fps.selector {
		case AttestationDomain_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case AttestationDomain_FieldPathSelectorPolicies:
			for _, subItem := range item.Policies {
				fps.subPath.ClearValueRaw(subItem)
			}
		case AttestationDomain_FieldPathSelectorEnrollmentList:
			for _, subItem := range item.EnrollmentList {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fps.selector))
		}
	}
}

func (fps *AttestationDomain_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AttestationDomain))
}

// IsLeaf - whether field path is holds simple value
func (fps *AttestationDomain_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AttestationDomain_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AttestationDomain_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AttestationDomain_FieldSubPath) WithIValue(value interface{}) AttestationDomain_FieldPathValue {
	return &AttestationDomain_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AttestationDomain_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AttestationDomain_FieldSubPath) WithIArrayOfValues(values interface{}) AttestationDomain_FieldPathArrayOfValues {
	return &AttestationDomain_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AttestationDomain_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AttestationDomain_FieldSubPath) WithIArrayItemValue(value interface{}) AttestationDomain_FieldPathArrayItemValue {
	return &AttestationDomain_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AttestationDomain_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AttestationDomain_FieldPathValue allows storing values for AttestationDomain fields according to their type
type AttestationDomain_FieldPathValue interface {
	AttestationDomain_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AttestationDomain)
	CompareWith(*AttestationDomain) (cmp int, comparable bool)
}

func ParseAttestationDomain_FieldPathValue(pathStr, valueStr string) (AttestationDomain_FieldPathValue, error) {
	fp, err := ParseAttestationDomain_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationDomain field path value from %s: %v", valueStr, err)
	}
	return fpv.(AttestationDomain_FieldPathValue), nil
}

func MustParseAttestationDomain_FieldPathValue(pathStr, valueStr string) AttestationDomain_FieldPathValue {
	fpv, err := ParseAttestationDomain_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AttestationDomain_FieldTerminalPathValue struct {
	AttestationDomain_FieldTerminalPath
	value interface{}
}

var _ AttestationDomain_FieldPathValue = (*AttestationDomain_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AttestationDomain' as interface{}
func (fpv *AttestationDomain_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AttestationDomain_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *AttestationDomain_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *AttestationDomain_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AttestationDomain_FieldTerminalPathValue) AsInsecureSkipManufacturerEkcertVerificationValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *AttestationDomain_FieldTerminalPathValue) AsPoliciesValue() ([]*AttestationDomain_Policy, bool) {
	res, ok := fpv.value.([]*AttestationDomain_Policy)
	return res, ok
}
func (fpv *AttestationDomain_FieldTerminalPathValue) AsEnrollmentListValue() ([]*AttestationDomain_EnrolledKey, bool) {
	res, ok := fpv.value.([]*AttestationDomain_EnrolledKey)
	return res, ok
}

// SetTo stores value for selected field for object AttestationDomain
func (fpv *AttestationDomain_FieldTerminalPathValue) SetTo(target **AttestationDomain) {
	if *target == nil {
		*target = new(AttestationDomain)
	}
	switch fpv.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case AttestationDomain_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case AttestationDomain_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		(*target).InsecureSkipManufacturerEkcertVerification = fpv.value.(bool)
	case AttestationDomain_FieldPathSelectorPolicies:
		(*target).Policies = fpv.value.([]*AttestationDomain_Policy)
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		(*target).EnrollmentList = fpv.value.([]*AttestationDomain_EnrolledKey)
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fpv.selector))
	}
}

func (fpv *AttestationDomain_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AttestationDomain)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AttestationDomain_FieldTerminalPathValue' with the value under path in 'AttestationDomain'.
func (fpv *AttestationDomain_FieldTerminalPathValue) CompareWith(source *AttestationDomain) (int, bool) {
	switch fpv.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		return 0, false
	case AttestationDomain_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomain_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		leftValue := fpv.value.(bool)
		rightValue := source.GetInsecureSkipManufacturerEkcertVerification()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomain_FieldPathSelectorPolicies:
		return 0, false
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fpv.selector))
	}
}

func (fpv *AttestationDomain_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AttestationDomain))
}

type AttestationDomain_FieldSubPathValue struct {
	AttestationDomain_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AttestationDomain_FieldPathValue = (*AttestationDomain_FieldSubPathValue)(nil)

func (fpvs *AttestationDomain_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *AttestationDomain_FieldSubPathValue) AsPoliciesPathValue() (AttestationDomainPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AttestationDomainPolicy_FieldPathValue)
	return res, ok
}
func (fpvs *AttestationDomain_FieldSubPathValue) AsEnrollmentListPathValue() (AttestationDomainEnrolledKey_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AttestationDomainEnrolledKey_FieldPathValue)
	return res, ok
}

func (fpvs *AttestationDomain_FieldSubPathValue) SetTo(target **AttestationDomain) {
	if *target == nil {
		*target = new(AttestationDomain)
	}
	switch fpvs.Selector() {
	case AttestationDomain_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case AttestationDomain_FieldPathSelectorPolicies:
		panic("FieldPath setter is unsupported for array subpaths")
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fpvs.Selector()))
	}
}

func (fpvs *AttestationDomain_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AttestationDomain)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AttestationDomain_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AttestationDomain_FieldSubPathValue) CompareWith(source *AttestationDomain) (int, bool) {
	switch fpvs.Selector() {
	case AttestationDomain_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case AttestationDomain_FieldPathSelectorPolicies:
		return 0, false // repeated field
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fpvs.Selector()))
	}
}

func (fpvs *AttestationDomain_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AttestationDomain))
}

// AttestationDomain_FieldPathArrayItemValue allows storing single item in Path-specific values for AttestationDomain according to their type
// Present only for array (repeated) types.
type AttestationDomain_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AttestationDomain_FieldPath
	ContainsValue(*AttestationDomain) bool
}

// ParseAttestationDomain_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAttestationDomain_FieldPathArrayItemValue(pathStr, valueStr string) (AttestationDomain_FieldPathArrayItemValue, error) {
	fp, err := ParseAttestationDomain_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationDomain field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AttestationDomain_FieldPathArrayItemValue), nil
}

func MustParseAttestationDomain_FieldPathArrayItemValue(pathStr, valueStr string) AttestationDomain_FieldPathArrayItemValue {
	fpaiv, err := ParseAttestationDomain_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AttestationDomain_FieldTerminalPathArrayItemValue struct {
	AttestationDomain_FieldTerminalPath
	value interface{}
}

var _ AttestationDomain_FieldPathArrayItemValue = (*AttestationDomain_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AttestationDomain as interface{}
func (fpaiv *AttestationDomain_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *AttestationDomain_FieldTerminalPathArrayItemValue) AsPoliciesItemValue() (*AttestationDomain_Policy, bool) {
	res, ok := fpaiv.value.(*AttestationDomain_Policy)
	return res, ok
}
func (fpaiv *AttestationDomain_FieldTerminalPathArrayItemValue) AsEnrollmentListItemValue() (*AttestationDomain_EnrolledKey, bool) {
	res, ok := fpaiv.value.(*AttestationDomain_EnrolledKey)
	return res, ok
}

func (fpaiv *AttestationDomain_FieldTerminalPathArrayItemValue) GetSingle(source *AttestationDomain) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AttestationDomain_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AttestationDomain))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AttestationDomain'
func (fpaiv *AttestationDomain_FieldTerminalPathArrayItemValue) ContainsValue(source *AttestationDomain) bool {
	slice := fpaiv.AttestationDomain_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AttestationDomain_FieldSubPathArrayItemValue struct {
	AttestationDomain_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AttestationDomain_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AttestationDomain_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AttestationDomain_FieldSubPathArrayItemValue) AsPoliciesPathItemValue() (AttestationDomainPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AttestationDomainPolicy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AttestationDomain_FieldSubPathArrayItemValue) AsEnrollmentListPathItemValue() (AttestationDomainEnrolledKey_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AttestationDomainEnrolledKey_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AttestationDomain'
func (fpaivs *AttestationDomain_FieldSubPathArrayItemValue) ContainsValue(source *AttestationDomain) bool {
	switch fpaivs.Selector() {
	case AttestationDomain_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case AttestationDomain_FieldPathSelectorPolicies:
		return false // repeated/map field
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain: %d", fpaivs.Selector()))
	}
}

// AttestationDomain_FieldPathArrayOfValues allows storing slice of values for AttestationDomain fields according to their type
type AttestationDomain_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AttestationDomain_FieldPath
}

func ParseAttestationDomain_FieldPathArrayOfValues(pathStr, valuesStr string) (AttestationDomain_FieldPathArrayOfValues, error) {
	fp, err := ParseAttestationDomain_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AttestationDomain field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AttestationDomain_FieldPathArrayOfValues), nil
}

func MustParseAttestationDomain_FieldPathArrayOfValues(pathStr, valuesStr string) AttestationDomain_FieldPathArrayOfValues {
	fpaov, err := ParseAttestationDomain_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AttestationDomain_FieldTerminalPathArrayOfValues struct {
	AttestationDomain_FieldTerminalPath
	values interface{}
}

var _ AttestationDomain_FieldPathArrayOfValues = (*AttestationDomain_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AttestationDomain_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case AttestationDomain_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case AttestationDomain_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case AttestationDomain_FieldPathSelectorPolicies:
		for _, v := range fpaov.values.([][]*AttestationDomain_Policy) {
			values = append(values, v)
		}
	case AttestationDomain_FieldPathSelectorEnrollmentList:
		for _, v := range fpaov.values.([][]*AttestationDomain_EnrolledKey) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) AsInsecureSkipManufacturerEkcertVerificationArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) AsPoliciesArrayOfValues() ([][]*AttestationDomain_Policy, bool) {
	res, ok := fpaov.values.([][]*AttestationDomain_Policy)
	return res, ok
}
func (fpaov *AttestationDomain_FieldTerminalPathArrayOfValues) AsEnrollmentListArrayOfValues() ([][]*AttestationDomain_EnrolledKey, bool) {
	res, ok := fpaov.values.([][]*AttestationDomain_EnrolledKey)
	return res, ok
}

type AttestationDomain_FieldSubPathArrayOfValues struct {
	AttestationDomain_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AttestationDomain_FieldPathArrayOfValues = (*AttestationDomain_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AttestationDomain_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AttestationDomain_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AttestationDomain_FieldSubPathArrayOfValues) AsPoliciesPathArrayOfValues() (AttestationDomainPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AttestationDomainPolicy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AttestationDomain_FieldSubPathArrayOfValues) AsEnrollmentListPathArrayOfValues() (AttestationDomainEnrolledKey_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AttestationDomainEnrolledKey_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AttestationDomainPolicy_FieldPath interface {
	gotenobject.FieldPath
	Selector() AttestationDomainPolicy_FieldPathSelector
	Get(source *AttestationDomain_Policy) []interface{}
	GetSingle(source *AttestationDomain_Policy) (interface{}, bool)
	ClearValue(item *AttestationDomain_Policy)

	// Those methods build corresponding AttestationDomainPolicy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AttestationDomainPolicy_FieldPathValue
	WithIArrayOfValues(values interface{}) AttestationDomainPolicy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AttestationDomainPolicy_FieldPathArrayItemValue
}

type AttestationDomainPolicy_FieldPathSelector int32

const (
	AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem AttestationDomainPolicy_FieldPathSelector = 0
	AttestationDomainPolicy_FieldPathSelectorRequireEnrollment          AttestationDomainPolicy_FieldPathSelector = 1
	AttestationDomainPolicy_FieldPathSelectorVerifyEventLog             AttestationDomainPolicy_FieldPathSelector = 2
	AttestationDomainPolicy_FieldPathSelectorExpectedPcrs               AttestationDomainPolicy_FieldPathSelector = 3
)

func (s AttestationDomainPolicy_FieldPathSelector) String() string {
	switch s {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		return "manufacturer_root_ca_certs_pem"
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		return "require_enrollment"
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		return "verify_event_log"
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return "expected_pcrs"
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", s))
	}
}

func BuildAttestationDomainPolicy_FieldPath(fp gotenobject.RawFieldPath) (AttestationDomainPolicy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AttestationDomain_Policy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "manufacturer_root_ca_certs_pem", "manufacturerRootCaCertsPem", "manufacturer-root-ca-certs-pem":
			return &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem}, nil
		case "require_enrollment", "requireEnrollment", "require-enrollment":
			return &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorRequireEnrollment}, nil
		case "verify_event_log", "verifyEventLog", "verify-event-log":
			return &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorVerifyEventLog}, nil
		case "expected_pcrs", "expectedPcrs", "expected-pcrs":
			return &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorExpectedPcrs}, nil
		}
	} else {
		switch fp[0] {
		case "expected_pcrs", "expectedPcrs", "expected-pcrs":
			if subpath, err := iam_common.BuildPCR_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AttestationDomainPolicy_FieldSubPath{selector: AttestationDomainPolicy_FieldPathSelectorExpectedPcrs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AttestationDomain_Policy", fp)
}

func ParseAttestationDomainPolicy_FieldPath(rawField string) (AttestationDomainPolicy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAttestationDomainPolicy_FieldPath(fp)
}

func MustParseAttestationDomainPolicy_FieldPath(rawField string) AttestationDomainPolicy_FieldPath {
	fp, err := ParseAttestationDomainPolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AttestationDomainPolicy_FieldTerminalPath struct {
	selector AttestationDomainPolicy_FieldPathSelector
}

var _ AttestationDomainPolicy_FieldPath = (*AttestationDomainPolicy_FieldTerminalPath)(nil)

func (fp *AttestationDomainPolicy_FieldTerminalPath) Selector() AttestationDomainPolicy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AttestationDomainPolicy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AttestationDomainPolicy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AttestationDomain_Policy
func (fp *AttestationDomainPolicy_FieldTerminalPath) Get(source *AttestationDomain_Policy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
			values = append(values, source.ManufacturerRootCaCertsPem)
		case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
			values = append(values, source.RequireEnrollment)
		case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
			values = append(values, source.VerifyEventLog)
		case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
			for _, value := range source.GetExpectedPcrs() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
		}
	}
	return
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AttestationDomain_Policy))
}

// GetSingle returns value pointed by specific field of from source AttestationDomain_Policy
func (fp *AttestationDomainPolicy_FieldTerminalPath) GetSingle(source *AttestationDomain_Policy) (interface{}, bool) {
	switch fp.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		return source.GetManufacturerRootCaCertsPem(), source != nil
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		return source.GetRequireEnrollment(), source != nil
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		return source.GetVerifyEventLog(), source != nil
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		res := source.GetExpectedPcrs()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
	}
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AttestationDomain_Policy))
}

// GetDefault returns a default value of the field type
func (fp *AttestationDomainPolicy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		return ""
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		return false
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		return false
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return ([]*iam_common.PCR)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
	}
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) ClearValue(item *AttestationDomain_Policy) {
	if item != nil {
		switch fp.selector {
		case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
			item.ManufacturerRootCaCertsPem = ""
		case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
			item.RequireEnrollment = false
		case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
			item.VerifyEventLog = false
		case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
			item.ExpectedPcrs = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
		}
	}
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AttestationDomain_Policy))
}

// IsLeaf - whether field path is holds simple value
func (fp *AttestationDomainPolicy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem ||
		fp.selector == AttestationDomainPolicy_FieldPathSelectorRequireEnrollment ||
		fp.selector == AttestationDomainPolicy_FieldPathSelectorVerifyEventLog
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) WithIValue(value interface{}) AttestationDomainPolicy_FieldPathValue {
	switch fp.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		return &AttestationDomainPolicy_FieldTerminalPathValue{AttestationDomainPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		return &AttestationDomainPolicy_FieldTerminalPathValue{AttestationDomainPolicy_FieldTerminalPath: *fp, value: value.(bool)}
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		return &AttestationDomainPolicy_FieldTerminalPathValue{AttestationDomainPolicy_FieldTerminalPath: *fp, value: value.(bool)}
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return &AttestationDomainPolicy_FieldTerminalPathValue{AttestationDomainPolicy_FieldTerminalPath: *fp, value: value.([]*iam_common.PCR)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
	}
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) WithIArrayOfValues(values interface{}) AttestationDomainPolicy_FieldPathArrayOfValues {
	fpaov := &AttestationDomainPolicy_FieldTerminalPathArrayOfValues{AttestationDomainPolicy_FieldTerminalPath: *fp}
	switch fp.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		return &AttestationDomainPolicy_FieldTerminalPathArrayOfValues{AttestationDomainPolicy_FieldTerminalPath: *fp, values: values.([]string)}
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		return &AttestationDomainPolicy_FieldTerminalPathArrayOfValues{AttestationDomainPolicy_FieldTerminalPath: *fp, values: values.([]bool)}
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		return &AttestationDomainPolicy_FieldTerminalPathArrayOfValues{AttestationDomainPolicy_FieldTerminalPath: *fp, values: values.([]bool)}
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return &AttestationDomainPolicy_FieldTerminalPathArrayOfValues{AttestationDomainPolicy_FieldTerminalPath: *fp, values: values.([][]*iam_common.PCR)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
	}
	return fpaov
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) WithIArrayItemValue(value interface{}) AttestationDomainPolicy_FieldPathArrayItemValue {
	switch fp.selector {
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return &AttestationDomainPolicy_FieldTerminalPathArrayItemValue{AttestationDomainPolicy_FieldTerminalPath: *fp, value: value.(*iam_common.PCR)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fp.selector))
	}
}

func (fp *AttestationDomainPolicy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AttestationDomainPolicy_FieldSubPath struct {
	selector AttestationDomainPolicy_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AttestationDomainPolicy_FieldPath = (*AttestationDomainPolicy_FieldSubPath)(nil)

func (fps *AttestationDomainPolicy_FieldSubPath) Selector() AttestationDomainPolicy_FieldPathSelector {
	return fps.selector
}
func (fps *AttestationDomainPolicy_FieldSubPath) AsExpectedPcrsSubPath() (iam_common.PCR_FieldPath, bool) {
	res, ok := fps.subPath.(iam_common.PCR_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AttestationDomainPolicy_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AttestationDomainPolicy_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AttestationDomain_Policy
func (fps *AttestationDomainPolicy_FieldSubPath) Get(source *AttestationDomain_Policy) (values []interface{}) {
	if asPCRFieldPath, ok := fps.AsExpectedPcrsSubPath(); ok {
		for _, item := range source.GetExpectedPcrs() {
			values = append(values, asPCRFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fps.selector))
	}
	return
}

func (fps *AttestationDomainPolicy_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AttestationDomain_Policy))
}

// GetSingle returns value of selected field from source AttestationDomain_Policy
func (fps *AttestationDomainPolicy_FieldSubPath) GetSingle(source *AttestationDomain_Policy) (interface{}, bool) {
	switch fps.selector {
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		if len(source.GetExpectedPcrs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetExpectedPcrs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fps.selector))
	}
}

func (fps *AttestationDomainPolicy_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AttestationDomain_Policy))
}

// GetDefault returns a default value of the field type
func (fps *AttestationDomainPolicy_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AttestationDomainPolicy_FieldSubPath) ClearValue(item *AttestationDomain_Policy) {
	if item != nil {
		switch fps.selector {
		case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
			for _, subItem := range item.ExpectedPcrs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fps.selector))
		}
	}
}

func (fps *AttestationDomainPolicy_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AttestationDomain_Policy))
}

// IsLeaf - whether field path is holds simple value
func (fps *AttestationDomainPolicy_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AttestationDomainPolicy_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AttestationDomainPolicy_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AttestationDomainPolicy_FieldSubPath) WithIValue(value interface{}) AttestationDomainPolicy_FieldPathValue {
	return &AttestationDomainPolicy_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AttestationDomainPolicy_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AttestationDomainPolicy_FieldSubPath) WithIArrayOfValues(values interface{}) AttestationDomainPolicy_FieldPathArrayOfValues {
	return &AttestationDomainPolicy_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AttestationDomainPolicy_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AttestationDomainPolicy_FieldSubPath) WithIArrayItemValue(value interface{}) AttestationDomainPolicy_FieldPathArrayItemValue {
	return &AttestationDomainPolicy_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AttestationDomainPolicy_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AttestationDomainPolicy_FieldPathValue allows storing values for Policy fields according to their type
type AttestationDomainPolicy_FieldPathValue interface {
	AttestationDomainPolicy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AttestationDomain_Policy)
	CompareWith(*AttestationDomain_Policy) (cmp int, comparable bool)
}

func ParseAttestationDomainPolicy_FieldPathValue(pathStr, valueStr string) (AttestationDomainPolicy_FieldPathValue, error) {
	fp, err := ParseAttestationDomainPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path value from %s: %v", valueStr, err)
	}
	return fpv.(AttestationDomainPolicy_FieldPathValue), nil
}

func MustParseAttestationDomainPolicy_FieldPathValue(pathStr, valueStr string) AttestationDomainPolicy_FieldPathValue {
	fpv, err := ParseAttestationDomainPolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AttestationDomainPolicy_FieldTerminalPathValue struct {
	AttestationDomainPolicy_FieldTerminalPath
	value interface{}
}

var _ AttestationDomainPolicy_FieldPathValue = (*AttestationDomainPolicy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Policy' as interface{}
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) AsManufacturerRootCaCertsPemValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) AsRequireEnrollmentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) AsVerifyEventLogValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) AsExpectedPcrsValue() ([]*iam_common.PCR, bool) {
	res, ok := fpv.value.([]*iam_common.PCR)
	return res, ok
}

// SetTo stores value for selected field for object Policy
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) SetTo(target **AttestationDomain_Policy) {
	if *target == nil {
		*target = new(AttestationDomain_Policy)
	}
	switch fpv.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		(*target).ManufacturerRootCaCertsPem = fpv.value.(string)
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		(*target).RequireEnrollment = fpv.value.(bool)
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		(*target).VerifyEventLog = fpv.value.(bool)
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		(*target).ExpectedPcrs = fpv.value.([]*iam_common.PCR)
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fpv.selector))
	}
}

func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AttestationDomain_Policy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AttestationDomainPolicy_FieldTerminalPathValue' with the value under path in 'AttestationDomain_Policy'.
func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) CompareWith(source *AttestationDomain_Policy) (int, bool) {
	switch fpv.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		leftValue := fpv.value.(string)
		rightValue := source.GetManufacturerRootCaCertsPem()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		leftValue := fpv.value.(bool)
		rightValue := source.GetRequireEnrollment()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		leftValue := fpv.value.(bool)
		rightValue := source.GetVerifyEventLog()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fpv.selector))
	}
}

func (fpv *AttestationDomainPolicy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AttestationDomain_Policy))
}

type AttestationDomainPolicy_FieldSubPathValue struct {
	AttestationDomainPolicy_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AttestationDomainPolicy_FieldPathValue = (*AttestationDomainPolicy_FieldSubPathValue)(nil)

func (fpvs *AttestationDomainPolicy_FieldSubPathValue) AsExpectedPcrsPathValue() (iam_common.PCR_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(iam_common.PCR_FieldPathValue)
	return res, ok
}

func (fpvs *AttestationDomainPolicy_FieldSubPathValue) SetTo(target **AttestationDomain_Policy) {
	if *target == nil {
		*target = new(AttestationDomain_Policy)
	}
	switch fpvs.Selector() {
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fpvs.Selector()))
	}
}

func (fpvs *AttestationDomainPolicy_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AttestationDomain_Policy)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AttestationDomainPolicy_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AttestationDomainPolicy_FieldSubPathValue) CompareWith(source *AttestationDomain_Policy) (int, bool) {
	switch fpvs.Selector() {
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fpvs.Selector()))
	}
}

func (fpvs *AttestationDomainPolicy_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AttestationDomain_Policy))
}

// AttestationDomainPolicy_FieldPathArrayItemValue allows storing single item in Path-specific values for Policy according to their type
// Present only for array (repeated) types.
type AttestationDomainPolicy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AttestationDomainPolicy_FieldPath
	ContainsValue(*AttestationDomain_Policy) bool
}

// ParseAttestationDomainPolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAttestationDomainPolicy_FieldPathArrayItemValue(pathStr, valueStr string) (AttestationDomainPolicy_FieldPathArrayItemValue, error) {
	fp, err := ParseAttestationDomainPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AttestationDomainPolicy_FieldPathArrayItemValue), nil
}

func MustParseAttestationDomainPolicy_FieldPathArrayItemValue(pathStr, valueStr string) AttestationDomainPolicy_FieldPathArrayItemValue {
	fpaiv, err := ParseAttestationDomainPolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AttestationDomainPolicy_FieldTerminalPathArrayItemValue struct {
	AttestationDomainPolicy_FieldTerminalPath
	value interface{}
}

var _ AttestationDomainPolicy_FieldPathArrayItemValue = (*AttestationDomainPolicy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AttestationDomain_Policy as interface{}
func (fpaiv *AttestationDomainPolicy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *AttestationDomainPolicy_FieldTerminalPathArrayItemValue) AsExpectedPcrsItemValue() (*iam_common.PCR, bool) {
	res, ok := fpaiv.value.(*iam_common.PCR)
	return res, ok
}

func (fpaiv *AttestationDomainPolicy_FieldTerminalPathArrayItemValue) GetSingle(source *AttestationDomain_Policy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AttestationDomainPolicy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AttestationDomain_Policy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Policy'
func (fpaiv *AttestationDomainPolicy_FieldTerminalPathArrayItemValue) ContainsValue(source *AttestationDomain_Policy) bool {
	slice := fpaiv.AttestationDomainPolicy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AttestationDomainPolicy_FieldSubPathArrayItemValue struct {
	AttestationDomainPolicy_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AttestationDomainPolicy_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AttestationDomainPolicy_FieldSubPathArrayItemValue) AsExpectedPcrsPathItemValue() (iam_common.PCR_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(iam_common.PCR_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Policy'
func (fpaivs *AttestationDomainPolicy_FieldSubPathArrayItemValue) ContainsValue(source *AttestationDomain_Policy) bool {
	switch fpaivs.Selector() {
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_Policy: %d", fpaivs.Selector()))
	}
}

// AttestationDomainPolicy_FieldPathArrayOfValues allows storing slice of values for Policy fields according to their type
type AttestationDomainPolicy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AttestationDomainPolicy_FieldPath
}

func ParseAttestationDomainPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (AttestationDomainPolicy_FieldPathArrayOfValues, error) {
	fp, err := ParseAttestationDomainPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AttestationDomainPolicy_FieldPathArrayOfValues), nil
}

func MustParseAttestationDomainPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) AttestationDomainPolicy_FieldPathArrayOfValues {
	fpaov, err := ParseAttestationDomainPolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AttestationDomainPolicy_FieldTerminalPathArrayOfValues struct {
	AttestationDomainPolicy_FieldTerminalPath
	values interface{}
}

var _ AttestationDomainPolicy_FieldPathArrayOfValues = (*AttestationDomainPolicy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AttestationDomainPolicy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
		for _, v := range fpaov.values.([][]*iam_common.PCR) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AttestationDomainPolicy_FieldTerminalPathArrayOfValues) AsManufacturerRootCaCertsPemArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AttestationDomainPolicy_FieldTerminalPathArrayOfValues) AsRequireEnrollmentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *AttestationDomainPolicy_FieldTerminalPathArrayOfValues) AsVerifyEventLogArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *AttestationDomainPolicy_FieldTerminalPathArrayOfValues) AsExpectedPcrsArrayOfValues() ([][]*iam_common.PCR, bool) {
	res, ok := fpaov.values.([][]*iam_common.PCR)
	return res, ok
}

type AttestationDomainPolicy_FieldSubPathArrayOfValues struct {
	AttestationDomainPolicy_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AttestationDomainPolicy_FieldPathArrayOfValues = (*AttestationDomainPolicy_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AttestationDomainPolicy_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AttestationDomainPolicy_FieldSubPathArrayOfValues) AsExpectedPcrsPathArrayOfValues() (iam_common.PCR_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(iam_common.PCR_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AttestationDomainEnrolledKey_FieldPath interface {
	gotenobject.FieldPath
	Selector() AttestationDomainEnrolledKey_FieldPathSelector
	Get(source *AttestationDomain_EnrolledKey) []interface{}
	GetSingle(source *AttestationDomain_EnrolledKey) (interface{}, bool)
	ClearValue(item *AttestationDomain_EnrolledKey)

	// Those methods build corresponding AttestationDomainEnrolledKey_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AttestationDomainEnrolledKey_FieldPathValue
	WithIArrayOfValues(values interface{}) AttestationDomainEnrolledKey_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AttestationDomainEnrolledKey_FieldPathArrayItemValue
}

type AttestationDomainEnrolledKey_FieldPathSelector int32

const (
	AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem AttestationDomainEnrolledKey_FieldPathSelector = 0
	AttestationDomainEnrolledKey_FieldPathSelectorComment   AttestationDomainEnrolledKey_FieldPathSelector = 1
)

func (s AttestationDomainEnrolledKey_FieldPathSelector) String() string {
	switch s {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		return "pubkey_pem"
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		return "comment"
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", s))
	}
}

func BuildAttestationDomainEnrolledKey_FieldPath(fp gotenobject.RawFieldPath) (AttestationDomainEnrolledKey_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AttestationDomain_EnrolledKey")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pubkey_pem", "pubkeyPem", "pubkey-pem":
			return &AttestationDomainEnrolledKey_FieldTerminalPath{selector: AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem}, nil
		case "comment":
			return &AttestationDomainEnrolledKey_FieldTerminalPath{selector: AttestationDomainEnrolledKey_FieldPathSelectorComment}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AttestationDomain_EnrolledKey", fp)
}

func ParseAttestationDomainEnrolledKey_FieldPath(rawField string) (AttestationDomainEnrolledKey_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAttestationDomainEnrolledKey_FieldPath(fp)
}

func MustParseAttestationDomainEnrolledKey_FieldPath(rawField string) AttestationDomainEnrolledKey_FieldPath {
	fp, err := ParseAttestationDomainEnrolledKey_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AttestationDomainEnrolledKey_FieldTerminalPath struct {
	selector AttestationDomainEnrolledKey_FieldPathSelector
}

var _ AttestationDomainEnrolledKey_FieldPath = (*AttestationDomainEnrolledKey_FieldTerminalPath)(nil)

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) Selector() AttestationDomainEnrolledKey_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AttestationDomain_EnrolledKey
func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) Get(source *AttestationDomain_EnrolledKey) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
			values = append(values, source.PubkeyPem)
		case AttestationDomainEnrolledKey_FieldPathSelectorComment:
			values = append(values, source.Comment)
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
		}
	}
	return
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AttestationDomain_EnrolledKey))
}

// GetSingle returns value pointed by specific field of from source AttestationDomain_EnrolledKey
func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) GetSingle(source *AttestationDomain_EnrolledKey) (interface{}, bool) {
	switch fp.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		return source.GetPubkeyPem(), source != nil
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		return source.GetComment(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
	}
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AttestationDomain_EnrolledKey))
}

// GetDefault returns a default value of the field type
func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		return ""
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
	}
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) ClearValue(item *AttestationDomain_EnrolledKey) {
	if item != nil {
		switch fp.selector {
		case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
			item.PubkeyPem = ""
		case AttestationDomainEnrolledKey_FieldPathSelectorComment:
			item.Comment = ""
		default:
			panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
		}
	}
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AttestationDomain_EnrolledKey))
}

// IsLeaf - whether field path is holds simple value
func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem ||
		fp.selector == AttestationDomainEnrolledKey_FieldPathSelectorComment
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) WithIValue(value interface{}) AttestationDomainEnrolledKey_FieldPathValue {
	switch fp.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		return &AttestationDomainEnrolledKey_FieldTerminalPathValue{AttestationDomainEnrolledKey_FieldTerminalPath: *fp, value: value.(string)}
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		return &AttestationDomainEnrolledKey_FieldTerminalPathValue{AttestationDomainEnrolledKey_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
	}
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) WithIArrayOfValues(values interface{}) AttestationDomainEnrolledKey_FieldPathArrayOfValues {
	fpaov := &AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues{AttestationDomainEnrolledKey_FieldTerminalPath: *fp}
	switch fp.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		return &AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues{AttestationDomainEnrolledKey_FieldTerminalPath: *fp, values: values.([]string)}
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		return &AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues{AttestationDomainEnrolledKey_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
	}
	return fpaov
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) WithIArrayItemValue(value interface{}) AttestationDomainEnrolledKey_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fp.selector))
	}
}

func (fp *AttestationDomainEnrolledKey_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AttestationDomainEnrolledKey_FieldPathValue allows storing values for EnrolledKey fields according to their type
type AttestationDomainEnrolledKey_FieldPathValue interface {
	AttestationDomainEnrolledKey_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AttestationDomain_EnrolledKey)
	CompareWith(*AttestationDomain_EnrolledKey) (cmp int, comparable bool)
}

func ParseAttestationDomainEnrolledKey_FieldPathValue(pathStr, valueStr string) (AttestationDomainEnrolledKey_FieldPathValue, error) {
	fp, err := ParseAttestationDomainEnrolledKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EnrolledKey field path value from %s: %v", valueStr, err)
	}
	return fpv.(AttestationDomainEnrolledKey_FieldPathValue), nil
}

func MustParseAttestationDomainEnrolledKey_FieldPathValue(pathStr, valueStr string) AttestationDomainEnrolledKey_FieldPathValue {
	fpv, err := ParseAttestationDomainEnrolledKey_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AttestationDomainEnrolledKey_FieldTerminalPathValue struct {
	AttestationDomainEnrolledKey_FieldTerminalPath
	value interface{}
}

var _ AttestationDomainEnrolledKey_FieldPathValue = (*AttestationDomainEnrolledKey_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'EnrolledKey' as interface{}
func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) AsPubkeyPemValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) AsCommentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object EnrolledKey
func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) SetTo(target **AttestationDomain_EnrolledKey) {
	if *target == nil {
		*target = new(AttestationDomain_EnrolledKey)
	}
	switch fpv.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		(*target).PubkeyPem = fpv.value.(string)
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		(*target).Comment = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fpv.selector))
	}
}

func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AttestationDomain_EnrolledKey)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AttestationDomainEnrolledKey_FieldTerminalPathValue' with the value under path in 'AttestationDomain_EnrolledKey'.
func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) CompareWith(source *AttestationDomain_EnrolledKey) (int, bool) {
	switch fpv.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		leftValue := fpv.value.(string)
		rightValue := source.GetPubkeyPem()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		leftValue := fpv.value.(string)
		rightValue := source.GetComment()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AttestationDomain_EnrolledKey: %d", fpv.selector))
	}
}

func (fpv *AttestationDomainEnrolledKey_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AttestationDomain_EnrolledKey))
}

// AttestationDomainEnrolledKey_FieldPathArrayItemValue allows storing single item in Path-specific values for EnrolledKey according to their type
// Present only for array (repeated) types.
type AttestationDomainEnrolledKey_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AttestationDomainEnrolledKey_FieldPath
	ContainsValue(*AttestationDomain_EnrolledKey) bool
}

// ParseAttestationDomainEnrolledKey_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAttestationDomainEnrolledKey_FieldPathArrayItemValue(pathStr, valueStr string) (AttestationDomainEnrolledKey_FieldPathArrayItemValue, error) {
	fp, err := ParseAttestationDomainEnrolledKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EnrolledKey field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AttestationDomainEnrolledKey_FieldPathArrayItemValue), nil
}

func MustParseAttestationDomainEnrolledKey_FieldPathArrayItemValue(pathStr, valueStr string) AttestationDomainEnrolledKey_FieldPathArrayItemValue {
	fpaiv, err := ParseAttestationDomainEnrolledKey_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AttestationDomainEnrolledKey_FieldTerminalPathArrayItemValue struct {
	AttestationDomainEnrolledKey_FieldTerminalPath
	value interface{}
}

var _ AttestationDomainEnrolledKey_FieldPathArrayItemValue = (*AttestationDomainEnrolledKey_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AttestationDomain_EnrolledKey as interface{}
func (fpaiv *AttestationDomainEnrolledKey_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AttestationDomainEnrolledKey_FieldTerminalPathArrayItemValue) GetSingle(source *AttestationDomain_EnrolledKey) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AttestationDomainEnrolledKey_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AttestationDomain_EnrolledKey))
}

// Contains returns a boolean indicating if value that is being held is present in given 'EnrolledKey'
func (fpaiv *AttestationDomainEnrolledKey_FieldTerminalPathArrayItemValue) ContainsValue(source *AttestationDomain_EnrolledKey) bool {
	slice := fpaiv.AttestationDomainEnrolledKey_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AttestationDomainEnrolledKey_FieldPathArrayOfValues allows storing slice of values for EnrolledKey fields according to their type
type AttestationDomainEnrolledKey_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AttestationDomainEnrolledKey_FieldPath
}

func ParseAttestationDomainEnrolledKey_FieldPathArrayOfValues(pathStr, valuesStr string) (AttestationDomainEnrolledKey_FieldPathArrayOfValues, error) {
	fp, err := ParseAttestationDomainEnrolledKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EnrolledKey field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AttestationDomainEnrolledKey_FieldPathArrayOfValues), nil
}

func MustParseAttestationDomainEnrolledKey_FieldPathArrayOfValues(pathStr, valuesStr string) AttestationDomainEnrolledKey_FieldPathArrayOfValues {
	fpaov, err := ParseAttestationDomainEnrolledKey_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues struct {
	AttestationDomainEnrolledKey_FieldTerminalPath
	values interface{}
}

var _ AttestationDomainEnrolledKey_FieldPathArrayOfValues = (*AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AttestationDomainEnrolledKey_FieldPathSelectorComment:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues) AsPubkeyPemArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AttestationDomainEnrolledKey_FieldTerminalPathArrayOfValues) AsCommentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
