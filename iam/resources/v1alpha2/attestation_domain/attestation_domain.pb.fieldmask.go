// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/attestation_domain.proto
// DO NOT EDIT!!!

package attestation_domain

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &iam_common.PCR{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type AttestationDomain_FieldMask struct {
	Paths []AttestationDomain_FieldPath
}

func FullAttestationDomain_FieldMask() *AttestationDomain_FieldMask {
	res := &AttestationDomain_FieldMask{}
	res.Paths = append(res.Paths, &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorName})
	res.Paths = append(res.Paths, &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification})
	res.Paths = append(res.Paths, &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorPolicies})
	res.Paths = append(res.Paths, &AttestationDomain_FieldTerminalPath{selector: AttestationDomain_FieldPathSelectorEnrollmentList})
	return res
}

func (fieldMask *AttestationDomain_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *AttestationDomain_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AttestationDomain_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AttestationDomain_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAttestationDomain_FieldPath(raw)
	})
}

func (fieldMask *AttestationDomain_FieldMask) ProtoMessage() {}

func (fieldMask *AttestationDomain_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AttestationDomain_FieldMask) Subtract(other *AttestationDomain_FieldMask) *AttestationDomain_FieldMask {
	result := &AttestationDomain_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[AttestationDomain_FieldPathSelector]gotenobject.FieldMask{
		AttestationDomain_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		AttestationDomain_FieldPathSelectorPolicies:       &AttestationDomain_Policy_FieldMask{},
		AttestationDomain_FieldPathSelectorEnrollmentList: &AttestationDomain_EnrolledKey_FieldMask{},
	}
	mySubMasks := map[AttestationDomain_FieldPathSelector]gotenobject.FieldMask{
		AttestationDomain_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		AttestationDomain_FieldPathSelectorPolicies:       &AttestationDomain_Policy_FieldMask{},
		AttestationDomain_FieldPathSelectorEnrollmentList: &AttestationDomain_EnrolledKey_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AttestationDomain_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AttestationDomain_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AttestationDomain_FieldTerminalPath); ok {
					switch tp.selector {
					case AttestationDomain_FieldPathSelectorMetadata:
						mySubMasks[AttestationDomain_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case AttestationDomain_FieldPathSelectorPolicies:
						mySubMasks[AttestationDomain_FieldPathSelectorPolicies] = FullAttestationDomain_Policy_FieldMask()
					case AttestationDomain_FieldPathSelectorEnrollmentList:
						mySubMasks[AttestationDomain_FieldPathSelectorEnrollmentList] = FullAttestationDomain_EnrolledKey_FieldMask()
					}
				} else if tp, ok := path.(*AttestationDomain_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AttestationDomain_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AttestationDomain_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AttestationDomain_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AttestationDomain_FieldMask) FilterInputFields() *AttestationDomain_FieldMask {
	result := &AttestationDomain_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AttestationDomain_FieldPathSelectorMetadata:
			if _, ok := path.(*AttestationDomain_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AttestationDomain_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*AttestationDomain_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AttestationDomain_FieldSubPath{selector: AttestationDomain_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AttestationDomain_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AttestationDomain_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AttestationDomain_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAttestationDomain_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AttestationDomain_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AttestationDomain_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AttestationDomain_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AttestationDomain_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AttestationDomain_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AttestationDomain_FieldMask) AppendPath(path AttestationDomain_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AttestationDomain_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AttestationDomain_FieldPath))
}

func (fieldMask *AttestationDomain_FieldMask) GetPaths() []AttestationDomain_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AttestationDomain_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AttestationDomain_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAttestationDomain_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AttestationDomain_FieldMask) Set(target, source *AttestationDomain) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AttestationDomain_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AttestationDomain), source.(*AttestationDomain))
}

func (fieldMask *AttestationDomain_FieldMask) Project(source *AttestationDomain) *AttestationDomain {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AttestationDomain{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	policiesMask := &AttestationDomain_Policy_FieldMask{}
	wholePoliciesAccepted := false
	enrollmentListMask := &AttestationDomain_EnrolledKey_FieldMask{}
	wholeEnrollmentListAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AttestationDomain_FieldTerminalPath:
			switch tp.selector {
			case AttestationDomain_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case AttestationDomain_FieldPathSelectorName:
				result.Name = source.Name
			case AttestationDomain_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case AttestationDomain_FieldPathSelectorInsecureSkipManufacturerEkcertVerification:
				result.InsecureSkipManufacturerEkcertVerification = source.InsecureSkipManufacturerEkcertVerification
			case AttestationDomain_FieldPathSelectorPolicies:
				result.Policies = source.Policies
				wholePoliciesAccepted = true
			case AttestationDomain_FieldPathSelectorEnrollmentList:
				result.EnrollmentList = source.EnrollmentList
				wholeEnrollmentListAccepted = true
			}
		case *AttestationDomain_FieldSubPath:
			switch tp.selector {
			case AttestationDomain_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case AttestationDomain_FieldPathSelectorPolicies:
				policiesMask.AppendPath(tp.subPath.(AttestationDomainPolicy_FieldPath))
			case AttestationDomain_FieldPathSelectorEnrollmentList:
				enrollmentListMask.AppendPath(tp.subPath.(AttestationDomainEnrolledKey_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholePoliciesAccepted == false && len(policiesMask.Paths) > 0 {
		for _, sourceItem := range source.GetPolicies() {
			result.Policies = append(result.Policies, policiesMask.Project(sourceItem))
		}
	}
	if wholeEnrollmentListAccepted == false && len(enrollmentListMask.Paths) > 0 {
		for _, sourceItem := range source.GetEnrollmentList() {
			result.EnrollmentList = append(result.EnrollmentList, enrollmentListMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *AttestationDomain_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AttestationDomain))
}

func (fieldMask *AttestationDomain_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AttestationDomain_Policy_FieldMask struct {
	Paths []AttestationDomainPolicy_FieldPath
}

func FullAttestationDomain_Policy_FieldMask() *AttestationDomain_Policy_FieldMask {
	res := &AttestationDomain_Policy_FieldMask{}
	res.Paths = append(res.Paths, &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem})
	res.Paths = append(res.Paths, &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorRequireEnrollment})
	res.Paths = append(res.Paths, &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorVerifyEventLog})
	res.Paths = append(res.Paths, &AttestationDomainPolicy_FieldTerminalPath{selector: AttestationDomainPolicy_FieldPathSelectorExpectedPcrs})
	return res
}

func (fieldMask *AttestationDomain_Policy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *AttestationDomain_Policy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AttestationDomainPolicy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AttestationDomain_Policy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAttestationDomainPolicy_FieldPath(raw)
	})
}

func (fieldMask *AttestationDomain_Policy_FieldMask) ProtoMessage() {}

func (fieldMask *AttestationDomain_Policy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AttestationDomain_Policy_FieldMask) Subtract(other *AttestationDomain_Policy_FieldMask) *AttestationDomain_Policy_FieldMask {
	result := &AttestationDomain_Policy_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[AttestationDomainPolicy_FieldPathSelector]gotenobject.FieldMask{
		AttestationDomainPolicy_FieldPathSelectorExpectedPcrs: &iam_common.PCR_FieldMask{},
	}
	mySubMasks := map[AttestationDomainPolicy_FieldPathSelector]gotenobject.FieldMask{
		AttestationDomainPolicy_FieldPathSelectorExpectedPcrs: &iam_common.PCR_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AttestationDomainPolicy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AttestationDomainPolicy_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AttestationDomainPolicy_FieldTerminalPath); ok {
					switch tp.selector {
					case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
						mySubMasks[AttestationDomainPolicy_FieldPathSelectorExpectedPcrs] = iam_common.FullPCR_FieldMask()
					}
				} else if tp, ok := path.(*AttestationDomainPolicy_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AttestationDomainPolicy_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AttestationDomain_Policy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AttestationDomain_Policy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AttestationDomain_Policy_FieldMask) FilterInputFields() *AttestationDomain_Policy_FieldMask {
	result := &AttestationDomain_Policy_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AttestationDomain_Policy_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AttestationDomain_Policy_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AttestationDomainPolicy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAttestationDomainPolicy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AttestationDomain_Policy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AttestationDomain_Policy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AttestationDomain_Policy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AttestationDomain_Policy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AttestationDomain_Policy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AttestationDomain_Policy_FieldMask) AppendPath(path AttestationDomainPolicy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AttestationDomain_Policy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AttestationDomainPolicy_FieldPath))
}

func (fieldMask *AttestationDomain_Policy_FieldMask) GetPaths() []AttestationDomainPolicy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AttestationDomain_Policy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AttestationDomain_Policy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAttestationDomainPolicy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AttestationDomain_Policy_FieldMask) Set(target, source *AttestationDomain_Policy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AttestationDomain_Policy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AttestationDomain_Policy), source.(*AttestationDomain_Policy))
}

func (fieldMask *AttestationDomain_Policy_FieldMask) Project(source *AttestationDomain_Policy) *AttestationDomain_Policy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AttestationDomain_Policy{}
	expectedPcrsMask := &iam_common.PCR_FieldMask{}
	wholeExpectedPcrsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AttestationDomainPolicy_FieldTerminalPath:
			switch tp.selector {
			case AttestationDomainPolicy_FieldPathSelectorManufacturerRootCaCertsPem:
				result.ManufacturerRootCaCertsPem = source.ManufacturerRootCaCertsPem
			case AttestationDomainPolicy_FieldPathSelectorRequireEnrollment:
				result.RequireEnrollment = source.RequireEnrollment
			case AttestationDomainPolicy_FieldPathSelectorVerifyEventLog:
				result.VerifyEventLog = source.VerifyEventLog
			case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
				result.ExpectedPcrs = source.ExpectedPcrs
				wholeExpectedPcrsAccepted = true
			}
		case *AttestationDomainPolicy_FieldSubPath:
			switch tp.selector {
			case AttestationDomainPolicy_FieldPathSelectorExpectedPcrs:
				expectedPcrsMask.AppendPath(tp.subPath.(iam_common.PCR_FieldPath))
			}
		}
	}
	if wholeExpectedPcrsAccepted == false && len(expectedPcrsMask.Paths) > 0 {
		for _, sourceItem := range source.GetExpectedPcrs() {
			result.ExpectedPcrs = append(result.ExpectedPcrs, expectedPcrsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *AttestationDomain_Policy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AttestationDomain_Policy))
}

func (fieldMask *AttestationDomain_Policy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AttestationDomain_EnrolledKey_FieldMask struct {
	Paths []AttestationDomainEnrolledKey_FieldPath
}

func FullAttestationDomain_EnrolledKey_FieldMask() *AttestationDomain_EnrolledKey_FieldMask {
	res := &AttestationDomain_EnrolledKey_FieldMask{}
	res.Paths = append(res.Paths, &AttestationDomainEnrolledKey_FieldTerminalPath{selector: AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem})
	res.Paths = append(res.Paths, &AttestationDomainEnrolledKey_FieldTerminalPath{selector: AttestationDomainEnrolledKey_FieldPathSelectorComment})
	return res
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AttestationDomainEnrolledKey_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAttestationDomainEnrolledKey_FieldPath(raw)
	})
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) ProtoMessage() {}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) Subtract(other *AttestationDomain_EnrolledKey_FieldMask) *AttestationDomain_EnrolledKey_FieldMask {
	result := &AttestationDomain_EnrolledKey_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AttestationDomainEnrolledKey_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AttestationDomain_EnrolledKey_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) FilterInputFields() *AttestationDomain_EnrolledKey_FieldMask {
	result := &AttestationDomain_EnrolledKey_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AttestationDomainEnrolledKey_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAttestationDomainEnrolledKey_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AttestationDomain_EnrolledKey_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AttestationDomain_EnrolledKey_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) AppendPath(path AttestationDomainEnrolledKey_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AttestationDomainEnrolledKey_FieldPath))
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) GetPaths() []AttestationDomainEnrolledKey_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAttestationDomainEnrolledKey_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) Set(target, source *AttestationDomain_EnrolledKey) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AttestationDomain_EnrolledKey), source.(*AttestationDomain_EnrolledKey))
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) Project(source *AttestationDomain_EnrolledKey) *AttestationDomain_EnrolledKey {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AttestationDomain_EnrolledKey{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AttestationDomainEnrolledKey_FieldTerminalPath:
			switch tp.selector {
			case AttestationDomainEnrolledKey_FieldPathSelectorPubkeyPem:
				result.PubkeyPem = source.PubkeyPem
			case AttestationDomainEnrolledKey_FieldPathSelectorComment:
				result.Comment = source.Comment
			}
		}
	}
	return result
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AttestationDomain_EnrolledKey))
}

func (fieldMask *AttestationDomain_EnrolledKey_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
