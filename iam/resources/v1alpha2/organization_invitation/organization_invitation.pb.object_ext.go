// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha2/organization_invitation.proto
// DO NOT EDIT!!!

package organization_invitation

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_invitation "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/invitation"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_invitation.Actor{}
	_ = &organization.Organization{}
	_ = &meta.Meta{}
)

func (o *OrganizationInvitation) GotenObjectExt() {}

func (o *OrganizationInvitation) MakeFullFieldMask() *OrganizationInvitation_FieldMask {
	return FullOrganizationInvitation_FieldMask()
}

func (o *OrganizationInvitation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullOrganizationInvitation_FieldMask()
}

func (o *OrganizationInvitation) MakeDiffFieldMask(other *OrganizationInvitation) *OrganizationInvitation_FieldMask {
	if o == nil && other == nil {
		return &OrganizationInvitation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullOrganizationInvitation_FieldMask()
	}

	res := &OrganizationInvitation_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &OrganizationInvitation_FieldTerminalPath{selector: OrganizationInvitation_FieldPathSelectorName})
	}
	{
		subMask := o.GetInvitation().MakeDiffFieldMask(other.GetInvitation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &OrganizationInvitation_FieldTerminalPath{selector: OrganizationInvitation_FieldPathSelectorInvitation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &OrganizationInvitation_FieldSubPath{selector: OrganizationInvitation_FieldPathSelectorInvitation, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &OrganizationInvitation_FieldTerminalPath{selector: OrganizationInvitation_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &OrganizationInvitation_FieldSubPath{selector: OrganizationInvitation_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *OrganizationInvitation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*OrganizationInvitation))
}

func (o *OrganizationInvitation) Clone() *OrganizationInvitation {
	if o == nil {
		return nil
	}
	result := &OrganizationInvitation{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Invitation = o.Invitation.Clone()
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *OrganizationInvitation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *OrganizationInvitation) Merge(source *OrganizationInvitation) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetInvitation() != nil {
		if o.Invitation == nil {
			o.Invitation = new(iam_invitation.Invitation)
		}
		o.Invitation.Merge(source.GetInvitation())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *OrganizationInvitation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*OrganizationInvitation))
}
