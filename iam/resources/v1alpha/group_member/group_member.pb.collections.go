// Code generated by protoc-gen-goten-resource
// Resource: GroupMember
// DO NOT EDIT!!!

package group_member

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	group "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/group"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &group.Group{}
)

type GroupMemberList []*GroupMember

func (l GroupMemberList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*GroupMember))
}

func (l GroupMemberList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(GroupMemberList)...)
}

func (l GroupMemberList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l GroupMemberList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l GroupMemberList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*GroupMember)
}

func (l GroupMemberList) Length() int {
	return len(l)
}

type GroupMemberChangeList []*GroupMemberChange

func (l GroupMemberChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*GroupMemberChange))
}

func (l GroupMemberChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(GroupMemberChangeList)...)
}

func (l GroupMemberChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l GroupMemberChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l GroupMemberChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*GroupMemberChange)
}

func (l GroupMemberChangeList) Length() int {
	return len(l)
}

type GroupMemberNameList []*Name

func (l GroupMemberNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l GroupMemberNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(GroupMemberNameList)...)
}

func (l GroupMemberNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l GroupMemberNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l GroupMemberNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l GroupMemberNameList) Length() int {
	return len(l)
}

type GroupMemberReferenceList []*Reference

func (l GroupMemberReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l GroupMemberReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(GroupMemberReferenceList)...)
}

func (l GroupMemberReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l GroupMemberReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l GroupMemberReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l GroupMemberReferenceList) Length() int {
	return len(l)
}

type GroupMemberParentNameList []*ParentName

func (l GroupMemberParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l GroupMemberParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(GroupMemberParentNameList)...)
}

func (l GroupMemberParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l GroupMemberParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l GroupMemberParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l GroupMemberParentNameList) Length() int {
	return len(l)
}

type GroupMemberParentReferenceList []*ParentReference

func (l GroupMemberParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l GroupMemberParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(GroupMemberParentReferenceList)...)
}

func (l GroupMemberParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l GroupMemberParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l GroupMemberParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l GroupMemberParentReferenceList) Length() int {
	return len(l)
}

type GroupMemberMap map[Name]*GroupMember

func (m GroupMemberMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m GroupMemberMap) Set(res gotenresource.Resource) {
	tRes := res.(*GroupMember)
	m[*tRes.Name] = tRes
}

func (m GroupMemberMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m GroupMemberMap) Length() int {
	return len(m)
}

func (m GroupMemberMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type GroupMemberChangeMap map[Name]*GroupMemberChange

func (m GroupMemberChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m GroupMemberChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*GroupMemberChange)
	m[*tChange.GetGroupMemberName()] = tChange
}

func (m GroupMemberChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m GroupMemberChangeMap) Length() int {
	return len(m)
}

func (m GroupMemberChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
