// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/user.proto
// DO NOT EDIT!!!

package user

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &timestamp.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type User_FieldPath interface {
	gotenobject.FieldPath
	Selector() User_FieldPathSelector
	Get(source *User) []interface{}
	GetSingle(source *User) (interface{}, bool)
	ClearValue(item *User)

	// Those methods build corresponding User_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) User_FieldPathValue
	WithIArrayOfValues(values interface{}) User_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) User_FieldPathArrayItemValue
}

type User_FieldPathSelector int32

const (
	User_FieldPathSelectorName          User_FieldPathSelector = 0
	User_FieldPathSelectorFullName      User_FieldPathSelector = 1
	User_FieldPathSelectorMetadata      User_FieldPathSelector = 2
	User_FieldPathSelectorEmail         User_FieldPathSelector = 3
	User_FieldPathSelectorEmailVerified User_FieldPathSelector = 4
	User_FieldPathSelectorAuthInfo      User_FieldPathSelector = 5
	User_FieldPathSelectorSettings      User_FieldPathSelector = 6
	User_FieldPathSelectorRefreshedTime User_FieldPathSelector = 7
)

func (s User_FieldPathSelector) String() string {
	switch s {
	case User_FieldPathSelectorName:
		return "name"
	case User_FieldPathSelectorFullName:
		return "full_name"
	case User_FieldPathSelectorMetadata:
		return "metadata"
	case User_FieldPathSelectorEmail:
		return "email"
	case User_FieldPathSelectorEmailVerified:
		return "email_verified"
	case User_FieldPathSelectorAuthInfo:
		return "auth_info"
	case User_FieldPathSelectorSettings:
		return "settings"
	case User_FieldPathSelectorRefreshedTime:
		return "refreshed_time"
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", s))
	}
}

func BuildUser_FieldPath(fp gotenobject.RawFieldPath) (User_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object User")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorName}, nil
		case "full_name", "fullName", "full-name":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorFullName}, nil
		case "metadata":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorMetadata}, nil
		case "email":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorEmail}, nil
		case "email_verified", "emailVerified", "email-verified":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorEmailVerified}, nil
		case "auth_info", "authInfo", "auth-info":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorAuthInfo}, nil
		case "settings":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorSettings}, nil
		case "refreshed_time", "refreshedTime", "refreshed-time":
			return &User_FieldTerminalPath{selector: User_FieldPathSelectorRefreshedTime}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &User_FieldSubPath{selector: User_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "auth_info", "authInfo", "auth-info":
			if subpath, err := BuildUserAuthInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &User_FieldSubPath{selector: User_FieldPathSelectorAuthInfo, subPath: subpath}, nil
			}
		case "settings":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object User)", fp)
			}
			return &User_FieldPathMap{selector: User_FieldPathSelectorSettings, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object User", fp)
}

func ParseUser_FieldPath(rawField string) (User_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUser_FieldPath(fp)
}

func MustParseUser_FieldPath(rawField string) User_FieldPath {
	fp, err := ParseUser_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type User_FieldTerminalPath struct {
	selector User_FieldPathSelector
}

var _ User_FieldPath = (*User_FieldTerminalPath)(nil)

func (fp *User_FieldTerminalPath) Selector() User_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *User_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *User_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source User
func (fp *User_FieldTerminalPath) Get(source *User) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case User_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case User_FieldPathSelectorFullName:
			values = append(values, source.FullName)
		case User_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case User_FieldPathSelectorEmail:
			values = append(values, source.Email)
		case User_FieldPathSelectorEmailVerified:
			values = append(values, source.EmailVerified)
		case User_FieldPathSelectorAuthInfo:
			if source.AuthInfo != nil {
				values = append(values, source.AuthInfo)
			}
		case User_FieldPathSelectorSettings:
			values = append(values, source.Settings)
		case User_FieldPathSelectorRefreshedTime:
			if source.RefreshedTime != nil {
				values = append(values, source.RefreshedTime)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
		}
	}
	return
}

func (fp *User_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*User))
}

// GetSingle returns value pointed by specific field of from source User
func (fp *User_FieldTerminalPath) GetSingle(source *User) (interface{}, bool) {
	switch fp.selector {
	case User_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case User_FieldPathSelectorFullName:
		return source.GetFullName(), source != nil
	case User_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case User_FieldPathSelectorEmail:
		return source.GetEmail(), source != nil
	case User_FieldPathSelectorEmailVerified:
		return source.GetEmailVerified(), source != nil
	case User_FieldPathSelectorAuthInfo:
		res := source.GetAuthInfo()
		return res, res != nil
	case User_FieldPathSelectorSettings:
		res := source.GetSettings()
		return res, res != nil
	case User_FieldPathSelectorRefreshedTime:
		res := source.GetRefreshedTime()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
	}
}

func (fp *User_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*User))
}

// GetDefault returns a default value of the field type
func (fp *User_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case User_FieldPathSelectorName:
		return (*Name)(nil)
	case User_FieldPathSelectorFullName:
		return ""
	case User_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case User_FieldPathSelectorEmail:
		return ""
	case User_FieldPathSelectorEmailVerified:
		return false
	case User_FieldPathSelectorAuthInfo:
		return (*User_AuthInfo)(nil)
	case User_FieldPathSelectorSettings:
		return (map[string]string)(nil)
	case User_FieldPathSelectorRefreshedTime:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
	}
}

func (fp *User_FieldTerminalPath) ClearValue(item *User) {
	if item != nil {
		switch fp.selector {
		case User_FieldPathSelectorName:
			item.Name = nil
		case User_FieldPathSelectorFullName:
			item.FullName = ""
		case User_FieldPathSelectorMetadata:
			item.Metadata = nil
		case User_FieldPathSelectorEmail:
			item.Email = ""
		case User_FieldPathSelectorEmailVerified:
			item.EmailVerified = false
		case User_FieldPathSelectorAuthInfo:
			item.AuthInfo = nil
		case User_FieldPathSelectorSettings:
			item.Settings = nil
		case User_FieldPathSelectorRefreshedTime:
			item.RefreshedTime = nil
		default:
			panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
		}
	}
}

func (fp *User_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*User))
}

// IsLeaf - whether field path is holds simple value
func (fp *User_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == User_FieldPathSelectorName ||
		fp.selector == User_FieldPathSelectorFullName ||
		fp.selector == User_FieldPathSelectorEmail ||
		fp.selector == User_FieldPathSelectorEmailVerified ||
		fp.selector == User_FieldPathSelectorSettings ||
		fp.selector == User_FieldPathSelectorRefreshedTime
}

func (fp *User_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *User_FieldTerminalPath) WithIValue(value interface{}) User_FieldPathValue {
	switch fp.selector {
	case User_FieldPathSelectorName:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(*Name)}
	case User_FieldPathSelectorFullName:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(string)}
	case User_FieldPathSelectorMetadata:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case User_FieldPathSelectorEmail:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(string)}
	case User_FieldPathSelectorEmailVerified:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(bool)}
	case User_FieldPathSelectorAuthInfo:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(*User_AuthInfo)}
	case User_FieldPathSelectorSettings:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case User_FieldPathSelectorRefreshedTime:
		return &User_FieldTerminalPathValue{User_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
	}
}

func (fp *User_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *User_FieldTerminalPath) WithIArrayOfValues(values interface{}) User_FieldPathArrayOfValues {
	fpaov := &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp}
	switch fp.selector {
	case User_FieldPathSelectorName:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]*Name)}
	case User_FieldPathSelectorFullName:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]string)}
	case User_FieldPathSelectorMetadata:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case User_FieldPathSelectorEmail:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]string)}
	case User_FieldPathSelectorEmailVerified:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]bool)}
	case User_FieldPathSelectorAuthInfo:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]*User_AuthInfo)}
	case User_FieldPathSelectorSettings:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case User_FieldPathSelectorRefreshedTime:
		return &User_FieldTerminalPathArrayOfValues{User_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
	}
	return fpaov
}

func (fp *User_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *User_FieldTerminalPath) WithIArrayItemValue(value interface{}) User_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fp.selector))
	}
}

func (fp *User_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type User_FieldPathMap struct {
	key      string
	selector User_FieldPathSelector
}

var _ User_FieldPath = (*User_FieldPathMap)(nil)

func (fpm *User_FieldPathMap) Selector() User_FieldPathSelector {
	return fpm.selector
}

func (fpm *User_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *User_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *User_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source User
func (fpm *User_FieldPathMap) Get(source *User) (values []interface{}) {
	switch fpm.selector {
	case User_FieldPathSelectorSettings:
		if value, ok := source.GetSettings()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
	}
	return
}

func (fpm *User_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*User))
}

// GetSingle returns value by selected field map key from source User
func (fpm *User_FieldPathMap) GetSingle(source *User) (interface{}, bool) {
	switch fpm.selector {
	case User_FieldPathSelectorSettings:
		res, ok := source.GetSettings()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
	}
}

func (fpm *User_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*User))
}

// GetDefault returns a default value of the field type
func (fpm *User_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case User_FieldPathSelectorSettings:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
	}
}

func (fpm *User_FieldPathMap) ClearValue(item *User) {
	if item != nil {
		switch fpm.selector {
		case User_FieldPathSelectorSettings:
			delete(item.Settings, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
		}
	}
}

func (fpm *User_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*User))
}

// IsLeaf - whether field path is holds simple value
func (fpm *User_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case User_FieldPathSelectorSettings:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
	}
}

func (fpm *User_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *User_FieldPathMap) WithIValue(value interface{}) User_FieldPathValue {
	switch fpm.selector {
	case User_FieldPathSelectorSettings:
		return &User_FieldPathMapValue{User_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
	}
}

func (fpm *User_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *User_FieldPathMap) WithIArrayOfValues(values interface{}) User_FieldPathArrayOfValues {
	switch fpm.selector {
	case User_FieldPathSelectorSettings:
		return &User_FieldPathMapArrayOfValues{User_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpm.selector))
	}
}

func (fpm *User_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *User_FieldPathMap) WithIArrayItemValue(value interface{}) User_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *User_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type User_FieldSubPath struct {
	selector User_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ User_FieldPath = (*User_FieldSubPath)(nil)

func (fps *User_FieldSubPath) Selector() User_FieldPathSelector {
	return fps.selector
}
func (fps *User_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *User_FieldSubPath) AsAuthInfoSubPath() (UserAuthInfo_FieldPath, bool) {
	res, ok := fps.subPath.(UserAuthInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *User_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *User_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source User
func (fps *User_FieldSubPath) Get(source *User) (values []interface{}) {
	switch fps.selector {
	case User_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case User_FieldPathSelectorAuthInfo:
		values = append(values, fps.subPath.GetRaw(source.GetAuthInfo())...)
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fps.selector))
	}
	return
}

func (fps *User_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*User))
}

// GetSingle returns value of selected field from source User
func (fps *User_FieldSubPath) GetSingle(source *User) (interface{}, bool) {
	switch fps.selector {
	case User_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case User_FieldPathSelectorAuthInfo:
		if source.GetAuthInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuthInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fps.selector))
	}
}

func (fps *User_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*User))
}

// GetDefault returns a default value of the field type
func (fps *User_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *User_FieldSubPath) ClearValue(item *User) {
	if item != nil {
		switch fps.selector {
		case User_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case User_FieldPathSelectorAuthInfo:
			fps.subPath.ClearValueRaw(item.AuthInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for User: %d", fps.selector))
		}
	}
}

func (fps *User_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*User))
}

// IsLeaf - whether field path is holds simple value
func (fps *User_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *User_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&User_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *User_FieldSubPath) WithIValue(value interface{}) User_FieldPathValue {
	return &User_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *User_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *User_FieldSubPath) WithIArrayOfValues(values interface{}) User_FieldPathArrayOfValues {
	return &User_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *User_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *User_FieldSubPath) WithIArrayItemValue(value interface{}) User_FieldPathArrayItemValue {
	return &User_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *User_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// User_FieldPathValue allows storing values for User fields according to their type
type User_FieldPathValue interface {
	User_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **User)
	CompareWith(*User) (cmp int, comparable bool)
}

func ParseUser_FieldPathValue(pathStr, valueStr string) (User_FieldPathValue, error) {
	fp, err := ParseUser_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing User field path value from %s: %v", valueStr, err)
	}
	return fpv.(User_FieldPathValue), nil
}

func MustParseUser_FieldPathValue(pathStr, valueStr string) User_FieldPathValue {
	fpv, err := ParseUser_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type User_FieldTerminalPathValue struct {
	User_FieldTerminalPath
	value interface{}
}

var _ User_FieldPathValue = (*User_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'User' as interface{}
func (fpv *User_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *User_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsFullNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsEmailVerifiedValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsAuthInfoValue() (*User_AuthInfo, bool) {
	res, ok := fpv.value.(*User_AuthInfo)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsSettingsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *User_FieldTerminalPathValue) AsRefreshedTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object User
func (fpv *User_FieldTerminalPathValue) SetTo(target **User) {
	if *target == nil {
		*target = new(User)
	}
	switch fpv.selector {
	case User_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case User_FieldPathSelectorFullName:
		(*target).FullName = fpv.value.(string)
	case User_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case User_FieldPathSelectorEmail:
		(*target).Email = fpv.value.(string)
	case User_FieldPathSelectorEmailVerified:
		(*target).EmailVerified = fpv.value.(bool)
	case User_FieldPathSelectorAuthInfo:
		(*target).AuthInfo = fpv.value.(*User_AuthInfo)
	case User_FieldPathSelectorSettings:
		(*target).Settings = fpv.value.(map[string]string)
	case User_FieldPathSelectorRefreshedTime:
		(*target).RefreshedTime = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpv.selector))
	}
}

func (fpv *User_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*User)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'User_FieldTerminalPathValue' with the value under path in 'User'.
func (fpv *User_FieldTerminalPathValue) CompareWith(source *User) (int, bool) {
	switch fpv.selector {
	case User_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case User_FieldPathSelectorFullName:
		leftValue := fpv.value.(string)
		rightValue := source.GetFullName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case User_FieldPathSelectorMetadata:
		return 0, false
	case User_FieldPathSelectorEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case User_FieldPathSelectorEmailVerified:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEmailVerified()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case User_FieldPathSelectorAuthInfo:
		return 0, false
	case User_FieldPathSelectorSettings:
		return 0, false
	case User_FieldPathSelectorRefreshedTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetRefreshedTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpv.selector))
	}
}

func (fpv *User_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*User))
}

type User_FieldPathMapValue struct {
	User_FieldPathMap
	value interface{}
}

var _ User_FieldPathValue = (*User_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in User as interface{}
func (fpmv *User_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *User_FieldPathMapValue) AsSettingsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in User
func (fpmv *User_FieldPathMapValue) SetTo(target **User) {
	if *target == nil {
		*target = new(User)
	}
	switch fpmv.selector {
	case User_FieldPathSelectorSettings:
		if (*target).Settings == nil {
			(*target).Settings = make(map[string]string)
		}
		(*target).Settings[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpmv.selector))
	}
}

func (fpmv *User_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*User)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'User_FieldPathMapValue' with the value under path in 'User'.
func (fpmv *User_FieldPathMapValue) CompareWith(source *User) (int, bool) {
	switch fpmv.selector {
	case User_FieldPathSelectorSettings:
		leftValue := fpmv.value.(string)
		rightValue := source.GetSettings()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpmv.selector))
	}
}

func (fpmv *User_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*User))
}

type User_FieldSubPathValue struct {
	User_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ User_FieldPathValue = (*User_FieldSubPathValue)(nil)

func (fpvs *User_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *User_FieldSubPathValue) AsAuthInfoPathValue() (UserAuthInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UserAuthInfo_FieldPathValue)
	return res, ok
}

func (fpvs *User_FieldSubPathValue) SetTo(target **User) {
	if *target == nil {
		*target = new(User)
	}
	switch fpvs.Selector() {
	case User_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case User_FieldPathSelectorAuthInfo:
		fpvs.subPathValue.(UserAuthInfo_FieldPathValue).SetTo(&(*target).AuthInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpvs.Selector()))
	}
}

func (fpvs *User_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*User)
	fpvs.SetTo(&typedObject)
}

func (fpvs *User_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *User_FieldSubPathValue) CompareWith(source *User) (int, bool) {
	switch fpvs.Selector() {
	case User_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case User_FieldPathSelectorAuthInfo:
		return fpvs.subPathValue.(UserAuthInfo_FieldPathValue).CompareWith(source.GetAuthInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpvs.Selector()))
	}
}

func (fpvs *User_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*User))
}

// User_FieldPathArrayItemValue allows storing single item in Path-specific values for User according to their type
// Present only for array (repeated) types.
type User_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	User_FieldPath
	ContainsValue(*User) bool
}

// ParseUser_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUser_FieldPathArrayItemValue(pathStr, valueStr string) (User_FieldPathArrayItemValue, error) {
	fp, err := ParseUser_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing User field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(User_FieldPathArrayItemValue), nil
}

func MustParseUser_FieldPathArrayItemValue(pathStr, valueStr string) User_FieldPathArrayItemValue {
	fpaiv, err := ParseUser_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type User_FieldTerminalPathArrayItemValue struct {
	User_FieldTerminalPath
	value interface{}
}

var _ User_FieldPathArrayItemValue = (*User_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object User as interface{}
func (fpaiv *User_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *User_FieldTerminalPathArrayItemValue) GetSingle(source *User) (interface{}, bool) {
	return nil, false
}

func (fpaiv *User_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*User))
}

// Contains returns a boolean indicating if value that is being held is present in given 'User'
func (fpaiv *User_FieldTerminalPathArrayItemValue) ContainsValue(source *User) bool {
	slice := fpaiv.User_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type User_FieldSubPathArrayItemValue struct {
	User_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *User_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *User_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *User_FieldSubPathArrayItemValue) AsAuthInfoPathItemValue() (UserAuthInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UserAuthInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'User'
func (fpaivs *User_FieldSubPathArrayItemValue) ContainsValue(source *User) bool {
	switch fpaivs.Selector() {
	case User_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case User_FieldPathSelectorAuthInfo:
		return fpaivs.subPathItemValue.(UserAuthInfo_FieldPathArrayItemValue).ContainsValue(source.GetAuthInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for User: %d", fpaivs.Selector()))
	}
}

// User_FieldPathArrayOfValues allows storing slice of values for User fields according to their type
type User_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	User_FieldPath
}

func ParseUser_FieldPathArrayOfValues(pathStr, valuesStr string) (User_FieldPathArrayOfValues, error) {
	fp, err := ParseUser_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing User field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(User_FieldPathArrayOfValues), nil
}

func MustParseUser_FieldPathArrayOfValues(pathStr, valuesStr string) User_FieldPathArrayOfValues {
	fpaov, err := ParseUser_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type User_FieldTerminalPathArrayOfValues struct {
	User_FieldTerminalPath
	values interface{}
}

var _ User_FieldPathArrayOfValues = (*User_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *User_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case User_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case User_FieldPathSelectorFullName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case User_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case User_FieldPathSelectorEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case User_FieldPathSelectorEmailVerified:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case User_FieldPathSelectorAuthInfo:
		for _, v := range fpaov.values.([]*User_AuthInfo) {
			values = append(values, v)
		}
	case User_FieldPathSelectorSettings:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case User_FieldPathSelectorRefreshedTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsFullNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsEmailVerifiedArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsAuthInfoArrayOfValues() ([]*User_AuthInfo, bool) {
	res, ok := fpaov.values.([]*User_AuthInfo)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsSettingsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *User_FieldTerminalPathArrayOfValues) AsRefreshedTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}

type User_FieldPathMapArrayOfValues struct {
	User_FieldPathMap
	values interface{}
}

var _ User_FieldPathArrayOfValues = (*User_FieldPathMapArrayOfValues)(nil)

func (fpmaov *User_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case User_FieldPathSelectorSettings:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *User_FieldPathMapArrayOfValues) AsSettingsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type User_FieldSubPathArrayOfValues struct {
	User_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ User_FieldPathArrayOfValues = (*User_FieldSubPathArrayOfValues)(nil)

func (fpsaov *User_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *User_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *User_FieldSubPathArrayOfValues) AsAuthInfoPathArrayOfValues() (UserAuthInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UserAuthInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UserAuthInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() UserAuthInfo_FieldPathSelector
	Get(source *User_AuthInfo) []interface{}
	GetSingle(source *User_AuthInfo) (interface{}, bool)
	ClearValue(item *User_AuthInfo)

	// Those methods build corresponding UserAuthInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UserAuthInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) UserAuthInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UserAuthInfo_FieldPathArrayItemValue
}

type UserAuthInfo_FieldPathSelector int32

const (
	UserAuthInfo_FieldPathSelectorProvider UserAuthInfo_FieldPathSelector = 0
	UserAuthInfo_FieldPathSelectorId       UserAuthInfo_FieldPathSelector = 1
)

func (s UserAuthInfo_FieldPathSelector) String() string {
	switch s {
	case UserAuthInfo_FieldPathSelectorProvider:
		return "provider"
	case UserAuthInfo_FieldPathSelectorId:
		return "id"
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", s))
	}
}

func BuildUserAuthInfo_FieldPath(fp gotenobject.RawFieldPath) (UserAuthInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object User_AuthInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provider":
			return &UserAuthInfo_FieldTerminalPath{selector: UserAuthInfo_FieldPathSelectorProvider}, nil
		case "id":
			return &UserAuthInfo_FieldTerminalPath{selector: UserAuthInfo_FieldPathSelectorId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object User_AuthInfo", fp)
}

func ParseUserAuthInfo_FieldPath(rawField string) (UserAuthInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUserAuthInfo_FieldPath(fp)
}

func MustParseUserAuthInfo_FieldPath(rawField string) UserAuthInfo_FieldPath {
	fp, err := ParseUserAuthInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UserAuthInfo_FieldTerminalPath struct {
	selector UserAuthInfo_FieldPathSelector
}

var _ UserAuthInfo_FieldPath = (*UserAuthInfo_FieldTerminalPath)(nil)

func (fp *UserAuthInfo_FieldTerminalPath) Selector() UserAuthInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UserAuthInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UserAuthInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source User_AuthInfo
func (fp *UserAuthInfo_FieldTerminalPath) Get(source *User_AuthInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UserAuthInfo_FieldPathSelectorProvider:
			values = append(values, source.Provider)
		case UserAuthInfo_FieldPathSelectorId:
			values = append(values, source.Id)
		default:
			panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *UserAuthInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*User_AuthInfo))
}

// GetSingle returns value pointed by specific field of from source User_AuthInfo
func (fp *UserAuthInfo_FieldTerminalPath) GetSingle(source *User_AuthInfo) (interface{}, bool) {
	switch fp.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		return source.GetProvider(), source != nil
	case UserAuthInfo_FieldPathSelectorId:
		return source.GetId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
	}
}

func (fp *UserAuthInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*User_AuthInfo))
}

// GetDefault returns a default value of the field type
func (fp *UserAuthInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		return ""
	case UserAuthInfo_FieldPathSelectorId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
	}
}

func (fp *UserAuthInfo_FieldTerminalPath) ClearValue(item *User_AuthInfo) {
	if item != nil {
		switch fp.selector {
		case UserAuthInfo_FieldPathSelectorProvider:
			item.Provider = ""
		case UserAuthInfo_FieldPathSelectorId:
			item.Id = ""
		default:
			panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
		}
	}
}

func (fp *UserAuthInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*User_AuthInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *UserAuthInfo_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UserAuthInfo_FieldPathSelectorProvider ||
		fp.selector == UserAuthInfo_FieldPathSelectorId
}

func (fp *UserAuthInfo_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UserAuthInfo_FieldTerminalPath) WithIValue(value interface{}) UserAuthInfo_FieldPathValue {
	switch fp.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		return &UserAuthInfo_FieldTerminalPathValue{UserAuthInfo_FieldTerminalPath: *fp, value: value.(string)}
	case UserAuthInfo_FieldPathSelectorId:
		return &UserAuthInfo_FieldTerminalPathValue{UserAuthInfo_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
	}
}

func (fp *UserAuthInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UserAuthInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) UserAuthInfo_FieldPathArrayOfValues {
	fpaov := &UserAuthInfo_FieldTerminalPathArrayOfValues{UserAuthInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		return &UserAuthInfo_FieldTerminalPathArrayOfValues{UserAuthInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case UserAuthInfo_FieldPathSelectorId:
		return &UserAuthInfo_FieldTerminalPathArrayOfValues{UserAuthInfo_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *UserAuthInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UserAuthInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) UserAuthInfo_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fp.selector))
	}
}

func (fp *UserAuthInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// UserAuthInfo_FieldPathValue allows storing values for AuthInfo fields according to their type
type UserAuthInfo_FieldPathValue interface {
	UserAuthInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **User_AuthInfo)
	CompareWith(*User_AuthInfo) (cmp int, comparable bool)
}

func ParseUserAuthInfo_FieldPathValue(pathStr, valueStr string) (UserAuthInfo_FieldPathValue, error) {
	fp, err := ParseUserAuthInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(UserAuthInfo_FieldPathValue), nil
}

func MustParseUserAuthInfo_FieldPathValue(pathStr, valueStr string) UserAuthInfo_FieldPathValue {
	fpv, err := ParseUserAuthInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UserAuthInfo_FieldTerminalPathValue struct {
	UserAuthInfo_FieldTerminalPath
	value interface{}
}

var _ UserAuthInfo_FieldPathValue = (*UserAuthInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AuthInfo' as interface{}
func (fpv *UserAuthInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UserAuthInfo_FieldTerminalPathValue) AsProviderValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *UserAuthInfo_FieldTerminalPathValue) AsIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object AuthInfo
func (fpv *UserAuthInfo_FieldTerminalPathValue) SetTo(target **User_AuthInfo) {
	if *target == nil {
		*target = new(User_AuthInfo)
	}
	switch fpv.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		(*target).Provider = fpv.value.(string)
	case UserAuthInfo_FieldPathSelectorId:
		(*target).Id = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fpv.selector))
	}
}

func (fpv *UserAuthInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*User_AuthInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UserAuthInfo_FieldTerminalPathValue' with the value under path in 'User_AuthInfo'.
func (fpv *UserAuthInfo_FieldTerminalPathValue) CompareWith(source *User_AuthInfo) (int, bool) {
	switch fpv.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		leftValue := fpv.value.(string)
		rightValue := source.GetProvider()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case UserAuthInfo_FieldPathSelectorId:
		leftValue := fpv.value.(string)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for User_AuthInfo: %d", fpv.selector))
	}
}

func (fpv *UserAuthInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*User_AuthInfo))
}

// UserAuthInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for AuthInfo according to their type
// Present only for array (repeated) types.
type UserAuthInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UserAuthInfo_FieldPath
	ContainsValue(*User_AuthInfo) bool
}

// ParseUserAuthInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUserAuthInfo_FieldPathArrayItemValue(pathStr, valueStr string) (UserAuthInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseUserAuthInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UserAuthInfo_FieldPathArrayItemValue), nil
}

func MustParseUserAuthInfo_FieldPathArrayItemValue(pathStr, valueStr string) UserAuthInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseUserAuthInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UserAuthInfo_FieldTerminalPathArrayItemValue struct {
	UserAuthInfo_FieldTerminalPath
	value interface{}
}

var _ UserAuthInfo_FieldPathArrayItemValue = (*UserAuthInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object User_AuthInfo as interface{}
func (fpaiv *UserAuthInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UserAuthInfo_FieldTerminalPathArrayItemValue) GetSingle(source *User_AuthInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UserAuthInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*User_AuthInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AuthInfo'
func (fpaiv *UserAuthInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *User_AuthInfo) bool {
	slice := fpaiv.UserAuthInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// UserAuthInfo_FieldPathArrayOfValues allows storing slice of values for AuthInfo fields according to their type
type UserAuthInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UserAuthInfo_FieldPath
}

func ParseUserAuthInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (UserAuthInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseUserAuthInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UserAuthInfo_FieldPathArrayOfValues), nil
}

func MustParseUserAuthInfo_FieldPathArrayOfValues(pathStr, valuesStr string) UserAuthInfo_FieldPathArrayOfValues {
	fpaov, err := ParseUserAuthInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UserAuthInfo_FieldTerminalPathArrayOfValues struct {
	UserAuthInfo_FieldTerminalPath
	values interface{}
}

var _ UserAuthInfo_FieldPathArrayOfValues = (*UserAuthInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UserAuthInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UserAuthInfo_FieldPathSelectorProvider:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case UserAuthInfo_FieldPathSelectorId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UserAuthInfo_FieldTerminalPathArrayOfValues) AsProviderArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *UserAuthInfo_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
