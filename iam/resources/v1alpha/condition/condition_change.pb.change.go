// Code generated by protoc-gen-goten-resource
// Resource change: ConditionChange
// DO NOT EDIT!!!

package condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
	_ = &field_mask.FieldMask{}
)

func (c *ConditionChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConditionChange_Added_)
	return ok
}

func (c *ConditionChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConditionChange_Modified_)
	return ok
}

func (c *ConditionChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConditionChange_Current_)
	return ok
}

func (c *ConditionChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConditionChange_Removed_)
	return ok
}

func (c *ConditionChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ConditionChange_Added_:
		return cType.Added.ViewIndex
	case *ConditionChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *ConditionChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ConditionChange_Removed_:
		return cType.Removed.ViewIndex
	case *ConditionChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *ConditionChange) GetCondition() *Condition {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ConditionChange_Added_:
		return cType.Added.Condition
	case *ConditionChange_Modified_:
		return cType.Modified.Condition
	case *ConditionChange_Current_:
		return cType.Current.Condition
	case *ConditionChange_Removed_:
		return nil
	}
	return nil
}

func (c *ConditionChange) GetRawResource() gotenresource.Resource {
	return c.GetCondition()
}

func (c *ConditionChange) GetConditionName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ConditionChange_Added_:
		return cType.Added.Condition.GetName()
	case *ConditionChange_Modified_:
		return cType.Modified.Name
	case *ConditionChange_Current_:
		return cType.Current.Condition.GetName()
	case *ConditionChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *ConditionChange) GetRawName() gotenresource.Name {
	return c.GetConditionName()
}

func (c *ConditionChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &ConditionChange_Added_{
		Added: &ConditionChange_Added{
			Condition: snapshot.(*Condition),
			ViewIndex: int32(idx),
		},
	}
}

func (c *ConditionChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &ConditionChange_Modified_{
		Modified: &ConditionChange_Modified{
			Name:              name.(*Name),
			Condition:         snapshot.(*Condition),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *ConditionChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &ConditionChange_Current_{
		Current: &ConditionChange_Current{
			Condition: snapshot.(*Condition),
		},
	}
}

func (c *ConditionChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &ConditionChange_Removed_{
		Removed: &ConditionChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
