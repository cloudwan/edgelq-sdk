// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/condition.proto
// DO NOT EDIT!!!

package condition

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &organization.Organization{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Condition_FieldPath interface {
	gotenobject.FieldPath
	Selector() Condition_FieldPathSelector
	Get(source *Condition) []interface{}
	GetSingle(source *Condition) (interface{}, bool)
	ClearValue(item *Condition)

	// Those methods build corresponding Condition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Condition_FieldPathValue
	WithIArrayOfValues(values interface{}) Condition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Condition_FieldPathArrayItemValue
}

type Condition_FieldPathSelector int32

const (
	Condition_FieldPathSelectorName                  Condition_FieldPathSelector = 0
	Condition_FieldPathSelectorDisplayName           Condition_FieldPathSelector = 1
	Condition_FieldPathSelectorDescription           Condition_FieldPathSelector = 2
	Condition_FieldPathSelectorExpression            Condition_FieldPathSelector = 3
	Condition_FieldPathSelectorParameterDeclarations Condition_FieldPathSelector = 4
)

func (s Condition_FieldPathSelector) String() string {
	switch s {
	case Condition_FieldPathSelectorName:
		return "name"
	case Condition_FieldPathSelectorDisplayName:
		return "display_name"
	case Condition_FieldPathSelectorDescription:
		return "description"
	case Condition_FieldPathSelectorExpression:
		return "expression"
	case Condition_FieldPathSelectorParameterDeclarations:
		return "parameter_declarations"
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", s))
	}
}

func BuildCondition_FieldPath(fp gotenobject.RawFieldPath) (Condition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Condition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorDescription}, nil
		case "expression":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorExpression}, nil
		case "parameter_declarations", "parameterDeclarations", "parameter-declarations":
			return &Condition_FieldTerminalPath{selector: Condition_FieldPathSelectorParameterDeclarations}, nil
		}
	} else {
		switch fp[0] {
		case "parameter_declarations", "parameterDeclarations", "parameter-declarations":
			if subpath, err := BuildConditionParameterDeclaration_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Condition_FieldSubPath{selector: Condition_FieldPathSelectorParameterDeclarations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Condition", fp)
}

func ParseCondition_FieldPath(rawField string) (Condition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCondition_FieldPath(fp)
}

func MustParseCondition_FieldPath(rawField string) Condition_FieldPath {
	fp, err := ParseCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Condition_FieldTerminalPath struct {
	selector Condition_FieldPathSelector
}

var _ Condition_FieldPath = (*Condition_FieldTerminalPath)(nil)

func (fp *Condition_FieldTerminalPath) Selector() Condition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Condition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Condition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Condition
func (fp *Condition_FieldTerminalPath) Get(source *Condition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Condition_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Condition_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Condition_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Condition_FieldPathSelectorExpression:
			values = append(values, source.Expression)
		case Condition_FieldPathSelectorParameterDeclarations:
			for _, value := range source.GetParameterDeclarations() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
		}
	}
	return
}

func (fp *Condition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Condition))
}

// GetSingle returns value pointed by specific field of from source Condition
func (fp *Condition_FieldTerminalPath) GetSingle(source *Condition) (interface{}, bool) {
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Condition_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Condition_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Condition_FieldPathSelectorExpression:
		return source.GetExpression(), source != nil
	case Condition_FieldPathSelectorParameterDeclarations:
		res := source.GetParameterDeclarations()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Condition))
}

// GetDefault returns a default value of the field type
func (fp *Condition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		return (*Name)(nil)
	case Condition_FieldPathSelectorDisplayName:
		return ""
	case Condition_FieldPathSelectorDescription:
		return ""
	case Condition_FieldPathSelectorExpression:
		return ""
	case Condition_FieldPathSelectorParameterDeclarations:
		return ([]*Condition_ParameterDeclaration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) ClearValue(item *Condition) {
	if item != nil {
		switch fp.selector {
		case Condition_FieldPathSelectorName:
			item.Name = nil
		case Condition_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Condition_FieldPathSelectorDescription:
			item.Description = ""
		case Condition_FieldPathSelectorExpression:
			item.Expression = ""
		case Condition_FieldPathSelectorParameterDeclarations:
			item.ParameterDeclarations = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
		}
	}
}

func (fp *Condition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Condition))
}

// IsLeaf - whether field path is holds simple value
func (fp *Condition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Condition_FieldPathSelectorName ||
		fp.selector == Condition_FieldPathSelectorDisplayName ||
		fp.selector == Condition_FieldPathSelectorDescription ||
		fp.selector == Condition_FieldPathSelectorExpression
}

func (fp *Condition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Condition_FieldTerminalPath) WithIValue(value interface{}) Condition_FieldPathValue {
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(*Name)}
	case Condition_FieldPathSelectorDisplayName:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(string)}
	case Condition_FieldPathSelectorDescription:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(string)}
	case Condition_FieldPathSelectorExpression:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.(string)}
	case Condition_FieldPathSelectorParameterDeclarations:
		return &Condition_FieldTerminalPathValue{Condition_FieldTerminalPath: *fp, value: value.([]*Condition_ParameterDeclaration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Condition_FieldTerminalPath) WithIArrayOfValues(values interface{}) Condition_FieldPathArrayOfValues {
	fpaov := &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp}
	switch fp.selector {
	case Condition_FieldPathSelectorName:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Condition_FieldPathSelectorDisplayName:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]string)}
	case Condition_FieldPathSelectorDescription:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]string)}
	case Condition_FieldPathSelectorExpression:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([]string)}
	case Condition_FieldPathSelectorParameterDeclarations:
		return &Condition_FieldTerminalPathArrayOfValues{Condition_FieldTerminalPath: *fp, values: values.([][]*Condition_ParameterDeclaration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
	return fpaov
}

func (fp *Condition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Condition_FieldTerminalPath) WithIArrayItemValue(value interface{}) Condition_FieldPathArrayItemValue {
	switch fp.selector {
	case Condition_FieldPathSelectorParameterDeclarations:
		return &Condition_FieldTerminalPathArrayItemValue{Condition_FieldTerminalPath: *fp, value: value.(*Condition_ParameterDeclaration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fp.selector))
	}
}

func (fp *Condition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Condition_FieldSubPath struct {
	selector Condition_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Condition_FieldPath = (*Condition_FieldSubPath)(nil)

func (fps *Condition_FieldSubPath) Selector() Condition_FieldPathSelector {
	return fps.selector
}
func (fps *Condition_FieldSubPath) AsParameterDeclarationsSubPath() (ConditionParameterDeclaration_FieldPath, bool) {
	res, ok := fps.subPath.(ConditionParameterDeclaration_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Condition_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Condition_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Condition
func (fps *Condition_FieldSubPath) Get(source *Condition) (values []interface{}) {
	if asParameterDeclarationFieldPath, ok := fps.AsParameterDeclarationsSubPath(); ok {
		for _, item := range source.GetParameterDeclarations() {
			values = append(values, asParameterDeclarationFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fps.selector))
	}
	return
}

func (fps *Condition_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Condition))
}

// GetSingle returns value of selected field from source Condition
func (fps *Condition_FieldSubPath) GetSingle(source *Condition) (interface{}, bool) {
	switch fps.selector {
	case Condition_FieldPathSelectorParameterDeclarations:
		if len(source.GetParameterDeclarations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetParameterDeclarations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fps.selector))
	}
}

func (fps *Condition_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Condition))
}

// GetDefault returns a default value of the field type
func (fps *Condition_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Condition_FieldSubPath) ClearValue(item *Condition) {
	if item != nil {
		switch fps.selector {
		case Condition_FieldPathSelectorParameterDeclarations:
			for _, subItem := range item.ParameterDeclarations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Condition: %d", fps.selector))
		}
	}
}

func (fps *Condition_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Condition))
}

// IsLeaf - whether field path is holds simple value
func (fps *Condition_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Condition_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Condition_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Condition_FieldSubPath) WithIValue(value interface{}) Condition_FieldPathValue {
	return &Condition_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Condition_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Condition_FieldSubPath) WithIArrayOfValues(values interface{}) Condition_FieldPathArrayOfValues {
	return &Condition_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Condition_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Condition_FieldSubPath) WithIArrayItemValue(value interface{}) Condition_FieldPathArrayItemValue {
	return &Condition_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Condition_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Condition_FieldPathValue allows storing values for Condition fields according to their type
type Condition_FieldPathValue interface {
	Condition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Condition)
	CompareWith(*Condition) (cmp int, comparable bool)
}

func ParseCondition_FieldPathValue(pathStr, valueStr string) (Condition_FieldPathValue, error) {
	fp, err := ParseCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path value from %s: %v", valueStr, err)
	}
	return fpv.(Condition_FieldPathValue), nil
}

func MustParseCondition_FieldPathValue(pathStr, valueStr string) Condition_FieldPathValue {
	fpv, err := ParseCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Condition_FieldTerminalPathValue struct {
	Condition_FieldTerminalPath
	value interface{}
}

var _ Condition_FieldPathValue = (*Condition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Condition' as interface{}
func (fpv *Condition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Condition_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsExpressionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Condition_FieldTerminalPathValue) AsParameterDeclarationsValue() ([]*Condition_ParameterDeclaration, bool) {
	res, ok := fpv.value.([]*Condition_ParameterDeclaration)
	return res, ok
}

// SetTo stores value for selected field for object Condition
func (fpv *Condition_FieldTerminalPathValue) SetTo(target **Condition) {
	if *target == nil {
		*target = new(Condition)
	}
	switch fpv.selector {
	case Condition_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Condition_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Condition_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Condition_FieldPathSelectorExpression:
		(*target).Expression = fpv.value.(string)
	case Condition_FieldPathSelectorParameterDeclarations:
		(*target).ParameterDeclarations = fpv.value.([]*Condition_ParameterDeclaration)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpv.selector))
	}
}

func (fpv *Condition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Condition_FieldTerminalPathValue' with the value under path in 'Condition'.
func (fpv *Condition_FieldTerminalPathValue) CompareWith(source *Condition) (int, bool) {
	switch fpv.selector {
	case Condition_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorExpression:
		leftValue := fpv.value.(string)
		rightValue := source.GetExpression()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Condition_FieldPathSelectorParameterDeclarations:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpv.selector))
	}
}

func (fpv *Condition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Condition))
}

type Condition_FieldSubPathValue struct {
	Condition_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Condition_FieldPathValue = (*Condition_FieldSubPathValue)(nil)

func (fpvs *Condition_FieldSubPathValue) AsParameterDeclarationsPathValue() (ConditionParameterDeclaration_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConditionParameterDeclaration_FieldPathValue)
	return res, ok
}

func (fpvs *Condition_FieldSubPathValue) SetTo(target **Condition) {
	if *target == nil {
		*target = new(Condition)
	}
	switch fpvs.Selector() {
	case Condition_FieldPathSelectorParameterDeclarations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpvs.Selector()))
	}
}

func (fpvs *Condition_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Condition_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Condition_FieldSubPathValue) CompareWith(source *Condition) (int, bool) {
	switch fpvs.Selector() {
	case Condition_FieldPathSelectorParameterDeclarations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpvs.Selector()))
	}
}

func (fpvs *Condition_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Condition))
}

// Condition_FieldPathArrayItemValue allows storing single item in Path-specific values for Condition according to their type
// Present only for array (repeated) types.
type Condition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Condition_FieldPath
	ContainsValue(*Condition) bool
}

// ParseCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCondition_FieldPathArrayItemValue(pathStr, valueStr string) (Condition_FieldPathArrayItemValue, error) {
	fp, err := ParseCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Condition_FieldPathArrayItemValue), nil
}

func MustParseCondition_FieldPathArrayItemValue(pathStr, valueStr string) Condition_FieldPathArrayItemValue {
	fpaiv, err := ParseCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Condition_FieldTerminalPathArrayItemValue struct {
	Condition_FieldTerminalPath
	value interface{}
}

var _ Condition_FieldPathArrayItemValue = (*Condition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Condition as interface{}
func (fpaiv *Condition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Condition_FieldTerminalPathArrayItemValue) AsParameterDeclarationsItemValue() (*Condition_ParameterDeclaration, bool) {
	res, ok := fpaiv.value.(*Condition_ParameterDeclaration)
	return res, ok
}

func (fpaiv *Condition_FieldTerminalPathArrayItemValue) GetSingle(source *Condition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Condition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Condition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Condition'
func (fpaiv *Condition_FieldTerminalPathArrayItemValue) ContainsValue(source *Condition) bool {
	slice := fpaiv.Condition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Condition_FieldSubPathArrayItemValue struct {
	Condition_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Condition_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Condition_FieldSubPathArrayItemValue) AsParameterDeclarationsPathItemValue() (ConditionParameterDeclaration_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConditionParameterDeclaration_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Condition'
func (fpaivs *Condition_FieldSubPathArrayItemValue) ContainsValue(source *Condition) bool {
	switch fpaivs.Selector() {
	case Condition_FieldPathSelectorParameterDeclarations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Condition: %d", fpaivs.Selector()))
	}
}

// Condition_FieldPathArrayOfValues allows storing slice of values for Condition fields according to their type
type Condition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Condition_FieldPath
}

func ParseCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (Condition_FieldPathArrayOfValues, error) {
	fp, err := ParseCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Condition_FieldPathArrayOfValues), nil
}

func MustParseCondition_FieldPathArrayOfValues(pathStr, valuesStr string) Condition_FieldPathArrayOfValues {
	fpaov, err := ParseCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Condition_FieldTerminalPathArrayOfValues struct {
	Condition_FieldTerminalPath
	values interface{}
}

var _ Condition_FieldPathArrayOfValues = (*Condition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Condition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Condition_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorExpression:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Condition_FieldPathSelectorParameterDeclarations:
		for _, v := range fpaov.values.([][]*Condition_ParameterDeclaration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsExpressionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Condition_FieldTerminalPathArrayOfValues) AsParameterDeclarationsArrayOfValues() ([][]*Condition_ParameterDeclaration, bool) {
	res, ok := fpaov.values.([][]*Condition_ParameterDeclaration)
	return res, ok
}

type Condition_FieldSubPathArrayOfValues struct {
	Condition_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Condition_FieldPathArrayOfValues = (*Condition_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Condition_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Condition_FieldSubPathArrayOfValues) AsParameterDeclarationsPathArrayOfValues() (ConditionParameterDeclaration_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConditionParameterDeclaration_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConditionParameterDeclaration_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConditionParameterDeclaration_FieldPathSelector
	Get(source *Condition_ParameterDeclaration) []interface{}
	GetSingle(source *Condition_ParameterDeclaration) (interface{}, bool)
	ClearValue(item *Condition_ParameterDeclaration)

	// Those methods build corresponding ConditionParameterDeclaration_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConditionParameterDeclaration_FieldPathValue
	WithIArrayOfValues(values interface{}) ConditionParameterDeclaration_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConditionParameterDeclaration_FieldPathArrayItemValue
}

type ConditionParameterDeclaration_FieldPathSelector int32

const (
	ConditionParameterDeclaration_FieldPathSelectorKey  ConditionParameterDeclaration_FieldPathSelector = 0
	ConditionParameterDeclaration_FieldPathSelectorType ConditionParameterDeclaration_FieldPathSelector = 1
)

func (s ConditionParameterDeclaration_FieldPathSelector) String() string {
	switch s {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return "key"
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return "type"
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", s))
	}
}

func BuildConditionParameterDeclaration_FieldPath(fp gotenobject.RawFieldPath) (ConditionParameterDeclaration_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Condition_ParameterDeclaration")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &ConditionParameterDeclaration_FieldTerminalPath{selector: ConditionParameterDeclaration_FieldPathSelectorKey}, nil
		case "type":
			return &ConditionParameterDeclaration_FieldTerminalPath{selector: ConditionParameterDeclaration_FieldPathSelectorType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Condition_ParameterDeclaration", fp)
}

func ParseConditionParameterDeclaration_FieldPath(rawField string) (ConditionParameterDeclaration_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConditionParameterDeclaration_FieldPath(fp)
}

func MustParseConditionParameterDeclaration_FieldPath(rawField string) ConditionParameterDeclaration_FieldPath {
	fp, err := ParseConditionParameterDeclaration_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConditionParameterDeclaration_FieldTerminalPath struct {
	selector ConditionParameterDeclaration_FieldPathSelector
}

var _ ConditionParameterDeclaration_FieldPath = (*ConditionParameterDeclaration_FieldTerminalPath)(nil)

func (fp *ConditionParameterDeclaration_FieldTerminalPath) Selector() ConditionParameterDeclaration_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConditionParameterDeclaration_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConditionParameterDeclaration_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Condition_ParameterDeclaration
func (fp *ConditionParameterDeclaration_FieldTerminalPath) Get(source *Condition_ParameterDeclaration) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConditionParameterDeclaration_FieldPathSelectorKey:
			values = append(values, source.Key)
		case ConditionParameterDeclaration_FieldPathSelectorType:
			values = append(values, source.Type)
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
		}
	}
	return
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Condition_ParameterDeclaration))
}

// GetSingle returns value pointed by specific field of from source Condition_ParameterDeclaration
func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetSingle(source *Condition_ParameterDeclaration) (interface{}, bool) {
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return source.GetType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Condition_ParameterDeclaration))
}

// GetDefault returns a default value of the field type
func (fp *ConditionParameterDeclaration_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return ""
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return Condition_TYPE_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) ClearValue(item *Condition_ParameterDeclaration) {
	if item != nil {
		switch fp.selector {
		case ConditionParameterDeclaration_FieldPathSelectorKey:
			item.Key = ""
		case ConditionParameterDeclaration_FieldPathSelectorType:
			item.Type = Condition_TYPE_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
		}
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Condition_ParameterDeclaration))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConditionParameterDeclaration_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConditionParameterDeclaration_FieldPathSelectorKey ||
		fp.selector == ConditionParameterDeclaration_FieldPathSelectorType
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithIValue(value interface{}) ConditionParameterDeclaration_FieldPathValue {
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return &ConditionParameterDeclaration_FieldTerminalPathValue{ConditionParameterDeclaration_FieldTerminalPath: *fp, value: value.(string)}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return &ConditionParameterDeclaration_FieldTerminalPathValue{ConditionParameterDeclaration_FieldTerminalPath: *fp, value: value.(Condition_ParameterType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConditionParameterDeclaration_FieldPathArrayOfValues {
	fpaov := &ConditionParameterDeclaration_FieldTerminalPathArrayOfValues{ConditionParameterDeclaration_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		return &ConditionParameterDeclaration_FieldTerminalPathArrayOfValues{ConditionParameterDeclaration_FieldTerminalPath: *fp, values: values.([]string)}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		return &ConditionParameterDeclaration_FieldTerminalPathArrayOfValues{ConditionParameterDeclaration_FieldTerminalPath: *fp, values: values.([]Condition_ParameterType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConditionParameterDeclaration_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fp.selector))
	}
}

func (fp *ConditionParameterDeclaration_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConditionParameterDeclaration_FieldPathValue allows storing values for ParameterDeclaration fields according to their type
type ConditionParameterDeclaration_FieldPathValue interface {
	ConditionParameterDeclaration_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Condition_ParameterDeclaration)
	CompareWith(*Condition_ParameterDeclaration) (cmp int, comparable bool)
}

func ParseConditionParameterDeclaration_FieldPathValue(pathStr, valueStr string) (ConditionParameterDeclaration_FieldPathValue, error) {
	fp, err := ParseConditionParameterDeclaration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ParameterDeclaration field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConditionParameterDeclaration_FieldPathValue), nil
}

func MustParseConditionParameterDeclaration_FieldPathValue(pathStr, valueStr string) ConditionParameterDeclaration_FieldPathValue {
	fpv, err := ParseConditionParameterDeclaration_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConditionParameterDeclaration_FieldTerminalPathValue struct {
	ConditionParameterDeclaration_FieldTerminalPath
	value interface{}
}

var _ ConditionParameterDeclaration_FieldPathValue = (*ConditionParameterDeclaration_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ParameterDeclaration' as interface{}
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) AsTypeValue() (Condition_ParameterType, bool) {
	res, ok := fpv.value.(Condition_ParameterType)
	return res, ok
}

// SetTo stores value for selected field for object ParameterDeclaration
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) SetTo(target **Condition_ParameterDeclaration) {
	if *target == nil {
		*target = new(Condition_ParameterDeclaration)
	}
	switch fpv.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case ConditionParameterDeclaration_FieldPathSelectorType:
		(*target).Type = fpv.value.(Condition_ParameterType)
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fpv.selector))
	}
}

func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Condition_ParameterDeclaration)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionParameterDeclaration_FieldTerminalPathValue' with the value under path in 'Condition_ParameterDeclaration'.
func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) CompareWith(source *Condition_ParameterDeclaration) (int, bool) {
	switch fpv.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		leftValue := fpv.value.(Condition_ParameterType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Condition_ParameterDeclaration: %d", fpv.selector))
	}
}

func (fpv *ConditionParameterDeclaration_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Condition_ParameterDeclaration))
}

// ConditionParameterDeclaration_FieldPathArrayItemValue allows storing single item in Path-specific values for ParameterDeclaration according to their type
// Present only for array (repeated) types.
type ConditionParameterDeclaration_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConditionParameterDeclaration_FieldPath
	ContainsValue(*Condition_ParameterDeclaration) bool
}

// ParseConditionParameterDeclaration_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConditionParameterDeclaration_FieldPathArrayItemValue(pathStr, valueStr string) (ConditionParameterDeclaration_FieldPathArrayItemValue, error) {
	fp, err := ParseConditionParameterDeclaration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ParameterDeclaration field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConditionParameterDeclaration_FieldPathArrayItemValue), nil
}

func MustParseConditionParameterDeclaration_FieldPathArrayItemValue(pathStr, valueStr string) ConditionParameterDeclaration_FieldPathArrayItemValue {
	fpaiv, err := ParseConditionParameterDeclaration_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConditionParameterDeclaration_FieldTerminalPathArrayItemValue struct {
	ConditionParameterDeclaration_FieldTerminalPath
	value interface{}
}

var _ ConditionParameterDeclaration_FieldPathArrayItemValue = (*ConditionParameterDeclaration_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Condition_ParameterDeclaration as interface{}
func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) GetSingle(source *Condition_ParameterDeclaration) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Condition_ParameterDeclaration))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ParameterDeclaration'
func (fpaiv *ConditionParameterDeclaration_FieldTerminalPathArrayItemValue) ContainsValue(source *Condition_ParameterDeclaration) bool {
	slice := fpaiv.ConditionParameterDeclaration_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConditionParameterDeclaration_FieldPathArrayOfValues allows storing slice of values for ParameterDeclaration fields according to their type
type ConditionParameterDeclaration_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConditionParameterDeclaration_FieldPath
}

func ParseConditionParameterDeclaration_FieldPathArrayOfValues(pathStr, valuesStr string) (ConditionParameterDeclaration_FieldPathArrayOfValues, error) {
	fp, err := ParseConditionParameterDeclaration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ParameterDeclaration field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConditionParameterDeclaration_FieldPathArrayOfValues), nil
}

func MustParseConditionParameterDeclaration_FieldPathArrayOfValues(pathStr, valuesStr string) ConditionParameterDeclaration_FieldPathArrayOfValues {
	fpaov, err := ParseConditionParameterDeclaration_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConditionParameterDeclaration_FieldTerminalPathArrayOfValues struct {
	ConditionParameterDeclaration_FieldTerminalPath
	values interface{}
}

var _ ConditionParameterDeclaration_FieldPathArrayOfValues = (*ConditionParameterDeclaration_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConditionParameterDeclaration_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConditionParameterDeclaration_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConditionParameterDeclaration_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Condition_ParameterType) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConditionParameterDeclaration_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConditionParameterDeclaration_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Condition_ParameterType, bool) {
	res, ok := fpaov.values.([]Condition_ParameterType)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConditionBinding_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConditionBinding_FieldPathSelector
	Get(source *ConditionBinding) []interface{}
	GetSingle(source *ConditionBinding) (interface{}, bool)
	ClearValue(item *ConditionBinding)

	// Those methods build corresponding ConditionBinding_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConditionBinding_FieldPathValue
	WithIArrayOfValues(values interface{}) ConditionBinding_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConditionBinding_FieldPathArrayItemValue
}

type ConditionBinding_FieldPathSelector int32

const (
	ConditionBinding_FieldPathSelectorCondition  ConditionBinding_FieldPathSelector = 0
	ConditionBinding_FieldPathSelectorParameters ConditionBinding_FieldPathSelector = 1
)

func (s ConditionBinding_FieldPathSelector) String() string {
	switch s {
	case ConditionBinding_FieldPathSelectorCondition:
		return "condition"
	case ConditionBinding_FieldPathSelectorParameters:
		return "parameters"
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", s))
	}
}

func BuildConditionBinding_FieldPath(fp gotenobject.RawFieldPath) (ConditionBinding_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConditionBinding")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "condition":
			return &ConditionBinding_FieldTerminalPath{selector: ConditionBinding_FieldPathSelectorCondition}, nil
		case "parameters":
			return &ConditionBinding_FieldTerminalPath{selector: ConditionBinding_FieldPathSelectorParameters}, nil
		}
	} else {
		switch fp[0] {
		case "parameters":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ConditionBinding)", fp)
			}
			return &ConditionBinding_FieldPathMap{selector: ConditionBinding_FieldPathSelectorParameters, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConditionBinding", fp)
}

func ParseConditionBinding_FieldPath(rawField string) (ConditionBinding_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConditionBinding_FieldPath(fp)
}

func MustParseConditionBinding_FieldPath(rawField string) ConditionBinding_FieldPath {
	fp, err := ParseConditionBinding_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConditionBinding_FieldTerminalPath struct {
	selector ConditionBinding_FieldPathSelector
}

var _ ConditionBinding_FieldPath = (*ConditionBinding_FieldTerminalPath)(nil)

func (fp *ConditionBinding_FieldTerminalPath) Selector() ConditionBinding_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConditionBinding_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConditionBinding_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConditionBinding
func (fp *ConditionBinding_FieldTerminalPath) Get(source *ConditionBinding) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConditionBinding_FieldPathSelectorCondition:
			if source.Condition != nil {
				values = append(values, source.Condition)
			}
		case ConditionBinding_FieldPathSelectorParameters:
			values = append(values, source.Parameters)
		default:
			panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
		}
	}
	return
}

func (fp *ConditionBinding_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConditionBinding))
}

// GetSingle returns value pointed by specific field of from source ConditionBinding
func (fp *ConditionBinding_FieldTerminalPath) GetSingle(source *ConditionBinding) (interface{}, bool) {
	switch fp.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		res := source.GetCondition()
		return res, res != nil
	case ConditionBinding_FieldPathSelectorParameters:
		res := source.GetParameters()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
	}
}

func (fp *ConditionBinding_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConditionBinding))
}

// GetDefault returns a default value of the field type
func (fp *ConditionBinding_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		return (*Reference)(nil)
	case ConditionBinding_FieldPathSelectorParameters:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
	}
}

func (fp *ConditionBinding_FieldTerminalPath) ClearValue(item *ConditionBinding) {
	if item != nil {
		switch fp.selector {
		case ConditionBinding_FieldPathSelectorCondition:
			item.Condition = nil
		case ConditionBinding_FieldPathSelectorParameters:
			item.Parameters = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
		}
	}
}

func (fp *ConditionBinding_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConditionBinding))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConditionBinding_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConditionBinding_FieldPathSelectorCondition ||
		fp.selector == ConditionBinding_FieldPathSelectorParameters
}

func (fp *ConditionBinding_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConditionBinding_FieldTerminalPath) WithIValue(value interface{}) ConditionBinding_FieldPathValue {
	switch fp.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		return &ConditionBinding_FieldTerminalPathValue{ConditionBinding_FieldTerminalPath: *fp, value: value.(*Reference)}
	case ConditionBinding_FieldPathSelectorParameters:
		return &ConditionBinding_FieldTerminalPathValue{ConditionBinding_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
	}
}

func (fp *ConditionBinding_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConditionBinding_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConditionBinding_FieldPathArrayOfValues {
	fpaov := &ConditionBinding_FieldTerminalPathArrayOfValues{ConditionBinding_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		return &ConditionBinding_FieldTerminalPathArrayOfValues{ConditionBinding_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case ConditionBinding_FieldPathSelectorParameters:
		return &ConditionBinding_FieldTerminalPathArrayOfValues{ConditionBinding_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConditionBinding_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConditionBinding_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConditionBinding_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fp.selector))
	}
}

func (fp *ConditionBinding_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ConditionBinding_FieldPathMap struct {
	key      string
	selector ConditionBinding_FieldPathSelector
}

var _ ConditionBinding_FieldPath = (*ConditionBinding_FieldPathMap)(nil)

func (fpm *ConditionBinding_FieldPathMap) Selector() ConditionBinding_FieldPathSelector {
	return fpm.selector
}

func (fpm *ConditionBinding_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ConditionBinding_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ConditionBinding_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ConditionBinding
func (fpm *ConditionBinding_FieldPathMap) Get(source *ConditionBinding) (values []interface{}) {
	switch fpm.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		if value, ok := source.GetParameters()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
	}
	return
}

func (fpm *ConditionBinding_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ConditionBinding))
}

// GetSingle returns value by selected field map key from source ConditionBinding
func (fpm *ConditionBinding_FieldPathMap) GetSingle(source *ConditionBinding) (interface{}, bool) {
	switch fpm.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		res, ok := source.GetParameters()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
	}
}

func (fpm *ConditionBinding_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ConditionBinding))
}

// GetDefault returns a default value of the field type
func (fpm *ConditionBinding_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
	}
}

func (fpm *ConditionBinding_FieldPathMap) ClearValue(item *ConditionBinding) {
	if item != nil {
		switch fpm.selector {
		case ConditionBinding_FieldPathSelectorParameters:
			delete(item.Parameters, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
		}
	}
}

func (fpm *ConditionBinding_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ConditionBinding))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ConditionBinding_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
	}
}

func (fpm *ConditionBinding_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *ConditionBinding_FieldPathMap) WithIValue(value interface{}) ConditionBinding_FieldPathValue {
	switch fpm.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		return &ConditionBinding_FieldPathMapValue{ConditionBinding_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
	}
}

func (fpm *ConditionBinding_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ConditionBinding_FieldPathMap) WithIArrayOfValues(values interface{}) ConditionBinding_FieldPathArrayOfValues {
	switch fpm.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		return &ConditionBinding_FieldPathMapArrayOfValues{ConditionBinding_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpm.selector))
	}
}

func (fpm *ConditionBinding_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ConditionBinding_FieldPathMap) WithIArrayItemValue(value interface{}) ConditionBinding_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ConditionBinding_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// ConditionBinding_FieldPathValue allows storing values for ConditionBinding fields according to their type
type ConditionBinding_FieldPathValue interface {
	ConditionBinding_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConditionBinding)
	CompareWith(*ConditionBinding) (cmp int, comparable bool)
}

func ParseConditionBinding_FieldPathValue(pathStr, valueStr string) (ConditionBinding_FieldPathValue, error) {
	fp, err := ParseConditionBinding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConditionBinding field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConditionBinding_FieldPathValue), nil
}

func MustParseConditionBinding_FieldPathValue(pathStr, valueStr string) ConditionBinding_FieldPathValue {
	fpv, err := ParseConditionBinding_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConditionBinding_FieldTerminalPathValue struct {
	ConditionBinding_FieldTerminalPath
	value interface{}
}

var _ ConditionBinding_FieldPathValue = (*ConditionBinding_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConditionBinding' as interface{}
func (fpv *ConditionBinding_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConditionBinding_FieldTerminalPathValue) AsConditionValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *ConditionBinding_FieldTerminalPathValue) AsParametersValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object ConditionBinding
func (fpv *ConditionBinding_FieldTerminalPathValue) SetTo(target **ConditionBinding) {
	if *target == nil {
		*target = new(ConditionBinding)
	}
	switch fpv.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		(*target).Condition = fpv.value.(*Reference)
	case ConditionBinding_FieldPathSelectorParameters:
		(*target).Parameters = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpv.selector))
	}
}

func (fpv *ConditionBinding_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConditionBinding)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionBinding_FieldTerminalPathValue' with the value under path in 'ConditionBinding'.
func (fpv *ConditionBinding_FieldTerminalPathValue) CompareWith(source *ConditionBinding) (int, bool) {
	switch fpv.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetCondition()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ConditionBinding_FieldPathSelectorParameters:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpv.selector))
	}
}

func (fpv *ConditionBinding_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConditionBinding))
}

type ConditionBinding_FieldPathMapValue struct {
	ConditionBinding_FieldPathMap
	value interface{}
}

var _ ConditionBinding_FieldPathValue = (*ConditionBinding_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in ConditionBinding as interface{}
func (fpmv *ConditionBinding_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ConditionBinding_FieldPathMapValue) AsParametersElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in ConditionBinding
func (fpmv *ConditionBinding_FieldPathMapValue) SetTo(target **ConditionBinding) {
	if *target == nil {
		*target = new(ConditionBinding)
	}
	switch fpmv.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		if (*target).Parameters == nil {
			(*target).Parameters = make(map[string]string)
		}
		(*target).Parameters[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpmv.selector))
	}
}

func (fpmv *ConditionBinding_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConditionBinding)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConditionBinding_FieldPathMapValue' with the value under path in 'ConditionBinding'.
func (fpmv *ConditionBinding_FieldPathMapValue) CompareWith(source *ConditionBinding) (int, bool) {
	switch fpmv.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		leftValue := fpmv.value.(string)
		rightValue := source.GetParameters()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConditionBinding: %d", fpmv.selector))
	}
}

func (fpmv *ConditionBinding_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ConditionBinding))
}

// ConditionBinding_FieldPathArrayItemValue allows storing single item in Path-specific values for ConditionBinding according to their type
// Present only for array (repeated) types.
type ConditionBinding_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConditionBinding_FieldPath
	ContainsValue(*ConditionBinding) bool
}

// ParseConditionBinding_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConditionBinding_FieldPathArrayItemValue(pathStr, valueStr string) (ConditionBinding_FieldPathArrayItemValue, error) {
	fp, err := ParseConditionBinding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConditionBinding field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConditionBinding_FieldPathArrayItemValue), nil
}

func MustParseConditionBinding_FieldPathArrayItemValue(pathStr, valueStr string) ConditionBinding_FieldPathArrayItemValue {
	fpaiv, err := ParseConditionBinding_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConditionBinding_FieldTerminalPathArrayItemValue struct {
	ConditionBinding_FieldTerminalPath
	value interface{}
}

var _ ConditionBinding_FieldPathArrayItemValue = (*ConditionBinding_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConditionBinding as interface{}
func (fpaiv *ConditionBinding_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConditionBinding_FieldTerminalPathArrayItemValue) GetSingle(source *ConditionBinding) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConditionBinding_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConditionBinding))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConditionBinding'
func (fpaiv *ConditionBinding_FieldTerminalPathArrayItemValue) ContainsValue(source *ConditionBinding) bool {
	slice := fpaiv.ConditionBinding_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConditionBinding_FieldPathArrayOfValues allows storing slice of values for ConditionBinding fields according to their type
type ConditionBinding_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConditionBinding_FieldPath
}

func ParseConditionBinding_FieldPathArrayOfValues(pathStr, valuesStr string) (ConditionBinding_FieldPathArrayOfValues, error) {
	fp, err := ParseConditionBinding_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConditionBinding field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConditionBinding_FieldPathArrayOfValues), nil
}

func MustParseConditionBinding_FieldPathArrayOfValues(pathStr, valuesStr string) ConditionBinding_FieldPathArrayOfValues {
	fpaov, err := ParseConditionBinding_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConditionBinding_FieldTerminalPathArrayOfValues struct {
	ConditionBinding_FieldTerminalPath
	values interface{}
}

var _ ConditionBinding_FieldPathArrayOfValues = (*ConditionBinding_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConditionBinding_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConditionBinding_FieldPathSelectorCondition:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case ConditionBinding_FieldPathSelectorParameters:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConditionBinding_FieldTerminalPathArrayOfValues) AsConditionArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *ConditionBinding_FieldTerminalPathArrayOfValues) AsParametersArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type ConditionBinding_FieldPathMapArrayOfValues struct {
	ConditionBinding_FieldPathMap
	values interface{}
}

var _ ConditionBinding_FieldPathArrayOfValues = (*ConditionBinding_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ConditionBinding_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ConditionBinding_FieldPathSelectorParameters:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ConditionBinding_FieldPathMapArrayOfValues) AsParametersArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}
