// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/permission.proto
// DO NOT EDIT!!!

package permission

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var ()

func (o *Permission) GotenObjectExt() {}

func (o *Permission) MakeFullFieldMask() *Permission_FieldMask {
	return FullPermission_FieldMask()
}

func (o *Permission) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPermission_FieldMask()
}

func (o *Permission) MakeDiffFieldMask(other *Permission) *Permission_FieldMask {
	if o == nil && other == nil {
		return &Permission_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPermission_FieldMask()
	}

	res := &Permission_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Permission_FieldTerminalPath{selector: Permission_FieldPathSelectorName})
	}
	if o.GetTitle() != other.GetTitle() {
		res.Paths = append(res.Paths, &Permission_FieldTerminalPath{selector: Permission_FieldPathSelectorTitle})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &Permission_FieldTerminalPath{selector: Permission_FieldPathSelectorDescription})
	}
	return res
}

func (o *Permission) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Permission))
}

func (o *Permission) Clone() *Permission {
	if o == nil {
		return nil
	}
	result := &Permission{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Title = o.Title
	result.Description = o.Description
	return result
}

func (o *Permission) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Permission) Merge(source *Permission) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Title = source.GetTitle()
	o.Description = source.GetDescription()
}

func (o *Permission) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Permission))
}
