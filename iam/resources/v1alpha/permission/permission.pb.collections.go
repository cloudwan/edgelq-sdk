// Code generated by protoc-gen-goten-resource
// Resource: Permission
// DO NOT EDIT!!!

package permission

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var ()

type PermissionList []*Permission

func (l PermissionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Permission))
}

func (l PermissionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(PermissionList)...)
}

func (l PermissionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PermissionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l PermissionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Permission)
}

func (l PermissionList) Length() int {
	return len(l)
}

type PermissionChangeList []*PermissionChange

func (l PermissionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*PermissionChange))
}

func (l PermissionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(PermissionChangeList)...)
}

func (l PermissionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PermissionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l PermissionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*PermissionChange)
}

func (l PermissionChangeList) Length() int {
	return len(l)
}

type PermissionNameList []*Name

func (l PermissionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l PermissionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(PermissionNameList)...)
}

func (l PermissionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PermissionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PermissionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l PermissionNameList) Length() int {
	return len(l)
}

type PermissionReferenceList []*Reference

func (l PermissionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l PermissionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(PermissionReferenceList)...)
}

func (l PermissionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PermissionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PermissionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l PermissionReferenceList) Length() int {
	return len(l)
}

type PermissionMap map[Name]*Permission

func (m PermissionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m PermissionMap) Set(res gotenresource.Resource) {
	tRes := res.(*Permission)
	m[*tRes.Name] = tRes
}

func (m PermissionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PermissionMap) Length() int {
	return len(m)
}

func (m PermissionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type PermissionChangeMap map[Name]*PermissionChange

func (m PermissionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m PermissionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*PermissionChange)
	m[*tChange.GetPermissionName()] = tChange
}

func (m PermissionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PermissionChangeMap) Length() int {
	return len(m)
}

func (m PermissionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
