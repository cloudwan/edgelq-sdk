// Code generated by protoc-gen-goten-object
// File: edgelq/iam/proto/v1alpha/role.proto
// DO NOT EDIT!!!

package role

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/condition"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/permission"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &condition.Condition{}
	_ = &permission.Permission{}
)

func (o *Role) GotenObjectExt() {}

func (o *Role) MakeFullFieldMask() *Role_FieldMask {
	return FullRole_FieldMask()
}

func (o *Role) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRole_FieldMask()
}

func (o *Role) MakeDiffFieldMask(other *Role) *Role_FieldMask {
	if o == nil && other == nil {
		return &Role_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRole_FieldMask()
	}

	res := &Role_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDisplayName})
	}

	if len(o.GetIncludedPermissions()) == len(other.GetIncludedPermissions()) {
		for i, lValue := range o.GetIncludedPermissions() {
			rValue := other.GetIncludedPermissions()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorIncludedPermissions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorIncludedPermissions})
	}
	{
		subMask := o.GetDefaultConditionBinding().MakeDiffFieldMask(other.GetDefaultConditionBinding())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Role_FieldTerminalPath{selector: Role_FieldPathSelectorDefaultConditionBinding})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Role_FieldSubPath{selector: Role_FieldPathSelectorDefaultConditionBinding, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Role) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Role))
}

func (o *Role) Clone() *Role {
	if o == nil {
		return nil
	}
	result := &Role{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.IncludedPermissions = make([]*permission.Reference, len(o.IncludedPermissions))
	for i, sourceValue := range o.IncludedPermissions {
		if sourceValue == nil {
			result.IncludedPermissions[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.IncludedPermissions[i] = &permission.Reference{}
			if err := result.IncludedPermissions[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.DefaultConditionBinding = o.DefaultConditionBinding.Clone()
	return result
}

func (o *Role) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Role) Merge(source *Role) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	for _, sourceValue := range source.GetIncludedPermissions() {
		exists := false
		for _, currentValue := range o.IncludedPermissions {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *permission.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &permission.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.IncludedPermissions = append(o.IncludedPermissions, newDstElement)
		}
	}

	if source.GetDefaultConditionBinding() != nil {
		if o.DefaultConditionBinding == nil {
			o.DefaultConditionBinding = new(condition.ConditionBinding)
		}
		o.DefaultConditionBinding.Merge(source.GetDefaultConditionBinding())
	}
}

func (o *Role) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Role))
}
