// Code generated by protoc-gen-goten-resource
// Resource: Role
// DO NOT EDIT!!!

package role

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/condition"
	organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/permission"
	project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &condition.Condition{}
	_ = &organization.Organization{}
	_ = &permission.Permission{}
	_ = &project.Project{}
	_ = &timestamp.Timestamp{}
)

type FilterBuilderOrCondition interface {
	_IsRoleFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsRoleFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Role_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Role_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) IncludedPermissions() *filterCndBuilderIncludedPermissions {
	return &filterCndBuilderIncludedPermissions{builder: b.builder}
}

func (b *filterCndBuilder) DefaultConditionBinding() *filterCndBuilderDefaultConditionBinding {
	return &filterCndBuilderDefaultConditionBinding{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderIncludedPermissions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIncludedPermissions) Eq(value []*permission.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIncludedPermissions) Neq(value []*permission.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIncludedPermissions) Gt(value []*permission.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIncludedPermissions) Gte(value []*permission.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIncludedPermissions) Lt(value []*permission.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIncludedPermissions) Lte(value []*permission.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIncludedPermissions) In(values [][]*permission.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().IncludedPermissions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIncludedPermissions) NotIn(values [][]*permission.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().IncludedPermissions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIncludedPermissions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().IncludedPermissions().FieldPath(),
	})
}

func (b *filterCndBuilderIncludedPermissions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().IncludedPermissions().FieldPath(),
	})
}

func (b *filterCndBuilderIncludedPermissions) Contains(value *permission.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewRoleFieldPathBuilder().IncludedPermissions().FieldPath(),
		Value:     NewRoleFieldPathBuilder().IncludedPermissions().WithItemValue(value),
	})
}

func (b *filterCndBuilderIncludedPermissions) ContainsAnyOf(values []*permission.Reference) *FilterBuilder {
	pathSelector := NewRoleFieldPathBuilder().IncludedPermissions()
	itemValues := make([]Role_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewRoleFieldPathBuilder().IncludedPermissions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIncludedPermissions) ContainsAll(values []*permission.Reference) *FilterBuilder {
	pathSelector := NewRoleFieldPathBuilder().IncludedPermissions()
	itemValues := make([]Role_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewRoleFieldPathBuilder().IncludedPermissions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIncludedPermissions) compare(op gotenfilter.CompareOperator, value []*permission.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().IncludedPermissions().WithValue(value),
	})
}

type filterCndBuilderDefaultConditionBinding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDefaultConditionBinding) Eq(value *condition.ConditionBinding) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDefaultConditionBinding) Neq(value *condition.ConditionBinding) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDefaultConditionBinding) Gt(value *condition.ConditionBinding) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDefaultConditionBinding) Gte(value *condition.ConditionBinding) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDefaultConditionBinding) Lt(value *condition.ConditionBinding) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDefaultConditionBinding) Lte(value *condition.ConditionBinding) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDefaultConditionBinding) In(values []*condition.ConditionBinding) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDefaultConditionBinding) NotIn(values []*condition.ConditionBinding) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDefaultConditionBinding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().FieldPath(),
	})
}

func (b *filterCndBuilderDefaultConditionBinding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().FieldPath(),
	})
}

func (b *filterCndBuilderDefaultConditionBinding) compare(op gotenfilter.CompareOperator, value *condition.ConditionBinding) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().DefaultConditionBinding().WithValue(value),
	})
}

func (b *filterCndBuilderDefaultConditionBinding) Condition() *filterCndBuilderDefaultConditionBindingCondition {
	return &filterCndBuilderDefaultConditionBindingCondition{builder: b.builder}
}

func (b *filterCndBuilderDefaultConditionBinding) Parameters() *filterCndBuilderDefaultConditionBindingParameters {
	return &filterCndBuilderDefaultConditionBindingParameters{builder: b.builder}
}

type filterCndBuilderDefaultConditionBindingCondition struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDefaultConditionBindingCondition) Eq(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDefaultConditionBindingCondition) Neq(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDefaultConditionBindingCondition) Gt(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDefaultConditionBindingCondition) Gte(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDefaultConditionBindingCondition) Lt(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDefaultConditionBindingCondition) Lte(value *condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDefaultConditionBindingCondition) In(values []*condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDefaultConditionBindingCondition) NotIn(values []*condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDefaultConditionBindingCondition) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderDefaultConditionBindingCondition) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderDefaultConditionBindingCondition) compare(op gotenfilter.CompareOperator, value *condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().DefaultConditionBinding().Condition().WithValue(value),
	})
}

type filterCndBuilderDefaultConditionBindingParameters struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDefaultConditionBindingParameters) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDefaultConditionBindingParameters) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDefaultConditionBindingParameters) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDefaultConditionBindingParameters) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDefaultConditionBindingParameters) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDefaultConditionBindingParameters) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDefaultConditionBindingParameters) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDefaultConditionBindingParameters) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDefaultConditionBindingParameters) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderDefaultConditionBindingParameters) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderDefaultConditionBindingParameters) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithValue(value),
	})
}

func (b *filterCndBuilderDefaultConditionBindingParameters) WithKey(key string) *mapFilterCndBuilderDefaultConditionBindingParameters {
	return &mapFilterCndBuilderDefaultConditionBindingParameters{builder: b.builder, key: key}
}

type mapFilterCndBuilderDefaultConditionBindingParameters struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Role_FieldPathArrayOfValues: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderDefaultConditionBindingParameters) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:            op,
		Role_FieldPathValue: NewRoleFieldPathBuilder().DefaultConditionBinding().Parameters().WithKey(b.key).WithValue(value),
	})
}
