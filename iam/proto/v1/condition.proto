syntax = "proto3";

package ntt.iam.v1;

import "google/api/resource.proto";
import "google/protobuf/struct.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition;condition";
option java_multiple_files = true;
option java_outer_classname = "ConditionProto";
option java_package = "com.ntt.iam.pb.v1";

// Condition Resource represents executable condition template in Google CEL
// language, as specified in
// https://github.com/google/cel-spec/blob/v0.4.0/doc/intro.md. It may be used
// for more advanced cases compared to the resource/request conditions available
// in Role grant definitions.
message Condition {
  option (google.api.resource) = { type:"iam.edgelq.com/Condition" pattern:"conditions/{condition}" pattern:"projects/{project}/conditions/{condition}" pattern:"organizations/{organization}/conditions/{condition}" pattern:"services/{service}/conditions/{condition}"  };

  // Name of Condition
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 6;

  // Display Name
  string display_name = 2;

  // Description
  string description = 3;

  // Condition expression in [Google
  // CEL](https://github.com/google/cel-spec/blob/v0.4.0/doc/intro.md), syntax,
  // e.g. `resource.name == "projects/xyz/instances/abc"`
  //
  // Accessible parameters:
  // | variable | type | description | examples |
  // |-|-|-|-|
  // | `resource.body` | `string` | Resource type | `"iam.edgelq.com/Condition"`
  // | | `request.action` | `string` | Action verb | `"create"`, `"batchGet"` |
  // | `request.body` | `dyn` | Request body (in native format). |
  // request.body.page_size | | `parameters` | `map(string, dyn)` | Bound
  // parameters. | `parameters.minSeverity` | | `attest.policy` | `string` |
  // Name of attestation policy attested with by the atestee; empty string if
  // none. | `""`, `"projects/myProj/AttestationPolicies/myPol"` |
  //
  // Extension:
  //
  // Some
  //
  // Filter.`satisfies(other)`
  //
  // Access is determined by the return value. Return `true` to grant access or
  // `false` to deny. Any execution error results in access denied.
  string expression = 4;

  // Typed parameters declarations. When binding a Condition passed parameters
  // must correspond to declarations.
  repeated ParameterDeclaration parameter_declarations = 5;

  // Parameter Declarations used
  message ParameterDeclaration {
    // Parameter Key - must be unique within condition. Defined parameter
    // variables are accessible in condition expression via `parameters.<key>`,
    // e.g.`parameters.projectId`
    string key = 1;

    // Parameter value type
    ParameterType type = 2;
  }

  // Parameter Type.
  enum ParameterType {
    TYPE_UNSPECIFIED = 0;

    STRING = 1;

    INT64 = 2;

    DOUBLE = 3;

    BOOL = 4;

    STRING_ARRAY = 5;

    INT64_ARRAY = 6;

    DOUBLE_ARRAY = 7;

    BOOL_ARRAY = 8;

    OBJECT = 9;
  }
}

// ExecutableCondition represents instantiation of condition with params,
// in other words: Executable condition, that is used in Role bindings.
message ExecutableCondition {
  // Reference to Condition which may also be parameterized
  string condition = 1;

  // Parameters in string form. Parameters must match
  // [declarations][ntt.iam.v1.Condition.parameter_declarations]
  google.protobuf.Struct params = 3;

  reserved 2;
}
