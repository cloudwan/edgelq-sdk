syntax = "proto3";

package ntt.iam.v1;

import "google/api/resource.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account;service_account";
option java_multiple_files = true;
option java_outer_classname = "ServiceAccountProto";
option java_package = "com.ntt.iam.pb.v1";

// ServiceAccount Resource
message ServiceAccount {
  option (google.api.resource) = {
    type : "iam.edgelq.com/ServiceAccount"
    pattern : "projects/{project}/regions/{region}/serviceAccounts/"
              "{service_account}"
  };

  // Name of ServiceAccount
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [a-z][a-z0-9\-_]{0,55}[a-z0-9]
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 3;

  // Display Name
  string display_name = 2;

  // Optional. Description of the account
  string description = 5;

  // Email
  string email = 4;

  // Agent kind and purpose. Cannot be changed.
  Kind kind = 6;

  // Kind indicates purpose of the service account.
  enum Kind {
    // Any purpose
    UNSPECIFIED = 0;

    // Agent indicates that ServiceAccount is associated with some single
    // specific resource, like devices.edgelq.com/Device. Agent Service Accounts
    // are automatically sharded and should ideally use dedicated server
    // instances holding their shard. Agent type accounts are allowed to have
    // only RoleBindings in their projects. They cannot have domain role
    // bindings. They can still benefit from AllUsers/AllAuthenticatedUsers role
    // bindings though.
    AGENT = 1;
  }
}
