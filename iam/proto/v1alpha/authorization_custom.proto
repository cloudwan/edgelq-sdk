syntax = "proto3";

package ntt.iam.v1alpha;

import "edgelq-sdk/iam/proto/v1alpha/condition.proto";

import "edgelq-sdk/iam/proto/v1alpha/permission.proto";

import "edgelq-sdk/iam/proto/v1alpha/permission_change.proto";

import "google/api/resource.proto";

option java_package = "com.ntt.iam.pb.v1alpha";

option java_outer_classname = "AuthorizationCustomProto";

option java_multiple_files = false;

option go_package = "github.com/cloudwan/edgelq-sdk/iam/client/v1alpha/authorization;authorization_client";

// Check contains
message Check {
  // Object resource name, e.g. projects/<project_id>/devices/<device_id>
  string object = 1;

  // Array of permissions to be verified
  repeated string permissions = 2
      [ (google.api.resource_reference) = {type : "Permission"} ];
}

// ConditionalGrant represents grant on repeated list of permissions if any of
// conditions is met.
message ConditionalGrant {
  repeated string permissions = 1
      [ (google.api.resource_reference) = {type : "Permission"} ];

  repeated ConditionBinding condition_bindings = 2;
}

message CheckResult {
  // Object resource name, e.g. projects/<project_id>/devices/<device_id>
  string object = 1;

  // Granted Permissions
  repeated string granted_permissions = 2
      [ (google.api.resource_reference) = {type : "Permission"} ];

  repeated ConditionalGrant conditionally_granted_permissions = 3;
}

// Request message for method
// [CheckPermissions][ntt.iam.v1alpha.CheckPermissions]
message CheckPermissionsRequest {
  // Acting principal, e.g. user or service account
  // Format of the string is one of:
  // - "allUsers" (anyone)
  // - "allAuthenticatedUsers" (anyone logged in)
  // - "user:admin.super@example.com"
  // - "serviceAccount:device_agent@watchdog.serviceaccounts.iam.edgelq.com"
  // - "group:nice.group@example.com"
  // - "domain:example.com" (anyone with exact email domain)
  string member = 1;

  // Checks
  repeated Check checks = 2;

  // If true, server will skip checking permissions in cache
  bool skip_cache = 3;
}

// Response message for method
// [CheckPermissions][ntt.iam.v1alpha.CheckPermissions]
message CheckPermissionsResponse { repeated CheckResult check_results = 1; }

// Request message for method
// [CheckMyPermissions][ntt.iam.v1alpha.CheckMyPermissions]
message CheckMyPermissionsRequest {
  // Checks
  repeated Check checks = 2;

  // If true, server will skip checking permissions in cache
  bool skip_cache = 3;

  reserved 1;
}

// Response message for method
// [CheckMyPermissions][ntt.iam.v1alpha.CheckMyPermissions]
message CheckMyPermissionsResponse { repeated CheckResult check_results = 1; }
