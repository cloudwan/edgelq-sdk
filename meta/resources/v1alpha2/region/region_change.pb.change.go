// Code generated by protoc-gen-goten-resource
// Resource change: RegionChange
// DO NOT EDIT!!!

package region

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
)

func (c *RegionChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*RegionChange_Added_)
	return ok
}

func (c *RegionChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*RegionChange_Modified_)
	return ok
}

func (c *RegionChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*RegionChange_Current_)
	return ok
}

func (c *RegionChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*RegionChange_Removed_)
	return ok
}

func (c *RegionChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *RegionChange_Added_:
		return cType.Added.ViewIndex
	case *RegionChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *RegionChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *RegionChange_Removed_:
		return cType.Removed.ViewIndex
	case *RegionChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *RegionChange) GetRegion() *Region {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *RegionChange_Added_:
		return cType.Added.Region
	case *RegionChange_Modified_:
		return cType.Modified.Region
	case *RegionChange_Current_:
		return cType.Current.Region
	case *RegionChange_Removed_:
		return nil
	}
	return nil
}

func (c *RegionChange) GetRawResource() gotenresource.Resource {
	return c.GetRegion()
}

func (c *RegionChange) GetRegionName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *RegionChange_Added_:
		return cType.Added.Region.GetName()
	case *RegionChange_Modified_:
		return cType.Modified.Name
	case *RegionChange_Current_:
		return cType.Current.Region.GetName()
	case *RegionChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *RegionChange) GetRawName() gotenresource.Name {
	return c.GetRegionName()
}

func (c *RegionChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &RegionChange_Added_{
		Added: &RegionChange_Added{
			Region:    snapshot.(*Region),
			ViewIndex: int32(idx),
		},
	}
}

func (c *RegionChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &RegionChange_Modified_{
		Modified: &RegionChange_Modified{
			Name:              name.(*Name),
			Region:            snapshot.(*Region),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *RegionChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &RegionChange_Current_{
		Current: &RegionChange_Current{
			Region: snapshot.(*Region),
		},
	}
}

func (c *RegionChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &RegionChange_Removed_{
		Removed: &RegionChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
