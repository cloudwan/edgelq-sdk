// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/region.proto
// DO NOT EDIT!!!

package region

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
)

func (o *Region) GotenObjectExt() {}

func (o *Region) MakeFullFieldMask() *Region_FieldMask {
	return FullRegion_FieldMask()
}

func (o *Region) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegion_FieldMask()
}

func (o *Region) MakeDiffFieldMask(other *Region) *Region_FieldMask {
	if o == nil && other == nil {
		return &Region_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegion_FieldMask()
	}

	res := &Region_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorName})
	}
	if o.GetTitle() != other.GetTitle() {
		res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorTitle})
	}
	if o.GetDomain() != other.GetDomain() {
		res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorDomain})
	}
	{
		subMask := o.GetLocation().MakeDiffFieldMask(other.GetLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Region_FieldSubPath{selector: Region_FieldPathSelectorLocation, subPath: subpath})
			}
		}
	}
	if o.GetIsDefault() != other.GetIsDefault() {
		res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorIsDefault})
	}

	if len(o.GetConnectivityScores()) == len(other.GetConnectivityScores()) {
		for i, lValue := range o.GetConnectivityScores() {
			rValue := other.GetConnectivityScores()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorConnectivityScores})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorConnectivityScores})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Region_FieldSubPath{selector: Region_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Region) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Region))
}

func (o *Region) Clone() *Region {
	if o == nil {
		return nil
	}
	result := &Region{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Title = o.Title
	result.Domain = o.Domain
	result.Location = o.Location.Clone()
	result.IsDefault = o.IsDefault
	result.ConnectivityScores = make([]*Region_RegionConnectivityPreference, len(o.ConnectivityScores))
	for i, sourceValue := range o.ConnectivityScores {
		result.ConnectivityScores[i] = sourceValue.Clone()
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Region) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Region) Merge(source *Region) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Title = source.GetTitle()
	o.Domain = source.GetDomain()
	if source.GetLocation() != nil {
		if o.Location == nil {
			o.Location = new(Region_RegionLocation)
		}
		o.Location.Merge(source.GetLocation())
	}
	o.IsDefault = source.GetIsDefault()
	for _, sourceValue := range source.GetConnectivityScores() {
		exists := false
		for _, currentValue := range o.ConnectivityScores {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Region_RegionConnectivityPreference
			if sourceValue != nil {
				newDstElement = new(Region_RegionConnectivityPreference)
				newDstElement.Merge(sourceValue)
			}
			o.ConnectivityScores = append(o.ConnectivityScores, newDstElement)
		}
	}

	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Region) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Region))
}

func (o *Region_RegionLocation) GotenObjectExt() {}

func (o *Region_RegionLocation) MakeFullFieldMask() *Region_RegionLocation_FieldMask {
	return FullRegion_RegionLocation_FieldMask()
}

func (o *Region_RegionLocation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegion_RegionLocation_FieldMask()
}

func (o *Region_RegionLocation) MakeDiffFieldMask(other *Region_RegionLocation) *Region_RegionLocation_FieldMask {
	if o == nil && other == nil {
		return &Region_RegionLocation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegion_RegionLocation_FieldMask()
	}

	res := &Region_RegionLocation_FieldMask{}
	if o.GetContinent() != other.GetContinent() {
		res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorContinent})
	}
	if o.GetCountry() != other.GetCountry() {
		res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCountry})
	}
	if o.GetAgglomeration() != other.GetAgglomeration() {
		res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorAgglomeration})
	}
	if o.GetCity() != other.GetCity() {
		res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCity})
	}
	if o.GetCloud() != other.GetCloud() {
		res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCloud})
	}
	return res
}

func (o *Region_RegionLocation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Region_RegionLocation))
}

func (o *Region_RegionLocation) Clone() *Region_RegionLocation {
	if o == nil {
		return nil
	}
	result := &Region_RegionLocation{}
	result.Continent = o.Continent
	result.Country = o.Country
	result.Agglomeration = o.Agglomeration
	result.City = o.City
	result.Cloud = o.Cloud
	return result
}

func (o *Region_RegionLocation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Region_RegionLocation) Merge(source *Region_RegionLocation) {
	o.Continent = source.GetContinent()
	o.Country = source.GetCountry()
	o.Agglomeration = source.GetAgglomeration()
	o.City = source.GetCity()
	o.Cloud = source.GetCloud()
}

func (o *Region_RegionLocation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Region_RegionLocation))
}

func (o *Region_RegionConnectivityPreference) GotenObjectExt() {}

func (o *Region_RegionConnectivityPreference) MakeFullFieldMask() *Region_RegionConnectivityPreference_FieldMask {
	return FullRegion_RegionConnectivityPreference_FieldMask()
}

func (o *Region_RegionConnectivityPreference) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegion_RegionConnectivityPreference_FieldMask()
}

func (o *Region_RegionConnectivityPreference) MakeDiffFieldMask(other *Region_RegionConnectivityPreference) *Region_RegionConnectivityPreference_FieldMask {
	if o == nil && other == nil {
		return &Region_RegionConnectivityPreference_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegion_RegionConnectivityPreference_FieldMask()
	}

	res := &Region_RegionConnectivityPreference_FieldMask{}
	if o.GetDest().String() != other.GetDest().String() {
		res.Paths = append(res.Paths, &RegionRegionConnectivityPreference_FieldTerminalPath{selector: RegionRegionConnectivityPreference_FieldPathSelectorDest})
	}
	if o.GetScore() != other.GetScore() {
		res.Paths = append(res.Paths, &RegionRegionConnectivityPreference_FieldTerminalPath{selector: RegionRegionConnectivityPreference_FieldPathSelectorScore})
	}
	return res
}

func (o *Region_RegionConnectivityPreference) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Region_RegionConnectivityPreference))
}

func (o *Region_RegionConnectivityPreference) Clone() *Region_RegionConnectivityPreference {
	if o == nil {
		return nil
	}
	result := &Region_RegionConnectivityPreference{}
	if o.Dest == nil {
		result.Dest = nil
	} else if data, err := o.Dest.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Dest = &Reference{}
		if err := result.Dest.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Score = o.Score
	return result
}

func (o *Region_RegionConnectivityPreference) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Region_RegionConnectivityPreference) Merge(source *Region_RegionConnectivityPreference) {
	if source.GetDest() != nil {
		if data, err := source.GetDest().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Dest = &Reference{}
			if err := o.Dest.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Dest = nil
	}
	o.Score = source.GetScore()
}

func (o *Region_RegionConnectivityPreference) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Region_RegionConnectivityPreference))
}
