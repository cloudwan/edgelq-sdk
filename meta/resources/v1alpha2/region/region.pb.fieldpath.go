// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/region.proto
// DO NOT EDIT!!!

package region

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Region_FieldPath interface {
	gotenobject.FieldPath
	Selector() Region_FieldPathSelector
	Get(source *Region) []interface{}
	GetSingle(source *Region) (interface{}, bool)
	ClearValue(item *Region)

	// Those methods build corresponding Region_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Region_FieldPathValue
	WithIArrayOfValues(values interface{}) Region_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Region_FieldPathArrayItemValue
}

type Region_FieldPathSelector int32

const (
	Region_FieldPathSelectorName               Region_FieldPathSelector = 0
	Region_FieldPathSelectorTitle              Region_FieldPathSelector = 1
	Region_FieldPathSelectorDomain             Region_FieldPathSelector = 2
	Region_FieldPathSelectorLocation           Region_FieldPathSelector = 3
	Region_FieldPathSelectorIsDefault          Region_FieldPathSelector = 4
	Region_FieldPathSelectorConnectivityScores Region_FieldPathSelector = 5
	Region_FieldPathSelectorMetadata           Region_FieldPathSelector = 6
)

func (s Region_FieldPathSelector) String() string {
	switch s {
	case Region_FieldPathSelectorName:
		return "name"
	case Region_FieldPathSelectorTitle:
		return "title"
	case Region_FieldPathSelectorDomain:
		return "domain"
	case Region_FieldPathSelectorLocation:
		return "location"
	case Region_FieldPathSelectorIsDefault:
		return "is_default"
	case Region_FieldPathSelectorConnectivityScores:
		return "connectivity_scores"
	case Region_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", s))
	}
}

func BuildRegion_FieldPath(fp gotenobject.RawFieldPath) (Region_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Region")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorName}, nil
		case "title":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorTitle}, nil
		case "domain":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorDomain}, nil
		case "location":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorLocation}, nil
		case "is_default", "isDefault", "is-default":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorIsDefault}, nil
		case "connectivity_scores", "connectivityScores", "connectivity-scores":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorConnectivityScores}, nil
		case "metadata":
			return &Region_FieldTerminalPath{selector: Region_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := BuildRegionRegionLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Region_FieldSubPath{selector: Region_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "connectivity_scores", "connectivityScores", "connectivity-scores":
			if subpath, err := BuildRegionRegionConnectivityPreference_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Region_FieldSubPath{selector: Region_FieldPathSelectorConnectivityScores, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Region_FieldSubPath{selector: Region_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Region", fp)
}

func ParseRegion_FieldPath(rawField string) (Region_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRegion_FieldPath(fp)
}

func MustParseRegion_FieldPath(rawField string) Region_FieldPath {
	fp, err := ParseRegion_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Region_FieldTerminalPath struct {
	selector Region_FieldPathSelector
}

var _ Region_FieldPath = (*Region_FieldTerminalPath)(nil)

func (fp *Region_FieldTerminalPath) Selector() Region_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Region_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Region_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Region
func (fp *Region_FieldTerminalPath) Get(source *Region) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Region_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Region_FieldPathSelectorTitle:
			values = append(values, source.Title)
		case Region_FieldPathSelectorDomain:
			values = append(values, source.Domain)
		case Region_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case Region_FieldPathSelectorIsDefault:
			values = append(values, source.IsDefault)
		case Region_FieldPathSelectorConnectivityScores:
			for _, value := range source.GetConnectivityScores() {
				values = append(values, value)
			}
		case Region_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
		}
	}
	return
}

func (fp *Region_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Region))
}

// GetSingle returns value pointed by specific field of from source Region
func (fp *Region_FieldTerminalPath) GetSingle(source *Region) (interface{}, bool) {
	switch fp.selector {
	case Region_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Region_FieldPathSelectorTitle:
		return source.GetTitle(), source != nil
	case Region_FieldPathSelectorDomain:
		return source.GetDomain(), source != nil
	case Region_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case Region_FieldPathSelectorIsDefault:
		return source.GetIsDefault(), source != nil
	case Region_FieldPathSelectorConnectivityScores:
		res := source.GetConnectivityScores()
		return res, res != nil
	case Region_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
	}
}

func (fp *Region_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Region))
}

// GetDefault returns a default value of the field type
func (fp *Region_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Region_FieldPathSelectorName:
		return (*Name)(nil)
	case Region_FieldPathSelectorTitle:
		return ""
	case Region_FieldPathSelectorDomain:
		return ""
	case Region_FieldPathSelectorLocation:
		return (*Region_RegionLocation)(nil)
	case Region_FieldPathSelectorIsDefault:
		return false
	case Region_FieldPathSelectorConnectivityScores:
		return ([]*Region_RegionConnectivityPreference)(nil)
	case Region_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
	}
}

func (fp *Region_FieldTerminalPath) ClearValue(item *Region) {
	if item != nil {
		switch fp.selector {
		case Region_FieldPathSelectorName:
			item.Name = nil
		case Region_FieldPathSelectorTitle:
			item.Title = ""
		case Region_FieldPathSelectorDomain:
			item.Domain = ""
		case Region_FieldPathSelectorLocation:
			item.Location = nil
		case Region_FieldPathSelectorIsDefault:
			item.IsDefault = false
		case Region_FieldPathSelectorConnectivityScores:
			item.ConnectivityScores = nil
		case Region_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
		}
	}
}

func (fp *Region_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Region))
}

// IsLeaf - whether field path is holds simple value
func (fp *Region_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Region_FieldPathSelectorName ||
		fp.selector == Region_FieldPathSelectorTitle ||
		fp.selector == Region_FieldPathSelectorDomain ||
		fp.selector == Region_FieldPathSelectorIsDefault
}

func (fp *Region_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Region_FieldTerminalPath) WithIValue(value interface{}) Region_FieldPathValue {
	switch fp.selector {
	case Region_FieldPathSelectorName:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.(*Name)}
	case Region_FieldPathSelectorTitle:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.(string)}
	case Region_FieldPathSelectorDomain:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.(string)}
	case Region_FieldPathSelectorLocation:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.(*Region_RegionLocation)}
	case Region_FieldPathSelectorIsDefault:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.(bool)}
	case Region_FieldPathSelectorConnectivityScores:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.([]*Region_RegionConnectivityPreference)}
	case Region_FieldPathSelectorMetadata:
		return &Region_FieldTerminalPathValue{Region_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
	}
}

func (fp *Region_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Region_FieldTerminalPath) WithIArrayOfValues(values interface{}) Region_FieldPathArrayOfValues {
	fpaov := &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp}
	switch fp.selector {
	case Region_FieldPathSelectorName:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Region_FieldPathSelectorTitle:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([]string)}
	case Region_FieldPathSelectorDomain:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([]string)}
	case Region_FieldPathSelectorLocation:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([]*Region_RegionLocation)}
	case Region_FieldPathSelectorIsDefault:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([]bool)}
	case Region_FieldPathSelectorConnectivityScores:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([][]*Region_RegionConnectivityPreference)}
	case Region_FieldPathSelectorMetadata:
		return &Region_FieldTerminalPathArrayOfValues{Region_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
	}
	return fpaov
}

func (fp *Region_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Region_FieldTerminalPath) WithIArrayItemValue(value interface{}) Region_FieldPathArrayItemValue {
	switch fp.selector {
	case Region_FieldPathSelectorConnectivityScores:
		return &Region_FieldTerminalPathArrayItemValue{Region_FieldTerminalPath: *fp, value: value.(*Region_RegionConnectivityPreference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fp.selector))
	}
}

func (fp *Region_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Region_FieldSubPath struct {
	selector Region_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Region_FieldPath = (*Region_FieldSubPath)(nil)

func (fps *Region_FieldSubPath) Selector() Region_FieldPathSelector {
	return fps.selector
}
func (fps *Region_FieldSubPath) AsLocationSubPath() (RegionRegionLocation_FieldPath, bool) {
	res, ok := fps.subPath.(RegionRegionLocation_FieldPath)
	return res, ok
}
func (fps *Region_FieldSubPath) AsConnectivityScoresSubPath() (RegionRegionConnectivityPreference_FieldPath, bool) {
	res, ok := fps.subPath.(RegionRegionConnectivityPreference_FieldPath)
	return res, ok
}
func (fps *Region_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Region_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Region_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Region
func (fps *Region_FieldSubPath) Get(source *Region) (values []interface{}) {
	switch fps.selector {
	case Region_FieldPathSelectorLocation:
		values = append(values, fps.subPath.GetRaw(source.GetLocation())...)
	case Region_FieldPathSelectorConnectivityScores:
		for _, item := range source.GetConnectivityScores() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case Region_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fps.selector))
	}
	return
}

func (fps *Region_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Region))
}

// GetSingle returns value of selected field from source Region
func (fps *Region_FieldSubPath) GetSingle(source *Region) (interface{}, bool) {
	switch fps.selector {
	case Region_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case Region_FieldPathSelectorConnectivityScores:
		if len(source.GetConnectivityScores()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConnectivityScores()[0])
	case Region_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fps.selector))
	}
}

func (fps *Region_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Region))
}

// GetDefault returns a default value of the field type
func (fps *Region_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Region_FieldSubPath) ClearValue(item *Region) {
	if item != nil {
		switch fps.selector {
		case Region_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case Region_FieldPathSelectorConnectivityScores:
			for _, subItem := range item.ConnectivityScores {
				fps.subPath.ClearValueRaw(subItem)
			}
		case Region_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Region: %d", fps.selector))
		}
	}
}

func (fps *Region_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Region))
}

// IsLeaf - whether field path is holds simple value
func (fps *Region_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Region_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Region_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Region_FieldSubPath) WithIValue(value interface{}) Region_FieldPathValue {
	return &Region_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Region_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Region_FieldSubPath) WithIArrayOfValues(values interface{}) Region_FieldPathArrayOfValues {
	return &Region_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Region_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Region_FieldSubPath) WithIArrayItemValue(value interface{}) Region_FieldPathArrayItemValue {
	return &Region_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Region_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Region_FieldPathValue allows storing values for Region fields according to their type
type Region_FieldPathValue interface {
	Region_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Region)
	CompareWith(*Region) (cmp int, comparable bool)
}

func ParseRegion_FieldPathValue(pathStr, valueStr string) (Region_FieldPathValue, error) {
	fp, err := ParseRegion_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Region field path value from %s: %v", valueStr, err)
	}
	return fpv.(Region_FieldPathValue), nil
}

func MustParseRegion_FieldPathValue(pathStr, valueStr string) Region_FieldPathValue {
	fpv, err := ParseRegion_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Region_FieldTerminalPathValue struct {
	Region_FieldTerminalPath
	value interface{}
}

var _ Region_FieldPathValue = (*Region_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Region' as interface{}
func (fpv *Region_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Region_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Region_FieldTerminalPathValue) AsTitleValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Region_FieldTerminalPathValue) AsDomainValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Region_FieldTerminalPathValue) AsLocationValue() (*Region_RegionLocation, bool) {
	res, ok := fpv.value.(*Region_RegionLocation)
	return res, ok
}
func (fpv *Region_FieldTerminalPathValue) AsIsDefaultValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *Region_FieldTerminalPathValue) AsConnectivityScoresValue() ([]*Region_RegionConnectivityPreference, bool) {
	res, ok := fpv.value.([]*Region_RegionConnectivityPreference)
	return res, ok
}
func (fpv *Region_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Region
func (fpv *Region_FieldTerminalPathValue) SetTo(target **Region) {
	if *target == nil {
		*target = new(Region)
	}
	switch fpv.selector {
	case Region_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Region_FieldPathSelectorTitle:
		(*target).Title = fpv.value.(string)
	case Region_FieldPathSelectorDomain:
		(*target).Domain = fpv.value.(string)
	case Region_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*Region_RegionLocation)
	case Region_FieldPathSelectorIsDefault:
		(*target).IsDefault = fpv.value.(bool)
	case Region_FieldPathSelectorConnectivityScores:
		(*target).ConnectivityScores = fpv.value.([]*Region_RegionConnectivityPreference)
	case Region_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fpv.selector))
	}
}

func (fpv *Region_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Region)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Region_FieldTerminalPathValue' with the value under path in 'Region'.
func (fpv *Region_FieldTerminalPathValue) CompareWith(source *Region) (int, bool) {
	switch fpv.selector {
	case Region_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Region_FieldPathSelectorTitle:
		leftValue := fpv.value.(string)
		rightValue := source.GetTitle()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Region_FieldPathSelectorDomain:
		leftValue := fpv.value.(string)
		rightValue := source.GetDomain()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Region_FieldPathSelectorLocation:
		return 0, false
	case Region_FieldPathSelectorIsDefault:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsDefault()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Region_FieldPathSelectorConnectivityScores:
		return 0, false
	case Region_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fpv.selector))
	}
}

func (fpv *Region_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Region))
}

type Region_FieldSubPathValue struct {
	Region_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Region_FieldPathValue = (*Region_FieldSubPathValue)(nil)

func (fpvs *Region_FieldSubPathValue) AsLocationPathValue() (RegionRegionLocation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RegionRegionLocation_FieldPathValue)
	return res, ok
}
func (fpvs *Region_FieldSubPathValue) AsConnectivityScoresPathValue() (RegionRegionConnectivityPreference_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RegionRegionConnectivityPreference_FieldPathValue)
	return res, ok
}
func (fpvs *Region_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Region_FieldSubPathValue) SetTo(target **Region) {
	if *target == nil {
		*target = new(Region)
	}
	switch fpvs.Selector() {
	case Region_FieldPathSelectorLocation:
		fpvs.subPathValue.(RegionRegionLocation_FieldPathValue).SetTo(&(*target).Location)
	case Region_FieldPathSelectorConnectivityScores:
		panic("FieldPath setter is unsupported for array subpaths")
	case Region_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fpvs.Selector()))
	}
}

func (fpvs *Region_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Region)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Region_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Region_FieldSubPathValue) CompareWith(source *Region) (int, bool) {
	switch fpvs.Selector() {
	case Region_FieldPathSelectorLocation:
		return fpvs.subPathValue.(RegionRegionLocation_FieldPathValue).CompareWith(source.GetLocation())
	case Region_FieldPathSelectorConnectivityScores:
		return 0, false // repeated field
	case Region_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fpvs.Selector()))
	}
}

func (fpvs *Region_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Region))
}

// Region_FieldPathArrayItemValue allows storing single item in Path-specific values for Region according to their type
// Present only for array (repeated) types.
type Region_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Region_FieldPath
	ContainsValue(*Region) bool
}

// ParseRegion_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRegion_FieldPathArrayItemValue(pathStr, valueStr string) (Region_FieldPathArrayItemValue, error) {
	fp, err := ParseRegion_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Region field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Region_FieldPathArrayItemValue), nil
}

func MustParseRegion_FieldPathArrayItemValue(pathStr, valueStr string) Region_FieldPathArrayItemValue {
	fpaiv, err := ParseRegion_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Region_FieldTerminalPathArrayItemValue struct {
	Region_FieldTerminalPath
	value interface{}
}

var _ Region_FieldPathArrayItemValue = (*Region_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Region as interface{}
func (fpaiv *Region_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Region_FieldTerminalPathArrayItemValue) AsConnectivityScoresItemValue() (*Region_RegionConnectivityPreference, bool) {
	res, ok := fpaiv.value.(*Region_RegionConnectivityPreference)
	return res, ok
}

func (fpaiv *Region_FieldTerminalPathArrayItemValue) GetSingle(source *Region) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Region_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Region))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Region'
func (fpaiv *Region_FieldTerminalPathArrayItemValue) ContainsValue(source *Region) bool {
	slice := fpaiv.Region_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Region_FieldSubPathArrayItemValue struct {
	Region_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Region_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Region_FieldSubPathArrayItemValue) AsLocationPathItemValue() (RegionRegionLocation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RegionRegionLocation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Region_FieldSubPathArrayItemValue) AsConnectivityScoresPathItemValue() (RegionRegionConnectivityPreference_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RegionRegionConnectivityPreference_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Region_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Region'
func (fpaivs *Region_FieldSubPathArrayItemValue) ContainsValue(source *Region) bool {
	switch fpaivs.Selector() {
	case Region_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(RegionRegionLocation_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case Region_FieldPathSelectorConnectivityScores:
		return false // repeated/map field
	case Region_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Region: %d", fpaivs.Selector()))
	}
}

// Region_FieldPathArrayOfValues allows storing slice of values for Region fields according to their type
type Region_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Region_FieldPath
}

func ParseRegion_FieldPathArrayOfValues(pathStr, valuesStr string) (Region_FieldPathArrayOfValues, error) {
	fp, err := ParseRegion_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Region field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Region_FieldPathArrayOfValues), nil
}

func MustParseRegion_FieldPathArrayOfValues(pathStr, valuesStr string) Region_FieldPathArrayOfValues {
	fpaov, err := ParseRegion_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Region_FieldTerminalPathArrayOfValues struct {
	Region_FieldTerminalPath
	values interface{}
}

var _ Region_FieldPathArrayOfValues = (*Region_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Region_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Region_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Region_FieldPathSelectorTitle:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Region_FieldPathSelectorDomain:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Region_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*Region_RegionLocation) {
			values = append(values, v)
		}
	case Region_FieldPathSelectorIsDefault:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case Region_FieldPathSelectorConnectivityScores:
		for _, v := range fpaov.values.([][]*Region_RegionConnectivityPreference) {
			values = append(values, v)
		}
	case Region_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsTitleArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsDomainArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*Region_RegionLocation, bool) {
	res, ok := fpaov.values.([]*Region_RegionLocation)
	return res, ok
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsIsDefaultArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsConnectivityScoresArrayOfValues() ([][]*Region_RegionConnectivityPreference, bool) {
	res, ok := fpaov.values.([][]*Region_RegionConnectivityPreference)
	return res, ok
}
func (fpaov *Region_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}

type Region_FieldSubPathArrayOfValues struct {
	Region_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Region_FieldPathArrayOfValues = (*Region_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Region_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Region_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (RegionRegionLocation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RegionRegionLocation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Region_FieldSubPathArrayOfValues) AsConnectivityScoresPathArrayOfValues() (RegionRegionConnectivityPreference_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RegionRegionConnectivityPreference_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Region_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RegionRegionLocation_FieldPath interface {
	gotenobject.FieldPath
	Selector() RegionRegionLocation_FieldPathSelector
	Get(source *Region_RegionLocation) []interface{}
	GetSingle(source *Region_RegionLocation) (interface{}, bool)
	ClearValue(item *Region_RegionLocation)

	// Those methods build corresponding RegionRegionLocation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RegionRegionLocation_FieldPathValue
	WithIArrayOfValues(values interface{}) RegionRegionLocation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RegionRegionLocation_FieldPathArrayItemValue
}

type RegionRegionLocation_FieldPathSelector int32

const (
	RegionRegionLocation_FieldPathSelectorContinent     RegionRegionLocation_FieldPathSelector = 0
	RegionRegionLocation_FieldPathSelectorCountry       RegionRegionLocation_FieldPathSelector = 1
	RegionRegionLocation_FieldPathSelectorAgglomeration RegionRegionLocation_FieldPathSelector = 2
	RegionRegionLocation_FieldPathSelectorCity          RegionRegionLocation_FieldPathSelector = 3
	RegionRegionLocation_FieldPathSelectorCloud         RegionRegionLocation_FieldPathSelector = 4
)

func (s RegionRegionLocation_FieldPathSelector) String() string {
	switch s {
	case RegionRegionLocation_FieldPathSelectorContinent:
		return "continent"
	case RegionRegionLocation_FieldPathSelectorCountry:
		return "country"
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		return "agglomeration"
	case RegionRegionLocation_FieldPathSelectorCity:
		return "city"
	case RegionRegionLocation_FieldPathSelectorCloud:
		return "cloud"
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", s))
	}
}

func BuildRegionRegionLocation_FieldPath(fp gotenobject.RawFieldPath) (RegionRegionLocation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Region_RegionLocation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "continent":
			return &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorContinent}, nil
		case "country":
			return &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCountry}, nil
		case "agglomeration":
			return &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorAgglomeration}, nil
		case "city":
			return &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCity}, nil
		case "cloud":
			return &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCloud}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Region_RegionLocation", fp)
}

func ParseRegionRegionLocation_FieldPath(rawField string) (RegionRegionLocation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRegionRegionLocation_FieldPath(fp)
}

func MustParseRegionRegionLocation_FieldPath(rawField string) RegionRegionLocation_FieldPath {
	fp, err := ParseRegionRegionLocation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RegionRegionLocation_FieldTerminalPath struct {
	selector RegionRegionLocation_FieldPathSelector
}

var _ RegionRegionLocation_FieldPath = (*RegionRegionLocation_FieldTerminalPath)(nil)

func (fp *RegionRegionLocation_FieldTerminalPath) Selector() RegionRegionLocation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RegionRegionLocation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RegionRegionLocation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Region_RegionLocation
func (fp *RegionRegionLocation_FieldTerminalPath) Get(source *Region_RegionLocation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RegionRegionLocation_FieldPathSelectorContinent:
			values = append(values, source.Continent)
		case RegionRegionLocation_FieldPathSelectorCountry:
			values = append(values, source.Country)
		case RegionRegionLocation_FieldPathSelectorAgglomeration:
			values = append(values, source.Agglomeration)
		case RegionRegionLocation_FieldPathSelectorCity:
			values = append(values, source.City)
		case RegionRegionLocation_FieldPathSelectorCloud:
			values = append(values, source.Cloud)
		default:
			panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
		}
	}
	return
}

func (fp *RegionRegionLocation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Region_RegionLocation))
}

// GetSingle returns value pointed by specific field of from source Region_RegionLocation
func (fp *RegionRegionLocation_FieldTerminalPath) GetSingle(source *Region_RegionLocation) (interface{}, bool) {
	switch fp.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		return source.GetContinent(), source != nil
	case RegionRegionLocation_FieldPathSelectorCountry:
		return source.GetCountry(), source != nil
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		return source.GetAgglomeration(), source != nil
	case RegionRegionLocation_FieldPathSelectorCity:
		return source.GetCity(), source != nil
	case RegionRegionLocation_FieldPathSelectorCloud:
		return source.GetCloud(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
	}
}

func (fp *RegionRegionLocation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Region_RegionLocation))
}

// GetDefault returns a default value of the field type
func (fp *RegionRegionLocation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		return ""
	case RegionRegionLocation_FieldPathSelectorCountry:
		return ""
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		return ""
	case RegionRegionLocation_FieldPathSelectorCity:
		return ""
	case RegionRegionLocation_FieldPathSelectorCloud:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
	}
}

func (fp *RegionRegionLocation_FieldTerminalPath) ClearValue(item *Region_RegionLocation) {
	if item != nil {
		switch fp.selector {
		case RegionRegionLocation_FieldPathSelectorContinent:
			item.Continent = ""
		case RegionRegionLocation_FieldPathSelectorCountry:
			item.Country = ""
		case RegionRegionLocation_FieldPathSelectorAgglomeration:
			item.Agglomeration = ""
		case RegionRegionLocation_FieldPathSelectorCity:
			item.City = ""
		case RegionRegionLocation_FieldPathSelectorCloud:
			item.Cloud = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
		}
	}
}

func (fp *RegionRegionLocation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Region_RegionLocation))
}

// IsLeaf - whether field path is holds simple value
func (fp *RegionRegionLocation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RegionRegionLocation_FieldPathSelectorContinent ||
		fp.selector == RegionRegionLocation_FieldPathSelectorCountry ||
		fp.selector == RegionRegionLocation_FieldPathSelectorAgglomeration ||
		fp.selector == RegionRegionLocation_FieldPathSelectorCity ||
		fp.selector == RegionRegionLocation_FieldPathSelectorCloud
}

func (fp *RegionRegionLocation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RegionRegionLocation_FieldTerminalPath) WithIValue(value interface{}) RegionRegionLocation_FieldPathValue {
	switch fp.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		return &RegionRegionLocation_FieldTerminalPathValue{RegionRegionLocation_FieldTerminalPath: *fp, value: value.(string)}
	case RegionRegionLocation_FieldPathSelectorCountry:
		return &RegionRegionLocation_FieldTerminalPathValue{RegionRegionLocation_FieldTerminalPath: *fp, value: value.(string)}
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		return &RegionRegionLocation_FieldTerminalPathValue{RegionRegionLocation_FieldTerminalPath: *fp, value: value.(string)}
	case RegionRegionLocation_FieldPathSelectorCity:
		return &RegionRegionLocation_FieldTerminalPathValue{RegionRegionLocation_FieldTerminalPath: *fp, value: value.(string)}
	case RegionRegionLocation_FieldPathSelectorCloud:
		return &RegionRegionLocation_FieldTerminalPathValue{RegionRegionLocation_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
	}
}

func (fp *RegionRegionLocation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RegionRegionLocation_FieldTerminalPath) WithIArrayOfValues(values interface{}) RegionRegionLocation_FieldPathArrayOfValues {
	fpaov := &RegionRegionLocation_FieldTerminalPathArrayOfValues{RegionRegionLocation_FieldTerminalPath: *fp}
	switch fp.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		return &RegionRegionLocation_FieldTerminalPathArrayOfValues{RegionRegionLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case RegionRegionLocation_FieldPathSelectorCountry:
		return &RegionRegionLocation_FieldTerminalPathArrayOfValues{RegionRegionLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		return &RegionRegionLocation_FieldTerminalPathArrayOfValues{RegionRegionLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case RegionRegionLocation_FieldPathSelectorCity:
		return &RegionRegionLocation_FieldTerminalPathArrayOfValues{RegionRegionLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case RegionRegionLocation_FieldPathSelectorCloud:
		return &RegionRegionLocation_FieldTerminalPathArrayOfValues{RegionRegionLocation_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
	}
	return fpaov
}

func (fp *RegionRegionLocation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RegionRegionLocation_FieldTerminalPath) WithIArrayItemValue(value interface{}) RegionRegionLocation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fp.selector))
	}
}

func (fp *RegionRegionLocation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RegionRegionLocation_FieldPathValue allows storing values for RegionLocation fields according to their type
type RegionRegionLocation_FieldPathValue interface {
	RegionRegionLocation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Region_RegionLocation)
	CompareWith(*Region_RegionLocation) (cmp int, comparable bool)
}

func ParseRegionRegionLocation_FieldPathValue(pathStr, valueStr string) (RegionRegionLocation_FieldPathValue, error) {
	fp, err := ParseRegionRegionLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegionLocation field path value from %s: %v", valueStr, err)
	}
	return fpv.(RegionRegionLocation_FieldPathValue), nil
}

func MustParseRegionRegionLocation_FieldPathValue(pathStr, valueStr string) RegionRegionLocation_FieldPathValue {
	fpv, err := ParseRegionRegionLocation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RegionRegionLocation_FieldTerminalPathValue struct {
	RegionRegionLocation_FieldTerminalPath
	value interface{}
}

var _ RegionRegionLocation_FieldPathValue = (*RegionRegionLocation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RegionLocation' as interface{}
func (fpv *RegionRegionLocation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RegionRegionLocation_FieldTerminalPathValue) AsContinentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RegionRegionLocation_FieldTerminalPathValue) AsCountryValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RegionRegionLocation_FieldTerminalPathValue) AsAgglomerationValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RegionRegionLocation_FieldTerminalPathValue) AsCityValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RegionRegionLocation_FieldTerminalPathValue) AsCloudValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object RegionLocation
func (fpv *RegionRegionLocation_FieldTerminalPathValue) SetTo(target **Region_RegionLocation) {
	if *target == nil {
		*target = new(Region_RegionLocation)
	}
	switch fpv.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		(*target).Continent = fpv.value.(string)
	case RegionRegionLocation_FieldPathSelectorCountry:
		(*target).Country = fpv.value.(string)
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		(*target).Agglomeration = fpv.value.(string)
	case RegionRegionLocation_FieldPathSelectorCity:
		(*target).City = fpv.value.(string)
	case RegionRegionLocation_FieldPathSelectorCloud:
		(*target).Cloud = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fpv.selector))
	}
}

func (fpv *RegionRegionLocation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Region_RegionLocation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RegionRegionLocation_FieldTerminalPathValue' with the value under path in 'Region_RegionLocation'.
func (fpv *RegionRegionLocation_FieldTerminalPathValue) CompareWith(source *Region_RegionLocation) (int, bool) {
	switch fpv.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		leftValue := fpv.value.(string)
		rightValue := source.GetContinent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RegionRegionLocation_FieldPathSelectorCountry:
		leftValue := fpv.value.(string)
		rightValue := source.GetCountry()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		leftValue := fpv.value.(string)
		rightValue := source.GetAgglomeration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RegionRegionLocation_FieldPathSelectorCity:
		leftValue := fpv.value.(string)
		rightValue := source.GetCity()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RegionRegionLocation_FieldPathSelectorCloud:
		leftValue := fpv.value.(string)
		rightValue := source.GetCloud()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionLocation: %d", fpv.selector))
	}
}

func (fpv *RegionRegionLocation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Region_RegionLocation))
}

// RegionRegionLocation_FieldPathArrayItemValue allows storing single item in Path-specific values for RegionLocation according to their type
// Present only for array (repeated) types.
type RegionRegionLocation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RegionRegionLocation_FieldPath
	ContainsValue(*Region_RegionLocation) bool
}

// ParseRegionRegionLocation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRegionRegionLocation_FieldPathArrayItemValue(pathStr, valueStr string) (RegionRegionLocation_FieldPathArrayItemValue, error) {
	fp, err := ParseRegionRegionLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegionLocation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RegionRegionLocation_FieldPathArrayItemValue), nil
}

func MustParseRegionRegionLocation_FieldPathArrayItemValue(pathStr, valueStr string) RegionRegionLocation_FieldPathArrayItemValue {
	fpaiv, err := ParseRegionRegionLocation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RegionRegionLocation_FieldTerminalPathArrayItemValue struct {
	RegionRegionLocation_FieldTerminalPath
	value interface{}
}

var _ RegionRegionLocation_FieldPathArrayItemValue = (*RegionRegionLocation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Region_RegionLocation as interface{}
func (fpaiv *RegionRegionLocation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RegionRegionLocation_FieldTerminalPathArrayItemValue) GetSingle(source *Region_RegionLocation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RegionRegionLocation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Region_RegionLocation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegionLocation'
func (fpaiv *RegionRegionLocation_FieldTerminalPathArrayItemValue) ContainsValue(source *Region_RegionLocation) bool {
	slice := fpaiv.RegionRegionLocation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RegionRegionLocation_FieldPathArrayOfValues allows storing slice of values for RegionLocation fields according to their type
type RegionRegionLocation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RegionRegionLocation_FieldPath
}

func ParseRegionRegionLocation_FieldPathArrayOfValues(pathStr, valuesStr string) (RegionRegionLocation_FieldPathArrayOfValues, error) {
	fp, err := ParseRegionRegionLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegionLocation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RegionRegionLocation_FieldPathArrayOfValues), nil
}

func MustParseRegionRegionLocation_FieldPathArrayOfValues(pathStr, valuesStr string) RegionRegionLocation_FieldPathArrayOfValues {
	fpaov, err := ParseRegionRegionLocation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RegionRegionLocation_FieldTerminalPathArrayOfValues struct {
	RegionRegionLocation_FieldTerminalPath
	values interface{}
}

var _ RegionRegionLocation_FieldPathArrayOfValues = (*RegionRegionLocation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RegionRegionLocation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RegionRegionLocation_FieldPathSelectorContinent:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RegionRegionLocation_FieldPathSelectorCountry:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RegionRegionLocation_FieldPathSelectorAgglomeration:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RegionRegionLocation_FieldPathSelectorCity:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RegionRegionLocation_FieldPathSelectorCloud:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RegionRegionLocation_FieldTerminalPathArrayOfValues) AsContinentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RegionRegionLocation_FieldTerminalPathArrayOfValues) AsCountryArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RegionRegionLocation_FieldTerminalPathArrayOfValues) AsAgglomerationArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RegionRegionLocation_FieldTerminalPathArrayOfValues) AsCityArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RegionRegionLocation_FieldTerminalPathArrayOfValues) AsCloudArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RegionRegionConnectivityPreference_FieldPath interface {
	gotenobject.FieldPath
	Selector() RegionRegionConnectivityPreference_FieldPathSelector
	Get(source *Region_RegionConnectivityPreference) []interface{}
	GetSingle(source *Region_RegionConnectivityPreference) (interface{}, bool)
	ClearValue(item *Region_RegionConnectivityPreference)

	// Those methods build corresponding RegionRegionConnectivityPreference_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RegionRegionConnectivityPreference_FieldPathValue
	WithIArrayOfValues(values interface{}) RegionRegionConnectivityPreference_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RegionRegionConnectivityPreference_FieldPathArrayItemValue
}

type RegionRegionConnectivityPreference_FieldPathSelector int32

const (
	RegionRegionConnectivityPreference_FieldPathSelectorDest  RegionRegionConnectivityPreference_FieldPathSelector = 0
	RegionRegionConnectivityPreference_FieldPathSelectorScore RegionRegionConnectivityPreference_FieldPathSelector = 1
)

func (s RegionRegionConnectivityPreference_FieldPathSelector) String() string {
	switch s {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		return "dest"
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		return "score"
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", s))
	}
}

func BuildRegionRegionConnectivityPreference_FieldPath(fp gotenobject.RawFieldPath) (RegionRegionConnectivityPreference_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Region_RegionConnectivityPreference")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "dest":
			return &RegionRegionConnectivityPreference_FieldTerminalPath{selector: RegionRegionConnectivityPreference_FieldPathSelectorDest}, nil
		case "score":
			return &RegionRegionConnectivityPreference_FieldTerminalPath{selector: RegionRegionConnectivityPreference_FieldPathSelectorScore}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Region_RegionConnectivityPreference", fp)
}

func ParseRegionRegionConnectivityPreference_FieldPath(rawField string) (RegionRegionConnectivityPreference_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRegionRegionConnectivityPreference_FieldPath(fp)
}

func MustParseRegionRegionConnectivityPreference_FieldPath(rawField string) RegionRegionConnectivityPreference_FieldPath {
	fp, err := ParseRegionRegionConnectivityPreference_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RegionRegionConnectivityPreference_FieldTerminalPath struct {
	selector RegionRegionConnectivityPreference_FieldPathSelector
}

var _ RegionRegionConnectivityPreference_FieldPath = (*RegionRegionConnectivityPreference_FieldTerminalPath)(nil)

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) Selector() RegionRegionConnectivityPreference_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Region_RegionConnectivityPreference
func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) Get(source *Region_RegionConnectivityPreference) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RegionRegionConnectivityPreference_FieldPathSelectorDest:
			if source.Dest != nil {
				values = append(values, source.Dest)
			}
		case RegionRegionConnectivityPreference_FieldPathSelectorScore:
			values = append(values, source.Score)
		default:
			panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
		}
	}
	return
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Region_RegionConnectivityPreference))
}

// GetSingle returns value pointed by specific field of from source Region_RegionConnectivityPreference
func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) GetSingle(source *Region_RegionConnectivityPreference) (interface{}, bool) {
	switch fp.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		res := source.GetDest()
		return res, res != nil
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		return source.GetScore(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
	}
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Region_RegionConnectivityPreference))
}

// GetDefault returns a default value of the field type
func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		return (*Reference)(nil)
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
	}
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) ClearValue(item *Region_RegionConnectivityPreference) {
	if item != nil {
		switch fp.selector {
		case RegionRegionConnectivityPreference_FieldPathSelectorDest:
			item.Dest = nil
		case RegionRegionConnectivityPreference_FieldPathSelectorScore:
			item.Score = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
		}
	}
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Region_RegionConnectivityPreference))
}

// IsLeaf - whether field path is holds simple value
func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RegionRegionConnectivityPreference_FieldPathSelectorDest ||
		fp.selector == RegionRegionConnectivityPreference_FieldPathSelectorScore
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) WithIValue(value interface{}) RegionRegionConnectivityPreference_FieldPathValue {
	switch fp.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		return &RegionRegionConnectivityPreference_FieldTerminalPathValue{RegionRegionConnectivityPreference_FieldTerminalPath: *fp, value: value.(*Reference)}
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		return &RegionRegionConnectivityPreference_FieldTerminalPathValue{RegionRegionConnectivityPreference_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
	}
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) WithIArrayOfValues(values interface{}) RegionRegionConnectivityPreference_FieldPathArrayOfValues {
	fpaov := &RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues{RegionRegionConnectivityPreference_FieldTerminalPath: *fp}
	switch fp.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		return &RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues{RegionRegionConnectivityPreference_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		return &RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues{RegionRegionConnectivityPreference_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
	}
	return fpaov
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) WithIArrayItemValue(value interface{}) RegionRegionConnectivityPreference_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fp.selector))
	}
}

func (fp *RegionRegionConnectivityPreference_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RegionRegionConnectivityPreference_FieldPathValue allows storing values for RegionConnectivityPreference fields according to their type
type RegionRegionConnectivityPreference_FieldPathValue interface {
	RegionRegionConnectivityPreference_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Region_RegionConnectivityPreference)
	CompareWith(*Region_RegionConnectivityPreference) (cmp int, comparable bool)
}

func ParseRegionRegionConnectivityPreference_FieldPathValue(pathStr, valueStr string) (RegionRegionConnectivityPreference_FieldPathValue, error) {
	fp, err := ParseRegionRegionConnectivityPreference_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegionConnectivityPreference field path value from %s: %v", valueStr, err)
	}
	return fpv.(RegionRegionConnectivityPreference_FieldPathValue), nil
}

func MustParseRegionRegionConnectivityPreference_FieldPathValue(pathStr, valueStr string) RegionRegionConnectivityPreference_FieldPathValue {
	fpv, err := ParseRegionRegionConnectivityPreference_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RegionRegionConnectivityPreference_FieldTerminalPathValue struct {
	RegionRegionConnectivityPreference_FieldTerminalPath
	value interface{}
}

var _ RegionRegionConnectivityPreference_FieldPathValue = (*RegionRegionConnectivityPreference_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RegionConnectivityPreference' as interface{}
func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) AsDestValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) AsScoreValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object RegionConnectivityPreference
func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) SetTo(target **Region_RegionConnectivityPreference) {
	if *target == nil {
		*target = new(Region_RegionConnectivityPreference)
	}
	switch fpv.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		(*target).Dest = fpv.value.(*Reference)
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		(*target).Score = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fpv.selector))
	}
}

func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Region_RegionConnectivityPreference)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RegionRegionConnectivityPreference_FieldTerminalPathValue' with the value under path in 'Region_RegionConnectivityPreference'.
func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) CompareWith(source *Region_RegionConnectivityPreference) (int, bool) {
	switch fpv.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetDest()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		leftValue := fpv.value.(int32)
		rightValue := source.GetScore()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Region_RegionConnectivityPreference: %d", fpv.selector))
	}
}

func (fpv *RegionRegionConnectivityPreference_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Region_RegionConnectivityPreference))
}

// RegionRegionConnectivityPreference_FieldPathArrayItemValue allows storing single item in Path-specific values for RegionConnectivityPreference according to their type
// Present only for array (repeated) types.
type RegionRegionConnectivityPreference_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RegionRegionConnectivityPreference_FieldPath
	ContainsValue(*Region_RegionConnectivityPreference) bool
}

// ParseRegionRegionConnectivityPreference_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRegionRegionConnectivityPreference_FieldPathArrayItemValue(pathStr, valueStr string) (RegionRegionConnectivityPreference_FieldPathArrayItemValue, error) {
	fp, err := ParseRegionRegionConnectivityPreference_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegionConnectivityPreference field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RegionRegionConnectivityPreference_FieldPathArrayItemValue), nil
}

func MustParseRegionRegionConnectivityPreference_FieldPathArrayItemValue(pathStr, valueStr string) RegionRegionConnectivityPreference_FieldPathArrayItemValue {
	fpaiv, err := ParseRegionRegionConnectivityPreference_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RegionRegionConnectivityPreference_FieldTerminalPathArrayItemValue struct {
	RegionRegionConnectivityPreference_FieldTerminalPath
	value interface{}
}

var _ RegionRegionConnectivityPreference_FieldPathArrayItemValue = (*RegionRegionConnectivityPreference_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Region_RegionConnectivityPreference as interface{}
func (fpaiv *RegionRegionConnectivityPreference_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RegionRegionConnectivityPreference_FieldTerminalPathArrayItemValue) GetSingle(source *Region_RegionConnectivityPreference) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RegionRegionConnectivityPreference_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Region_RegionConnectivityPreference))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegionConnectivityPreference'
func (fpaiv *RegionRegionConnectivityPreference_FieldTerminalPathArrayItemValue) ContainsValue(source *Region_RegionConnectivityPreference) bool {
	slice := fpaiv.RegionRegionConnectivityPreference_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RegionRegionConnectivityPreference_FieldPathArrayOfValues allows storing slice of values for RegionConnectivityPreference fields according to their type
type RegionRegionConnectivityPreference_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RegionRegionConnectivityPreference_FieldPath
}

func ParseRegionRegionConnectivityPreference_FieldPathArrayOfValues(pathStr, valuesStr string) (RegionRegionConnectivityPreference_FieldPathArrayOfValues, error) {
	fp, err := ParseRegionRegionConnectivityPreference_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegionConnectivityPreference field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RegionRegionConnectivityPreference_FieldPathArrayOfValues), nil
}

func MustParseRegionRegionConnectivityPreference_FieldPathArrayOfValues(pathStr, valuesStr string) RegionRegionConnectivityPreference_FieldPathArrayOfValues {
	fpaov, err := ParseRegionRegionConnectivityPreference_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues struct {
	RegionRegionConnectivityPreference_FieldTerminalPath
	values interface{}
}

var _ RegionRegionConnectivityPreference_FieldPathArrayOfValues = (*RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RegionRegionConnectivityPreference_FieldPathSelectorDest:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case RegionRegionConnectivityPreference_FieldPathSelectorScore:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues) AsDestArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *RegionRegionConnectivityPreference_FieldTerminalPathArrayOfValues) AsScoreArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
