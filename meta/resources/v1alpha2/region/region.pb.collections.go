// Code generated by protoc-gen-goten-resource
// Resource: Region
// DO NOT EDIT!!!

package region

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
)

type RegionList []*Region

func (l RegionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Region))
}

func (l RegionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(RegionList)...)
}

func (l RegionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RegionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l RegionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Region)
}

func (l RegionList) Length() int {
	return len(l)
}

type RegionChangeList []*RegionChange

func (l RegionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*RegionChange))
}

func (l RegionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(RegionChangeList)...)
}

func (l RegionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RegionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l RegionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*RegionChange)
}

func (l RegionChangeList) Length() int {
	return len(l)
}

type RegionNameList []*Name

func (l RegionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l RegionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(RegionNameList)...)
}

func (l RegionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RegionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l RegionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l RegionNameList) Length() int {
	return len(l)
}

type RegionReferenceList []*Reference

func (l RegionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l RegionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(RegionReferenceList)...)
}

func (l RegionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RegionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l RegionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l RegionReferenceList) Length() int {
	return len(l)
}

type RegionMap map[Name]*Region

func (m RegionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m RegionMap) Set(res gotenresource.Resource) {
	tRes := res.(*Region)
	m[*tRes.Name] = tRes
}

func (m RegionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m RegionMap) Length() int {
	return len(m)
}

func (m RegionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type RegionChangeMap map[Name]*RegionChange

func (m RegionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m RegionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*RegionChange)
	m[*tChange.GetRegionName()] = tChange
}

func (m RegionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m RegionChangeMap) Length() int {
	return len(m)
}

func (m RegionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
