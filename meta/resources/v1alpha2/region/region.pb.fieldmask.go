// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/region.proto
// DO NOT EDIT!!!

package region

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
)

type Region_FieldMask struct {
	Paths []Region_FieldPath
}

func FullRegion_FieldMask() *Region_FieldMask {
	res := &Region_FieldMask{}
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorTitle})
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorDomain})
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorIsDefault})
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorConnectivityScores})
	res.Paths = append(res.Paths, &Region_FieldTerminalPath{selector: Region_FieldPathSelectorMetadata})
	return res
}

func (fieldMask *Region_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Region_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Region_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRegion_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Region_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Region_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Region_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRegion_FieldPath(raw)
	})
}

func (fieldMask *Region_FieldMask) ProtoMessage() {}

func (fieldMask *Region_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Region_FieldMask) Subtract(other *Region_FieldMask) *Region_FieldMask {
	result := &Region_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[Region_FieldPathSelector]gotenobject.FieldMask{
		Region_FieldPathSelectorLocation:           &Region_RegionLocation_FieldMask{},
		Region_FieldPathSelectorConnectivityScores: &Region_RegionConnectivityPreference_FieldMask{},
		Region_FieldPathSelectorMetadata:           &ntt_meta.Meta_FieldMask{},
	}
	mySubMasks := map[Region_FieldPathSelector]gotenobject.FieldMask{
		Region_FieldPathSelectorLocation:           &Region_RegionLocation_FieldMask{},
		Region_FieldPathSelectorConnectivityScores: &Region_RegionConnectivityPreference_FieldMask{},
		Region_FieldPathSelectorMetadata:           &ntt_meta.Meta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Region_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Region_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Region_FieldTerminalPath); ok {
					switch tp.selector {
					case Region_FieldPathSelectorLocation:
						mySubMasks[Region_FieldPathSelectorLocation] = FullRegion_RegionLocation_FieldMask()
					case Region_FieldPathSelectorConnectivityScores:
						mySubMasks[Region_FieldPathSelectorConnectivityScores] = FullRegion_RegionConnectivityPreference_FieldMask()
					case Region_FieldPathSelectorMetadata:
						mySubMasks[Region_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					}
				} else if tp, ok := path.(*Region_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Region_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Region_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Region_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Region_FieldMask) FilterInputFields() *Region_FieldMask {
	result := &Region_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Region_FieldPathSelectorMetadata:
			if _, ok := path.(*Region_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Region_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Region_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Region_FieldSubPath{selector: Region_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Region_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Region_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Region_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRegion_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Region_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Region_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Region_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Region_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Region_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Region_FieldMask) AppendPath(path Region_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Region_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Region_FieldPath))
}

func (fieldMask *Region_FieldMask) GetPaths() []Region_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Region_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Region_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRegion_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Region_FieldMask) Set(target, source *Region) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Region_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Region), source.(*Region))
}

func (fieldMask *Region_FieldMask) Project(source *Region) *Region {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Region{}
	locationMask := &Region_RegionLocation_FieldMask{}
	wholeLocationAccepted := false
	connectivityScoresMask := &Region_RegionConnectivityPreference_FieldMask{}
	wholeConnectivityScoresAccepted := false
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Region_FieldTerminalPath:
			switch tp.selector {
			case Region_FieldPathSelectorName:
				result.Name = source.Name
			case Region_FieldPathSelectorTitle:
				result.Title = source.Title
			case Region_FieldPathSelectorDomain:
				result.Domain = source.Domain
			case Region_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case Region_FieldPathSelectorIsDefault:
				result.IsDefault = source.IsDefault
			case Region_FieldPathSelectorConnectivityScores:
				result.ConnectivityScores = source.ConnectivityScores
				wholeConnectivityScoresAccepted = true
			case Region_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			}
		case *Region_FieldSubPath:
			switch tp.selector {
			case Region_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(RegionRegionLocation_FieldPath))
			case Region_FieldPathSelectorConnectivityScores:
				connectivityScoresMask.AppendPath(tp.subPath.(RegionRegionConnectivityPreference_FieldPath))
			case Region_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			}
		}
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	if wholeConnectivityScoresAccepted == false && len(connectivityScoresMask.Paths) > 0 {
		for _, sourceItem := range source.GetConnectivityScores() {
			result.ConnectivityScores = append(result.ConnectivityScores, connectivityScoresMask.Project(sourceItem))
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	return result
}

func (fieldMask *Region_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Region))
}

func (fieldMask *Region_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Region_RegionLocation_FieldMask struct {
	Paths []RegionRegionLocation_FieldPath
}

func FullRegion_RegionLocation_FieldMask() *Region_RegionLocation_FieldMask {
	res := &Region_RegionLocation_FieldMask{}
	res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorContinent})
	res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCountry})
	res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorAgglomeration})
	res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCity})
	res.Paths = append(res.Paths, &RegionRegionLocation_FieldTerminalPath{selector: RegionRegionLocation_FieldPathSelectorCloud})
	return res
}

func (fieldMask *Region_RegionLocation_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Region_RegionLocation_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Region_RegionLocation_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRegionRegionLocation_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Region_RegionLocation_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RegionRegionLocation_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Region_RegionLocation_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRegionRegionLocation_FieldPath(raw)
	})
}

func (fieldMask *Region_RegionLocation_FieldMask) ProtoMessage() {}

func (fieldMask *Region_RegionLocation_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Region_RegionLocation_FieldMask) Subtract(other *Region_RegionLocation_FieldMask) *Region_RegionLocation_FieldMask {
	result := &Region_RegionLocation_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RegionRegionLocation_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Region_RegionLocation_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Region_RegionLocation_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Region_RegionLocation_FieldMask) FilterInputFields() *Region_RegionLocation_FieldMask {
	result := &Region_RegionLocation_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Region_RegionLocation_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Region_RegionLocation_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RegionRegionLocation_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRegionRegionLocation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Region_RegionLocation_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Region_RegionLocation_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Region_RegionLocation_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Region_RegionLocation_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Region_RegionLocation_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Region_RegionLocation_FieldMask) AppendPath(path RegionRegionLocation_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Region_RegionLocation_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RegionRegionLocation_FieldPath))
}

func (fieldMask *Region_RegionLocation_FieldMask) GetPaths() []RegionRegionLocation_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Region_RegionLocation_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Region_RegionLocation_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRegionRegionLocation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Region_RegionLocation_FieldMask) Set(target, source *Region_RegionLocation) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Region_RegionLocation_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Region_RegionLocation), source.(*Region_RegionLocation))
}

func (fieldMask *Region_RegionLocation_FieldMask) Project(source *Region_RegionLocation) *Region_RegionLocation {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Region_RegionLocation{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RegionRegionLocation_FieldTerminalPath:
			switch tp.selector {
			case RegionRegionLocation_FieldPathSelectorContinent:
				result.Continent = source.Continent
			case RegionRegionLocation_FieldPathSelectorCountry:
				result.Country = source.Country
			case RegionRegionLocation_FieldPathSelectorAgglomeration:
				result.Agglomeration = source.Agglomeration
			case RegionRegionLocation_FieldPathSelectorCity:
				result.City = source.City
			case RegionRegionLocation_FieldPathSelectorCloud:
				result.Cloud = source.Cloud
			}
		}
	}
	return result
}

func (fieldMask *Region_RegionLocation_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Region_RegionLocation))
}

func (fieldMask *Region_RegionLocation_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Region_RegionConnectivityPreference_FieldMask struct {
	Paths []RegionRegionConnectivityPreference_FieldPath
}

func FullRegion_RegionConnectivityPreference_FieldMask() *Region_RegionConnectivityPreference_FieldMask {
	res := &Region_RegionConnectivityPreference_FieldMask{}
	res.Paths = append(res.Paths, &RegionRegionConnectivityPreference_FieldTerminalPath{selector: RegionRegionConnectivityPreference_FieldPathSelectorDest})
	res.Paths = append(res.Paths, &RegionRegionConnectivityPreference_FieldTerminalPath{selector: RegionRegionConnectivityPreference_FieldPathSelectorScore})
	return res
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Region_RegionConnectivityPreference_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRegionRegionConnectivityPreference_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RegionRegionConnectivityPreference_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRegionRegionConnectivityPreference_FieldPath(raw)
	})
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) ProtoMessage() {}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) Subtract(other *Region_RegionConnectivityPreference_FieldMask) *Region_RegionConnectivityPreference_FieldMask {
	result := &Region_RegionConnectivityPreference_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RegionRegionConnectivityPreference_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Region_RegionConnectivityPreference_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Region_RegionConnectivityPreference_FieldMask) FilterInputFields() *Region_RegionConnectivityPreference_FieldMask {
	result := &Region_RegionConnectivityPreference_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Region_RegionConnectivityPreference_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RegionRegionConnectivityPreference_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRegionRegionConnectivityPreference_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Region_RegionConnectivityPreference_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Region_RegionConnectivityPreference_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) AppendPath(path RegionRegionConnectivityPreference_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RegionRegionConnectivityPreference_FieldPath))
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) GetPaths() []RegionRegionConnectivityPreference_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRegionRegionConnectivityPreference_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) Set(target, source *Region_RegionConnectivityPreference) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Region_RegionConnectivityPreference), source.(*Region_RegionConnectivityPreference))
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) Project(source *Region_RegionConnectivityPreference) *Region_RegionConnectivityPreference {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Region_RegionConnectivityPreference{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RegionRegionConnectivityPreference_FieldTerminalPath:
			switch tp.selector {
			case RegionRegionConnectivityPreference_FieldPathSelectorDest:
				result.Dest = source.Dest
			case RegionRegionConnectivityPreference_FieldPathSelectorScore:
				result.Score = source.Score
			}
		}
	}
	return result
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Region_RegionConnectivityPreference))
}

func (fieldMask *Region_RegionConnectivityPreference_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
