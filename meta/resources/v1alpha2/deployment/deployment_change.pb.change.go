// Code generated by protoc-gen-goten-resource
// Resource change: DeploymentChange
// DO NOT EDIT!!!

package deployment

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &region.Region{}
	_ = &field_mask.FieldMask{}
)

func (c *DeploymentChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DeploymentChange_Added_)
	return ok
}

func (c *DeploymentChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DeploymentChange_Modified_)
	return ok
}

func (c *DeploymentChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DeploymentChange_Current_)
	return ok
}

func (c *DeploymentChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DeploymentChange_Removed_)
	return ok
}

func (c *DeploymentChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *DeploymentChange_Added_:
		return cType.Added.ViewIndex
	case *DeploymentChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *DeploymentChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *DeploymentChange_Removed_:
		return cType.Removed.ViewIndex
	case *DeploymentChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *DeploymentChange) GetDeployment() *Deployment {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *DeploymentChange_Added_:
		return cType.Added.Deployment
	case *DeploymentChange_Modified_:
		return cType.Modified.Deployment
	case *DeploymentChange_Current_:
		return cType.Current.Deployment
	case *DeploymentChange_Removed_:
		return nil
	}
	return nil
}

func (c *DeploymentChange) GetRawResource() gotenresource.Resource {
	return c.GetDeployment()
}

func (c *DeploymentChange) GetDeploymentName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *DeploymentChange_Added_:
		return cType.Added.Deployment.GetName()
	case *DeploymentChange_Modified_:
		return cType.Modified.Name
	case *DeploymentChange_Current_:
		return cType.Current.Deployment.GetName()
	case *DeploymentChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *DeploymentChange) GetRawName() gotenresource.Name {
	return c.GetDeploymentName()
}

func (c *DeploymentChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &DeploymentChange_Added_{
		Added: &DeploymentChange_Added{
			Deployment: snapshot.(*Deployment),
			ViewIndex:  int32(idx),
		},
	}
}

func (c *DeploymentChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &DeploymentChange_Modified_{
		Modified: &DeploymentChange_Modified{
			Name:              name.(*Name),
			Deployment:        snapshot.(*Deployment),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *DeploymentChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &DeploymentChange_Current_{
		Current: &DeploymentChange_Current{
			Deployment: snapshot.(*Deployment),
		},
	}
}

func (c *DeploymentChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &DeploymentChange_Removed_{
		Removed: &DeploymentChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
