// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/service.proto
// DO NOT EDIT!!!

package service

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &meta.Meta{}
)

func (o *Service) GotenObjectExt() {}

func (o *Service) MakeFullFieldMask() *Service_FieldMask {
	return FullService_FieldMask()
}

func (o *Service) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullService_FieldMask()
}

func (o *Service) MakeDiffFieldMask(other *Service) *Service_FieldMask {
	if o == nil && other == nil {
		return &Service_FieldMask{}
	}
	if o == nil || other == nil {
		return FullService_FieldMask()
	}

	res := &Service_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Service_FieldTerminalPath{selector: Service_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Service_FieldTerminalPath{selector: Service_FieldPathSelectorDisplayName})
	}
	if o.GetCurrentVersion() != other.GetCurrentVersion() {
		res.Paths = append(res.Paths, &Service_FieldTerminalPath{selector: Service_FieldPathSelectorCurrentVersion})
	}

	if len(o.GetAllVersions()) == len(other.GetAllVersions()) {
		for i, lValue := range o.GetAllVersions() {
			rValue := other.GetAllVersions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &Service_FieldTerminalPath{selector: Service_FieldPathSelectorAllVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Service_FieldTerminalPath{selector: Service_FieldPathSelectorAllVersions})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Service_FieldTerminalPath{selector: Service_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Service_FieldSubPath{selector: Service_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Service) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Service))
}

func (o *Service) Clone() *Service {
	if o == nil {
		return nil
	}
	result := &Service{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.CurrentVersion = o.CurrentVersion
	result.AllVersions = make([]string, len(o.AllVersions))
	for i, sourceValue := range o.AllVersions {
		result.AllVersions[i] = sourceValue
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Service) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Service) Merge(source *Service) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	o.CurrentVersion = source.GetCurrentVersion()
	for _, sourceValue := range source.GetAllVersions() {
		exists := false
		for _, currentValue := range o.AllVersions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.AllVersions = append(o.AllVersions, newDstElement)
		}
	}

	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Service) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Service))
}
