// Code generated by protoc-gen-goten-resource
// Resource: Service
// DO NOT EDIT!!!

package service

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
)

type ServiceList []*Service

func (l ServiceList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Service))
}

func (l ServiceList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ServiceList)...)
}

func (l ServiceList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ServiceList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Service)
}

func (l ServiceList) Length() int {
	return len(l)
}

type ServiceChangeList []*ServiceChange

func (l ServiceChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ServiceChange))
}

func (l ServiceChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ServiceChangeList)...)
}

func (l ServiceChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ServiceChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ServiceChange)
}

func (l ServiceChangeList) Length() int {
	return len(l)
}

type ServiceNameList []*Name

func (l ServiceNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ServiceNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ServiceNameList)...)
}

func (l ServiceNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ServiceNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ServiceNameList) Length() int {
	return len(l)
}

type ServiceReferenceList []*Reference

func (l ServiceReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ServiceReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ServiceReferenceList)...)
}

func (l ServiceReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ServiceReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ServiceReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ServiceReferenceList) Length() int {
	return len(l)
}

type ServiceMap map[Name]*Service

func (m ServiceMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ServiceMap) Set(res gotenresource.Resource) {
	tRes := res.(*Service)
	m[*tRes.Name] = tRes
}

func (m ServiceMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ServiceMap) Length() int {
	return len(m)
}

func (m ServiceMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ServiceChangeMap map[Name]*ServiceChange

func (m ServiceChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ServiceChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ServiceChange)
	m[*tChange.GetServiceName()] = tChange
}

func (m ServiceChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ServiceChangeMap) Length() int {
	return len(m)
}

func (m ServiceChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
