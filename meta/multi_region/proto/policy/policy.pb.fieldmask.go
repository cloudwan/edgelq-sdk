// Code generated by protoc-gen-goten-object
// File: edgelq/meta/multi_region/proto/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var ()

type Policy_FieldMask struct {
	Paths []Policy_FieldPath
}

func FullPolicy_FieldMask() *Policy_FieldMask {
	res := &Policy_FieldMask{}
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorEnabledRegions})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDefaultControlRegion})
	res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorCriteriaForDisabledSync})
	return res
}

func (fieldMask *Policy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Policy_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Policy_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParsePolicy_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Policy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Policy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicy_FieldPath(raw)
	})
}

func (fieldMask *Policy_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_FieldMask) Subtract(other *Policy_FieldMask) *Policy_FieldMask {
	result := &Policy_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[Policy_FieldPathSelector]gotenobject.FieldMask{
		Policy_FieldPathSelectorCriteriaForDisabledSync: &Policy_CriteriaForDisabledSync_FieldMask{},
	}
	mySubMasks := map[Policy_FieldPathSelector]gotenobject.FieldMask{
		Policy_FieldPathSelectorCriteriaForDisabledSync: &Policy_CriteriaForDisabledSync_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Policy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Policy_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Policy_FieldTerminalPath); ok {
					switch tp.selector {
					case Policy_FieldPathSelectorCriteriaForDisabledSync:
						mySubMasks[Policy_FieldPathSelectorCriteriaForDisabledSync] = FullPolicy_CriteriaForDisabledSync_FieldMask()
					}
				} else if tp, ok := path.(*Policy_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Policy_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_FieldMask) FilterInputFields() *Policy_FieldMask {
	result := &Policy_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Policy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_FieldMask) AppendPath(path Policy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Policy_FieldPath))
}

func (fieldMask *Policy_FieldMask) GetPaths() []Policy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_FieldMask) Set(target, source *Policy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy), source.(*Policy))
}

func (fieldMask *Policy_FieldMask) Project(source *Policy) *Policy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy{}
	criteriaForDisabledSyncMask := &Policy_CriteriaForDisabledSync_FieldMask{}
	wholeCriteriaForDisabledSyncAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Policy_FieldTerminalPath:
			switch tp.selector {
			case Policy_FieldPathSelectorEnabledRegions:
				result.EnabledRegions = source.EnabledRegions
			case Policy_FieldPathSelectorDefaultControlRegion:
				result.DefaultControlRegion = source.DefaultControlRegion
			case Policy_FieldPathSelectorCriteriaForDisabledSync:
				result.CriteriaForDisabledSync = source.CriteriaForDisabledSync
				wholeCriteriaForDisabledSyncAccepted = true
			}
		case *Policy_FieldSubPath:
			switch tp.selector {
			case Policy_FieldPathSelectorCriteriaForDisabledSync:
				criteriaForDisabledSyncMask.AppendPath(tp.subPath.(PolicyCriteriaForDisabledSync_FieldPath))
			}
		}
	}
	if wholeCriteriaForDisabledSyncAccepted == false && len(criteriaForDisabledSyncMask.Paths) > 0 {
		for _, sourceItem := range source.GetCriteriaForDisabledSync() {
			result.CriteriaForDisabledSync = append(result.CriteriaForDisabledSync, criteriaForDisabledSyncMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Policy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy))
}

func (fieldMask *Policy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Policy_CriteriaForDisabledSync_FieldMask struct {
	Paths []PolicyCriteriaForDisabledSync_FieldPath
}

func FullPolicy_CriteriaForDisabledSync_FieldMask() *Policy_CriteriaForDisabledSync_FieldMask {
	res := &Policy_CriteriaForDisabledSync_FieldMask{}
	res.Paths = append(res.Paths, &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName})
	res.Paths = append(res.Paths, &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion})
	res.Paths = append(res.Paths, &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion})
	return res
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParsePolicyCriteriaForDisabledSync_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PolicyCriteriaForDisabledSync_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePolicyCriteriaForDisabledSync_FieldPath(raw)
	})
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) ProtoMessage() {}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) Subtract(other *Policy_CriteriaForDisabledSync_FieldMask) *Policy_CriteriaForDisabledSync_FieldMask {
	result := &Policy_CriteriaForDisabledSync_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PolicyCriteriaForDisabledSync_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Policy_CriteriaForDisabledSync_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) FilterInputFields() *Policy_CriteriaForDisabledSync_FieldMask {
	result := &Policy_CriteriaForDisabledSync_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PolicyCriteriaForDisabledSync_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePolicyCriteriaForDisabledSync_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Policy_CriteriaForDisabledSync_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Policy_CriteriaForDisabledSync_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) AppendPath(path PolicyCriteriaForDisabledSync_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PolicyCriteriaForDisabledSync_FieldPath))
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) GetPaths() []PolicyCriteriaForDisabledSync_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePolicyCriteriaForDisabledSync_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) Set(target, source *Policy_CriteriaForDisabledSync) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Policy_CriteriaForDisabledSync), source.(*Policy_CriteriaForDisabledSync))
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) Project(source *Policy_CriteriaForDisabledSync) *Policy_CriteriaForDisabledSync {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Policy_CriteriaForDisabledSync{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PolicyCriteriaForDisabledSync_FieldTerminalPath:
			switch tp.selector {
			case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
				result.ResourceTypeName = source.ResourceTypeName
			case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
				result.SourceRegion = source.SourceRegion
			case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
				result.DestRegion = source.DestRegion
			}
		}
	}
	return result
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Policy_CriteriaForDisabledSync))
}

func (fieldMask *Policy_CriteriaForDisabledSync_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
