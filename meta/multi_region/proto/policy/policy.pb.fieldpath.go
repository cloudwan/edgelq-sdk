// Code generated by protoc-gen-goten-object
// File: edgelq/meta/multi_region/proto/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var ()

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Policy_FieldPath interface {
	gotenobject.FieldPath
	Selector() Policy_FieldPathSelector
	Get(source *Policy) []interface{}
	GetSingle(source *Policy) (interface{}, bool)
	ClearValue(item *Policy)

	// Those methods build corresponding Policy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Policy_FieldPathValue
	WithIArrayOfValues(values interface{}) Policy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Policy_FieldPathArrayItemValue
}

type Policy_FieldPathSelector int32

const (
	Policy_FieldPathSelectorEnabledRegions          Policy_FieldPathSelector = 0
	Policy_FieldPathSelectorDefaultControlRegion    Policy_FieldPathSelector = 1
	Policy_FieldPathSelectorCriteriaForDisabledSync Policy_FieldPathSelector = 2
)

func (s Policy_FieldPathSelector) String() string {
	switch s {
	case Policy_FieldPathSelectorEnabledRegions:
		return "enabled_regions"
	case Policy_FieldPathSelectorDefaultControlRegion:
		return "default_control_region"
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return "criteria_for_disabled_sync"
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", s))
	}
}

func BuildPolicy_FieldPath(fp gotenobject.RawFieldPath) (Policy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Policy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled_regions", "enabledRegions", "enabled-regions":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorEnabledRegions}, nil
		case "default_control_region", "defaultControlRegion", "default-control-region":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDefaultControlRegion}, nil
		case "criteria_for_disabled_sync", "criteriaForDisabledSync", "criteria-for-disabled-sync":
			return &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorCriteriaForDisabledSync}, nil
		}
	} else {
		switch fp[0] {
		case "criteria_for_disabled_sync", "criteriaForDisabledSync", "criteria-for-disabled-sync":
			if subpath, err := BuildPolicyCriteriaForDisabledSync_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Policy_FieldSubPath{selector: Policy_FieldPathSelectorCriteriaForDisabledSync, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Policy", fp)
}

func ParsePolicy_FieldPath(rawField string) (Policy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPolicy_FieldPath(fp)
}

func MustParsePolicy_FieldPath(rawField string) Policy_FieldPath {
	fp, err := ParsePolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Policy_FieldTerminalPath struct {
	selector Policy_FieldPathSelector
}

var _ Policy_FieldPath = (*Policy_FieldTerminalPath)(nil)

func (fp *Policy_FieldTerminalPath) Selector() Policy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Policy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Policy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Policy
func (fp *Policy_FieldTerminalPath) Get(source *Policy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Policy_FieldPathSelectorEnabledRegions:
			for _, value := range source.GetEnabledRegions() {
				values = append(values, value)
			}
		case Policy_FieldPathSelectorDefaultControlRegion:
			values = append(values, source.DefaultControlRegion)
		case Policy_FieldPathSelectorCriteriaForDisabledSync:
			for _, value := range source.GetCriteriaForDisabledSync() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
		}
	}
	return
}

func (fp *Policy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Policy))
}

// GetSingle returns value pointed by specific field of from source Policy
func (fp *Policy_FieldTerminalPath) GetSingle(source *Policy) (interface{}, bool) {
	switch fp.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		res := source.GetEnabledRegions()
		return res, res != nil
	case Policy_FieldPathSelectorDefaultControlRegion:
		return source.GetDefaultControlRegion(), source != nil
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		res := source.GetCriteriaForDisabledSync()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Policy))
}

// GetDefault returns a default value of the field type
func (fp *Policy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		return ([]string)(nil)
	case Policy_FieldPathSelectorDefaultControlRegion:
		return ""
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return ([]*Policy_CriteriaForDisabledSync)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) ClearValue(item *Policy) {
	if item != nil {
		switch fp.selector {
		case Policy_FieldPathSelectorEnabledRegions:
			item.EnabledRegions = nil
		case Policy_FieldPathSelectorDefaultControlRegion:
			item.DefaultControlRegion = ""
		case Policy_FieldPathSelectorCriteriaForDisabledSync:
			item.CriteriaForDisabledSync = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
		}
	}
}

func (fp *Policy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Policy))
}

// IsLeaf - whether field path is holds simple value
func (fp *Policy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Policy_FieldPathSelectorEnabledRegions ||
		fp.selector == Policy_FieldPathSelectorDefaultControlRegion
}

func (fp *Policy_FieldTerminalPath) WithIValue(value interface{}) Policy_FieldPathValue {
	switch fp.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.([]string)}
	case Policy_FieldPathSelectorDefaultControlRegion:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.(string)}
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return &Policy_FieldTerminalPathValue{Policy_FieldTerminalPath: *fp, value: value.([]*Policy_CriteriaForDisabledSync)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Policy_FieldTerminalPath) WithIArrayOfValues(values interface{}) Policy_FieldPathArrayOfValues {
	fpaov := &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp}
	switch fp.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([][]string)}
	case Policy_FieldPathSelectorDefaultControlRegion:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([]string)}
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return &Policy_FieldTerminalPathArrayOfValues{Policy_FieldTerminalPath: *fp, values: values.([][]*Policy_CriteriaForDisabledSync)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
	return fpaov
}

func (fp *Policy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Policy_FieldTerminalPath) WithIArrayItemValue(value interface{}) Policy_FieldPathArrayItemValue {
	switch fp.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		return &Policy_FieldTerminalPathArrayItemValue{Policy_FieldTerminalPath: *fp, value: value.(string)}
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return &Policy_FieldTerminalPathArrayItemValue{Policy_FieldTerminalPath: *fp, value: value.(*Policy_CriteriaForDisabledSync)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fp.selector))
	}
}

func (fp *Policy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Policy_FieldSubPath struct {
	selector Policy_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Policy_FieldPath = (*Policy_FieldSubPath)(nil)

func (fps *Policy_FieldSubPath) Selector() Policy_FieldPathSelector {
	return fps.selector
}
func (fps *Policy_FieldSubPath) AsCriteriaForDisabledSyncSubPath() (PolicyCriteriaForDisabledSync_FieldPath, bool) {
	res, ok := fps.subPath.(PolicyCriteriaForDisabledSync_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Policy_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Policy_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Policy
func (fps *Policy_FieldSubPath) Get(source *Policy) (values []interface{}) {
	if asCriteriaForDisabledSyncFieldPath, ok := fps.AsCriteriaForDisabledSyncSubPath(); ok {
		for _, item := range source.GetCriteriaForDisabledSync() {
			values = append(values, asCriteriaForDisabledSyncFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fps.selector))
	}
	return
}

func (fps *Policy_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Policy))
}

// GetSingle returns value of selected field from source Policy
func (fps *Policy_FieldSubPath) GetSingle(source *Policy) (interface{}, bool) {
	switch fps.selector {
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		if len(source.GetCriteriaForDisabledSync()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCriteriaForDisabledSync()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fps.selector))
	}
}

func (fps *Policy_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Policy))
}

// GetDefault returns a default value of the field type
func (fps *Policy_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Policy_FieldSubPath) ClearValue(item *Policy) {
	if item != nil {
		switch fps.selector {
		case Policy_FieldPathSelectorCriteriaForDisabledSync:
			for _, subItem := range item.CriteriaForDisabledSync {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Policy: %d", fps.selector))
		}
	}
}

func (fps *Policy_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Policy))
}

// IsLeaf - whether field path is holds simple value
func (fps *Policy_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Policy_FieldSubPath) WithIValue(value interface{}) Policy_FieldPathValue {
	return &Policy_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Policy_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Policy_FieldSubPath) WithIArrayOfValues(values interface{}) Policy_FieldPathArrayOfValues {
	return &Policy_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Policy_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Policy_FieldSubPath) WithIArrayItemValue(value interface{}) Policy_FieldPathArrayItemValue {
	return &Policy_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Policy_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Policy_FieldPathValue allows storing values for Policy fields according to their type
type Policy_FieldPathValue interface {
	Policy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Policy)
	CompareWith(*Policy) (cmp int, comparable bool)
}

func ParsePolicy_FieldPathValue(pathStr, valueStr string) (Policy_FieldPathValue, error) {
	fp, err := ParsePolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path value from %s: %v", valueStr, err)
	}
	return fpv.(Policy_FieldPathValue), nil
}

func MustParsePolicy_FieldPathValue(pathStr, valueStr string) Policy_FieldPathValue {
	fpv, err := ParsePolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Policy_FieldTerminalPathValue struct {
	Policy_FieldTerminalPath
	value interface{}
}

var _ Policy_FieldPathValue = (*Policy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Policy' as interface{}
func (fpv *Policy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Policy_FieldTerminalPathValue) AsEnabledRegionsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsDefaultControlRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Policy_FieldTerminalPathValue) AsCriteriaForDisabledSyncValue() ([]*Policy_CriteriaForDisabledSync, bool) {
	res, ok := fpv.value.([]*Policy_CriteriaForDisabledSync)
	return res, ok
}

// SetTo stores value for selected field for object Policy
func (fpv *Policy_FieldTerminalPathValue) SetTo(target **Policy) {
	if *target == nil {
		*target = new(Policy)
	}
	switch fpv.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		(*target).EnabledRegions = fpv.value.([]string)
	case Policy_FieldPathSelectorDefaultControlRegion:
		(*target).DefaultControlRegion = fpv.value.(string)
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		(*target).CriteriaForDisabledSync = fpv.value.([]*Policy_CriteriaForDisabledSync)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpv.selector))
	}
}

func (fpv *Policy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Policy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Policy_FieldTerminalPathValue' with the value under path in 'Policy'.
func (fpv *Policy_FieldTerminalPathValue) CompareWith(source *Policy) (int, bool) {
	switch fpv.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		return 0, false
	case Policy_FieldPathSelectorDefaultControlRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDefaultControlRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpv.selector))
	}
}

func (fpv *Policy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Policy))
}

type Policy_FieldSubPathValue struct {
	Policy_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Policy_FieldPathValue = (*Policy_FieldSubPathValue)(nil)

func (fpvs *Policy_FieldSubPathValue) AsCriteriaForDisabledSyncPathValue() (PolicyCriteriaForDisabledSync_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PolicyCriteriaForDisabledSync_FieldPathValue)
	return res, ok
}

func (fpvs *Policy_FieldSubPathValue) SetTo(target **Policy) {
	if *target == nil {
		*target = new(Policy)
	}
	switch fpvs.Selector() {
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpvs.Selector()))
	}
}

func (fpvs *Policy_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Policy)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Policy_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Policy_FieldSubPathValue) CompareWith(source *Policy) (int, bool) {
	switch fpvs.Selector() {
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpvs.Selector()))
	}
}

func (fpvs *Policy_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Policy))
}

// Policy_FieldPathArrayItemValue allows storing single item in Path-specific values for Policy according to their type
// Present only for array (repeated) types.
type Policy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Policy_FieldPath
	ContainsValue(*Policy) bool
}

// ParsePolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePolicy_FieldPathArrayItemValue(pathStr, valueStr string) (Policy_FieldPathArrayItemValue, error) {
	fp, err := ParsePolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Policy_FieldPathArrayItemValue), nil
}

func MustParsePolicy_FieldPathArrayItemValue(pathStr, valueStr string) Policy_FieldPathArrayItemValue {
	fpaiv, err := ParsePolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Policy_FieldTerminalPathArrayItemValue struct {
	Policy_FieldTerminalPath
	value interface{}
}

var _ Policy_FieldPathArrayItemValue = (*Policy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Policy as interface{}
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) AsEnabledRegionsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) AsCriteriaForDisabledSyncItemValue() (*Policy_CriteriaForDisabledSync, bool) {
	res, ok := fpaiv.value.(*Policy_CriteriaForDisabledSync)
	return res, ok
}

func (fpaiv *Policy_FieldTerminalPathArrayItemValue) GetSingle(source *Policy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Policy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Policy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Policy'
func (fpaiv *Policy_FieldTerminalPathArrayItemValue) ContainsValue(source *Policy) bool {
	slice := fpaiv.Policy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Policy_FieldSubPathArrayItemValue struct {
	Policy_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Policy_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Policy_FieldSubPathArrayItemValue) AsCriteriaForDisabledSyncPathItemValue() (PolicyCriteriaForDisabledSync_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PolicyCriteriaForDisabledSync_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Policy'
func (fpaivs *Policy_FieldSubPathArrayItemValue) ContainsValue(source *Policy) bool {
	switch fpaivs.Selector() {
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Policy: %d", fpaivs.Selector()))
	}
}

// Policy_FieldPathArrayOfValues allows storing slice of values for Policy fields according to their type
type Policy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Policy_FieldPath
}

func ParsePolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (Policy_FieldPathArrayOfValues, error) {
	fp, err := ParsePolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Policy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Policy_FieldPathArrayOfValues), nil
}

func MustParsePolicy_FieldPathArrayOfValues(pathStr, valuesStr string) Policy_FieldPathArrayOfValues {
	fpaov, err := ParsePolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Policy_FieldTerminalPathArrayOfValues struct {
	Policy_FieldTerminalPath
	values interface{}
}

var _ Policy_FieldPathArrayOfValues = (*Policy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Policy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Policy_FieldPathSelectorEnabledRegions:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorDefaultControlRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Policy_FieldPathSelectorCriteriaForDisabledSync:
		for _, v := range fpaov.values.([][]*Policy_CriteriaForDisabledSync) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsEnabledRegionsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsDefaultControlRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Policy_FieldTerminalPathArrayOfValues) AsCriteriaForDisabledSyncArrayOfValues() ([][]*Policy_CriteriaForDisabledSync, bool) {
	res, ok := fpaov.values.([][]*Policy_CriteriaForDisabledSync)
	return res, ok
}

type Policy_FieldSubPathArrayOfValues struct {
	Policy_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Policy_FieldPathArrayOfValues = (*Policy_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Policy_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Policy_FieldSubPathArrayOfValues) AsCriteriaForDisabledSyncPathArrayOfValues() (PolicyCriteriaForDisabledSync_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PolicyCriteriaForDisabledSync_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PolicyCriteriaForDisabledSync_FieldPath interface {
	gotenobject.FieldPath
	Selector() PolicyCriteriaForDisabledSync_FieldPathSelector
	Get(source *Policy_CriteriaForDisabledSync) []interface{}
	GetSingle(source *Policy_CriteriaForDisabledSync) (interface{}, bool)
	ClearValue(item *Policy_CriteriaForDisabledSync)

	// Those methods build corresponding PolicyCriteriaForDisabledSync_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PolicyCriteriaForDisabledSync_FieldPathValue
	WithIArrayOfValues(values interface{}) PolicyCriteriaForDisabledSync_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PolicyCriteriaForDisabledSync_FieldPathArrayItemValue
}

type PolicyCriteriaForDisabledSync_FieldPathSelector int32

const (
	PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName PolicyCriteriaForDisabledSync_FieldPathSelector = 0
	PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion     PolicyCriteriaForDisabledSync_FieldPathSelector = 1
	PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion       PolicyCriteriaForDisabledSync_FieldPathSelector = 2
)

func (s PolicyCriteriaForDisabledSync_FieldPathSelector) String() string {
	switch s {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return "resource_type_name"
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return "source_region"
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return "dest_region"
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", s))
	}
}

func BuildPolicyCriteriaForDisabledSync_FieldPath(fp gotenobject.RawFieldPath) (PolicyCriteriaForDisabledSync_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Policy_CriteriaForDisabledSync")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource_type_name", "resourceTypeName", "resource-type-name":
			return &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName}, nil
		case "source_region", "sourceRegion", "source-region":
			return &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion}, nil
		case "dest_region", "destRegion", "dest-region":
			return &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Policy_CriteriaForDisabledSync", fp)
}

func ParsePolicyCriteriaForDisabledSync_FieldPath(rawField string) (PolicyCriteriaForDisabledSync_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPolicyCriteriaForDisabledSync_FieldPath(fp)
}

func MustParsePolicyCriteriaForDisabledSync_FieldPath(rawField string) PolicyCriteriaForDisabledSync_FieldPath {
	fp, err := ParsePolicyCriteriaForDisabledSync_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PolicyCriteriaForDisabledSync_FieldTerminalPath struct {
	selector PolicyCriteriaForDisabledSync_FieldPathSelector
}

var _ PolicyCriteriaForDisabledSync_FieldPath = (*PolicyCriteriaForDisabledSync_FieldTerminalPath)(nil)

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) Selector() PolicyCriteriaForDisabledSync_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Policy_CriteriaForDisabledSync
func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) Get(source *Policy_CriteriaForDisabledSync) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
			values = append(values, source.ResourceTypeName)
		case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
			values = append(values, source.SourceRegion)
		case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
			values = append(values, source.DestRegion)
		default:
			panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
		}
	}
	return
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Policy_CriteriaForDisabledSync))
}

// GetSingle returns value pointed by specific field of from source Policy_CriteriaForDisabledSync
func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) GetSingle(source *Policy_CriteriaForDisabledSync) (interface{}, bool) {
	switch fp.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return source.GetResourceTypeName(), source != nil
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return source.GetSourceRegion(), source != nil
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return source.GetDestRegion(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Policy_CriteriaForDisabledSync))
}

// GetDefault returns a default value of the field type
func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return ""
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return ""
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) ClearValue(item *Policy_CriteriaForDisabledSync) {
	if item != nil {
		switch fp.selector {
		case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
			item.ResourceTypeName = ""
		case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
			item.SourceRegion = ""
		case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
			item.DestRegion = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
		}
	}
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Policy_CriteriaForDisabledSync))
}

// IsLeaf - whether field path is holds simple value
func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName ||
		fp.selector == PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion ||
		fp.selector == PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) WithIValue(value interface{}) PolicyCriteriaForDisabledSync_FieldPathValue {
	switch fp.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return &PolicyCriteriaForDisabledSync_FieldTerminalPathValue{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, value: value.(string)}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return &PolicyCriteriaForDisabledSync_FieldTerminalPathValue{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, value: value.(string)}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return &PolicyCriteriaForDisabledSync_FieldTerminalPathValue{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) WithIArrayOfValues(values interface{}) PolicyCriteriaForDisabledSync_FieldPathArrayOfValues {
	fpaov := &PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp}
	switch fp.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return &PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, values: values.([]string)}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return &PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, values: values.([]string)}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return &PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{PolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
	}
	return fpaov
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) WithIArrayItemValue(value interface{}) PolicyCriteriaForDisabledSync_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *PolicyCriteriaForDisabledSync_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PolicyCriteriaForDisabledSync_FieldPathValue allows storing values for CriteriaForDisabledSync fields according to their type
type PolicyCriteriaForDisabledSync_FieldPathValue interface {
	PolicyCriteriaForDisabledSync_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Policy_CriteriaForDisabledSync)
	CompareWith(*Policy_CriteriaForDisabledSync) (cmp int, comparable bool)
}

func ParsePolicyCriteriaForDisabledSync_FieldPathValue(pathStr, valueStr string) (PolicyCriteriaForDisabledSync_FieldPathValue, error) {
	fp, err := ParsePolicyCriteriaForDisabledSync_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CriteriaForDisabledSync field path value from %s: %v", valueStr, err)
	}
	return fpv.(PolicyCriteriaForDisabledSync_FieldPathValue), nil
}

func MustParsePolicyCriteriaForDisabledSync_FieldPathValue(pathStr, valueStr string) PolicyCriteriaForDisabledSync_FieldPathValue {
	fpv, err := ParsePolicyCriteriaForDisabledSync_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PolicyCriteriaForDisabledSync_FieldTerminalPathValue struct {
	PolicyCriteriaForDisabledSync_FieldTerminalPath
	value interface{}
}

var _ PolicyCriteriaForDisabledSync_FieldPathValue = (*PolicyCriteriaForDisabledSync_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CriteriaForDisabledSync' as interface{}
func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) AsResourceTypeNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) AsSourceRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) AsDestRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object CriteriaForDisabledSync
func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) SetTo(target **Policy_CriteriaForDisabledSync) {
	if *target == nil {
		*target = new(Policy_CriteriaForDisabledSync)
	}
	switch fpv.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		(*target).ResourceTypeName = fpv.value.(string)
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		(*target).SourceRegion = fpv.value.(string)
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		(*target).DestRegion = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fpv.selector))
	}
}

func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Policy_CriteriaForDisabledSync)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PolicyCriteriaForDisabledSync_FieldTerminalPathValue' with the value under path in 'Policy_CriteriaForDisabledSync'.
func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) CompareWith(source *Policy_CriteriaForDisabledSync) (int, bool) {
	switch fpv.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		leftValue := fpv.value.(string)
		rightValue := source.GetResourceTypeName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetSourceRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDestRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Policy_CriteriaForDisabledSync: %d", fpv.selector))
	}
}

func (fpv *PolicyCriteriaForDisabledSync_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Policy_CriteriaForDisabledSync))
}

// PolicyCriteriaForDisabledSync_FieldPathArrayItemValue allows storing single item in Path-specific values for CriteriaForDisabledSync according to their type
// Present only for array (repeated) types.
type PolicyCriteriaForDisabledSync_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PolicyCriteriaForDisabledSync_FieldPath
	ContainsValue(*Policy_CriteriaForDisabledSync) bool
}

// ParsePolicyCriteriaForDisabledSync_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePolicyCriteriaForDisabledSync_FieldPathArrayItemValue(pathStr, valueStr string) (PolicyCriteriaForDisabledSync_FieldPathArrayItemValue, error) {
	fp, err := ParsePolicyCriteriaForDisabledSync_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CriteriaForDisabledSync field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PolicyCriteriaForDisabledSync_FieldPathArrayItemValue), nil
}

func MustParsePolicyCriteriaForDisabledSync_FieldPathArrayItemValue(pathStr, valueStr string) PolicyCriteriaForDisabledSync_FieldPathArrayItemValue {
	fpaiv, err := ParsePolicyCriteriaForDisabledSync_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue struct {
	PolicyCriteriaForDisabledSync_FieldTerminalPath
	value interface{}
}

var _ PolicyCriteriaForDisabledSync_FieldPathArrayItemValue = (*PolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Policy_CriteriaForDisabledSync as interface{}
func (fpaiv *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) GetSingle(source *Policy_CriteriaForDisabledSync) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Policy_CriteriaForDisabledSync))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CriteriaForDisabledSync'
func (fpaiv *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) ContainsValue(source *Policy_CriteriaForDisabledSync) bool {
	slice := fpaiv.PolicyCriteriaForDisabledSync_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PolicyCriteriaForDisabledSync_FieldPathArrayOfValues allows storing slice of values for CriteriaForDisabledSync fields according to their type
type PolicyCriteriaForDisabledSync_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PolicyCriteriaForDisabledSync_FieldPath
}

func ParsePolicyCriteriaForDisabledSync_FieldPathArrayOfValues(pathStr, valuesStr string) (PolicyCriteriaForDisabledSync_FieldPathArrayOfValues, error) {
	fp, err := ParsePolicyCriteriaForDisabledSync_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CriteriaForDisabledSync field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PolicyCriteriaForDisabledSync_FieldPathArrayOfValues), nil
}

func MustParsePolicyCriteriaForDisabledSync_FieldPathArrayOfValues(pathStr, valuesStr string) PolicyCriteriaForDisabledSync_FieldPathArrayOfValues {
	fpaov, err := ParsePolicyCriteriaForDisabledSync_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues struct {
	PolicyCriteriaForDisabledSync_FieldTerminalPath
	values interface{}
}

var _ PolicyCriteriaForDisabledSync_FieldPathArrayOfValues = (*PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) AsResourceTypeNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) AsSourceRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) AsDestRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
