// Code generated by protoc-gen-goten-object
// File: edgelq/meta/multi_region/proto/policy.proto
// DO NOT EDIT!!!

package policy

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var ()

func (o *Policy) GotenObjectExt() {}

func (o *Policy) MakeFullFieldMask() *Policy_FieldMask {
	return FullPolicy_FieldMask()
}

func (o *Policy) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_FieldMask()
}

func (o *Policy) MakeDiffFieldMask(other *Policy) *Policy_FieldMask {
	if o == nil && other == nil {
		return &Policy_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_FieldMask()
	}

	res := &Policy_FieldMask{}

	if len(o.GetEnabledRegions()) == len(other.GetEnabledRegions()) {
		for i, lValue := range o.GetEnabledRegions() {
			rValue := other.GetEnabledRegions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorEnabledRegions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorEnabledRegions})
	}
	if o.GetDefaultControlRegion() != other.GetDefaultControlRegion() {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorDefaultControlRegion})
	}

	if len(o.GetCriteriaForDisabledSync()) == len(other.GetCriteriaForDisabledSync()) {
		for i, lValue := range o.GetCriteriaForDisabledSync() {
			rValue := other.GetCriteriaForDisabledSync()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorCriteriaForDisabledSync})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Policy_FieldTerminalPath{selector: Policy_FieldPathSelectorCriteriaForDisabledSync})
	}
	return res
}

func (o *Policy) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy))
}

func (o *Policy) Clone() *Policy {
	if o == nil {
		return nil
	}
	result := &Policy{}
	result.EnabledRegions = make([]string, len(o.EnabledRegions))
	for i, sourceValue := range o.EnabledRegions {
		result.EnabledRegions[i] = sourceValue
	}
	result.DefaultControlRegion = o.DefaultControlRegion
	result.CriteriaForDisabledSync = make([]*Policy_CriteriaForDisabledSync, len(o.CriteriaForDisabledSync))
	for i, sourceValue := range o.CriteriaForDisabledSync {
		result.CriteriaForDisabledSync[i] = sourceValue.Clone()
	}
	return result
}

func (o *Policy) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy) Merge(source *Policy) {
	for _, sourceValue := range source.GetEnabledRegions() {
		exists := false
		for _, currentValue := range o.EnabledRegions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.EnabledRegions = append(o.EnabledRegions, newDstElement)
		}
	}

	o.DefaultControlRegion = source.GetDefaultControlRegion()
	for _, sourceValue := range source.GetCriteriaForDisabledSync() {
		exists := false
		for _, currentValue := range o.CriteriaForDisabledSync {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Policy_CriteriaForDisabledSync
			if sourceValue != nil {
				newDstElement = new(Policy_CriteriaForDisabledSync)
				newDstElement.Merge(sourceValue)
			}
			o.CriteriaForDisabledSync = append(o.CriteriaForDisabledSync, newDstElement)
		}
	}

}

func (o *Policy) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy))
}

func (o *Policy_CriteriaForDisabledSync) GotenObjectExt() {}

func (o *Policy_CriteriaForDisabledSync) MakeFullFieldMask() *Policy_CriteriaForDisabledSync_FieldMask {
	return FullPolicy_CriteriaForDisabledSync_FieldMask()
}

func (o *Policy_CriteriaForDisabledSync) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPolicy_CriteriaForDisabledSync_FieldMask()
}

func (o *Policy_CriteriaForDisabledSync) MakeDiffFieldMask(other *Policy_CriteriaForDisabledSync) *Policy_CriteriaForDisabledSync_FieldMask {
	if o == nil && other == nil {
		return &Policy_CriteriaForDisabledSync_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPolicy_CriteriaForDisabledSync_FieldMask()
	}

	res := &Policy_CriteriaForDisabledSync_FieldMask{}
	if o.GetResourceTypeName() != other.GetResourceTypeName() {
		res.Paths = append(res.Paths, &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName})
	}
	if o.GetSourceRegion() != other.GetSourceRegion() {
		res.Paths = append(res.Paths, &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion})
	}
	if o.GetDestRegion() != other.GetDestRegion() {
		res.Paths = append(res.Paths, &PolicyCriteriaForDisabledSync_FieldTerminalPath{selector: PolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion})
	}
	return res
}

func (o *Policy_CriteriaForDisabledSync) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Policy_CriteriaForDisabledSync))
}

func (o *Policy_CriteriaForDisabledSync) Clone() *Policy_CriteriaForDisabledSync {
	if o == nil {
		return nil
	}
	result := &Policy_CriteriaForDisabledSync{}
	result.ResourceTypeName = o.ResourceTypeName
	result.SourceRegion = o.SourceRegion
	result.DestRegion = o.DestRegion
	return result
}

func (o *Policy_CriteriaForDisabledSync) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Policy_CriteriaForDisabledSync) Merge(source *Policy_CriteriaForDisabledSync) {
	o.ResourceTypeName = source.GetResourceTypeName()
	o.SourceRegion = source.GetSourceRegion()
	o.DestRegion = source.GetDestRegion()
}

func (o *Policy_CriteriaForDisabledSync) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Policy_CriteriaForDisabledSync))
}
