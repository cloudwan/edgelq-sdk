// Code generated by protoc-gen-goten-object
// File: edgelq/meta/multi_region/proto/syncing_meta.proto
// DO NOT EDIT!!!

package syncing_meta

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var ()

func (o *SyncingMeta) GotenObjectExt() {}

func (o *SyncingMeta) MakeFullFieldMask() *SyncingMeta_FieldMask {
	return FullSyncingMeta_FieldMask()
}

func (o *SyncingMeta) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSyncingMeta_FieldMask()
}

func (o *SyncingMeta) MakeDiffFieldMask(other *SyncingMeta) *SyncingMeta_FieldMask {
	if o == nil && other == nil {
		return &SyncingMeta_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSyncingMeta_FieldMask()
	}

	res := &SyncingMeta_FieldMask{}
	if o.GetOwningRegion() != other.GetOwningRegion() {
		res.Paths = append(res.Paths, &SyncingMeta_FieldTerminalPath{selector: SyncingMeta_FieldPathSelectorOwningRegion})
	}

	if len(o.GetRegions()) == len(other.GetRegions()) {
		for i, lValue := range o.GetRegions() {
			rValue := other.GetRegions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &SyncingMeta_FieldTerminalPath{selector: SyncingMeta_FieldPathSelectorRegions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SyncingMeta_FieldTerminalPath{selector: SyncingMeta_FieldPathSelectorRegions})
	}
	return res
}

func (o *SyncingMeta) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SyncingMeta))
}

func (o *SyncingMeta) Clone() *SyncingMeta {
	if o == nil {
		return nil
	}
	result := &SyncingMeta{}
	result.OwningRegion = o.OwningRegion
	result.Regions = make([]string, len(o.Regions))
	for i, sourceValue := range o.Regions {
		result.Regions[i] = sourceValue
	}
	return result
}

func (o *SyncingMeta) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SyncingMeta) Merge(source *SyncingMeta) {
	o.OwningRegion = source.GetOwningRegion()
	for _, sourceValue := range source.GetRegions() {
		exists := false
		for _, currentValue := range o.Regions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Regions = append(o.Regions, newDstElement)
		}
	}

}

func (o *SyncingMeta) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SyncingMeta))
}
