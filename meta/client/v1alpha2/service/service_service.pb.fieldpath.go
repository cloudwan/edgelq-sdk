// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/service_service.proto
// DO NOT EDIT!!!

package service_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &service.Service{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetServiceRequest_FieldPathSelector
	Get(source *GetServiceRequest) []interface{}
	GetSingle(source *GetServiceRequest) (interface{}, bool)
	ClearValue(item *GetServiceRequest)

	// Those methods build corresponding GetServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetServiceRequest_FieldPathArrayItemValue
}

type GetServiceRequest_FieldPathSelector int32

const (
	GetServiceRequest_FieldPathSelectorName      GetServiceRequest_FieldPathSelector = 0
	GetServiceRequest_FieldPathSelectorFieldMask GetServiceRequest_FieldPathSelector = 1
	GetServiceRequest_FieldPathSelectorView      GetServiceRequest_FieldPathSelector = 2
)

func (s GetServiceRequest_FieldPathSelector) String() string {
	switch s {
	case GetServiceRequest_FieldPathSelectorName:
		return "name"
	case GetServiceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetServiceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", s))
	}
}

func BuildGetServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (GetServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetServiceRequest_FieldTerminalPath{selector: GetServiceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetServiceRequest_FieldTerminalPath{selector: GetServiceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetServiceRequest_FieldTerminalPath{selector: GetServiceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetServiceRequest", fp)
}

func ParseGetServiceRequest_FieldPath(rawField string) (GetServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetServiceRequest_FieldPath(fp)
}

func MustParseGetServiceRequest_FieldPath(rawField string) GetServiceRequest_FieldPath {
	fp, err := ParseGetServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetServiceRequest_FieldTerminalPath struct {
	selector GetServiceRequest_FieldPathSelector
}

var _ GetServiceRequest_FieldPath = (*GetServiceRequest_FieldTerminalPath)(nil)

func (fp *GetServiceRequest_FieldTerminalPath) Selector() GetServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetServiceRequest
func (fp *GetServiceRequest_FieldTerminalPath) Get(source *GetServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetServiceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetServiceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetServiceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetServiceRequest))
}

// GetSingle returns value pointed by specific field of from source GetServiceRequest
func (fp *GetServiceRequest_FieldTerminalPath) GetSingle(source *GetServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case GetServiceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetServiceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetServiceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
	}
}

func (fp *GetServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetServiceRequest_FieldPathSelectorName:
		return (*service.Reference)(nil)
	case GetServiceRequest_FieldPathSelectorFieldMask:
		return (*service.Service_FieldMask)(nil)
	case GetServiceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
	}
}

func (fp *GetServiceRequest_FieldTerminalPath) ClearValue(item *GetServiceRequest) {
	if item != nil {
		switch fp.selector {
		case GetServiceRequest_FieldPathSelectorName:
			item.Name = nil
		case GetServiceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetServiceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *GetServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetServiceRequest_FieldPathSelectorName ||
		fp.selector == GetServiceRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetServiceRequest_FieldPathSelectorView
}

func (fp *GetServiceRequest_FieldTerminalPath) WithIValue(value interface{}) GetServiceRequest_FieldPathValue {
	switch fp.selector {
	case GetServiceRequest_FieldPathSelectorName:
		return &GetServiceRequest_FieldTerminalPathValue{GetServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Reference)}
	case GetServiceRequest_FieldPathSelectorFieldMask:
		return &GetServiceRequest_FieldTerminalPathValue{GetServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	case GetServiceRequest_FieldPathSelectorView:
		return &GetServiceRequest_FieldTerminalPathValue{GetServiceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
	}
}

func (fp *GetServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetServiceRequest_FieldPathArrayOfValues {
	fpaov := &GetServiceRequest_FieldTerminalPathArrayOfValues{GetServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetServiceRequest_FieldPathSelectorName:
		return &GetServiceRequest_FieldTerminalPathArrayOfValues{GetServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Reference)}
	case GetServiceRequest_FieldPathSelectorFieldMask:
		return &GetServiceRequest_FieldTerminalPathArrayOfValues{GetServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	case GetServiceRequest_FieldPathSelectorView:
		return &GetServiceRequest_FieldTerminalPathArrayOfValues{GetServiceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fp.selector))
	}
}

func (fp *GetServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetServiceRequest_FieldPathValue allows storing values for GetServiceRequest fields according to their type
type GetServiceRequest_FieldPathValue interface {
	GetServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetServiceRequest)
	CompareWith(*GetServiceRequest) (cmp int, comparable bool)
}

func ParseGetServiceRequest_FieldPathValue(pathStr, valueStr string) (GetServiceRequest_FieldPathValue, error) {
	fp, err := ParseGetServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetServiceRequest_FieldPathValue), nil
}

func MustParseGetServiceRequest_FieldPathValue(pathStr, valueStr string) GetServiceRequest_FieldPathValue {
	fpv, err := ParseGetServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetServiceRequest_FieldTerminalPathValue struct {
	GetServiceRequest_FieldTerminalPath
	value interface{}
}

var _ GetServiceRequest_FieldPathValue = (*GetServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetServiceRequest' as interface{}
func (fpv *GetServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetServiceRequest_FieldTerminalPathValue) AsNameValue() (*service.Reference, bool) {
	res, ok := fpv.value.(*service.Reference)
	return res, ok
}
func (fpv *GetServiceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}
func (fpv *GetServiceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetServiceRequest
func (fpv *GetServiceRequest_FieldTerminalPathValue) SetTo(target **GetServiceRequest) {
	if *target == nil {
		*target = new(GetServiceRequest)
	}
	switch fpv.selector {
	case GetServiceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*service.Reference)
	case GetServiceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service.Service_FieldMask)
	case GetServiceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fpv.selector))
	}
}

func (fpv *GetServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetServiceRequest_FieldTerminalPathValue' with the value under path in 'GetServiceRequest'.
func (fpv *GetServiceRequest_FieldTerminalPathValue) CompareWith(source *GetServiceRequest) (int, bool) {
	switch fpv.selector {
	case GetServiceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*service.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetServiceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetServiceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetServiceRequest: %d", fpv.selector))
	}
}

func (fpv *GetServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetServiceRequest))
}

// GetServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetServiceRequest according to their type
// Present only for array (repeated) types.
type GetServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetServiceRequest_FieldPath
	ContainsValue(*GetServiceRequest) bool
}

// ParseGetServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseGetServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetServiceRequest_FieldTerminalPathArrayItemValue struct {
	GetServiceRequest_FieldTerminalPath
	value interface{}
}

var _ GetServiceRequest_FieldPathArrayItemValue = (*GetServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetServiceRequest as interface{}
func (fpaiv *GetServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetServiceRequest'
func (fpaiv *GetServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetServiceRequest) bool {
	slice := fpaiv.GetServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetServiceRequest_FieldPathArrayOfValues allows storing slice of values for GetServiceRequest fields according to their type
type GetServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetServiceRequest_FieldPath
}

func ParseGetServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseGetServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetServiceRequest_FieldTerminalPathArrayOfValues struct {
	GetServiceRequest_FieldTerminalPath
	values interface{}
}

var _ GetServiceRequest_FieldPathArrayOfValues = (*GetServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetServiceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*service.Reference) {
			values = append(values, v)
		}
	case GetServiceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	case GetServiceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetServiceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*service.Reference, bool) {
	res, ok := fpaov.values.([]*service.Reference)
	return res, ok
}
func (fpaov *GetServiceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}
func (fpaov *GetServiceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetServicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetServicesRequest_FieldPathSelector
	Get(source *BatchGetServicesRequest) []interface{}
	GetSingle(source *BatchGetServicesRequest) (interface{}, bool)
	ClearValue(item *BatchGetServicesRequest)

	// Those methods build corresponding BatchGetServicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetServicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetServicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetServicesRequest_FieldPathArrayItemValue
}

type BatchGetServicesRequest_FieldPathSelector int32

const (
	BatchGetServicesRequest_FieldPathSelectorNames     BatchGetServicesRequest_FieldPathSelector = 0
	BatchGetServicesRequest_FieldPathSelectorFieldMask BatchGetServicesRequest_FieldPathSelector = 1
	BatchGetServicesRequest_FieldPathSelectorView      BatchGetServicesRequest_FieldPathSelector = 2
)

func (s BatchGetServicesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetServicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", s))
	}
}

func BuildBatchGetServicesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetServicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetServicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetServicesRequest", fp)
}

func ParseBatchGetServicesRequest_FieldPath(rawField string) (BatchGetServicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetServicesRequest_FieldPath(fp)
}

func MustParseBatchGetServicesRequest_FieldPath(rawField string) BatchGetServicesRequest_FieldPath {
	fp, err := ParseBatchGetServicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetServicesRequest_FieldTerminalPath struct {
	selector BatchGetServicesRequest_FieldPathSelector
}

var _ BatchGetServicesRequest_FieldPath = (*BatchGetServicesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetServicesRequest_FieldTerminalPath) Selector() BatchGetServicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetServicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetServicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetServicesRequest
func (fp *BatchGetServicesRequest_FieldTerminalPath) Get(source *BatchGetServicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetServicesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetServicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetServicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetServicesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetServicesRequest
func (fp *BatchGetServicesRequest_FieldTerminalPath) GetSingle(source *BatchGetServicesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetServicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetServicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetServicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		return ([]*service.Reference)(nil)
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		return (*service.Service_FieldMask)(nil)
	case BatchGetServicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) ClearValue(item *BatchGetServicesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetServicesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetServicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetServicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetServicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetServicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetServicesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetServicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetServicesRequest_FieldPathSelectorView
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetServicesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		return &BatchGetServicesRequest_FieldTerminalPathValue{BatchGetServicesRequest_FieldTerminalPath: *fp, value: value.([]*service.Reference)}
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		return &BatchGetServicesRequest_FieldTerminalPathValue{BatchGetServicesRequest_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	case BatchGetServicesRequest_FieldPathSelectorView:
		return &BatchGetServicesRequest_FieldTerminalPathValue{BatchGetServicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetServicesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetServicesRequest_FieldTerminalPathArrayOfValues{BatchGetServicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		return &BatchGetServicesRequest_FieldTerminalPathArrayOfValues{BatchGetServicesRequest_FieldTerminalPath: *fp, values: values.([][]*service.Reference)}
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		return &BatchGetServicesRequest_FieldTerminalPathArrayOfValues{BatchGetServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	case BatchGetServicesRequest_FieldPathSelectorView:
		return &BatchGetServicesRequest_FieldTerminalPathArrayOfValues{BatchGetServicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetServicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		return &BatchGetServicesRequest_FieldTerminalPathArrayItemValue{BatchGetServicesRequest_FieldTerminalPath: *fp, value: value.(*service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetServicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetServicesRequest_FieldPathValue allows storing values for BatchGetServicesRequest fields according to their type
type BatchGetServicesRequest_FieldPathValue interface {
	BatchGetServicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetServicesRequest)
	CompareWith(*BatchGetServicesRequest) (cmp int, comparable bool)
}

func ParseBatchGetServicesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetServicesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetServicesRequest_FieldPathValue), nil
}

func MustParseBatchGetServicesRequest_FieldPathValue(pathStr, valueStr string) BatchGetServicesRequest_FieldPathValue {
	fpv, err := ParseBatchGetServicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetServicesRequest_FieldTerminalPathValue struct {
	BatchGetServicesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetServicesRequest_FieldPathValue = (*BatchGetServicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetServicesRequest' as interface{}
func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) AsNamesValue() ([]*service.Reference, bool) {
	res, ok := fpv.value.([]*service.Reference)
	return res, ok
}
func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}
func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetServicesRequest
func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) SetTo(target **BatchGetServicesRequest) {
	if *target == nil {
		*target = new(BatchGetServicesRequest)
	}
	switch fpv.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*service.Reference)
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service.Service_FieldMask)
	case BatchGetServicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetServicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetServicesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetServicesRequest'.
func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetServicesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetServicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetServicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetServicesRequest))
}

// BatchGetServicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetServicesRequest according to their type
// Present only for array (repeated) types.
type BatchGetServicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetServicesRequest_FieldPath
	ContainsValue(*BatchGetServicesRequest) bool
}

// ParseBatchGetServicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetServicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetServicesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetServicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetServicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetServicesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetServicesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetServicesRequest_FieldPathArrayItemValue = (*BatchGetServicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetServicesRequest as interface{}
func (fpaiv *BatchGetServicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetServicesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*service.Reference, bool) {
	res, ok := fpaiv.value.(*service.Reference)
	return res, ok
}

func (fpaiv *BatchGetServicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetServicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetServicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetServicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetServicesRequest'
func (fpaiv *BatchGetServicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetServicesRequest) bool {
	slice := fpaiv.BatchGetServicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetServicesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetServicesRequest fields according to their type
type BatchGetServicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetServicesRequest_FieldPath
}

func ParseBatchGetServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetServicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetServicesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetServicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetServicesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetServicesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetServicesRequest_FieldPathArrayOfValues = (*BatchGetServicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetServicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetServicesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*service.Reference) {
			values = append(values, v)
		}
	case BatchGetServicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	case BatchGetServicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetServicesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*service.Reference, bool) {
	res, ok := fpaov.values.([][]*service.Reference)
	return res, ok
}
func (fpaov *BatchGetServicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}
func (fpaov *BatchGetServicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetServicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetServicesResponse_FieldPathSelector
	Get(source *BatchGetServicesResponse) []interface{}
	GetSingle(source *BatchGetServicesResponse) (interface{}, bool)
	ClearValue(item *BatchGetServicesResponse)

	// Those methods build corresponding BatchGetServicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetServicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetServicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetServicesResponse_FieldPathArrayItemValue
}

type BatchGetServicesResponse_FieldPathSelector int32

const (
	BatchGetServicesResponse_FieldPathSelectorServices BatchGetServicesResponse_FieldPathSelector = 0
	BatchGetServicesResponse_FieldPathSelectorMissing  BatchGetServicesResponse_FieldPathSelector = 1
)

func (s BatchGetServicesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return "services"
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", s))
	}
}

func BuildBatchGetServicesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetServicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetServicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "services":
			return &BatchGetServicesResponse_FieldTerminalPath{selector: BatchGetServicesResponse_FieldPathSelectorServices}, nil
		case "missing":
			return &BatchGetServicesResponse_FieldTerminalPath{selector: BatchGetServicesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "services":
			if subpath, err := service.BuildService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetServicesResponse_FieldSubPath{selector: BatchGetServicesResponse_FieldPathSelectorServices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetServicesResponse", fp)
}

func ParseBatchGetServicesResponse_FieldPath(rawField string) (BatchGetServicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetServicesResponse_FieldPath(fp)
}

func MustParseBatchGetServicesResponse_FieldPath(rawField string) BatchGetServicesResponse_FieldPath {
	fp, err := ParseBatchGetServicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetServicesResponse_FieldTerminalPath struct {
	selector BatchGetServicesResponse_FieldPathSelector
}

var _ BatchGetServicesResponse_FieldPath = (*BatchGetServicesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetServicesResponse_FieldTerminalPath) Selector() BatchGetServicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetServicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetServicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetServicesResponse
func (fp *BatchGetServicesResponse_FieldTerminalPath) Get(source *BatchGetServicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetServicesResponse_FieldPathSelectorServices:
			for _, value := range source.GetServices() {
				values = append(values, value)
			}
		case BatchGetServicesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetServicesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetServicesResponse
func (fp *BatchGetServicesResponse_FieldTerminalPath) GetSingle(source *BatchGetServicesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		res := source.GetServices()
		return res, res != nil
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetServicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetServicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return ([]*service.Service)(nil)
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		return ([]*service.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) ClearValue(item *BatchGetServicesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetServicesResponse_FieldPathSelectorServices:
			item.Services = nil
		case BatchGetServicesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetServicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetServicesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetServicesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return &BatchGetServicesResponse_FieldTerminalPathValue{BatchGetServicesResponse_FieldTerminalPath: *fp, value: value.([]*service.Service)}
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		return &BatchGetServicesResponse_FieldTerminalPathValue{BatchGetServicesResponse_FieldTerminalPath: *fp, value: value.([]*service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetServicesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetServicesResponse_FieldTerminalPathArrayOfValues{BatchGetServicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return &BatchGetServicesResponse_FieldTerminalPathArrayOfValues{BatchGetServicesResponse_FieldTerminalPath: *fp, values: values.([][]*service.Service)}
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		return &BatchGetServicesResponse_FieldTerminalPathArrayOfValues{BatchGetServicesResponse_FieldTerminalPath: *fp, values: values.([][]*service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetServicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return &BatchGetServicesResponse_FieldTerminalPathArrayItemValue{BatchGetServicesResponse_FieldTerminalPath: *fp, value: value.(*service.Service)}
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		return &BatchGetServicesResponse_FieldTerminalPathArrayItemValue{BatchGetServicesResponse_FieldTerminalPath: *fp, value: value.(*service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetServicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetServicesResponse_FieldSubPath struct {
	selector BatchGetServicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetServicesResponse_FieldPath = (*BatchGetServicesResponse_FieldSubPath)(nil)

func (fps *BatchGetServicesResponse_FieldSubPath) Selector() BatchGetServicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetServicesResponse_FieldSubPath) AsServicesSubPath() (service.Service_FieldPath, bool) {
	res, ok := fps.subPath.(service.Service_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetServicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetServicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetServicesResponse
func (fps *BatchGetServicesResponse_FieldSubPath) Get(source *BatchGetServicesResponse) (values []interface{}) {
	if asServiceFieldPath, ok := fps.AsServicesSubPath(); ok {
		for _, item := range source.GetServices() {
			values = append(values, asServiceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetServicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetServicesResponse))
}

// GetSingle returns value of selected field from source BatchGetServicesResponse
func (fps *BatchGetServicesResponse_FieldSubPath) GetSingle(source *BatchGetServicesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		if len(source.GetServices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetServicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetServicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetServicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetServicesResponse_FieldSubPath) ClearValue(item *BatchGetServicesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetServicesResponse_FieldPathSelectorServices:
			for _, subItem := range item.Services {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetServicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetServicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetServicesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetServicesResponse_FieldPathValue {
	return &BatchGetServicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetServicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetServicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetServicesResponse_FieldPathArrayOfValues {
	return &BatchGetServicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetServicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetServicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetServicesResponse_FieldPathArrayItemValue {
	return &BatchGetServicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetServicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetServicesResponse_FieldPathValue allows storing values for BatchGetServicesResponse fields according to their type
type BatchGetServicesResponse_FieldPathValue interface {
	BatchGetServicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetServicesResponse)
	CompareWith(*BatchGetServicesResponse) (cmp int, comparable bool)
}

func ParseBatchGetServicesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetServicesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetServicesResponse_FieldPathValue), nil
}

func MustParseBatchGetServicesResponse_FieldPathValue(pathStr, valueStr string) BatchGetServicesResponse_FieldPathValue {
	fpv, err := ParseBatchGetServicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetServicesResponse_FieldTerminalPathValue struct {
	BatchGetServicesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetServicesResponse_FieldPathValue = (*BatchGetServicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetServicesResponse' as interface{}
func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) AsServicesValue() ([]*service.Service, bool) {
	res, ok := fpv.value.([]*service.Service)
	return res, ok
}
func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) AsMissingValue() ([]*service.Reference, bool) {
	res, ok := fpv.value.([]*service.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetServicesResponse
func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) SetTo(target **BatchGetServicesResponse) {
	if *target == nil {
		*target = new(BatchGetServicesResponse)
	}
	switch fpv.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		(*target).Services = fpv.value.([]*service.Service)
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*service.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetServicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetServicesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetServicesResponse'.
func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetServicesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return 0, false
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetServicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetServicesResponse))
}

type BatchGetServicesResponse_FieldSubPathValue struct {
	BatchGetServicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetServicesResponse_FieldPathValue = (*BatchGetServicesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetServicesResponse_FieldSubPathValue) AsServicesPathValue() (service.Service_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service.Service_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetServicesResponse_FieldSubPathValue) SetTo(target **BatchGetServicesResponse) {
	if *target == nil {
		*target = new(BatchGetServicesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetServicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetServicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetServicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetServicesResponse_FieldSubPathValue) CompareWith(source *BatchGetServicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetServicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetServicesResponse))
}

// BatchGetServicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetServicesResponse according to their type
// Present only for array (repeated) types.
type BatchGetServicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetServicesResponse_FieldPath
	ContainsValue(*BatchGetServicesResponse) bool
}

// ParseBatchGetServicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetServicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetServicesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetServicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetServicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetServicesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetServicesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetServicesResponse_FieldPathArrayItemValue = (*BatchGetServicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetServicesResponse as interface{}
func (fpaiv *BatchGetServicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetServicesResponse_FieldTerminalPathArrayItemValue) AsServicesItemValue() (*service.Service, bool) {
	res, ok := fpaiv.value.(*service.Service)
	return res, ok
}
func (fpaiv *BatchGetServicesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*service.Reference, bool) {
	res, ok := fpaiv.value.(*service.Reference)
	return res, ok
}

func (fpaiv *BatchGetServicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetServicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetServicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetServicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetServicesResponse'
func (fpaiv *BatchGetServicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetServicesResponse) bool {
	slice := fpaiv.BatchGetServicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetServicesResponse_FieldSubPathArrayItemValue struct {
	BatchGetServicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetServicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetServicesResponse_FieldSubPathArrayItemValue) AsServicesPathItemValue() (service.Service_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetServicesResponse'
func (fpaivs *BatchGetServicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetServicesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetServicesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetServicesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetServicesResponse fields according to their type
type BatchGetServicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetServicesResponse_FieldPath
}

func ParseBatchGetServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetServicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetServicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetServicesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetServicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetServicesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetServicesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetServicesResponse_FieldPathArrayOfValues = (*BatchGetServicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetServicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetServicesResponse_FieldPathSelectorServices:
		for _, v := range fpaov.values.([][]*service.Service) {
			values = append(values, v)
		}
	case BatchGetServicesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*service.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetServicesResponse_FieldTerminalPathArrayOfValues) AsServicesArrayOfValues() ([][]*service.Service, bool) {
	res, ok := fpaov.values.([][]*service.Service)
	return res, ok
}
func (fpaov *BatchGetServicesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*service.Reference, bool) {
	res, ok := fpaov.values.([][]*service.Reference)
	return res, ok
}

type BatchGetServicesResponse_FieldSubPathArrayOfValues struct {
	BatchGetServicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetServicesResponse_FieldPathArrayOfValues = (*BatchGetServicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetServicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetServicesResponse_FieldSubPathArrayOfValues) AsServicesPathArrayOfValues() (service.Service_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service.Service_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListServicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListServicesRequest_FieldPathSelector
	Get(source *ListServicesRequest) []interface{}
	GetSingle(source *ListServicesRequest) (interface{}, bool)
	ClearValue(item *ListServicesRequest)

	// Those methods build corresponding ListServicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListServicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListServicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListServicesRequest_FieldPathArrayItemValue
}

type ListServicesRequest_FieldPathSelector int32

const (
	ListServicesRequest_FieldPathSelectorPageSize  ListServicesRequest_FieldPathSelector = 0
	ListServicesRequest_FieldPathSelectorPageToken ListServicesRequest_FieldPathSelector = 1
	ListServicesRequest_FieldPathSelectorOrderBy   ListServicesRequest_FieldPathSelector = 2
	ListServicesRequest_FieldPathSelectorFilter    ListServicesRequest_FieldPathSelector = 3
	ListServicesRequest_FieldPathSelectorFieldMask ListServicesRequest_FieldPathSelector = 4
	ListServicesRequest_FieldPathSelectorView      ListServicesRequest_FieldPathSelector = 5
)

func (s ListServicesRequest_FieldPathSelector) String() string {
	switch s {
	case ListServicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListServicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListServicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListServicesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListServicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListServicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", s))
	}
}

func BuildListServicesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListServicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListServicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListServicesRequest", fp)
}

func ParseListServicesRequest_FieldPath(rawField string) (ListServicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListServicesRequest_FieldPath(fp)
}

func MustParseListServicesRequest_FieldPath(rawField string) ListServicesRequest_FieldPath {
	fp, err := ParseListServicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListServicesRequest_FieldTerminalPath struct {
	selector ListServicesRequest_FieldPathSelector
}

var _ ListServicesRequest_FieldPath = (*ListServicesRequest_FieldTerminalPath)(nil)

func (fp *ListServicesRequest_FieldTerminalPath) Selector() ListServicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListServicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListServicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListServicesRequest
func (fp *ListServicesRequest_FieldTerminalPath) Get(source *ListServicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListServicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListServicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListServicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListServicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListServicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListServicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListServicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListServicesRequest))
}

// GetSingle returns value pointed by specific field of from source ListServicesRequest
func (fp *ListServicesRequest_FieldTerminalPath) GetSingle(source *ListServicesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListServicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListServicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListServicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListServicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListServicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
	}
}

func (fp *ListServicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListServicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListServicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListServicesRequest_FieldPathSelectorPageToken:
		return (*service.PagerCursor)(nil)
	case ListServicesRequest_FieldPathSelectorOrderBy:
		return (*service.OrderBy)(nil)
	case ListServicesRequest_FieldPathSelectorFilter:
		return (*service.Filter)(nil)
	case ListServicesRequest_FieldPathSelectorFieldMask:
		return (*service.Service_FieldMask)(nil)
	case ListServicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
	}
}

func (fp *ListServicesRequest_FieldTerminalPath) ClearValue(item *ListServicesRequest) {
	if item != nil {
		switch fp.selector {
		case ListServicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListServicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListServicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListServicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListServicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListServicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListServicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListServicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListServicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListServicesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListServicesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListServicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListServicesRequest_FieldPathSelectorFilter ||
		fp.selector == ListServicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListServicesRequest_FieldPathSelectorView
}

func (fp *ListServicesRequest_FieldTerminalPath) WithIValue(value interface{}) ListServicesRequest_FieldPathValue {
	switch fp.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		return &ListServicesRequest_FieldTerminalPathValue{ListServicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListServicesRequest_FieldPathSelectorPageToken:
		return &ListServicesRequest_FieldTerminalPathValue{ListServicesRequest_FieldTerminalPath: *fp, value: value.(*service.PagerCursor)}
	case ListServicesRequest_FieldPathSelectorOrderBy:
		return &ListServicesRequest_FieldTerminalPathValue{ListServicesRequest_FieldTerminalPath: *fp, value: value.(*service.OrderBy)}
	case ListServicesRequest_FieldPathSelectorFilter:
		return &ListServicesRequest_FieldTerminalPathValue{ListServicesRequest_FieldTerminalPath: *fp, value: value.(*service.Filter)}
	case ListServicesRequest_FieldPathSelectorFieldMask:
		return &ListServicesRequest_FieldTerminalPathValue{ListServicesRequest_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	case ListServicesRequest_FieldPathSelectorView:
		return &ListServicesRequest_FieldTerminalPathValue{ListServicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
	}
}

func (fp *ListServicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListServicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListServicesRequest_FieldPathArrayOfValues {
	fpaov := &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		return &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListServicesRequest_FieldPathSelectorPageToken:
		return &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.PagerCursor)}
	case ListServicesRequest_FieldPathSelectorOrderBy:
		return &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.OrderBy)}
	case ListServicesRequest_FieldPathSelectorFilter:
		return &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.Filter)}
	case ListServicesRequest_FieldPathSelectorFieldMask:
		return &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	case ListServicesRequest_FieldPathSelectorView:
		return &ListServicesRequest_FieldTerminalPathArrayOfValues{ListServicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListServicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListServicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListServicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fp.selector))
	}
}

func (fp *ListServicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListServicesRequest_FieldPathValue allows storing values for ListServicesRequest fields according to their type
type ListServicesRequest_FieldPathValue interface {
	ListServicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListServicesRequest)
	CompareWith(*ListServicesRequest) (cmp int, comparable bool)
}

func ParseListServicesRequest_FieldPathValue(pathStr, valueStr string) (ListServicesRequest_FieldPathValue, error) {
	fp, err := ParseListServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListServicesRequest_FieldPathValue), nil
}

func MustParseListServicesRequest_FieldPathValue(pathStr, valueStr string) ListServicesRequest_FieldPathValue {
	fpv, err := ParseListServicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListServicesRequest_FieldTerminalPathValue struct {
	ListServicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListServicesRequest_FieldPathValue = (*ListServicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListServicesRequest' as interface{}
func (fpv *ListServicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListServicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListServicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*service.PagerCursor, bool) {
	res, ok := fpv.value.(*service.PagerCursor)
	return res, ok
}
func (fpv *ListServicesRequest_FieldTerminalPathValue) AsOrderByValue() (*service.OrderBy, bool) {
	res, ok := fpv.value.(*service.OrderBy)
	return res, ok
}
func (fpv *ListServicesRequest_FieldTerminalPathValue) AsFilterValue() (*service.Filter, bool) {
	res, ok := fpv.value.(*service.Filter)
	return res, ok
}
func (fpv *ListServicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}
func (fpv *ListServicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListServicesRequest
func (fpv *ListServicesRequest_FieldTerminalPathValue) SetTo(target **ListServicesRequest) {
	if *target == nil {
		*target = new(ListServicesRequest)
	}
	switch fpv.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListServicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*service.PagerCursor)
	case ListServicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*service.OrderBy)
	case ListServicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*service.Filter)
	case ListServicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service.Service_FieldMask)
	case ListServicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListServicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListServicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListServicesRequest_FieldTerminalPathValue' with the value under path in 'ListServicesRequest'.
func (fpv *ListServicesRequest_FieldTerminalPathValue) CompareWith(source *ListServicesRequest) (int, bool) {
	switch fpv.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListServicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListServicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListServicesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListServicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListServicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListServicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListServicesRequest))
}

// ListServicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListServicesRequest according to their type
// Present only for array (repeated) types.
type ListServicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListServicesRequest_FieldPath
	ContainsValue(*ListServicesRequest) bool
}

// ParseListServicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListServicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListServicesRequest_FieldPathArrayItemValue), nil
}

func MustParseListServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListServicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListServicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListServicesRequest_FieldTerminalPathArrayItemValue struct {
	ListServicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListServicesRequest_FieldPathArrayItemValue = (*ListServicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListServicesRequest as interface{}
func (fpaiv *ListServicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListServicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListServicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListServicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListServicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListServicesRequest'
func (fpaiv *ListServicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListServicesRequest) bool {
	slice := fpaiv.ListServicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListServicesRequest_FieldPathArrayOfValues allows storing slice of values for ListServicesRequest fields according to their type
type ListServicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListServicesRequest_FieldPath
}

func ParseListServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListServicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListServicesRequest_FieldPathArrayOfValues), nil
}

func MustParseListServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListServicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListServicesRequest_FieldTerminalPathArrayOfValues struct {
	ListServicesRequest_FieldTerminalPath
	values interface{}
}

var _ ListServicesRequest_FieldPathArrayOfValues = (*ListServicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListServicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListServicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*service.PagerCursor) {
			values = append(values, v)
		}
	case ListServicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*service.OrderBy) {
			values = append(values, v)
		}
	case ListServicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*service.Filter) {
			values = append(values, v)
		}
	case ListServicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	case ListServicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service.PagerCursor)
	return res, ok
}
func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*service.OrderBy, bool) {
	res, ok := fpaov.values.([]*service.OrderBy)
	return res, ok
}
func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*service.Filter, bool) {
	res, ok := fpaov.values.([]*service.Filter)
	return res, ok
}
func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}
func (fpaov *ListServicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListServicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListServicesResponse_FieldPathSelector
	Get(source *ListServicesResponse) []interface{}
	GetSingle(source *ListServicesResponse) (interface{}, bool)
	ClearValue(item *ListServicesResponse)

	// Those methods build corresponding ListServicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListServicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListServicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListServicesResponse_FieldPathArrayItemValue
}

type ListServicesResponse_FieldPathSelector int32

const (
	ListServicesResponse_FieldPathSelectorServices      ListServicesResponse_FieldPathSelector = 0
	ListServicesResponse_FieldPathSelectorPrevPageToken ListServicesResponse_FieldPathSelector = 1
	ListServicesResponse_FieldPathSelectorNextPageToken ListServicesResponse_FieldPathSelector = 2
)

func (s ListServicesResponse_FieldPathSelector) String() string {
	switch s {
	case ListServicesResponse_FieldPathSelectorServices:
		return "services"
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", s))
	}
}

func BuildListServicesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListServicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListServicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "services":
			return &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorServices}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "services":
			if subpath, err := service.BuildService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListServicesResponse_FieldSubPath{selector: ListServicesResponse_FieldPathSelectorServices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListServicesResponse", fp)
}

func ParseListServicesResponse_FieldPath(rawField string) (ListServicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListServicesResponse_FieldPath(fp)
}

func MustParseListServicesResponse_FieldPath(rawField string) ListServicesResponse_FieldPath {
	fp, err := ParseListServicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListServicesResponse_FieldTerminalPath struct {
	selector ListServicesResponse_FieldPathSelector
}

var _ ListServicesResponse_FieldPath = (*ListServicesResponse_FieldTerminalPath)(nil)

func (fp *ListServicesResponse_FieldTerminalPath) Selector() ListServicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListServicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListServicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListServicesResponse
func (fp *ListServicesResponse_FieldTerminalPath) Get(source *ListServicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListServicesResponse_FieldPathSelectorServices:
			for _, value := range source.GetServices() {
				values = append(values, value)
			}
		case ListServicesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListServicesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListServicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListServicesResponse))
}

// GetSingle returns value pointed by specific field of from source ListServicesResponse
func (fp *ListServicesResponse_FieldTerminalPath) GetSingle(source *ListServicesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		res := source.GetServices()
		return res, res != nil
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
	}
}

func (fp *ListServicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListServicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListServicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		return ([]*service.Service)(nil)
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		return (*service.PagerCursor)(nil)
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		return (*service.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
	}
}

func (fp *ListServicesResponse_FieldTerminalPath) ClearValue(item *ListServicesResponse) {
	if item != nil {
		switch fp.selector {
		case ListServicesResponse_FieldPathSelectorServices:
			item.Services = nil
		case ListServicesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListServicesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListServicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListServicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListServicesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListServicesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListServicesResponse_FieldTerminalPath) WithIValue(value interface{}) ListServicesResponse_FieldPathValue {
	switch fp.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		return &ListServicesResponse_FieldTerminalPathValue{ListServicesResponse_FieldTerminalPath: *fp, value: value.([]*service.Service)}
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		return &ListServicesResponse_FieldTerminalPathValue{ListServicesResponse_FieldTerminalPath: *fp, value: value.(*service.PagerCursor)}
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		return &ListServicesResponse_FieldTerminalPathValue{ListServicesResponse_FieldTerminalPath: *fp, value: value.(*service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
	}
}

func (fp *ListServicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListServicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListServicesResponse_FieldPathArrayOfValues {
	fpaov := &ListServicesResponse_FieldTerminalPathArrayOfValues{ListServicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		return &ListServicesResponse_FieldTerminalPathArrayOfValues{ListServicesResponse_FieldTerminalPath: *fp, values: values.([][]*service.Service)}
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		return &ListServicesResponse_FieldTerminalPathArrayOfValues{ListServicesResponse_FieldTerminalPath: *fp, values: values.([]*service.PagerCursor)}
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		return &ListServicesResponse_FieldTerminalPathArrayOfValues{ListServicesResponse_FieldTerminalPath: *fp, values: values.([]*service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListServicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListServicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListServicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		return &ListServicesResponse_FieldTerminalPathArrayItemValue{ListServicesResponse_FieldTerminalPath: *fp, value: value.(*service.Service)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fp.selector))
	}
}

func (fp *ListServicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListServicesResponse_FieldSubPath struct {
	selector ListServicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListServicesResponse_FieldPath = (*ListServicesResponse_FieldSubPath)(nil)

func (fps *ListServicesResponse_FieldSubPath) Selector() ListServicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListServicesResponse_FieldSubPath) AsServicesSubPath() (service.Service_FieldPath, bool) {
	res, ok := fps.subPath.(service.Service_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListServicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListServicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListServicesResponse
func (fps *ListServicesResponse_FieldSubPath) Get(source *ListServicesResponse) (values []interface{}) {
	if asServiceFieldPath, ok := fps.AsServicesSubPath(); ok {
		for _, item := range source.GetServices() {
			values = append(values, asServiceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListServicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListServicesResponse))
}

// GetSingle returns value of selected field from source ListServicesResponse
func (fps *ListServicesResponse_FieldSubPath) GetSingle(source *ListServicesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		if len(source.GetServices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fps.selector))
	}
}

func (fps *ListServicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListServicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListServicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListServicesResponse_FieldSubPath) ClearValue(item *ListServicesResponse) {
	if item != nil {
		switch fps.selector {
		case ListServicesResponse_FieldPathSelectorServices:
			for _, subItem := range item.Services {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListServicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListServicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListServicesResponse_FieldSubPath) WithIValue(value interface{}) ListServicesResponse_FieldPathValue {
	return &ListServicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListServicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListServicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListServicesResponse_FieldPathArrayOfValues {
	return &ListServicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListServicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListServicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListServicesResponse_FieldPathArrayItemValue {
	return &ListServicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListServicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListServicesResponse_FieldPathValue allows storing values for ListServicesResponse fields according to their type
type ListServicesResponse_FieldPathValue interface {
	ListServicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListServicesResponse)
	CompareWith(*ListServicesResponse) (cmp int, comparable bool)
}

func ParseListServicesResponse_FieldPathValue(pathStr, valueStr string) (ListServicesResponse_FieldPathValue, error) {
	fp, err := ParseListServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListServicesResponse_FieldPathValue), nil
}

func MustParseListServicesResponse_FieldPathValue(pathStr, valueStr string) ListServicesResponse_FieldPathValue {
	fpv, err := ParseListServicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListServicesResponse_FieldTerminalPathValue struct {
	ListServicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListServicesResponse_FieldPathValue = (*ListServicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListServicesResponse' as interface{}
func (fpv *ListServicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListServicesResponse_FieldTerminalPathValue) AsServicesValue() ([]*service.Service, bool) {
	res, ok := fpv.value.([]*service.Service)
	return res, ok
}
func (fpv *ListServicesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*service.PagerCursor, bool) {
	res, ok := fpv.value.(*service.PagerCursor)
	return res, ok
}
func (fpv *ListServicesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*service.PagerCursor, bool) {
	res, ok := fpv.value.(*service.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListServicesResponse
func (fpv *ListServicesResponse_FieldTerminalPathValue) SetTo(target **ListServicesResponse) {
	if *target == nil {
		*target = new(ListServicesResponse)
	}
	switch fpv.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		(*target).Services = fpv.value.([]*service.Service)
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*service.PagerCursor)
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*service.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListServicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListServicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListServicesResponse_FieldTerminalPathValue' with the value under path in 'ListServicesResponse'.
func (fpv *ListServicesResponse_FieldTerminalPathValue) CompareWith(source *ListServicesResponse) (int, bool) {
	switch fpv.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		return 0, false
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListServicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListServicesResponse))
}

type ListServicesResponse_FieldSubPathValue struct {
	ListServicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListServicesResponse_FieldPathValue = (*ListServicesResponse_FieldSubPathValue)(nil)

func (fpvs *ListServicesResponse_FieldSubPathValue) AsServicesPathValue() (service.Service_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service.Service_FieldPathValue)
	return res, ok
}

func (fpvs *ListServicesResponse_FieldSubPathValue) SetTo(target **ListServicesResponse) {
	if *target == nil {
		*target = new(ListServicesResponse)
	}
	switch fpvs.Selector() {
	case ListServicesResponse_FieldPathSelectorServices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListServicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListServicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListServicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListServicesResponse_FieldSubPathValue) CompareWith(source *ListServicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListServicesResponse_FieldPathSelectorServices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListServicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListServicesResponse))
}

// ListServicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListServicesResponse according to their type
// Present only for array (repeated) types.
type ListServicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListServicesResponse_FieldPath
	ContainsValue(*ListServicesResponse) bool
}

// ParseListServicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListServicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListServicesResponse_FieldPathArrayItemValue), nil
}

func MustParseListServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListServicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListServicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListServicesResponse_FieldTerminalPathArrayItemValue struct {
	ListServicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListServicesResponse_FieldPathArrayItemValue = (*ListServicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListServicesResponse as interface{}
func (fpaiv *ListServicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListServicesResponse_FieldTerminalPathArrayItemValue) AsServicesItemValue() (*service.Service, bool) {
	res, ok := fpaiv.value.(*service.Service)
	return res, ok
}

func (fpaiv *ListServicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListServicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListServicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListServicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListServicesResponse'
func (fpaiv *ListServicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListServicesResponse) bool {
	slice := fpaiv.ListServicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListServicesResponse_FieldSubPathArrayItemValue struct {
	ListServicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListServicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListServicesResponse_FieldSubPathArrayItemValue) AsServicesPathItemValue() (service.Service_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListServicesResponse'
func (fpaivs *ListServicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListServicesResponse) bool {
	switch fpaivs.Selector() {
	case ListServicesResponse_FieldPathSelectorServices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListServicesResponse: %d", fpaivs.Selector()))
	}
}

// ListServicesResponse_FieldPathArrayOfValues allows storing slice of values for ListServicesResponse fields according to their type
type ListServicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListServicesResponse_FieldPath
}

func ParseListServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListServicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListServicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListServicesResponse_FieldPathArrayOfValues), nil
}

func MustParseListServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListServicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListServicesResponse_FieldTerminalPathArrayOfValues struct {
	ListServicesResponse_FieldTerminalPath
	values interface{}
}

var _ ListServicesResponse_FieldPathArrayOfValues = (*ListServicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListServicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListServicesResponse_FieldPathSelectorServices:
		for _, v := range fpaov.values.([][]*service.Service) {
			values = append(values, v)
		}
	case ListServicesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*service.PagerCursor) {
			values = append(values, v)
		}
	case ListServicesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*service.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListServicesResponse_FieldTerminalPathArrayOfValues) AsServicesArrayOfValues() ([][]*service.Service, bool) {
	res, ok := fpaov.values.([][]*service.Service)
	return res, ok
}
func (fpaov *ListServicesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service.PagerCursor)
	return res, ok
}
func (fpaov *ListServicesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service.PagerCursor)
	return res, ok
}

type ListServicesResponse_FieldSubPathArrayOfValues struct {
	ListServicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListServicesResponse_FieldPathArrayOfValues = (*ListServicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListServicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListServicesResponse_FieldSubPathArrayOfValues) AsServicesPathArrayOfValues() (service.Service_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service.Service_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceRequest_FieldPathSelector
	Get(source *WatchServiceRequest) []interface{}
	GetSingle(source *WatchServiceRequest) (interface{}, bool)
	ClearValue(item *WatchServiceRequest)

	// Those methods build corresponding WatchServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceRequest_FieldPathArrayItemValue
}

type WatchServiceRequest_FieldPathSelector int32

const (
	WatchServiceRequest_FieldPathSelectorName      WatchServiceRequest_FieldPathSelector = 0
	WatchServiceRequest_FieldPathSelectorFieldMask WatchServiceRequest_FieldPathSelector = 1
	WatchServiceRequest_FieldPathSelectorView      WatchServiceRequest_FieldPathSelector = 2
)

func (s WatchServiceRequest_FieldPathSelector) String() string {
	switch s {
	case WatchServiceRequest_FieldPathSelectorName:
		return "name"
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchServiceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", s))
	}
}

func BuildWatchServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchServiceRequest_FieldTerminalPath{selector: WatchServiceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchServiceRequest_FieldTerminalPath{selector: WatchServiceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchServiceRequest_FieldTerminalPath{selector: WatchServiceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceRequest", fp)
}

func ParseWatchServiceRequest_FieldPath(rawField string) (WatchServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceRequest_FieldPath(fp)
}

func MustParseWatchServiceRequest_FieldPath(rawField string) WatchServiceRequest_FieldPath {
	fp, err := ParseWatchServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceRequest_FieldTerminalPath struct {
	selector WatchServiceRequest_FieldPathSelector
}

var _ WatchServiceRequest_FieldPath = (*WatchServiceRequest_FieldTerminalPath)(nil)

func (fp *WatchServiceRequest_FieldTerminalPath) Selector() WatchServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceRequest
func (fp *WatchServiceRequest_FieldTerminalPath) Get(source *WatchServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchServiceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchServiceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceRequest))
}

// GetSingle returns value pointed by specific field of from source WatchServiceRequest
func (fp *WatchServiceRequest_FieldTerminalPath) GetSingle(source *WatchServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchServiceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		return (*service.Reference)(nil)
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		return (*service.Service_FieldMask)(nil)
	case WatchServiceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceRequest_FieldTerminalPath) ClearValue(item *WatchServiceRequest) {
	if item != nil {
		switch fp.selector {
		case WatchServiceRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchServiceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchServiceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceRequest_FieldPathSelectorName ||
		fp.selector == WatchServiceRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchServiceRequest_FieldPathSelectorView
}

func (fp *WatchServiceRequest_FieldTerminalPath) WithIValue(value interface{}) WatchServiceRequest_FieldPathValue {
	switch fp.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		return &WatchServiceRequest_FieldTerminalPathValue{WatchServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Reference)}
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		return &WatchServiceRequest_FieldTerminalPathValue{WatchServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	case WatchServiceRequest_FieldPathSelectorView:
		return &WatchServiceRequest_FieldTerminalPathValue{WatchServiceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceRequest_FieldPathArrayOfValues {
	fpaov := &WatchServiceRequest_FieldTerminalPathArrayOfValues{WatchServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		return &WatchServiceRequest_FieldTerminalPathArrayOfValues{WatchServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Reference)}
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		return &WatchServiceRequest_FieldTerminalPathArrayOfValues{WatchServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	case WatchServiceRequest_FieldPathSelectorView:
		return &WatchServiceRequest_FieldTerminalPathArrayOfValues{WatchServiceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServiceRequest_FieldPathValue allows storing values for WatchServiceRequest fields according to their type
type WatchServiceRequest_FieldPathValue interface {
	WatchServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceRequest)
	CompareWith(*WatchServiceRequest) (cmp int, comparable bool)
}

func ParseWatchServiceRequest_FieldPathValue(pathStr, valueStr string) (WatchServiceRequest_FieldPathValue, error) {
	fp, err := ParseWatchServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceRequest_FieldPathValue), nil
}

func MustParseWatchServiceRequest_FieldPathValue(pathStr, valueStr string) WatchServiceRequest_FieldPathValue {
	fpv, err := ParseWatchServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceRequest_FieldTerminalPathValue struct {
	WatchServiceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServiceRequest_FieldPathValue = (*WatchServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServiceRequest' as interface{}
func (fpv *WatchServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceRequest_FieldTerminalPathValue) AsNameValue() (*service.Reference, bool) {
	res, ok := fpv.value.(*service.Reference)
	return res, ok
}
func (fpv *WatchServiceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}
func (fpv *WatchServiceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchServiceRequest
func (fpv *WatchServiceRequest_FieldTerminalPathValue) SetTo(target **WatchServiceRequest) {
	if *target == nil {
		*target = new(WatchServiceRequest)
	}
	switch fpv.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*service.Reference)
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service.Service_FieldMask)
	case WatchServiceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceRequest_FieldTerminalPathValue' with the value under path in 'WatchServiceRequest'.
func (fpv *WatchServiceRequest_FieldTerminalPathValue) CompareWith(source *WatchServiceRequest) (int, bool) {
	switch fpv.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*service.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchServiceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceRequest))
}

// WatchServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServiceRequest according to their type
// Present only for array (repeated) types.
type WatchServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceRequest_FieldPath
	ContainsValue(*WatchServiceRequest) bool
}

// ParseWatchServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceRequest_FieldTerminalPathArrayItemValue struct {
	WatchServiceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServiceRequest_FieldPathArrayItemValue = (*WatchServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceRequest as interface{}
func (fpaiv *WatchServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceRequest'
func (fpaiv *WatchServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceRequest) bool {
	slice := fpaiv.WatchServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServiceRequest_FieldPathArrayOfValues allows storing slice of values for WatchServiceRequest fields according to their type
type WatchServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceRequest_FieldPath
}

func ParseWatchServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceRequest_FieldTerminalPathArrayOfValues struct {
	WatchServiceRequest_FieldTerminalPath
	values interface{}
}

var _ WatchServiceRequest_FieldPathArrayOfValues = (*WatchServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*service.Reference) {
			values = append(values, v)
		}
	case WatchServiceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	case WatchServiceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*service.Reference, bool) {
	res, ok := fpaov.values.([]*service.Reference)
	return res, ok
}
func (fpaov *WatchServiceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}
func (fpaov *WatchServiceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServiceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServiceResponse_FieldPathSelector
	Get(source *WatchServiceResponse) []interface{}
	GetSingle(source *WatchServiceResponse) (interface{}, bool)
	ClearValue(item *WatchServiceResponse)

	// Those methods build corresponding WatchServiceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServiceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServiceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServiceResponse_FieldPathArrayItemValue
}

type WatchServiceResponse_FieldPathSelector int32

const (
	WatchServiceResponse_FieldPathSelectorChange WatchServiceResponse_FieldPathSelector = 0
)

func (s WatchServiceResponse_FieldPathSelector) String() string {
	switch s {
	case WatchServiceResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", s))
	}
}

func BuildWatchServiceResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchServiceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServiceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchServiceResponse_FieldTerminalPath{selector: WatchServiceResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServiceResponse", fp)
}

func ParseWatchServiceResponse_FieldPath(rawField string) (WatchServiceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServiceResponse_FieldPath(fp)
}

func MustParseWatchServiceResponse_FieldPath(rawField string) WatchServiceResponse_FieldPath {
	fp, err := ParseWatchServiceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServiceResponse_FieldTerminalPath struct {
	selector WatchServiceResponse_FieldPathSelector
}

var _ WatchServiceResponse_FieldPath = (*WatchServiceResponse_FieldTerminalPath)(nil)

func (fp *WatchServiceResponse_FieldTerminalPath) Selector() WatchServiceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServiceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServiceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServiceResponse
func (fp *WatchServiceResponse_FieldTerminalPath) Get(source *WatchServiceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServiceResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServiceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServiceResponse))
}

// GetSingle returns value pointed by specific field of from source WatchServiceResponse
func (fp *WatchServiceResponse_FieldTerminalPath) GetSingle(source *WatchServiceResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServiceResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchServiceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		return (*service.ServiceChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceResponse_FieldTerminalPath) ClearValue(item *WatchServiceResponse) {
	if item != nil {
		switch fp.selector {
		case WatchServiceResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchServiceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServiceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServiceResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServiceResponse_FieldPathSelectorChange
}

func (fp *WatchServiceResponse_FieldTerminalPath) WithIValue(value interface{}) WatchServiceResponse_FieldPathValue {
	switch fp.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		return &WatchServiceResponse_FieldTerminalPathValue{WatchServiceResponse_FieldTerminalPath: *fp, value: value.(*service.ServiceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServiceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServiceResponse_FieldPathArrayOfValues {
	fpaov := &WatchServiceResponse_FieldTerminalPathArrayOfValues{WatchServiceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		return &WatchServiceResponse_FieldTerminalPathArrayOfValues{WatchServiceResponse_FieldTerminalPath: *fp, values: values.([]*service.ServiceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServiceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServiceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServiceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchServiceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServiceResponse_FieldPathValue allows storing values for WatchServiceResponse fields according to their type
type WatchServiceResponse_FieldPathValue interface {
	WatchServiceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServiceResponse)
	CompareWith(*WatchServiceResponse) (cmp int, comparable bool)
}

func ParseWatchServiceResponse_FieldPathValue(pathStr, valueStr string) (WatchServiceResponse_FieldPathValue, error) {
	fp, err := ParseWatchServiceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServiceResponse_FieldPathValue), nil
}

func MustParseWatchServiceResponse_FieldPathValue(pathStr, valueStr string) WatchServiceResponse_FieldPathValue {
	fpv, err := ParseWatchServiceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServiceResponse_FieldTerminalPathValue struct {
	WatchServiceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServiceResponse_FieldPathValue = (*WatchServiceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServiceResponse' as interface{}
func (fpv *WatchServiceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServiceResponse_FieldTerminalPathValue) AsChangeValue() (*service.ServiceChange, bool) {
	res, ok := fpv.value.(*service.ServiceChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchServiceResponse
func (fpv *WatchServiceResponse_FieldTerminalPathValue) SetTo(target **WatchServiceResponse) {
	if *target == nil {
		*target = new(WatchServiceResponse)
	}
	switch fpv.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*service.ServiceChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServiceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServiceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServiceResponse_FieldTerminalPathValue' with the value under path in 'WatchServiceResponse'.
func (fpv *WatchServiceResponse_FieldTerminalPathValue) CompareWith(source *WatchServiceResponse) (int, bool) {
	switch fpv.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServiceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServiceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServiceResponse))
}

// WatchServiceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServiceResponse according to their type
// Present only for array (repeated) types.
type WatchServiceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServiceResponse_FieldPath
	ContainsValue(*WatchServiceResponse) bool
}

// ParseWatchServiceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServiceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServiceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServiceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServiceResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchServiceResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchServiceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServiceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServiceResponse_FieldTerminalPathArrayItemValue struct {
	WatchServiceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServiceResponse_FieldPathArrayItemValue = (*WatchServiceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServiceResponse as interface{}
func (fpaiv *WatchServiceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServiceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServiceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServiceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServiceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServiceResponse'
func (fpaiv *WatchServiceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServiceResponse) bool {
	slice := fpaiv.WatchServiceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServiceResponse_FieldPathArrayOfValues allows storing slice of values for WatchServiceResponse fields according to their type
type WatchServiceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServiceResponse_FieldPath
}

func ParseWatchServiceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServiceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServiceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServiceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServiceResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchServiceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServiceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServiceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServiceResponse_FieldTerminalPathArrayOfValues struct {
	WatchServiceResponse_FieldTerminalPath
	values interface{}
}

var _ WatchServiceResponse_FieldPathArrayOfValues = (*WatchServiceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServiceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServiceResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*service.ServiceChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServiceResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*service.ServiceChange, bool) {
	res, ok := fpaov.values.([]*service.ServiceChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServicesRequest_FieldPathSelector
	Get(source *WatchServicesRequest) []interface{}
	GetSingle(source *WatchServicesRequest) (interface{}, bool)
	ClearValue(item *WatchServicesRequest)

	// Those methods build corresponding WatchServicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServicesRequest_FieldPathArrayItemValue
}

type WatchServicesRequest_FieldPathSelector int32

const (
	WatchServicesRequest_FieldPathSelectorType         WatchServicesRequest_FieldPathSelector = 0
	WatchServicesRequest_FieldPathSelectorPageSize     WatchServicesRequest_FieldPathSelector = 1
	WatchServicesRequest_FieldPathSelectorPageToken    WatchServicesRequest_FieldPathSelector = 2
	WatchServicesRequest_FieldPathSelectorOrderBy      WatchServicesRequest_FieldPathSelector = 3
	WatchServicesRequest_FieldPathSelectorResumeToken  WatchServicesRequest_FieldPathSelector = 4
	WatchServicesRequest_FieldPathSelectorFilter       WatchServicesRequest_FieldPathSelector = 5
	WatchServicesRequest_FieldPathSelectorFieldMask    WatchServicesRequest_FieldPathSelector = 6
	WatchServicesRequest_FieldPathSelectorView         WatchServicesRequest_FieldPathSelector = 7
	WatchServicesRequest_FieldPathSelectorMaxChunkSize WatchServicesRequest_FieldPathSelector = 8
)

func (s WatchServicesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchServicesRequest_FieldPathSelectorType:
		return "type"
	case WatchServicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchServicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchServicesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchServicesRequest_FieldPathSelectorView:
		return "view"
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", s))
	}
}

func BuildWatchServicesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchServicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServicesRequest", fp)
}

func ParseWatchServicesRequest_FieldPath(rawField string) (WatchServicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServicesRequest_FieldPath(fp)
}

func MustParseWatchServicesRequest_FieldPath(rawField string) WatchServicesRequest_FieldPath {
	fp, err := ParseWatchServicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServicesRequest_FieldTerminalPath struct {
	selector WatchServicesRequest_FieldPathSelector
}

var _ WatchServicesRequest_FieldPath = (*WatchServicesRequest_FieldTerminalPath)(nil)

func (fp *WatchServicesRequest_FieldTerminalPath) Selector() WatchServicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServicesRequest
func (fp *WatchServicesRequest_FieldTerminalPath) Get(source *WatchServicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServicesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchServicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchServicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchServicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchServicesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchServicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchServicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchServicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServicesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchServicesRequest
func (fp *WatchServicesRequest_FieldTerminalPath) GetSingle(source *WatchServicesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchServicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchServicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchServicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchServicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchServicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchServicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchServicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchServicesRequest_FieldPathSelectorPageToken:
		return (*service.PagerCursor)(nil)
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		return (*service.OrderBy)(nil)
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchServicesRequest_FieldPathSelectorFilter:
		return (*service.Filter)(nil)
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		return (*service.Service_FieldMask)(nil)
	case WatchServicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchServicesRequest_FieldTerminalPath) ClearValue(item *WatchServicesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchServicesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchServicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchServicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchServicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchServicesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchServicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchServicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchServicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchServicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServicesRequest_FieldPathSelectorType ||
		fp.selector == WatchServicesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchServicesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchServicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchServicesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchServicesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchServicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchServicesRequest_FieldPathSelectorView ||
		fp.selector == WatchServicesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchServicesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchServicesRequest_FieldPathValue {
	switch fp.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchServicesRequest_FieldPathSelectorPageSize:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchServicesRequest_FieldPathSelectorPageToken:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(*service.PagerCursor)}
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(*service.OrderBy)}
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchServicesRequest_FieldPathSelectorFilter:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(*service.Filter)}
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	case WatchServicesRequest_FieldPathSelectorView:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchServicesRequest_FieldTerminalPathValue{WatchServicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchServicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServicesRequest_FieldPathArrayOfValues {
	fpaov := &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchServicesRequest_FieldPathSelectorPageSize:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchServicesRequest_FieldPathSelectorPageToken:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.PagerCursor)}
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.OrderBy)}
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchServicesRequest_FieldPathSelectorFilter:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.Filter)}
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	case WatchServicesRequest_FieldPathSelectorView:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchServicesRequest_FieldTerminalPathArrayOfValues{WatchServicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchServicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServicesRequest_FieldPathValue allows storing values for WatchServicesRequest fields according to their type
type WatchServicesRequest_FieldPathValue interface {
	WatchServicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServicesRequest)
	CompareWith(*WatchServicesRequest) (cmp int, comparable bool)
}

func ParseWatchServicesRequest_FieldPathValue(pathStr, valueStr string) (WatchServicesRequest_FieldPathValue, error) {
	fp, err := ParseWatchServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServicesRequest_FieldPathValue), nil
}

func MustParseWatchServicesRequest_FieldPathValue(pathStr, valueStr string) WatchServicesRequest_FieldPathValue {
	fpv, err := ParseWatchServicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServicesRequest_FieldTerminalPathValue struct {
	WatchServicesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServicesRequest_FieldPathValue = (*WatchServicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServicesRequest' as interface{}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*service.PagerCursor, bool) {
	res, ok := fpv.value.(*service.PagerCursor)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsOrderByValue() (*service.OrderBy, bool) {
	res, ok := fpv.value.(*service.OrderBy)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsFilterValue() (*service.Filter, bool) {
	res, ok := fpv.value.(*service.Filter)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchServicesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchServicesRequest
func (fpv *WatchServicesRequest_FieldTerminalPathValue) SetTo(target **WatchServicesRequest) {
	if *target == nil {
		*target = new(WatchServicesRequest)
	}
	switch fpv.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchServicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchServicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*service.PagerCursor)
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*service.OrderBy)
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchServicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*service.Filter)
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service.Service_FieldMask)
	case WatchServicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServicesRequest_FieldTerminalPathValue' with the value under path in 'WatchServicesRequest'.
func (fpv *WatchServicesRequest_FieldTerminalPathValue) CompareWith(source *WatchServicesRequest) (int, bool) {
	switch fpv.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchServicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchServicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServicesRequest))
}

// WatchServicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServicesRequest according to their type
// Present only for array (repeated) types.
type WatchServicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServicesRequest_FieldPath
	ContainsValue(*WatchServicesRequest) bool
}

// ParseWatchServicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServicesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchServicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServicesRequest_FieldTerminalPathArrayItemValue struct {
	WatchServicesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchServicesRequest_FieldPathArrayItemValue = (*WatchServicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServicesRequest as interface{}
func (fpaiv *WatchServicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServicesRequest'
func (fpaiv *WatchServicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServicesRequest) bool {
	slice := fpaiv.WatchServicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServicesRequest_FieldPathArrayOfValues allows storing slice of values for WatchServicesRequest fields according to their type
type WatchServicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServicesRequest_FieldPath
}

func ParseWatchServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServicesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServicesRequest_FieldTerminalPathArrayOfValues struct {
	WatchServicesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchServicesRequest_FieldPathArrayOfValues = (*WatchServicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServicesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*service.PagerCursor) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*service.OrderBy) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*service.Filter) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchServicesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service.PagerCursor)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*service.OrderBy, bool) {
	res, ok := fpaov.values.([]*service.OrderBy)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*service.Filter, bool) {
	res, ok := fpaov.values.([]*service.Filter)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchServicesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServicesResponse_FieldPathSelector
	Get(source *WatchServicesResponse) []interface{}
	GetSingle(source *WatchServicesResponse) (interface{}, bool)
	ClearValue(item *WatchServicesResponse)

	// Those methods build corresponding WatchServicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServicesResponse_FieldPathArrayItemValue
}

type WatchServicesResponse_FieldPathSelector int32

const (
	WatchServicesResponse_FieldPathSelectorServiceChanges  WatchServicesResponse_FieldPathSelector = 0
	WatchServicesResponse_FieldPathSelectorIsCurrent       WatchServicesResponse_FieldPathSelector = 1
	WatchServicesResponse_FieldPathSelectorPageTokenChange WatchServicesResponse_FieldPathSelector = 2
	WatchServicesResponse_FieldPathSelectorResumeToken     WatchServicesResponse_FieldPathSelector = 3
	WatchServicesResponse_FieldPathSelectorSnapshotSize    WatchServicesResponse_FieldPathSelector = 4
	WatchServicesResponse_FieldPathSelectorIsSoftReset     WatchServicesResponse_FieldPathSelector = 5
	WatchServicesResponse_FieldPathSelectorIsHardReset     WatchServicesResponse_FieldPathSelector = 6
)

func (s WatchServicesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		return "service_changes"
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", s))
	}
}

func BuildWatchServicesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchServicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_changes", "serviceChanges", "service-changes":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorServiceChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchServicesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchServicesResponse_FieldSubPath{selector: WatchServicesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServicesResponse", fp)
}

func ParseWatchServicesResponse_FieldPath(rawField string) (WatchServicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServicesResponse_FieldPath(fp)
}

func MustParseWatchServicesResponse_FieldPath(rawField string) WatchServicesResponse_FieldPath {
	fp, err := ParseWatchServicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServicesResponse_FieldTerminalPath struct {
	selector WatchServicesResponse_FieldPathSelector
}

var _ WatchServicesResponse_FieldPath = (*WatchServicesResponse_FieldTerminalPath)(nil)

func (fp *WatchServicesResponse_FieldTerminalPath) Selector() WatchServicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServicesResponse
func (fp *WatchServicesResponse_FieldTerminalPath) Get(source *WatchServicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServicesResponse_FieldPathSelectorServiceChanges:
			for _, value := range source.GetServiceChanges() {
				values = append(values, value)
			}
		case WatchServicesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchServicesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchServicesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchServicesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchServicesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchServicesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServicesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchServicesResponse
func (fp *WatchServicesResponse_FieldTerminalPath) GetSingle(source *WatchServicesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		res := source.GetServiceChanges()
		return res, res != nil
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchServicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchServicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		return ([]*service.ServiceChange)(nil)
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchServicesResponse_PageTokenChange)(nil)
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchServicesResponse_FieldTerminalPath) ClearValue(item *WatchServicesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchServicesResponse_FieldPathSelectorServiceChanges:
			item.ServiceChanges = nil
		case WatchServicesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchServicesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchServicesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchServicesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchServicesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchServicesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchServicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServicesResponse_FieldPathSelectorServiceChanges ||
		fp.selector == WatchServicesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchServicesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchServicesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchServicesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchServicesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchServicesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchServicesResponse_FieldPathValue {
	switch fp.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.([]*service.ServiceChange)}
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(*WatchServicesResponse_PageTokenChange)}
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		return &WatchServicesResponse_FieldTerminalPathValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchServicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServicesResponse_FieldPathArrayOfValues {
	fpaov := &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([][]*service.ServiceChange)}
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([]*WatchServicesResponse_PageTokenChange)}
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		return &WatchServicesResponse_FieldTerminalPathArrayOfValues{WatchServicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		return &WatchServicesResponse_FieldTerminalPathArrayItemValue{WatchServicesResponse_FieldTerminalPath: *fp, value: value.(*service.ServiceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchServicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchServicesResponse_FieldSubPath struct {
	selector WatchServicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchServicesResponse_FieldPath = (*WatchServicesResponse_FieldSubPath)(nil)

func (fps *WatchServicesResponse_FieldSubPath) Selector() WatchServicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchServicesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchServicesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchServicesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchServicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchServicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchServicesResponse
func (fps *WatchServicesResponse_FieldSubPath) Get(source *WatchServicesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchServicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchServicesResponse))
}

// GetSingle returns value of selected field from source WatchServicesResponse
func (fps *WatchServicesResponse_FieldSubPath) GetSingle(source *WatchServicesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fps.selector))
	}
}

func (fps *WatchServicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchServicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchServicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchServicesResponse_FieldSubPath) ClearValue(item *WatchServicesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchServicesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchServicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchServicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchServicesResponse_FieldSubPath) WithIValue(value interface{}) WatchServicesResponse_FieldPathValue {
	return &WatchServicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchServicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchServicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchServicesResponse_FieldPathArrayOfValues {
	return &WatchServicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchServicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchServicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchServicesResponse_FieldPathArrayItemValue {
	return &WatchServicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchServicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchServicesResponse_FieldPathValue allows storing values for WatchServicesResponse fields according to their type
type WatchServicesResponse_FieldPathValue interface {
	WatchServicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServicesResponse)
	CompareWith(*WatchServicesResponse) (cmp int, comparable bool)
}

func ParseWatchServicesResponse_FieldPathValue(pathStr, valueStr string) (WatchServicesResponse_FieldPathValue, error) {
	fp, err := ParseWatchServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServicesResponse_FieldPathValue), nil
}

func MustParseWatchServicesResponse_FieldPathValue(pathStr, valueStr string) WatchServicesResponse_FieldPathValue {
	fpv, err := ParseWatchServicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServicesResponse_FieldTerminalPathValue struct {
	WatchServicesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServicesResponse_FieldPathValue = (*WatchServicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchServicesResponse' as interface{}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsServiceChangesValue() ([]*service.ServiceChange, bool) {
	res, ok := fpv.value.([]*service.ServiceChange)
	return res, ok
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchServicesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchServicesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchServicesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchServicesResponse
func (fpv *WatchServicesResponse_FieldTerminalPathValue) SetTo(target **WatchServicesResponse) {
	if *target == nil {
		*target = new(WatchServicesResponse)
	}
	switch fpv.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		(*target).ServiceChanges = fpv.value.([]*service.ServiceChange)
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchServicesResponse_PageTokenChange)
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServicesResponse_FieldTerminalPathValue' with the value under path in 'WatchServicesResponse'.
func (fpv *WatchServicesResponse_FieldTerminalPathValue) CompareWith(source *WatchServicesResponse) (int, bool) {
	switch fpv.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		return 0, false
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchServicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServicesResponse))
}

type WatchServicesResponse_FieldSubPathValue struct {
	WatchServicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchServicesResponse_FieldPathValue = (*WatchServicesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchServicesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchServicesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchServicesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchServicesResponse_FieldSubPathValue) SetTo(target **WatchServicesResponse) {
	if *target == nil {
		*target = new(WatchServicesResponse)
	}
	switch fpvs.Selector() {
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchServicesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchServicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchServicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchServicesResponse_FieldSubPathValue) CompareWith(source *WatchServicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchServicesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchServicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchServicesResponse))
}

// WatchServicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchServicesResponse according to their type
// Present only for array (repeated) types.
type WatchServicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServicesResponse_FieldPath
	ContainsValue(*WatchServicesResponse) bool
}

// ParseWatchServicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServicesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchServicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServicesResponse_FieldTerminalPathArrayItemValue struct {
	WatchServicesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchServicesResponse_FieldPathArrayItemValue = (*WatchServicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServicesResponse as interface{}
func (fpaiv *WatchServicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchServicesResponse_FieldTerminalPathArrayItemValue) AsServiceChangesItemValue() (*service.ServiceChange, bool) {
	res, ok := fpaiv.value.(*service.ServiceChange)
	return res, ok
}

func (fpaiv *WatchServicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServicesResponse'
func (fpaiv *WatchServicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServicesResponse) bool {
	slice := fpaiv.WatchServicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchServicesResponse_FieldSubPathArrayItemValue struct {
	WatchServicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchServicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchServicesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchServicesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchServicesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchServicesResponse'
func (fpaivs *WatchServicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchServicesResponse) bool {
	switch fpaivs.Selector() {
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchServicesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse: %d", fpaivs.Selector()))
	}
}

// WatchServicesResponse_FieldPathArrayOfValues allows storing slice of values for WatchServicesResponse fields according to their type
type WatchServicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServicesResponse_FieldPath
}

func ParseWatchServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchServicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServicesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServicesResponse_FieldTerminalPathArrayOfValues struct {
	WatchServicesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchServicesResponse_FieldPathArrayOfValues = (*WatchServicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServicesResponse_FieldPathSelectorServiceChanges:
		for _, v := range fpaov.values.([][]*service.ServiceChange) {
			values = append(values, v)
		}
	case WatchServicesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchServicesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchServicesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchServicesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchServicesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchServicesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchServicesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsServiceChangesArrayOfValues() ([][]*service.ServiceChange, bool) {
	res, ok := fpaov.values.([][]*service.ServiceChange)
	return res, ok
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchServicesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchServicesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchServicesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchServicesResponse_FieldSubPathArrayOfValues struct {
	WatchServicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchServicesResponse_FieldPathArrayOfValues = (*WatchServicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchServicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchServicesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchServicesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchServicesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchServicesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchServicesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchServicesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchServicesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchServicesResponse_PageTokenChange)

	// Those methods build corresponding WatchServicesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchServicesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchServicesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchServicesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchServicesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchServicesResponsePageTokenChange_FieldPathSelector = 0
	WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchServicesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchServicesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchServicesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchServicesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchServicesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchServicesResponse_PageTokenChange", fp)
}

func ParseWatchServicesResponsePageTokenChange_FieldPath(rawField string) (WatchServicesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchServicesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchServicesResponsePageTokenChange_FieldPath(rawField string) WatchServicesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchServicesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchServicesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchServicesResponsePageTokenChange_FieldPathSelector
}

var _ WatchServicesResponsePageTokenChange_FieldPath = (*WatchServicesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) Selector() WatchServicesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchServicesResponse_PageTokenChange
func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchServicesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchServicesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchServicesResponse_PageTokenChange
func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchServicesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchServicesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*service.PagerCursor)(nil)
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*service.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchServicesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchServicesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchServicesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchServicesResponsePageTokenChange_FieldTerminalPathValue{WatchServicesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*service.PagerCursor)}
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchServicesResponsePageTokenChange_FieldTerminalPathValue{WatchServicesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchServicesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchServicesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchServicesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*service.PagerCursor)}
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchServicesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchServicesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchServicesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchServicesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchServicesResponsePageTokenChange_FieldPathValue interface {
	WatchServicesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchServicesResponse_PageTokenChange)
	CompareWith(*WatchServicesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchServicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchServicesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchServicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchServicesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchServicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchServicesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchServicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchServicesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchServicesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchServicesResponsePageTokenChange_FieldPathValue = (*WatchServicesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*service.PagerCursor, bool) {
	res, ok := fpv.value.(*service.PagerCursor)
	return res, ok
}
func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*service.PagerCursor, bool) {
	res, ok := fpv.value.(*service.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchServicesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchServicesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*service.PagerCursor)
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*service.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchServicesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchServicesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchServicesResponse_PageTokenChange'.
func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchServicesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchServicesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchServicesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchServicesResponse_PageTokenChange))
}

// WatchServicesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchServicesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchServicesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchServicesResponse_PageTokenChange) bool
}

// ParseWatchServicesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchServicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchServicesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchServicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchServicesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchServicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchServicesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchServicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchServicesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchServicesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchServicesResponse_PageTokenChange as interface{}
func (fpaiv *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchServicesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchServicesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchServicesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchServicesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchServicesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchServicesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchServicesResponsePageTokenChange_FieldPath
}

func ParseWatchServicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchServicesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchServicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchServicesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchServicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchServicesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchServicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchServicesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchServicesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*service.PagerCursor) {
			values = append(values, v)
		}
	case WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*service.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service.PagerCursor)
	return res, ok
}
func (fpaov *WatchServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*service.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateServiceRequest_FieldPathSelector
	Get(source *CreateServiceRequest) []interface{}
	GetSingle(source *CreateServiceRequest) (interface{}, bool)
	ClearValue(item *CreateServiceRequest)

	// Those methods build corresponding CreateServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateServiceRequest_FieldPathArrayItemValue
}

type CreateServiceRequest_FieldPathSelector int32

const (
	CreateServiceRequest_FieldPathSelectorService CreateServiceRequest_FieldPathSelector = 0
)

func (s CreateServiceRequest_FieldPathSelector) String() string {
	switch s {
	case CreateServiceRequest_FieldPathSelectorService:
		return "service"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", s))
	}
}

func BuildCreateServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service":
			return &CreateServiceRequest_FieldTerminalPath{selector: CreateServiceRequest_FieldPathSelectorService}, nil
		}
	} else {
		switch fp[0] {
		case "service":
			if subpath, err := service.BuildService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateServiceRequest_FieldSubPath{selector: CreateServiceRequest_FieldPathSelectorService, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateServiceRequest", fp)
}

func ParseCreateServiceRequest_FieldPath(rawField string) (CreateServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateServiceRequest_FieldPath(fp)
}

func MustParseCreateServiceRequest_FieldPath(rawField string) CreateServiceRequest_FieldPath {
	fp, err := ParseCreateServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateServiceRequest_FieldTerminalPath struct {
	selector CreateServiceRequest_FieldPathSelector
}

var _ CreateServiceRequest_FieldPath = (*CreateServiceRequest_FieldTerminalPath)(nil)

func (fp *CreateServiceRequest_FieldTerminalPath) Selector() CreateServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateServiceRequest
func (fp *CreateServiceRequest_FieldTerminalPath) Get(source *CreateServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateServiceRequest_FieldPathSelectorService:
			if source.Service != nil {
				values = append(values, source.Service)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateServiceRequest))
}

// GetSingle returns value pointed by specific field of from source CreateServiceRequest
func (fp *CreateServiceRequest_FieldTerminalPath) GetSingle(source *CreateServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		res := source.GetService()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		return (*service.Service)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceRequest_FieldTerminalPath) ClearValue(item *CreateServiceRequest) {
	if item != nil {
		switch fp.selector {
		case CreateServiceRequest_FieldPathSelectorService:
			item.Service = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateServiceRequest_FieldTerminalPath) WithIValue(value interface{}) CreateServiceRequest_FieldPathValue {
	switch fp.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		return &CreateServiceRequest_FieldTerminalPathValue{CreateServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Service)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateServiceRequest_FieldPathArrayOfValues {
	fpaov := &CreateServiceRequest_FieldTerminalPathArrayOfValues{CreateServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		return &CreateServiceRequest_FieldTerminalPathArrayOfValues{CreateServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Service)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fp.selector))
	}
}

func (fp *CreateServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateServiceRequest_FieldSubPath struct {
	selector CreateServiceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateServiceRequest_FieldPath = (*CreateServiceRequest_FieldSubPath)(nil)

func (fps *CreateServiceRequest_FieldSubPath) Selector() CreateServiceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateServiceRequest_FieldSubPath) AsServiceSubPath() (service.Service_FieldPath, bool) {
	res, ok := fps.subPath.(service.Service_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateServiceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateServiceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateServiceRequest
func (fps *CreateServiceRequest_FieldSubPath) Get(source *CreateServiceRequest) (values []interface{}) {
	if asServiceFieldPath, ok := fps.AsServiceSubPath(); ok {
		values = append(values, asServiceFieldPath.Get(source.GetService())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateServiceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateServiceRequest))
}

// GetSingle returns value of selected field from source CreateServiceRequest
func (fps *CreateServiceRequest_FieldSubPath) GetSingle(source *CreateServiceRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		if source.GetService() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetService())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fps.selector))
	}
}

func (fps *CreateServiceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateServiceRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateServiceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateServiceRequest_FieldSubPath) ClearValue(item *CreateServiceRequest) {
	if item != nil {
		switch fps.selector {
		case CreateServiceRequest_FieldPathSelectorService:
			fps.subPath.ClearValueRaw(item.Service)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateServiceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateServiceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateServiceRequest_FieldSubPath) WithIValue(value interface{}) CreateServiceRequest_FieldPathValue {
	return &CreateServiceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateServiceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateServiceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateServiceRequest_FieldPathArrayOfValues {
	return &CreateServiceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateServiceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateServiceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateServiceRequest_FieldPathArrayItemValue {
	return &CreateServiceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateServiceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateServiceRequest_FieldPathValue allows storing values for CreateServiceRequest fields according to their type
type CreateServiceRequest_FieldPathValue interface {
	CreateServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateServiceRequest)
	CompareWith(*CreateServiceRequest) (cmp int, comparable bool)
}

func ParseCreateServiceRequest_FieldPathValue(pathStr, valueStr string) (CreateServiceRequest_FieldPathValue, error) {
	fp, err := ParseCreateServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateServiceRequest_FieldPathValue), nil
}

func MustParseCreateServiceRequest_FieldPathValue(pathStr, valueStr string) CreateServiceRequest_FieldPathValue {
	fpv, err := ParseCreateServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateServiceRequest_FieldTerminalPathValue struct {
	CreateServiceRequest_FieldTerminalPath
	value interface{}
}

var _ CreateServiceRequest_FieldPathValue = (*CreateServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateServiceRequest' as interface{}
func (fpv *CreateServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateServiceRequest_FieldTerminalPathValue) AsServiceValue() (*service.Service, bool) {
	res, ok := fpv.value.(*service.Service)
	return res, ok
}

// SetTo stores value for selected field for object CreateServiceRequest
func (fpv *CreateServiceRequest_FieldTerminalPathValue) SetTo(target **CreateServiceRequest) {
	if *target == nil {
		*target = new(CreateServiceRequest)
	}
	switch fpv.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		(*target).Service = fpv.value.(*service.Service)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fpv.selector))
	}
}

func (fpv *CreateServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateServiceRequest_FieldTerminalPathValue' with the value under path in 'CreateServiceRequest'.
func (fpv *CreateServiceRequest_FieldTerminalPathValue) CompareWith(source *CreateServiceRequest) (int, bool) {
	switch fpv.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fpv.selector))
	}
}

func (fpv *CreateServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateServiceRequest))
}

type CreateServiceRequest_FieldSubPathValue struct {
	CreateServiceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateServiceRequest_FieldPathValue = (*CreateServiceRequest_FieldSubPathValue)(nil)

func (fpvs *CreateServiceRequest_FieldSubPathValue) AsServicePathValue() (service.Service_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service.Service_FieldPathValue)
	return res, ok
}

func (fpvs *CreateServiceRequest_FieldSubPathValue) SetTo(target **CreateServiceRequest) {
	if *target == nil {
		*target = new(CreateServiceRequest)
	}
	switch fpvs.Selector() {
	case CreateServiceRequest_FieldPathSelectorService:
		fpvs.subPathValue.(service.Service_FieldPathValue).SetTo(&(*target).Service)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateServiceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateServiceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateServiceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateServiceRequest_FieldSubPathValue) CompareWith(source *CreateServiceRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateServiceRequest_FieldPathSelectorService:
		return fpvs.subPathValue.(service.Service_FieldPathValue).CompareWith(source.GetService())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateServiceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateServiceRequest))
}

// CreateServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateServiceRequest according to their type
// Present only for array (repeated) types.
type CreateServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateServiceRequest_FieldPath
	ContainsValue(*CreateServiceRequest) bool
}

// ParseCreateServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateServiceRequest_FieldTerminalPathArrayItemValue struct {
	CreateServiceRequest_FieldTerminalPath
	value interface{}
}

var _ CreateServiceRequest_FieldPathArrayItemValue = (*CreateServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateServiceRequest as interface{}
func (fpaiv *CreateServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateServiceRequest'
func (fpaiv *CreateServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateServiceRequest) bool {
	slice := fpaiv.CreateServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateServiceRequest_FieldSubPathArrayItemValue struct {
	CreateServiceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateServiceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateServiceRequest_FieldSubPathArrayItemValue) AsServicePathItemValue() (service.Service_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateServiceRequest'
func (fpaivs *CreateServiceRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateServiceRequest) bool {
	switch fpaivs.Selector() {
	case CreateServiceRequest_FieldPathSelectorService:
		return fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue).ContainsValue(source.GetService())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateServiceRequest: %d", fpaivs.Selector()))
	}
}

// CreateServiceRequest_FieldPathArrayOfValues allows storing slice of values for CreateServiceRequest fields according to their type
type CreateServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateServiceRequest_FieldPath
}

func ParseCreateServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateServiceRequest_FieldTerminalPathArrayOfValues struct {
	CreateServiceRequest_FieldTerminalPath
	values interface{}
}

var _ CreateServiceRequest_FieldPathArrayOfValues = (*CreateServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateServiceRequest_FieldPathSelectorService:
		for _, v := range fpaov.values.([]*service.Service) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateServiceRequest_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]*service.Service, bool) {
	res, ok := fpaov.values.([]*service.Service)
	return res, ok
}

type CreateServiceRequest_FieldSubPathArrayOfValues struct {
	CreateServiceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateServiceRequest_FieldPathArrayOfValues = (*CreateServiceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateServiceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateServiceRequest_FieldSubPathArrayOfValues) AsServicePathArrayOfValues() (service.Service_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service.Service_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateServiceRequest_FieldPathSelector
	Get(source *UpdateServiceRequest) []interface{}
	GetSingle(source *UpdateServiceRequest) (interface{}, bool)
	ClearValue(item *UpdateServiceRequest)

	// Those methods build corresponding UpdateServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateServiceRequest_FieldPathArrayItemValue
}

type UpdateServiceRequest_FieldPathSelector int32

const (
	UpdateServiceRequest_FieldPathSelectorService    UpdateServiceRequest_FieldPathSelector = 0
	UpdateServiceRequest_FieldPathSelectorUpdateMask UpdateServiceRequest_FieldPathSelector = 1
	UpdateServiceRequest_FieldPathSelectorCas        UpdateServiceRequest_FieldPathSelector = 2
)

func (s UpdateServiceRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateServiceRequest_FieldPathSelectorService:
		return "service"
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateServiceRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", s))
	}
}

func BuildUpdateServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service":
			return &UpdateServiceRequest_FieldTerminalPath{selector: UpdateServiceRequest_FieldPathSelectorService}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateServiceRequest_FieldTerminalPath{selector: UpdateServiceRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateServiceRequest_FieldTerminalPath{selector: UpdateServiceRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "service":
			if subpath, err := service.BuildService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateServiceRequest_FieldSubPath{selector: UpdateServiceRequest_FieldPathSelectorService, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateServiceRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateServiceRequest_FieldSubPath{selector: UpdateServiceRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateServiceRequest", fp)
}

func ParseUpdateServiceRequest_FieldPath(rawField string) (UpdateServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateServiceRequest_FieldPath(fp)
}

func MustParseUpdateServiceRequest_FieldPath(rawField string) UpdateServiceRequest_FieldPath {
	fp, err := ParseUpdateServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateServiceRequest_FieldTerminalPath struct {
	selector UpdateServiceRequest_FieldPathSelector
}

var _ UpdateServiceRequest_FieldPath = (*UpdateServiceRequest_FieldTerminalPath)(nil)

func (fp *UpdateServiceRequest_FieldTerminalPath) Selector() UpdateServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateServiceRequest
func (fp *UpdateServiceRequest_FieldTerminalPath) Get(source *UpdateServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateServiceRequest_FieldPathSelectorService:
			if source.Service != nil {
				values = append(values, source.Service)
			}
		case UpdateServiceRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateServiceRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateServiceRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateServiceRequest
func (fp *UpdateServiceRequest_FieldTerminalPath) GetSingle(source *UpdateServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		res := source.GetService()
		return res, res != nil
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateServiceRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		return (*service.Service)(nil)
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		return (*service.Service_FieldMask)(nil)
	case UpdateServiceRequest_FieldPathSelectorCas:
		return (*UpdateServiceRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequest_FieldTerminalPath) ClearValue(item *UpdateServiceRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateServiceRequest_FieldPathSelectorService:
			item.Service = nil
		case UpdateServiceRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateServiceRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateServiceRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateServiceRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateServiceRequest_FieldPathValue {
	switch fp.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		return &UpdateServiceRequest_FieldTerminalPathValue{UpdateServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Service)}
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		return &UpdateServiceRequest_FieldTerminalPathValue{UpdateServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	case UpdateServiceRequest_FieldPathSelectorCas:
		return &UpdateServiceRequest_FieldTerminalPathValue{UpdateServiceRequest_FieldTerminalPath: *fp, value: value.(*UpdateServiceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateServiceRequest_FieldPathArrayOfValues {
	fpaov := &UpdateServiceRequest_FieldTerminalPathArrayOfValues{UpdateServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		return &UpdateServiceRequest_FieldTerminalPathArrayOfValues{UpdateServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Service)}
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		return &UpdateServiceRequest_FieldTerminalPathArrayOfValues{UpdateServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	case UpdateServiceRequest_FieldPathSelectorCas:
		return &UpdateServiceRequest_FieldTerminalPathArrayOfValues{UpdateServiceRequest_FieldTerminalPath: *fp, values: values.([]*UpdateServiceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateServiceRequest_FieldSubPath struct {
	selector UpdateServiceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateServiceRequest_FieldPath = (*UpdateServiceRequest_FieldSubPath)(nil)

func (fps *UpdateServiceRequest_FieldSubPath) Selector() UpdateServiceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateServiceRequest_FieldSubPath) AsServiceSubPath() (service.Service_FieldPath, bool) {
	res, ok := fps.subPath.(service.Service_FieldPath)
	return res, ok
}
func (fps *UpdateServiceRequest_FieldSubPath) AsCasSubPath() (UpdateServiceRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateServiceRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateServiceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateServiceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateServiceRequest
func (fps *UpdateServiceRequest_FieldSubPath) Get(source *UpdateServiceRequest) (values []interface{}) {
	if asServiceFieldPath, ok := fps.AsServiceSubPath(); ok {
		values = append(values, asServiceFieldPath.Get(source.GetService())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateServiceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateServiceRequest))
}

// GetSingle returns value of selected field from source UpdateServiceRequest
func (fps *UpdateServiceRequest_FieldSubPath) GetSingle(source *UpdateServiceRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		if source.GetService() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetService())
	case UpdateServiceRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fps.selector))
	}
}

func (fps *UpdateServiceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateServiceRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateServiceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateServiceRequest_FieldSubPath) ClearValue(item *UpdateServiceRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateServiceRequest_FieldPathSelectorService:
			fps.subPath.ClearValueRaw(item.Service)
		case UpdateServiceRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateServiceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateServiceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateServiceRequest_FieldSubPath) WithIValue(value interface{}) UpdateServiceRequest_FieldPathValue {
	return &UpdateServiceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateServiceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateServiceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateServiceRequest_FieldPathArrayOfValues {
	return &UpdateServiceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateServiceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateServiceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateServiceRequest_FieldPathArrayItemValue {
	return &UpdateServiceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateServiceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateServiceRequest_FieldPathValue allows storing values for UpdateServiceRequest fields according to their type
type UpdateServiceRequest_FieldPathValue interface {
	UpdateServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateServiceRequest)
	CompareWith(*UpdateServiceRequest) (cmp int, comparable bool)
}

func ParseUpdateServiceRequest_FieldPathValue(pathStr, valueStr string) (UpdateServiceRequest_FieldPathValue, error) {
	fp, err := ParseUpdateServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateServiceRequest_FieldPathValue), nil
}

func MustParseUpdateServiceRequest_FieldPathValue(pathStr, valueStr string) UpdateServiceRequest_FieldPathValue {
	fpv, err := ParseUpdateServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateServiceRequest_FieldTerminalPathValue struct {
	UpdateServiceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceRequest_FieldPathValue = (*UpdateServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateServiceRequest' as interface{}
func (fpv *UpdateServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateServiceRequest_FieldTerminalPathValue) AsServiceValue() (*service.Service, bool) {
	res, ok := fpv.value.(*service.Service)
	return res, ok
}
func (fpv *UpdateServiceRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}
func (fpv *UpdateServiceRequest_FieldTerminalPathValue) AsCasValue() (*UpdateServiceRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateServiceRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateServiceRequest
func (fpv *UpdateServiceRequest_FieldTerminalPathValue) SetTo(target **UpdateServiceRequest) {
	if *target == nil {
		*target = new(UpdateServiceRequest)
	}
	switch fpv.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		(*target).Service = fpv.value.(*service.Service)
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*service.Service_FieldMask)
	case UpdateServiceRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateServiceRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateServiceRequest_FieldTerminalPathValue' with the value under path in 'UpdateServiceRequest'.
func (fpv *UpdateServiceRequest_FieldTerminalPathValue) CompareWith(source *UpdateServiceRequest) (int, bool) {
	switch fpv.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		return 0, false
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateServiceRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateServiceRequest))
}

type UpdateServiceRequest_FieldSubPathValue struct {
	UpdateServiceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateServiceRequest_FieldPathValue = (*UpdateServiceRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateServiceRequest_FieldSubPathValue) AsServicePathValue() (service.Service_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service.Service_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateServiceRequest_FieldSubPathValue) AsCasPathValue() (UpdateServiceRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateServiceRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateServiceRequest_FieldSubPathValue) SetTo(target **UpdateServiceRequest) {
	if *target == nil {
		*target = new(UpdateServiceRequest)
	}
	switch fpvs.Selector() {
	case UpdateServiceRequest_FieldPathSelectorService:
		fpvs.subPathValue.(service.Service_FieldPathValue).SetTo(&(*target).Service)
	case UpdateServiceRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateServiceRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateServiceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateServiceRequest_FieldSubPathValue) CompareWith(source *UpdateServiceRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateServiceRequest_FieldPathSelectorService:
		return fpvs.subPathValue.(service.Service_FieldPathValue).CompareWith(source.GetService())
	case UpdateServiceRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateServiceRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateServiceRequest))
}

// UpdateServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateServiceRequest according to their type
// Present only for array (repeated) types.
type UpdateServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateServiceRequest_FieldPath
	ContainsValue(*UpdateServiceRequest) bool
}

// ParseUpdateServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateServiceRequest_FieldTerminalPathArrayItemValue struct {
	UpdateServiceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceRequest_FieldPathArrayItemValue = (*UpdateServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateServiceRequest as interface{}
func (fpaiv *UpdateServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateServiceRequest'
func (fpaiv *UpdateServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateServiceRequest) bool {
	slice := fpaiv.UpdateServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateServiceRequest_FieldSubPathArrayItemValue struct {
	UpdateServiceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateServiceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateServiceRequest_FieldSubPathArrayItemValue) AsServicePathItemValue() (service.Service_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateServiceRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateServiceRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateServiceRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateServiceRequest'
func (fpaivs *UpdateServiceRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateServiceRequest) bool {
	switch fpaivs.Selector() {
	case UpdateServiceRequest_FieldPathSelectorService:
		return fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue).ContainsValue(source.GetService())
	case UpdateServiceRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateServiceRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest: %d", fpaivs.Selector()))
	}
}

// UpdateServiceRequest_FieldPathArrayOfValues allows storing slice of values for UpdateServiceRequest fields according to their type
type UpdateServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateServiceRequest_FieldPath
}

func ParseUpdateServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateServiceRequest_FieldTerminalPathArrayOfValues struct {
	UpdateServiceRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateServiceRequest_FieldPathArrayOfValues = (*UpdateServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateServiceRequest_FieldPathSelectorService:
		for _, v := range fpaov.values.([]*service.Service) {
			values = append(values, v)
		}
	case UpdateServiceRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	case UpdateServiceRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateServiceRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateServiceRequest_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]*service.Service, bool) {
	res, ok := fpaov.values.([]*service.Service)
	return res, ok
}
func (fpaov *UpdateServiceRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}
func (fpaov *UpdateServiceRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateServiceRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateServiceRequest_CAS)
	return res, ok
}

type UpdateServiceRequest_FieldSubPathArrayOfValues struct {
	UpdateServiceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateServiceRequest_FieldPathArrayOfValues = (*UpdateServiceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateServiceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateServiceRequest_FieldSubPathArrayOfValues) AsServicePathArrayOfValues() (service.Service_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service.Service_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateServiceRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateServiceRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateServiceRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateServiceRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateServiceRequestCAS_FieldPathSelector
	Get(source *UpdateServiceRequest_CAS) []interface{}
	GetSingle(source *UpdateServiceRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateServiceRequest_CAS)

	// Those methods build corresponding UpdateServiceRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateServiceRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateServiceRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateServiceRequestCAS_FieldPathArrayItemValue
}

type UpdateServiceRequestCAS_FieldPathSelector int32

const (
	UpdateServiceRequestCAS_FieldPathSelectorConditionalState UpdateServiceRequestCAS_FieldPathSelector = 0
	UpdateServiceRequestCAS_FieldPathSelectorFieldMask        UpdateServiceRequestCAS_FieldPathSelector = 1
)

func (s UpdateServiceRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", s))
	}
}

func BuildUpdateServiceRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateServiceRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateServiceRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateServiceRequestCAS_FieldTerminalPath{selector: UpdateServiceRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateServiceRequestCAS_FieldTerminalPath{selector: UpdateServiceRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := service.BuildService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateServiceRequestCAS_FieldSubPath{selector: UpdateServiceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateServiceRequest_CAS", fp)
}

func ParseUpdateServiceRequestCAS_FieldPath(rawField string) (UpdateServiceRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateServiceRequestCAS_FieldPath(fp)
}

func MustParseUpdateServiceRequestCAS_FieldPath(rawField string) UpdateServiceRequestCAS_FieldPath {
	fp, err := ParseUpdateServiceRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateServiceRequestCAS_FieldTerminalPath struct {
	selector UpdateServiceRequestCAS_FieldPathSelector
}

var _ UpdateServiceRequestCAS_FieldPath = (*UpdateServiceRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) Selector() UpdateServiceRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateServiceRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateServiceRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateServiceRequest_CAS
func (fp *UpdateServiceRequestCAS_FieldTerminalPath) Get(source *UpdateServiceRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateServiceRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateServiceRequest_CAS
func (fp *UpdateServiceRequestCAS_FieldTerminalPath) GetSingle(source *UpdateServiceRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateServiceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateServiceRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return (*service.Service)(nil)
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		return (*service.Service_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) ClearValue(item *UpdateServiceRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateServiceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateServiceRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateServiceRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateServiceRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateServiceRequestCAS_FieldTerminalPathValue{UpdateServiceRequestCAS_FieldTerminalPath: *fp, value: value.(*service.Service)}
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateServiceRequestCAS_FieldTerminalPathValue{UpdateServiceRequestCAS_FieldTerminalPath: *fp, value: value.(*service.Service_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateServiceRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues{UpdateServiceRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues{UpdateServiceRequestCAS_FieldTerminalPath: *fp, values: values.([]*service.Service)}
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues{UpdateServiceRequestCAS_FieldTerminalPath: *fp, values: values.([]*service.Service_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateServiceRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateServiceRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateServiceRequestCAS_FieldSubPath struct {
	selector UpdateServiceRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateServiceRequestCAS_FieldPath = (*UpdateServiceRequestCAS_FieldSubPath)(nil)

func (fps *UpdateServiceRequestCAS_FieldSubPath) Selector() UpdateServiceRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateServiceRequestCAS_FieldSubPath) AsConditionalStateSubPath() (service.Service_FieldPath, bool) {
	res, ok := fps.subPath.(service.Service_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateServiceRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateServiceRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateServiceRequest_CAS
func (fps *UpdateServiceRequestCAS_FieldSubPath) Get(source *UpdateServiceRequest_CAS) (values []interface{}) {
	if asServiceFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asServiceFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateServiceRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateServiceRequest_CAS
func (fps *UpdateServiceRequestCAS_FieldSubPath) GetSingle(source *UpdateServiceRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateServiceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateServiceRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) ClearValue(item *UpdateServiceRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateServiceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateServiceRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateServiceRequestCAS_FieldPathValue {
	return &UpdateServiceRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateServiceRequestCAS_FieldPathArrayOfValues {
	return &UpdateServiceRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateServiceRequestCAS_FieldPathArrayItemValue {
	return &UpdateServiceRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateServiceRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateServiceRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateServiceRequestCAS_FieldPathValue interface {
	UpdateServiceRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateServiceRequest_CAS)
	CompareWith(*UpdateServiceRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateServiceRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateServiceRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateServiceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateServiceRequestCAS_FieldPathValue), nil
}

func MustParseUpdateServiceRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateServiceRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateServiceRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateServiceRequestCAS_FieldTerminalPathValue struct {
	UpdateServiceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceRequestCAS_FieldPathValue = (*UpdateServiceRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*service.Service, bool) {
	res, ok := fpv.value.(*service.Service)
	return res, ok
}
func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*service.Service_FieldMask, bool) {
	res, ok := fpv.value.(*service.Service_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateServiceRequest_CAS) {
	if *target == nil {
		*target = new(UpdateServiceRequest_CAS)
	}
	switch fpv.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*service.Service)
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*service.Service_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateServiceRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateServiceRequest_CAS'.
func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateServiceRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateServiceRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateServiceRequest_CAS))
}

type UpdateServiceRequestCAS_FieldSubPathValue struct {
	UpdateServiceRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateServiceRequestCAS_FieldPathValue = (*UpdateServiceRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateServiceRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (service.Service_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(service.Service_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateServiceRequestCAS_FieldSubPathValue) SetTo(target **UpdateServiceRequest_CAS) {
	if *target == nil {
		*target = new(UpdateServiceRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(service.Service_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateServiceRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateServiceRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateServiceRequestCAS_FieldSubPathValue) CompareWith(source *UpdateServiceRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(service.Service_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateServiceRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateServiceRequest_CAS))
}

// UpdateServiceRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateServiceRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateServiceRequestCAS_FieldPath
	ContainsValue(*UpdateServiceRequest_CAS) bool
}

// ParseUpdateServiceRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateServiceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateServiceRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateServiceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateServiceRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateServiceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateServiceRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateServiceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateServiceRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateServiceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateServiceRequestCAS_FieldPathArrayItemValue = (*UpdateServiceRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateServiceRequest_CAS as interface{}
func (fpaiv *UpdateServiceRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateServiceRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateServiceRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateServiceRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateServiceRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateServiceRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateServiceRequest_CAS) bool {
	slice := fpaiv.UpdateServiceRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateServiceRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateServiceRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateServiceRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateServiceRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (service.Service_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateServiceRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateServiceRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(service.Service_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateServiceRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateServiceRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateServiceRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateServiceRequestCAS_FieldPath
}

func ParseUpdateServiceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateServiceRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateServiceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateServiceRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateServiceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateServiceRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateServiceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateServiceRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateServiceRequestCAS_FieldPathArrayOfValues = (*UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateServiceRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*service.Service) {
			values = append(values, v)
		}
	case UpdateServiceRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*service.Service_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*service.Service, bool) {
	res, ok := fpaov.values.([]*service.Service)
	return res, ok
}
func (fpaov *UpdateServiceRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*service.Service_FieldMask, bool) {
	res, ok := fpaov.values.([]*service.Service_FieldMask)
	return res, ok
}

type UpdateServiceRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateServiceRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateServiceRequestCAS_FieldPathArrayOfValues = (*UpdateServiceRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateServiceRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateServiceRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (service.Service_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(service.Service_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteServiceRequest_FieldPathSelector
	Get(source *DeleteServiceRequest) []interface{}
	GetSingle(source *DeleteServiceRequest) (interface{}, bool)
	ClearValue(item *DeleteServiceRequest)

	// Those methods build corresponding DeleteServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteServiceRequest_FieldPathArrayItemValue
}

type DeleteServiceRequest_FieldPathSelector int32

const (
	DeleteServiceRequest_FieldPathSelectorName DeleteServiceRequest_FieldPathSelector = 0
)

func (s DeleteServiceRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteServiceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", s))
	}
}

func BuildDeleteServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteServiceRequest_FieldTerminalPath{selector: DeleteServiceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteServiceRequest", fp)
}

func ParseDeleteServiceRequest_FieldPath(rawField string) (DeleteServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteServiceRequest_FieldPath(fp)
}

func MustParseDeleteServiceRequest_FieldPath(rawField string) DeleteServiceRequest_FieldPath {
	fp, err := ParseDeleteServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteServiceRequest_FieldTerminalPath struct {
	selector DeleteServiceRequest_FieldPathSelector
}

var _ DeleteServiceRequest_FieldPath = (*DeleteServiceRequest_FieldTerminalPath)(nil)

func (fp *DeleteServiceRequest_FieldTerminalPath) Selector() DeleteServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteServiceRequest
func (fp *DeleteServiceRequest_FieldTerminalPath) Get(source *DeleteServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteServiceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteServiceRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteServiceRequest
func (fp *DeleteServiceRequest_FieldTerminalPath) GetSingle(source *DeleteServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		return (*service.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceRequest_FieldTerminalPath) ClearValue(item *DeleteServiceRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteServiceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteServiceRequest_FieldPathSelectorName
}

func (fp *DeleteServiceRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteServiceRequest_FieldPathValue {
	switch fp.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		return &DeleteServiceRequest_FieldTerminalPathValue{DeleteServiceRequest_FieldTerminalPath: *fp, value: value.(*service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteServiceRequest_FieldPathArrayOfValues {
	fpaov := &DeleteServiceRequest_FieldTerminalPathArrayOfValues{DeleteServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		return &DeleteServiceRequest_FieldTerminalPathArrayOfValues{DeleteServiceRequest_FieldTerminalPath: *fp, values: values.([]*service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fp.selector))
	}
}

func (fp *DeleteServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteServiceRequest_FieldPathValue allows storing values for DeleteServiceRequest fields according to their type
type DeleteServiceRequest_FieldPathValue interface {
	DeleteServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteServiceRequest)
	CompareWith(*DeleteServiceRequest) (cmp int, comparable bool)
}

func ParseDeleteServiceRequest_FieldPathValue(pathStr, valueStr string) (DeleteServiceRequest_FieldPathValue, error) {
	fp, err := ParseDeleteServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteServiceRequest_FieldPathValue), nil
}

func MustParseDeleteServiceRequest_FieldPathValue(pathStr, valueStr string) DeleteServiceRequest_FieldPathValue {
	fpv, err := ParseDeleteServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteServiceRequest_FieldTerminalPathValue struct {
	DeleteServiceRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteServiceRequest_FieldPathValue = (*DeleteServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteServiceRequest' as interface{}
func (fpv *DeleteServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteServiceRequest_FieldTerminalPathValue) AsNameValue() (*service.Reference, bool) {
	res, ok := fpv.value.(*service.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteServiceRequest
func (fpv *DeleteServiceRequest_FieldTerminalPathValue) SetTo(target **DeleteServiceRequest) {
	if *target == nil {
		*target = new(DeleteServiceRequest)
	}
	switch fpv.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*service.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteServiceRequest_FieldTerminalPathValue' with the value under path in 'DeleteServiceRequest'.
func (fpv *DeleteServiceRequest_FieldTerminalPathValue) CompareWith(source *DeleteServiceRequest) (int, bool) {
	switch fpv.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*service.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteServiceRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteServiceRequest))
}

// DeleteServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteServiceRequest according to their type
// Present only for array (repeated) types.
type DeleteServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteServiceRequest_FieldPath
	ContainsValue(*DeleteServiceRequest) bool
}

// ParseDeleteServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteServiceRequest_FieldTerminalPathArrayItemValue struct {
	DeleteServiceRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteServiceRequest_FieldPathArrayItemValue = (*DeleteServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteServiceRequest as interface{}
func (fpaiv *DeleteServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteServiceRequest'
func (fpaiv *DeleteServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteServiceRequest) bool {
	slice := fpaiv.DeleteServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteServiceRequest_FieldPathArrayOfValues allows storing slice of values for DeleteServiceRequest fields according to their type
type DeleteServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteServiceRequest_FieldPath
}

func ParseDeleteServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteServiceRequest_FieldTerminalPathArrayOfValues struct {
	DeleteServiceRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteServiceRequest_FieldPathArrayOfValues = (*DeleteServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteServiceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*service.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteServiceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*service.Reference, bool) {
	res, ok := fpaov.values.([]*service.Reference)
	return res, ok
}
