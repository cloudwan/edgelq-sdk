// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/service_service.proto
// DO NOT EDIT!!!

package service_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &service.Service{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetServiceRequest) GotenObjectExt() {}

func (o *GetServiceRequest) MakeFullFieldMask() *GetServiceRequest_FieldMask {
	return FullGetServiceRequest_FieldMask()
}

func (o *GetServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetServiceRequest_FieldMask()
}

func (o *GetServiceRequest) MakeDiffFieldMask(other *GetServiceRequest) *GetServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &GetServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetServiceRequest_FieldMask()
	}

	res := &GetServiceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetServiceRequest_FieldTerminalPath{selector: GetServiceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetServiceRequest_FieldTerminalPath{selector: GetServiceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetServiceRequest_FieldTerminalPath{selector: GetServiceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetServiceRequest))
}

func (o *GetServiceRequest) Clone() *GetServiceRequest {
	if o == nil {
		return nil
	}
	result := &GetServiceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service.Service_FieldMask)
	result.View = o.View
	return result
}

func (o *GetServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetServiceRequest) Merge(source *GetServiceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetServiceRequest))
}

func (o *BatchGetServicesRequest) GotenObjectExt() {}

func (o *BatchGetServicesRequest) MakeFullFieldMask() *BatchGetServicesRequest_FieldMask {
	return FullBatchGetServicesRequest_FieldMask()
}

func (o *BatchGetServicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetServicesRequest_FieldMask()
}

func (o *BatchGetServicesRequest) MakeDiffFieldMask(other *BatchGetServicesRequest) *BatchGetServicesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetServicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetServicesRequest_FieldMask()
	}

	res := &BatchGetServicesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetServicesRequest_FieldTerminalPath{selector: BatchGetServicesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetServicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetServicesRequest))
}

func (o *BatchGetServicesRequest) Clone() *BatchGetServicesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetServicesRequest{}
	result.Names = make([]*service.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &service.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service.Service_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetServicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetServicesRequest) Merge(source *BatchGetServicesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &service.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetServicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetServicesRequest))
}

func (o *BatchGetServicesResponse) GotenObjectExt() {}

func (o *BatchGetServicesResponse) MakeFullFieldMask() *BatchGetServicesResponse_FieldMask {
	return FullBatchGetServicesResponse_FieldMask()
}

func (o *BatchGetServicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetServicesResponse_FieldMask()
}

func (o *BatchGetServicesResponse) MakeDiffFieldMask(other *BatchGetServicesResponse) *BatchGetServicesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetServicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetServicesResponse_FieldMask()
	}

	res := &BatchGetServicesResponse_FieldMask{}

	if len(o.GetServices()) == len(other.GetServices()) {
		for i, lValue := range o.GetServices() {
			rValue := other.GetServices()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetServicesResponse_FieldTerminalPath{selector: BatchGetServicesResponse_FieldPathSelectorServices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServicesResponse_FieldTerminalPath{selector: BatchGetServicesResponse_FieldPathSelectorServices})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetServicesResponse_FieldTerminalPath{selector: BatchGetServicesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetServicesResponse_FieldTerminalPath{selector: BatchGetServicesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetServicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetServicesResponse))
}

func (o *BatchGetServicesResponse) Clone() *BatchGetServicesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetServicesResponse{}
	result.Services = make([]*service.Service, len(o.Services))
	for i, sourceValue := range o.Services {
		result.Services[i] = sourceValue.Clone()
	}
	result.Missing = make([]*service.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &service.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetServicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetServicesResponse) Merge(source *BatchGetServicesResponse) {
	for _, sourceValue := range source.GetServices() {
		exists := false
		for _, currentValue := range o.Services {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service.Service
			if sourceValue != nil {
				newDstElement = new(service.Service)
				newDstElement.Merge(sourceValue)
			}
			o.Services = append(o.Services, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &service.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetServicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetServicesResponse))
}

func (o *ListServicesRequest) GotenObjectExt() {}

func (o *ListServicesRequest) MakeFullFieldMask() *ListServicesRequest_FieldMask {
	return FullListServicesRequest_FieldMask()
}

func (o *ListServicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListServicesRequest_FieldMask()
}

func (o *ListServicesRequest) MakeDiffFieldMask(other *ListServicesRequest) *ListServicesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListServicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListServicesRequest_FieldMask()
	}

	res := &ListServicesRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListServicesRequest_FieldTerminalPath{selector: ListServicesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListServicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListServicesRequest))
}

func (o *ListServicesRequest) Clone() *ListServicesRequest {
	if o == nil {
		return nil
	}
	result := &ListServicesRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &service.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &service.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &service.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service.Service_FieldMask)
	result.View = o.View
	return result
}

func (o *ListServicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListServicesRequest) Merge(source *ListServicesRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &service.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &service.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &service.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListServicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListServicesRequest))
}

func (o *ListServicesResponse) GotenObjectExt() {}

func (o *ListServicesResponse) MakeFullFieldMask() *ListServicesResponse_FieldMask {
	return FullListServicesResponse_FieldMask()
}

func (o *ListServicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListServicesResponse_FieldMask()
}

func (o *ListServicesResponse) MakeDiffFieldMask(other *ListServicesResponse) *ListServicesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListServicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListServicesResponse_FieldMask()
	}

	res := &ListServicesResponse_FieldMask{}

	if len(o.GetServices()) == len(other.GetServices()) {
		for i, lValue := range o.GetServices() {
			rValue := other.GetServices()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorServices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorServices})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListServicesResponse_FieldTerminalPath{selector: ListServicesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListServicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListServicesResponse))
}

func (o *ListServicesResponse) Clone() *ListServicesResponse {
	if o == nil {
		return nil
	}
	result := &ListServicesResponse{}
	result.Services = make([]*service.Service, len(o.Services))
	for i, sourceValue := range o.Services {
		result.Services[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &service.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &service.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListServicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListServicesResponse) Merge(source *ListServicesResponse) {
	for _, sourceValue := range source.GetServices() {
		exists := false
		for _, currentValue := range o.Services {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service.Service
			if sourceValue != nil {
				newDstElement = new(service.Service)
				newDstElement.Merge(sourceValue)
			}
			o.Services = append(o.Services, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &service.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &service.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListServicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListServicesResponse))
}

func (o *WatchServiceRequest) GotenObjectExt() {}

func (o *WatchServiceRequest) MakeFullFieldMask() *WatchServiceRequest_FieldMask {
	return FullWatchServiceRequest_FieldMask()
}

func (o *WatchServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceRequest_FieldMask()
}

func (o *WatchServiceRequest) MakeDiffFieldMask(other *WatchServiceRequest) *WatchServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceRequest_FieldMask()
	}

	res := &WatchServiceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchServiceRequest_FieldTerminalPath{selector: WatchServiceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchServiceRequest_FieldTerminalPath{selector: WatchServiceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchServiceRequest_FieldTerminalPath{selector: WatchServiceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceRequest))
}

func (o *WatchServiceRequest) Clone() *WatchServiceRequest {
	if o == nil {
		return nil
	}
	result := &WatchServiceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service.Service_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceRequest) Merge(source *WatchServiceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceRequest))
}

func (o *WatchServiceResponse) GotenObjectExt() {}

func (o *WatchServiceResponse) MakeFullFieldMask() *WatchServiceResponse_FieldMask {
	return FullWatchServiceResponse_FieldMask()
}

func (o *WatchServiceResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServiceResponse_FieldMask()
}

func (o *WatchServiceResponse) MakeDiffFieldMask(other *WatchServiceResponse) *WatchServiceResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchServiceResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServiceResponse_FieldMask()
	}

	res := &WatchServiceResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchServiceResponse_FieldTerminalPath{selector: WatchServiceResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchServiceResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServiceResponse))
}

func (o *WatchServiceResponse) Clone() *WatchServiceResponse {
	if o == nil {
		return nil
	}
	result := &WatchServiceResponse{}
	result.Change = proto.Clone(o.Change).(*service.ServiceChange)
	return result
}

func (o *WatchServiceResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServiceResponse) Merge(source *WatchServiceResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(service.ServiceChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchServiceResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServiceResponse))
}

func (o *WatchServicesRequest) GotenObjectExt() {}

func (o *WatchServicesRequest) MakeFullFieldMask() *WatchServicesRequest_FieldMask {
	return FullWatchServicesRequest_FieldMask()
}

func (o *WatchServicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServicesRequest_FieldMask()
}

func (o *WatchServicesRequest) MakeDiffFieldMask(other *WatchServicesRequest) *WatchServicesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchServicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServicesRequest_FieldMask()
	}

	res := &WatchServicesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchServicesRequest_FieldTerminalPath{selector: WatchServicesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchServicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServicesRequest))
}

func (o *WatchServicesRequest) Clone() *WatchServicesRequest {
	if o == nil {
		return nil
	}
	result := &WatchServicesRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &service.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &service.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &service.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*service.Service_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchServicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServicesRequest) Merge(source *WatchServicesRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &service.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &service.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &service.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchServicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServicesRequest))
}

func (o *WatchServicesResponse) GotenObjectExt() {}

func (o *WatchServicesResponse) MakeFullFieldMask() *WatchServicesResponse_FieldMask {
	return FullWatchServicesResponse_FieldMask()
}

func (o *WatchServicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServicesResponse_FieldMask()
}

func (o *WatchServicesResponse) MakeDiffFieldMask(other *WatchServicesResponse) *WatchServicesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchServicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServicesResponse_FieldMask()
	}

	res := &WatchServicesResponse_FieldMask{}

	if len(o.GetServiceChanges()) == len(other.GetServiceChanges()) {
		for i, lValue := range o.GetServiceChanges() {
			rValue := other.GetServiceChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorServiceChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorServiceChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchServicesResponse_FieldSubPath{selector: WatchServicesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchServicesResponse_FieldTerminalPath{selector: WatchServicesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchServicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServicesResponse))
}

func (o *WatchServicesResponse) Clone() *WatchServicesResponse {
	if o == nil {
		return nil
	}
	result := &WatchServicesResponse{}
	result.ServiceChanges = make([]*service.ServiceChange, len(o.ServiceChanges))
	for i, sourceValue := range o.ServiceChanges {
		result.ServiceChanges[i] = proto.Clone(sourceValue).(*service.ServiceChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchServicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServicesResponse) Merge(source *WatchServicesResponse) {
	for _, sourceValue := range source.GetServiceChanges() {
		exists := false
		for _, currentValue := range o.ServiceChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *service.ServiceChange
			if sourceValue != nil {
				newDstElement = new(service.ServiceChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ServiceChanges = append(o.ServiceChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchServicesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchServicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServicesResponse))
}

func (o *WatchServicesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchServicesResponse_PageTokenChange) MakeFullFieldMask() *WatchServicesResponse_PageTokenChange_FieldMask {
	return FullWatchServicesResponse_PageTokenChange_FieldMask()
}

func (o *WatchServicesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchServicesResponse_PageTokenChange_FieldMask()
}

func (o *WatchServicesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchServicesResponse_PageTokenChange) *WatchServicesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchServicesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchServicesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchServicesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchServicesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchServicesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchServicesResponse_PageTokenChange))
}

func (o *WatchServicesResponse_PageTokenChange) Clone() *WatchServicesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchServicesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &service.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &service.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchServicesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchServicesResponse_PageTokenChange) Merge(source *WatchServicesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &service.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &service.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchServicesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchServicesResponse_PageTokenChange))
}

func (o *CreateServiceRequest) GotenObjectExt() {}

func (o *CreateServiceRequest) MakeFullFieldMask() *CreateServiceRequest_FieldMask {
	return FullCreateServiceRequest_FieldMask()
}

func (o *CreateServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateServiceRequest_FieldMask()
}

func (o *CreateServiceRequest) MakeDiffFieldMask(other *CreateServiceRequest) *CreateServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateServiceRequest_FieldMask()
	}

	res := &CreateServiceRequest_FieldMask{}
	{
		subMask := o.GetService().MakeDiffFieldMask(other.GetService())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateServiceRequest_FieldTerminalPath{selector: CreateServiceRequest_FieldPathSelectorService})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateServiceRequest_FieldSubPath{selector: CreateServiceRequest_FieldPathSelectorService, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateServiceRequest))
}

func (o *CreateServiceRequest) Clone() *CreateServiceRequest {
	if o == nil {
		return nil
	}
	result := &CreateServiceRequest{}
	result.Service = o.Service.Clone()
	return result
}

func (o *CreateServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateServiceRequest) Merge(source *CreateServiceRequest) {
	if source.GetService() != nil {
		if o.Service == nil {
			o.Service = new(service.Service)
		}
		o.Service.Merge(source.GetService())
	}
}

func (o *CreateServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateServiceRequest))
}

func (o *UpdateServiceRequest) GotenObjectExt() {}

func (o *UpdateServiceRequest) MakeFullFieldMask() *UpdateServiceRequest_FieldMask {
	return FullUpdateServiceRequest_FieldMask()
}

func (o *UpdateServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateServiceRequest_FieldMask()
}

func (o *UpdateServiceRequest) MakeDiffFieldMask(other *UpdateServiceRequest) *UpdateServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateServiceRequest_FieldMask()
	}

	res := &UpdateServiceRequest_FieldMask{}
	{
		subMask := o.GetService().MakeDiffFieldMask(other.GetService())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceRequest_FieldTerminalPath{selector: UpdateServiceRequest_FieldPathSelectorService})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceRequest_FieldSubPath{selector: UpdateServiceRequest_FieldPathSelectorService, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateServiceRequest_FieldTerminalPath{selector: UpdateServiceRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceRequest_FieldTerminalPath{selector: UpdateServiceRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceRequest_FieldSubPath{selector: UpdateServiceRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateServiceRequest))
}

func (o *UpdateServiceRequest) Clone() *UpdateServiceRequest {
	if o == nil {
		return nil
	}
	result := &UpdateServiceRequest{}
	result.Service = o.Service.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*service.Service_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateServiceRequest) Merge(source *UpdateServiceRequest) {
	if source.GetService() != nil {
		if o.Service == nil {
			o.Service = new(service.Service)
		}
		o.Service.Merge(source.GetService())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateServiceRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateServiceRequest))
}

func (o *UpdateServiceRequest_CAS) GotenObjectExt() {}

func (o *UpdateServiceRequest_CAS) MakeFullFieldMask() *UpdateServiceRequest_CAS_FieldMask {
	return FullUpdateServiceRequest_CAS_FieldMask()
}

func (o *UpdateServiceRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateServiceRequest_CAS_FieldMask()
}

func (o *UpdateServiceRequest_CAS) MakeDiffFieldMask(other *UpdateServiceRequest_CAS) *UpdateServiceRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateServiceRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateServiceRequest_CAS_FieldMask()
	}

	res := &UpdateServiceRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateServiceRequestCAS_FieldTerminalPath{selector: UpdateServiceRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateServiceRequestCAS_FieldSubPath{selector: UpdateServiceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateServiceRequestCAS_FieldTerminalPath{selector: UpdateServiceRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateServiceRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateServiceRequest_CAS))
}

func (o *UpdateServiceRequest_CAS) Clone() *UpdateServiceRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateServiceRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*service.Service_FieldMask)
	return result
}

func (o *UpdateServiceRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateServiceRequest_CAS) Merge(source *UpdateServiceRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(service.Service)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(service.Service_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateServiceRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateServiceRequest_CAS))
}

func (o *DeleteServiceRequest) GotenObjectExt() {}

func (o *DeleteServiceRequest) MakeFullFieldMask() *DeleteServiceRequest_FieldMask {
	return FullDeleteServiceRequest_FieldMask()
}

func (o *DeleteServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteServiceRequest_FieldMask()
}

func (o *DeleteServiceRequest) MakeDiffFieldMask(other *DeleteServiceRequest) *DeleteServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteServiceRequest_FieldMask()
	}

	res := &DeleteServiceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteServiceRequest_FieldTerminalPath{selector: DeleteServiceRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteServiceRequest))
}

func (o *DeleteServiceRequest) Clone() *DeleteServiceRequest {
	if o == nil {
		return nil
	}
	result := &DeleteServiceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &service.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteServiceRequest) Merge(source *DeleteServiceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &service.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteServiceRequest))
}
