// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/deployment_service.proto
// DO NOT EDIT!!!

package deployment_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	deployment "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/deployment"
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &deployment.Deployment{}
	_ = &region.Region{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetDeploymentRequest) GotenObjectExt() {}

func (o *GetDeploymentRequest) MakeFullFieldMask() *GetDeploymentRequest_FieldMask {
	return FullGetDeploymentRequest_FieldMask()
}

func (o *GetDeploymentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetDeploymentRequest_FieldMask()
}

func (o *GetDeploymentRequest) MakeDiffFieldMask(other *GetDeploymentRequest) *GetDeploymentRequest_FieldMask {
	if o == nil && other == nil {
		return &GetDeploymentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetDeploymentRequest_FieldMask()
	}

	res := &GetDeploymentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetDeploymentRequest_FieldTerminalPath{selector: GetDeploymentRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetDeploymentRequest_FieldTerminalPath{selector: GetDeploymentRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetDeploymentRequest_FieldTerminalPath{selector: GetDeploymentRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetDeploymentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetDeploymentRequest))
}

func (o *GetDeploymentRequest) Clone() *GetDeploymentRequest {
	if o == nil {
		return nil
	}
	result := &GetDeploymentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &deployment.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*deployment.Deployment_FieldMask)
	result.View = o.View
	return result
}

func (o *GetDeploymentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetDeploymentRequest) Merge(source *GetDeploymentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &deployment.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetDeploymentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetDeploymentRequest))
}

func (o *BatchGetDeploymentsRequest) GotenObjectExt() {}

func (o *BatchGetDeploymentsRequest) MakeFullFieldMask() *BatchGetDeploymentsRequest_FieldMask {
	return FullBatchGetDeploymentsRequest_FieldMask()
}

func (o *BatchGetDeploymentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDeploymentsRequest_FieldMask()
}

func (o *BatchGetDeploymentsRequest) MakeDiffFieldMask(other *BatchGetDeploymentsRequest) *BatchGetDeploymentsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDeploymentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDeploymentsRequest_FieldMask()
	}

	res := &BatchGetDeploymentsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetDeploymentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDeploymentsRequest))
}

func (o *BatchGetDeploymentsRequest) Clone() *BatchGetDeploymentsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetDeploymentsRequest{}
	result.Names = make([]*deployment.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &deployment.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*deployment.Deployment_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetDeploymentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDeploymentsRequest) Merge(source *BatchGetDeploymentsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *deployment.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &deployment.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetDeploymentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDeploymentsRequest))
}

func (o *BatchGetDeploymentsResponse) GotenObjectExt() {}

func (o *BatchGetDeploymentsResponse) MakeFullFieldMask() *BatchGetDeploymentsResponse_FieldMask {
	return FullBatchGetDeploymentsResponse_FieldMask()
}

func (o *BatchGetDeploymentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDeploymentsResponse_FieldMask()
}

func (o *BatchGetDeploymentsResponse) MakeDiffFieldMask(other *BatchGetDeploymentsResponse) *BatchGetDeploymentsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDeploymentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDeploymentsResponse_FieldMask()
	}

	res := &BatchGetDeploymentsResponse_FieldMask{}

	if len(o.GetDeployments()) == len(other.GetDeployments()) {
		for i, lValue := range o.GetDeployments() {
			rValue := other.GetDeployments()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetDeploymentsResponse_FieldTerminalPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorDeployments})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeploymentsResponse_FieldTerminalPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorDeployments})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDeploymentsResponse_FieldTerminalPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeploymentsResponse_FieldTerminalPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetDeploymentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDeploymentsResponse))
}

func (o *BatchGetDeploymentsResponse) Clone() *BatchGetDeploymentsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetDeploymentsResponse{}
	result.Deployments = make([]*deployment.Deployment, len(o.Deployments))
	for i, sourceValue := range o.Deployments {
		result.Deployments[i] = sourceValue.Clone()
	}
	result.Missing = make([]*deployment.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &deployment.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetDeploymentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDeploymentsResponse) Merge(source *BatchGetDeploymentsResponse) {
	for _, sourceValue := range source.GetDeployments() {
		exists := false
		for _, currentValue := range o.Deployments {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *deployment.Deployment
			if sourceValue != nil {
				newDstElement = new(deployment.Deployment)
				newDstElement.Merge(sourceValue)
			}
			o.Deployments = append(o.Deployments, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *deployment.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &deployment.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetDeploymentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDeploymentsResponse))
}

func (o *ListDeploymentsRequest) GotenObjectExt() {}

func (o *ListDeploymentsRequest) MakeFullFieldMask() *ListDeploymentsRequest_FieldMask {
	return FullListDeploymentsRequest_FieldMask()
}

func (o *ListDeploymentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDeploymentsRequest_FieldMask()
}

func (o *ListDeploymentsRequest) MakeDiffFieldMask(other *ListDeploymentsRequest) *ListDeploymentsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListDeploymentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDeploymentsRequest_FieldMask()
	}

	res := &ListDeploymentsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListDeploymentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDeploymentsRequest))
}

func (o *ListDeploymentsRequest) Clone() *ListDeploymentsRequest {
	if o == nil {
		return nil
	}
	result := &ListDeploymentsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &deployment.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &deployment.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &deployment.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &deployment.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*deployment.Deployment_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListDeploymentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDeploymentsRequest) Merge(source *ListDeploymentsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &deployment.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &deployment.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &deployment.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &deployment.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListDeploymentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDeploymentsRequest))
}

func (o *ListDeploymentsResponse) GotenObjectExt() {}

func (o *ListDeploymentsResponse) MakeFullFieldMask() *ListDeploymentsResponse_FieldMask {
	return FullListDeploymentsResponse_FieldMask()
}

func (o *ListDeploymentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDeploymentsResponse_FieldMask()
}

func (o *ListDeploymentsResponse) MakeDiffFieldMask(other *ListDeploymentsResponse) *ListDeploymentsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListDeploymentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDeploymentsResponse_FieldMask()
	}

	res := &ListDeploymentsResponse_FieldMask{}

	if len(o.GetDeployments()) == len(other.GetDeployments()) {
		for i, lValue := range o.GetDeployments() {
			rValue := other.GetDeployments()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorDeployments})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorDeployments})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListDeploymentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDeploymentsResponse))
}

func (o *ListDeploymentsResponse) Clone() *ListDeploymentsResponse {
	if o == nil {
		return nil
	}
	result := &ListDeploymentsResponse{}
	result.Deployments = make([]*deployment.Deployment, len(o.Deployments))
	for i, sourceValue := range o.Deployments {
		result.Deployments[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &deployment.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &deployment.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListDeploymentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDeploymentsResponse) Merge(source *ListDeploymentsResponse) {
	for _, sourceValue := range source.GetDeployments() {
		exists := false
		for _, currentValue := range o.Deployments {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *deployment.Deployment
			if sourceValue != nil {
				newDstElement = new(deployment.Deployment)
				newDstElement.Merge(sourceValue)
			}
			o.Deployments = append(o.Deployments, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &deployment.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &deployment.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListDeploymentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDeploymentsResponse))
}

func (o *WatchDeploymentRequest) GotenObjectExt() {}

func (o *WatchDeploymentRequest) MakeFullFieldMask() *WatchDeploymentRequest_FieldMask {
	return FullWatchDeploymentRequest_FieldMask()
}

func (o *WatchDeploymentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeploymentRequest_FieldMask()
}

func (o *WatchDeploymentRequest) MakeDiffFieldMask(other *WatchDeploymentRequest) *WatchDeploymentRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeploymentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeploymentRequest_FieldMask()
	}

	res := &WatchDeploymentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchDeploymentRequest_FieldTerminalPath{selector: WatchDeploymentRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeploymentRequest_FieldTerminalPath{selector: WatchDeploymentRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeploymentRequest_FieldTerminalPath{selector: WatchDeploymentRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchDeploymentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeploymentRequest))
}

func (o *WatchDeploymentRequest) Clone() *WatchDeploymentRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeploymentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &deployment.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*deployment.Deployment_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchDeploymentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeploymentRequest) Merge(source *WatchDeploymentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &deployment.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchDeploymentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeploymentRequest))
}

func (o *WatchDeploymentResponse) GotenObjectExt() {}

func (o *WatchDeploymentResponse) MakeFullFieldMask() *WatchDeploymentResponse_FieldMask {
	return FullWatchDeploymentResponse_FieldMask()
}

func (o *WatchDeploymentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeploymentResponse_FieldMask()
}

func (o *WatchDeploymentResponse) MakeDiffFieldMask(other *WatchDeploymentResponse) *WatchDeploymentResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeploymentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeploymentResponse_FieldMask()
	}

	res := &WatchDeploymentResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchDeploymentResponse_FieldTerminalPath{selector: WatchDeploymentResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchDeploymentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeploymentResponse))
}

func (o *WatchDeploymentResponse) Clone() *WatchDeploymentResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeploymentResponse{}
	result.Change = proto.Clone(o.Change).(*deployment.DeploymentChange)
	return result
}

func (o *WatchDeploymentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeploymentResponse) Merge(source *WatchDeploymentResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(deployment.DeploymentChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchDeploymentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeploymentResponse))
}

func (o *WatchDeploymentsRequest) GotenObjectExt() {}

func (o *WatchDeploymentsRequest) MakeFullFieldMask() *WatchDeploymentsRequest_FieldMask {
	return FullWatchDeploymentsRequest_FieldMask()
}

func (o *WatchDeploymentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeploymentsRequest_FieldMask()
}

func (o *WatchDeploymentsRequest) MakeDiffFieldMask(other *WatchDeploymentsRequest) *WatchDeploymentsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeploymentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeploymentsRequest_FieldMask()
	}

	res := &WatchDeploymentsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchDeploymentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeploymentsRequest))
}

func (o *WatchDeploymentsRequest) Clone() *WatchDeploymentsRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeploymentsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &deployment.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &deployment.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &deployment.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &deployment.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*deployment.Deployment_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchDeploymentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeploymentsRequest) Merge(source *WatchDeploymentsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &deployment.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &deployment.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &deployment.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &deployment.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchDeploymentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeploymentsRequest))
}

func (o *WatchDeploymentsResponse) GotenObjectExt() {}

func (o *WatchDeploymentsResponse) MakeFullFieldMask() *WatchDeploymentsResponse_FieldMask {
	return FullWatchDeploymentsResponse_FieldMask()
}

func (o *WatchDeploymentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeploymentsResponse_FieldMask()
}

func (o *WatchDeploymentsResponse) MakeDiffFieldMask(other *WatchDeploymentsResponse) *WatchDeploymentsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeploymentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeploymentsResponse_FieldMask()
	}

	res := &WatchDeploymentsResponse_FieldMask{}

	if len(o.GetDeploymentChanges()) == len(other.GetDeploymentChanges()) {
		for i, lValue := range o.GetDeploymentChanges() {
			rValue := other.GetDeploymentChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldSubPath{selector: WatchDeploymentsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchDeploymentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeploymentsResponse))
}

func (o *WatchDeploymentsResponse) Clone() *WatchDeploymentsResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeploymentsResponse{}
	result.DeploymentChanges = make([]*deployment.DeploymentChange, len(o.DeploymentChanges))
	for i, sourceValue := range o.DeploymentChanges {
		result.DeploymentChanges[i] = proto.Clone(sourceValue).(*deployment.DeploymentChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchDeploymentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeploymentsResponse) Merge(source *WatchDeploymentsResponse) {
	for _, sourceValue := range source.GetDeploymentChanges() {
		exists := false
		for _, currentValue := range o.DeploymentChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *deployment.DeploymentChange
			if sourceValue != nil {
				newDstElement = new(deployment.DeploymentChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.DeploymentChanges = append(o.DeploymentChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchDeploymentsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchDeploymentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeploymentsResponse))
}

func (o *WatchDeploymentsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchDeploymentsResponse_PageTokenChange) MakeFullFieldMask() *WatchDeploymentsResponse_PageTokenChange_FieldMask {
	return FullWatchDeploymentsResponse_PageTokenChange_FieldMask()
}

func (o *WatchDeploymentsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeploymentsResponse_PageTokenChange_FieldMask()
}

func (o *WatchDeploymentsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchDeploymentsResponse_PageTokenChange) *WatchDeploymentsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchDeploymentsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeploymentsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchDeploymentsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeploymentsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchDeploymentsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeploymentsResponse_PageTokenChange))
}

func (o *WatchDeploymentsResponse_PageTokenChange) Clone() *WatchDeploymentsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchDeploymentsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &deployment.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &deployment.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchDeploymentsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeploymentsResponse_PageTokenChange) Merge(source *WatchDeploymentsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &deployment.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &deployment.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchDeploymentsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeploymentsResponse_PageTokenChange))
}

func (o *CreateDeploymentRequest) GotenObjectExt() {}

func (o *CreateDeploymentRequest) MakeFullFieldMask() *CreateDeploymentRequest_FieldMask {
	return FullCreateDeploymentRequest_FieldMask()
}

func (o *CreateDeploymentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateDeploymentRequest_FieldMask()
}

func (o *CreateDeploymentRequest) MakeDiffFieldMask(other *CreateDeploymentRequest) *CreateDeploymentRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateDeploymentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateDeploymentRequest_FieldMask()
	}

	res := &CreateDeploymentRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateDeploymentRequest_FieldTerminalPath{selector: CreateDeploymentRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetDeployment().MakeDiffFieldMask(other.GetDeployment())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateDeploymentRequest_FieldTerminalPath{selector: CreateDeploymentRequest_FieldPathSelectorDeployment})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateDeploymentRequest_FieldSubPath{selector: CreateDeploymentRequest_FieldPathSelectorDeployment, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateDeploymentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateDeploymentRequest))
}

func (o *CreateDeploymentRequest) Clone() *CreateDeploymentRequest {
	if o == nil {
		return nil
	}
	result := &CreateDeploymentRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &deployment.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Deployment = o.Deployment.Clone()
	return result
}

func (o *CreateDeploymentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateDeploymentRequest) Merge(source *CreateDeploymentRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &deployment.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetDeployment() != nil {
		if o.Deployment == nil {
			o.Deployment = new(deployment.Deployment)
		}
		o.Deployment.Merge(source.GetDeployment())
	}
}

func (o *CreateDeploymentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateDeploymentRequest))
}

func (o *UpdateDeploymentRequest) GotenObjectExt() {}

func (o *UpdateDeploymentRequest) MakeFullFieldMask() *UpdateDeploymentRequest_FieldMask {
	return FullUpdateDeploymentRequest_FieldMask()
}

func (o *UpdateDeploymentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeploymentRequest_FieldMask()
}

func (o *UpdateDeploymentRequest) MakeDiffFieldMask(other *UpdateDeploymentRequest) *UpdateDeploymentRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeploymentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeploymentRequest_FieldMask()
	}

	res := &UpdateDeploymentRequest_FieldMask{}
	{
		subMask := o.GetDeployment().MakeDiffFieldMask(other.GetDeployment())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeploymentRequest_FieldTerminalPath{selector: UpdateDeploymentRequest_FieldPathSelectorDeployment})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeploymentRequest_FieldSubPath{selector: UpdateDeploymentRequest_FieldPathSelectorDeployment, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateDeploymentRequest_FieldTerminalPath{selector: UpdateDeploymentRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeploymentRequest_FieldTerminalPath{selector: UpdateDeploymentRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeploymentRequest_FieldSubPath{selector: UpdateDeploymentRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateDeploymentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeploymentRequest))
}

func (o *UpdateDeploymentRequest) Clone() *UpdateDeploymentRequest {
	if o == nil {
		return nil
	}
	result := &UpdateDeploymentRequest{}
	result.Deployment = o.Deployment.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*deployment.Deployment_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateDeploymentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeploymentRequest) Merge(source *UpdateDeploymentRequest) {
	if source.GetDeployment() != nil {
		if o.Deployment == nil {
			o.Deployment = new(deployment.Deployment)
		}
		o.Deployment.Merge(source.GetDeployment())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateDeploymentRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateDeploymentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeploymentRequest))
}

func (o *UpdateDeploymentRequest_CAS) GotenObjectExt() {}

func (o *UpdateDeploymentRequest_CAS) MakeFullFieldMask() *UpdateDeploymentRequest_CAS_FieldMask {
	return FullUpdateDeploymentRequest_CAS_FieldMask()
}

func (o *UpdateDeploymentRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeploymentRequest_CAS_FieldMask()
}

func (o *UpdateDeploymentRequest_CAS) MakeDiffFieldMask(other *UpdateDeploymentRequest_CAS) *UpdateDeploymentRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeploymentRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeploymentRequest_CAS_FieldMask()
	}

	res := &UpdateDeploymentRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeploymentRequestCAS_FieldTerminalPath{selector: UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeploymentRequestCAS_FieldSubPath{selector: UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateDeploymentRequestCAS_FieldTerminalPath{selector: UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateDeploymentRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeploymentRequest_CAS))
}

func (o *UpdateDeploymentRequest_CAS) Clone() *UpdateDeploymentRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateDeploymentRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*deployment.Deployment_FieldMask)
	return result
}

func (o *UpdateDeploymentRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeploymentRequest_CAS) Merge(source *UpdateDeploymentRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(deployment.Deployment)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(deployment.Deployment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateDeploymentRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeploymentRequest_CAS))
}

func (o *DeleteDeploymentRequest) GotenObjectExt() {}

func (o *DeleteDeploymentRequest) MakeFullFieldMask() *DeleteDeploymentRequest_FieldMask {
	return FullDeleteDeploymentRequest_FieldMask()
}

func (o *DeleteDeploymentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteDeploymentRequest_FieldMask()
}

func (o *DeleteDeploymentRequest) MakeDiffFieldMask(other *DeleteDeploymentRequest) *DeleteDeploymentRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteDeploymentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteDeploymentRequest_FieldMask()
	}

	res := &DeleteDeploymentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteDeploymentRequest_FieldTerminalPath{selector: DeleteDeploymentRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteDeploymentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteDeploymentRequest))
}

func (o *DeleteDeploymentRequest) Clone() *DeleteDeploymentRequest {
	if o == nil {
		return nil
	}
	result := &DeleteDeploymentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &deployment.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteDeploymentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteDeploymentRequest) Merge(source *DeleteDeploymentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &deployment.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteDeploymentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteDeploymentRequest))
}
