// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/deployment_service.proto
// DO NOT EDIT!!!

package deployment_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	deployment "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/deployment"
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &deployment.Deployment{}
	_ = &region.Region{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetDeploymentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetDeploymentRequest_FieldPathSelector
	Get(source *GetDeploymentRequest) []interface{}
	GetSingle(source *GetDeploymentRequest) (interface{}, bool)
	ClearValue(item *GetDeploymentRequest)

	// Those methods build corresponding GetDeploymentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetDeploymentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetDeploymentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetDeploymentRequest_FieldPathArrayItemValue
}

type GetDeploymentRequest_FieldPathSelector int32

const (
	GetDeploymentRequest_FieldPathSelectorName      GetDeploymentRequest_FieldPathSelector = 0
	GetDeploymentRequest_FieldPathSelectorFieldMask GetDeploymentRequest_FieldPathSelector = 1
	GetDeploymentRequest_FieldPathSelectorView      GetDeploymentRequest_FieldPathSelector = 2
)

func (s GetDeploymentRequest_FieldPathSelector) String() string {
	switch s {
	case GetDeploymentRequest_FieldPathSelectorName:
		return "name"
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetDeploymentRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", s))
	}
}

func BuildGetDeploymentRequest_FieldPath(fp gotenobject.RawFieldPath) (GetDeploymentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetDeploymentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetDeploymentRequest_FieldTerminalPath{selector: GetDeploymentRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetDeploymentRequest_FieldTerminalPath{selector: GetDeploymentRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetDeploymentRequest_FieldTerminalPath{selector: GetDeploymentRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetDeploymentRequest", fp)
}

func ParseGetDeploymentRequest_FieldPath(rawField string) (GetDeploymentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetDeploymentRequest_FieldPath(fp)
}

func MustParseGetDeploymentRequest_FieldPath(rawField string) GetDeploymentRequest_FieldPath {
	fp, err := ParseGetDeploymentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetDeploymentRequest_FieldTerminalPath struct {
	selector GetDeploymentRequest_FieldPathSelector
}

var _ GetDeploymentRequest_FieldPath = (*GetDeploymentRequest_FieldTerminalPath)(nil)

func (fp *GetDeploymentRequest_FieldTerminalPath) Selector() GetDeploymentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetDeploymentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetDeploymentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetDeploymentRequest
func (fp *GetDeploymentRequest_FieldTerminalPath) Get(source *GetDeploymentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetDeploymentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetDeploymentRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetDeploymentRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetDeploymentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetDeploymentRequest))
}

// GetSingle returns value pointed by specific field of from source GetDeploymentRequest
func (fp *GetDeploymentRequest_FieldTerminalPath) GetSingle(source *GetDeploymentRequest) (interface{}, bool) {
	switch fp.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetDeploymentRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
	}
}

func (fp *GetDeploymentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetDeploymentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		return (*deployment.Reference)(nil)
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		return (*deployment.Deployment_FieldMask)(nil)
	case GetDeploymentRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
	}
}

func (fp *GetDeploymentRequest_FieldTerminalPath) ClearValue(item *GetDeploymentRequest) {
	if item != nil {
		switch fp.selector {
		case GetDeploymentRequest_FieldPathSelectorName:
			item.Name = nil
		case GetDeploymentRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetDeploymentRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
		}
	}
}

func (fp *GetDeploymentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetDeploymentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetDeploymentRequest_FieldPathSelectorName ||
		fp.selector == GetDeploymentRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetDeploymentRequest_FieldPathSelectorView
}

func (fp *GetDeploymentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetDeploymentRequest_FieldTerminalPath) WithIValue(value interface{}) GetDeploymentRequest_FieldPathValue {
	switch fp.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		return &GetDeploymentRequest_FieldTerminalPathValue{GetDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Reference)}
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		return &GetDeploymentRequest_FieldTerminalPathValue{GetDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	case GetDeploymentRequest_FieldPathSelectorView:
		return &GetDeploymentRequest_FieldTerminalPathValue{GetDeploymentRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
	}
}

func (fp *GetDeploymentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetDeploymentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetDeploymentRequest_FieldPathArrayOfValues {
	fpaov := &GetDeploymentRequest_FieldTerminalPathArrayOfValues{GetDeploymentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		return &GetDeploymentRequest_FieldTerminalPathArrayOfValues{GetDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Reference)}
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		return &GetDeploymentRequest_FieldTerminalPathArrayOfValues{GetDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	case GetDeploymentRequest_FieldPathSelectorView:
		return &GetDeploymentRequest_FieldTerminalPathArrayOfValues{GetDeploymentRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetDeploymentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetDeploymentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetDeploymentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fp.selector))
	}
}

func (fp *GetDeploymentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetDeploymentRequest_FieldPathValue allows storing values for GetDeploymentRequest fields according to their type
type GetDeploymentRequest_FieldPathValue interface {
	GetDeploymentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetDeploymentRequest)
	CompareWith(*GetDeploymentRequest) (cmp int, comparable bool)
}

func ParseGetDeploymentRequest_FieldPathValue(pathStr, valueStr string) (GetDeploymentRequest_FieldPathValue, error) {
	fp, err := ParseGetDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeploymentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetDeploymentRequest_FieldPathValue), nil
}

func MustParseGetDeploymentRequest_FieldPathValue(pathStr, valueStr string) GetDeploymentRequest_FieldPathValue {
	fpv, err := ParseGetDeploymentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetDeploymentRequest_FieldTerminalPathValue struct {
	GetDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeploymentRequest_FieldPathValue = (*GetDeploymentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetDeploymentRequest' as interface{}
func (fpv *GetDeploymentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetDeploymentRequest_FieldTerminalPathValue) AsNameValue() (*deployment.Reference, bool) {
	res, ok := fpv.value.(*deployment.Reference)
	return res, ok
}
func (fpv *GetDeploymentRequest_FieldTerminalPathValue) AsFieldMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpv *GetDeploymentRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetDeploymentRequest
func (fpv *GetDeploymentRequest_FieldTerminalPathValue) SetTo(target **GetDeploymentRequest) {
	if *target == nil {
		*target = new(GetDeploymentRequest)
	}
	switch fpv.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*deployment.Reference)
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*deployment.Deployment_FieldMask)
	case GetDeploymentRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeploymentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetDeploymentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetDeploymentRequest_FieldTerminalPathValue' with the value under path in 'GetDeploymentRequest'.
func (fpv *GetDeploymentRequest_FieldTerminalPathValue) CompareWith(source *GetDeploymentRequest) (int, bool) {
	switch fpv.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*deployment.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetDeploymentRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeploymentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetDeploymentRequest))
}

// GetDeploymentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetDeploymentRequest according to their type
// Present only for array (repeated) types.
type GetDeploymentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetDeploymentRequest_FieldPath
	ContainsValue(*GetDeploymentRequest) bool
}

// ParseGetDeploymentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetDeploymentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeploymentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetDeploymentRequest_FieldPathArrayItemValue), nil
}

func MustParseGetDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetDeploymentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetDeploymentRequest_FieldTerminalPathArrayItemValue struct {
	GetDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeploymentRequest_FieldPathArrayItemValue = (*GetDeploymentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetDeploymentRequest as interface{}
func (fpaiv *GetDeploymentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetDeploymentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetDeploymentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetDeploymentRequest'
func (fpaiv *GetDeploymentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetDeploymentRequest) bool {
	slice := fpaiv.GetDeploymentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetDeploymentRequest_FieldPathArrayOfValues allows storing slice of values for GetDeploymentRequest fields according to their type
type GetDeploymentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetDeploymentRequest_FieldPath
}

func ParseGetDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetDeploymentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeploymentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetDeploymentRequest_FieldPathArrayOfValues), nil
}

func MustParseGetDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetDeploymentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetDeploymentRequest_FieldTerminalPathArrayOfValues struct {
	GetDeploymentRequest_FieldTerminalPath
	values interface{}
}

var _ GetDeploymentRequest_FieldPathArrayOfValues = (*GetDeploymentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetDeploymentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetDeploymentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*deployment.Reference) {
			values = append(values, v)
		}
	case GetDeploymentRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	case GetDeploymentRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetDeploymentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*deployment.Reference, bool) {
	res, ok := fpaov.values.([]*deployment.Reference)
	return res, ok
}
func (fpaov *GetDeploymentRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpaov *GetDeploymentRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDeploymentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDeploymentsRequest_FieldPathSelector
	Get(source *BatchGetDeploymentsRequest) []interface{}
	GetSingle(source *BatchGetDeploymentsRequest) (interface{}, bool)
	ClearValue(item *BatchGetDeploymentsRequest)

	// Those methods build corresponding BatchGetDeploymentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDeploymentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDeploymentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDeploymentsRequest_FieldPathArrayItemValue
}

type BatchGetDeploymentsRequest_FieldPathSelector int32

const (
	BatchGetDeploymentsRequest_FieldPathSelectorNames     BatchGetDeploymentsRequest_FieldPathSelector = 0
	BatchGetDeploymentsRequest_FieldPathSelectorFieldMask BatchGetDeploymentsRequest_FieldPathSelector = 1
	BatchGetDeploymentsRequest_FieldPathSelectorView      BatchGetDeploymentsRequest_FieldPathSelector = 2
)

func (s BatchGetDeploymentsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", s))
	}
}

func BuildBatchGetDeploymentsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDeploymentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDeploymentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetDeploymentsRequest_FieldTerminalPath{selector: BatchGetDeploymentsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDeploymentsRequest", fp)
}

func ParseBatchGetDeploymentsRequest_FieldPath(rawField string) (BatchGetDeploymentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDeploymentsRequest_FieldPath(fp)
}

func MustParseBatchGetDeploymentsRequest_FieldPath(rawField string) BatchGetDeploymentsRequest_FieldPath {
	fp, err := ParseBatchGetDeploymentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDeploymentsRequest_FieldTerminalPath struct {
	selector BatchGetDeploymentsRequest_FieldPathSelector
}

var _ BatchGetDeploymentsRequest_FieldPath = (*BatchGetDeploymentsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) Selector() BatchGetDeploymentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDeploymentsRequest
func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) Get(source *BatchGetDeploymentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDeploymentsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetDeploymentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDeploymentsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetDeploymentsRequest
func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) GetSingle(source *BatchGetDeploymentsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDeploymentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		return ([]*deployment.Reference)(nil)
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		return (*deployment.Deployment_FieldMask)(nil)
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) ClearValue(item *BatchGetDeploymentsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetDeploymentsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetDeploymentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDeploymentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDeploymentsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetDeploymentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetDeploymentsRequest_FieldPathSelectorView
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetDeploymentsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		return &BatchGetDeploymentsRequest_FieldTerminalPathValue{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, value: value.([]*deployment.Reference)}
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		return &BatchGetDeploymentsRequest_FieldTerminalPathValue{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		return &BatchGetDeploymentsRequest_FieldTerminalPathValue{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDeploymentsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues{BatchGetDeploymentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		return &BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, values: values.([][]*deployment.Reference)}
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		return &BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		return &BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDeploymentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		return &BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue{BatchGetDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetDeploymentsRequest_FieldPathValue allows storing values for BatchGetDeploymentsRequest fields according to their type
type BatchGetDeploymentsRequest_FieldPathValue interface {
	BatchGetDeploymentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDeploymentsRequest)
	CompareWith(*BatchGetDeploymentsRequest) (cmp int, comparable bool)
}

func ParseBatchGetDeploymentsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetDeploymentsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeploymentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDeploymentsRequest_FieldPathValue), nil
}

func MustParseBatchGetDeploymentsRequest_FieldPathValue(pathStr, valueStr string) BatchGetDeploymentsRequest_FieldPathValue {
	fpv, err := ParseBatchGetDeploymentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDeploymentsRequest_FieldTerminalPathValue struct {
	BatchGetDeploymentsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeploymentsRequest_FieldPathValue = (*BatchGetDeploymentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDeploymentsRequest' as interface{}
func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) AsNamesValue() ([]*deployment.Reference, bool) {
	res, ok := fpv.value.([]*deployment.Reference)
	return res, ok
}
func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDeploymentsRequest
func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) SetTo(target **BatchGetDeploymentsRequest) {
	if *target == nil {
		*target = new(BatchGetDeploymentsRequest)
	}
	switch fpv.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*deployment.Reference)
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*deployment.Deployment_FieldMask)
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeploymentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDeploymentsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetDeploymentsRequest'.
func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetDeploymentsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeploymentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDeploymentsRequest))
}

// BatchGetDeploymentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDeploymentsRequest according to their type
// Present only for array (repeated) types.
type BatchGetDeploymentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDeploymentsRequest_FieldPath
	ContainsValue(*BatchGetDeploymentsRequest) bool
}

// ParseBatchGetDeploymentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDeploymentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeploymentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDeploymentsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDeploymentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetDeploymentsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeploymentsRequest_FieldPathArrayItemValue = (*BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDeploymentsRequest as interface{}
func (fpaiv *BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*deployment.Reference, bool) {
	res, ok := fpaiv.value.(*deployment.Reference)
	return res, ok
}

func (fpaiv *BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDeploymentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDeploymentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeploymentsRequest'
func (fpaiv *BatchGetDeploymentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDeploymentsRequest) bool {
	slice := fpaiv.BatchGetDeploymentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetDeploymentsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetDeploymentsRequest fields according to their type
type BatchGetDeploymentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDeploymentsRequest_FieldPath
}

func ParseBatchGetDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDeploymentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeploymentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDeploymentsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDeploymentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetDeploymentsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetDeploymentsRequest_FieldPathArrayOfValues = (*BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDeploymentsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*deployment.Reference) {
			values = append(values, v)
		}
	case BatchGetDeploymentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	case BatchGetDeploymentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*deployment.Reference, bool) {
	res, ok := fpaov.values.([][]*deployment.Reference)
	return res, ok
}
func (fpaov *BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpaov *BatchGetDeploymentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDeploymentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDeploymentsResponse_FieldPathSelector
	Get(source *BatchGetDeploymentsResponse) []interface{}
	GetSingle(source *BatchGetDeploymentsResponse) (interface{}, bool)
	ClearValue(item *BatchGetDeploymentsResponse)

	// Those methods build corresponding BatchGetDeploymentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDeploymentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDeploymentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDeploymentsResponse_FieldPathArrayItemValue
}

type BatchGetDeploymentsResponse_FieldPathSelector int32

const (
	BatchGetDeploymentsResponse_FieldPathSelectorDeployments BatchGetDeploymentsResponse_FieldPathSelector = 0
	BatchGetDeploymentsResponse_FieldPathSelectorMissing     BatchGetDeploymentsResponse_FieldPathSelector = 1
)

func (s BatchGetDeploymentsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return "deployments"
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", s))
	}
}

func BuildBatchGetDeploymentsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDeploymentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDeploymentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "deployments":
			return &BatchGetDeploymentsResponse_FieldTerminalPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorDeployments}, nil
		case "missing":
			return &BatchGetDeploymentsResponse_FieldTerminalPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "deployments":
			if subpath, err := deployment.BuildDeployment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetDeploymentsResponse_FieldSubPath{selector: BatchGetDeploymentsResponse_FieldPathSelectorDeployments, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDeploymentsResponse", fp)
}

func ParseBatchGetDeploymentsResponse_FieldPath(rawField string) (BatchGetDeploymentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDeploymentsResponse_FieldPath(fp)
}

func MustParseBatchGetDeploymentsResponse_FieldPath(rawField string) BatchGetDeploymentsResponse_FieldPath {
	fp, err := ParseBatchGetDeploymentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDeploymentsResponse_FieldTerminalPath struct {
	selector BatchGetDeploymentsResponse_FieldPathSelector
}

var _ BatchGetDeploymentsResponse_FieldPath = (*BatchGetDeploymentsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) Selector() BatchGetDeploymentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDeploymentsResponse
func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) Get(source *BatchGetDeploymentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
			for _, value := range source.GetDeployments() {
				values = append(values, value)
			}
		case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDeploymentsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetDeploymentsResponse
func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) GetSingle(source *BatchGetDeploymentsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		res := source.GetDeployments()
		return res, res != nil
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDeploymentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return ([]*deployment.Deployment)(nil)
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		return ([]*deployment.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) ClearValue(item *BatchGetDeploymentsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
			item.Deployments = nil
		case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDeploymentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDeploymentsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetDeploymentsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return &BatchGetDeploymentsResponse_FieldTerminalPathValue{BatchGetDeploymentsResponse_FieldTerminalPath: *fp, value: value.([]*deployment.Deployment)}
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		return &BatchGetDeploymentsResponse_FieldTerminalPathValue{BatchGetDeploymentsResponse_FieldTerminalPath: *fp, value: value.([]*deployment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDeploymentsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues{BatchGetDeploymentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return &BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues{BatchGetDeploymentsResponse_FieldTerminalPath: *fp, values: values.([][]*deployment.Deployment)}
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		return &BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues{BatchGetDeploymentsResponse_FieldTerminalPath: *fp, values: values.([][]*deployment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDeploymentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return &BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue{BatchGetDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*deployment.Deployment)}
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		return &BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue{BatchGetDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*deployment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeploymentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetDeploymentsResponse_FieldSubPath struct {
	selector BatchGetDeploymentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetDeploymentsResponse_FieldPath = (*BatchGetDeploymentsResponse_FieldSubPath)(nil)

func (fps *BatchGetDeploymentsResponse_FieldSubPath) Selector() BatchGetDeploymentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetDeploymentsResponse_FieldSubPath) AsDeploymentsSubPath() (deployment.Deployment_FieldPath, bool) {
	res, ok := fps.subPath.(deployment.Deployment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetDeploymentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetDeploymentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetDeploymentsResponse
func (fps *BatchGetDeploymentsResponse_FieldSubPath) Get(source *BatchGetDeploymentsResponse) (values []interface{}) {
	if asDeploymentFieldPath, ok := fps.AsDeploymentsSubPath(); ok {
		for _, item := range source.GetDeployments() {
			values = append(values, asDeploymentFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetDeploymentsResponse))
}

// GetSingle returns value of selected field from source BatchGetDeploymentsResponse
func (fps *BatchGetDeploymentsResponse_FieldSubPath) GetSingle(source *BatchGetDeploymentsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		if len(source.GetDeployments()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeployments()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetDeploymentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetDeploymentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) ClearValue(item *BatchGetDeploymentsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
			for _, subItem := range item.Deployments {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetDeploymentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetDeploymentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetDeploymentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetDeploymentsResponse_FieldPathValue {
	return &BatchGetDeploymentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetDeploymentsResponse_FieldPathArrayOfValues {
	return &BatchGetDeploymentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetDeploymentsResponse_FieldPathArrayItemValue {
	return &BatchGetDeploymentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetDeploymentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetDeploymentsResponse_FieldPathValue allows storing values for BatchGetDeploymentsResponse fields according to their type
type BatchGetDeploymentsResponse_FieldPathValue interface {
	BatchGetDeploymentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDeploymentsResponse)
	CompareWith(*BatchGetDeploymentsResponse) (cmp int, comparable bool)
}

func ParseBatchGetDeploymentsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetDeploymentsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeploymentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDeploymentsResponse_FieldPathValue), nil
}

func MustParseBatchGetDeploymentsResponse_FieldPathValue(pathStr, valueStr string) BatchGetDeploymentsResponse_FieldPathValue {
	fpv, err := ParseBatchGetDeploymentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDeploymentsResponse_FieldTerminalPathValue struct {
	BatchGetDeploymentsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeploymentsResponse_FieldPathValue = (*BatchGetDeploymentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDeploymentsResponse' as interface{}
func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) AsDeploymentsValue() ([]*deployment.Deployment, bool) {
	res, ok := fpv.value.([]*deployment.Deployment)
	return res, ok
}
func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) AsMissingValue() ([]*deployment.Reference, bool) {
	res, ok := fpv.value.([]*deployment.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDeploymentsResponse
func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) SetTo(target **BatchGetDeploymentsResponse) {
	if *target == nil {
		*target = new(BatchGetDeploymentsResponse)
	}
	switch fpv.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		(*target).Deployments = fpv.value.([]*deployment.Deployment)
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*deployment.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeploymentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDeploymentsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetDeploymentsResponse'.
func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetDeploymentsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return 0, false
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeploymentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDeploymentsResponse))
}

type BatchGetDeploymentsResponse_FieldSubPathValue struct {
	BatchGetDeploymentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetDeploymentsResponse_FieldPathValue = (*BatchGetDeploymentsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetDeploymentsResponse_FieldSubPathValue) AsDeploymentsPathValue() (deployment.Deployment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(deployment.Deployment_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetDeploymentsResponse_FieldSubPathValue) SetTo(target **BatchGetDeploymentsResponse) {
	if *target == nil {
		*target = new(BatchGetDeploymentsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDeploymentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeploymentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetDeploymentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetDeploymentsResponse_FieldSubPathValue) CompareWith(source *BatchGetDeploymentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDeploymentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetDeploymentsResponse))
}

// BatchGetDeploymentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDeploymentsResponse according to their type
// Present only for array (repeated) types.
type BatchGetDeploymentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDeploymentsResponse_FieldPath
	ContainsValue(*BatchGetDeploymentsResponse) bool
}

// ParseBatchGetDeploymentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDeploymentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeploymentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDeploymentsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDeploymentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetDeploymentsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeploymentsResponse_FieldPathArrayItemValue = (*BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDeploymentsResponse as interface{}
func (fpaiv *BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue) AsDeploymentsItemValue() (*deployment.Deployment, bool) {
	res, ok := fpaiv.value.(*deployment.Deployment)
	return res, ok
}
func (fpaiv *BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*deployment.Reference, bool) {
	res, ok := fpaiv.value.(*deployment.Reference)
	return res, ok
}

func (fpaiv *BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDeploymentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDeploymentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeploymentsResponse'
func (fpaiv *BatchGetDeploymentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDeploymentsResponse) bool {
	slice := fpaiv.BatchGetDeploymentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetDeploymentsResponse_FieldSubPathArrayItemValue struct {
	BatchGetDeploymentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetDeploymentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetDeploymentsResponse_FieldSubPathArrayItemValue) AsDeploymentsPathItemValue() (deployment.Deployment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeploymentsResponse'
func (fpaivs *BatchGetDeploymentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetDeploymentsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeploymentsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetDeploymentsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetDeploymentsResponse fields according to their type
type BatchGetDeploymentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDeploymentsResponse_FieldPath
}

func ParseBatchGetDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDeploymentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeploymentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDeploymentsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDeploymentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetDeploymentsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetDeploymentsResponse_FieldPathArrayOfValues = (*BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDeploymentsResponse_FieldPathSelectorDeployments:
		for _, v := range fpaov.values.([][]*deployment.Deployment) {
			values = append(values, v)
		}
	case BatchGetDeploymentsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*deployment.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues) AsDeploymentsArrayOfValues() ([][]*deployment.Deployment, bool) {
	res, ok := fpaov.values.([][]*deployment.Deployment)
	return res, ok
}
func (fpaov *BatchGetDeploymentsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*deployment.Reference, bool) {
	res, ok := fpaov.values.([][]*deployment.Reference)
	return res, ok
}

type BatchGetDeploymentsResponse_FieldSubPathArrayOfValues struct {
	BatchGetDeploymentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetDeploymentsResponse_FieldPathArrayOfValues = (*BatchGetDeploymentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetDeploymentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetDeploymentsResponse_FieldSubPathArrayOfValues) AsDeploymentsPathArrayOfValues() (deployment.Deployment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(deployment.Deployment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDeploymentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDeploymentsRequest_FieldPathSelector
	Get(source *ListDeploymentsRequest) []interface{}
	GetSingle(source *ListDeploymentsRequest) (interface{}, bool)
	ClearValue(item *ListDeploymentsRequest)

	// Those methods build corresponding ListDeploymentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDeploymentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDeploymentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDeploymentsRequest_FieldPathArrayItemValue
}

type ListDeploymentsRequest_FieldPathSelector int32

const (
	ListDeploymentsRequest_FieldPathSelectorParent    ListDeploymentsRequest_FieldPathSelector = 0
	ListDeploymentsRequest_FieldPathSelectorPageSize  ListDeploymentsRequest_FieldPathSelector = 1
	ListDeploymentsRequest_FieldPathSelectorPageToken ListDeploymentsRequest_FieldPathSelector = 2
	ListDeploymentsRequest_FieldPathSelectorOrderBy   ListDeploymentsRequest_FieldPathSelector = 3
	ListDeploymentsRequest_FieldPathSelectorFilter    ListDeploymentsRequest_FieldPathSelector = 4
	ListDeploymentsRequest_FieldPathSelectorFieldMask ListDeploymentsRequest_FieldPathSelector = 5
	ListDeploymentsRequest_FieldPathSelectorView      ListDeploymentsRequest_FieldPathSelector = 6
)

func (s ListDeploymentsRequest_FieldPathSelector) String() string {
	switch s {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		return "parent"
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListDeploymentsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", s))
	}
}

func BuildListDeploymentsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListDeploymentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDeploymentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListDeploymentsRequest_FieldTerminalPath{selector: ListDeploymentsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDeploymentsRequest", fp)
}

func ParseListDeploymentsRequest_FieldPath(rawField string) (ListDeploymentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDeploymentsRequest_FieldPath(fp)
}

func MustParseListDeploymentsRequest_FieldPath(rawField string) ListDeploymentsRequest_FieldPath {
	fp, err := ParseListDeploymentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDeploymentsRequest_FieldTerminalPath struct {
	selector ListDeploymentsRequest_FieldPathSelector
}

var _ ListDeploymentsRequest_FieldPath = (*ListDeploymentsRequest_FieldTerminalPath)(nil)

func (fp *ListDeploymentsRequest_FieldTerminalPath) Selector() ListDeploymentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDeploymentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDeploymentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDeploymentsRequest
func (fp *ListDeploymentsRequest_FieldTerminalPath) Get(source *ListDeploymentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDeploymentsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListDeploymentsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListDeploymentsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListDeploymentsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListDeploymentsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListDeploymentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListDeploymentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDeploymentsRequest))
}

// GetSingle returns value pointed by specific field of from source ListDeploymentsRequest
func (fp *ListDeploymentsRequest_FieldTerminalPath) GetSingle(source *ListDeploymentsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListDeploymentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDeploymentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListDeploymentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		return (*deployment.ParentName)(nil)
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		return (*deployment.PagerCursor)(nil)
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		return (*deployment.OrderBy)(nil)
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		return (*deployment.Filter)(nil)
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		return (*deployment.Deployment_FieldMask)(nil)
	case ListDeploymentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) ClearValue(item *ListDeploymentsRequest) {
	if item != nil {
		switch fp.selector {
		case ListDeploymentsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListDeploymentsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListDeploymentsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListDeploymentsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListDeploymentsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListDeploymentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListDeploymentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDeploymentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDeploymentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDeploymentsRequest_FieldPathSelectorParent ||
		fp.selector == ListDeploymentsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListDeploymentsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListDeploymentsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListDeploymentsRequest_FieldPathSelectorFilter ||
		fp.selector == ListDeploymentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListDeploymentsRequest_FieldPathSelectorView
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) WithIValue(value interface{}) ListDeploymentsRequest_FieldPathValue {
	switch fp.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.ParentName)}
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.PagerCursor)}
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.OrderBy)}
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.Filter)}
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	case ListDeploymentsRequest_FieldPathSelectorView:
		return &ListDeploymentsRequest_FieldTerminalPathValue{ListDeploymentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDeploymentsRequest_FieldPathArrayOfValues {
	fpaov := &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.ParentName)}
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.PagerCursor)}
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.OrderBy)}
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Filter)}
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	case ListDeploymentsRequest_FieldPathSelectorView:
		return &ListDeploymentsRequest_FieldTerminalPathArrayOfValues{ListDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDeploymentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *ListDeploymentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListDeploymentsRequest_FieldPathValue allows storing values for ListDeploymentsRequest fields according to their type
type ListDeploymentsRequest_FieldPathValue interface {
	ListDeploymentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDeploymentsRequest)
	CompareWith(*ListDeploymentsRequest) (cmp int, comparable bool)
}

func ParseListDeploymentsRequest_FieldPathValue(pathStr, valueStr string) (ListDeploymentsRequest_FieldPathValue, error) {
	fp, err := ParseListDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeploymentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDeploymentsRequest_FieldPathValue), nil
}

func MustParseListDeploymentsRequest_FieldPathValue(pathStr, valueStr string) ListDeploymentsRequest_FieldPathValue {
	fpv, err := ParseListDeploymentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDeploymentsRequest_FieldTerminalPathValue struct {
	ListDeploymentsRequest_FieldTerminalPath
	value interface{}
}

var _ ListDeploymentsRequest_FieldPathValue = (*ListDeploymentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDeploymentsRequest' as interface{}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsParentValue() (*deployment.ParentName, bool) {
	res, ok := fpv.value.(*deployment.ParentName)
	return res, ok
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsPageTokenValue() (*deployment.PagerCursor, bool) {
	res, ok := fpv.value.(*deployment.PagerCursor)
	return res, ok
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsOrderByValue() (*deployment.OrderBy, bool) {
	res, ok := fpv.value.(*deployment.OrderBy)
	return res, ok
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsFilterValue() (*deployment.Filter, bool) {
	res, ok := fpv.value.(*deployment.Filter)
	return res, ok
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListDeploymentsRequest
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) SetTo(target **ListDeploymentsRequest) {
	if *target == nil {
		*target = new(ListDeploymentsRequest)
	}
	switch fpv.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*deployment.ParentName)
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*deployment.PagerCursor)
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*deployment.OrderBy)
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*deployment.Filter)
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*deployment.Deployment_FieldMask)
	case ListDeploymentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fpv.selector))
	}
}

func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeploymentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDeploymentsRequest_FieldTerminalPathValue' with the value under path in 'ListDeploymentsRequest'.
func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) CompareWith(source *ListDeploymentsRequest) (int, bool) {
	switch fpv.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*deployment.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListDeploymentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsRequest: %d", fpv.selector))
	}
}

func (fpv *ListDeploymentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDeploymentsRequest))
}

// ListDeploymentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDeploymentsRequest according to their type
// Present only for array (repeated) types.
type ListDeploymentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDeploymentsRequest_FieldPath
	ContainsValue(*ListDeploymentsRequest) bool
}

// ParseListDeploymentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListDeploymentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeploymentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDeploymentsRequest_FieldPathArrayItemValue), nil
}

func MustParseListDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListDeploymentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDeploymentsRequest_FieldTerminalPathArrayItemValue struct {
	ListDeploymentsRequest_FieldTerminalPath
	value interface{}
}

var _ ListDeploymentsRequest_FieldPathArrayItemValue = (*ListDeploymentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDeploymentsRequest as interface{}
func (fpaiv *ListDeploymentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListDeploymentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListDeploymentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDeploymentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDeploymentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeploymentsRequest'
func (fpaiv *ListDeploymentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDeploymentsRequest) bool {
	slice := fpaiv.ListDeploymentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListDeploymentsRequest_FieldPathArrayOfValues allows storing slice of values for ListDeploymentsRequest fields according to their type
type ListDeploymentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDeploymentsRequest_FieldPath
}

func ParseListDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDeploymentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeploymentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDeploymentsRequest_FieldPathArrayOfValues), nil
}

func MustParseListDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListDeploymentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDeploymentsRequest_FieldTerminalPathArrayOfValues struct {
	ListDeploymentsRequest_FieldTerminalPath
	values interface{}
}

var _ ListDeploymentsRequest_FieldPathArrayOfValues = (*ListDeploymentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDeploymentsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*deployment.ParentName) {
			values = append(values, v)
		}
	case ListDeploymentsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListDeploymentsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*deployment.PagerCursor) {
			values = append(values, v)
		}
	case ListDeploymentsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*deployment.OrderBy) {
			values = append(values, v)
		}
	case ListDeploymentsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*deployment.Filter) {
			values = append(values, v)
		}
	case ListDeploymentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	case ListDeploymentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*deployment.ParentName, bool) {
	res, ok := fpaov.values.([]*deployment.ParentName)
	return res, ok
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*deployment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*deployment.PagerCursor)
	return res, ok
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*deployment.OrderBy, bool) {
	res, ok := fpaov.values.([]*deployment.OrderBy)
	return res, ok
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*deployment.Filter, bool) {
	res, ok := fpaov.values.([]*deployment.Filter)
	return res, ok
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpaov *ListDeploymentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDeploymentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDeploymentsResponse_FieldPathSelector
	Get(source *ListDeploymentsResponse) []interface{}
	GetSingle(source *ListDeploymentsResponse) (interface{}, bool)
	ClearValue(item *ListDeploymentsResponse)

	// Those methods build corresponding ListDeploymentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDeploymentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDeploymentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDeploymentsResponse_FieldPathArrayItemValue
}

type ListDeploymentsResponse_FieldPathSelector int32

const (
	ListDeploymentsResponse_FieldPathSelectorDeployments   ListDeploymentsResponse_FieldPathSelector = 0
	ListDeploymentsResponse_FieldPathSelectorPrevPageToken ListDeploymentsResponse_FieldPathSelector = 1
	ListDeploymentsResponse_FieldPathSelectorNextPageToken ListDeploymentsResponse_FieldPathSelector = 2
)

func (s ListDeploymentsResponse_FieldPathSelector) String() string {
	switch s {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return "deployments"
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", s))
	}
}

func BuildListDeploymentsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListDeploymentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDeploymentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "deployments":
			return &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorDeployments}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListDeploymentsResponse_FieldTerminalPath{selector: ListDeploymentsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "deployments":
			if subpath, err := deployment.BuildDeployment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListDeploymentsResponse_FieldSubPath{selector: ListDeploymentsResponse_FieldPathSelectorDeployments, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDeploymentsResponse", fp)
}

func ParseListDeploymentsResponse_FieldPath(rawField string) (ListDeploymentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDeploymentsResponse_FieldPath(fp)
}

func MustParseListDeploymentsResponse_FieldPath(rawField string) ListDeploymentsResponse_FieldPath {
	fp, err := ParseListDeploymentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDeploymentsResponse_FieldTerminalPath struct {
	selector ListDeploymentsResponse_FieldPathSelector
}

var _ ListDeploymentsResponse_FieldPath = (*ListDeploymentsResponse_FieldTerminalPath)(nil)

func (fp *ListDeploymentsResponse_FieldTerminalPath) Selector() ListDeploymentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDeploymentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDeploymentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDeploymentsResponse
func (fp *ListDeploymentsResponse_FieldTerminalPath) Get(source *ListDeploymentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDeploymentsResponse_FieldPathSelectorDeployments:
			for _, value := range source.GetDeployments() {
				values = append(values, value)
			}
		case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDeploymentsResponse))
}

// GetSingle returns value pointed by specific field of from source ListDeploymentsResponse
func (fp *ListDeploymentsResponse_FieldTerminalPath) GetSingle(source *ListDeploymentsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		res := source.GetDeployments()
		return res, res != nil
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDeploymentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListDeploymentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return ([]*deployment.Deployment)(nil)
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		return (*deployment.PagerCursor)(nil)
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		return (*deployment.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) ClearValue(item *ListDeploymentsResponse) {
	if item != nil {
		switch fp.selector {
		case ListDeploymentsResponse_FieldPathSelectorDeployments:
			item.Deployments = nil
		case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDeploymentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDeploymentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDeploymentsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListDeploymentsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) WithIValue(value interface{}) ListDeploymentsResponse_FieldPathValue {
	switch fp.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return &ListDeploymentsResponse_FieldTerminalPathValue{ListDeploymentsResponse_FieldTerminalPath: *fp, value: value.([]*deployment.Deployment)}
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		return &ListDeploymentsResponse_FieldTerminalPathValue{ListDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*deployment.PagerCursor)}
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		return &ListDeploymentsResponse_FieldTerminalPathValue{ListDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*deployment.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDeploymentsResponse_FieldPathArrayOfValues {
	fpaov := &ListDeploymentsResponse_FieldTerminalPathArrayOfValues{ListDeploymentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return &ListDeploymentsResponse_FieldTerminalPathArrayOfValues{ListDeploymentsResponse_FieldTerminalPath: *fp, values: values.([][]*deployment.Deployment)}
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		return &ListDeploymentsResponse_FieldTerminalPathArrayOfValues{ListDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]*deployment.PagerCursor)}
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		return &ListDeploymentsResponse_FieldTerminalPathArrayOfValues{ListDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]*deployment.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDeploymentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return &ListDeploymentsResponse_FieldTerminalPathArrayItemValue{ListDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*deployment.Deployment)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *ListDeploymentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListDeploymentsResponse_FieldSubPath struct {
	selector ListDeploymentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListDeploymentsResponse_FieldPath = (*ListDeploymentsResponse_FieldSubPath)(nil)

func (fps *ListDeploymentsResponse_FieldSubPath) Selector() ListDeploymentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListDeploymentsResponse_FieldSubPath) AsDeploymentsSubPath() (deployment.Deployment_FieldPath, bool) {
	res, ok := fps.subPath.(deployment.Deployment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListDeploymentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListDeploymentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListDeploymentsResponse
func (fps *ListDeploymentsResponse_FieldSubPath) Get(source *ListDeploymentsResponse) (values []interface{}) {
	if asDeploymentFieldPath, ok := fps.AsDeploymentsSubPath(); ok {
		for _, item := range source.GetDeployments() {
			values = append(values, asDeploymentFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListDeploymentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListDeploymentsResponse))
}

// GetSingle returns value of selected field from source ListDeploymentsResponse
func (fps *ListDeploymentsResponse_FieldSubPath) GetSingle(source *ListDeploymentsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		if len(source.GetDeployments()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeployments()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fps.selector))
	}
}

func (fps *ListDeploymentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListDeploymentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListDeploymentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListDeploymentsResponse_FieldSubPath) ClearValue(item *ListDeploymentsResponse) {
	if item != nil {
		switch fps.selector {
		case ListDeploymentsResponse_FieldPathSelectorDeployments:
			for _, subItem := range item.Deployments {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListDeploymentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListDeploymentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListDeploymentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListDeploymentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListDeploymentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListDeploymentsResponse_FieldSubPath) WithIValue(value interface{}) ListDeploymentsResponse_FieldPathValue {
	return &ListDeploymentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListDeploymentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListDeploymentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListDeploymentsResponse_FieldPathArrayOfValues {
	return &ListDeploymentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListDeploymentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListDeploymentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListDeploymentsResponse_FieldPathArrayItemValue {
	return &ListDeploymentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListDeploymentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListDeploymentsResponse_FieldPathValue allows storing values for ListDeploymentsResponse fields according to their type
type ListDeploymentsResponse_FieldPathValue interface {
	ListDeploymentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDeploymentsResponse)
	CompareWith(*ListDeploymentsResponse) (cmp int, comparable bool)
}

func ParseListDeploymentsResponse_FieldPathValue(pathStr, valueStr string) (ListDeploymentsResponse_FieldPathValue, error) {
	fp, err := ParseListDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeploymentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDeploymentsResponse_FieldPathValue), nil
}

func MustParseListDeploymentsResponse_FieldPathValue(pathStr, valueStr string) ListDeploymentsResponse_FieldPathValue {
	fpv, err := ParseListDeploymentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDeploymentsResponse_FieldTerminalPathValue struct {
	ListDeploymentsResponse_FieldTerminalPath
	value interface{}
}

var _ ListDeploymentsResponse_FieldPathValue = (*ListDeploymentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDeploymentsResponse' as interface{}
func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) AsDeploymentsValue() ([]*deployment.Deployment, bool) {
	res, ok := fpv.value.([]*deployment.Deployment)
	return res, ok
}
func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*deployment.PagerCursor, bool) {
	res, ok := fpv.value.(*deployment.PagerCursor)
	return res, ok
}
func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*deployment.PagerCursor, bool) {
	res, ok := fpv.value.(*deployment.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListDeploymentsResponse
func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) SetTo(target **ListDeploymentsResponse) {
	if *target == nil {
		*target = new(ListDeploymentsResponse)
	}
	switch fpv.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		(*target).Deployments = fpv.value.([]*deployment.Deployment)
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*deployment.PagerCursor)
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*deployment.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fpv.selector))
	}
}

func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeploymentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDeploymentsResponse_FieldTerminalPathValue' with the value under path in 'ListDeploymentsResponse'.
func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) CompareWith(source *ListDeploymentsResponse) (int, bool) {
	switch fpv.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return 0, false
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fpv.selector))
	}
}

func (fpv *ListDeploymentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDeploymentsResponse))
}

type ListDeploymentsResponse_FieldSubPathValue struct {
	ListDeploymentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListDeploymentsResponse_FieldPathValue = (*ListDeploymentsResponse_FieldSubPathValue)(nil)

func (fpvs *ListDeploymentsResponse_FieldSubPathValue) AsDeploymentsPathValue() (deployment.Deployment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(deployment.Deployment_FieldPathValue)
	return res, ok
}

func (fpvs *ListDeploymentsResponse_FieldSubPathValue) SetTo(target **ListDeploymentsResponse) {
	if *target == nil {
		*target = new(ListDeploymentsResponse)
	}
	switch fpvs.Selector() {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDeploymentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeploymentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListDeploymentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListDeploymentsResponse_FieldSubPathValue) CompareWith(source *ListDeploymentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDeploymentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListDeploymentsResponse))
}

// ListDeploymentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDeploymentsResponse according to their type
// Present only for array (repeated) types.
type ListDeploymentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDeploymentsResponse_FieldPath
	ContainsValue(*ListDeploymentsResponse) bool
}

// ParseListDeploymentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListDeploymentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeploymentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDeploymentsResponse_FieldPathArrayItemValue), nil
}

func MustParseListDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListDeploymentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDeploymentsResponse_FieldTerminalPathArrayItemValue struct {
	ListDeploymentsResponse_FieldTerminalPath
	value interface{}
}

var _ ListDeploymentsResponse_FieldPathArrayItemValue = (*ListDeploymentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDeploymentsResponse as interface{}
func (fpaiv *ListDeploymentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListDeploymentsResponse_FieldTerminalPathArrayItemValue) AsDeploymentsItemValue() (*deployment.Deployment, bool) {
	res, ok := fpaiv.value.(*deployment.Deployment)
	return res, ok
}

func (fpaiv *ListDeploymentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListDeploymentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDeploymentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDeploymentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeploymentsResponse'
func (fpaiv *ListDeploymentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDeploymentsResponse) bool {
	slice := fpaiv.ListDeploymentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListDeploymentsResponse_FieldSubPathArrayItemValue struct {
	ListDeploymentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListDeploymentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListDeploymentsResponse_FieldSubPathArrayItemValue) AsDeploymentsPathItemValue() (deployment.Deployment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeploymentsResponse'
func (fpaivs *ListDeploymentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListDeploymentsResponse) bool {
	switch fpaivs.Selector() {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeploymentsResponse: %d", fpaivs.Selector()))
	}
}

// ListDeploymentsResponse_FieldPathArrayOfValues allows storing slice of values for ListDeploymentsResponse fields according to their type
type ListDeploymentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDeploymentsResponse_FieldPath
}

func ParseListDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDeploymentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeploymentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDeploymentsResponse_FieldPathArrayOfValues), nil
}

func MustParseListDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListDeploymentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDeploymentsResponse_FieldTerminalPathArrayOfValues struct {
	ListDeploymentsResponse_FieldTerminalPath
	values interface{}
}

var _ ListDeploymentsResponse_FieldPathArrayOfValues = (*ListDeploymentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDeploymentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDeploymentsResponse_FieldPathSelectorDeployments:
		for _, v := range fpaov.values.([][]*deployment.Deployment) {
			values = append(values, v)
		}
	case ListDeploymentsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*deployment.PagerCursor) {
			values = append(values, v)
		}
	case ListDeploymentsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*deployment.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDeploymentsResponse_FieldTerminalPathArrayOfValues) AsDeploymentsArrayOfValues() ([][]*deployment.Deployment, bool) {
	res, ok := fpaov.values.([][]*deployment.Deployment)
	return res, ok
}
func (fpaov *ListDeploymentsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*deployment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*deployment.PagerCursor)
	return res, ok
}
func (fpaov *ListDeploymentsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*deployment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*deployment.PagerCursor)
	return res, ok
}

type ListDeploymentsResponse_FieldSubPathArrayOfValues struct {
	ListDeploymentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListDeploymentsResponse_FieldPathArrayOfValues = (*ListDeploymentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListDeploymentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListDeploymentsResponse_FieldSubPathArrayOfValues) AsDeploymentsPathArrayOfValues() (deployment.Deployment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(deployment.Deployment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeploymentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeploymentRequest_FieldPathSelector
	Get(source *WatchDeploymentRequest) []interface{}
	GetSingle(source *WatchDeploymentRequest) (interface{}, bool)
	ClearValue(item *WatchDeploymentRequest)

	// Those methods build corresponding WatchDeploymentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeploymentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeploymentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeploymentRequest_FieldPathArrayItemValue
}

type WatchDeploymentRequest_FieldPathSelector int32

const (
	WatchDeploymentRequest_FieldPathSelectorName      WatchDeploymentRequest_FieldPathSelector = 0
	WatchDeploymentRequest_FieldPathSelectorFieldMask WatchDeploymentRequest_FieldPathSelector = 1
	WatchDeploymentRequest_FieldPathSelectorView      WatchDeploymentRequest_FieldPathSelector = 2
)

func (s WatchDeploymentRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeploymentRequest_FieldPathSelectorName:
		return "name"
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeploymentRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", s))
	}
}

func BuildWatchDeploymentRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeploymentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeploymentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchDeploymentRequest_FieldTerminalPath{selector: WatchDeploymentRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeploymentRequest_FieldTerminalPath{selector: WatchDeploymentRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeploymentRequest_FieldTerminalPath{selector: WatchDeploymentRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeploymentRequest", fp)
}

func ParseWatchDeploymentRequest_FieldPath(rawField string) (WatchDeploymentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeploymentRequest_FieldPath(fp)
}

func MustParseWatchDeploymentRequest_FieldPath(rawField string) WatchDeploymentRequest_FieldPath {
	fp, err := ParseWatchDeploymentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeploymentRequest_FieldTerminalPath struct {
	selector WatchDeploymentRequest_FieldPathSelector
}

var _ WatchDeploymentRequest_FieldPath = (*WatchDeploymentRequest_FieldTerminalPath)(nil)

func (fp *WatchDeploymentRequest_FieldTerminalPath) Selector() WatchDeploymentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeploymentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeploymentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeploymentRequest
func (fp *WatchDeploymentRequest_FieldTerminalPath) Get(source *WatchDeploymentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeploymentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchDeploymentRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeploymentRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeploymentRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeploymentRequest
func (fp *WatchDeploymentRequest_FieldTerminalPath) GetSingle(source *WatchDeploymentRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeploymentRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeploymentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		return (*deployment.Reference)(nil)
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		return (*deployment.Deployment_FieldMask)(nil)
	case WatchDeploymentRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) ClearValue(item *WatchDeploymentRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeploymentRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchDeploymentRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeploymentRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeploymentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeploymentRequest_FieldPathSelectorName ||
		fp.selector == WatchDeploymentRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeploymentRequest_FieldPathSelectorView
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeploymentRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		return &WatchDeploymentRequest_FieldTerminalPathValue{WatchDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Reference)}
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		return &WatchDeploymentRequest_FieldTerminalPathValue{WatchDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	case WatchDeploymentRequest_FieldPathSelectorView:
		return &WatchDeploymentRequest_FieldTerminalPathValue{WatchDeploymentRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeploymentRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeploymentRequest_FieldTerminalPathArrayOfValues{WatchDeploymentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		return &WatchDeploymentRequest_FieldTerminalPathArrayOfValues{WatchDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Reference)}
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		return &WatchDeploymentRequest_FieldTerminalPathArrayOfValues{WatchDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	case WatchDeploymentRequest_FieldPathSelectorView:
		return &WatchDeploymentRequest_FieldTerminalPathArrayOfValues{WatchDeploymentRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeploymentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeploymentRequest_FieldPathValue allows storing values for WatchDeploymentRequest fields according to their type
type WatchDeploymentRequest_FieldPathValue interface {
	WatchDeploymentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeploymentRequest)
	CompareWith(*WatchDeploymentRequest) (cmp int, comparable bool)
}

func ParseWatchDeploymentRequest_FieldPathValue(pathStr, valueStr string) (WatchDeploymentRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeploymentRequest_FieldPathValue), nil
}

func MustParseWatchDeploymentRequest_FieldPathValue(pathStr, valueStr string) WatchDeploymentRequest_FieldPathValue {
	fpv, err := ParseWatchDeploymentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeploymentRequest_FieldTerminalPathValue struct {
	WatchDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentRequest_FieldPathValue = (*WatchDeploymentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeploymentRequest' as interface{}
func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) AsNameValue() (*deployment.Reference, bool) {
	res, ok := fpv.value.(*deployment.Reference)
	return res, ok
}
func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) AsFieldMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeploymentRequest
func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) SetTo(target **WatchDeploymentRequest) {
	if *target == nil {
		*target = new(WatchDeploymentRequest)
	}
	switch fpv.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*deployment.Reference)
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*deployment.Deployment_FieldMask)
	case WatchDeploymentRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeploymentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeploymentRequest_FieldTerminalPathValue' with the value under path in 'WatchDeploymentRequest'.
func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) CompareWith(source *WatchDeploymentRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*deployment.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeploymentRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeploymentRequest))
}

// WatchDeploymentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeploymentRequest according to their type
// Present only for array (repeated) types.
type WatchDeploymentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeploymentRequest_FieldPath
	ContainsValue(*WatchDeploymentRequest) bool
}

// ParseWatchDeploymentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeploymentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeploymentRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeploymentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeploymentRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentRequest_FieldPathArrayItemValue = (*WatchDeploymentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeploymentRequest as interface{}
func (fpaiv *WatchDeploymentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeploymentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeploymentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeploymentRequest'
func (fpaiv *WatchDeploymentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeploymentRequest) bool {
	slice := fpaiv.WatchDeploymentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeploymentRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeploymentRequest fields according to their type
type WatchDeploymentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeploymentRequest_FieldPath
}

func ParseWatchDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeploymentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeploymentRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeploymentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeploymentRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeploymentRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeploymentRequest_FieldPathArrayOfValues = (*WatchDeploymentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeploymentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeploymentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*deployment.Reference) {
			values = append(values, v)
		}
	case WatchDeploymentRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	case WatchDeploymentRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeploymentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*deployment.Reference, bool) {
	res, ok := fpaov.values.([]*deployment.Reference)
	return res, ok
}
func (fpaov *WatchDeploymentRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpaov *WatchDeploymentRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeploymentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeploymentResponse_FieldPathSelector
	Get(source *WatchDeploymentResponse) []interface{}
	GetSingle(source *WatchDeploymentResponse) (interface{}, bool)
	ClearValue(item *WatchDeploymentResponse)

	// Those methods build corresponding WatchDeploymentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeploymentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeploymentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeploymentResponse_FieldPathArrayItemValue
}

type WatchDeploymentResponse_FieldPathSelector int32

const (
	WatchDeploymentResponse_FieldPathSelectorChange WatchDeploymentResponse_FieldPathSelector = 0
)

func (s WatchDeploymentResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", s))
	}
}

func BuildWatchDeploymentResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeploymentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeploymentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchDeploymentResponse_FieldTerminalPath{selector: WatchDeploymentResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeploymentResponse", fp)
}

func ParseWatchDeploymentResponse_FieldPath(rawField string) (WatchDeploymentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeploymentResponse_FieldPath(fp)
}

func MustParseWatchDeploymentResponse_FieldPath(rawField string) WatchDeploymentResponse_FieldPath {
	fp, err := ParseWatchDeploymentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeploymentResponse_FieldTerminalPath struct {
	selector WatchDeploymentResponse_FieldPathSelector
}

var _ WatchDeploymentResponse_FieldPath = (*WatchDeploymentResponse_FieldTerminalPath)(nil)

func (fp *WatchDeploymentResponse_FieldTerminalPath) Selector() WatchDeploymentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeploymentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeploymentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeploymentResponse
func (fp *WatchDeploymentResponse_FieldTerminalPath) Get(source *WatchDeploymentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeploymentResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeploymentResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeploymentResponse
func (fp *WatchDeploymentResponse_FieldTerminalPath) GetSingle(source *WatchDeploymentResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeploymentResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeploymentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		return (*deployment.DeploymentChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) ClearValue(item *WatchDeploymentResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeploymentResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeploymentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeploymentResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeploymentResponse_FieldPathSelectorChange
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeploymentResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		return &WatchDeploymentResponse_FieldTerminalPathValue{WatchDeploymentResponse_FieldTerminalPath: *fp, value: value.(*deployment.DeploymentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeploymentResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeploymentResponse_FieldTerminalPathArrayOfValues{WatchDeploymentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		return &WatchDeploymentResponse_FieldTerminalPathArrayOfValues{WatchDeploymentResponse_FieldTerminalPath: *fp, values: values.([]*deployment.DeploymentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeploymentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeploymentResponse_FieldPathValue allows storing values for WatchDeploymentResponse fields according to their type
type WatchDeploymentResponse_FieldPathValue interface {
	WatchDeploymentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeploymentResponse)
	CompareWith(*WatchDeploymentResponse) (cmp int, comparable bool)
}

func ParseWatchDeploymentResponse_FieldPathValue(pathStr, valueStr string) (WatchDeploymentResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeploymentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeploymentResponse_FieldPathValue), nil
}

func MustParseWatchDeploymentResponse_FieldPathValue(pathStr, valueStr string) WatchDeploymentResponse_FieldPathValue {
	fpv, err := ParseWatchDeploymentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeploymentResponse_FieldTerminalPathValue struct {
	WatchDeploymentResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentResponse_FieldPathValue = (*WatchDeploymentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeploymentResponse' as interface{}
func (fpv *WatchDeploymentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeploymentResponse_FieldTerminalPathValue) AsChangeValue() (*deployment.DeploymentChange, bool) {
	res, ok := fpv.value.(*deployment.DeploymentChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeploymentResponse
func (fpv *WatchDeploymentResponse_FieldTerminalPathValue) SetTo(target **WatchDeploymentResponse) {
	if *target == nil {
		*target = new(WatchDeploymentResponse)
	}
	switch fpv.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*deployment.DeploymentChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeploymentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeploymentResponse_FieldTerminalPathValue' with the value under path in 'WatchDeploymentResponse'.
func (fpv *WatchDeploymentResponse_FieldTerminalPathValue) CompareWith(source *WatchDeploymentResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeploymentResponse))
}

// WatchDeploymentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeploymentResponse according to their type
// Present only for array (repeated) types.
type WatchDeploymentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeploymentResponse_FieldPath
	ContainsValue(*WatchDeploymentResponse) bool
}

// ParseWatchDeploymentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeploymentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeploymentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeploymentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeploymentResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeploymentResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeploymentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeploymentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeploymentResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeploymentResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentResponse_FieldPathArrayItemValue = (*WatchDeploymentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeploymentResponse as interface{}
func (fpaiv *WatchDeploymentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeploymentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeploymentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeploymentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeploymentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeploymentResponse'
func (fpaiv *WatchDeploymentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeploymentResponse) bool {
	slice := fpaiv.WatchDeploymentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeploymentResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeploymentResponse fields according to their type
type WatchDeploymentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeploymentResponse_FieldPath
}

func ParseWatchDeploymentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeploymentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeploymentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeploymentResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeploymentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeploymentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeploymentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeploymentResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeploymentResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeploymentResponse_FieldPathArrayOfValues = (*WatchDeploymentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeploymentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeploymentResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*deployment.DeploymentChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeploymentResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*deployment.DeploymentChange, bool) {
	res, ok := fpaov.values.([]*deployment.DeploymentChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeploymentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeploymentsRequest_FieldPathSelector
	Get(source *WatchDeploymentsRequest) []interface{}
	GetSingle(source *WatchDeploymentsRequest) (interface{}, bool)
	ClearValue(item *WatchDeploymentsRequest)

	// Those methods build corresponding WatchDeploymentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeploymentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeploymentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeploymentsRequest_FieldPathArrayItemValue
}

type WatchDeploymentsRequest_FieldPathSelector int32

const (
	WatchDeploymentsRequest_FieldPathSelectorType         WatchDeploymentsRequest_FieldPathSelector = 0
	WatchDeploymentsRequest_FieldPathSelectorParent       WatchDeploymentsRequest_FieldPathSelector = 1
	WatchDeploymentsRequest_FieldPathSelectorPageSize     WatchDeploymentsRequest_FieldPathSelector = 2
	WatchDeploymentsRequest_FieldPathSelectorPageToken    WatchDeploymentsRequest_FieldPathSelector = 3
	WatchDeploymentsRequest_FieldPathSelectorOrderBy      WatchDeploymentsRequest_FieldPathSelector = 4
	WatchDeploymentsRequest_FieldPathSelectorResumeToken  WatchDeploymentsRequest_FieldPathSelector = 5
	WatchDeploymentsRequest_FieldPathSelectorFilter       WatchDeploymentsRequest_FieldPathSelector = 6
	WatchDeploymentsRequest_FieldPathSelectorFieldMask    WatchDeploymentsRequest_FieldPathSelector = 7
	WatchDeploymentsRequest_FieldPathSelectorView         WatchDeploymentsRequest_FieldPathSelector = 8
	WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize WatchDeploymentsRequest_FieldPathSelector = 9
)

func (s WatchDeploymentsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		return "type"
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeploymentsRequest_FieldPathSelectorView:
		return "view"
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", s))
	}
}

func BuildWatchDeploymentsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeploymentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeploymentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchDeploymentsRequest_FieldTerminalPath{selector: WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeploymentsRequest", fp)
}

func ParseWatchDeploymentsRequest_FieldPath(rawField string) (WatchDeploymentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeploymentsRequest_FieldPath(fp)
}

func MustParseWatchDeploymentsRequest_FieldPath(rawField string) WatchDeploymentsRequest_FieldPath {
	fp, err := ParseWatchDeploymentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeploymentsRequest_FieldTerminalPath struct {
	selector WatchDeploymentsRequest_FieldPathSelector
}

var _ WatchDeploymentsRequest_FieldPath = (*WatchDeploymentsRequest_FieldTerminalPath)(nil)

func (fp *WatchDeploymentsRequest_FieldTerminalPath) Selector() WatchDeploymentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeploymentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeploymentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeploymentsRequest
func (fp *WatchDeploymentsRequest_FieldTerminalPath) Get(source *WatchDeploymentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeploymentsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchDeploymentsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchDeploymentsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchDeploymentsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDeploymentsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeploymentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeploymentsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeploymentsRequest
func (fp *WatchDeploymentsRequest_FieldTerminalPath) GetSingle(source *WatchDeploymentsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeploymentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeploymentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeploymentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		return (*deployment.ParentReference)(nil)
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		return (*deployment.PagerCursor)(nil)
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		return (*deployment.OrderBy)(nil)
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		return (*deployment.Filter)(nil)
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		return (*deployment.Deployment_FieldMask)(nil)
	case WatchDeploymentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) ClearValue(item *WatchDeploymentsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeploymentsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchDeploymentsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchDeploymentsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchDeploymentsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDeploymentsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeploymentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeploymentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeploymentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeploymentsRequest_FieldPathSelectorType ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorParent ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorView ||
		fp.selector == WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeploymentsRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.ParentReference)}
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.PagerCursor)}
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.OrderBy)}
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.Filter)}
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	case WatchDeploymentsRequest_FieldPathSelectorView:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDeploymentsRequest_FieldTerminalPathValue{WatchDeploymentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeploymentsRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.ParentReference)}
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.PagerCursor)}
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.OrderBy)}
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Filter)}
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	case WatchDeploymentsRequest_FieldPathSelectorView:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDeploymentsRequest_FieldTerminalPathArrayOfValues{WatchDeploymentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeploymentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeploymentsRequest_FieldPathValue allows storing values for WatchDeploymentsRequest fields according to their type
type WatchDeploymentsRequest_FieldPathValue interface {
	WatchDeploymentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeploymentsRequest)
	CompareWith(*WatchDeploymentsRequest) (cmp int, comparable bool)
}

func ParseWatchDeploymentsRequest_FieldPathValue(pathStr, valueStr string) (WatchDeploymentsRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeploymentsRequest_FieldPathValue), nil
}

func MustParseWatchDeploymentsRequest_FieldPathValue(pathStr, valueStr string) WatchDeploymentsRequest_FieldPathValue {
	fpv, err := ParseWatchDeploymentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeploymentsRequest_FieldTerminalPathValue struct {
	WatchDeploymentsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentsRequest_FieldPathValue = (*WatchDeploymentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeploymentsRequest' as interface{}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsParentValue() (*deployment.ParentReference, bool) {
	res, ok := fpv.value.(*deployment.ParentReference)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsPageTokenValue() (*deployment.PagerCursor, bool) {
	res, ok := fpv.value.(*deployment.PagerCursor)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsOrderByValue() (*deployment.OrderBy, bool) {
	res, ok := fpv.value.(*deployment.OrderBy)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsFilterValue() (*deployment.Filter, bool) {
	res, ok := fpv.value.(*deployment.Filter)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeploymentsRequest
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) SetTo(target **WatchDeploymentsRequest) {
	if *target == nil {
		*target = new(WatchDeploymentsRequest)
	}
	switch fpv.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*deployment.ParentReference)
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*deployment.PagerCursor)
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*deployment.OrderBy)
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*deployment.Filter)
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*deployment.Deployment_FieldMask)
	case WatchDeploymentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeploymentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeploymentsRequest_FieldTerminalPathValue' with the value under path in 'WatchDeploymentsRequest'.
func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) CompareWith(source *WatchDeploymentsRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*deployment.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeploymentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeploymentsRequest))
}

// WatchDeploymentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeploymentsRequest according to their type
// Present only for array (repeated) types.
type WatchDeploymentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeploymentsRequest_FieldPath
	ContainsValue(*WatchDeploymentsRequest) bool
}

// ParseWatchDeploymentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeploymentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeploymentsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeploymentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeploymentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeploymentsRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeploymentsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentsRequest_FieldPathArrayItemValue = (*WatchDeploymentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeploymentsRequest as interface{}
func (fpaiv *WatchDeploymentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeploymentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeploymentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeploymentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeploymentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeploymentsRequest'
func (fpaiv *WatchDeploymentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeploymentsRequest) bool {
	slice := fpaiv.WatchDeploymentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeploymentsRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeploymentsRequest fields according to their type
type WatchDeploymentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeploymentsRequest_FieldPath
}

func ParseWatchDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeploymentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeploymentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeploymentsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeploymentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeploymentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeploymentsRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeploymentsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeploymentsRequest_FieldPathArrayOfValues = (*WatchDeploymentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeploymentsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*deployment.ParentReference) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*deployment.PagerCursor) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*deployment.OrderBy) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*deployment.Filter) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchDeploymentsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*deployment.ParentReference, bool) {
	res, ok := fpaov.values.([]*deployment.ParentReference)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*deployment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*deployment.PagerCursor)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*deployment.OrderBy, bool) {
	res, ok := fpaov.values.([]*deployment.OrderBy)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*deployment.Filter, bool) {
	res, ok := fpaov.values.([]*deployment.Filter)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchDeploymentsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeploymentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeploymentsResponse_FieldPathSelector
	Get(source *WatchDeploymentsResponse) []interface{}
	GetSingle(source *WatchDeploymentsResponse) (interface{}, bool)
	ClearValue(item *WatchDeploymentsResponse)

	// Those methods build corresponding WatchDeploymentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeploymentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeploymentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeploymentsResponse_FieldPathArrayItemValue
}

type WatchDeploymentsResponse_FieldPathSelector int32

const (
	WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges WatchDeploymentsResponse_FieldPathSelector = 0
	WatchDeploymentsResponse_FieldPathSelectorIsCurrent         WatchDeploymentsResponse_FieldPathSelector = 1
	WatchDeploymentsResponse_FieldPathSelectorPageTokenChange   WatchDeploymentsResponse_FieldPathSelector = 2
	WatchDeploymentsResponse_FieldPathSelectorResumeToken       WatchDeploymentsResponse_FieldPathSelector = 3
	WatchDeploymentsResponse_FieldPathSelectorSnapshotSize      WatchDeploymentsResponse_FieldPathSelector = 4
	WatchDeploymentsResponse_FieldPathSelectorIsSoftReset       WatchDeploymentsResponse_FieldPathSelector = 5
	WatchDeploymentsResponse_FieldPathSelectorIsHardReset       WatchDeploymentsResponse_FieldPathSelector = 6
)

func (s WatchDeploymentsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		return "deployment_changes"
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", s))
	}
}

func BuildWatchDeploymentsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeploymentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeploymentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "deployment_changes", "deploymentChanges", "deployment-changes":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchDeploymentsResponse_FieldTerminalPath{selector: WatchDeploymentsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchDeploymentsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchDeploymentsResponse_FieldSubPath{selector: WatchDeploymentsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeploymentsResponse", fp)
}

func ParseWatchDeploymentsResponse_FieldPath(rawField string) (WatchDeploymentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeploymentsResponse_FieldPath(fp)
}

func MustParseWatchDeploymentsResponse_FieldPath(rawField string) WatchDeploymentsResponse_FieldPath {
	fp, err := ParseWatchDeploymentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeploymentsResponse_FieldTerminalPath struct {
	selector WatchDeploymentsResponse_FieldPathSelector
}

var _ WatchDeploymentsResponse_FieldPath = (*WatchDeploymentsResponse_FieldTerminalPath)(nil)

func (fp *WatchDeploymentsResponse_FieldTerminalPath) Selector() WatchDeploymentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeploymentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeploymentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeploymentsResponse
func (fp *WatchDeploymentsResponse_FieldTerminalPath) Get(source *WatchDeploymentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
			for _, value := range source.GetDeploymentChanges() {
				values = append(values, value)
			}
		case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeploymentsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeploymentsResponse
func (fp *WatchDeploymentsResponse_FieldTerminalPath) GetSingle(source *WatchDeploymentsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		res := source.GetDeploymentChanges()
		return res, res != nil
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeploymentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeploymentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		return ([]*deployment.DeploymentChange)(nil)
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchDeploymentsResponse_PageTokenChange)(nil)
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) ClearValue(item *WatchDeploymentsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
			item.DeploymentChanges = nil
		case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeploymentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeploymentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges ||
		fp.selector == WatchDeploymentsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchDeploymentsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchDeploymentsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchDeploymentsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchDeploymentsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeploymentsResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.([]*deployment.DeploymentChange)}
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*WatchDeploymentsResponse_PageTokenChange)}
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		return &WatchDeploymentsResponse_FieldTerminalPathValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeploymentsResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([][]*deployment.DeploymentChange)}
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]*WatchDeploymentsResponse_PageTokenChange)}
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayOfValues{WatchDeploymentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeploymentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		return &WatchDeploymentsResponse_FieldTerminalPathArrayItemValue{WatchDeploymentsResponse_FieldTerminalPath: *fp, value: value.(*deployment.DeploymentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchDeploymentsResponse_FieldSubPath struct {
	selector WatchDeploymentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchDeploymentsResponse_FieldPath = (*WatchDeploymentsResponse_FieldSubPath)(nil)

func (fps *WatchDeploymentsResponse_FieldSubPath) Selector() WatchDeploymentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchDeploymentsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchDeploymentsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchDeploymentsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchDeploymentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchDeploymentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchDeploymentsResponse
func (fps *WatchDeploymentsResponse_FieldSubPath) Get(source *WatchDeploymentsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchDeploymentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchDeploymentsResponse))
}

// GetSingle returns value of selected field from source WatchDeploymentsResponse
func (fps *WatchDeploymentsResponse_FieldSubPath) GetSingle(source *WatchDeploymentsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fps.selector))
	}
}

func (fps *WatchDeploymentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchDeploymentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchDeploymentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchDeploymentsResponse_FieldSubPath) ClearValue(item *WatchDeploymentsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchDeploymentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchDeploymentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchDeploymentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchDeploymentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchDeploymentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchDeploymentsResponse_FieldSubPath) WithIValue(value interface{}) WatchDeploymentsResponse_FieldPathValue {
	return &WatchDeploymentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchDeploymentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchDeploymentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchDeploymentsResponse_FieldPathArrayOfValues {
	return &WatchDeploymentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchDeploymentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchDeploymentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchDeploymentsResponse_FieldPathArrayItemValue {
	return &WatchDeploymentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchDeploymentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchDeploymentsResponse_FieldPathValue allows storing values for WatchDeploymentsResponse fields according to their type
type WatchDeploymentsResponse_FieldPathValue interface {
	WatchDeploymentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeploymentsResponse)
	CompareWith(*WatchDeploymentsResponse) (cmp int, comparable bool)
}

func ParseWatchDeploymentsResponse_FieldPathValue(pathStr, valueStr string) (WatchDeploymentsResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeploymentsResponse_FieldPathValue), nil
}

func MustParseWatchDeploymentsResponse_FieldPathValue(pathStr, valueStr string) WatchDeploymentsResponse_FieldPathValue {
	fpv, err := ParseWatchDeploymentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeploymentsResponse_FieldTerminalPathValue struct {
	WatchDeploymentsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentsResponse_FieldPathValue = (*WatchDeploymentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeploymentsResponse' as interface{}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsDeploymentChangesValue() ([]*deployment.DeploymentChange, bool) {
	res, ok := fpv.value.([]*deployment.DeploymentChange)
	return res, ok
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchDeploymentsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchDeploymentsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeploymentsResponse
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) SetTo(target **WatchDeploymentsResponse) {
	if *target == nil {
		*target = new(WatchDeploymentsResponse)
	}
	switch fpv.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		(*target).DeploymentChanges = fpv.value.([]*deployment.DeploymentChange)
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchDeploymentsResponse_PageTokenChange)
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeploymentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeploymentsResponse_FieldTerminalPathValue' with the value under path in 'WatchDeploymentsResponse'.
func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) CompareWith(source *WatchDeploymentsResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		return 0, false
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeploymentsResponse))
}

type WatchDeploymentsResponse_FieldSubPathValue struct {
	WatchDeploymentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchDeploymentsResponse_FieldPathValue = (*WatchDeploymentsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchDeploymentsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchDeploymentsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchDeploymentsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchDeploymentsResponse_FieldSubPathValue) SetTo(target **WatchDeploymentsResponse) {
	if *target == nil {
		*target = new(WatchDeploymentsResponse)
	}
	switch fpvs.Selector() {
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchDeploymentsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDeploymentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeploymentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchDeploymentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchDeploymentsResponse_FieldSubPathValue) CompareWith(source *WatchDeploymentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchDeploymentsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDeploymentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchDeploymentsResponse))
}

// WatchDeploymentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeploymentsResponse according to their type
// Present only for array (repeated) types.
type WatchDeploymentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeploymentsResponse_FieldPath
	ContainsValue(*WatchDeploymentsResponse) bool
}

// ParseWatchDeploymentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeploymentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeploymentsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeploymentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeploymentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeploymentsResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeploymentsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentsResponse_FieldPathArrayItemValue = (*WatchDeploymentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeploymentsResponse as interface{}
func (fpaiv *WatchDeploymentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchDeploymentsResponse_FieldTerminalPathArrayItemValue) AsDeploymentChangesItemValue() (*deployment.DeploymentChange, bool) {
	res, ok := fpaiv.value.(*deployment.DeploymentChange)
	return res, ok
}

func (fpaiv *WatchDeploymentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeploymentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeploymentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeploymentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeploymentsResponse'
func (fpaiv *WatchDeploymentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeploymentsResponse) bool {
	slice := fpaiv.WatchDeploymentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchDeploymentsResponse_FieldSubPathArrayItemValue struct {
	WatchDeploymentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchDeploymentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchDeploymentsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeploymentsResponse'
func (fpaivs *WatchDeploymentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchDeploymentsResponse) bool {
	switch fpaivs.Selector() {
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse: %d", fpaivs.Selector()))
	}
}

// WatchDeploymentsResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeploymentsResponse fields according to their type
type WatchDeploymentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeploymentsResponse_FieldPath
}

func ParseWatchDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeploymentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeploymentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeploymentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeploymentsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeploymentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeploymentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeploymentsResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeploymentsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeploymentsResponse_FieldPathArrayOfValues = (*WatchDeploymentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeploymentsResponse_FieldPathSelectorDeploymentChanges:
		for _, v := range fpaov.values.([][]*deployment.DeploymentChange) {
			values = append(values, v)
		}
	case WatchDeploymentsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDeploymentsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchDeploymentsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchDeploymentsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDeploymentsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchDeploymentsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDeploymentsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsDeploymentChangesArrayOfValues() ([][]*deployment.DeploymentChange, bool) {
	res, ok := fpaov.values.([][]*deployment.DeploymentChange)
	return res, ok
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchDeploymentsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchDeploymentsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDeploymentsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchDeploymentsResponse_FieldSubPathArrayOfValues struct {
	WatchDeploymentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchDeploymentsResponse_FieldPathArrayOfValues = (*WatchDeploymentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchDeploymentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchDeploymentsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeploymentsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeploymentsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchDeploymentsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchDeploymentsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchDeploymentsResponse_PageTokenChange)

	// Those methods build corresponding WatchDeploymentsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeploymentsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchDeploymentsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchDeploymentsResponsePageTokenChange_FieldPathSelector = 0
	WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchDeploymentsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchDeploymentsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchDeploymentsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchDeploymentsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeploymentsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchDeploymentsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchDeploymentsResponsePageTokenChange_FieldTerminalPath{selector: WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeploymentsResponse_PageTokenChange", fp)
}

func ParseWatchDeploymentsResponsePageTokenChange_FieldPath(rawField string) (WatchDeploymentsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeploymentsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchDeploymentsResponsePageTokenChange_FieldPath(rawField string) WatchDeploymentsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeploymentsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchDeploymentsResponsePageTokenChange_FieldPathSelector
}

var _ WatchDeploymentsResponsePageTokenChange_FieldPath = (*WatchDeploymentsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) Selector() WatchDeploymentsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeploymentsResponse_PageTokenChange
func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchDeploymentsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeploymentsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchDeploymentsResponse_PageTokenChange
func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchDeploymentsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeploymentsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*deployment.PagerCursor)(nil)
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*deployment.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchDeploymentsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeploymentsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchDeploymentsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue{WatchDeploymentsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*deployment.PagerCursor)}
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue{WatchDeploymentsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*deployment.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeploymentsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeploymentsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*deployment.PagerCursor)}
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeploymentsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*deployment.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeploymentsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeploymentsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchDeploymentsResponsePageTokenChange_FieldPathValue interface {
	WatchDeploymentsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeploymentsResponse_PageTokenChange)
	CompareWith(*WatchDeploymentsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchDeploymentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchDeploymentsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeploymentsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchDeploymentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchDeploymentsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchDeploymentsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentsResponsePageTokenChange_FieldPathValue = (*WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*deployment.PagerCursor, bool) {
	res, ok := fpv.value.(*deployment.PagerCursor)
	return res, ok
}
func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*deployment.PagerCursor, bool) {
	res, ok := fpv.value.(*deployment.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchDeploymentsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchDeploymentsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*deployment.PagerCursor)
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*deployment.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeploymentsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchDeploymentsResponse_PageTokenChange'.
func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchDeploymentsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeploymentsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeploymentsResponse_PageTokenChange))
}

// WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeploymentsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchDeploymentsResponse_PageTokenChange) bool
}

// ParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchDeploymentsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDeploymentsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeploymentsResponse_PageTokenChange as interface{}
func (fpaiv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeploymentsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeploymentsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeploymentsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchDeploymentsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeploymentsResponsePageTokenChange_FieldPath
}

func ParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchDeploymentsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchDeploymentsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*deployment.PagerCursor) {
			values = append(values, v)
		}
	case WatchDeploymentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*deployment.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*deployment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*deployment.PagerCursor)
	return res, ok
}
func (fpaov *WatchDeploymentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*deployment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*deployment.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateDeploymentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateDeploymentRequest_FieldPathSelector
	Get(source *CreateDeploymentRequest) []interface{}
	GetSingle(source *CreateDeploymentRequest) (interface{}, bool)
	ClearValue(item *CreateDeploymentRequest)

	// Those methods build corresponding CreateDeploymentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateDeploymentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateDeploymentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateDeploymentRequest_FieldPathArrayItemValue
}

type CreateDeploymentRequest_FieldPathSelector int32

const (
	CreateDeploymentRequest_FieldPathSelectorParent     CreateDeploymentRequest_FieldPathSelector = 0
	CreateDeploymentRequest_FieldPathSelectorDeployment CreateDeploymentRequest_FieldPathSelector = 1
)

func (s CreateDeploymentRequest_FieldPathSelector) String() string {
	switch s {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		return "parent"
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return "deployment"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", s))
	}
}

func BuildCreateDeploymentRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateDeploymentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateDeploymentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateDeploymentRequest_FieldTerminalPath{selector: CreateDeploymentRequest_FieldPathSelectorParent}, nil
		case "deployment":
			return &CreateDeploymentRequest_FieldTerminalPath{selector: CreateDeploymentRequest_FieldPathSelectorDeployment}, nil
		}
	} else {
		switch fp[0] {
		case "deployment":
			if subpath, err := deployment.BuildDeployment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateDeploymentRequest_FieldSubPath{selector: CreateDeploymentRequest_FieldPathSelectorDeployment, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateDeploymentRequest", fp)
}

func ParseCreateDeploymentRequest_FieldPath(rawField string) (CreateDeploymentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateDeploymentRequest_FieldPath(fp)
}

func MustParseCreateDeploymentRequest_FieldPath(rawField string) CreateDeploymentRequest_FieldPath {
	fp, err := ParseCreateDeploymentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateDeploymentRequest_FieldTerminalPath struct {
	selector CreateDeploymentRequest_FieldPathSelector
}

var _ CreateDeploymentRequest_FieldPath = (*CreateDeploymentRequest_FieldTerminalPath)(nil)

func (fp *CreateDeploymentRequest_FieldTerminalPath) Selector() CreateDeploymentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateDeploymentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateDeploymentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateDeploymentRequest
func (fp *CreateDeploymentRequest_FieldTerminalPath) Get(source *CreateDeploymentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateDeploymentRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateDeploymentRequest_FieldPathSelectorDeployment:
			if source.Deployment != nil {
				values = append(values, source.Deployment)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateDeploymentRequest))
}

// GetSingle returns value pointed by specific field of from source CreateDeploymentRequest
func (fp *CreateDeploymentRequest_FieldTerminalPath) GetSingle(source *CreateDeploymentRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		res := source.GetDeployment()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateDeploymentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		return (*deployment.ParentReference)(nil)
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return (*deployment.Deployment)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) ClearValue(item *CreateDeploymentRequest) {
	if item != nil {
		switch fp.selector {
		case CreateDeploymentRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateDeploymentRequest_FieldPathSelectorDeployment:
			item.Deployment = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateDeploymentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateDeploymentRequest_FieldPathSelectorParent
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) WithIValue(value interface{}) CreateDeploymentRequest_FieldPathValue {
	switch fp.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		return &CreateDeploymentRequest_FieldTerminalPathValue{CreateDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.ParentReference)}
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return &CreateDeploymentRequest_FieldTerminalPathValue{CreateDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateDeploymentRequest_FieldPathArrayOfValues {
	fpaov := &CreateDeploymentRequest_FieldTerminalPathArrayOfValues{CreateDeploymentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		return &CreateDeploymentRequest_FieldTerminalPathArrayOfValues{CreateDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.ParentReference)}
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return &CreateDeploymentRequest_FieldTerminalPathArrayOfValues{CreateDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateDeploymentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *CreateDeploymentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateDeploymentRequest_FieldSubPath struct {
	selector CreateDeploymentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateDeploymentRequest_FieldPath = (*CreateDeploymentRequest_FieldSubPath)(nil)

func (fps *CreateDeploymentRequest_FieldSubPath) Selector() CreateDeploymentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateDeploymentRequest_FieldSubPath) AsDeploymentSubPath() (deployment.Deployment_FieldPath, bool) {
	res, ok := fps.subPath.(deployment.Deployment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateDeploymentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateDeploymentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateDeploymentRequest
func (fps *CreateDeploymentRequest_FieldSubPath) Get(source *CreateDeploymentRequest) (values []interface{}) {
	if asDeploymentFieldPath, ok := fps.AsDeploymentSubPath(); ok {
		values = append(values, asDeploymentFieldPath.Get(source.GetDeployment())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateDeploymentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateDeploymentRequest))
}

// GetSingle returns value of selected field from source CreateDeploymentRequest
func (fps *CreateDeploymentRequest_FieldSubPath) GetSingle(source *CreateDeploymentRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		if source.GetDeployment() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeployment())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fps.selector))
	}
}

func (fps *CreateDeploymentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateDeploymentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateDeploymentRequest_FieldSubPath) ClearValue(item *CreateDeploymentRequest) {
	if item != nil {
		switch fps.selector {
		case CreateDeploymentRequest_FieldPathSelectorDeployment:
			fps.subPath.ClearValueRaw(item.Deployment)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateDeploymentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateDeploymentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateDeploymentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateDeploymentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateDeploymentRequest_FieldSubPath) WithIValue(value interface{}) CreateDeploymentRequest_FieldPathValue {
	return &CreateDeploymentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateDeploymentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateDeploymentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateDeploymentRequest_FieldPathArrayOfValues {
	return &CreateDeploymentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateDeploymentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateDeploymentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateDeploymentRequest_FieldPathArrayItemValue {
	return &CreateDeploymentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateDeploymentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateDeploymentRequest_FieldPathValue allows storing values for CreateDeploymentRequest fields according to their type
type CreateDeploymentRequest_FieldPathValue interface {
	CreateDeploymentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateDeploymentRequest)
	CompareWith(*CreateDeploymentRequest) (cmp int, comparable bool)
}

func ParseCreateDeploymentRequest_FieldPathValue(pathStr, valueStr string) (CreateDeploymentRequest_FieldPathValue, error) {
	fp, err := ParseCreateDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeploymentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateDeploymentRequest_FieldPathValue), nil
}

func MustParseCreateDeploymentRequest_FieldPathValue(pathStr, valueStr string) CreateDeploymentRequest_FieldPathValue {
	fpv, err := ParseCreateDeploymentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateDeploymentRequest_FieldTerminalPathValue struct {
	CreateDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeploymentRequest_FieldPathValue = (*CreateDeploymentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateDeploymentRequest' as interface{}
func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) AsParentValue() (*deployment.ParentReference, bool) {
	res, ok := fpv.value.(*deployment.ParentReference)
	return res, ok
}
func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) AsDeploymentValue() (*deployment.Deployment, bool) {
	res, ok := fpv.value.(*deployment.Deployment)
	return res, ok
}

// SetTo stores value for selected field for object CreateDeploymentRequest
func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) SetTo(target **CreateDeploymentRequest) {
	if *target == nil {
		*target = new(CreateDeploymentRequest)
	}
	switch fpv.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*deployment.ParentReference)
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		(*target).Deployment = fpv.value.(*deployment.Deployment)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeploymentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateDeploymentRequest_FieldTerminalPathValue' with the value under path in 'CreateDeploymentRequest'.
func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) CompareWith(source *CreateDeploymentRequest) (int, bool) {
	switch fpv.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*deployment.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeploymentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateDeploymentRequest))
}

type CreateDeploymentRequest_FieldSubPathValue struct {
	CreateDeploymentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateDeploymentRequest_FieldPathValue = (*CreateDeploymentRequest_FieldSubPathValue)(nil)

func (fpvs *CreateDeploymentRequest_FieldSubPathValue) AsDeploymentPathValue() (deployment.Deployment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(deployment.Deployment_FieldPathValue)
	return res, ok
}

func (fpvs *CreateDeploymentRequest_FieldSubPathValue) SetTo(target **CreateDeploymentRequest) {
	if *target == nil {
		*target = new(CreateDeploymentRequest)
	}
	switch fpvs.Selector() {
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		fpvs.subPathValue.(deployment.Deployment_FieldPathValue).SetTo(&(*target).Deployment)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeploymentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeploymentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateDeploymentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateDeploymentRequest_FieldSubPathValue) CompareWith(source *CreateDeploymentRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return fpvs.subPathValue.(deployment.Deployment_FieldPathValue).CompareWith(source.GetDeployment())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeploymentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateDeploymentRequest))
}

// CreateDeploymentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateDeploymentRequest according to their type
// Present only for array (repeated) types.
type CreateDeploymentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateDeploymentRequest_FieldPath
	ContainsValue(*CreateDeploymentRequest) bool
}

// ParseCreateDeploymentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateDeploymentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeploymentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateDeploymentRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateDeploymentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateDeploymentRequest_FieldTerminalPathArrayItemValue struct {
	CreateDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeploymentRequest_FieldPathArrayItemValue = (*CreateDeploymentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateDeploymentRequest as interface{}
func (fpaiv *CreateDeploymentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateDeploymentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateDeploymentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeploymentRequest'
func (fpaiv *CreateDeploymentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateDeploymentRequest) bool {
	slice := fpaiv.CreateDeploymentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateDeploymentRequest_FieldSubPathArrayItemValue struct {
	CreateDeploymentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateDeploymentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateDeploymentRequest_FieldSubPathArrayItemValue) AsDeploymentPathItemValue() (deployment.Deployment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeploymentRequest'
func (fpaivs *CreateDeploymentRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateDeploymentRequest) bool {
	switch fpaivs.Selector() {
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		return fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue).ContainsValue(source.GetDeployment())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeploymentRequest: %d", fpaivs.Selector()))
	}
}

// CreateDeploymentRequest_FieldPathArrayOfValues allows storing slice of values for CreateDeploymentRequest fields according to their type
type CreateDeploymentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateDeploymentRequest_FieldPath
}

func ParseCreateDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateDeploymentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeploymentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateDeploymentRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateDeploymentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateDeploymentRequest_FieldTerminalPathArrayOfValues struct {
	CreateDeploymentRequest_FieldTerminalPath
	values interface{}
}

var _ CreateDeploymentRequest_FieldPathArrayOfValues = (*CreateDeploymentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateDeploymentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateDeploymentRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*deployment.ParentReference) {
			values = append(values, v)
		}
	case CreateDeploymentRequest_FieldPathSelectorDeployment:
		for _, v := range fpaov.values.([]*deployment.Deployment) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateDeploymentRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*deployment.ParentReference, bool) {
	res, ok := fpaov.values.([]*deployment.ParentReference)
	return res, ok
}
func (fpaov *CreateDeploymentRequest_FieldTerminalPathArrayOfValues) AsDeploymentArrayOfValues() ([]*deployment.Deployment, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment)
	return res, ok
}

type CreateDeploymentRequest_FieldSubPathArrayOfValues struct {
	CreateDeploymentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateDeploymentRequest_FieldPathArrayOfValues = (*CreateDeploymentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateDeploymentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateDeploymentRequest_FieldSubPathArrayOfValues) AsDeploymentPathArrayOfValues() (deployment.Deployment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(deployment.Deployment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeploymentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeploymentRequest_FieldPathSelector
	Get(source *UpdateDeploymentRequest) []interface{}
	GetSingle(source *UpdateDeploymentRequest) (interface{}, bool)
	ClearValue(item *UpdateDeploymentRequest)

	// Those methods build corresponding UpdateDeploymentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeploymentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeploymentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeploymentRequest_FieldPathArrayItemValue
}

type UpdateDeploymentRequest_FieldPathSelector int32

const (
	UpdateDeploymentRequest_FieldPathSelectorDeployment UpdateDeploymentRequest_FieldPathSelector = 0
	UpdateDeploymentRequest_FieldPathSelectorUpdateMask UpdateDeploymentRequest_FieldPathSelector = 1
	UpdateDeploymentRequest_FieldPathSelectorCas        UpdateDeploymentRequest_FieldPathSelector = 2
)

func (s UpdateDeploymentRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return "deployment"
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", s))
	}
}

func BuildUpdateDeploymentRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeploymentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeploymentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "deployment":
			return &UpdateDeploymentRequest_FieldTerminalPath{selector: UpdateDeploymentRequest_FieldPathSelectorDeployment}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateDeploymentRequest_FieldTerminalPath{selector: UpdateDeploymentRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateDeploymentRequest_FieldTerminalPath{selector: UpdateDeploymentRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "deployment":
			if subpath, err := deployment.BuildDeployment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeploymentRequest_FieldSubPath{selector: UpdateDeploymentRequest_FieldPathSelectorDeployment, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateDeploymentRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeploymentRequest_FieldSubPath{selector: UpdateDeploymentRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeploymentRequest", fp)
}

func ParseUpdateDeploymentRequest_FieldPath(rawField string) (UpdateDeploymentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeploymentRequest_FieldPath(fp)
}

func MustParseUpdateDeploymentRequest_FieldPath(rawField string) UpdateDeploymentRequest_FieldPath {
	fp, err := ParseUpdateDeploymentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeploymentRequest_FieldTerminalPath struct {
	selector UpdateDeploymentRequest_FieldPathSelector
}

var _ UpdateDeploymentRequest_FieldPath = (*UpdateDeploymentRequest_FieldTerminalPath)(nil)

func (fp *UpdateDeploymentRequest_FieldTerminalPath) Selector() UpdateDeploymentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeploymentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeploymentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeploymentRequest
func (fp *UpdateDeploymentRequest_FieldTerminalPath) Get(source *UpdateDeploymentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeploymentRequest_FieldPathSelectorDeployment:
			if source.Deployment != nil {
				values = append(values, source.Deployment)
			}
		case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateDeploymentRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeploymentRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateDeploymentRequest
func (fp *UpdateDeploymentRequest_FieldTerminalPath) GetSingle(source *UpdateDeploymentRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		res := source.GetDeployment()
		return res, res != nil
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeploymentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return (*deployment.Deployment)(nil)
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		return (*deployment.Deployment_FieldMask)(nil)
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return (*UpdateDeploymentRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) ClearValue(item *UpdateDeploymentRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateDeploymentRequest_FieldPathSelectorDeployment:
			item.Deployment = nil
		case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateDeploymentRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeploymentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeploymentRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateDeploymentRequest_FieldPathValue {
	switch fp.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return &UpdateDeploymentRequest_FieldTerminalPathValue{UpdateDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment)}
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeploymentRequest_FieldTerminalPathValue{UpdateDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return &UpdateDeploymentRequest_FieldTerminalPathValue{UpdateDeploymentRequest_FieldTerminalPath: *fp, value: value.(*UpdateDeploymentRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeploymentRequest_FieldPathArrayOfValues {
	fpaov := &UpdateDeploymentRequest_FieldTerminalPathArrayOfValues{UpdateDeploymentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return &UpdateDeploymentRequest_FieldTerminalPathArrayOfValues{UpdateDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment)}
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeploymentRequest_FieldTerminalPathArrayOfValues{UpdateDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return &UpdateDeploymentRequest_FieldTerminalPathArrayOfValues{UpdateDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*UpdateDeploymentRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeploymentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeploymentRequest_FieldSubPath struct {
	selector UpdateDeploymentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeploymentRequest_FieldPath = (*UpdateDeploymentRequest_FieldSubPath)(nil)

func (fps *UpdateDeploymentRequest_FieldSubPath) Selector() UpdateDeploymentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeploymentRequest_FieldSubPath) AsDeploymentSubPath() (deployment.Deployment_FieldPath, bool) {
	res, ok := fps.subPath.(deployment.Deployment_FieldPath)
	return res, ok
}
func (fps *UpdateDeploymentRequest_FieldSubPath) AsCasSubPath() (UpdateDeploymentRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateDeploymentRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeploymentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeploymentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeploymentRequest
func (fps *UpdateDeploymentRequest_FieldSubPath) Get(source *UpdateDeploymentRequest) (values []interface{}) {
	if asDeploymentFieldPath, ok := fps.AsDeploymentSubPath(); ok {
		values = append(values, asDeploymentFieldPath.Get(source.GetDeployment())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeploymentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeploymentRequest))
}

// GetSingle returns value of selected field from source UpdateDeploymentRequest
func (fps *UpdateDeploymentRequest_FieldSubPath) GetSingle(source *UpdateDeploymentRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		if source.GetDeployment() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeployment())
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fps.selector))
	}
}

func (fps *UpdateDeploymentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeploymentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeploymentRequest_FieldSubPath) ClearValue(item *UpdateDeploymentRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateDeploymentRequest_FieldPathSelectorDeployment:
			fps.subPath.ClearValueRaw(item.Deployment)
		case UpdateDeploymentRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeploymentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeploymentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeploymentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateDeploymentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateDeploymentRequest_FieldSubPath) WithIValue(value interface{}) UpdateDeploymentRequest_FieldPathValue {
	return &UpdateDeploymentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeploymentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeploymentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeploymentRequest_FieldPathArrayOfValues {
	return &UpdateDeploymentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeploymentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeploymentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeploymentRequest_FieldPathArrayItemValue {
	return &UpdateDeploymentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeploymentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeploymentRequest_FieldPathValue allows storing values for UpdateDeploymentRequest fields according to their type
type UpdateDeploymentRequest_FieldPathValue interface {
	UpdateDeploymentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeploymentRequest)
	CompareWith(*UpdateDeploymentRequest) (cmp int, comparable bool)
}

func ParseUpdateDeploymentRequest_FieldPathValue(pathStr, valueStr string) (UpdateDeploymentRequest_FieldPathValue, error) {
	fp, err := ParseUpdateDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeploymentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeploymentRequest_FieldPathValue), nil
}

func MustParseUpdateDeploymentRequest_FieldPathValue(pathStr, valueStr string) UpdateDeploymentRequest_FieldPathValue {
	fpv, err := ParseUpdateDeploymentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeploymentRequest_FieldTerminalPathValue struct {
	UpdateDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeploymentRequest_FieldPathValue = (*UpdateDeploymentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateDeploymentRequest' as interface{}
func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) AsDeploymentValue() (*deployment.Deployment, bool) {
	res, ok := fpv.value.(*deployment.Deployment)
	return res, ok
}
func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) AsCasValue() (*UpdateDeploymentRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateDeploymentRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateDeploymentRequest
func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) SetTo(target **UpdateDeploymentRequest) {
	if *target == nil {
		*target = new(UpdateDeploymentRequest)
	}
	switch fpv.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		(*target).Deployment = fpv.value.(*deployment.Deployment)
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*deployment.Deployment_FieldMask)
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateDeploymentRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeploymentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeploymentRequest_FieldTerminalPathValue' with the value under path in 'UpdateDeploymentRequest'.
func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) CompareWith(source *UpdateDeploymentRequest) (int, bool) {
	switch fpv.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return 0, false
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeploymentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeploymentRequest))
}

type UpdateDeploymentRequest_FieldSubPathValue struct {
	UpdateDeploymentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeploymentRequest_FieldPathValue = (*UpdateDeploymentRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) AsDeploymentPathValue() (deployment.Deployment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(deployment.Deployment_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) AsCasPathValue() (UpdateDeploymentRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateDeploymentRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) SetTo(target **UpdateDeploymentRequest) {
	if *target == nil {
		*target = new(UpdateDeploymentRequest)
	}
	switch fpvs.Selector() {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		fpvs.subPathValue.(deployment.Deployment_FieldPathValue).SetTo(&(*target).Deployment)
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateDeploymentRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeploymentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) CompareWith(source *UpdateDeploymentRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return fpvs.subPathValue.(deployment.Deployment_FieldPathValue).CompareWith(source.GetDeployment())
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateDeploymentRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeploymentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeploymentRequest))
}

// UpdateDeploymentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateDeploymentRequest according to their type
// Present only for array (repeated) types.
type UpdateDeploymentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeploymentRequest_FieldPath
	ContainsValue(*UpdateDeploymentRequest) bool
}

// ParseUpdateDeploymentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeploymentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeploymentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeploymentRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeploymentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeploymentRequest_FieldTerminalPathArrayItemValue struct {
	UpdateDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeploymentRequest_FieldPathArrayItemValue = (*UpdateDeploymentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeploymentRequest as interface{}
func (fpaiv *UpdateDeploymentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeploymentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeploymentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeploymentRequest'
func (fpaiv *UpdateDeploymentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeploymentRequest) bool {
	slice := fpaiv.UpdateDeploymentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeploymentRequest_FieldSubPathArrayItemValue struct {
	UpdateDeploymentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeploymentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeploymentRequest_FieldSubPathArrayItemValue) AsDeploymentPathItemValue() (deployment.Deployment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateDeploymentRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateDeploymentRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateDeploymentRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeploymentRequest'
func (fpaivs *UpdateDeploymentRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeploymentRequest) bool {
	switch fpaivs.Selector() {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		return fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue).ContainsValue(source.GetDeployment())
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateDeploymentRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest: %d", fpaivs.Selector()))
	}
}

// UpdateDeploymentRequest_FieldPathArrayOfValues allows storing slice of values for UpdateDeploymentRequest fields according to their type
type UpdateDeploymentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeploymentRequest_FieldPath
}

func ParseUpdateDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeploymentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeploymentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeploymentRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeploymentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeploymentRequest_FieldTerminalPathArrayOfValues struct {
	UpdateDeploymentRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateDeploymentRequest_FieldPathArrayOfValues = (*UpdateDeploymentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeploymentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeploymentRequest_FieldPathSelectorDeployment:
		for _, v := range fpaov.values.([]*deployment.Deployment) {
			values = append(values, v)
		}
	case UpdateDeploymentRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	case UpdateDeploymentRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateDeploymentRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeploymentRequest_FieldTerminalPathArrayOfValues) AsDeploymentArrayOfValues() ([]*deployment.Deployment, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment)
	return res, ok
}
func (fpaov *UpdateDeploymentRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}
func (fpaov *UpdateDeploymentRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateDeploymentRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateDeploymentRequest_CAS)
	return res, ok
}

type UpdateDeploymentRequest_FieldSubPathArrayOfValues struct {
	UpdateDeploymentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeploymentRequest_FieldPathArrayOfValues = (*UpdateDeploymentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeploymentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeploymentRequest_FieldSubPathArrayOfValues) AsDeploymentPathArrayOfValues() (deployment.Deployment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(deployment.Deployment_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateDeploymentRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateDeploymentRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateDeploymentRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeploymentRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeploymentRequestCAS_FieldPathSelector
	Get(source *UpdateDeploymentRequest_CAS) []interface{}
	GetSingle(source *UpdateDeploymentRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateDeploymentRequest_CAS)

	// Those methods build corresponding UpdateDeploymentRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeploymentRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeploymentRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeploymentRequestCAS_FieldPathArrayItemValue
}

type UpdateDeploymentRequestCAS_FieldPathSelector int32

const (
	UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState UpdateDeploymentRequestCAS_FieldPathSelector = 0
	UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask        UpdateDeploymentRequestCAS_FieldPathSelector = 1
)

func (s UpdateDeploymentRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", s))
	}
}

func BuildUpdateDeploymentRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeploymentRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeploymentRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateDeploymentRequestCAS_FieldTerminalPath{selector: UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateDeploymentRequestCAS_FieldTerminalPath{selector: UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := deployment.BuildDeployment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeploymentRequestCAS_FieldSubPath{selector: UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeploymentRequest_CAS", fp)
}

func ParseUpdateDeploymentRequestCAS_FieldPath(rawField string) (UpdateDeploymentRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeploymentRequestCAS_FieldPath(fp)
}

func MustParseUpdateDeploymentRequestCAS_FieldPath(rawField string) UpdateDeploymentRequestCAS_FieldPath {
	fp, err := ParseUpdateDeploymentRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeploymentRequestCAS_FieldTerminalPath struct {
	selector UpdateDeploymentRequestCAS_FieldPathSelector
}

var _ UpdateDeploymentRequestCAS_FieldPath = (*UpdateDeploymentRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) Selector() UpdateDeploymentRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeploymentRequest_CAS
func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) Get(source *UpdateDeploymentRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeploymentRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateDeploymentRequest_CAS
func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) GetSingle(source *UpdateDeploymentRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeploymentRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return (*deployment.Deployment)(nil)
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		return (*deployment.Deployment_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) ClearValue(item *UpdateDeploymentRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeploymentRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateDeploymentRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeploymentRequestCAS_FieldTerminalPathValue{UpdateDeploymentRequestCAS_FieldTerminalPath: *fp, value: value.(*deployment.Deployment)}
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeploymentRequestCAS_FieldTerminalPathValue{UpdateDeploymentRequestCAS_FieldTerminalPath: *fp, value: value.(*deployment.Deployment_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeploymentRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeploymentRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeploymentRequestCAS_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment)}
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeploymentRequestCAS_FieldTerminalPath: *fp, values: values.([]*deployment.Deployment_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeploymentRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeploymentRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeploymentRequestCAS_FieldSubPath struct {
	selector UpdateDeploymentRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeploymentRequestCAS_FieldPath = (*UpdateDeploymentRequestCAS_FieldSubPath)(nil)

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) Selector() UpdateDeploymentRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) AsConditionalStateSubPath() (deployment.Deployment_FieldPath, bool) {
	res, ok := fps.subPath.(deployment.Deployment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeploymentRequest_CAS
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) Get(source *UpdateDeploymentRequest_CAS) (values []interface{}) {
	if asDeploymentFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asDeploymentFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeploymentRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateDeploymentRequest_CAS
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) GetSingle(source *UpdateDeploymentRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeploymentRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) ClearValue(item *UpdateDeploymentRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeploymentRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeploymentRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateDeploymentRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateDeploymentRequestCAS_FieldPathValue {
	return &UpdateDeploymentRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeploymentRequestCAS_FieldPathArrayOfValues {
	return &UpdateDeploymentRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeploymentRequestCAS_FieldPathArrayItemValue {
	return &UpdateDeploymentRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeploymentRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeploymentRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateDeploymentRequestCAS_FieldPathValue interface {
	UpdateDeploymentRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeploymentRequest_CAS)
	CompareWith(*UpdateDeploymentRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateDeploymentRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateDeploymentRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateDeploymentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeploymentRequestCAS_FieldPathValue), nil
}

func MustParseUpdateDeploymentRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateDeploymentRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateDeploymentRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeploymentRequestCAS_FieldTerminalPathValue struct {
	UpdateDeploymentRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeploymentRequestCAS_FieldPathValue = (*UpdateDeploymentRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*deployment.Deployment, bool) {
	res, ok := fpv.value.(*deployment.Deployment)
	return res, ok
}
func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*deployment.Deployment_FieldMask, bool) {
	res, ok := fpv.value.(*deployment.Deployment_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateDeploymentRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeploymentRequest_CAS)
	}
	switch fpv.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*deployment.Deployment)
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*deployment.Deployment_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeploymentRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeploymentRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateDeploymentRequest_CAS'.
func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateDeploymentRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeploymentRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeploymentRequest_CAS))
}

type UpdateDeploymentRequestCAS_FieldSubPathValue struct {
	UpdateDeploymentRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeploymentRequestCAS_FieldPathValue = (*UpdateDeploymentRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateDeploymentRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (deployment.Deployment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(deployment.Deployment_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeploymentRequestCAS_FieldSubPathValue) SetTo(target **UpdateDeploymentRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeploymentRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(deployment.Deployment_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeploymentRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeploymentRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeploymentRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeploymentRequestCAS_FieldSubPathValue) CompareWith(source *UpdateDeploymentRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(deployment.Deployment_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeploymentRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeploymentRequest_CAS))
}

// UpdateDeploymentRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateDeploymentRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeploymentRequestCAS_FieldPath
	ContainsValue(*UpdateDeploymentRequest_CAS) bool
}

// ParseUpdateDeploymentRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeploymentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeploymentRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeploymentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeploymentRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeploymentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeploymentRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeploymentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeploymentRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateDeploymentRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeploymentRequestCAS_FieldPathArrayItemValue = (*UpdateDeploymentRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeploymentRequest_CAS as interface{}
func (fpaiv *UpdateDeploymentRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeploymentRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeploymentRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeploymentRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeploymentRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateDeploymentRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeploymentRequest_CAS) bool {
	slice := fpaiv.UpdateDeploymentRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeploymentRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateDeploymentRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeploymentRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeploymentRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (deployment.Deployment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateDeploymentRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeploymentRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(deployment.Deployment_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeploymentRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateDeploymentRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateDeploymentRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeploymentRequestCAS_FieldPath
}

func ParseUpdateDeploymentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeploymentRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeploymentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeploymentRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeploymentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeploymentRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeploymentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateDeploymentRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateDeploymentRequestCAS_FieldPathArrayOfValues = (*UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeploymentRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*deployment.Deployment) {
			values = append(values, v)
		}
	case UpdateDeploymentRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*deployment.Deployment_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*deployment.Deployment, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment)
	return res, ok
}
func (fpaov *UpdateDeploymentRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*deployment.Deployment_FieldMask, bool) {
	res, ok := fpaov.values.([]*deployment.Deployment_FieldMask)
	return res, ok
}

type UpdateDeploymentRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateDeploymentRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeploymentRequestCAS_FieldPathArrayOfValues = (*UpdateDeploymentRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeploymentRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeploymentRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (deployment.Deployment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(deployment.Deployment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteDeploymentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteDeploymentRequest_FieldPathSelector
	Get(source *DeleteDeploymentRequest) []interface{}
	GetSingle(source *DeleteDeploymentRequest) (interface{}, bool)
	ClearValue(item *DeleteDeploymentRequest)

	// Those methods build corresponding DeleteDeploymentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteDeploymentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteDeploymentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteDeploymentRequest_FieldPathArrayItemValue
}

type DeleteDeploymentRequest_FieldPathSelector int32

const (
	DeleteDeploymentRequest_FieldPathSelectorName DeleteDeploymentRequest_FieldPathSelector = 0
)

func (s DeleteDeploymentRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", s))
	}
}

func BuildDeleteDeploymentRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteDeploymentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteDeploymentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteDeploymentRequest_FieldTerminalPath{selector: DeleteDeploymentRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteDeploymentRequest", fp)
}

func ParseDeleteDeploymentRequest_FieldPath(rawField string) (DeleteDeploymentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteDeploymentRequest_FieldPath(fp)
}

func MustParseDeleteDeploymentRequest_FieldPath(rawField string) DeleteDeploymentRequest_FieldPath {
	fp, err := ParseDeleteDeploymentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteDeploymentRequest_FieldTerminalPath struct {
	selector DeleteDeploymentRequest_FieldPathSelector
}

var _ DeleteDeploymentRequest_FieldPath = (*DeleteDeploymentRequest_FieldTerminalPath)(nil)

func (fp *DeleteDeploymentRequest_FieldTerminalPath) Selector() DeleteDeploymentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteDeploymentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteDeploymentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteDeploymentRequest
func (fp *DeleteDeploymentRequest_FieldTerminalPath) Get(source *DeleteDeploymentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteDeploymentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteDeploymentRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteDeploymentRequest
func (fp *DeleteDeploymentRequest_FieldTerminalPath) GetSingle(source *DeleteDeploymentRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteDeploymentRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteDeploymentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		return (*deployment.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) ClearValue(item *DeleteDeploymentRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteDeploymentRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteDeploymentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteDeploymentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteDeploymentRequest_FieldPathSelectorName
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteDeploymentRequest_FieldPathValue {
	switch fp.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		return &DeleteDeploymentRequest_FieldTerminalPathValue{DeleteDeploymentRequest_FieldTerminalPath: *fp, value: value.(*deployment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteDeploymentRequest_FieldPathArrayOfValues {
	fpaov := &DeleteDeploymentRequest_FieldTerminalPathArrayOfValues{DeleteDeploymentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		return &DeleteDeploymentRequest_FieldTerminalPathArrayOfValues{DeleteDeploymentRequest_FieldTerminalPath: *fp, values: values.([]*deployment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteDeploymentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeploymentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteDeploymentRequest_FieldPathValue allows storing values for DeleteDeploymentRequest fields according to their type
type DeleteDeploymentRequest_FieldPathValue interface {
	DeleteDeploymentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteDeploymentRequest)
	CompareWith(*DeleteDeploymentRequest) (cmp int, comparable bool)
}

func ParseDeleteDeploymentRequest_FieldPathValue(pathStr, valueStr string) (DeleteDeploymentRequest_FieldPathValue, error) {
	fp, err := ParseDeleteDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeploymentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteDeploymentRequest_FieldPathValue), nil
}

func MustParseDeleteDeploymentRequest_FieldPathValue(pathStr, valueStr string) DeleteDeploymentRequest_FieldPathValue {
	fpv, err := ParseDeleteDeploymentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteDeploymentRequest_FieldTerminalPathValue struct {
	DeleteDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeploymentRequest_FieldPathValue = (*DeleteDeploymentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteDeploymentRequest' as interface{}
func (fpv *DeleteDeploymentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteDeploymentRequest_FieldTerminalPathValue) AsNameValue() (*deployment.Reference, bool) {
	res, ok := fpv.value.(*deployment.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteDeploymentRequest
func (fpv *DeleteDeploymentRequest_FieldTerminalPathValue) SetTo(target **DeleteDeploymentRequest) {
	if *target == nil {
		*target = new(DeleteDeploymentRequest)
	}
	switch fpv.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*deployment.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeploymentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteDeploymentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteDeploymentRequest_FieldTerminalPathValue' with the value under path in 'DeleteDeploymentRequest'.
func (fpv *DeleteDeploymentRequest_FieldTerminalPathValue) CompareWith(source *DeleteDeploymentRequest) (int, bool) {
	switch fpv.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*deployment.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeploymentRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeploymentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteDeploymentRequest))
}

// DeleteDeploymentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteDeploymentRequest according to their type
// Present only for array (repeated) types.
type DeleteDeploymentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteDeploymentRequest_FieldPath
	ContainsValue(*DeleteDeploymentRequest) bool
}

// ParseDeleteDeploymentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteDeploymentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeploymentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteDeploymentRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteDeploymentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteDeploymentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteDeploymentRequest_FieldTerminalPathArrayItemValue struct {
	DeleteDeploymentRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeploymentRequest_FieldPathArrayItemValue = (*DeleteDeploymentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteDeploymentRequest as interface{}
func (fpaiv *DeleteDeploymentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteDeploymentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteDeploymentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteDeploymentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteDeploymentRequest'
func (fpaiv *DeleteDeploymentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteDeploymentRequest) bool {
	slice := fpaiv.DeleteDeploymentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteDeploymentRequest_FieldPathArrayOfValues allows storing slice of values for DeleteDeploymentRequest fields according to their type
type DeleteDeploymentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteDeploymentRequest_FieldPath
}

func ParseDeleteDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteDeploymentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteDeploymentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeploymentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteDeploymentRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteDeploymentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteDeploymentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteDeploymentRequest_FieldTerminalPathArrayOfValues struct {
	DeleteDeploymentRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteDeploymentRequest_FieldPathArrayOfValues = (*DeleteDeploymentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteDeploymentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteDeploymentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*deployment.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteDeploymentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*deployment.Reference, bool) {
	res, ok := fpaov.values.([]*deployment.Reference)
	return res, ok
}
