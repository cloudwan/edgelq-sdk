// Code generated by protoc-gen-goten-client
// API: DeploymentService
// DO NOT EDIT!!!

package deployment_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	deployment "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/deployment"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &deployment.Deployment{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized        bool
	deploymentServiceDescriptor   *DeploymentServiceDescriptor
	getDeploymentDescriptor       *GetDeploymentDescriptor
	batchGetDeploymentsDescriptor *BatchGetDeploymentsDescriptor
	listDeploymentsDescriptor     *ListDeploymentsDescriptor
	watchDeploymentDescriptor     *WatchDeploymentDescriptor
	watchDeploymentsDescriptor    *WatchDeploymentsDescriptor
	createDeploymentDescriptor    *CreateDeploymentDescriptor
	updateDeploymentDescriptor    *UpdateDeploymentDescriptor
	deleteDeploymentDescriptor    *DeleteDeploymentDescriptor
)

type GetDeploymentDescriptor struct{}

type GetDeploymentDescriptorClientMsgHandle struct{}

type GetDeploymentDescriptorServerMsgHandle struct{}

func (d *GetDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeploymentRequest{}
}

func (d *GetDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &deployment.Deployment{}
}

func (d *GetDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeploymentDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetDeploymentDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetDeploymentDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetDeploymentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeploymentDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeploymentDescriptor) GetMethodName() string {
	return "GetDeployment"
}

func (d *GetDeploymentDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/GetDeployment"
}

func (d *GetDeploymentDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *GetDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *GetDeploymentDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *GetDeploymentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *GetDeploymentDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *GetDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeploymentDescriptorClientMsgHandle{}
}

func (d *GetDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeploymentDescriptorServerMsgHandle{}
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*deployment.Name)(nil)
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*deployment.Deployment) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*deployment.Deployment) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*deployment.Deployment) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetDeploymentDescriptor() *GetDeploymentDescriptor {
	return getDeploymentDescriptor
}

type BatchGetDeploymentsDescriptor struct{}

type BatchGetDeploymentsDescriptorClientMsgHandle struct{}

type BatchGetDeploymentsDescriptorServerMsgHandle struct{}

func (d *BatchGetDeploymentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeploymentsRequest{}
}

func (d *BatchGetDeploymentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeploymentsResponse{}
}

func (d *BatchGetDeploymentsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeploymentsDescriptor) GetMethodName() string {
	return "BatchGetDeployments"
}

func (d *BatchGetDeploymentsDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/BatchGetDeployments"
}

func (d *BatchGetDeploymentsDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *BatchGetDeploymentsDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *BatchGetDeploymentsDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *BatchGetDeploymentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetDeploymentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *BatchGetDeploymentsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *BatchGetDeploymentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeploymentsDescriptorClientMsgHandle{}
}

func (d *BatchGetDeploymentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeploymentsDescriptorServerMsgHandle{}
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetDeploymentsRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetDeploymentsRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(deployment.DeploymentNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (deployment.DeploymentNameList)(nil)
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetDeploymentsRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetDeploymentsResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetDeploymentsResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetDeployments()
	list := make(deployment.DeploymentNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetDeploymentsResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetDeploymentsDescriptor() *BatchGetDeploymentsDescriptor {
	return batchGetDeploymentsDescriptor
}

type ListDeploymentsDescriptor struct{}

type ListDeploymentsDescriptorClientMsgHandle struct{}

type ListDeploymentsDescriptorServerMsgHandle struct{}

func (d *ListDeploymentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeploymentsRequest{}
}

func (d *ListDeploymentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeploymentsResponse{}
}

func (d *ListDeploymentsDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeploymentsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeploymentsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeploymentsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListDeploymentsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListDeploymentsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListDeploymentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeploymentsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeploymentsDescriptor) GetMethodName() string {
	return "ListDeployments"
}

func (d *ListDeploymentsDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/ListDeployments"
}

func (d *ListDeploymentsDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *ListDeploymentsDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *ListDeploymentsDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *ListDeploymentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListDeploymentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *ListDeploymentsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *ListDeploymentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeploymentsDescriptorClientMsgHandle{}
}

func (d *ListDeploymentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeploymentsDescriptorServerMsgHandle{}
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListDeploymentsRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListDeploymentsRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListDeploymentsRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListDeploymentsResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListDeploymentsResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetDeployments()
	list := make(deployment.DeploymentNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListDeploymentsResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListDeploymentsDescriptor() *ListDeploymentsDescriptor {
	return listDeploymentsDescriptor
}

type WatchDeploymentDescriptor struct{}

type WatchDeploymentDescriptorClientMsgHandle struct{}

type WatchDeploymentDescriptorServerMsgHandle struct{}

func (d *WatchDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeploymentRequest{}
}

func (d *WatchDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeploymentResponse{}
}

func (d *WatchDeploymentDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeploymentDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeploymentDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchDeploymentDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchDeploymentDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchDeploymentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeploymentDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeploymentDescriptor) GetMethodName() string {
	return "WatchDeployment"
}

func (d *WatchDeploymentDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/WatchDeployment"
}

func (d *WatchDeploymentDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *WatchDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *WatchDeploymentDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *WatchDeploymentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *WatchDeploymentDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *WatchDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentDescriptorClientMsgHandle{}
}

func (d *WatchDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentDescriptorServerMsgHandle{}
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*deployment.Name)(nil)
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDeploymentResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *deployment.DeploymentChange_Added_:
			return tResChange.Added.GetDeployment().GetName()
		case *deployment.DeploymentChange_Modified_:
			return tResChange.Modified.GetName()
		case *deployment.DeploymentChange_Removed_:
			return tResChange.Removed.GetName()
		case *deployment.DeploymentChange_Current_:
			return tResChange.Current.GetDeployment().GetName()
		}
	}
	return (*deployment.Name)(nil)
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDeploymentResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDeploymentResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchDeploymentDescriptor() *WatchDeploymentDescriptor {
	return watchDeploymentDescriptor
}

type WatchDeploymentsDescriptor struct{}

type WatchDeploymentsDescriptorClientMsgHandle struct{}

type WatchDeploymentsDescriptorServerMsgHandle struct{}

func (d *WatchDeploymentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeploymentsRequest{}
}

func (d *WatchDeploymentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeploymentsResponse{}
}

func (d *WatchDeploymentsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeploymentsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeploymentsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeploymentsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeploymentsDescriptor) GetMethodName() string {
	return "WatchDeployments"
}

func (d *WatchDeploymentsDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/WatchDeployments"
}

func (d *WatchDeploymentsDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *WatchDeploymentsDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *WatchDeploymentsDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *WatchDeploymentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDeploymentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *WatchDeploymentsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *WatchDeploymentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentsDescriptorClientMsgHandle{}
}

func (d *WatchDeploymentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentsDescriptorServerMsgHandle{}
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDeploymentsRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDeploymentsRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDeploymentsRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*deployment.ParentName)(nil)
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDeploymentsResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDeploymentsResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetDeploymentChanges()
	list := make(deployment.DeploymentNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *deployment.DeploymentChange_Added_:
			list = append(list, tResChange.Added.GetDeployment().GetName())
		case *deployment.DeploymentChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *deployment.DeploymentChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *deployment.DeploymentChange_Current_:
			list = append(list, tResChange.Current.GetDeployment().GetName())
		}
	}
	return list
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDeploymentsResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchDeploymentsDescriptor() *WatchDeploymentsDescriptor {
	return watchDeploymentsDescriptor
}

type CreateDeploymentDescriptor struct{}

type CreateDeploymentDescriptorClientMsgHandle struct{}

type CreateDeploymentDescriptorServerMsgHandle struct{}

func (d *CreateDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeploymentRequest{}
}

func (d *CreateDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &deployment.Deployment{}
}

func (d *CreateDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeploymentDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateDeploymentDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateDeploymentDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateDeploymentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeploymentDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeploymentDescriptor) GetMethodName() string {
	return "CreateDeployment"
}

func (d *CreateDeploymentDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/CreateDeployment"
}

func (d *CreateDeploymentDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *CreateDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *CreateDeploymentDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *CreateDeploymentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *CreateDeploymentDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *CreateDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeploymentDescriptorClientMsgHandle{}
}

func (d *CreateDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeploymentDescriptorServerMsgHandle{}
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetDeployment().GetName()
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*deployment.ParentName)(nil)
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*deployment.Deployment) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*deployment.Deployment) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*deployment.Deployment) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateDeploymentDescriptor() *CreateDeploymentDescriptor {
	return createDeploymentDescriptor
}

type UpdateDeploymentDescriptor struct{}

type UpdateDeploymentDescriptorClientMsgHandle struct{}

type UpdateDeploymentDescriptorServerMsgHandle struct{}

func (d *UpdateDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeploymentRequest{}
}

func (d *UpdateDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &deployment.Deployment{}
}

func (d *UpdateDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateDeploymentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeploymentDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeploymentDescriptor) GetMethodName() string {
	return "UpdateDeployment"
}

func (d *UpdateDeploymentDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/UpdateDeployment"
}

func (d *UpdateDeploymentDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *UpdateDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *UpdateDeploymentDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *UpdateDeploymentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *UpdateDeploymentDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *UpdateDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeploymentDescriptorClientMsgHandle{}
}

func (d *UpdateDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeploymentDescriptorServerMsgHandle{}
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetDeployment().GetName()
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*deployment.Deployment) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*deployment.Deployment) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*deployment.Deployment) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateDeploymentDescriptor() *UpdateDeploymentDescriptor {
	return updateDeploymentDescriptor
}

type DeleteDeploymentDescriptor struct{}

type DeleteDeploymentDescriptorClientMsgHandle struct{}

type DeleteDeploymentDescriptorServerMsgHandle struct{}

func (d *DeleteDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeploymentRequest{}
}

func (d *DeleteDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteDeploymentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeploymentDescriptor) GetMethodName() string {
	return "DeleteDeployment"
}

func (d *DeleteDeploymentDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.DeploymentService/DeleteDeployment"
}

func (d *DeleteDeploymentDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *DeleteDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *DeleteDeploymentDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *DeleteDeploymentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *DeleteDeploymentDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *DeleteDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeploymentDescriptorClientMsgHandle{}
}

func (d *DeleteDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeploymentDescriptorServerMsgHandle{}
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*deployment.Name)(nil)
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *deployment.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteDeploymentDescriptor() *DeleteDeploymentDescriptor {
	return deleteDeploymentDescriptor
}

type DeploymentServiceDescriptor struct{}

func (d *DeploymentServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeploymentDescriptor,
		batchGetDeploymentsDescriptor,
		listDeploymentsDescriptor,
		watchDeploymentDescriptor,
		watchDeploymentsDescriptor,
		createDeploymentDescriptor,
		updateDeploymentDescriptor,
		deleteDeploymentDescriptor,
	}
}

func (d *DeploymentServiceDescriptor) GetFullAPIName() string {
	return "/ntt.meta.v1alpha2.DeploymentService"
}

func (d *DeploymentServiceDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *DeploymentServiceDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *DeploymentServiceDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *DeploymentServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetDeploymentServiceDescriptor() *DeploymentServiceDescriptor {
	return deploymentServiceDescriptor
}

func initDescriptors() {
	deploymentServiceDescriptor = &DeploymentServiceDescriptor{}
	getDeploymentDescriptor = &GetDeploymentDescriptor{}
	batchGetDeploymentsDescriptor = &BatchGetDeploymentsDescriptor{}
	listDeploymentsDescriptor = &ListDeploymentsDescriptor{}
	watchDeploymentDescriptor = &WatchDeploymentDescriptor{}
	watchDeploymentsDescriptor = &WatchDeploymentsDescriptor{}
	createDeploymentDescriptor = &CreateDeploymentDescriptor{}
	updateDeploymentDescriptor = &UpdateDeploymentDescriptor{}
	deleteDeploymentDescriptor = &DeleteDeploymentDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deploymentServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeploymentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeploymentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeploymentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeploymentDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
