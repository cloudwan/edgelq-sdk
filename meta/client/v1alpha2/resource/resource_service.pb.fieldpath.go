// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/resource_service.proto
// DO NOT EDIT!!!

package resource_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	resource "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/resource"
	service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &resource.Resource{}
	_ = &service.Service{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetResourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetResourceRequest_FieldPathSelector
	Get(source *GetResourceRequest) []interface{}
	GetSingle(source *GetResourceRequest) (interface{}, bool)
	ClearValue(item *GetResourceRequest)

	// Those methods build corresponding GetResourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetResourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetResourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetResourceRequest_FieldPathArrayItemValue
}

type GetResourceRequest_FieldPathSelector int32

const (
	GetResourceRequest_FieldPathSelectorName      GetResourceRequest_FieldPathSelector = 0
	GetResourceRequest_FieldPathSelectorFieldMask GetResourceRequest_FieldPathSelector = 1
	GetResourceRequest_FieldPathSelectorView      GetResourceRequest_FieldPathSelector = 2
)

func (s GetResourceRequest_FieldPathSelector) String() string {
	switch s {
	case GetResourceRequest_FieldPathSelectorName:
		return "name"
	case GetResourceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetResourceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", s))
	}
}

func BuildGetResourceRequest_FieldPath(fp gotenobject.RawFieldPath) (GetResourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetResourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetResourceRequest_FieldTerminalPath{selector: GetResourceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetResourceRequest_FieldTerminalPath{selector: GetResourceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetResourceRequest_FieldTerminalPath{selector: GetResourceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetResourceRequest", fp)
}

func ParseGetResourceRequest_FieldPath(rawField string) (GetResourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetResourceRequest_FieldPath(fp)
}

func MustParseGetResourceRequest_FieldPath(rawField string) GetResourceRequest_FieldPath {
	fp, err := ParseGetResourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetResourceRequest_FieldTerminalPath struct {
	selector GetResourceRequest_FieldPathSelector
}

var _ GetResourceRequest_FieldPath = (*GetResourceRequest_FieldTerminalPath)(nil)

func (fp *GetResourceRequest_FieldTerminalPath) Selector() GetResourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetResourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetResourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetResourceRequest
func (fp *GetResourceRequest_FieldTerminalPath) Get(source *GetResourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetResourceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetResourceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetResourceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetResourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetResourceRequest))
}

// GetSingle returns value pointed by specific field of from source GetResourceRequest
func (fp *GetResourceRequest_FieldTerminalPath) GetSingle(source *GetResourceRequest) (interface{}, bool) {
	switch fp.selector {
	case GetResourceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetResourceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetResourceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
	}
}

func (fp *GetResourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetResourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetResourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetResourceRequest_FieldPathSelectorName:
		return (*resource.Reference)(nil)
	case GetResourceRequest_FieldPathSelectorFieldMask:
		return (*resource.Resource_FieldMask)(nil)
	case GetResourceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
	}
}

func (fp *GetResourceRequest_FieldTerminalPath) ClearValue(item *GetResourceRequest) {
	if item != nil {
		switch fp.selector {
		case GetResourceRequest_FieldPathSelectorName:
			item.Name = nil
		case GetResourceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetResourceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
		}
	}
}

func (fp *GetResourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetResourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetResourceRequest_FieldPathSelectorName ||
		fp.selector == GetResourceRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetResourceRequest_FieldPathSelectorView
}

func (fp *GetResourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetResourceRequest_FieldTerminalPath) WithIValue(value interface{}) GetResourceRequest_FieldPathValue {
	switch fp.selector {
	case GetResourceRequest_FieldPathSelectorName:
		return &GetResourceRequest_FieldTerminalPathValue{GetResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Reference)}
	case GetResourceRequest_FieldPathSelectorFieldMask:
		return &GetResourceRequest_FieldTerminalPathValue{GetResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	case GetResourceRequest_FieldPathSelectorView:
		return &GetResourceRequest_FieldTerminalPathValue{GetResourceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
	}
}

func (fp *GetResourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetResourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetResourceRequest_FieldPathArrayOfValues {
	fpaov := &GetResourceRequest_FieldTerminalPathArrayOfValues{GetResourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetResourceRequest_FieldPathSelectorName:
		return &GetResourceRequest_FieldTerminalPathArrayOfValues{GetResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Reference)}
	case GetResourceRequest_FieldPathSelectorFieldMask:
		return &GetResourceRequest_FieldTerminalPathArrayOfValues{GetResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	case GetResourceRequest_FieldPathSelectorView:
		return &GetResourceRequest_FieldTerminalPathArrayOfValues{GetResourceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetResourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetResourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetResourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fp.selector))
	}
}

func (fp *GetResourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetResourceRequest_FieldPathValue allows storing values for GetResourceRequest fields according to their type
type GetResourceRequest_FieldPathValue interface {
	GetResourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetResourceRequest)
	CompareWith(*GetResourceRequest) (cmp int, comparable bool)
}

func ParseGetResourceRequest_FieldPathValue(pathStr, valueStr string) (GetResourceRequest_FieldPathValue, error) {
	fp, err := ParseGetResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetResourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetResourceRequest_FieldPathValue), nil
}

func MustParseGetResourceRequest_FieldPathValue(pathStr, valueStr string) GetResourceRequest_FieldPathValue {
	fpv, err := ParseGetResourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetResourceRequest_FieldTerminalPathValue struct {
	GetResourceRequest_FieldTerminalPath
	value interface{}
}

var _ GetResourceRequest_FieldPathValue = (*GetResourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetResourceRequest' as interface{}
func (fpv *GetResourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetResourceRequest_FieldTerminalPathValue) AsNameValue() (*resource.Reference, bool) {
	res, ok := fpv.value.(*resource.Reference)
	return res, ok
}
func (fpv *GetResourceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}
func (fpv *GetResourceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetResourceRequest
func (fpv *GetResourceRequest_FieldTerminalPathValue) SetTo(target **GetResourceRequest) {
	if *target == nil {
		*target = new(GetResourceRequest)
	}
	switch fpv.selector {
	case GetResourceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*resource.Reference)
	case GetResourceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*resource.Resource_FieldMask)
	case GetResourceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fpv.selector))
	}
}

func (fpv *GetResourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetResourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetResourceRequest_FieldTerminalPathValue' with the value under path in 'GetResourceRequest'.
func (fpv *GetResourceRequest_FieldTerminalPathValue) CompareWith(source *GetResourceRequest) (int, bool) {
	switch fpv.selector {
	case GetResourceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*resource.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetResourceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetResourceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetResourceRequest: %d", fpv.selector))
	}
}

func (fpv *GetResourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetResourceRequest))
}

// GetResourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetResourceRequest according to their type
// Present only for array (repeated) types.
type GetResourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetResourceRequest_FieldPath
	ContainsValue(*GetResourceRequest) bool
}

// ParseGetResourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetResourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetResourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetResourceRequest_FieldPathArrayItemValue), nil
}

func MustParseGetResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetResourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetResourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetResourceRequest_FieldTerminalPathArrayItemValue struct {
	GetResourceRequest_FieldTerminalPath
	value interface{}
}

var _ GetResourceRequest_FieldPathArrayItemValue = (*GetResourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetResourceRequest as interface{}
func (fpaiv *GetResourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetResourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetResourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetResourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetResourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetResourceRequest'
func (fpaiv *GetResourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetResourceRequest) bool {
	slice := fpaiv.GetResourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetResourceRequest_FieldPathArrayOfValues allows storing slice of values for GetResourceRequest fields according to their type
type GetResourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetResourceRequest_FieldPath
}

func ParseGetResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetResourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetResourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetResourceRequest_FieldPathArrayOfValues), nil
}

func MustParseGetResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetResourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetResourceRequest_FieldTerminalPathArrayOfValues struct {
	GetResourceRequest_FieldTerminalPath
	values interface{}
}

var _ GetResourceRequest_FieldPathArrayOfValues = (*GetResourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetResourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetResourceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*resource.Reference) {
			values = append(values, v)
		}
	case GetResourceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	case GetResourceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetResourceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*resource.Reference, bool) {
	res, ok := fpaov.values.([]*resource.Reference)
	return res, ok
}
func (fpaov *GetResourceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}
func (fpaov *GetResourceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetResourcesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetResourcesRequest_FieldPathSelector
	Get(source *BatchGetResourcesRequest) []interface{}
	GetSingle(source *BatchGetResourcesRequest) (interface{}, bool)
	ClearValue(item *BatchGetResourcesRequest)

	// Those methods build corresponding BatchGetResourcesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetResourcesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetResourcesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetResourcesRequest_FieldPathArrayItemValue
}

type BatchGetResourcesRequest_FieldPathSelector int32

const (
	BatchGetResourcesRequest_FieldPathSelectorNames     BatchGetResourcesRequest_FieldPathSelector = 0
	BatchGetResourcesRequest_FieldPathSelectorFieldMask BatchGetResourcesRequest_FieldPathSelector = 1
	BatchGetResourcesRequest_FieldPathSelectorView      BatchGetResourcesRequest_FieldPathSelector = 2
)

func (s BatchGetResourcesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetResourcesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", s))
	}
}

func BuildBatchGetResourcesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetResourcesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetResourcesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetResourcesRequest", fp)
}

func ParseBatchGetResourcesRequest_FieldPath(rawField string) (BatchGetResourcesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetResourcesRequest_FieldPath(fp)
}

func MustParseBatchGetResourcesRequest_FieldPath(rawField string) BatchGetResourcesRequest_FieldPath {
	fp, err := ParseBatchGetResourcesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetResourcesRequest_FieldTerminalPath struct {
	selector BatchGetResourcesRequest_FieldPathSelector
}

var _ BatchGetResourcesRequest_FieldPath = (*BatchGetResourcesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetResourcesRequest_FieldTerminalPath) Selector() BatchGetResourcesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetResourcesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetResourcesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetResourcesRequest
func (fp *BatchGetResourcesRequest_FieldTerminalPath) Get(source *BatchGetResourcesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetResourcesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetResourcesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetResourcesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetResourcesRequest
func (fp *BatchGetResourcesRequest_FieldTerminalPath) GetSingle(source *BatchGetResourcesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetResourcesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetResourcesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetResourcesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		return ([]*resource.Reference)(nil)
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		return (*resource.Resource_FieldMask)(nil)
	case BatchGetResourcesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) ClearValue(item *BatchGetResourcesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetResourcesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetResourcesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetResourcesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetResourcesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetResourcesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetResourcesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetResourcesRequest_FieldPathSelectorView
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetResourcesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		return &BatchGetResourcesRequest_FieldTerminalPathValue{BatchGetResourcesRequest_FieldTerminalPath: *fp, value: value.([]*resource.Reference)}
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		return &BatchGetResourcesRequest_FieldTerminalPathValue{BatchGetResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	case BatchGetResourcesRequest_FieldPathSelectorView:
		return &BatchGetResourcesRequest_FieldTerminalPathValue{BatchGetResourcesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetResourcesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetResourcesRequest_FieldTerminalPathArrayOfValues{BatchGetResourcesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		return &BatchGetResourcesRequest_FieldTerminalPathArrayOfValues{BatchGetResourcesRequest_FieldTerminalPath: *fp, values: values.([][]*resource.Reference)}
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		return &BatchGetResourcesRequest_FieldTerminalPathArrayOfValues{BatchGetResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	case BatchGetResourcesRequest_FieldPathSelectorView:
		return &BatchGetResourcesRequest_FieldTerminalPathArrayOfValues{BatchGetResourcesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetResourcesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		return &BatchGetResourcesRequest_FieldTerminalPathArrayItemValue{BatchGetResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetResourcesRequest_FieldPathValue allows storing values for BatchGetResourcesRequest fields according to their type
type BatchGetResourcesRequest_FieldPathValue interface {
	BatchGetResourcesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetResourcesRequest)
	CompareWith(*BatchGetResourcesRequest) (cmp int, comparable bool)
}

func ParseBatchGetResourcesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetResourcesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetResourcesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetResourcesRequest_FieldPathValue), nil
}

func MustParseBatchGetResourcesRequest_FieldPathValue(pathStr, valueStr string) BatchGetResourcesRequest_FieldPathValue {
	fpv, err := ParseBatchGetResourcesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetResourcesRequest_FieldTerminalPathValue struct {
	BatchGetResourcesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetResourcesRequest_FieldPathValue = (*BatchGetResourcesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetResourcesRequest' as interface{}
func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) AsNamesValue() ([]*resource.Reference, bool) {
	res, ok := fpv.value.([]*resource.Reference)
	return res, ok
}
func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}
func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetResourcesRequest
func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) SetTo(target **BatchGetResourcesRequest) {
	if *target == nil {
		*target = new(BatchGetResourcesRequest)
	}
	switch fpv.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*resource.Reference)
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*resource.Resource_FieldMask)
	case BatchGetResourcesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetResourcesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetResourcesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetResourcesRequest'.
func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetResourcesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetResourcesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetResourcesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetResourcesRequest))
}

// BatchGetResourcesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetResourcesRequest according to their type
// Present only for array (repeated) types.
type BatchGetResourcesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetResourcesRequest_FieldPath
	ContainsValue(*BatchGetResourcesRequest) bool
}

// ParseBatchGetResourcesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetResourcesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetResourcesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetResourcesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetResourcesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetResourcesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetResourcesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetResourcesRequest_FieldPathArrayItemValue = (*BatchGetResourcesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetResourcesRequest as interface{}
func (fpaiv *BatchGetResourcesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetResourcesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*resource.Reference, bool) {
	res, ok := fpaiv.value.(*resource.Reference)
	return res, ok
}

func (fpaiv *BatchGetResourcesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetResourcesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetResourcesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetResourcesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetResourcesRequest'
func (fpaiv *BatchGetResourcesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetResourcesRequest) bool {
	slice := fpaiv.BatchGetResourcesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetResourcesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetResourcesRequest fields according to their type
type BatchGetResourcesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetResourcesRequest_FieldPath
}

func ParseBatchGetResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetResourcesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetResourcesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetResourcesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetResourcesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetResourcesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetResourcesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetResourcesRequest_FieldPathArrayOfValues = (*BatchGetResourcesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetResourcesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetResourcesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*resource.Reference) {
			values = append(values, v)
		}
	case BatchGetResourcesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	case BatchGetResourcesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetResourcesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*resource.Reference, bool) {
	res, ok := fpaov.values.([][]*resource.Reference)
	return res, ok
}
func (fpaov *BatchGetResourcesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}
func (fpaov *BatchGetResourcesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetResourcesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetResourcesResponse_FieldPathSelector
	Get(source *BatchGetResourcesResponse) []interface{}
	GetSingle(source *BatchGetResourcesResponse) (interface{}, bool)
	ClearValue(item *BatchGetResourcesResponse)

	// Those methods build corresponding BatchGetResourcesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetResourcesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetResourcesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetResourcesResponse_FieldPathArrayItemValue
}

type BatchGetResourcesResponse_FieldPathSelector int32

const (
	BatchGetResourcesResponse_FieldPathSelectorResources BatchGetResourcesResponse_FieldPathSelector = 0
	BatchGetResourcesResponse_FieldPathSelectorMissing   BatchGetResourcesResponse_FieldPathSelector = 1
)

func (s BatchGetResourcesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return "resources"
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", s))
	}
}

func BuildBatchGetResourcesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetResourcesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetResourcesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resources":
			return &BatchGetResourcesResponse_FieldTerminalPath{selector: BatchGetResourcesResponse_FieldPathSelectorResources}, nil
		case "missing":
			return &BatchGetResourcesResponse_FieldTerminalPath{selector: BatchGetResourcesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "resources":
			if subpath, err := resource.BuildResource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetResourcesResponse_FieldSubPath{selector: BatchGetResourcesResponse_FieldPathSelectorResources, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetResourcesResponse", fp)
}

func ParseBatchGetResourcesResponse_FieldPath(rawField string) (BatchGetResourcesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetResourcesResponse_FieldPath(fp)
}

func MustParseBatchGetResourcesResponse_FieldPath(rawField string) BatchGetResourcesResponse_FieldPath {
	fp, err := ParseBatchGetResourcesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetResourcesResponse_FieldTerminalPath struct {
	selector BatchGetResourcesResponse_FieldPathSelector
}

var _ BatchGetResourcesResponse_FieldPath = (*BatchGetResourcesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetResourcesResponse_FieldTerminalPath) Selector() BatchGetResourcesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetResourcesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetResourcesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetResourcesResponse
func (fp *BatchGetResourcesResponse_FieldTerminalPath) Get(source *BatchGetResourcesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetResourcesResponse_FieldPathSelectorResources:
			for _, value := range source.GetResources() {
				values = append(values, value)
			}
		case BatchGetResourcesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetResourcesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetResourcesResponse
func (fp *BatchGetResourcesResponse_FieldTerminalPath) GetSingle(source *BatchGetResourcesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		res := source.GetResources()
		return res, res != nil
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetResourcesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetResourcesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return ([]*resource.Resource)(nil)
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		return ([]*resource.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) ClearValue(item *BatchGetResourcesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetResourcesResponse_FieldPathSelectorResources:
			item.Resources = nil
		case BatchGetResourcesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetResourcesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetResourcesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetResourcesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetResourcesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return &BatchGetResourcesResponse_FieldTerminalPathValue{BatchGetResourcesResponse_FieldTerminalPath: *fp, value: value.([]*resource.Resource)}
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		return &BatchGetResourcesResponse_FieldTerminalPathValue{BatchGetResourcesResponse_FieldTerminalPath: *fp, value: value.([]*resource.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetResourcesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetResourcesResponse_FieldTerminalPathArrayOfValues{BatchGetResourcesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return &BatchGetResourcesResponse_FieldTerminalPathArrayOfValues{BatchGetResourcesResponse_FieldTerminalPath: *fp, values: values.([][]*resource.Resource)}
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		return &BatchGetResourcesResponse_FieldTerminalPathArrayOfValues{BatchGetResourcesResponse_FieldTerminalPath: *fp, values: values.([][]*resource.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetResourcesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return &BatchGetResourcesResponse_FieldTerminalPathArrayItemValue{BatchGetResourcesResponse_FieldTerminalPath: *fp, value: value.(*resource.Resource)}
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		return &BatchGetResourcesResponse_FieldTerminalPathArrayItemValue{BatchGetResourcesResponse_FieldTerminalPath: *fp, value: value.(*resource.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetResourcesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetResourcesResponse_FieldSubPath struct {
	selector BatchGetResourcesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetResourcesResponse_FieldPath = (*BatchGetResourcesResponse_FieldSubPath)(nil)

func (fps *BatchGetResourcesResponse_FieldSubPath) Selector() BatchGetResourcesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetResourcesResponse_FieldSubPath) AsResourcesSubPath() (resource.Resource_FieldPath, bool) {
	res, ok := fps.subPath.(resource.Resource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetResourcesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetResourcesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetResourcesResponse
func (fps *BatchGetResourcesResponse_FieldSubPath) Get(source *BatchGetResourcesResponse) (values []interface{}) {
	if asResourceFieldPath, ok := fps.AsResourcesSubPath(); ok {
		for _, item := range source.GetResources() {
			values = append(values, asResourceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetResourcesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetResourcesResponse))
}

// GetSingle returns value of selected field from source BatchGetResourcesResponse
func (fps *BatchGetResourcesResponse_FieldSubPath) GetSingle(source *BatchGetResourcesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		if len(source.GetResources()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResources()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetResourcesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetResourcesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetResourcesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetResourcesResponse_FieldSubPath) ClearValue(item *BatchGetResourcesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetResourcesResponse_FieldPathSelectorResources:
			for _, subItem := range item.Resources {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetResourcesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetResourcesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetResourcesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetResourcesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetResourcesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetResourcesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetResourcesResponse_FieldPathValue {
	return &BatchGetResourcesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetResourcesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetResourcesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetResourcesResponse_FieldPathArrayOfValues {
	return &BatchGetResourcesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetResourcesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetResourcesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetResourcesResponse_FieldPathArrayItemValue {
	return &BatchGetResourcesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetResourcesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetResourcesResponse_FieldPathValue allows storing values for BatchGetResourcesResponse fields according to their type
type BatchGetResourcesResponse_FieldPathValue interface {
	BatchGetResourcesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetResourcesResponse)
	CompareWith(*BatchGetResourcesResponse) (cmp int, comparable bool)
}

func ParseBatchGetResourcesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetResourcesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetResourcesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetResourcesResponse_FieldPathValue), nil
}

func MustParseBatchGetResourcesResponse_FieldPathValue(pathStr, valueStr string) BatchGetResourcesResponse_FieldPathValue {
	fpv, err := ParseBatchGetResourcesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetResourcesResponse_FieldTerminalPathValue struct {
	BatchGetResourcesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetResourcesResponse_FieldPathValue = (*BatchGetResourcesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetResourcesResponse' as interface{}
func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) AsResourcesValue() ([]*resource.Resource, bool) {
	res, ok := fpv.value.([]*resource.Resource)
	return res, ok
}
func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) AsMissingValue() ([]*resource.Reference, bool) {
	res, ok := fpv.value.([]*resource.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetResourcesResponse
func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) SetTo(target **BatchGetResourcesResponse) {
	if *target == nil {
		*target = new(BatchGetResourcesResponse)
	}
	switch fpv.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		(*target).Resources = fpv.value.([]*resource.Resource)
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*resource.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetResourcesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetResourcesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetResourcesResponse'.
func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetResourcesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return 0, false
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetResourcesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetResourcesResponse))
}

type BatchGetResourcesResponse_FieldSubPathValue struct {
	BatchGetResourcesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetResourcesResponse_FieldPathValue = (*BatchGetResourcesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetResourcesResponse_FieldSubPathValue) AsResourcesPathValue() (resource.Resource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource.Resource_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetResourcesResponse_FieldSubPathValue) SetTo(target **BatchGetResourcesResponse) {
	if *target == nil {
		*target = new(BatchGetResourcesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetResourcesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetResourcesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetResourcesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetResourcesResponse_FieldSubPathValue) CompareWith(source *BatchGetResourcesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetResourcesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetResourcesResponse))
}

// BatchGetResourcesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetResourcesResponse according to their type
// Present only for array (repeated) types.
type BatchGetResourcesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetResourcesResponse_FieldPath
	ContainsValue(*BatchGetResourcesResponse) bool
}

// ParseBatchGetResourcesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetResourcesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetResourcesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetResourcesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetResourcesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetResourcesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetResourcesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetResourcesResponse_FieldPathArrayItemValue = (*BatchGetResourcesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetResourcesResponse as interface{}
func (fpaiv *BatchGetResourcesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetResourcesResponse_FieldTerminalPathArrayItemValue) AsResourcesItemValue() (*resource.Resource, bool) {
	res, ok := fpaiv.value.(*resource.Resource)
	return res, ok
}
func (fpaiv *BatchGetResourcesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*resource.Reference, bool) {
	res, ok := fpaiv.value.(*resource.Reference)
	return res, ok
}

func (fpaiv *BatchGetResourcesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetResourcesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetResourcesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetResourcesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetResourcesResponse'
func (fpaiv *BatchGetResourcesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetResourcesResponse) bool {
	slice := fpaiv.BatchGetResourcesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetResourcesResponse_FieldSubPathArrayItemValue struct {
	BatchGetResourcesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetResourcesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetResourcesResponse_FieldSubPathArrayItemValue) AsResourcesPathItemValue() (resource.Resource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetResourcesResponse'
func (fpaivs *BatchGetResourcesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetResourcesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetResourcesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetResourcesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetResourcesResponse fields according to their type
type BatchGetResourcesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetResourcesResponse_FieldPath
}

func ParseBatchGetResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetResourcesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetResourcesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetResourcesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetResourcesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetResourcesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetResourcesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetResourcesResponse_FieldPathArrayOfValues = (*BatchGetResourcesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetResourcesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetResourcesResponse_FieldPathSelectorResources:
		for _, v := range fpaov.values.([][]*resource.Resource) {
			values = append(values, v)
		}
	case BatchGetResourcesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*resource.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetResourcesResponse_FieldTerminalPathArrayOfValues) AsResourcesArrayOfValues() ([][]*resource.Resource, bool) {
	res, ok := fpaov.values.([][]*resource.Resource)
	return res, ok
}
func (fpaov *BatchGetResourcesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*resource.Reference, bool) {
	res, ok := fpaov.values.([][]*resource.Reference)
	return res, ok
}

type BatchGetResourcesResponse_FieldSubPathArrayOfValues struct {
	BatchGetResourcesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetResourcesResponse_FieldPathArrayOfValues = (*BatchGetResourcesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetResourcesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetResourcesResponse_FieldSubPathArrayOfValues) AsResourcesPathArrayOfValues() (resource.Resource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource.Resource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListResourcesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListResourcesRequest_FieldPathSelector
	Get(source *ListResourcesRequest) []interface{}
	GetSingle(source *ListResourcesRequest) (interface{}, bool)
	ClearValue(item *ListResourcesRequest)

	// Those methods build corresponding ListResourcesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListResourcesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListResourcesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListResourcesRequest_FieldPathArrayItemValue
}

type ListResourcesRequest_FieldPathSelector int32

const (
	ListResourcesRequest_FieldPathSelectorParent    ListResourcesRequest_FieldPathSelector = 0
	ListResourcesRequest_FieldPathSelectorPageSize  ListResourcesRequest_FieldPathSelector = 1
	ListResourcesRequest_FieldPathSelectorPageToken ListResourcesRequest_FieldPathSelector = 2
	ListResourcesRequest_FieldPathSelectorOrderBy   ListResourcesRequest_FieldPathSelector = 3
	ListResourcesRequest_FieldPathSelectorFilter    ListResourcesRequest_FieldPathSelector = 4
	ListResourcesRequest_FieldPathSelectorFieldMask ListResourcesRequest_FieldPathSelector = 5
	ListResourcesRequest_FieldPathSelectorView      ListResourcesRequest_FieldPathSelector = 6
)

func (s ListResourcesRequest_FieldPathSelector) String() string {
	switch s {
	case ListResourcesRequest_FieldPathSelectorParent:
		return "parent"
	case ListResourcesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListResourcesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListResourcesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListResourcesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", s))
	}
}

func BuildListResourcesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListResourcesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListResourcesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListResourcesRequest", fp)
}

func ParseListResourcesRequest_FieldPath(rawField string) (ListResourcesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListResourcesRequest_FieldPath(fp)
}

func MustParseListResourcesRequest_FieldPath(rawField string) ListResourcesRequest_FieldPath {
	fp, err := ParseListResourcesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListResourcesRequest_FieldTerminalPath struct {
	selector ListResourcesRequest_FieldPathSelector
}

var _ ListResourcesRequest_FieldPath = (*ListResourcesRequest_FieldTerminalPath)(nil)

func (fp *ListResourcesRequest_FieldTerminalPath) Selector() ListResourcesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListResourcesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListResourcesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListResourcesRequest
func (fp *ListResourcesRequest_FieldTerminalPath) Get(source *ListResourcesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListResourcesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListResourcesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListResourcesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListResourcesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListResourcesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListResourcesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListResourcesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListResourcesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListResourcesRequest))
}

// GetSingle returns value pointed by specific field of from source ListResourcesRequest
func (fp *ListResourcesRequest_FieldTerminalPath) GetSingle(source *ListResourcesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListResourcesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListResourcesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListResourcesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListResourcesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
	}
}

func (fp *ListResourcesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListResourcesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListResourcesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		return (*resource.ParentName)(nil)
	case ListResourcesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListResourcesRequest_FieldPathSelectorPageToken:
		return (*resource.PagerCursor)(nil)
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		return (*resource.OrderBy)(nil)
	case ListResourcesRequest_FieldPathSelectorFilter:
		return (*resource.Filter)(nil)
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		return (*resource.Resource_FieldMask)(nil)
	case ListResourcesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
	}
}

func (fp *ListResourcesRequest_FieldTerminalPath) ClearValue(item *ListResourcesRequest) {
	if item != nil {
		switch fp.selector {
		case ListResourcesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListResourcesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListResourcesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListResourcesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListResourcesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListResourcesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListResourcesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListResourcesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListResourcesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListResourcesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListResourcesRequest_FieldPathSelectorParent ||
		fp.selector == ListResourcesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListResourcesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListResourcesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListResourcesRequest_FieldPathSelectorFilter ||
		fp.selector == ListResourcesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListResourcesRequest_FieldPathSelectorView
}

func (fp *ListResourcesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListResourcesRequest_FieldTerminalPath) WithIValue(value interface{}) ListResourcesRequest_FieldPathValue {
	switch fp.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.ParentName)}
	case ListResourcesRequest_FieldPathSelectorPageSize:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListResourcesRequest_FieldPathSelectorPageToken:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.PagerCursor)}
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.OrderBy)}
	case ListResourcesRequest_FieldPathSelectorFilter:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.Filter)}
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	case ListResourcesRequest_FieldPathSelectorView:
		return &ListResourcesRequest_FieldTerminalPathValue{ListResourcesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
	}
}

func (fp *ListResourcesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListResourcesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListResourcesRequest_FieldPathArrayOfValues {
	fpaov := &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.ParentName)}
	case ListResourcesRequest_FieldPathSelectorPageSize:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListResourcesRequest_FieldPathSelectorPageToken:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.PagerCursor)}
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.OrderBy)}
	case ListResourcesRequest_FieldPathSelectorFilter:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.Filter)}
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	case ListResourcesRequest_FieldPathSelectorView:
		return &ListResourcesRequest_FieldTerminalPathArrayOfValues{ListResourcesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListResourcesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListResourcesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListResourcesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fp.selector))
	}
}

func (fp *ListResourcesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListResourcesRequest_FieldPathValue allows storing values for ListResourcesRequest fields according to their type
type ListResourcesRequest_FieldPathValue interface {
	ListResourcesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListResourcesRequest)
	CompareWith(*ListResourcesRequest) (cmp int, comparable bool)
}

func ParseListResourcesRequest_FieldPathValue(pathStr, valueStr string) (ListResourcesRequest_FieldPathValue, error) {
	fp, err := ParseListResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourcesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListResourcesRequest_FieldPathValue), nil
}

func MustParseListResourcesRequest_FieldPathValue(pathStr, valueStr string) ListResourcesRequest_FieldPathValue {
	fpv, err := ParseListResourcesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListResourcesRequest_FieldTerminalPathValue struct {
	ListResourcesRequest_FieldTerminalPath
	value interface{}
}

var _ ListResourcesRequest_FieldPathValue = (*ListResourcesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListResourcesRequest' as interface{}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsParentValue() (*resource.ParentName, bool) {
	res, ok := fpv.value.(*resource.ParentName)
	return res, ok
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsPageTokenValue() (*resource.PagerCursor, bool) {
	res, ok := fpv.value.(*resource.PagerCursor)
	return res, ok
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsOrderByValue() (*resource.OrderBy, bool) {
	res, ok := fpv.value.(*resource.OrderBy)
	return res, ok
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsFilterValue() (*resource.Filter, bool) {
	res, ok := fpv.value.(*resource.Filter)
	return res, ok
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}
func (fpv *ListResourcesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListResourcesRequest
func (fpv *ListResourcesRequest_FieldTerminalPathValue) SetTo(target **ListResourcesRequest) {
	if *target == nil {
		*target = new(ListResourcesRequest)
	}
	switch fpv.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*resource.ParentName)
	case ListResourcesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListResourcesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*resource.PagerCursor)
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*resource.OrderBy)
	case ListResourcesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*resource.Filter)
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*resource.Resource_FieldMask)
	case ListResourcesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fpv.selector))
	}
}

func (fpv *ListResourcesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourcesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListResourcesRequest_FieldTerminalPathValue' with the value under path in 'ListResourcesRequest'.
func (fpv *ListResourcesRequest_FieldTerminalPathValue) CompareWith(source *ListResourcesRequest) (int, bool) {
	switch fpv.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*resource.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListResourcesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListResourcesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListResourcesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListResourcesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesRequest: %d", fpv.selector))
	}
}

func (fpv *ListResourcesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListResourcesRequest))
}

// ListResourcesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListResourcesRequest according to their type
// Present only for array (repeated) types.
type ListResourcesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListResourcesRequest_FieldPath
	ContainsValue(*ListResourcesRequest) bool
}

// ParseListResourcesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListResourcesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourcesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListResourcesRequest_FieldPathArrayItemValue), nil
}

func MustParseListResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListResourcesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListResourcesRequest_FieldTerminalPathArrayItemValue struct {
	ListResourcesRequest_FieldTerminalPath
	value interface{}
}

var _ ListResourcesRequest_FieldPathArrayItemValue = (*ListResourcesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListResourcesRequest as interface{}
func (fpaiv *ListResourcesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListResourcesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListResourcesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListResourcesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListResourcesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourcesRequest'
func (fpaiv *ListResourcesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListResourcesRequest) bool {
	slice := fpaiv.ListResourcesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListResourcesRequest_FieldPathArrayOfValues allows storing slice of values for ListResourcesRequest fields according to their type
type ListResourcesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListResourcesRequest_FieldPath
}

func ParseListResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListResourcesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourcesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListResourcesRequest_FieldPathArrayOfValues), nil
}

func MustParseListResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListResourcesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListResourcesRequest_FieldTerminalPathArrayOfValues struct {
	ListResourcesRequest_FieldTerminalPath
	values interface{}
}

var _ ListResourcesRequest_FieldPathArrayOfValues = (*ListResourcesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListResourcesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*resource.ParentName) {
			values = append(values, v)
		}
	case ListResourcesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListResourcesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*resource.PagerCursor) {
			values = append(values, v)
		}
	case ListResourcesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*resource.OrderBy) {
			values = append(values, v)
		}
	case ListResourcesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*resource.Filter) {
			values = append(values, v)
		}
	case ListResourcesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	case ListResourcesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*resource.ParentName, bool) {
	res, ok := fpaov.values.([]*resource.ParentName)
	return res, ok
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*resource.PagerCursor, bool) {
	res, ok := fpaov.values.([]*resource.PagerCursor)
	return res, ok
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*resource.OrderBy, bool) {
	res, ok := fpaov.values.([]*resource.OrderBy)
	return res, ok
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*resource.Filter, bool) {
	res, ok := fpaov.values.([]*resource.Filter)
	return res, ok
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}
func (fpaov *ListResourcesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListResourcesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListResourcesResponse_FieldPathSelector
	Get(source *ListResourcesResponse) []interface{}
	GetSingle(source *ListResourcesResponse) (interface{}, bool)
	ClearValue(item *ListResourcesResponse)

	// Those methods build corresponding ListResourcesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListResourcesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListResourcesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListResourcesResponse_FieldPathArrayItemValue
}

type ListResourcesResponse_FieldPathSelector int32

const (
	ListResourcesResponse_FieldPathSelectorResources     ListResourcesResponse_FieldPathSelector = 0
	ListResourcesResponse_FieldPathSelectorPrevPageToken ListResourcesResponse_FieldPathSelector = 1
	ListResourcesResponse_FieldPathSelectorNextPageToken ListResourcesResponse_FieldPathSelector = 2
)

func (s ListResourcesResponse_FieldPathSelector) String() string {
	switch s {
	case ListResourcesResponse_FieldPathSelectorResources:
		return "resources"
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", s))
	}
}

func BuildListResourcesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListResourcesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListResourcesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resources":
			return &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorResources}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "resources":
			if subpath, err := resource.BuildResource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListResourcesResponse_FieldSubPath{selector: ListResourcesResponse_FieldPathSelectorResources, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListResourcesResponse", fp)
}

func ParseListResourcesResponse_FieldPath(rawField string) (ListResourcesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListResourcesResponse_FieldPath(fp)
}

func MustParseListResourcesResponse_FieldPath(rawField string) ListResourcesResponse_FieldPath {
	fp, err := ParseListResourcesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListResourcesResponse_FieldTerminalPath struct {
	selector ListResourcesResponse_FieldPathSelector
}

var _ ListResourcesResponse_FieldPath = (*ListResourcesResponse_FieldTerminalPath)(nil)

func (fp *ListResourcesResponse_FieldTerminalPath) Selector() ListResourcesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListResourcesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListResourcesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListResourcesResponse
func (fp *ListResourcesResponse_FieldTerminalPath) Get(source *ListResourcesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListResourcesResponse_FieldPathSelectorResources:
			for _, value := range source.GetResources() {
				values = append(values, value)
			}
		case ListResourcesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListResourcesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListResourcesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListResourcesResponse))
}

// GetSingle returns value pointed by specific field of from source ListResourcesResponse
func (fp *ListResourcesResponse_FieldTerminalPath) GetSingle(source *ListResourcesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		res := source.GetResources()
		return res, res != nil
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
	}
}

func (fp *ListResourcesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListResourcesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListResourcesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		return ([]*resource.Resource)(nil)
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		return (*resource.PagerCursor)(nil)
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		return (*resource.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
	}
}

func (fp *ListResourcesResponse_FieldTerminalPath) ClearValue(item *ListResourcesResponse) {
	if item != nil {
		switch fp.selector {
		case ListResourcesResponse_FieldPathSelectorResources:
			item.Resources = nil
		case ListResourcesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListResourcesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListResourcesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListResourcesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListResourcesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListResourcesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListResourcesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListResourcesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListResourcesResponse_FieldTerminalPath) WithIValue(value interface{}) ListResourcesResponse_FieldPathValue {
	switch fp.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		return &ListResourcesResponse_FieldTerminalPathValue{ListResourcesResponse_FieldTerminalPath: *fp, value: value.([]*resource.Resource)}
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		return &ListResourcesResponse_FieldTerminalPathValue{ListResourcesResponse_FieldTerminalPath: *fp, value: value.(*resource.PagerCursor)}
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		return &ListResourcesResponse_FieldTerminalPathValue{ListResourcesResponse_FieldTerminalPath: *fp, value: value.(*resource.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
	}
}

func (fp *ListResourcesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListResourcesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListResourcesResponse_FieldPathArrayOfValues {
	fpaov := &ListResourcesResponse_FieldTerminalPathArrayOfValues{ListResourcesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		return &ListResourcesResponse_FieldTerminalPathArrayOfValues{ListResourcesResponse_FieldTerminalPath: *fp, values: values.([][]*resource.Resource)}
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		return &ListResourcesResponse_FieldTerminalPathArrayOfValues{ListResourcesResponse_FieldTerminalPath: *fp, values: values.([]*resource.PagerCursor)}
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		return &ListResourcesResponse_FieldTerminalPathArrayOfValues{ListResourcesResponse_FieldTerminalPath: *fp, values: values.([]*resource.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListResourcesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListResourcesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListResourcesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		return &ListResourcesResponse_FieldTerminalPathArrayItemValue{ListResourcesResponse_FieldTerminalPath: *fp, value: value.(*resource.Resource)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fp.selector))
	}
}

func (fp *ListResourcesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListResourcesResponse_FieldSubPath struct {
	selector ListResourcesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListResourcesResponse_FieldPath = (*ListResourcesResponse_FieldSubPath)(nil)

func (fps *ListResourcesResponse_FieldSubPath) Selector() ListResourcesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListResourcesResponse_FieldSubPath) AsResourcesSubPath() (resource.Resource_FieldPath, bool) {
	res, ok := fps.subPath.(resource.Resource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListResourcesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListResourcesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListResourcesResponse
func (fps *ListResourcesResponse_FieldSubPath) Get(source *ListResourcesResponse) (values []interface{}) {
	if asResourceFieldPath, ok := fps.AsResourcesSubPath(); ok {
		for _, item := range source.GetResources() {
			values = append(values, asResourceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListResourcesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListResourcesResponse))
}

// GetSingle returns value of selected field from source ListResourcesResponse
func (fps *ListResourcesResponse_FieldSubPath) GetSingle(source *ListResourcesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		if len(source.GetResources()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResources()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fps.selector))
	}
}

func (fps *ListResourcesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListResourcesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListResourcesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListResourcesResponse_FieldSubPath) ClearValue(item *ListResourcesResponse) {
	if item != nil {
		switch fps.selector {
		case ListResourcesResponse_FieldPathSelectorResources:
			for _, subItem := range item.Resources {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListResourcesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListResourcesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListResourcesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListResourcesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListResourcesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListResourcesResponse_FieldSubPath) WithIValue(value interface{}) ListResourcesResponse_FieldPathValue {
	return &ListResourcesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListResourcesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListResourcesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListResourcesResponse_FieldPathArrayOfValues {
	return &ListResourcesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListResourcesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListResourcesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListResourcesResponse_FieldPathArrayItemValue {
	return &ListResourcesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListResourcesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListResourcesResponse_FieldPathValue allows storing values for ListResourcesResponse fields according to their type
type ListResourcesResponse_FieldPathValue interface {
	ListResourcesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListResourcesResponse)
	CompareWith(*ListResourcesResponse) (cmp int, comparable bool)
}

func ParseListResourcesResponse_FieldPathValue(pathStr, valueStr string) (ListResourcesResponse_FieldPathValue, error) {
	fp, err := ParseListResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourcesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListResourcesResponse_FieldPathValue), nil
}

func MustParseListResourcesResponse_FieldPathValue(pathStr, valueStr string) ListResourcesResponse_FieldPathValue {
	fpv, err := ParseListResourcesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListResourcesResponse_FieldTerminalPathValue struct {
	ListResourcesResponse_FieldTerminalPath
	value interface{}
}

var _ ListResourcesResponse_FieldPathValue = (*ListResourcesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListResourcesResponse' as interface{}
func (fpv *ListResourcesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListResourcesResponse_FieldTerminalPathValue) AsResourcesValue() ([]*resource.Resource, bool) {
	res, ok := fpv.value.([]*resource.Resource)
	return res, ok
}
func (fpv *ListResourcesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*resource.PagerCursor, bool) {
	res, ok := fpv.value.(*resource.PagerCursor)
	return res, ok
}
func (fpv *ListResourcesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*resource.PagerCursor, bool) {
	res, ok := fpv.value.(*resource.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListResourcesResponse
func (fpv *ListResourcesResponse_FieldTerminalPathValue) SetTo(target **ListResourcesResponse) {
	if *target == nil {
		*target = new(ListResourcesResponse)
	}
	switch fpv.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		(*target).Resources = fpv.value.([]*resource.Resource)
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*resource.PagerCursor)
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*resource.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fpv.selector))
	}
}

func (fpv *ListResourcesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourcesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListResourcesResponse_FieldTerminalPathValue' with the value under path in 'ListResourcesResponse'.
func (fpv *ListResourcesResponse_FieldTerminalPathValue) CompareWith(source *ListResourcesResponse) (int, bool) {
	switch fpv.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		return 0, false
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fpv.selector))
	}
}

func (fpv *ListResourcesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListResourcesResponse))
}

type ListResourcesResponse_FieldSubPathValue struct {
	ListResourcesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListResourcesResponse_FieldPathValue = (*ListResourcesResponse_FieldSubPathValue)(nil)

func (fpvs *ListResourcesResponse_FieldSubPathValue) AsResourcesPathValue() (resource.Resource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource.Resource_FieldPathValue)
	return res, ok
}

func (fpvs *ListResourcesResponse_FieldSubPathValue) SetTo(target **ListResourcesResponse) {
	if *target == nil {
		*target = new(ListResourcesResponse)
	}
	switch fpvs.Selector() {
	case ListResourcesResponse_FieldPathSelectorResources:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListResourcesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourcesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListResourcesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListResourcesResponse_FieldSubPathValue) CompareWith(source *ListResourcesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListResourcesResponse_FieldPathSelectorResources:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListResourcesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListResourcesResponse))
}

// ListResourcesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListResourcesResponse according to their type
// Present only for array (repeated) types.
type ListResourcesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListResourcesResponse_FieldPath
	ContainsValue(*ListResourcesResponse) bool
}

// ParseListResourcesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListResourcesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourcesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListResourcesResponse_FieldPathArrayItemValue), nil
}

func MustParseListResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListResourcesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListResourcesResponse_FieldTerminalPathArrayItemValue struct {
	ListResourcesResponse_FieldTerminalPath
	value interface{}
}

var _ ListResourcesResponse_FieldPathArrayItemValue = (*ListResourcesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListResourcesResponse as interface{}
func (fpaiv *ListResourcesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListResourcesResponse_FieldTerminalPathArrayItemValue) AsResourcesItemValue() (*resource.Resource, bool) {
	res, ok := fpaiv.value.(*resource.Resource)
	return res, ok
}

func (fpaiv *ListResourcesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListResourcesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListResourcesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListResourcesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourcesResponse'
func (fpaiv *ListResourcesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListResourcesResponse) bool {
	slice := fpaiv.ListResourcesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListResourcesResponse_FieldSubPathArrayItemValue struct {
	ListResourcesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListResourcesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListResourcesResponse_FieldSubPathArrayItemValue) AsResourcesPathItemValue() (resource.Resource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourcesResponse'
func (fpaivs *ListResourcesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListResourcesResponse) bool {
	switch fpaivs.Selector() {
	case ListResourcesResponse_FieldPathSelectorResources:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourcesResponse: %d", fpaivs.Selector()))
	}
}

// ListResourcesResponse_FieldPathArrayOfValues allows storing slice of values for ListResourcesResponse fields according to their type
type ListResourcesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListResourcesResponse_FieldPath
}

func ParseListResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListResourcesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourcesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListResourcesResponse_FieldPathArrayOfValues), nil
}

func MustParseListResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListResourcesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListResourcesResponse_FieldTerminalPathArrayOfValues struct {
	ListResourcesResponse_FieldTerminalPath
	values interface{}
}

var _ ListResourcesResponse_FieldPathArrayOfValues = (*ListResourcesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListResourcesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListResourcesResponse_FieldPathSelectorResources:
		for _, v := range fpaov.values.([][]*resource.Resource) {
			values = append(values, v)
		}
	case ListResourcesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*resource.PagerCursor) {
			values = append(values, v)
		}
	case ListResourcesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*resource.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListResourcesResponse_FieldTerminalPathArrayOfValues) AsResourcesArrayOfValues() ([][]*resource.Resource, bool) {
	res, ok := fpaov.values.([][]*resource.Resource)
	return res, ok
}
func (fpaov *ListResourcesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*resource.PagerCursor, bool) {
	res, ok := fpaov.values.([]*resource.PagerCursor)
	return res, ok
}
func (fpaov *ListResourcesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*resource.PagerCursor, bool) {
	res, ok := fpaov.values.([]*resource.PagerCursor)
	return res, ok
}

type ListResourcesResponse_FieldSubPathArrayOfValues struct {
	ListResourcesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListResourcesResponse_FieldPathArrayOfValues = (*ListResourcesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListResourcesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListResourcesResponse_FieldSubPathArrayOfValues) AsResourcesPathArrayOfValues() (resource.Resource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource.Resource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchResourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchResourceRequest_FieldPathSelector
	Get(source *WatchResourceRequest) []interface{}
	GetSingle(source *WatchResourceRequest) (interface{}, bool)
	ClearValue(item *WatchResourceRequest)

	// Those methods build corresponding WatchResourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchResourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchResourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchResourceRequest_FieldPathArrayItemValue
}

type WatchResourceRequest_FieldPathSelector int32

const (
	WatchResourceRequest_FieldPathSelectorName      WatchResourceRequest_FieldPathSelector = 0
	WatchResourceRequest_FieldPathSelectorFieldMask WatchResourceRequest_FieldPathSelector = 1
	WatchResourceRequest_FieldPathSelectorView      WatchResourceRequest_FieldPathSelector = 2
)

func (s WatchResourceRequest_FieldPathSelector) String() string {
	switch s {
	case WatchResourceRequest_FieldPathSelectorName:
		return "name"
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchResourceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", s))
	}
}

func BuildWatchResourceRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchResourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchResourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchResourceRequest_FieldTerminalPath{selector: WatchResourceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchResourceRequest_FieldTerminalPath{selector: WatchResourceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchResourceRequest_FieldTerminalPath{selector: WatchResourceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchResourceRequest", fp)
}

func ParseWatchResourceRequest_FieldPath(rawField string) (WatchResourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchResourceRequest_FieldPath(fp)
}

func MustParseWatchResourceRequest_FieldPath(rawField string) WatchResourceRequest_FieldPath {
	fp, err := ParseWatchResourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchResourceRequest_FieldTerminalPath struct {
	selector WatchResourceRequest_FieldPathSelector
}

var _ WatchResourceRequest_FieldPath = (*WatchResourceRequest_FieldTerminalPath)(nil)

func (fp *WatchResourceRequest_FieldTerminalPath) Selector() WatchResourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchResourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchResourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchResourceRequest
func (fp *WatchResourceRequest_FieldTerminalPath) Get(source *WatchResourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchResourceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchResourceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchResourceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchResourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchResourceRequest))
}

// GetSingle returns value pointed by specific field of from source WatchResourceRequest
func (fp *WatchResourceRequest_FieldTerminalPath) GetSingle(source *WatchResourceRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchResourceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
	}
}

func (fp *WatchResourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchResourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchResourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		return (*resource.Reference)(nil)
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		return (*resource.Resource_FieldMask)(nil)
	case WatchResourceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
	}
}

func (fp *WatchResourceRequest_FieldTerminalPath) ClearValue(item *WatchResourceRequest) {
	if item != nil {
		switch fp.selector {
		case WatchResourceRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchResourceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchResourceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchResourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchResourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchResourceRequest_FieldPathSelectorName ||
		fp.selector == WatchResourceRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchResourceRequest_FieldPathSelectorView
}

func (fp *WatchResourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchResourceRequest_FieldTerminalPath) WithIValue(value interface{}) WatchResourceRequest_FieldPathValue {
	switch fp.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		return &WatchResourceRequest_FieldTerminalPathValue{WatchResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Reference)}
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		return &WatchResourceRequest_FieldTerminalPathValue{WatchResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	case WatchResourceRequest_FieldPathSelectorView:
		return &WatchResourceRequest_FieldTerminalPathValue{WatchResourceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
	}
}

func (fp *WatchResourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchResourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchResourceRequest_FieldPathArrayOfValues {
	fpaov := &WatchResourceRequest_FieldTerminalPathArrayOfValues{WatchResourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		return &WatchResourceRequest_FieldTerminalPathArrayOfValues{WatchResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Reference)}
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		return &WatchResourceRequest_FieldTerminalPathArrayOfValues{WatchResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	case WatchResourceRequest_FieldPathSelectorView:
		return &WatchResourceRequest_FieldTerminalPathArrayOfValues{WatchResourceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchResourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchResourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchResourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fp.selector))
	}
}

func (fp *WatchResourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchResourceRequest_FieldPathValue allows storing values for WatchResourceRequest fields according to their type
type WatchResourceRequest_FieldPathValue interface {
	WatchResourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchResourceRequest)
	CompareWith(*WatchResourceRequest) (cmp int, comparable bool)
}

func ParseWatchResourceRequest_FieldPathValue(pathStr, valueStr string) (WatchResourceRequest_FieldPathValue, error) {
	fp, err := ParseWatchResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchResourceRequest_FieldPathValue), nil
}

func MustParseWatchResourceRequest_FieldPathValue(pathStr, valueStr string) WatchResourceRequest_FieldPathValue {
	fpv, err := ParseWatchResourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchResourceRequest_FieldTerminalPathValue struct {
	WatchResourceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchResourceRequest_FieldPathValue = (*WatchResourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchResourceRequest' as interface{}
func (fpv *WatchResourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchResourceRequest_FieldTerminalPathValue) AsNameValue() (*resource.Reference, bool) {
	res, ok := fpv.value.(*resource.Reference)
	return res, ok
}
func (fpv *WatchResourceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}
func (fpv *WatchResourceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchResourceRequest
func (fpv *WatchResourceRequest_FieldTerminalPathValue) SetTo(target **WatchResourceRequest) {
	if *target == nil {
		*target = new(WatchResourceRequest)
	}
	switch fpv.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*resource.Reference)
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*resource.Resource_FieldMask)
	case WatchResourceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchResourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchResourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchResourceRequest_FieldTerminalPathValue' with the value under path in 'WatchResourceRequest'.
func (fpv *WatchResourceRequest_FieldTerminalPathValue) CompareWith(source *WatchResourceRequest) (int, bool) {
	switch fpv.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*resource.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchResourceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchResourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchResourceRequest))
}

// WatchResourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchResourceRequest according to their type
// Present only for array (repeated) types.
type WatchResourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchResourceRequest_FieldPath
	ContainsValue(*WatchResourceRequest) bool
}

// ParseWatchResourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchResourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchResourceRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchResourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchResourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchResourceRequest_FieldTerminalPathArrayItemValue struct {
	WatchResourceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchResourceRequest_FieldPathArrayItemValue = (*WatchResourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchResourceRequest as interface{}
func (fpaiv *WatchResourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchResourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchResourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchResourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchResourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchResourceRequest'
func (fpaiv *WatchResourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchResourceRequest) bool {
	slice := fpaiv.WatchResourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchResourceRequest_FieldPathArrayOfValues allows storing slice of values for WatchResourceRequest fields according to their type
type WatchResourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchResourceRequest_FieldPath
}

func ParseWatchResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchResourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchResourceRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchResourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchResourceRequest_FieldTerminalPathArrayOfValues struct {
	WatchResourceRequest_FieldTerminalPath
	values interface{}
}

var _ WatchResourceRequest_FieldPathArrayOfValues = (*WatchResourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchResourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchResourceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*resource.Reference) {
			values = append(values, v)
		}
	case WatchResourceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	case WatchResourceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchResourceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*resource.Reference, bool) {
	res, ok := fpaov.values.([]*resource.Reference)
	return res, ok
}
func (fpaov *WatchResourceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}
func (fpaov *WatchResourceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchResourceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchResourceResponse_FieldPathSelector
	Get(source *WatchResourceResponse) []interface{}
	GetSingle(source *WatchResourceResponse) (interface{}, bool)
	ClearValue(item *WatchResourceResponse)

	// Those methods build corresponding WatchResourceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchResourceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchResourceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchResourceResponse_FieldPathArrayItemValue
}

type WatchResourceResponse_FieldPathSelector int32

const (
	WatchResourceResponse_FieldPathSelectorChange WatchResourceResponse_FieldPathSelector = 0
)

func (s WatchResourceResponse_FieldPathSelector) String() string {
	switch s {
	case WatchResourceResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", s))
	}
}

func BuildWatchResourceResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchResourceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchResourceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchResourceResponse_FieldTerminalPath{selector: WatchResourceResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchResourceResponse", fp)
}

func ParseWatchResourceResponse_FieldPath(rawField string) (WatchResourceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchResourceResponse_FieldPath(fp)
}

func MustParseWatchResourceResponse_FieldPath(rawField string) WatchResourceResponse_FieldPath {
	fp, err := ParseWatchResourceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchResourceResponse_FieldTerminalPath struct {
	selector WatchResourceResponse_FieldPathSelector
}

var _ WatchResourceResponse_FieldPath = (*WatchResourceResponse_FieldTerminalPath)(nil)

func (fp *WatchResourceResponse_FieldTerminalPath) Selector() WatchResourceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchResourceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchResourceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchResourceResponse
func (fp *WatchResourceResponse_FieldTerminalPath) Get(source *WatchResourceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchResourceResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchResourceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchResourceResponse))
}

// GetSingle returns value pointed by specific field of from source WatchResourceResponse
func (fp *WatchResourceResponse_FieldTerminalPath) GetSingle(source *WatchResourceResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
	}
}

func (fp *WatchResourceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchResourceResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchResourceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		return (*resource.ResourceChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
	}
}

func (fp *WatchResourceResponse_FieldTerminalPath) ClearValue(item *WatchResourceResponse) {
	if item != nil {
		switch fp.selector {
		case WatchResourceResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchResourceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchResourceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchResourceResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchResourceResponse_FieldPathSelectorChange
}

func (fp *WatchResourceResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchResourceResponse_FieldTerminalPath) WithIValue(value interface{}) WatchResourceResponse_FieldPathValue {
	switch fp.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		return &WatchResourceResponse_FieldTerminalPathValue{WatchResourceResponse_FieldTerminalPath: *fp, value: value.(*resource.ResourceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
	}
}

func (fp *WatchResourceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchResourceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchResourceResponse_FieldPathArrayOfValues {
	fpaov := &WatchResourceResponse_FieldTerminalPathArrayOfValues{WatchResourceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		return &WatchResourceResponse_FieldTerminalPathArrayOfValues{WatchResourceResponse_FieldTerminalPath: *fp, values: values.([]*resource.ResourceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchResourceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchResourceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchResourceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fp.selector))
	}
}

func (fp *WatchResourceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchResourceResponse_FieldPathValue allows storing values for WatchResourceResponse fields according to their type
type WatchResourceResponse_FieldPathValue interface {
	WatchResourceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchResourceResponse)
	CompareWith(*WatchResourceResponse) (cmp int, comparable bool)
}

func ParseWatchResourceResponse_FieldPathValue(pathStr, valueStr string) (WatchResourceResponse_FieldPathValue, error) {
	fp, err := ParseWatchResourceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchResourceResponse_FieldPathValue), nil
}

func MustParseWatchResourceResponse_FieldPathValue(pathStr, valueStr string) WatchResourceResponse_FieldPathValue {
	fpv, err := ParseWatchResourceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchResourceResponse_FieldTerminalPathValue struct {
	WatchResourceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchResourceResponse_FieldPathValue = (*WatchResourceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchResourceResponse' as interface{}
func (fpv *WatchResourceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchResourceResponse_FieldTerminalPathValue) AsChangeValue() (*resource.ResourceChange, bool) {
	res, ok := fpv.value.(*resource.ResourceChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchResourceResponse
func (fpv *WatchResourceResponse_FieldTerminalPathValue) SetTo(target **WatchResourceResponse) {
	if *target == nil {
		*target = new(WatchResourceResponse)
	}
	switch fpv.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*resource.ResourceChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchResourceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchResourceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchResourceResponse_FieldTerminalPathValue' with the value under path in 'WatchResourceResponse'.
func (fpv *WatchResourceResponse_FieldTerminalPathValue) CompareWith(source *WatchResourceResponse) (int, bool) {
	switch fpv.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchResourceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchResourceResponse))
}

// WatchResourceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchResourceResponse according to their type
// Present only for array (repeated) types.
type WatchResourceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchResourceResponse_FieldPath
	ContainsValue(*WatchResourceResponse) bool
}

// ParseWatchResourceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchResourceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchResourceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchResourceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchResourceResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchResourceResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchResourceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchResourceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchResourceResponse_FieldTerminalPathArrayItemValue struct {
	WatchResourceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchResourceResponse_FieldPathArrayItemValue = (*WatchResourceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchResourceResponse as interface{}
func (fpaiv *WatchResourceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchResourceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchResourceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchResourceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchResourceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchResourceResponse'
func (fpaiv *WatchResourceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchResourceResponse) bool {
	slice := fpaiv.WatchResourceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchResourceResponse_FieldPathArrayOfValues allows storing slice of values for WatchResourceResponse fields according to their type
type WatchResourceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchResourceResponse_FieldPath
}

func ParseWatchResourceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchResourceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchResourceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchResourceResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchResourceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchResourceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchResourceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchResourceResponse_FieldTerminalPathArrayOfValues struct {
	WatchResourceResponse_FieldTerminalPath
	values interface{}
}

var _ WatchResourceResponse_FieldPathArrayOfValues = (*WatchResourceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchResourceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchResourceResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*resource.ResourceChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchResourceResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*resource.ResourceChange, bool) {
	res, ok := fpaov.values.([]*resource.ResourceChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchResourcesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchResourcesRequest_FieldPathSelector
	Get(source *WatchResourcesRequest) []interface{}
	GetSingle(source *WatchResourcesRequest) (interface{}, bool)
	ClearValue(item *WatchResourcesRequest)

	// Those methods build corresponding WatchResourcesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchResourcesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchResourcesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchResourcesRequest_FieldPathArrayItemValue
}

type WatchResourcesRequest_FieldPathSelector int32

const (
	WatchResourcesRequest_FieldPathSelectorType         WatchResourcesRequest_FieldPathSelector = 0
	WatchResourcesRequest_FieldPathSelectorParent       WatchResourcesRequest_FieldPathSelector = 1
	WatchResourcesRequest_FieldPathSelectorPageSize     WatchResourcesRequest_FieldPathSelector = 2
	WatchResourcesRequest_FieldPathSelectorPageToken    WatchResourcesRequest_FieldPathSelector = 3
	WatchResourcesRequest_FieldPathSelectorOrderBy      WatchResourcesRequest_FieldPathSelector = 4
	WatchResourcesRequest_FieldPathSelectorResumeToken  WatchResourcesRequest_FieldPathSelector = 5
	WatchResourcesRequest_FieldPathSelectorStartingTime WatchResourcesRequest_FieldPathSelector = 6
	WatchResourcesRequest_FieldPathSelectorFilter       WatchResourcesRequest_FieldPathSelector = 7
	WatchResourcesRequest_FieldPathSelectorFieldMask    WatchResourcesRequest_FieldPathSelector = 8
	WatchResourcesRequest_FieldPathSelectorView         WatchResourcesRequest_FieldPathSelector = 9
	WatchResourcesRequest_FieldPathSelectorMaxChunkSize WatchResourcesRequest_FieldPathSelector = 10
)

func (s WatchResourcesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchResourcesRequest_FieldPathSelectorType:
		return "type"
	case WatchResourcesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchResourcesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchResourcesRequest_FieldPathSelectorView:
		return "view"
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", s))
	}
}

func BuildWatchResourcesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchResourcesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchResourcesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchResourcesRequest", fp)
}

func ParseWatchResourcesRequest_FieldPath(rawField string) (WatchResourcesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchResourcesRequest_FieldPath(fp)
}

func MustParseWatchResourcesRequest_FieldPath(rawField string) WatchResourcesRequest_FieldPath {
	fp, err := ParseWatchResourcesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchResourcesRequest_FieldTerminalPath struct {
	selector WatchResourcesRequest_FieldPathSelector
}

var _ WatchResourcesRequest_FieldPath = (*WatchResourcesRequest_FieldTerminalPath)(nil)

func (fp *WatchResourcesRequest_FieldTerminalPath) Selector() WatchResourcesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchResourcesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchResourcesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchResourcesRequest
func (fp *WatchResourcesRequest_FieldTerminalPath) Get(source *WatchResourcesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchResourcesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchResourcesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchResourcesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchResourcesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchResourcesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchResourcesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchResourcesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchResourcesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchResourcesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchResourcesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchResourcesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchResourcesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchResourcesRequest
func (fp *WatchResourcesRequest_FieldTerminalPath) GetSingle(source *WatchResourcesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchResourcesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchResourcesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchResourcesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
	}
}

func (fp *WatchResourcesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchResourcesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchResourcesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchResourcesRequest_FieldPathSelectorParent:
		return (*resource.ParentReference)(nil)
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		return (*resource.PagerCursor)(nil)
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		return (*resource.OrderBy)(nil)
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchResourcesRequest_FieldPathSelectorFilter:
		return (*resource.Filter)(nil)
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		return (*resource.Resource_FieldMask)(nil)
	case WatchResourcesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
	}
}

func (fp *WatchResourcesRequest_FieldTerminalPath) ClearValue(item *WatchResourcesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchResourcesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchResourcesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchResourcesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchResourcesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchResourcesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchResourcesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchResourcesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchResourcesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchResourcesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchResourcesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchResourcesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchResourcesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchResourcesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchResourcesRequest_FieldPathSelectorType ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorParent ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorView ||
		fp.selector == WatchResourcesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchResourcesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchResourcesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchResourcesRequest_FieldPathValue {
	switch fp.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchResourcesRequest_FieldPathSelectorParent:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.ParentReference)}
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.PagerCursor)}
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.OrderBy)}
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchResourcesRequest_FieldPathSelectorFilter:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.Filter)}
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	case WatchResourcesRequest_FieldPathSelectorView:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchResourcesRequest_FieldTerminalPathValue{WatchResourcesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
	}
}

func (fp *WatchResourcesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchResourcesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchResourcesRequest_FieldPathArrayOfValues {
	fpaov := &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchResourcesRequest_FieldPathSelectorParent:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.ParentReference)}
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.PagerCursor)}
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.OrderBy)}
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchResourcesRequest_FieldPathSelectorFilter:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.Filter)}
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	case WatchResourcesRequest_FieldPathSelectorView:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchResourcesRequest_FieldTerminalPathArrayOfValues{WatchResourcesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchResourcesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchResourcesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchResourcesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fp.selector))
	}
}

func (fp *WatchResourcesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchResourcesRequest_FieldPathValue allows storing values for WatchResourcesRequest fields according to their type
type WatchResourcesRequest_FieldPathValue interface {
	WatchResourcesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchResourcesRequest)
	CompareWith(*WatchResourcesRequest) (cmp int, comparable bool)
}

func ParseWatchResourcesRequest_FieldPathValue(pathStr, valueStr string) (WatchResourcesRequest_FieldPathValue, error) {
	fp, err := ParseWatchResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourcesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchResourcesRequest_FieldPathValue), nil
}

func MustParseWatchResourcesRequest_FieldPathValue(pathStr, valueStr string) WatchResourcesRequest_FieldPathValue {
	fpv, err := ParseWatchResourcesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchResourcesRequest_FieldTerminalPathValue struct {
	WatchResourcesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchResourcesRequest_FieldPathValue = (*WatchResourcesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchResourcesRequest' as interface{}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsParentValue() (*resource.ParentReference, bool) {
	res, ok := fpv.value.(*resource.ParentReference)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsPageTokenValue() (*resource.PagerCursor, bool) {
	res, ok := fpv.value.(*resource.PagerCursor)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsOrderByValue() (*resource.OrderBy, bool) {
	res, ok := fpv.value.(*resource.OrderBy)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsFilterValue() (*resource.Filter, bool) {
	res, ok := fpv.value.(*resource.Filter)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchResourcesRequest
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) SetTo(target **WatchResourcesRequest) {
	if *target == nil {
		*target = new(WatchResourcesRequest)
	}
	switch fpv.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchResourcesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*resource.ParentReference)
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*resource.PagerCursor)
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*resource.OrderBy)
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchResourcesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*resource.Filter)
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*resource.Resource_FieldMask)
	case WatchResourcesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchResourcesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchResourcesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchResourcesRequest_FieldTerminalPathValue' with the value under path in 'WatchResourcesRequest'.
func (fpv *WatchResourcesRequest_FieldTerminalPathValue) CompareWith(source *WatchResourcesRequest) (int, bool) {
	switch fpv.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*resource.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchResourcesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchResourcesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchResourcesRequest))
}

// WatchResourcesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchResourcesRequest according to their type
// Present only for array (repeated) types.
type WatchResourcesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchResourcesRequest_FieldPath
	ContainsValue(*WatchResourcesRequest) bool
}

// ParseWatchResourcesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchResourcesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourcesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchResourcesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchResourcesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchResourcesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchResourcesRequest_FieldTerminalPathArrayItemValue struct {
	WatchResourcesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchResourcesRequest_FieldPathArrayItemValue = (*WatchResourcesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchResourcesRequest as interface{}
func (fpaiv *WatchResourcesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchResourcesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchResourcesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchResourcesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchResourcesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchResourcesRequest'
func (fpaiv *WatchResourcesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchResourcesRequest) bool {
	slice := fpaiv.WatchResourcesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchResourcesRequest_FieldPathArrayOfValues allows storing slice of values for WatchResourcesRequest fields according to their type
type WatchResourcesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchResourcesRequest_FieldPath
}

func ParseWatchResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchResourcesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchResourcesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourcesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchResourcesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchResourcesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchResourcesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchResourcesRequest_FieldTerminalPathArrayOfValues struct {
	WatchResourcesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchResourcesRequest_FieldPathArrayOfValues = (*WatchResourcesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchResourcesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*resource.ParentReference) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*resource.PagerCursor) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*resource.OrderBy) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*resource.Filter) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchResourcesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*resource.ParentReference, bool) {
	res, ok := fpaov.values.([]*resource.ParentReference)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*resource.PagerCursor, bool) {
	res, ok := fpaov.values.([]*resource.PagerCursor)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*resource.OrderBy, bool) {
	res, ok := fpaov.values.([]*resource.OrderBy)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*resource.Filter, bool) {
	res, ok := fpaov.values.([]*resource.Filter)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchResourcesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchResourcesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchResourcesResponse_FieldPathSelector
	Get(source *WatchResourcesResponse) []interface{}
	GetSingle(source *WatchResourcesResponse) (interface{}, bool)
	ClearValue(item *WatchResourcesResponse)

	// Those methods build corresponding WatchResourcesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchResourcesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchResourcesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchResourcesResponse_FieldPathArrayItemValue
}

type WatchResourcesResponse_FieldPathSelector int32

const (
	WatchResourcesResponse_FieldPathSelectorResourceChanges WatchResourcesResponse_FieldPathSelector = 0
	WatchResourcesResponse_FieldPathSelectorIsCurrent       WatchResourcesResponse_FieldPathSelector = 1
	WatchResourcesResponse_FieldPathSelectorPageTokenChange WatchResourcesResponse_FieldPathSelector = 2
	WatchResourcesResponse_FieldPathSelectorResumeToken     WatchResourcesResponse_FieldPathSelector = 3
	WatchResourcesResponse_FieldPathSelectorSnapshotSize    WatchResourcesResponse_FieldPathSelector = 4
	WatchResourcesResponse_FieldPathSelectorIsSoftReset     WatchResourcesResponse_FieldPathSelector = 5
	WatchResourcesResponse_FieldPathSelectorIsHardReset     WatchResourcesResponse_FieldPathSelector = 6
)

func (s WatchResourcesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		return "resource_changes"
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", s))
	}
}

func BuildWatchResourcesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchResourcesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchResourcesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource_changes", "resourceChanges", "resource-changes":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorResourceChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchResourcesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchResourcesResponse_FieldSubPath{selector: WatchResourcesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchResourcesResponse", fp)
}

func ParseWatchResourcesResponse_FieldPath(rawField string) (WatchResourcesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchResourcesResponse_FieldPath(fp)
}

func MustParseWatchResourcesResponse_FieldPath(rawField string) WatchResourcesResponse_FieldPath {
	fp, err := ParseWatchResourcesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchResourcesResponse_FieldTerminalPath struct {
	selector WatchResourcesResponse_FieldPathSelector
}

var _ WatchResourcesResponse_FieldPath = (*WatchResourcesResponse_FieldTerminalPath)(nil)

func (fp *WatchResourcesResponse_FieldTerminalPath) Selector() WatchResourcesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchResourcesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchResourcesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchResourcesResponse
func (fp *WatchResourcesResponse_FieldTerminalPath) Get(source *WatchResourcesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchResourcesResponse_FieldPathSelectorResourceChanges:
			for _, value := range source.GetResourceChanges() {
				values = append(values, value)
			}
		case WatchResourcesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchResourcesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchResourcesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchResourcesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchResourcesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchResourcesResponse
func (fp *WatchResourcesResponse_FieldTerminalPath) GetSingle(source *WatchResourcesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		res := source.GetResourceChanges()
		return res, res != nil
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchResourcesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchResourcesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		return ([]*resource.ResourceChange)(nil)
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchResourcesResponse_PageTokenChange)(nil)
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponse_FieldTerminalPath) ClearValue(item *WatchResourcesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchResourcesResponse_FieldPathSelectorResourceChanges:
			item.ResourceChanges = nil
		case WatchResourcesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchResourcesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchResourcesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchResourcesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchResourcesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchResourcesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchResourcesResponse_FieldPathSelectorResourceChanges ||
		fp.selector == WatchResourcesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchResourcesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchResourcesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchResourcesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchResourcesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchResourcesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchResourcesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchResourcesResponse_FieldPathValue {
	switch fp.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.([]*resource.ResourceChange)}
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(*WatchResourcesResponse_PageTokenChange)}
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		return &WatchResourcesResponse_FieldTerminalPathValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchResourcesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchResourcesResponse_FieldPathArrayOfValues {
	fpaov := &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([][]*resource.ResourceChange)}
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([]*WatchResourcesResponse_PageTokenChange)}
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		return &WatchResourcesResponse_FieldTerminalPathArrayOfValues{WatchResourcesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchResourcesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchResourcesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchResourcesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		return &WatchResourcesResponse_FieldTerminalPathArrayItemValue{WatchResourcesResponse_FieldTerminalPath: *fp, value: value.(*resource.ResourceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchResourcesResponse_FieldSubPath struct {
	selector WatchResourcesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchResourcesResponse_FieldPath = (*WatchResourcesResponse_FieldSubPath)(nil)

func (fps *WatchResourcesResponse_FieldSubPath) Selector() WatchResourcesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchResourcesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchResourcesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchResourcesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchResourcesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchResourcesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchResourcesResponse
func (fps *WatchResourcesResponse_FieldSubPath) Get(source *WatchResourcesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchResourcesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchResourcesResponse))
}

// GetSingle returns value of selected field from source WatchResourcesResponse
func (fps *WatchResourcesResponse_FieldSubPath) GetSingle(source *WatchResourcesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fps.selector))
	}
}

func (fps *WatchResourcesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchResourcesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchResourcesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchResourcesResponse_FieldSubPath) ClearValue(item *WatchResourcesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchResourcesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchResourcesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchResourcesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchResourcesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchResourcesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchResourcesResponse_FieldSubPath) WithIValue(value interface{}) WatchResourcesResponse_FieldPathValue {
	return &WatchResourcesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchResourcesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchResourcesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchResourcesResponse_FieldPathArrayOfValues {
	return &WatchResourcesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchResourcesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchResourcesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchResourcesResponse_FieldPathArrayItemValue {
	return &WatchResourcesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchResourcesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchResourcesResponse_FieldPathValue allows storing values for WatchResourcesResponse fields according to their type
type WatchResourcesResponse_FieldPathValue interface {
	WatchResourcesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchResourcesResponse)
	CompareWith(*WatchResourcesResponse) (cmp int, comparable bool)
}

func ParseWatchResourcesResponse_FieldPathValue(pathStr, valueStr string) (WatchResourcesResponse_FieldPathValue, error) {
	fp, err := ParseWatchResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourcesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchResourcesResponse_FieldPathValue), nil
}

func MustParseWatchResourcesResponse_FieldPathValue(pathStr, valueStr string) WatchResourcesResponse_FieldPathValue {
	fpv, err := ParseWatchResourcesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchResourcesResponse_FieldTerminalPathValue struct {
	WatchResourcesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchResourcesResponse_FieldPathValue = (*WatchResourcesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchResourcesResponse' as interface{}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsResourceChangesValue() ([]*resource.ResourceChange, bool) {
	res, ok := fpv.value.([]*resource.ResourceChange)
	return res, ok
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchResourcesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchResourcesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchResourcesResponse
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) SetTo(target **WatchResourcesResponse) {
	if *target == nil {
		*target = new(WatchResourcesResponse)
	}
	switch fpv.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		(*target).ResourceChanges = fpv.value.([]*resource.ResourceChange)
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchResourcesResponse_PageTokenChange)
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchResourcesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchResourcesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchResourcesResponse_FieldTerminalPathValue' with the value under path in 'WatchResourcesResponse'.
func (fpv *WatchResourcesResponse_FieldTerminalPathValue) CompareWith(source *WatchResourcesResponse) (int, bool) {
	switch fpv.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		return 0, false
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchResourcesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchResourcesResponse))
}

type WatchResourcesResponse_FieldSubPathValue struct {
	WatchResourcesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchResourcesResponse_FieldPathValue = (*WatchResourcesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchResourcesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchResourcesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchResourcesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchResourcesResponse_FieldSubPathValue) SetTo(target **WatchResourcesResponse) {
	if *target == nil {
		*target = new(WatchResourcesResponse)
	}
	switch fpvs.Selector() {
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchResourcesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchResourcesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchResourcesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchResourcesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchResourcesResponse_FieldSubPathValue) CompareWith(source *WatchResourcesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchResourcesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchResourcesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchResourcesResponse))
}

// WatchResourcesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchResourcesResponse according to their type
// Present only for array (repeated) types.
type WatchResourcesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchResourcesResponse_FieldPath
	ContainsValue(*WatchResourcesResponse) bool
}

// ParseWatchResourcesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchResourcesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourcesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchResourcesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchResourcesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchResourcesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchResourcesResponse_FieldTerminalPathArrayItemValue struct {
	WatchResourcesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchResourcesResponse_FieldPathArrayItemValue = (*WatchResourcesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchResourcesResponse as interface{}
func (fpaiv *WatchResourcesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchResourcesResponse_FieldTerminalPathArrayItemValue) AsResourceChangesItemValue() (*resource.ResourceChange, bool) {
	res, ok := fpaiv.value.(*resource.ResourceChange)
	return res, ok
}

func (fpaiv *WatchResourcesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchResourcesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchResourcesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchResourcesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchResourcesResponse'
func (fpaiv *WatchResourcesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchResourcesResponse) bool {
	slice := fpaiv.WatchResourcesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchResourcesResponse_FieldSubPathArrayItemValue struct {
	WatchResourcesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchResourcesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchResourcesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchResourcesResponse'
func (fpaivs *WatchResourcesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchResourcesResponse) bool {
	switch fpaivs.Selector() {
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse: %d", fpaivs.Selector()))
	}
}

// WatchResourcesResponse_FieldPathArrayOfValues allows storing slice of values for WatchResourcesResponse fields according to their type
type WatchResourcesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchResourcesResponse_FieldPath
}

func ParseWatchResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchResourcesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchResourcesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchResourcesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchResourcesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchResourcesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchResourcesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchResourcesResponse_FieldTerminalPathArrayOfValues struct {
	WatchResourcesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchResourcesResponse_FieldPathArrayOfValues = (*WatchResourcesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchResourcesResponse_FieldPathSelectorResourceChanges:
		for _, v := range fpaov.values.([][]*resource.ResourceChange) {
			values = append(values, v)
		}
	case WatchResourcesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchResourcesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchResourcesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchResourcesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchResourcesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchResourcesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchResourcesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsResourceChangesArrayOfValues() ([][]*resource.ResourceChange, bool) {
	res, ok := fpaov.values.([][]*resource.ResourceChange)
	return res, ok
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchResourcesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchResourcesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchResourcesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchResourcesResponse_FieldSubPathArrayOfValues struct {
	WatchResourcesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchResourcesResponse_FieldPathArrayOfValues = (*WatchResourcesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchResourcesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchResourcesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchResourcesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchResourcesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchResourcesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchResourcesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchResourcesResponse_PageTokenChange)

	// Those methods build corresponding WatchResourcesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchResourcesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchResourcesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchResourcesResponsePageTokenChange_FieldPathSelector = 0
	WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchResourcesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchResourcesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchResourcesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchResourcesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchResourcesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchResourcesResponsePageTokenChange_FieldTerminalPath{selector: WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchResourcesResponsePageTokenChange_FieldTerminalPath{selector: WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchResourcesResponse_PageTokenChange", fp)
}

func ParseWatchResourcesResponsePageTokenChange_FieldPath(rawField string) (WatchResourcesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchResourcesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchResourcesResponsePageTokenChange_FieldPath(rawField string) WatchResourcesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchResourcesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchResourcesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchResourcesResponsePageTokenChange_FieldPathSelector
}

var _ WatchResourcesResponsePageTokenChange_FieldPath = (*WatchResourcesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) Selector() WatchResourcesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchResourcesResponse_PageTokenChange
func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchResourcesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchResourcesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchResourcesResponse_PageTokenChange
func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchResourcesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchResourcesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*resource.PagerCursor)(nil)
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*resource.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchResourcesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchResourcesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchResourcesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchResourcesResponsePageTokenChange_FieldTerminalPathValue{WatchResourcesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*resource.PagerCursor)}
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchResourcesResponsePageTokenChange_FieldTerminalPathValue{WatchResourcesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*resource.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchResourcesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchResourcesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*resource.PagerCursor)}
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchResourcesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*resource.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchResourcesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchResourcesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchResourcesResponsePageTokenChange_FieldPathValue interface {
	WatchResourcesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchResourcesResponse_PageTokenChange)
	CompareWith(*WatchResourcesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchResourcesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchResourcesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchResourcesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchResourcesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchResourcesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchResourcesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchResourcesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchResourcesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchResourcesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchResourcesResponsePageTokenChange_FieldPathValue = (*WatchResourcesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*resource.PagerCursor, bool) {
	res, ok := fpv.value.(*resource.PagerCursor)
	return res, ok
}
func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*resource.PagerCursor, bool) {
	res, ok := fpv.value.(*resource.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchResourcesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchResourcesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*resource.PagerCursor)
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*resource.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchResourcesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchResourcesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchResourcesResponse_PageTokenChange'.
func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchResourcesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchResourcesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchResourcesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchResourcesResponse_PageTokenChange))
}

// WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchResourcesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchResourcesResponse_PageTokenChange) bool
}

// ParseWatchResourcesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchResourcesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchResourcesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchResourcesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchResourcesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchResourcesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchResourcesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchResourcesResponse_PageTokenChange as interface{}
func (fpaiv *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchResourcesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchResourcesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchResourcesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchResourcesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchResourcesResponsePageTokenChange_FieldPath
}

func ParseWatchResourcesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchResourcesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchResourcesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchResourcesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchResourcesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchResourcesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*resource.PagerCursor) {
			values = append(values, v)
		}
	case WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*resource.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*resource.PagerCursor, bool) {
	res, ok := fpaov.values.([]*resource.PagerCursor)
	return res, ok
}
func (fpaov *WatchResourcesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*resource.PagerCursor, bool) {
	res, ok := fpaov.values.([]*resource.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateResourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateResourceRequest_FieldPathSelector
	Get(source *CreateResourceRequest) []interface{}
	GetSingle(source *CreateResourceRequest) (interface{}, bool)
	ClearValue(item *CreateResourceRequest)

	// Those methods build corresponding CreateResourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateResourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateResourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateResourceRequest_FieldPathArrayItemValue
}

type CreateResourceRequest_FieldPathSelector int32

const (
	CreateResourceRequest_FieldPathSelectorParent   CreateResourceRequest_FieldPathSelector = 0
	CreateResourceRequest_FieldPathSelectorResource CreateResourceRequest_FieldPathSelector = 1
)

func (s CreateResourceRequest_FieldPathSelector) String() string {
	switch s {
	case CreateResourceRequest_FieldPathSelectorParent:
		return "parent"
	case CreateResourceRequest_FieldPathSelectorResource:
		return "resource"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", s))
	}
}

func BuildCreateResourceRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateResourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateResourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateResourceRequest_FieldTerminalPath{selector: CreateResourceRequest_FieldPathSelectorParent}, nil
		case "resource":
			return &CreateResourceRequest_FieldTerminalPath{selector: CreateResourceRequest_FieldPathSelectorResource}, nil
		}
	} else {
		switch fp[0] {
		case "resource":
			if subpath, err := resource.BuildResource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateResourceRequest_FieldSubPath{selector: CreateResourceRequest_FieldPathSelectorResource, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateResourceRequest", fp)
}

func ParseCreateResourceRequest_FieldPath(rawField string) (CreateResourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateResourceRequest_FieldPath(fp)
}

func MustParseCreateResourceRequest_FieldPath(rawField string) CreateResourceRequest_FieldPath {
	fp, err := ParseCreateResourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateResourceRequest_FieldTerminalPath struct {
	selector CreateResourceRequest_FieldPathSelector
}

var _ CreateResourceRequest_FieldPath = (*CreateResourceRequest_FieldTerminalPath)(nil)

func (fp *CreateResourceRequest_FieldTerminalPath) Selector() CreateResourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateResourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateResourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateResourceRequest
func (fp *CreateResourceRequest_FieldTerminalPath) Get(source *CreateResourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateResourceRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateResourceRequest_FieldPathSelectorResource:
			if source.Resource != nil {
				values = append(values, source.Resource)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateResourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateResourceRequest))
}

// GetSingle returns value pointed by specific field of from source CreateResourceRequest
func (fp *CreateResourceRequest_FieldTerminalPath) GetSingle(source *CreateResourceRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateResourceRequest_FieldPathSelectorResource:
		res := source.GetResource()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
	}
}

func (fp *CreateResourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateResourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateResourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		return (*resource.ParentReference)(nil)
	case CreateResourceRequest_FieldPathSelectorResource:
		return (*resource.Resource)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
	}
}

func (fp *CreateResourceRequest_FieldTerminalPath) ClearValue(item *CreateResourceRequest) {
	if item != nil {
		switch fp.selector {
		case CreateResourceRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateResourceRequest_FieldPathSelectorResource:
			item.Resource = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateResourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateResourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateResourceRequest_FieldPathSelectorParent
}

func (fp *CreateResourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateResourceRequest_FieldTerminalPath) WithIValue(value interface{}) CreateResourceRequest_FieldPathValue {
	switch fp.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		return &CreateResourceRequest_FieldTerminalPathValue{CreateResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.ParentReference)}
	case CreateResourceRequest_FieldPathSelectorResource:
		return &CreateResourceRequest_FieldTerminalPathValue{CreateResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
	}
}

func (fp *CreateResourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateResourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateResourceRequest_FieldPathArrayOfValues {
	fpaov := &CreateResourceRequest_FieldTerminalPathArrayOfValues{CreateResourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		return &CreateResourceRequest_FieldTerminalPathArrayOfValues{CreateResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.ParentReference)}
	case CreateResourceRequest_FieldPathSelectorResource:
		return &CreateResourceRequest_FieldTerminalPathArrayOfValues{CreateResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateResourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateResourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateResourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fp.selector))
	}
}

func (fp *CreateResourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateResourceRequest_FieldSubPath struct {
	selector CreateResourceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateResourceRequest_FieldPath = (*CreateResourceRequest_FieldSubPath)(nil)

func (fps *CreateResourceRequest_FieldSubPath) Selector() CreateResourceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateResourceRequest_FieldSubPath) AsResourceSubPath() (resource.Resource_FieldPath, bool) {
	res, ok := fps.subPath.(resource.Resource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateResourceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateResourceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateResourceRequest
func (fps *CreateResourceRequest_FieldSubPath) Get(source *CreateResourceRequest) (values []interface{}) {
	if asResourceFieldPath, ok := fps.AsResourceSubPath(); ok {
		values = append(values, asResourceFieldPath.Get(source.GetResource())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateResourceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateResourceRequest))
}

// GetSingle returns value of selected field from source CreateResourceRequest
func (fps *CreateResourceRequest_FieldSubPath) GetSingle(source *CreateResourceRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateResourceRequest_FieldPathSelectorResource:
		if source.GetResource() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResource())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fps.selector))
	}
}

func (fps *CreateResourceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateResourceRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateResourceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateResourceRequest_FieldSubPath) ClearValue(item *CreateResourceRequest) {
	if item != nil {
		switch fps.selector {
		case CreateResourceRequest_FieldPathSelectorResource:
			fps.subPath.ClearValueRaw(item.Resource)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateResourceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateResourceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateResourceRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateResourceRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateResourceRequest_FieldSubPath) WithIValue(value interface{}) CreateResourceRequest_FieldPathValue {
	return &CreateResourceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateResourceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateResourceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateResourceRequest_FieldPathArrayOfValues {
	return &CreateResourceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateResourceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateResourceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateResourceRequest_FieldPathArrayItemValue {
	return &CreateResourceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateResourceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateResourceRequest_FieldPathValue allows storing values for CreateResourceRequest fields according to their type
type CreateResourceRequest_FieldPathValue interface {
	CreateResourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateResourceRequest)
	CompareWith(*CreateResourceRequest) (cmp int, comparable bool)
}

func ParseCreateResourceRequest_FieldPathValue(pathStr, valueStr string) (CreateResourceRequest_FieldPathValue, error) {
	fp, err := ParseCreateResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateResourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateResourceRequest_FieldPathValue), nil
}

func MustParseCreateResourceRequest_FieldPathValue(pathStr, valueStr string) CreateResourceRequest_FieldPathValue {
	fpv, err := ParseCreateResourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateResourceRequest_FieldTerminalPathValue struct {
	CreateResourceRequest_FieldTerminalPath
	value interface{}
}

var _ CreateResourceRequest_FieldPathValue = (*CreateResourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateResourceRequest' as interface{}
func (fpv *CreateResourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateResourceRequest_FieldTerminalPathValue) AsParentValue() (*resource.ParentReference, bool) {
	res, ok := fpv.value.(*resource.ParentReference)
	return res, ok
}
func (fpv *CreateResourceRequest_FieldTerminalPathValue) AsResourceValue() (*resource.Resource, bool) {
	res, ok := fpv.value.(*resource.Resource)
	return res, ok
}

// SetTo stores value for selected field for object CreateResourceRequest
func (fpv *CreateResourceRequest_FieldTerminalPathValue) SetTo(target **CreateResourceRequest) {
	if *target == nil {
		*target = new(CreateResourceRequest)
	}
	switch fpv.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*resource.ParentReference)
	case CreateResourceRequest_FieldPathSelectorResource:
		(*target).Resource = fpv.value.(*resource.Resource)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fpv.selector))
	}
}

func (fpv *CreateResourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateResourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateResourceRequest_FieldTerminalPathValue' with the value under path in 'CreateResourceRequest'.
func (fpv *CreateResourceRequest_FieldTerminalPathValue) CompareWith(source *CreateResourceRequest) (int, bool) {
	switch fpv.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*resource.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateResourceRequest_FieldPathSelectorResource:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fpv.selector))
	}
}

func (fpv *CreateResourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateResourceRequest))
}

type CreateResourceRequest_FieldSubPathValue struct {
	CreateResourceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateResourceRequest_FieldPathValue = (*CreateResourceRequest_FieldSubPathValue)(nil)

func (fpvs *CreateResourceRequest_FieldSubPathValue) AsResourcePathValue() (resource.Resource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource.Resource_FieldPathValue)
	return res, ok
}

func (fpvs *CreateResourceRequest_FieldSubPathValue) SetTo(target **CreateResourceRequest) {
	if *target == nil {
		*target = new(CreateResourceRequest)
	}
	switch fpvs.Selector() {
	case CreateResourceRequest_FieldPathSelectorResource:
		fpvs.subPathValue.(resource.Resource_FieldPathValue).SetTo(&(*target).Resource)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateResourceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateResourceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateResourceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateResourceRequest_FieldSubPathValue) CompareWith(source *CreateResourceRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateResourceRequest_FieldPathSelectorResource:
		return fpvs.subPathValue.(resource.Resource_FieldPathValue).CompareWith(source.GetResource())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateResourceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateResourceRequest))
}

// CreateResourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateResourceRequest according to their type
// Present only for array (repeated) types.
type CreateResourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateResourceRequest_FieldPath
	ContainsValue(*CreateResourceRequest) bool
}

// ParseCreateResourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateResourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateResourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateResourceRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateResourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateResourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateResourceRequest_FieldTerminalPathArrayItemValue struct {
	CreateResourceRequest_FieldTerminalPath
	value interface{}
}

var _ CreateResourceRequest_FieldPathArrayItemValue = (*CreateResourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateResourceRequest as interface{}
func (fpaiv *CreateResourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateResourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateResourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateResourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateResourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateResourceRequest'
func (fpaiv *CreateResourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateResourceRequest) bool {
	slice := fpaiv.CreateResourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateResourceRequest_FieldSubPathArrayItemValue struct {
	CreateResourceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateResourceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateResourceRequest_FieldSubPathArrayItemValue) AsResourcePathItemValue() (resource.Resource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateResourceRequest'
func (fpaivs *CreateResourceRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateResourceRequest) bool {
	switch fpaivs.Selector() {
	case CreateResourceRequest_FieldPathSelectorResource:
		return fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue).ContainsValue(source.GetResource())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateResourceRequest: %d", fpaivs.Selector()))
	}
}

// CreateResourceRequest_FieldPathArrayOfValues allows storing slice of values for CreateResourceRequest fields according to their type
type CreateResourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateResourceRequest_FieldPath
}

func ParseCreateResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateResourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateResourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateResourceRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateResourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateResourceRequest_FieldTerminalPathArrayOfValues struct {
	CreateResourceRequest_FieldTerminalPath
	values interface{}
}

var _ CreateResourceRequest_FieldPathArrayOfValues = (*CreateResourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateResourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateResourceRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*resource.ParentReference) {
			values = append(values, v)
		}
	case CreateResourceRequest_FieldPathSelectorResource:
		for _, v := range fpaov.values.([]*resource.Resource) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateResourceRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*resource.ParentReference, bool) {
	res, ok := fpaov.values.([]*resource.ParentReference)
	return res, ok
}
func (fpaov *CreateResourceRequest_FieldTerminalPathArrayOfValues) AsResourceArrayOfValues() ([]*resource.Resource, bool) {
	res, ok := fpaov.values.([]*resource.Resource)
	return res, ok
}

type CreateResourceRequest_FieldSubPathArrayOfValues struct {
	CreateResourceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateResourceRequest_FieldPathArrayOfValues = (*CreateResourceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateResourceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateResourceRequest_FieldSubPathArrayOfValues) AsResourcePathArrayOfValues() (resource.Resource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource.Resource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateResourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateResourceRequest_FieldPathSelector
	Get(source *UpdateResourceRequest) []interface{}
	GetSingle(source *UpdateResourceRequest) (interface{}, bool)
	ClearValue(item *UpdateResourceRequest)

	// Those methods build corresponding UpdateResourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateResourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateResourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateResourceRequest_FieldPathArrayItemValue
}

type UpdateResourceRequest_FieldPathSelector int32

const (
	UpdateResourceRequest_FieldPathSelectorResource   UpdateResourceRequest_FieldPathSelector = 0
	UpdateResourceRequest_FieldPathSelectorUpdateMask UpdateResourceRequest_FieldPathSelector = 1
	UpdateResourceRequest_FieldPathSelectorCas        UpdateResourceRequest_FieldPathSelector = 2
)

func (s UpdateResourceRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return "resource"
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateResourceRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", s))
	}
}

func BuildUpdateResourceRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateResourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateResourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource":
			return &UpdateResourceRequest_FieldTerminalPath{selector: UpdateResourceRequest_FieldPathSelectorResource}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateResourceRequest_FieldTerminalPath{selector: UpdateResourceRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateResourceRequest_FieldTerminalPath{selector: UpdateResourceRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "resource":
			if subpath, err := resource.BuildResource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateResourceRequest_FieldSubPath{selector: UpdateResourceRequest_FieldPathSelectorResource, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateResourceRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateResourceRequest_FieldSubPath{selector: UpdateResourceRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateResourceRequest", fp)
}

func ParseUpdateResourceRequest_FieldPath(rawField string) (UpdateResourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateResourceRequest_FieldPath(fp)
}

func MustParseUpdateResourceRequest_FieldPath(rawField string) UpdateResourceRequest_FieldPath {
	fp, err := ParseUpdateResourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateResourceRequest_FieldTerminalPath struct {
	selector UpdateResourceRequest_FieldPathSelector
}

var _ UpdateResourceRequest_FieldPath = (*UpdateResourceRequest_FieldTerminalPath)(nil)

func (fp *UpdateResourceRequest_FieldTerminalPath) Selector() UpdateResourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateResourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateResourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateResourceRequest
func (fp *UpdateResourceRequest_FieldTerminalPath) Get(source *UpdateResourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateResourceRequest_FieldPathSelectorResource:
			if source.Resource != nil {
				values = append(values, source.Resource)
			}
		case UpdateResourceRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateResourceRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateResourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateResourceRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateResourceRequest
func (fp *UpdateResourceRequest_FieldTerminalPath) GetSingle(source *UpdateResourceRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		res := source.GetResource()
		return res, res != nil
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateResourceRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateResourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateResourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return (*resource.Resource)(nil)
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		return (*resource.Resource_FieldMask)(nil)
	case UpdateResourceRequest_FieldPathSelectorCas:
		return (*UpdateResourceRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequest_FieldTerminalPath) ClearValue(item *UpdateResourceRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateResourceRequest_FieldPathSelectorResource:
			item.Resource = nil
		case UpdateResourceRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateResourceRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateResourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateResourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateResourceRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateResourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateResourceRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateResourceRequest_FieldPathValue {
	switch fp.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return &UpdateResourceRequest_FieldTerminalPathValue{UpdateResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource)}
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		return &UpdateResourceRequest_FieldTerminalPathValue{UpdateResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	case UpdateResourceRequest_FieldPathSelectorCas:
		return &UpdateResourceRequest_FieldTerminalPathValue{UpdateResourceRequest_FieldTerminalPath: *fp, value: value.(*UpdateResourceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateResourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateResourceRequest_FieldPathArrayOfValues {
	fpaov := &UpdateResourceRequest_FieldTerminalPathArrayOfValues{UpdateResourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return &UpdateResourceRequest_FieldTerminalPathArrayOfValues{UpdateResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource)}
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		return &UpdateResourceRequest_FieldTerminalPathArrayOfValues{UpdateResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	case UpdateResourceRequest_FieldPathSelectorCas:
		return &UpdateResourceRequest_FieldTerminalPathArrayOfValues{UpdateResourceRequest_FieldTerminalPath: *fp, values: values.([]*UpdateResourceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateResourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateResourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateResourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateResourceRequest_FieldSubPath struct {
	selector UpdateResourceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateResourceRequest_FieldPath = (*UpdateResourceRequest_FieldSubPath)(nil)

func (fps *UpdateResourceRequest_FieldSubPath) Selector() UpdateResourceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateResourceRequest_FieldSubPath) AsResourceSubPath() (resource.Resource_FieldPath, bool) {
	res, ok := fps.subPath.(resource.Resource_FieldPath)
	return res, ok
}
func (fps *UpdateResourceRequest_FieldSubPath) AsCasSubPath() (UpdateResourceRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateResourceRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateResourceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateResourceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateResourceRequest
func (fps *UpdateResourceRequest_FieldSubPath) Get(source *UpdateResourceRequest) (values []interface{}) {
	if asResourceFieldPath, ok := fps.AsResourceSubPath(); ok {
		values = append(values, asResourceFieldPath.Get(source.GetResource())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateResourceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateResourceRequest))
}

// GetSingle returns value of selected field from source UpdateResourceRequest
func (fps *UpdateResourceRequest_FieldSubPath) GetSingle(source *UpdateResourceRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		if source.GetResource() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResource())
	case UpdateResourceRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fps.selector))
	}
}

func (fps *UpdateResourceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateResourceRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateResourceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateResourceRequest_FieldSubPath) ClearValue(item *UpdateResourceRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateResourceRequest_FieldPathSelectorResource:
			fps.subPath.ClearValueRaw(item.Resource)
		case UpdateResourceRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateResourceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateResourceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateResourceRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateResourceRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateResourceRequest_FieldSubPath) WithIValue(value interface{}) UpdateResourceRequest_FieldPathValue {
	return &UpdateResourceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateResourceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateResourceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateResourceRequest_FieldPathArrayOfValues {
	return &UpdateResourceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateResourceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateResourceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateResourceRequest_FieldPathArrayItemValue {
	return &UpdateResourceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateResourceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateResourceRequest_FieldPathValue allows storing values for UpdateResourceRequest fields according to their type
type UpdateResourceRequest_FieldPathValue interface {
	UpdateResourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateResourceRequest)
	CompareWith(*UpdateResourceRequest) (cmp int, comparable bool)
}

func ParseUpdateResourceRequest_FieldPathValue(pathStr, valueStr string) (UpdateResourceRequest_FieldPathValue, error) {
	fp, err := ParseUpdateResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateResourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateResourceRequest_FieldPathValue), nil
}

func MustParseUpdateResourceRequest_FieldPathValue(pathStr, valueStr string) UpdateResourceRequest_FieldPathValue {
	fpv, err := ParseUpdateResourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateResourceRequest_FieldTerminalPathValue struct {
	UpdateResourceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateResourceRequest_FieldPathValue = (*UpdateResourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateResourceRequest' as interface{}
func (fpv *UpdateResourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateResourceRequest_FieldTerminalPathValue) AsResourceValue() (*resource.Resource, bool) {
	res, ok := fpv.value.(*resource.Resource)
	return res, ok
}
func (fpv *UpdateResourceRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}
func (fpv *UpdateResourceRequest_FieldTerminalPathValue) AsCasValue() (*UpdateResourceRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateResourceRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateResourceRequest
func (fpv *UpdateResourceRequest_FieldTerminalPathValue) SetTo(target **UpdateResourceRequest) {
	if *target == nil {
		*target = new(UpdateResourceRequest)
	}
	switch fpv.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		(*target).Resource = fpv.value.(*resource.Resource)
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*resource.Resource_FieldMask)
	case UpdateResourceRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateResourceRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateResourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateResourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateResourceRequest_FieldTerminalPathValue' with the value under path in 'UpdateResourceRequest'.
func (fpv *UpdateResourceRequest_FieldTerminalPathValue) CompareWith(source *UpdateResourceRequest) (int, bool) {
	switch fpv.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return 0, false
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateResourceRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateResourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateResourceRequest))
}

type UpdateResourceRequest_FieldSubPathValue struct {
	UpdateResourceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateResourceRequest_FieldPathValue = (*UpdateResourceRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateResourceRequest_FieldSubPathValue) AsResourcePathValue() (resource.Resource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource.Resource_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateResourceRequest_FieldSubPathValue) AsCasPathValue() (UpdateResourceRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateResourceRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateResourceRequest_FieldSubPathValue) SetTo(target **UpdateResourceRequest) {
	if *target == nil {
		*target = new(UpdateResourceRequest)
	}
	switch fpvs.Selector() {
	case UpdateResourceRequest_FieldPathSelectorResource:
		fpvs.subPathValue.(resource.Resource_FieldPathValue).SetTo(&(*target).Resource)
	case UpdateResourceRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateResourceRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateResourceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateResourceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateResourceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateResourceRequest_FieldSubPathValue) CompareWith(source *UpdateResourceRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return fpvs.subPathValue.(resource.Resource_FieldPathValue).CompareWith(source.GetResource())
	case UpdateResourceRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateResourceRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateResourceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateResourceRequest))
}

// UpdateResourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateResourceRequest according to their type
// Present only for array (repeated) types.
type UpdateResourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateResourceRequest_FieldPath
	ContainsValue(*UpdateResourceRequest) bool
}

// ParseUpdateResourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateResourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateResourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateResourceRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateResourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateResourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateResourceRequest_FieldTerminalPathArrayItemValue struct {
	UpdateResourceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateResourceRequest_FieldPathArrayItemValue = (*UpdateResourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateResourceRequest as interface{}
func (fpaiv *UpdateResourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateResourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateResourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateResourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateResourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateResourceRequest'
func (fpaiv *UpdateResourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateResourceRequest) bool {
	slice := fpaiv.UpdateResourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateResourceRequest_FieldSubPathArrayItemValue struct {
	UpdateResourceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateResourceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateResourceRequest_FieldSubPathArrayItemValue) AsResourcePathItemValue() (resource.Resource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateResourceRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateResourceRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateResourceRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateResourceRequest'
func (fpaivs *UpdateResourceRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateResourceRequest) bool {
	switch fpaivs.Selector() {
	case UpdateResourceRequest_FieldPathSelectorResource:
		return fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue).ContainsValue(source.GetResource())
	case UpdateResourceRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateResourceRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest: %d", fpaivs.Selector()))
	}
}

// UpdateResourceRequest_FieldPathArrayOfValues allows storing slice of values for UpdateResourceRequest fields according to their type
type UpdateResourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateResourceRequest_FieldPath
}

func ParseUpdateResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateResourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateResourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateResourceRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateResourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateResourceRequest_FieldTerminalPathArrayOfValues struct {
	UpdateResourceRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateResourceRequest_FieldPathArrayOfValues = (*UpdateResourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateResourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateResourceRequest_FieldPathSelectorResource:
		for _, v := range fpaov.values.([]*resource.Resource) {
			values = append(values, v)
		}
	case UpdateResourceRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	case UpdateResourceRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateResourceRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateResourceRequest_FieldTerminalPathArrayOfValues) AsResourceArrayOfValues() ([]*resource.Resource, bool) {
	res, ok := fpaov.values.([]*resource.Resource)
	return res, ok
}
func (fpaov *UpdateResourceRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}
func (fpaov *UpdateResourceRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateResourceRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateResourceRequest_CAS)
	return res, ok
}

type UpdateResourceRequest_FieldSubPathArrayOfValues struct {
	UpdateResourceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateResourceRequest_FieldPathArrayOfValues = (*UpdateResourceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateResourceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateResourceRequest_FieldSubPathArrayOfValues) AsResourcePathArrayOfValues() (resource.Resource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource.Resource_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateResourceRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateResourceRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateResourceRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateResourceRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateResourceRequestCAS_FieldPathSelector
	Get(source *UpdateResourceRequest_CAS) []interface{}
	GetSingle(source *UpdateResourceRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateResourceRequest_CAS)

	// Those methods build corresponding UpdateResourceRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateResourceRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateResourceRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateResourceRequestCAS_FieldPathArrayItemValue
}

type UpdateResourceRequestCAS_FieldPathSelector int32

const (
	UpdateResourceRequestCAS_FieldPathSelectorConditionalState UpdateResourceRequestCAS_FieldPathSelector = 0
	UpdateResourceRequestCAS_FieldPathSelectorFieldMask        UpdateResourceRequestCAS_FieldPathSelector = 1
)

func (s UpdateResourceRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", s))
	}
}

func BuildUpdateResourceRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateResourceRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateResourceRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateResourceRequestCAS_FieldTerminalPath{selector: UpdateResourceRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateResourceRequestCAS_FieldTerminalPath{selector: UpdateResourceRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := resource.BuildResource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateResourceRequestCAS_FieldSubPath{selector: UpdateResourceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateResourceRequest_CAS", fp)
}

func ParseUpdateResourceRequestCAS_FieldPath(rawField string) (UpdateResourceRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateResourceRequestCAS_FieldPath(fp)
}

func MustParseUpdateResourceRequestCAS_FieldPath(rawField string) UpdateResourceRequestCAS_FieldPath {
	fp, err := ParseUpdateResourceRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateResourceRequestCAS_FieldTerminalPath struct {
	selector UpdateResourceRequestCAS_FieldPathSelector
}

var _ UpdateResourceRequestCAS_FieldPath = (*UpdateResourceRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) Selector() UpdateResourceRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateResourceRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateResourceRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateResourceRequest_CAS
func (fp *UpdateResourceRequestCAS_FieldTerminalPath) Get(source *UpdateResourceRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateResourceRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateResourceRequest_CAS
func (fp *UpdateResourceRequestCAS_FieldTerminalPath) GetSingle(source *UpdateResourceRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateResourceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateResourceRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return (*resource.Resource)(nil)
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		return (*resource.Resource_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) ClearValue(item *UpdateResourceRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateResourceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateResourceRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateResourceRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateResourceRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateResourceRequestCAS_FieldTerminalPathValue{UpdateResourceRequestCAS_FieldTerminalPath: *fp, value: value.(*resource.Resource)}
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateResourceRequestCAS_FieldTerminalPathValue{UpdateResourceRequestCAS_FieldTerminalPath: *fp, value: value.(*resource.Resource_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateResourceRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues{UpdateResourceRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues{UpdateResourceRequestCAS_FieldTerminalPath: *fp, values: values.([]*resource.Resource)}
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues{UpdateResourceRequestCAS_FieldTerminalPath: *fp, values: values.([]*resource.Resource_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateResourceRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateResourceRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateResourceRequestCAS_FieldSubPath struct {
	selector UpdateResourceRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateResourceRequestCAS_FieldPath = (*UpdateResourceRequestCAS_FieldSubPath)(nil)

func (fps *UpdateResourceRequestCAS_FieldSubPath) Selector() UpdateResourceRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateResourceRequestCAS_FieldSubPath) AsConditionalStateSubPath() (resource.Resource_FieldPath, bool) {
	res, ok := fps.subPath.(resource.Resource_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateResourceRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateResourceRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateResourceRequest_CAS
func (fps *UpdateResourceRequestCAS_FieldSubPath) Get(source *UpdateResourceRequest_CAS) (values []interface{}) {
	if asResourceFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asResourceFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateResourceRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateResourceRequest_CAS
func (fps *UpdateResourceRequestCAS_FieldSubPath) GetSingle(source *UpdateResourceRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateResourceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateResourceRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) ClearValue(item *UpdateResourceRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateResourceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateResourceRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateResourceRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateResourceRequestCAS_FieldPathValue {
	return &UpdateResourceRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateResourceRequestCAS_FieldPathArrayOfValues {
	return &UpdateResourceRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateResourceRequestCAS_FieldPathArrayItemValue {
	return &UpdateResourceRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateResourceRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateResourceRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateResourceRequestCAS_FieldPathValue interface {
	UpdateResourceRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateResourceRequest_CAS)
	CompareWith(*UpdateResourceRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateResourceRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateResourceRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateResourceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateResourceRequestCAS_FieldPathValue), nil
}

func MustParseUpdateResourceRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateResourceRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateResourceRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateResourceRequestCAS_FieldTerminalPathValue struct {
	UpdateResourceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateResourceRequestCAS_FieldPathValue = (*UpdateResourceRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*resource.Resource, bool) {
	res, ok := fpv.value.(*resource.Resource)
	return res, ok
}
func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*resource.Resource_FieldMask, bool) {
	res, ok := fpv.value.(*resource.Resource_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateResourceRequest_CAS) {
	if *target == nil {
		*target = new(UpdateResourceRequest_CAS)
	}
	switch fpv.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*resource.Resource)
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*resource.Resource_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateResourceRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateResourceRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateResourceRequest_CAS'.
func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateResourceRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateResourceRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateResourceRequest_CAS))
}

type UpdateResourceRequestCAS_FieldSubPathValue struct {
	UpdateResourceRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateResourceRequestCAS_FieldPathValue = (*UpdateResourceRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateResourceRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (resource.Resource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource.Resource_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateResourceRequestCAS_FieldSubPathValue) SetTo(target **UpdateResourceRequest_CAS) {
	if *target == nil {
		*target = new(UpdateResourceRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(resource.Resource_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateResourceRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateResourceRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateResourceRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateResourceRequestCAS_FieldSubPathValue) CompareWith(source *UpdateResourceRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(resource.Resource_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateResourceRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateResourceRequest_CAS))
}

// UpdateResourceRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateResourceRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateResourceRequestCAS_FieldPath
	ContainsValue(*UpdateResourceRequest_CAS) bool
}

// ParseUpdateResourceRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateResourceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateResourceRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateResourceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateResourceRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateResourceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateResourceRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateResourceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateResourceRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateResourceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateResourceRequestCAS_FieldPathArrayItemValue = (*UpdateResourceRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateResourceRequest_CAS as interface{}
func (fpaiv *UpdateResourceRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateResourceRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateResourceRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateResourceRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateResourceRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateResourceRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateResourceRequest_CAS) bool {
	slice := fpaiv.UpdateResourceRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateResourceRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateResourceRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateResourceRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateResourceRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (resource.Resource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateResourceRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateResourceRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(resource.Resource_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateResourceRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateResourceRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateResourceRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateResourceRequestCAS_FieldPath
}

func ParseUpdateResourceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateResourceRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateResourceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateResourceRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateResourceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateResourceRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateResourceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateResourceRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateResourceRequestCAS_FieldPathArrayOfValues = (*UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateResourceRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*resource.Resource) {
			values = append(values, v)
		}
	case UpdateResourceRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*resource.Resource_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*resource.Resource, bool) {
	res, ok := fpaov.values.([]*resource.Resource)
	return res, ok
}
func (fpaov *UpdateResourceRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*resource.Resource_FieldMask, bool) {
	res, ok := fpaov.values.([]*resource.Resource_FieldMask)
	return res, ok
}

type UpdateResourceRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateResourceRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateResourceRequestCAS_FieldPathArrayOfValues = (*UpdateResourceRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateResourceRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateResourceRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (resource.Resource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource.Resource_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteResourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteResourceRequest_FieldPathSelector
	Get(source *DeleteResourceRequest) []interface{}
	GetSingle(source *DeleteResourceRequest) (interface{}, bool)
	ClearValue(item *DeleteResourceRequest)

	// Those methods build corresponding DeleteResourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteResourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteResourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteResourceRequest_FieldPathArrayItemValue
}

type DeleteResourceRequest_FieldPathSelector int32

const (
	DeleteResourceRequest_FieldPathSelectorName DeleteResourceRequest_FieldPathSelector = 0
)

func (s DeleteResourceRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteResourceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", s))
	}
}

func BuildDeleteResourceRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteResourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteResourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteResourceRequest_FieldTerminalPath{selector: DeleteResourceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteResourceRequest", fp)
}

func ParseDeleteResourceRequest_FieldPath(rawField string) (DeleteResourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteResourceRequest_FieldPath(fp)
}

func MustParseDeleteResourceRequest_FieldPath(rawField string) DeleteResourceRequest_FieldPath {
	fp, err := ParseDeleteResourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteResourceRequest_FieldTerminalPath struct {
	selector DeleteResourceRequest_FieldPathSelector
}

var _ DeleteResourceRequest_FieldPath = (*DeleteResourceRequest_FieldTerminalPath)(nil)

func (fp *DeleteResourceRequest_FieldTerminalPath) Selector() DeleteResourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteResourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteResourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteResourceRequest
func (fp *DeleteResourceRequest_FieldTerminalPath) Get(source *DeleteResourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteResourceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteResourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteResourceRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteResourceRequest
func (fp *DeleteResourceRequest_FieldTerminalPath) GetSingle(source *DeleteResourceRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
	}
}

func (fp *DeleteResourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteResourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteResourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		return (*resource.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
	}
}

func (fp *DeleteResourceRequest_FieldTerminalPath) ClearValue(item *DeleteResourceRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteResourceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteResourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteResourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteResourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteResourceRequest_FieldPathSelectorName
}

func (fp *DeleteResourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteResourceRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteResourceRequest_FieldPathValue {
	switch fp.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		return &DeleteResourceRequest_FieldTerminalPathValue{DeleteResourceRequest_FieldTerminalPath: *fp, value: value.(*resource.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
	}
}

func (fp *DeleteResourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteResourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteResourceRequest_FieldPathArrayOfValues {
	fpaov := &DeleteResourceRequest_FieldTerminalPathArrayOfValues{DeleteResourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		return &DeleteResourceRequest_FieldTerminalPathArrayOfValues{DeleteResourceRequest_FieldTerminalPath: *fp, values: values.([]*resource.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteResourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteResourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteResourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fp.selector))
	}
}

func (fp *DeleteResourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteResourceRequest_FieldPathValue allows storing values for DeleteResourceRequest fields according to their type
type DeleteResourceRequest_FieldPathValue interface {
	DeleteResourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteResourceRequest)
	CompareWith(*DeleteResourceRequest) (cmp int, comparable bool)
}

func ParseDeleteResourceRequest_FieldPathValue(pathStr, valueStr string) (DeleteResourceRequest_FieldPathValue, error) {
	fp, err := ParseDeleteResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteResourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteResourceRequest_FieldPathValue), nil
}

func MustParseDeleteResourceRequest_FieldPathValue(pathStr, valueStr string) DeleteResourceRequest_FieldPathValue {
	fpv, err := ParseDeleteResourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteResourceRequest_FieldTerminalPathValue struct {
	DeleteResourceRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteResourceRequest_FieldPathValue = (*DeleteResourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteResourceRequest' as interface{}
func (fpv *DeleteResourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteResourceRequest_FieldTerminalPathValue) AsNameValue() (*resource.Reference, bool) {
	res, ok := fpv.value.(*resource.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteResourceRequest
func (fpv *DeleteResourceRequest_FieldTerminalPathValue) SetTo(target **DeleteResourceRequest) {
	if *target == nil {
		*target = new(DeleteResourceRequest)
	}
	switch fpv.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*resource.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteResourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteResourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteResourceRequest_FieldTerminalPathValue' with the value under path in 'DeleteResourceRequest'.
func (fpv *DeleteResourceRequest_FieldTerminalPathValue) CompareWith(source *DeleteResourceRequest) (int, bool) {
	switch fpv.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*resource.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteResourceRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteResourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteResourceRequest))
}

// DeleteResourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteResourceRequest according to their type
// Present only for array (repeated) types.
type DeleteResourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteResourceRequest_FieldPath
	ContainsValue(*DeleteResourceRequest) bool
}

// ParseDeleteResourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteResourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteResourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteResourceRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteResourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteResourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteResourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteResourceRequest_FieldTerminalPathArrayItemValue struct {
	DeleteResourceRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteResourceRequest_FieldPathArrayItemValue = (*DeleteResourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteResourceRequest as interface{}
func (fpaiv *DeleteResourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteResourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteResourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteResourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteResourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteResourceRequest'
func (fpaiv *DeleteResourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteResourceRequest) bool {
	slice := fpaiv.DeleteResourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteResourceRequest_FieldPathArrayOfValues allows storing slice of values for DeleteResourceRequest fields according to their type
type DeleteResourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteResourceRequest_FieldPath
}

func ParseDeleteResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteResourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteResourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteResourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteResourceRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteResourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteResourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteResourceRequest_FieldTerminalPathArrayOfValues struct {
	DeleteResourceRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteResourceRequest_FieldPathArrayOfValues = (*DeleteResourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteResourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteResourceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*resource.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteResourceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*resource.Reference, bool) {
	res, ok := fpaov.values.([]*resource.Reference)
	return res, ok
}
