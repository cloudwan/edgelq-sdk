// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/resource_service.proto
// DO NOT EDIT!!!

package resource_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	resource "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/resource"
	service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &resource.Resource{}
	_ = &service.Service{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetResourceRequest) GotenObjectExt() {}

func (o *GetResourceRequest) MakeFullFieldMask() *GetResourceRequest_FieldMask {
	return FullGetResourceRequest_FieldMask()
}

func (o *GetResourceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetResourceRequest_FieldMask()
}

func (o *GetResourceRequest) MakeDiffFieldMask(other *GetResourceRequest) *GetResourceRequest_FieldMask {
	if o == nil && other == nil {
		return &GetResourceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetResourceRequest_FieldMask()
	}

	res := &GetResourceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetResourceRequest_FieldTerminalPath{selector: GetResourceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetResourceRequest_FieldTerminalPath{selector: GetResourceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetResourceRequest_FieldTerminalPath{selector: GetResourceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetResourceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetResourceRequest))
}

func (o *GetResourceRequest) Clone() *GetResourceRequest {
	if o == nil {
		return nil
	}
	result := &GetResourceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &resource.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*resource.Resource_FieldMask)
	result.View = o.View
	return result
}

func (o *GetResourceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetResourceRequest) Merge(source *GetResourceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &resource.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetResourceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetResourceRequest))
}

func (o *BatchGetResourcesRequest) GotenObjectExt() {}

func (o *BatchGetResourcesRequest) MakeFullFieldMask() *BatchGetResourcesRequest_FieldMask {
	return FullBatchGetResourcesRequest_FieldMask()
}

func (o *BatchGetResourcesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetResourcesRequest_FieldMask()
}

func (o *BatchGetResourcesRequest) MakeDiffFieldMask(other *BatchGetResourcesRequest) *BatchGetResourcesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetResourcesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetResourcesRequest_FieldMask()
	}

	res := &BatchGetResourcesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetResourcesRequest_FieldTerminalPath{selector: BatchGetResourcesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetResourcesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetResourcesRequest))
}

func (o *BatchGetResourcesRequest) Clone() *BatchGetResourcesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetResourcesRequest{}
	result.Names = make([]*resource.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &resource.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*resource.Resource_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetResourcesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetResourcesRequest) Merge(source *BatchGetResourcesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &resource.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetResourcesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetResourcesRequest))
}

func (o *BatchGetResourcesResponse) GotenObjectExt() {}

func (o *BatchGetResourcesResponse) MakeFullFieldMask() *BatchGetResourcesResponse_FieldMask {
	return FullBatchGetResourcesResponse_FieldMask()
}

func (o *BatchGetResourcesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetResourcesResponse_FieldMask()
}

func (o *BatchGetResourcesResponse) MakeDiffFieldMask(other *BatchGetResourcesResponse) *BatchGetResourcesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetResourcesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetResourcesResponse_FieldMask()
	}

	res := &BatchGetResourcesResponse_FieldMask{}

	if len(o.GetResources()) == len(other.GetResources()) {
		for i, lValue := range o.GetResources() {
			rValue := other.GetResources()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetResourcesResponse_FieldTerminalPath{selector: BatchGetResourcesResponse_FieldPathSelectorResources})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetResourcesResponse_FieldTerminalPath{selector: BatchGetResourcesResponse_FieldPathSelectorResources})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetResourcesResponse_FieldTerminalPath{selector: BatchGetResourcesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetResourcesResponse_FieldTerminalPath{selector: BatchGetResourcesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetResourcesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetResourcesResponse))
}

func (o *BatchGetResourcesResponse) Clone() *BatchGetResourcesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetResourcesResponse{}
	result.Resources = make([]*resource.Resource, len(o.Resources))
	for i, sourceValue := range o.Resources {
		result.Resources[i] = sourceValue.Clone()
	}
	result.Missing = make([]*resource.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &resource.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetResourcesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetResourcesResponse) Merge(source *BatchGetResourcesResponse) {
	for _, sourceValue := range source.GetResources() {
		exists := false
		for _, currentValue := range o.Resources {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource.Resource
			if sourceValue != nil {
				newDstElement = new(resource.Resource)
				newDstElement.Merge(sourceValue)
			}
			o.Resources = append(o.Resources, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &resource.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetResourcesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetResourcesResponse))
}

func (o *ListResourcesRequest) GotenObjectExt() {}

func (o *ListResourcesRequest) MakeFullFieldMask() *ListResourcesRequest_FieldMask {
	return FullListResourcesRequest_FieldMask()
}

func (o *ListResourcesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListResourcesRequest_FieldMask()
}

func (o *ListResourcesRequest) MakeDiffFieldMask(other *ListResourcesRequest) *ListResourcesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListResourcesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListResourcesRequest_FieldMask()
	}

	res := &ListResourcesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListResourcesRequest_FieldTerminalPath{selector: ListResourcesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListResourcesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListResourcesRequest))
}

func (o *ListResourcesRequest) Clone() *ListResourcesRequest {
	if o == nil {
		return nil
	}
	result := &ListResourcesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &resource.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &resource.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &resource.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &resource.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*resource.Resource_FieldMask)
	result.View = o.View
	return result
}

func (o *ListResourcesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListResourcesRequest) Merge(source *ListResourcesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &resource.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &resource.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &resource.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &resource.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListResourcesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListResourcesRequest))
}

func (o *ListResourcesResponse) GotenObjectExt() {}

func (o *ListResourcesResponse) MakeFullFieldMask() *ListResourcesResponse_FieldMask {
	return FullListResourcesResponse_FieldMask()
}

func (o *ListResourcesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListResourcesResponse_FieldMask()
}

func (o *ListResourcesResponse) MakeDiffFieldMask(other *ListResourcesResponse) *ListResourcesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListResourcesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListResourcesResponse_FieldMask()
	}

	res := &ListResourcesResponse_FieldMask{}

	if len(o.GetResources()) == len(other.GetResources()) {
		for i, lValue := range o.GetResources() {
			rValue := other.GetResources()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorResources})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorResources})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListResourcesResponse_FieldTerminalPath{selector: ListResourcesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListResourcesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListResourcesResponse))
}

func (o *ListResourcesResponse) Clone() *ListResourcesResponse {
	if o == nil {
		return nil
	}
	result := &ListResourcesResponse{}
	result.Resources = make([]*resource.Resource, len(o.Resources))
	for i, sourceValue := range o.Resources {
		result.Resources[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &resource.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &resource.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListResourcesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListResourcesResponse) Merge(source *ListResourcesResponse) {
	for _, sourceValue := range source.GetResources() {
		exists := false
		for _, currentValue := range o.Resources {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource.Resource
			if sourceValue != nil {
				newDstElement = new(resource.Resource)
				newDstElement.Merge(sourceValue)
			}
			o.Resources = append(o.Resources, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &resource.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &resource.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListResourcesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListResourcesResponse))
}

func (o *WatchResourceRequest) GotenObjectExt() {}

func (o *WatchResourceRequest) MakeFullFieldMask() *WatchResourceRequest_FieldMask {
	return FullWatchResourceRequest_FieldMask()
}

func (o *WatchResourceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchResourceRequest_FieldMask()
}

func (o *WatchResourceRequest) MakeDiffFieldMask(other *WatchResourceRequest) *WatchResourceRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchResourceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchResourceRequest_FieldMask()
	}

	res := &WatchResourceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchResourceRequest_FieldTerminalPath{selector: WatchResourceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchResourceRequest_FieldTerminalPath{selector: WatchResourceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchResourceRequest_FieldTerminalPath{selector: WatchResourceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchResourceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchResourceRequest))
}

func (o *WatchResourceRequest) Clone() *WatchResourceRequest {
	if o == nil {
		return nil
	}
	result := &WatchResourceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &resource.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*resource.Resource_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchResourceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchResourceRequest) Merge(source *WatchResourceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &resource.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchResourceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchResourceRequest))
}

func (o *WatchResourceResponse) GotenObjectExt() {}

func (o *WatchResourceResponse) MakeFullFieldMask() *WatchResourceResponse_FieldMask {
	return FullWatchResourceResponse_FieldMask()
}

func (o *WatchResourceResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchResourceResponse_FieldMask()
}

func (o *WatchResourceResponse) MakeDiffFieldMask(other *WatchResourceResponse) *WatchResourceResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchResourceResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchResourceResponse_FieldMask()
	}

	res := &WatchResourceResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchResourceResponse_FieldTerminalPath{selector: WatchResourceResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchResourceResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchResourceResponse))
}

func (o *WatchResourceResponse) Clone() *WatchResourceResponse {
	if o == nil {
		return nil
	}
	result := &WatchResourceResponse{}
	result.Change = proto.Clone(o.Change).(*resource.ResourceChange)
	return result
}

func (o *WatchResourceResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchResourceResponse) Merge(source *WatchResourceResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(resource.ResourceChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchResourceResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchResourceResponse))
}

func (o *WatchResourcesRequest) GotenObjectExt() {}

func (o *WatchResourcesRequest) MakeFullFieldMask() *WatchResourcesRequest_FieldMask {
	return FullWatchResourcesRequest_FieldMask()
}

func (o *WatchResourcesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchResourcesRequest_FieldMask()
}

func (o *WatchResourcesRequest) MakeDiffFieldMask(other *WatchResourcesRequest) *WatchResourcesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchResourcesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchResourcesRequest_FieldMask()
	}

	res := &WatchResourcesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchResourcesRequest_FieldTerminalPath{selector: WatchResourcesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchResourcesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchResourcesRequest))
}

func (o *WatchResourcesRequest) Clone() *WatchResourcesRequest {
	if o == nil {
		return nil
	}
	result := &WatchResourcesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &resource.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &resource.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &resource.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &resource.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*resource.Resource_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchResourcesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchResourcesRequest) Merge(source *WatchResourcesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &resource.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &resource.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &resource.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &resource.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchResourcesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchResourcesRequest))
}

func (o *WatchResourcesResponse) GotenObjectExt() {}

func (o *WatchResourcesResponse) MakeFullFieldMask() *WatchResourcesResponse_FieldMask {
	return FullWatchResourcesResponse_FieldMask()
}

func (o *WatchResourcesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchResourcesResponse_FieldMask()
}

func (o *WatchResourcesResponse) MakeDiffFieldMask(other *WatchResourcesResponse) *WatchResourcesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchResourcesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchResourcesResponse_FieldMask()
	}

	res := &WatchResourcesResponse_FieldMask{}

	if len(o.GetResourceChanges()) == len(other.GetResourceChanges()) {
		for i, lValue := range o.GetResourceChanges() {
			rValue := other.GetResourceChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorResourceChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorResourceChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchResourcesResponse_FieldSubPath{selector: WatchResourcesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchResourcesResponse_FieldTerminalPath{selector: WatchResourcesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchResourcesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchResourcesResponse))
}

func (o *WatchResourcesResponse) Clone() *WatchResourcesResponse {
	if o == nil {
		return nil
	}
	result := &WatchResourcesResponse{}
	result.ResourceChanges = make([]*resource.ResourceChange, len(o.ResourceChanges))
	for i, sourceValue := range o.ResourceChanges {
		result.ResourceChanges[i] = proto.Clone(sourceValue).(*resource.ResourceChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchResourcesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchResourcesResponse) Merge(source *WatchResourcesResponse) {
	for _, sourceValue := range source.GetResourceChanges() {
		exists := false
		for _, currentValue := range o.ResourceChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource.ResourceChange
			if sourceValue != nil {
				newDstElement = new(resource.ResourceChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ResourceChanges = append(o.ResourceChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchResourcesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchResourcesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchResourcesResponse))
}

func (o *WatchResourcesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchResourcesResponse_PageTokenChange) MakeFullFieldMask() *WatchResourcesResponse_PageTokenChange_FieldMask {
	return FullWatchResourcesResponse_PageTokenChange_FieldMask()
}

func (o *WatchResourcesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchResourcesResponse_PageTokenChange_FieldMask()
}

func (o *WatchResourcesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchResourcesResponse_PageTokenChange) *WatchResourcesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchResourcesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchResourcesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchResourcesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchResourcesResponsePageTokenChange_FieldTerminalPath{selector: WatchResourcesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchResourcesResponsePageTokenChange_FieldTerminalPath{selector: WatchResourcesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchResourcesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchResourcesResponse_PageTokenChange))
}

func (o *WatchResourcesResponse_PageTokenChange) Clone() *WatchResourcesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchResourcesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &resource.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &resource.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchResourcesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchResourcesResponse_PageTokenChange) Merge(source *WatchResourcesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &resource.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &resource.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchResourcesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchResourcesResponse_PageTokenChange))
}

func (o *CreateResourceRequest) GotenObjectExt() {}

func (o *CreateResourceRequest) MakeFullFieldMask() *CreateResourceRequest_FieldMask {
	return FullCreateResourceRequest_FieldMask()
}

func (o *CreateResourceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateResourceRequest_FieldMask()
}

func (o *CreateResourceRequest) MakeDiffFieldMask(other *CreateResourceRequest) *CreateResourceRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateResourceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateResourceRequest_FieldMask()
	}

	res := &CreateResourceRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateResourceRequest_FieldTerminalPath{selector: CreateResourceRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetResource().MakeDiffFieldMask(other.GetResource())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateResourceRequest_FieldTerminalPath{selector: CreateResourceRequest_FieldPathSelectorResource})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateResourceRequest_FieldSubPath{selector: CreateResourceRequest_FieldPathSelectorResource, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateResourceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateResourceRequest))
}

func (o *CreateResourceRequest) Clone() *CreateResourceRequest {
	if o == nil {
		return nil
	}
	result := &CreateResourceRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &resource.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Resource = o.Resource.Clone()
	return result
}

func (o *CreateResourceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateResourceRequest) Merge(source *CreateResourceRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &resource.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetResource() != nil {
		if o.Resource == nil {
			o.Resource = new(resource.Resource)
		}
		o.Resource.Merge(source.GetResource())
	}
}

func (o *CreateResourceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateResourceRequest))
}

func (o *UpdateResourceRequest) GotenObjectExt() {}

func (o *UpdateResourceRequest) MakeFullFieldMask() *UpdateResourceRequest_FieldMask {
	return FullUpdateResourceRequest_FieldMask()
}

func (o *UpdateResourceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateResourceRequest_FieldMask()
}

func (o *UpdateResourceRequest) MakeDiffFieldMask(other *UpdateResourceRequest) *UpdateResourceRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateResourceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateResourceRequest_FieldMask()
	}

	res := &UpdateResourceRequest_FieldMask{}
	{
		subMask := o.GetResource().MakeDiffFieldMask(other.GetResource())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateResourceRequest_FieldTerminalPath{selector: UpdateResourceRequest_FieldPathSelectorResource})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateResourceRequest_FieldSubPath{selector: UpdateResourceRequest_FieldPathSelectorResource, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateResourceRequest_FieldTerminalPath{selector: UpdateResourceRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateResourceRequest_FieldTerminalPath{selector: UpdateResourceRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateResourceRequest_FieldSubPath{selector: UpdateResourceRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateResourceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateResourceRequest))
}

func (o *UpdateResourceRequest) Clone() *UpdateResourceRequest {
	if o == nil {
		return nil
	}
	result := &UpdateResourceRequest{}
	result.Resource = o.Resource.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*resource.Resource_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateResourceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateResourceRequest) Merge(source *UpdateResourceRequest) {
	if source.GetResource() != nil {
		if o.Resource == nil {
			o.Resource = new(resource.Resource)
		}
		o.Resource.Merge(source.GetResource())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateResourceRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateResourceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateResourceRequest))
}

func (o *UpdateResourceRequest_CAS) GotenObjectExt() {}

func (o *UpdateResourceRequest_CAS) MakeFullFieldMask() *UpdateResourceRequest_CAS_FieldMask {
	return FullUpdateResourceRequest_CAS_FieldMask()
}

func (o *UpdateResourceRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateResourceRequest_CAS_FieldMask()
}

func (o *UpdateResourceRequest_CAS) MakeDiffFieldMask(other *UpdateResourceRequest_CAS) *UpdateResourceRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateResourceRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateResourceRequest_CAS_FieldMask()
	}

	res := &UpdateResourceRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateResourceRequestCAS_FieldTerminalPath{selector: UpdateResourceRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateResourceRequestCAS_FieldSubPath{selector: UpdateResourceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateResourceRequestCAS_FieldTerminalPath{selector: UpdateResourceRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateResourceRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateResourceRequest_CAS))
}

func (o *UpdateResourceRequest_CAS) Clone() *UpdateResourceRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateResourceRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*resource.Resource_FieldMask)
	return result
}

func (o *UpdateResourceRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateResourceRequest_CAS) Merge(source *UpdateResourceRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(resource.Resource)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(resource.Resource_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateResourceRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateResourceRequest_CAS))
}

func (o *DeleteResourceRequest) GotenObjectExt() {}

func (o *DeleteResourceRequest) MakeFullFieldMask() *DeleteResourceRequest_FieldMask {
	return FullDeleteResourceRequest_FieldMask()
}

func (o *DeleteResourceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteResourceRequest_FieldMask()
}

func (o *DeleteResourceRequest) MakeDiffFieldMask(other *DeleteResourceRequest) *DeleteResourceRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteResourceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteResourceRequest_FieldMask()
	}

	res := &DeleteResourceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteResourceRequest_FieldTerminalPath{selector: DeleteResourceRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteResourceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteResourceRequest))
}

func (o *DeleteResourceRequest) Clone() *DeleteResourceRequest {
	if o == nil {
		return nil
	}
	result := &DeleteResourceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &resource.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteResourceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteResourceRequest) Merge(source *DeleteResourceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &resource.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteResourceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteResourceRequest))
}
