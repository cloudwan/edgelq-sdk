// Code generated by protoc-gen-goten-client
// API: RegionService
// DO NOT EDIT!!!

package region_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &region.Region{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegionServiceClient is the client API for RegionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionServiceClient interface {
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*region.Region, error)
	BatchGetRegions(ctx context.Context, in *BatchGetRegionsRequest, opts ...grpc.CallOption) (*BatchGetRegionsResponse, error)
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	WatchRegion(ctx context.Context, in *WatchRegionRequest, opts ...grpc.CallOption) (WatchRegionClientStream, error)
	WatchRegions(ctx context.Context, in *WatchRegionsRequest, opts ...grpc.CallOption) (WatchRegionsClientStream, error)
	CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*region.Region, error)
	UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*region.Region, error)
	DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewRegionServiceClient(cc grpc.ClientConnInterface) RegionServiceClient {
	return &client{cc}
}

func (c *client) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*region.Region, error) {
	out := new(region.Region)
	err := c.cc.Invoke(ctx, "/ntt.meta.v1alpha2.RegionService/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetRegions(ctx context.Context, in *BatchGetRegionsRequest, opts ...grpc.CallOption) (*BatchGetRegionsResponse, error) {
	out := new(BatchGetRegionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.meta.v1alpha2.RegionService/BatchGetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.meta.v1alpha2.RegionService/ListRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchRegion(ctx context.Context, in *WatchRegionRequest, opts ...grpc.CallOption) (WatchRegionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchRegion",
			ServerStreams: true,
		},
		"/ntt.meta.v1alpha2.RegionService/WatchRegion", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchRegionWatchRegionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchRegionClientStream interface {
	Recv() (*WatchRegionResponse, error)
	grpc.ClientStream
}

type watchRegionWatchRegionClient struct {
	grpc.ClientStream
}

func (x *watchRegionWatchRegionClient) Recv() (*WatchRegionResponse, error) {
	m := new(WatchRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchRegions(ctx context.Context, in *WatchRegionsRequest, opts ...grpc.CallOption) (WatchRegionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchRegions",
			ServerStreams: true,
		},
		"/ntt.meta.v1alpha2.RegionService/WatchRegions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchRegionsWatchRegionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchRegionsClientStream interface {
	Recv() (*WatchRegionsResponse, error)
	grpc.ClientStream
}

type watchRegionsWatchRegionsClient struct {
	grpc.ClientStream
}

func (x *watchRegionsWatchRegionsClient) Recv() (*WatchRegionsResponse, error) {
	m := new(WatchRegionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*region.Region, error) {
	out := new(region.Region)
	err := c.cc.Invoke(ctx, "/ntt.meta.v1alpha2.RegionService/CreateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*region.Region, error) {
	out := new(region.Region)
	err := c.cc.Invoke(ctx, "/ntt.meta.v1alpha2.RegionService/UpdateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.meta.v1alpha2.RegionService/DeleteRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
