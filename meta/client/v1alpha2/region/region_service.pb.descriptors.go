// Code generated by protoc-gen-goten-client
// API: RegionService
// DO NOT EDIT!!!

package region_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &region.Region{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized    bool
	regionServiceDescriptor   *RegionServiceDescriptor
	getRegionDescriptor       *GetRegionDescriptor
	batchGetRegionsDescriptor *BatchGetRegionsDescriptor
	listRegionsDescriptor     *ListRegionsDescriptor
	watchRegionDescriptor     *WatchRegionDescriptor
	watchRegionsDescriptor    *WatchRegionsDescriptor
	createRegionDescriptor    *CreateRegionDescriptor
	updateRegionDescriptor    *UpdateRegionDescriptor
	deleteRegionDescriptor    *DeleteRegionDescriptor
)

type GetRegionDescriptor struct{}

type GetRegionDescriptorClientMsgHandle struct{}

type GetRegionDescriptorServerMsgHandle struct{}

func (d *GetRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetRegionRequest{}
}

func (d *GetRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &region.Region{}
}

func (d *GetRegionDescriptor) IsUnary() bool {
	return true
}

func (d *GetRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetRegionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetRegionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetRegionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetRegionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetRegionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetRegionDescriptor) GetMethodName() string {
	return "GetRegion"
}

func (d *GetRegionDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/GetRegion"
}

func (d *GetRegionDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *GetRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *GetRegionDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *GetRegionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *GetRegionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *GetRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRegionDescriptorClientMsgHandle{}
}

func (d *GetRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRegionDescriptorServerMsgHandle{}
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*region.Name)(nil)
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*region.Region) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*region.Region) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetRegionDescriptor() *GetRegionDescriptor {
	return getRegionDescriptor
}

type BatchGetRegionsDescriptor struct{}

type BatchGetRegionsDescriptorClientMsgHandle struct{}

type BatchGetRegionsDescriptorServerMsgHandle struct{}

func (d *BatchGetRegionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetRegionsRequest{}
}

func (d *BatchGetRegionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetRegionsResponse{}
}

func (d *BatchGetRegionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetRegionsDescriptor) GetMethodName() string {
	return "BatchGetRegions"
}

func (d *BatchGetRegionsDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/BatchGetRegions"
}

func (d *BatchGetRegionsDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *BatchGetRegionsDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *BatchGetRegionsDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *BatchGetRegionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetRegionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *BatchGetRegionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *BatchGetRegionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRegionsDescriptorClientMsgHandle{}
}

func (d *BatchGetRegionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRegionsDescriptorServerMsgHandle{}
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetRegionsRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetRegionsRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(region.RegionNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (region.RegionNameList)(nil)
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetRegionsResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetRegionsResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetRegions()
	list := make(region.RegionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetRegionsDescriptor() *BatchGetRegionsDescriptor {
	return batchGetRegionsDescriptor
}

type ListRegionsDescriptor struct{}

type ListRegionsDescriptorClientMsgHandle struct{}

type ListRegionsDescriptorServerMsgHandle struct{}

func (d *ListRegionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListRegionsRequest{}
}

func (d *ListRegionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListRegionsResponse{}
}

func (d *ListRegionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListRegionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListRegionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListRegionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListRegionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListRegionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListRegionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListRegionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListRegionsDescriptor) GetMethodName() string {
	return "ListRegions"
}

func (d *ListRegionsDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/ListRegions"
}

func (d *ListRegionsDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *ListRegionsDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *ListRegionsDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *ListRegionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListRegionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *ListRegionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *ListRegionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRegionsDescriptorClientMsgHandle{}
}

func (d *ListRegionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRegionsDescriptorServerMsgHandle{}
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListRegionsRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListRegionsRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListRegionsResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListRegionsResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetRegions()
	list := make(region.RegionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListRegionsDescriptor() *ListRegionsDescriptor {
	return listRegionsDescriptor
}

type WatchRegionDescriptor struct{}

type WatchRegionDescriptorClientMsgHandle struct{}

type WatchRegionDescriptorServerMsgHandle struct{}

func (d *WatchRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRegionRequest{}
}

func (d *WatchRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRegionResponse{}
}

func (d *WatchRegionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRegionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRegionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchRegionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchRegionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchRegionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRegionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRegionDescriptor) GetMethodName() string {
	return "WatchRegion"
}

func (d *WatchRegionDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/WatchRegion"
}

func (d *WatchRegionDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *WatchRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *WatchRegionDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *WatchRegionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *WatchRegionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *WatchRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionDescriptorClientMsgHandle{}
}

func (d *WatchRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionDescriptorServerMsgHandle{}
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*region.Name)(nil)
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRegionResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *region.RegionChange_Added_:
			return tResChange.Added.GetRegion().GetName()
		case *region.RegionChange_Modified_:
			return tResChange.Modified.GetName()
		case *region.RegionChange_Removed_:
			return tResChange.Removed.GetName()
		case *region.RegionChange_Current_:
			return tResChange.Current.GetRegion().GetName()
		}
	}
	return (*region.Name)(nil)
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRegionResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchRegionDescriptor() *WatchRegionDescriptor {
	return watchRegionDescriptor
}

type WatchRegionsDescriptor struct{}

type WatchRegionsDescriptorClientMsgHandle struct{}

type WatchRegionsDescriptorServerMsgHandle struct{}

func (d *WatchRegionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRegionsRequest{}
}

func (d *WatchRegionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRegionsResponse{}
}

func (d *WatchRegionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRegionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRegionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRegionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchRegionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchRegionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchRegionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRegionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRegionsDescriptor) GetMethodName() string {
	return "WatchRegions"
}

func (d *WatchRegionsDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/WatchRegions"
}

func (d *WatchRegionsDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *WatchRegionsDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *WatchRegionsDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *WatchRegionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchRegionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *WatchRegionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *WatchRegionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionsDescriptorClientMsgHandle{}
}

func (d *WatchRegionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionsDescriptorServerMsgHandle{}
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRegionsRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRegionsRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchRegionsResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchRegionsResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetRegionChanges()
	list := make(region.RegionNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *region.RegionChange_Added_:
			list = append(list, tResChange.Added.GetRegion().GetName())
		case *region.RegionChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *region.RegionChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *region.RegionChange_Current_:
			list = append(list, tResChange.Current.GetRegion().GetName())
		}
	}
	return list
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchRegionsDescriptor() *WatchRegionsDescriptor {
	return watchRegionsDescriptor
}

type CreateRegionDescriptor struct{}

type CreateRegionDescriptorClientMsgHandle struct{}

type CreateRegionDescriptorServerMsgHandle struct{}

func (d *CreateRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateRegionRequest{}
}

func (d *CreateRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &region.Region{}
}

func (d *CreateRegionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateRegionDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateRegionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateRegionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateRegionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateRegionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateRegionDescriptor) GetMethodName() string {
	return "CreateRegion"
}

func (d *CreateRegionDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/CreateRegion"
}

func (d *CreateRegionDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *CreateRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *CreateRegionDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *CreateRegionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *CreateRegionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *CreateRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRegionDescriptorClientMsgHandle{}
}

func (d *CreateRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRegionDescriptorServerMsgHandle{}
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetRegion().GetName()
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*region.Region) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*region.Region) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateRegionDescriptor() *CreateRegionDescriptor {
	return createRegionDescriptor
}

type UpdateRegionDescriptor struct{}

type UpdateRegionDescriptorClientMsgHandle struct{}

type UpdateRegionDescriptorServerMsgHandle struct{}

func (d *UpdateRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateRegionRequest{}
}

func (d *UpdateRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &region.Region{}
}

func (d *UpdateRegionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateRegionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateRegionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateRegionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateRegionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateRegionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateRegionDescriptor) GetMethodName() string {
	return "UpdateRegion"
}

func (d *UpdateRegionDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/UpdateRegion"
}

func (d *UpdateRegionDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *UpdateRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *UpdateRegionDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *UpdateRegionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *UpdateRegionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *UpdateRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRegionDescriptorClientMsgHandle{}
}

func (d *UpdateRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRegionDescriptorServerMsgHandle{}
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetRegion().GetName()
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*region.Region) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*region.Region) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateRegionDescriptor() *UpdateRegionDescriptor {
	return updateRegionDescriptor
}

type DeleteRegionDescriptor struct{}

type DeleteRegionDescriptorClientMsgHandle struct{}

type DeleteRegionDescriptorServerMsgHandle struct{}

func (d *DeleteRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteRegionRequest{}
}

func (d *DeleteRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteRegionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteRegionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteRegionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteRegionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteRegionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteRegionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteRegionDescriptor) GetMethodName() string {
	return "DeleteRegion"
}

func (d *DeleteRegionDescriptor) GetFullMethodName() string {
	return "/ntt.meta.v1alpha2.RegionService/DeleteRegion"
}

func (d *DeleteRegionDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *DeleteRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *DeleteRegionDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *DeleteRegionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *DeleteRegionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *DeleteRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRegionDescriptorClientMsgHandle{}
}

func (d *DeleteRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRegionDescriptorServerMsgHandle{}
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*region.Name)(nil)
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *region.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetDeleteRegionDescriptor() *DeleteRegionDescriptor {
	return deleteRegionDescriptor
}

type RegionServiceDescriptor struct{}

func (d *RegionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getRegionDescriptor,
		batchGetRegionsDescriptor,
		listRegionsDescriptor,
		watchRegionDescriptor,
		watchRegionsDescriptor,
		createRegionDescriptor,
		updateRegionDescriptor,
		deleteRegionDescriptor,
	}
}

func (d *RegionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.meta.v1alpha2.RegionService"
}

func (d *RegionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.meta.v1alpha2"
}

func (d *RegionServiceDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *RegionServiceDescriptor) GetServiceDomain() string {
	return "meta.edgelq.com"
}

func (d *RegionServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetRegionServiceDescriptor() *RegionServiceDescriptor {
	return regionServiceDescriptor
}

func initDescriptors() {
	regionServiceDescriptor = &RegionServiceDescriptor{}
	getRegionDescriptor = &GetRegionDescriptor{}
	batchGetRegionsDescriptor = &BatchGetRegionsDescriptor{}
	listRegionsDescriptor = &ListRegionsDescriptor{}
	watchRegionDescriptor = &WatchRegionDescriptor{}
	watchRegionsDescriptor = &WatchRegionsDescriptor{}
	createRegionDescriptor = &CreateRegionDescriptor{}
	updateRegionDescriptor = &UpdateRegionDescriptor{}
	deleteRegionDescriptor = &DeleteRegionDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(regionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetRegionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listRegionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRegionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteRegionDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
