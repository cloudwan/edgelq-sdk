// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/region_service.proto
// DO NOT EDIT!!!

package region_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &region.Region{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetRegionRequest) GotenObjectExt() {}

func (o *GetRegionRequest) MakeFullFieldMask() *GetRegionRequest_FieldMask {
	return FullGetRegionRequest_FieldMask()
}

func (o *GetRegionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetRegionRequest_FieldMask()
}

func (o *GetRegionRequest) MakeDiffFieldMask(other *GetRegionRequest) *GetRegionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetRegionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetRegionRequest_FieldMask()
	}

	res := &GetRegionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetRegionRequest_FieldTerminalPath{selector: GetRegionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetRegionRequest_FieldTerminalPath{selector: GetRegionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetRegionRequest_FieldTerminalPath{selector: GetRegionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetRegionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetRegionRequest))
}

func (o *GetRegionRequest) Clone() *GetRegionRequest {
	if o == nil {
		return nil
	}
	result := &GetRegionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &region.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*region.Region_FieldMask)
	result.View = o.View
	return result
}

func (o *GetRegionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetRegionRequest) Merge(source *GetRegionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &region.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetRegionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetRegionRequest))
}

func (o *BatchGetRegionsRequest) GotenObjectExt() {}

func (o *BatchGetRegionsRequest) MakeFullFieldMask() *BatchGetRegionsRequest_FieldMask {
	return FullBatchGetRegionsRequest_FieldMask()
}

func (o *BatchGetRegionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRegionsRequest_FieldMask()
}

func (o *BatchGetRegionsRequest) MakeDiffFieldMask(other *BatchGetRegionsRequest) *BatchGetRegionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRegionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRegionsRequest_FieldMask()
	}

	res := &BatchGetRegionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetRegionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRegionsRequest))
}

func (o *BatchGetRegionsRequest) Clone() *BatchGetRegionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetRegionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &region.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*region.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &region.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*region.Region_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetRegionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRegionsRequest) Merge(source *BatchGetRegionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &region.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *region.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &region.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetRegionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRegionsRequest))
}

func (o *BatchGetRegionsResponse) GotenObjectExt() {}

func (o *BatchGetRegionsResponse) MakeFullFieldMask() *BatchGetRegionsResponse_FieldMask {
	return FullBatchGetRegionsResponse_FieldMask()
}

func (o *BatchGetRegionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRegionsResponse_FieldMask()
}

func (o *BatchGetRegionsResponse) MakeDiffFieldMask(other *BatchGetRegionsResponse) *BatchGetRegionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRegionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRegionsResponse_FieldMask()
	}

	res := &BatchGetRegionsResponse_FieldMask{}

	if len(o.GetRegions()) == len(other.GetRegions()) {
		for i, lValue := range o.GetRegions() {
			rValue := other.GetRegions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetRegionsResponse_FieldTerminalPath{selector: BatchGetRegionsResponse_FieldPathSelectorRegions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRegionsResponse_FieldTerminalPath{selector: BatchGetRegionsResponse_FieldPathSelectorRegions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRegionsResponse_FieldTerminalPath{selector: BatchGetRegionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRegionsResponse_FieldTerminalPath{selector: BatchGetRegionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetRegionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRegionsResponse))
}

func (o *BatchGetRegionsResponse) Clone() *BatchGetRegionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetRegionsResponse{}
	result.Regions = make([]*region.Region, len(o.Regions))
	for i, sourceValue := range o.Regions {
		result.Regions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*region.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &region.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetRegionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRegionsResponse) Merge(source *BatchGetRegionsResponse) {
	for _, sourceValue := range source.GetRegions() {
		exists := false
		for _, currentValue := range o.Regions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *region.Region
			if sourceValue != nil {
				newDstElement = new(region.Region)
				newDstElement.Merge(sourceValue)
			}
			o.Regions = append(o.Regions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *region.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &region.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetRegionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRegionsResponse))
}

func (o *ListRegionsRequest) GotenObjectExt() {}

func (o *ListRegionsRequest) MakeFullFieldMask() *ListRegionsRequest_FieldMask {
	return FullListRegionsRequest_FieldMask()
}

func (o *ListRegionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRegionsRequest_FieldMask()
}

func (o *ListRegionsRequest) MakeDiffFieldMask(other *ListRegionsRequest) *ListRegionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListRegionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRegionsRequest_FieldMask()
	}

	res := &ListRegionsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListRegionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRegionsRequest))
}

func (o *ListRegionsRequest) Clone() *ListRegionsRequest {
	if o == nil {
		return nil
	}
	result := &ListRegionsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &region.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &region.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &region.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*region.Region_FieldMask)
	result.View = o.View
	return result
}

func (o *ListRegionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRegionsRequest) Merge(source *ListRegionsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &region.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &region.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &region.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListRegionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRegionsRequest))
}

func (o *ListRegionsResponse) GotenObjectExt() {}

func (o *ListRegionsResponse) MakeFullFieldMask() *ListRegionsResponse_FieldMask {
	return FullListRegionsResponse_FieldMask()
}

func (o *ListRegionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRegionsResponse_FieldMask()
}

func (o *ListRegionsResponse) MakeDiffFieldMask(other *ListRegionsResponse) *ListRegionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListRegionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRegionsResponse_FieldMask()
	}

	res := &ListRegionsResponse_FieldMask{}

	if len(o.GetRegions()) == len(other.GetRegions()) {
		for i, lValue := range o.GetRegions() {
			rValue := other.GetRegions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorRegions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorRegions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListRegionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRegionsResponse))
}

func (o *ListRegionsResponse) Clone() *ListRegionsResponse {
	if o == nil {
		return nil
	}
	result := &ListRegionsResponse{}
	result.Regions = make([]*region.Region, len(o.Regions))
	for i, sourceValue := range o.Regions {
		result.Regions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &region.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &region.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListRegionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRegionsResponse) Merge(source *ListRegionsResponse) {
	for _, sourceValue := range source.GetRegions() {
		exists := false
		for _, currentValue := range o.Regions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *region.Region
			if sourceValue != nil {
				newDstElement = new(region.Region)
				newDstElement.Merge(sourceValue)
			}
			o.Regions = append(o.Regions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &region.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &region.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListRegionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRegionsResponse))
}

func (o *WatchRegionRequest) GotenObjectExt() {}

func (o *WatchRegionRequest) MakeFullFieldMask() *WatchRegionRequest_FieldMask {
	return FullWatchRegionRequest_FieldMask()
}

func (o *WatchRegionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRegionRequest_FieldMask()
}

func (o *WatchRegionRequest) MakeDiffFieldMask(other *WatchRegionRequest) *WatchRegionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRegionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRegionRequest_FieldMask()
	}

	res := &WatchRegionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchRegionRequest_FieldTerminalPath{selector: WatchRegionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRegionRequest_FieldTerminalPath{selector: WatchRegionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRegionRequest_FieldTerminalPath{selector: WatchRegionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchRegionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRegionRequest))
}

func (o *WatchRegionRequest) Clone() *WatchRegionRequest {
	if o == nil {
		return nil
	}
	result := &WatchRegionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &region.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*region.Region_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchRegionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRegionRequest) Merge(source *WatchRegionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &region.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchRegionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRegionRequest))
}

func (o *WatchRegionResponse) GotenObjectExt() {}

func (o *WatchRegionResponse) MakeFullFieldMask() *WatchRegionResponse_FieldMask {
	return FullWatchRegionResponse_FieldMask()
}

func (o *WatchRegionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRegionResponse_FieldMask()
}

func (o *WatchRegionResponse) MakeDiffFieldMask(other *WatchRegionResponse) *WatchRegionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRegionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRegionResponse_FieldMask()
	}

	res := &WatchRegionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchRegionResponse_FieldTerminalPath{selector: WatchRegionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchRegionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRegionResponse))
}

func (o *WatchRegionResponse) Clone() *WatchRegionResponse {
	if o == nil {
		return nil
	}
	result := &WatchRegionResponse{}
	result.Change = proto.Clone(o.Change).(*region.RegionChange)
	return result
}

func (o *WatchRegionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRegionResponse) Merge(source *WatchRegionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(region.RegionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchRegionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRegionResponse))
}

func (o *WatchRegionsRequest) GotenObjectExt() {}

func (o *WatchRegionsRequest) MakeFullFieldMask() *WatchRegionsRequest_FieldMask {
	return FullWatchRegionsRequest_FieldMask()
}

func (o *WatchRegionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRegionsRequest_FieldMask()
}

func (o *WatchRegionsRequest) MakeDiffFieldMask(other *WatchRegionsRequest) *WatchRegionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRegionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRegionsRequest_FieldMask()
	}

	res := &WatchRegionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchRegionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRegionsRequest))
}

func (o *WatchRegionsRequest) Clone() *WatchRegionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchRegionsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &region.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &region.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &region.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*region.Region_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchRegionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRegionsRequest) Merge(source *WatchRegionsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &region.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &region.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &region.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchRegionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRegionsRequest))
}

func (o *WatchRegionsResponse) GotenObjectExt() {}

func (o *WatchRegionsResponse) MakeFullFieldMask() *WatchRegionsResponse_FieldMask {
	return FullWatchRegionsResponse_FieldMask()
}

func (o *WatchRegionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRegionsResponse_FieldMask()
}

func (o *WatchRegionsResponse) MakeDiffFieldMask(other *WatchRegionsResponse) *WatchRegionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRegionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRegionsResponse_FieldMask()
	}

	res := &WatchRegionsResponse_FieldMask{}

	if len(o.GetRegionChanges()) == len(other.GetRegionChanges()) {
		for i, lValue := range o.GetRegionChanges() {
			rValue := other.GetRegionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorRegionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorRegionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchRegionsResponse_FieldSubPath{selector: WatchRegionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchRegionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRegionsResponse))
}

func (o *WatchRegionsResponse) Clone() *WatchRegionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchRegionsResponse{}
	result.RegionChanges = make([]*region.RegionChange, len(o.RegionChanges))
	for i, sourceValue := range o.RegionChanges {
		result.RegionChanges[i] = proto.Clone(sourceValue).(*region.RegionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchRegionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRegionsResponse) Merge(source *WatchRegionsResponse) {
	for _, sourceValue := range source.GetRegionChanges() {
		exists := false
		for _, currentValue := range o.RegionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *region.RegionChange
			if sourceValue != nil {
				newDstElement = new(region.RegionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.RegionChanges = append(o.RegionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchRegionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchRegionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRegionsResponse))
}

func (o *WatchRegionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchRegionsResponse_PageTokenChange) MakeFullFieldMask() *WatchRegionsResponse_PageTokenChange_FieldMask {
	return FullWatchRegionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchRegionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRegionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchRegionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchRegionsResponse_PageTokenChange) *WatchRegionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchRegionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRegionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchRegionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchRegionsResponsePageTokenChange_FieldTerminalPath{selector: WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchRegionsResponsePageTokenChange_FieldTerminalPath{selector: WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchRegionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRegionsResponse_PageTokenChange))
}

func (o *WatchRegionsResponse_PageTokenChange) Clone() *WatchRegionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchRegionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &region.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &region.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchRegionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRegionsResponse_PageTokenChange) Merge(source *WatchRegionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &region.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &region.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchRegionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRegionsResponse_PageTokenChange))
}

func (o *CreateRegionRequest) GotenObjectExt() {}

func (o *CreateRegionRequest) MakeFullFieldMask() *CreateRegionRequest_FieldMask {
	return FullCreateRegionRequest_FieldMask()
}

func (o *CreateRegionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateRegionRequest_FieldMask()
}

func (o *CreateRegionRequest) MakeDiffFieldMask(other *CreateRegionRequest) *CreateRegionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateRegionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateRegionRequest_FieldMask()
	}

	res := &CreateRegionRequest_FieldMask{}
	{
		subMask := o.GetRegion().MakeDiffFieldMask(other.GetRegion())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateRegionRequest_FieldTerminalPath{selector: CreateRegionRequest_FieldPathSelectorRegion})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateRegionRequest_FieldSubPath{selector: CreateRegionRequest_FieldPathSelectorRegion, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateRegionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateRegionRequest))
}

func (o *CreateRegionRequest) Clone() *CreateRegionRequest {
	if o == nil {
		return nil
	}
	result := &CreateRegionRequest{}
	result.Region = o.Region.Clone()
	return result
}

func (o *CreateRegionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateRegionRequest) Merge(source *CreateRegionRequest) {
	if source.GetRegion() != nil {
		if o.Region == nil {
			o.Region = new(region.Region)
		}
		o.Region.Merge(source.GetRegion())
	}
}

func (o *CreateRegionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateRegionRequest))
}

func (o *UpdateRegionRequest) GotenObjectExt() {}

func (o *UpdateRegionRequest) MakeFullFieldMask() *UpdateRegionRequest_FieldMask {
	return FullUpdateRegionRequest_FieldMask()
}

func (o *UpdateRegionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRegionRequest_FieldMask()
}

func (o *UpdateRegionRequest) MakeDiffFieldMask(other *UpdateRegionRequest) *UpdateRegionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateRegionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRegionRequest_FieldMask()
	}

	res := &UpdateRegionRequest_FieldMask{}
	{
		subMask := o.GetRegion().MakeDiffFieldMask(other.GetRegion())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRegionRequest_FieldTerminalPath{selector: UpdateRegionRequest_FieldPathSelectorRegion})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRegionRequest_FieldSubPath{selector: UpdateRegionRequest_FieldPathSelectorRegion, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateRegionRequest_FieldTerminalPath{selector: UpdateRegionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRegionRequest_FieldTerminalPath{selector: UpdateRegionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRegionRequest_FieldSubPath{selector: UpdateRegionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateRegionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRegionRequest))
}

func (o *UpdateRegionRequest) Clone() *UpdateRegionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateRegionRequest{}
	result.Region = o.Region.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*region.Region_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateRegionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRegionRequest) Merge(source *UpdateRegionRequest) {
	if source.GetRegion() != nil {
		if o.Region == nil {
			o.Region = new(region.Region)
		}
		o.Region.Merge(source.GetRegion())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateRegionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateRegionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRegionRequest))
}

func (o *UpdateRegionRequest_CAS) GotenObjectExt() {}

func (o *UpdateRegionRequest_CAS) MakeFullFieldMask() *UpdateRegionRequest_CAS_FieldMask {
	return FullUpdateRegionRequest_CAS_FieldMask()
}

func (o *UpdateRegionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRegionRequest_CAS_FieldMask()
}

func (o *UpdateRegionRequest_CAS) MakeDiffFieldMask(other *UpdateRegionRequest_CAS) *UpdateRegionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateRegionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRegionRequest_CAS_FieldMask()
	}

	res := &UpdateRegionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRegionRequestCAS_FieldTerminalPath{selector: UpdateRegionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRegionRequestCAS_FieldSubPath{selector: UpdateRegionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateRegionRequestCAS_FieldTerminalPath{selector: UpdateRegionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateRegionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRegionRequest_CAS))
}

func (o *UpdateRegionRequest_CAS) Clone() *UpdateRegionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateRegionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*region.Region_FieldMask)
	return result
}

func (o *UpdateRegionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRegionRequest_CAS) Merge(source *UpdateRegionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(region.Region)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(region.Region_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateRegionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRegionRequest_CAS))
}

func (o *DeleteRegionRequest) GotenObjectExt() {}

func (o *DeleteRegionRequest) MakeFullFieldMask() *DeleteRegionRequest_FieldMask {
	return FullDeleteRegionRequest_FieldMask()
}

func (o *DeleteRegionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteRegionRequest_FieldMask()
}

func (o *DeleteRegionRequest) MakeDiffFieldMask(other *DeleteRegionRequest) *DeleteRegionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteRegionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteRegionRequest_FieldMask()
	}

	res := &DeleteRegionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteRegionRequest_FieldTerminalPath{selector: DeleteRegionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteRegionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteRegionRequest))
}

func (o *DeleteRegionRequest) Clone() *DeleteRegionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteRegionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &region.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteRegionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteRegionRequest) Merge(source *DeleteRegionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &region.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteRegionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteRegionRequest))
}
