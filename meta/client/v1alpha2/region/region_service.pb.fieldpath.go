// Code generated by protoc-gen-goten-object
// File: edgelq/meta/proto/v1alpha2/region_service.proto
// DO NOT EDIT!!!

package region_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	region "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/region"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &region.Region{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetRegionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetRegionRequest_FieldPathSelector
	Get(source *GetRegionRequest) []interface{}
	GetSingle(source *GetRegionRequest) (interface{}, bool)
	ClearValue(item *GetRegionRequest)

	// Those methods build corresponding GetRegionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetRegionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetRegionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetRegionRequest_FieldPathArrayItemValue
}

type GetRegionRequest_FieldPathSelector int32

const (
	GetRegionRequest_FieldPathSelectorName      GetRegionRequest_FieldPathSelector = 0
	GetRegionRequest_FieldPathSelectorFieldMask GetRegionRequest_FieldPathSelector = 1
	GetRegionRequest_FieldPathSelectorView      GetRegionRequest_FieldPathSelector = 2
)

func (s GetRegionRequest_FieldPathSelector) String() string {
	switch s {
	case GetRegionRequest_FieldPathSelectorName:
		return "name"
	case GetRegionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetRegionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", s))
	}
}

func BuildGetRegionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetRegionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetRegionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetRegionRequest_FieldTerminalPath{selector: GetRegionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetRegionRequest_FieldTerminalPath{selector: GetRegionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetRegionRequest_FieldTerminalPath{selector: GetRegionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetRegionRequest", fp)
}

func ParseGetRegionRequest_FieldPath(rawField string) (GetRegionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetRegionRequest_FieldPath(fp)
}

func MustParseGetRegionRequest_FieldPath(rawField string) GetRegionRequest_FieldPath {
	fp, err := ParseGetRegionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetRegionRequest_FieldTerminalPath struct {
	selector GetRegionRequest_FieldPathSelector
}

var _ GetRegionRequest_FieldPath = (*GetRegionRequest_FieldTerminalPath)(nil)

func (fp *GetRegionRequest_FieldTerminalPath) Selector() GetRegionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetRegionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetRegionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetRegionRequest
func (fp *GetRegionRequest_FieldTerminalPath) Get(source *GetRegionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetRegionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetRegionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetRegionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetRegionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetRegionRequest))
}

// GetSingle returns value pointed by specific field of from source GetRegionRequest
func (fp *GetRegionRequest_FieldTerminalPath) GetSingle(source *GetRegionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetRegionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetRegionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetRegionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
	}
}

func (fp *GetRegionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetRegionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetRegionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetRegionRequest_FieldPathSelectorName:
		return (*region.Reference)(nil)
	case GetRegionRequest_FieldPathSelectorFieldMask:
		return (*region.Region_FieldMask)(nil)
	case GetRegionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
	}
}

func (fp *GetRegionRequest_FieldTerminalPath) ClearValue(item *GetRegionRequest) {
	if item != nil {
		switch fp.selector {
		case GetRegionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetRegionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetRegionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetRegionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetRegionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetRegionRequest_FieldPathSelectorName ||
		fp.selector == GetRegionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetRegionRequest_FieldPathSelectorView
}

func (fp *GetRegionRequest_FieldTerminalPath) WithIValue(value interface{}) GetRegionRequest_FieldPathValue {
	switch fp.selector {
	case GetRegionRequest_FieldPathSelectorName:
		return &GetRegionRequest_FieldTerminalPathValue{GetRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	case GetRegionRequest_FieldPathSelectorFieldMask:
		return &GetRegionRequest_FieldTerminalPathValue{GetRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	case GetRegionRequest_FieldPathSelectorView:
		return &GetRegionRequest_FieldTerminalPathValue{GetRegionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
	}
}

func (fp *GetRegionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetRegionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetRegionRequest_FieldPathArrayOfValues {
	fpaov := &GetRegionRequest_FieldTerminalPathArrayOfValues{GetRegionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetRegionRequest_FieldPathSelectorName:
		return &GetRegionRequest_FieldTerminalPathArrayOfValues{GetRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Reference)}
	case GetRegionRequest_FieldPathSelectorFieldMask:
		return &GetRegionRequest_FieldTerminalPathArrayOfValues{GetRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	case GetRegionRequest_FieldPathSelectorView:
		return &GetRegionRequest_FieldTerminalPathArrayOfValues{GetRegionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetRegionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetRegionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetRegionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fp.selector))
	}
}

func (fp *GetRegionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetRegionRequest_FieldPathValue allows storing values for GetRegionRequest fields according to their type
type GetRegionRequest_FieldPathValue interface {
	GetRegionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetRegionRequest)
	CompareWith(*GetRegionRequest) (cmp int, comparable bool)
}

func ParseGetRegionRequest_FieldPathValue(pathStr, valueStr string) (GetRegionRequest_FieldPathValue, error) {
	fp, err := ParseGetRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRegionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetRegionRequest_FieldPathValue), nil
}

func MustParseGetRegionRequest_FieldPathValue(pathStr, valueStr string) GetRegionRequest_FieldPathValue {
	fpv, err := ParseGetRegionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetRegionRequest_FieldTerminalPathValue struct {
	GetRegionRequest_FieldTerminalPath
	value interface{}
}

var _ GetRegionRequest_FieldPathValue = (*GetRegionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetRegionRequest' as interface{}
func (fpv *GetRegionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetRegionRequest_FieldTerminalPathValue) AsNameValue() (*region.Reference, bool) {
	res, ok := fpv.value.(*region.Reference)
	return res, ok
}
func (fpv *GetRegionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}
func (fpv *GetRegionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetRegionRequest
func (fpv *GetRegionRequest_FieldTerminalPathValue) SetTo(target **GetRegionRequest) {
	if *target == nil {
		*target = new(GetRegionRequest)
	}
	switch fpv.selector {
	case GetRegionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*region.Reference)
	case GetRegionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*region.Region_FieldMask)
	case GetRegionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fpv.selector))
	}
}

func (fpv *GetRegionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetRegionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetRegionRequest_FieldTerminalPathValue' with the value under path in 'GetRegionRequest'.
func (fpv *GetRegionRequest_FieldTerminalPathValue) CompareWith(source *GetRegionRequest) (int, bool) {
	switch fpv.selector {
	case GetRegionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*region.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetRegionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetRegionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRegionRequest: %d", fpv.selector))
	}
}

func (fpv *GetRegionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetRegionRequest))
}

// GetRegionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetRegionRequest according to their type
// Present only for array (repeated) types.
type GetRegionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetRegionRequest_FieldPath
	ContainsValue(*GetRegionRequest) bool
}

// ParseGetRegionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetRegionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRegionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetRegionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetRegionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetRegionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetRegionRequest_FieldTerminalPathArrayItemValue struct {
	GetRegionRequest_FieldTerminalPath
	value interface{}
}

var _ GetRegionRequest_FieldPathArrayItemValue = (*GetRegionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetRegionRequest as interface{}
func (fpaiv *GetRegionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetRegionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetRegionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetRegionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetRegionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetRegionRequest'
func (fpaiv *GetRegionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetRegionRequest) bool {
	slice := fpaiv.GetRegionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetRegionRequest_FieldPathArrayOfValues allows storing slice of values for GetRegionRequest fields according to their type
type GetRegionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetRegionRequest_FieldPath
}

func ParseGetRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetRegionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRegionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetRegionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetRegionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetRegionRequest_FieldTerminalPathArrayOfValues struct {
	GetRegionRequest_FieldTerminalPath
	values interface{}
}

var _ GetRegionRequest_FieldPathArrayOfValues = (*GetRegionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetRegionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetRegionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*region.Reference) {
			values = append(values, v)
		}
	case GetRegionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	case GetRegionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetRegionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*region.Reference, bool) {
	res, ok := fpaov.values.([]*region.Reference)
	return res, ok
}
func (fpaov *GetRegionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}
func (fpaov *GetRegionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRegionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRegionsRequest_FieldPathSelector
	Get(source *BatchGetRegionsRequest) []interface{}
	GetSingle(source *BatchGetRegionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetRegionsRequest)

	// Those methods build corresponding BatchGetRegionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRegionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRegionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRegionsRequest_FieldPathArrayItemValue
}

type BatchGetRegionsRequest_FieldPathSelector int32

const (
	BatchGetRegionsRequest_FieldPathSelectorParent    BatchGetRegionsRequest_FieldPathSelector = 0
	BatchGetRegionsRequest_FieldPathSelectorNames     BatchGetRegionsRequest_FieldPathSelector = 1
	BatchGetRegionsRequest_FieldPathSelectorFieldMask BatchGetRegionsRequest_FieldPathSelector = 2
	BatchGetRegionsRequest_FieldPathSelectorView      BatchGetRegionsRequest_FieldPathSelector = 3
)

func (s BatchGetRegionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetRegionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", s))
	}
}

func BuildBatchGetRegionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRegionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRegionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetRegionsRequest_FieldTerminalPath{selector: BatchGetRegionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRegionsRequest", fp)
}

func ParseBatchGetRegionsRequest_FieldPath(rawField string) (BatchGetRegionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRegionsRequest_FieldPath(fp)
}

func MustParseBatchGetRegionsRequest_FieldPath(rawField string) BatchGetRegionsRequest_FieldPath {
	fp, err := ParseBatchGetRegionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRegionsRequest_FieldTerminalPath struct {
	selector BatchGetRegionsRequest_FieldPathSelector
}

var _ BatchGetRegionsRequest_FieldPath = (*BatchGetRegionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetRegionsRequest_FieldTerminalPath) Selector() BatchGetRegionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRegionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRegionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRegionsRequest
func (fp *BatchGetRegionsRequest_FieldTerminalPath) Get(source *BatchGetRegionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRegionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetRegionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetRegionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRegionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetRegionsRequest
func (fp *BatchGetRegionsRequest_FieldTerminalPath) GetSingle(source *BatchGetRegionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetRegionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRegionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRegionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		return (*region.Reference)(nil)
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		return ([]*region.Reference)(nil)
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		return (*region.Region_FieldMask)(nil)
	case BatchGetRegionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) ClearValue(item *BatchGetRegionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetRegionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetRegionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetRegionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRegionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRegionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRegionsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetRegionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetRegionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetRegionsRequest_FieldPathSelectorView
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetRegionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		return &BatchGetRegionsRequest_FieldTerminalPathValue{BatchGetRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		return &BatchGetRegionsRequest_FieldTerminalPathValue{BatchGetRegionsRequest_FieldTerminalPath: *fp, value: value.([]*region.Reference)}
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetRegionsRequest_FieldTerminalPathValue{BatchGetRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	case BatchGetRegionsRequest_FieldPathSelectorView:
		return &BatchGetRegionsRequest_FieldTerminalPathValue{BatchGetRegionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRegionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetRegionsRequest_FieldTerminalPathArrayOfValues{BatchGetRegionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		return &BatchGetRegionsRequest_FieldTerminalPathArrayOfValues{BatchGetRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.Reference)}
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		return &BatchGetRegionsRequest_FieldTerminalPathArrayOfValues{BatchGetRegionsRequest_FieldTerminalPath: *fp, values: values.([][]*region.Reference)}
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetRegionsRequest_FieldTerminalPathArrayOfValues{BatchGetRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	case BatchGetRegionsRequest_FieldPathSelectorView:
		return &BatchGetRegionsRequest_FieldTerminalPathArrayOfValues{BatchGetRegionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRegionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		return &BatchGetRegionsRequest_FieldTerminalPathArrayItemValue{BatchGetRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetRegionsRequest_FieldPathValue allows storing values for BatchGetRegionsRequest fields according to their type
type BatchGetRegionsRequest_FieldPathValue interface {
	BatchGetRegionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRegionsRequest)
	CompareWith(*BatchGetRegionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetRegionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetRegionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRegionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRegionsRequest_FieldPathValue), nil
}

func MustParseBatchGetRegionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetRegionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetRegionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRegionsRequest_FieldTerminalPathValue struct {
	BatchGetRegionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRegionsRequest_FieldPathValue = (*BatchGetRegionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRegionsRequest' as interface{}
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) AsParentValue() (*region.Reference, bool) {
	res, ok := fpv.value.(*region.Reference)
	return res, ok
}
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*region.Reference, bool) {
	res, ok := fpv.value.([]*region.Reference)
	return res, ok
}
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRegionsRequest
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetRegionsRequest) {
	if *target == nil {
		*target = new(BatchGetRegionsRequest)
	}
	switch fpv.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*region.Reference)
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*region.Reference)
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*region.Region_FieldMask)
	case BatchGetRegionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRegionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRegionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetRegionsRequest'.
func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetRegionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*region.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetRegionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRegionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRegionsRequest))
}

// BatchGetRegionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRegionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetRegionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRegionsRequest_FieldPath
	ContainsValue(*BatchGetRegionsRequest) bool
}

// ParseBatchGetRegionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRegionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRegionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRegionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRegionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRegionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetRegionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRegionsRequest_FieldPathArrayItemValue = (*BatchGetRegionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRegionsRequest as interface{}
func (fpaiv *BatchGetRegionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRegionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*region.Reference, bool) {
	res, ok := fpaiv.value.(*region.Reference)
	return res, ok
}

func (fpaiv *BatchGetRegionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRegionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRegionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRegionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRegionsRequest'
func (fpaiv *BatchGetRegionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRegionsRequest) bool {
	slice := fpaiv.BatchGetRegionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetRegionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetRegionsRequest fields according to their type
type BatchGetRegionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRegionsRequest_FieldPath
}

func ParseBatchGetRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRegionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRegionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRegionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRegionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRegionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetRegionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetRegionsRequest_FieldPathArrayOfValues = (*BatchGetRegionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRegionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRegionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*region.Reference) {
			values = append(values, v)
		}
	case BatchGetRegionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*region.Reference) {
			values = append(values, v)
		}
	case BatchGetRegionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	case BatchGetRegionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRegionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*region.Reference, bool) {
	res, ok := fpaov.values.([]*region.Reference)
	return res, ok
}
func (fpaov *BatchGetRegionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*region.Reference, bool) {
	res, ok := fpaov.values.([][]*region.Reference)
	return res, ok
}
func (fpaov *BatchGetRegionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}
func (fpaov *BatchGetRegionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRegionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRegionsResponse_FieldPathSelector
	Get(source *BatchGetRegionsResponse) []interface{}
	GetSingle(source *BatchGetRegionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetRegionsResponse)

	// Those methods build corresponding BatchGetRegionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRegionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRegionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRegionsResponse_FieldPathArrayItemValue
}

type BatchGetRegionsResponse_FieldPathSelector int32

const (
	BatchGetRegionsResponse_FieldPathSelectorRegions BatchGetRegionsResponse_FieldPathSelector = 0
	BatchGetRegionsResponse_FieldPathSelectorMissing BatchGetRegionsResponse_FieldPathSelector = 1
)

func (s BatchGetRegionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return "regions"
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", s))
	}
}

func BuildBatchGetRegionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRegionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRegionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "regions":
			return &BatchGetRegionsResponse_FieldTerminalPath{selector: BatchGetRegionsResponse_FieldPathSelectorRegions}, nil
		case "missing":
			return &BatchGetRegionsResponse_FieldTerminalPath{selector: BatchGetRegionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "regions":
			if subpath, err := region.BuildRegion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetRegionsResponse_FieldSubPath{selector: BatchGetRegionsResponse_FieldPathSelectorRegions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRegionsResponse", fp)
}

func ParseBatchGetRegionsResponse_FieldPath(rawField string) (BatchGetRegionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRegionsResponse_FieldPath(fp)
}

func MustParseBatchGetRegionsResponse_FieldPath(rawField string) BatchGetRegionsResponse_FieldPath {
	fp, err := ParseBatchGetRegionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRegionsResponse_FieldTerminalPath struct {
	selector BatchGetRegionsResponse_FieldPathSelector
}

var _ BatchGetRegionsResponse_FieldPath = (*BatchGetRegionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetRegionsResponse_FieldTerminalPath) Selector() BatchGetRegionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRegionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRegionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRegionsResponse
func (fp *BatchGetRegionsResponse_FieldTerminalPath) Get(source *BatchGetRegionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRegionsResponse_FieldPathSelectorRegions:
			for _, value := range source.GetRegions() {
				values = append(values, value)
			}
		case BatchGetRegionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRegionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetRegionsResponse
func (fp *BatchGetRegionsResponse_FieldTerminalPath) GetSingle(source *BatchGetRegionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		res := source.GetRegions()
		return res, res != nil
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRegionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRegionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return ([]*region.Region)(nil)
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		return ([]*region.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) ClearValue(item *BatchGetRegionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetRegionsResponse_FieldPathSelectorRegions:
			item.Regions = nil
		case BatchGetRegionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRegionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRegionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRegionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetRegionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return &BatchGetRegionsResponse_FieldTerminalPathValue{BatchGetRegionsResponse_FieldTerminalPath: *fp, value: value.([]*region.Region)}
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		return &BatchGetRegionsResponse_FieldTerminalPathValue{BatchGetRegionsResponse_FieldTerminalPath: *fp, value: value.([]*region.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRegionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetRegionsResponse_FieldTerminalPathArrayOfValues{BatchGetRegionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return &BatchGetRegionsResponse_FieldTerminalPathArrayOfValues{BatchGetRegionsResponse_FieldTerminalPath: *fp, values: values.([][]*region.Region)}
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		return &BatchGetRegionsResponse_FieldTerminalPathArrayOfValues{BatchGetRegionsResponse_FieldTerminalPath: *fp, values: values.([][]*region.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRegionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return &BatchGetRegionsResponse_FieldTerminalPathArrayItemValue{BatchGetRegionsResponse_FieldTerminalPath: *fp, value: value.(*region.Region)}
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		return &BatchGetRegionsResponse_FieldTerminalPathArrayItemValue{BatchGetRegionsResponse_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRegionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetRegionsResponse_FieldSubPath struct {
	selector BatchGetRegionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetRegionsResponse_FieldPath = (*BatchGetRegionsResponse_FieldSubPath)(nil)

func (fps *BatchGetRegionsResponse_FieldSubPath) Selector() BatchGetRegionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetRegionsResponse_FieldSubPath) AsRegionsSubPath() (region.Region_FieldPath, bool) {
	res, ok := fps.subPath.(region.Region_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetRegionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetRegionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetRegionsResponse
func (fps *BatchGetRegionsResponse_FieldSubPath) Get(source *BatchGetRegionsResponse) (values []interface{}) {
	if asRegionFieldPath, ok := fps.AsRegionsSubPath(); ok {
		for _, item := range source.GetRegions() {
			values = append(values, asRegionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetRegionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetRegionsResponse))
}

// GetSingle returns value of selected field from source BatchGetRegionsResponse
func (fps *BatchGetRegionsResponse_FieldSubPath) GetSingle(source *BatchGetRegionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		if len(source.GetRegions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRegions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetRegionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetRegionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetRegionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetRegionsResponse_FieldSubPath) ClearValue(item *BatchGetRegionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetRegionsResponse_FieldPathSelectorRegions:
			for _, subItem := range item.Regions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetRegionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetRegionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetRegionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetRegionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetRegionsResponse_FieldPathValue {
	return &BatchGetRegionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetRegionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetRegionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetRegionsResponse_FieldPathArrayOfValues {
	return &BatchGetRegionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetRegionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetRegionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetRegionsResponse_FieldPathArrayItemValue {
	return &BatchGetRegionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetRegionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetRegionsResponse_FieldPathValue allows storing values for BatchGetRegionsResponse fields according to their type
type BatchGetRegionsResponse_FieldPathValue interface {
	BatchGetRegionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRegionsResponse)
	CompareWith(*BatchGetRegionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetRegionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetRegionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRegionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRegionsResponse_FieldPathValue), nil
}

func MustParseBatchGetRegionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetRegionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetRegionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRegionsResponse_FieldTerminalPathValue struct {
	BatchGetRegionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRegionsResponse_FieldPathValue = (*BatchGetRegionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRegionsResponse' as interface{}
func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) AsRegionsValue() ([]*region.Region, bool) {
	res, ok := fpv.value.([]*region.Region)
	return res, ok
}
func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*region.Reference, bool) {
	res, ok := fpv.value.([]*region.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRegionsResponse
func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetRegionsResponse) {
	if *target == nil {
		*target = new(BatchGetRegionsResponse)
	}
	switch fpv.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		(*target).Regions = fpv.value.([]*region.Region)
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*region.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRegionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRegionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetRegionsResponse'.
func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetRegionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return 0, false
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRegionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRegionsResponse))
}

type BatchGetRegionsResponse_FieldSubPathValue struct {
	BatchGetRegionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetRegionsResponse_FieldPathValue = (*BatchGetRegionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetRegionsResponse_FieldSubPathValue) AsRegionsPathValue() (region.Region_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(region.Region_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetRegionsResponse_FieldSubPathValue) SetTo(target **BatchGetRegionsResponse) {
	if *target == nil {
		*target = new(BatchGetRegionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRegionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRegionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetRegionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetRegionsResponse_FieldSubPathValue) CompareWith(source *BatchGetRegionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRegionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetRegionsResponse))
}

// BatchGetRegionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRegionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetRegionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRegionsResponse_FieldPath
	ContainsValue(*BatchGetRegionsResponse) bool
}

// ParseBatchGetRegionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRegionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRegionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRegionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRegionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRegionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetRegionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRegionsResponse_FieldPathArrayItemValue = (*BatchGetRegionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRegionsResponse as interface{}
func (fpaiv *BatchGetRegionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRegionsResponse_FieldTerminalPathArrayItemValue) AsRegionsItemValue() (*region.Region, bool) {
	res, ok := fpaiv.value.(*region.Region)
	return res, ok
}
func (fpaiv *BatchGetRegionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*region.Reference, bool) {
	res, ok := fpaiv.value.(*region.Reference)
	return res, ok
}

func (fpaiv *BatchGetRegionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRegionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRegionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRegionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRegionsResponse'
func (fpaiv *BatchGetRegionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRegionsResponse) bool {
	slice := fpaiv.BatchGetRegionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetRegionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetRegionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetRegionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetRegionsResponse_FieldSubPathArrayItemValue) AsRegionsPathItemValue() (region.Region_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRegionsResponse'
func (fpaivs *BatchGetRegionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetRegionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRegionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetRegionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetRegionsResponse fields according to their type
type BatchGetRegionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRegionsResponse_FieldPath
}

func ParseBatchGetRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRegionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRegionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRegionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRegionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRegionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetRegionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetRegionsResponse_FieldPathArrayOfValues = (*BatchGetRegionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRegionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRegionsResponse_FieldPathSelectorRegions:
		for _, v := range fpaov.values.([][]*region.Region) {
			values = append(values, v)
		}
	case BatchGetRegionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*region.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRegionsResponse_FieldTerminalPathArrayOfValues) AsRegionsArrayOfValues() ([][]*region.Region, bool) {
	res, ok := fpaov.values.([][]*region.Region)
	return res, ok
}
func (fpaov *BatchGetRegionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*region.Reference, bool) {
	res, ok := fpaov.values.([][]*region.Reference)
	return res, ok
}

type BatchGetRegionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetRegionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetRegionsResponse_FieldPathArrayOfValues = (*BatchGetRegionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetRegionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetRegionsResponse_FieldSubPathArrayOfValues) AsRegionsPathArrayOfValues() (region.Region_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(region.Region_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRegionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRegionsRequest_FieldPathSelector
	Get(source *ListRegionsRequest) []interface{}
	GetSingle(source *ListRegionsRequest) (interface{}, bool)
	ClearValue(item *ListRegionsRequest)

	// Those methods build corresponding ListRegionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRegionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRegionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRegionsRequest_FieldPathArrayItemValue
}

type ListRegionsRequest_FieldPathSelector int32

const (
	ListRegionsRequest_FieldPathSelectorPageSize  ListRegionsRequest_FieldPathSelector = 0
	ListRegionsRequest_FieldPathSelectorPageToken ListRegionsRequest_FieldPathSelector = 1
	ListRegionsRequest_FieldPathSelectorOrderBy   ListRegionsRequest_FieldPathSelector = 2
	ListRegionsRequest_FieldPathSelectorFilter    ListRegionsRequest_FieldPathSelector = 3
	ListRegionsRequest_FieldPathSelectorFieldMask ListRegionsRequest_FieldPathSelector = 4
	ListRegionsRequest_FieldPathSelectorView      ListRegionsRequest_FieldPathSelector = 5
)

func (s ListRegionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListRegionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListRegionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListRegionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", s))
	}
}

func BuildListRegionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListRegionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRegionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListRegionsRequest_FieldTerminalPath{selector: ListRegionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRegionsRequest", fp)
}

func ParseListRegionsRequest_FieldPath(rawField string) (ListRegionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRegionsRequest_FieldPath(fp)
}

func MustParseListRegionsRequest_FieldPath(rawField string) ListRegionsRequest_FieldPath {
	fp, err := ParseListRegionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRegionsRequest_FieldTerminalPath struct {
	selector ListRegionsRequest_FieldPathSelector
}

var _ ListRegionsRequest_FieldPath = (*ListRegionsRequest_FieldTerminalPath)(nil)

func (fp *ListRegionsRequest_FieldTerminalPath) Selector() ListRegionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRegionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRegionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRegionsRequest
func (fp *ListRegionsRequest_FieldTerminalPath) Get(source *ListRegionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRegionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListRegionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListRegionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListRegionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListRegionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListRegionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRegionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRegionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListRegionsRequest
func (fp *ListRegionsRequest_FieldTerminalPath) GetSingle(source *ListRegionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListRegionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListRegionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListRegionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
	}
}

func (fp *ListRegionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRegionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListRegionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListRegionsRequest_FieldPathSelectorPageToken:
		return (*region.PagerCursor)(nil)
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		return (*region.OrderBy)(nil)
	case ListRegionsRequest_FieldPathSelectorFilter:
		return (*region.Filter)(nil)
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		return (*region.Region_FieldMask)(nil)
	case ListRegionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
	}
}

func (fp *ListRegionsRequest_FieldTerminalPath) ClearValue(item *ListRegionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListRegionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListRegionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListRegionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListRegionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListRegionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListRegionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListRegionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRegionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRegionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRegionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListRegionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListRegionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListRegionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListRegionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListRegionsRequest_FieldPathSelectorView
}

func (fp *ListRegionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListRegionsRequest_FieldPathValue {
	switch fp.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		return &ListRegionsRequest_FieldTerminalPathValue{ListRegionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListRegionsRequest_FieldPathSelectorPageToken:
		return &ListRegionsRequest_FieldTerminalPathValue{ListRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.PagerCursor)}
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		return &ListRegionsRequest_FieldTerminalPathValue{ListRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.OrderBy)}
	case ListRegionsRequest_FieldPathSelectorFilter:
		return &ListRegionsRequest_FieldTerminalPathValue{ListRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Filter)}
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		return &ListRegionsRequest_FieldTerminalPathValue{ListRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	case ListRegionsRequest_FieldPathSelectorView:
		return &ListRegionsRequest_FieldTerminalPathValue{ListRegionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
	}
}

func (fp *ListRegionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRegionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRegionsRequest_FieldPathArrayOfValues {
	fpaov := &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		return &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListRegionsRequest_FieldPathSelectorPageToken:
		return &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.PagerCursor)}
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		return &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.OrderBy)}
	case ListRegionsRequest_FieldPathSelectorFilter:
		return &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.Filter)}
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		return &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	case ListRegionsRequest_FieldPathSelectorView:
		return &ListRegionsRequest_FieldTerminalPathArrayOfValues{ListRegionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRegionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRegionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRegionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fp.selector))
	}
}

func (fp *ListRegionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListRegionsRequest_FieldPathValue allows storing values for ListRegionsRequest fields according to their type
type ListRegionsRequest_FieldPathValue interface {
	ListRegionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRegionsRequest)
	CompareWith(*ListRegionsRequest) (cmp int, comparable bool)
}

func ParseListRegionsRequest_FieldPathValue(pathStr, valueStr string) (ListRegionsRequest_FieldPathValue, error) {
	fp, err := ParseListRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRegionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRegionsRequest_FieldPathValue), nil
}

func MustParseListRegionsRequest_FieldPathValue(pathStr, valueStr string) ListRegionsRequest_FieldPathValue {
	fpv, err := ParseListRegionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRegionsRequest_FieldTerminalPathValue struct {
	ListRegionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListRegionsRequest_FieldPathValue = (*ListRegionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRegionsRequest' as interface{}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*region.PagerCursor, bool) {
	res, ok := fpv.value.(*region.PagerCursor)
	return res, ok
}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) AsOrderByValue() (*region.OrderBy, bool) {
	res, ok := fpv.value.(*region.OrderBy)
	return res, ok
}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) AsFilterValue() (*region.Filter, bool) {
	res, ok := fpv.value.(*region.Filter)
	return res, ok
}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}
func (fpv *ListRegionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListRegionsRequest
func (fpv *ListRegionsRequest_FieldTerminalPathValue) SetTo(target **ListRegionsRequest) {
	if *target == nil {
		*target = new(ListRegionsRequest)
	}
	switch fpv.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListRegionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*region.PagerCursor)
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*region.OrderBy)
	case ListRegionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*region.Filter)
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*region.Region_FieldMask)
	case ListRegionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListRegionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRegionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRegionsRequest_FieldTerminalPathValue' with the value under path in 'ListRegionsRequest'.
func (fpv *ListRegionsRequest_FieldTerminalPathValue) CompareWith(source *ListRegionsRequest) (int, bool) {
	switch fpv.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRegionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListRegionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListRegionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListRegionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRegionsRequest))
}

// ListRegionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRegionsRequest according to their type
// Present only for array (repeated) types.
type ListRegionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRegionsRequest_FieldPath
	ContainsValue(*ListRegionsRequest) bool
}

// ParseListRegionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListRegionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRegionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRegionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListRegionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRegionsRequest_FieldTerminalPathArrayItemValue struct {
	ListRegionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListRegionsRequest_FieldPathArrayItemValue = (*ListRegionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRegionsRequest as interface{}
func (fpaiv *ListRegionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListRegionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListRegionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRegionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRegionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRegionsRequest'
func (fpaiv *ListRegionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRegionsRequest) bool {
	slice := fpaiv.ListRegionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListRegionsRequest_FieldPathArrayOfValues allows storing slice of values for ListRegionsRequest fields according to their type
type ListRegionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRegionsRequest_FieldPath
}

func ParseListRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRegionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRegionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRegionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListRegionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRegionsRequest_FieldTerminalPathArrayOfValues struct {
	ListRegionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListRegionsRequest_FieldPathArrayOfValues = (*ListRegionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRegionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListRegionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*region.PagerCursor) {
			values = append(values, v)
		}
	case ListRegionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*region.OrderBy) {
			values = append(values, v)
		}
	case ListRegionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*region.Filter) {
			values = append(values, v)
		}
	case ListRegionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	case ListRegionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*region.PagerCursor, bool) {
	res, ok := fpaov.values.([]*region.PagerCursor)
	return res, ok
}
func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*region.OrderBy, bool) {
	res, ok := fpaov.values.([]*region.OrderBy)
	return res, ok
}
func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*region.Filter, bool) {
	res, ok := fpaov.values.([]*region.Filter)
	return res, ok
}
func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}
func (fpaov *ListRegionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRegionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRegionsResponse_FieldPathSelector
	Get(source *ListRegionsResponse) []interface{}
	GetSingle(source *ListRegionsResponse) (interface{}, bool)
	ClearValue(item *ListRegionsResponse)

	// Those methods build corresponding ListRegionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRegionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRegionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRegionsResponse_FieldPathArrayItemValue
}

type ListRegionsResponse_FieldPathSelector int32

const (
	ListRegionsResponse_FieldPathSelectorRegions       ListRegionsResponse_FieldPathSelector = 0
	ListRegionsResponse_FieldPathSelectorPrevPageToken ListRegionsResponse_FieldPathSelector = 1
	ListRegionsResponse_FieldPathSelectorNextPageToken ListRegionsResponse_FieldPathSelector = 2
)

func (s ListRegionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return "regions"
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", s))
	}
}

func BuildListRegionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListRegionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRegionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "regions":
			return &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorRegions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListRegionsResponse_FieldTerminalPath{selector: ListRegionsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "regions":
			if subpath, err := region.BuildRegion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListRegionsResponse_FieldSubPath{selector: ListRegionsResponse_FieldPathSelectorRegions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRegionsResponse", fp)
}

func ParseListRegionsResponse_FieldPath(rawField string) (ListRegionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRegionsResponse_FieldPath(fp)
}

func MustParseListRegionsResponse_FieldPath(rawField string) ListRegionsResponse_FieldPath {
	fp, err := ParseListRegionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRegionsResponse_FieldTerminalPath struct {
	selector ListRegionsResponse_FieldPathSelector
}

var _ ListRegionsResponse_FieldPath = (*ListRegionsResponse_FieldTerminalPath)(nil)

func (fp *ListRegionsResponse_FieldTerminalPath) Selector() ListRegionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRegionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRegionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRegionsResponse
func (fp *ListRegionsResponse_FieldTerminalPath) Get(source *ListRegionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRegionsResponse_FieldPathSelectorRegions:
			for _, value := range source.GetRegions() {
				values = append(values, value)
			}
		case ListRegionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListRegionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRegionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRegionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListRegionsResponse
func (fp *ListRegionsResponse_FieldTerminalPath) GetSingle(source *ListRegionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		res := source.GetRegions()
		return res, res != nil
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
	}
}

func (fp *ListRegionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRegionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListRegionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return ([]*region.Region)(nil)
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		return (*region.PagerCursor)(nil)
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		return (*region.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
	}
}

func (fp *ListRegionsResponse_FieldTerminalPath) ClearValue(item *ListRegionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListRegionsResponse_FieldPathSelectorRegions:
			item.Regions = nil
		case ListRegionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListRegionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListRegionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRegionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRegionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRegionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListRegionsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListRegionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListRegionsResponse_FieldPathValue {
	switch fp.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return &ListRegionsResponse_FieldTerminalPathValue{ListRegionsResponse_FieldTerminalPath: *fp, value: value.([]*region.Region)}
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		return &ListRegionsResponse_FieldTerminalPathValue{ListRegionsResponse_FieldTerminalPath: *fp, value: value.(*region.PagerCursor)}
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		return &ListRegionsResponse_FieldTerminalPathValue{ListRegionsResponse_FieldTerminalPath: *fp, value: value.(*region.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
	}
}

func (fp *ListRegionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRegionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRegionsResponse_FieldPathArrayOfValues {
	fpaov := &ListRegionsResponse_FieldTerminalPathArrayOfValues{ListRegionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return &ListRegionsResponse_FieldTerminalPathArrayOfValues{ListRegionsResponse_FieldTerminalPath: *fp, values: values.([][]*region.Region)}
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		return &ListRegionsResponse_FieldTerminalPathArrayOfValues{ListRegionsResponse_FieldTerminalPath: *fp, values: values.([]*region.PagerCursor)}
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		return &ListRegionsResponse_FieldTerminalPathArrayOfValues{ListRegionsResponse_FieldTerminalPath: *fp, values: values.([]*region.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRegionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRegionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRegionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return &ListRegionsResponse_FieldTerminalPathArrayItemValue{ListRegionsResponse_FieldTerminalPath: *fp, value: value.(*region.Region)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fp.selector))
	}
}

func (fp *ListRegionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListRegionsResponse_FieldSubPath struct {
	selector ListRegionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListRegionsResponse_FieldPath = (*ListRegionsResponse_FieldSubPath)(nil)

func (fps *ListRegionsResponse_FieldSubPath) Selector() ListRegionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListRegionsResponse_FieldSubPath) AsRegionsSubPath() (region.Region_FieldPath, bool) {
	res, ok := fps.subPath.(region.Region_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListRegionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListRegionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListRegionsResponse
func (fps *ListRegionsResponse_FieldSubPath) Get(source *ListRegionsResponse) (values []interface{}) {
	if asRegionFieldPath, ok := fps.AsRegionsSubPath(); ok {
		for _, item := range source.GetRegions() {
			values = append(values, asRegionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListRegionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListRegionsResponse))
}

// GetSingle returns value of selected field from source ListRegionsResponse
func (fps *ListRegionsResponse_FieldSubPath) GetSingle(source *ListRegionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		if len(source.GetRegions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRegions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fps.selector))
	}
}

func (fps *ListRegionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListRegionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListRegionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListRegionsResponse_FieldSubPath) ClearValue(item *ListRegionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListRegionsResponse_FieldPathSelectorRegions:
			for _, subItem := range item.Regions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListRegionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListRegionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListRegionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListRegionsResponse_FieldSubPath) WithIValue(value interface{}) ListRegionsResponse_FieldPathValue {
	return &ListRegionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListRegionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListRegionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListRegionsResponse_FieldPathArrayOfValues {
	return &ListRegionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListRegionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListRegionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListRegionsResponse_FieldPathArrayItemValue {
	return &ListRegionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListRegionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListRegionsResponse_FieldPathValue allows storing values for ListRegionsResponse fields according to their type
type ListRegionsResponse_FieldPathValue interface {
	ListRegionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRegionsResponse)
	CompareWith(*ListRegionsResponse) (cmp int, comparable bool)
}

func ParseListRegionsResponse_FieldPathValue(pathStr, valueStr string) (ListRegionsResponse_FieldPathValue, error) {
	fp, err := ParseListRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRegionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRegionsResponse_FieldPathValue), nil
}

func MustParseListRegionsResponse_FieldPathValue(pathStr, valueStr string) ListRegionsResponse_FieldPathValue {
	fpv, err := ParseListRegionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRegionsResponse_FieldTerminalPathValue struct {
	ListRegionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListRegionsResponse_FieldPathValue = (*ListRegionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRegionsResponse' as interface{}
func (fpv *ListRegionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRegionsResponse_FieldTerminalPathValue) AsRegionsValue() ([]*region.Region, bool) {
	res, ok := fpv.value.([]*region.Region)
	return res, ok
}
func (fpv *ListRegionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*region.PagerCursor, bool) {
	res, ok := fpv.value.(*region.PagerCursor)
	return res, ok
}
func (fpv *ListRegionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*region.PagerCursor, bool) {
	res, ok := fpv.value.(*region.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListRegionsResponse
func (fpv *ListRegionsResponse_FieldTerminalPathValue) SetTo(target **ListRegionsResponse) {
	if *target == nil {
		*target = new(ListRegionsResponse)
	}
	switch fpv.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		(*target).Regions = fpv.value.([]*region.Region)
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*region.PagerCursor)
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*region.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListRegionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRegionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRegionsResponse_FieldTerminalPathValue' with the value under path in 'ListRegionsResponse'.
func (fpv *ListRegionsResponse_FieldTerminalPathValue) CompareWith(source *ListRegionsResponse) (int, bool) {
	switch fpv.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return 0, false
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListRegionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRegionsResponse))
}

type ListRegionsResponse_FieldSubPathValue struct {
	ListRegionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListRegionsResponse_FieldPathValue = (*ListRegionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListRegionsResponse_FieldSubPathValue) AsRegionsPathValue() (region.Region_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(region.Region_FieldPathValue)
	return res, ok
}

func (fpvs *ListRegionsResponse_FieldSubPathValue) SetTo(target **ListRegionsResponse) {
	if *target == nil {
		*target = new(ListRegionsResponse)
	}
	switch fpvs.Selector() {
	case ListRegionsResponse_FieldPathSelectorRegions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRegionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRegionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListRegionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListRegionsResponse_FieldSubPathValue) CompareWith(source *ListRegionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRegionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListRegionsResponse))
}

// ListRegionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRegionsResponse according to their type
// Present only for array (repeated) types.
type ListRegionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRegionsResponse_FieldPath
	ContainsValue(*ListRegionsResponse) bool
}

// ParseListRegionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListRegionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRegionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRegionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListRegionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRegionsResponse_FieldTerminalPathArrayItemValue struct {
	ListRegionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListRegionsResponse_FieldPathArrayItemValue = (*ListRegionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRegionsResponse as interface{}
func (fpaiv *ListRegionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListRegionsResponse_FieldTerminalPathArrayItemValue) AsRegionsItemValue() (*region.Region, bool) {
	res, ok := fpaiv.value.(*region.Region)
	return res, ok
}

func (fpaiv *ListRegionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListRegionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRegionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRegionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRegionsResponse'
func (fpaiv *ListRegionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRegionsResponse) bool {
	slice := fpaiv.ListRegionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListRegionsResponse_FieldSubPathArrayItemValue struct {
	ListRegionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListRegionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListRegionsResponse_FieldSubPathArrayItemValue) AsRegionsPathItemValue() (region.Region_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRegionsResponse'
func (fpaivs *ListRegionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListRegionsResponse) bool {
	switch fpaivs.Selector() {
	case ListRegionsResponse_FieldPathSelectorRegions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRegionsResponse: %d", fpaivs.Selector()))
	}
}

// ListRegionsResponse_FieldPathArrayOfValues allows storing slice of values for ListRegionsResponse fields according to their type
type ListRegionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRegionsResponse_FieldPath
}

func ParseListRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRegionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRegionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRegionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListRegionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRegionsResponse_FieldTerminalPathArrayOfValues struct {
	ListRegionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListRegionsResponse_FieldPathArrayOfValues = (*ListRegionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRegionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRegionsResponse_FieldPathSelectorRegions:
		for _, v := range fpaov.values.([][]*region.Region) {
			values = append(values, v)
		}
	case ListRegionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*region.PagerCursor) {
			values = append(values, v)
		}
	case ListRegionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*region.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRegionsResponse_FieldTerminalPathArrayOfValues) AsRegionsArrayOfValues() ([][]*region.Region, bool) {
	res, ok := fpaov.values.([][]*region.Region)
	return res, ok
}
func (fpaov *ListRegionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*region.PagerCursor, bool) {
	res, ok := fpaov.values.([]*region.PagerCursor)
	return res, ok
}
func (fpaov *ListRegionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*region.PagerCursor, bool) {
	res, ok := fpaov.values.([]*region.PagerCursor)
	return res, ok
}

type ListRegionsResponse_FieldSubPathArrayOfValues struct {
	ListRegionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListRegionsResponse_FieldPathArrayOfValues = (*ListRegionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListRegionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListRegionsResponse_FieldSubPathArrayOfValues) AsRegionsPathArrayOfValues() (region.Region_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(region.Region_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRegionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRegionRequest_FieldPathSelector
	Get(source *WatchRegionRequest) []interface{}
	GetSingle(source *WatchRegionRequest) (interface{}, bool)
	ClearValue(item *WatchRegionRequest)

	// Those methods build corresponding WatchRegionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRegionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRegionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRegionRequest_FieldPathArrayItemValue
}

type WatchRegionRequest_FieldPathSelector int32

const (
	WatchRegionRequest_FieldPathSelectorName      WatchRegionRequest_FieldPathSelector = 0
	WatchRegionRequest_FieldPathSelectorFieldMask WatchRegionRequest_FieldPathSelector = 1
	WatchRegionRequest_FieldPathSelectorView      WatchRegionRequest_FieldPathSelector = 2
)

func (s WatchRegionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRegionRequest_FieldPathSelectorName:
		return "name"
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRegionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", s))
	}
}

func BuildWatchRegionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRegionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRegionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchRegionRequest_FieldTerminalPath{selector: WatchRegionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRegionRequest_FieldTerminalPath{selector: WatchRegionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRegionRequest_FieldTerminalPath{selector: WatchRegionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRegionRequest", fp)
}

func ParseWatchRegionRequest_FieldPath(rawField string) (WatchRegionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRegionRequest_FieldPath(fp)
}

func MustParseWatchRegionRequest_FieldPath(rawField string) WatchRegionRequest_FieldPath {
	fp, err := ParseWatchRegionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRegionRequest_FieldTerminalPath struct {
	selector WatchRegionRequest_FieldPathSelector
}

var _ WatchRegionRequest_FieldPath = (*WatchRegionRequest_FieldTerminalPath)(nil)

func (fp *WatchRegionRequest_FieldTerminalPath) Selector() WatchRegionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRegionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRegionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRegionRequest
func (fp *WatchRegionRequest_FieldTerminalPath) Get(source *WatchRegionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRegionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchRegionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRegionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRegionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRegionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRegionRequest
func (fp *WatchRegionRequest_FieldTerminalPath) GetSingle(source *WatchRegionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRegionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRegionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRegionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		return (*region.Reference)(nil)
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		return (*region.Region_FieldMask)(nil)
	case WatchRegionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionRequest_FieldTerminalPath) ClearValue(item *WatchRegionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRegionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchRegionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRegionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRegionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRegionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRegionRequest_FieldPathSelectorName ||
		fp.selector == WatchRegionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRegionRequest_FieldPathSelectorView
}

func (fp *WatchRegionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRegionRequest_FieldPathValue {
	switch fp.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		return &WatchRegionRequest_FieldTerminalPathValue{WatchRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		return &WatchRegionRequest_FieldTerminalPathValue{WatchRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	case WatchRegionRequest_FieldPathSelectorView:
		return &WatchRegionRequest_FieldTerminalPathValue{WatchRegionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRegionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRegionRequest_FieldPathArrayOfValues {
	fpaov := &WatchRegionRequest_FieldTerminalPathArrayOfValues{WatchRegionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		return &WatchRegionRequest_FieldTerminalPathArrayOfValues{WatchRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Reference)}
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		return &WatchRegionRequest_FieldTerminalPathArrayOfValues{WatchRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	case WatchRegionRequest_FieldPathSelectorView:
		return &WatchRegionRequest_FieldTerminalPathArrayOfValues{WatchRegionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRegionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRegionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRegionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRegionRequest_FieldPathValue allows storing values for WatchRegionRequest fields according to their type
type WatchRegionRequest_FieldPathValue interface {
	WatchRegionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRegionRequest)
	CompareWith(*WatchRegionRequest) (cmp int, comparable bool)
}

func ParseWatchRegionRequest_FieldPathValue(pathStr, valueStr string) (WatchRegionRequest_FieldPathValue, error) {
	fp, err := ParseWatchRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRegionRequest_FieldPathValue), nil
}

func MustParseWatchRegionRequest_FieldPathValue(pathStr, valueStr string) WatchRegionRequest_FieldPathValue {
	fpv, err := ParseWatchRegionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRegionRequest_FieldTerminalPathValue struct {
	WatchRegionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRegionRequest_FieldPathValue = (*WatchRegionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRegionRequest' as interface{}
func (fpv *WatchRegionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRegionRequest_FieldTerminalPathValue) AsNameValue() (*region.Reference, bool) {
	res, ok := fpv.value.(*region.Reference)
	return res, ok
}
func (fpv *WatchRegionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}
func (fpv *WatchRegionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchRegionRequest
func (fpv *WatchRegionRequest_FieldTerminalPathValue) SetTo(target **WatchRegionRequest) {
	if *target == nil {
		*target = new(WatchRegionRequest)
	}
	switch fpv.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*region.Reference)
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*region.Region_FieldMask)
	case WatchRegionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRegionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRegionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRegionRequest_FieldTerminalPathValue' with the value under path in 'WatchRegionRequest'.
func (fpv *WatchRegionRequest_FieldTerminalPathValue) CompareWith(source *WatchRegionRequest) (int, bool) {
	switch fpv.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*region.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRegionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRegionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRegionRequest))
}

// WatchRegionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRegionRequest according to their type
// Present only for array (repeated) types.
type WatchRegionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRegionRequest_FieldPath
	ContainsValue(*WatchRegionRequest) bool
}

// ParseWatchRegionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRegionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRegionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRegionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRegionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRegionRequest_FieldTerminalPathArrayItemValue struct {
	WatchRegionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRegionRequest_FieldPathArrayItemValue = (*WatchRegionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRegionRequest as interface{}
func (fpaiv *WatchRegionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRegionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRegionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRegionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRegionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRegionRequest'
func (fpaiv *WatchRegionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRegionRequest) bool {
	slice := fpaiv.WatchRegionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRegionRequest_FieldPathArrayOfValues allows storing slice of values for WatchRegionRequest fields according to their type
type WatchRegionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRegionRequest_FieldPath
}

func ParseWatchRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRegionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRegionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRegionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRegionRequest_FieldTerminalPathArrayOfValues struct {
	WatchRegionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRegionRequest_FieldPathArrayOfValues = (*WatchRegionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRegionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRegionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*region.Reference) {
			values = append(values, v)
		}
	case WatchRegionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	case WatchRegionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRegionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*region.Reference, bool) {
	res, ok := fpaov.values.([]*region.Reference)
	return res, ok
}
func (fpaov *WatchRegionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}
func (fpaov *WatchRegionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRegionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRegionResponse_FieldPathSelector
	Get(source *WatchRegionResponse) []interface{}
	GetSingle(source *WatchRegionResponse) (interface{}, bool)
	ClearValue(item *WatchRegionResponse)

	// Those methods build corresponding WatchRegionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRegionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRegionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRegionResponse_FieldPathArrayItemValue
}

type WatchRegionResponse_FieldPathSelector int32

const (
	WatchRegionResponse_FieldPathSelectorChange WatchRegionResponse_FieldPathSelector = 0
)

func (s WatchRegionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRegionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", s))
	}
}

func BuildWatchRegionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRegionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRegionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchRegionResponse_FieldTerminalPath{selector: WatchRegionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRegionResponse", fp)
}

func ParseWatchRegionResponse_FieldPath(rawField string) (WatchRegionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRegionResponse_FieldPath(fp)
}

func MustParseWatchRegionResponse_FieldPath(rawField string) WatchRegionResponse_FieldPath {
	fp, err := ParseWatchRegionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRegionResponse_FieldTerminalPath struct {
	selector WatchRegionResponse_FieldPathSelector
}

var _ WatchRegionResponse_FieldPath = (*WatchRegionResponse_FieldTerminalPath)(nil)

func (fp *WatchRegionResponse_FieldTerminalPath) Selector() WatchRegionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRegionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRegionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRegionResponse
func (fp *WatchRegionResponse_FieldTerminalPath) Get(source *WatchRegionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRegionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRegionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRegionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRegionResponse
func (fp *WatchRegionResponse_FieldTerminalPath) GetSingle(source *WatchRegionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRegionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRegionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		return (*region.RegionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionResponse_FieldTerminalPath) ClearValue(item *WatchRegionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRegionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRegionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRegionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRegionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRegionResponse_FieldPathSelectorChange
}

func (fp *WatchRegionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRegionResponse_FieldPathValue {
	switch fp.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		return &WatchRegionResponse_FieldTerminalPathValue{WatchRegionResponse_FieldTerminalPath: *fp, value: value.(*region.RegionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRegionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRegionResponse_FieldPathArrayOfValues {
	fpaov := &WatchRegionResponse_FieldTerminalPathArrayOfValues{WatchRegionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		return &WatchRegionResponse_FieldTerminalPathArrayOfValues{WatchRegionResponse_FieldTerminalPath: *fp, values: values.([]*region.RegionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRegionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRegionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRegionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRegionResponse_FieldPathValue allows storing values for WatchRegionResponse fields according to their type
type WatchRegionResponse_FieldPathValue interface {
	WatchRegionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRegionResponse)
	CompareWith(*WatchRegionResponse) (cmp int, comparable bool)
}

func ParseWatchRegionResponse_FieldPathValue(pathStr, valueStr string) (WatchRegionResponse_FieldPathValue, error) {
	fp, err := ParseWatchRegionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRegionResponse_FieldPathValue), nil
}

func MustParseWatchRegionResponse_FieldPathValue(pathStr, valueStr string) WatchRegionResponse_FieldPathValue {
	fpv, err := ParseWatchRegionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRegionResponse_FieldTerminalPathValue struct {
	WatchRegionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRegionResponse_FieldPathValue = (*WatchRegionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRegionResponse' as interface{}
func (fpv *WatchRegionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRegionResponse_FieldTerminalPathValue) AsChangeValue() (*region.RegionChange, bool) {
	res, ok := fpv.value.(*region.RegionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchRegionResponse
func (fpv *WatchRegionResponse_FieldTerminalPathValue) SetTo(target **WatchRegionResponse) {
	if *target == nil {
		*target = new(WatchRegionResponse)
	}
	switch fpv.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*region.RegionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRegionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRegionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRegionResponse_FieldTerminalPathValue' with the value under path in 'WatchRegionResponse'.
func (fpv *WatchRegionResponse_FieldTerminalPathValue) CompareWith(source *WatchRegionResponse) (int, bool) {
	switch fpv.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRegionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRegionResponse))
}

// WatchRegionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRegionResponse according to their type
// Present only for array (repeated) types.
type WatchRegionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRegionResponse_FieldPath
	ContainsValue(*WatchRegionResponse) bool
}

// ParseWatchRegionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRegionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRegionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRegionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRegionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRegionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRegionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRegionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRegionResponse_FieldTerminalPathArrayItemValue struct {
	WatchRegionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRegionResponse_FieldPathArrayItemValue = (*WatchRegionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRegionResponse as interface{}
func (fpaiv *WatchRegionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRegionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRegionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRegionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRegionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRegionResponse'
func (fpaiv *WatchRegionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRegionResponse) bool {
	slice := fpaiv.WatchRegionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRegionResponse_FieldPathArrayOfValues allows storing slice of values for WatchRegionResponse fields according to their type
type WatchRegionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRegionResponse_FieldPath
}

func ParseWatchRegionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRegionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRegionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRegionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRegionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRegionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRegionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRegionResponse_FieldTerminalPathArrayOfValues struct {
	WatchRegionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRegionResponse_FieldPathArrayOfValues = (*WatchRegionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRegionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRegionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*region.RegionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRegionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*region.RegionChange, bool) {
	res, ok := fpaov.values.([]*region.RegionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRegionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRegionsRequest_FieldPathSelector
	Get(source *WatchRegionsRequest) []interface{}
	GetSingle(source *WatchRegionsRequest) (interface{}, bool)
	ClearValue(item *WatchRegionsRequest)

	// Those methods build corresponding WatchRegionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRegionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRegionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRegionsRequest_FieldPathArrayItemValue
}

type WatchRegionsRequest_FieldPathSelector int32

const (
	WatchRegionsRequest_FieldPathSelectorType         WatchRegionsRequest_FieldPathSelector = 0
	WatchRegionsRequest_FieldPathSelectorPageSize     WatchRegionsRequest_FieldPathSelector = 1
	WatchRegionsRequest_FieldPathSelectorPageToken    WatchRegionsRequest_FieldPathSelector = 2
	WatchRegionsRequest_FieldPathSelectorOrderBy      WatchRegionsRequest_FieldPathSelector = 3
	WatchRegionsRequest_FieldPathSelectorResumeToken  WatchRegionsRequest_FieldPathSelector = 4
	WatchRegionsRequest_FieldPathSelectorFilter       WatchRegionsRequest_FieldPathSelector = 5
	WatchRegionsRequest_FieldPathSelectorFieldMask    WatchRegionsRequest_FieldPathSelector = 6
	WatchRegionsRequest_FieldPathSelectorView         WatchRegionsRequest_FieldPathSelector = 7
	WatchRegionsRequest_FieldPathSelectorMaxChunkSize WatchRegionsRequest_FieldPathSelector = 8
)

func (s WatchRegionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRegionsRequest_FieldPathSelectorType:
		return "type"
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRegionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRegionsRequest_FieldPathSelectorView:
		return "view"
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", s))
	}
}

func BuildWatchRegionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRegionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRegionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchRegionsRequest_FieldTerminalPath{selector: WatchRegionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRegionsRequest", fp)
}

func ParseWatchRegionsRequest_FieldPath(rawField string) (WatchRegionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRegionsRequest_FieldPath(fp)
}

func MustParseWatchRegionsRequest_FieldPath(rawField string) WatchRegionsRequest_FieldPath {
	fp, err := ParseWatchRegionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRegionsRequest_FieldTerminalPath struct {
	selector WatchRegionsRequest_FieldPathSelector
}

var _ WatchRegionsRequest_FieldPath = (*WatchRegionsRequest_FieldTerminalPath)(nil)

func (fp *WatchRegionsRequest_FieldTerminalPath) Selector() WatchRegionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRegionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRegionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRegionsRequest
func (fp *WatchRegionsRequest_FieldTerminalPath) Get(source *WatchRegionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRegionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchRegionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchRegionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchRegionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchRegionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRegionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchRegionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRegionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRegionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRegionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRegionsRequest
func (fp *WatchRegionsRequest_FieldTerminalPath) GetSingle(source *WatchRegionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRegionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRegionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRegionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRegionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		return (*region.PagerCursor)(nil)
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		return (*region.OrderBy)(nil)
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchRegionsRequest_FieldPathSelectorFilter:
		return (*region.Filter)(nil)
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		return (*region.Region_FieldMask)(nil)
	case WatchRegionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionsRequest_FieldTerminalPath) ClearValue(item *WatchRegionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRegionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchRegionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchRegionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchRegionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchRegionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRegionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchRegionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRegionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRegionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRegionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRegionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRegionsRequest_FieldPathSelectorType ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorView ||
		fp.selector == WatchRegionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchRegionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRegionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.PagerCursor)}
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.OrderBy)}
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRegionsRequest_FieldPathSelectorFilter:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Filter)}
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	case WatchRegionsRequest_FieldPathSelectorView:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRegionsRequest_FieldTerminalPathValue{WatchRegionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRegionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRegionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.PagerCursor)}
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.OrderBy)}
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRegionsRequest_FieldPathSelectorFilter:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.Filter)}
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	case WatchRegionsRequest_FieldPathSelectorView:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRegionsRequest_FieldTerminalPathArrayOfValues{WatchRegionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRegionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRegionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRegionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fp.selector))
	}
}

func (fp *WatchRegionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRegionsRequest_FieldPathValue allows storing values for WatchRegionsRequest fields according to their type
type WatchRegionsRequest_FieldPathValue interface {
	WatchRegionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRegionsRequest)
	CompareWith(*WatchRegionsRequest) (cmp int, comparable bool)
}

func ParseWatchRegionsRequest_FieldPathValue(pathStr, valueStr string) (WatchRegionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRegionsRequest_FieldPathValue), nil
}

func MustParseWatchRegionsRequest_FieldPathValue(pathStr, valueStr string) WatchRegionsRequest_FieldPathValue {
	fpv, err := ParseWatchRegionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRegionsRequest_FieldTerminalPathValue struct {
	WatchRegionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRegionsRequest_FieldPathValue = (*WatchRegionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRegionsRequest' as interface{}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*region.PagerCursor, bool) {
	res, ok := fpv.value.(*region.PagerCursor)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsOrderByValue() (*region.OrderBy, bool) {
	res, ok := fpv.value.(*region.OrderBy)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsFilterValue() (*region.Filter, bool) {
	res, ok := fpv.value.(*region.Filter)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchRegionsRequest
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) SetTo(target **WatchRegionsRequest) {
	if *target == nil {
		*target = new(WatchRegionsRequest)
	}
	switch fpv.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*region.PagerCursor)
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*region.OrderBy)
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRegionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*region.Filter)
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*region.Region_FieldMask)
	case WatchRegionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRegionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRegionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRegionsRequest_FieldTerminalPathValue' with the value under path in 'WatchRegionsRequest'.
func (fpv *WatchRegionsRequest_FieldTerminalPathValue) CompareWith(source *WatchRegionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRegionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRegionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRegionsRequest))
}

// WatchRegionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRegionsRequest according to their type
// Present only for array (repeated) types.
type WatchRegionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRegionsRequest_FieldPath
	ContainsValue(*WatchRegionsRequest) bool
}

// ParseWatchRegionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRegionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRegionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRegionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRegionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRegionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchRegionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRegionsRequest_FieldPathArrayItemValue = (*WatchRegionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRegionsRequest as interface{}
func (fpaiv *WatchRegionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRegionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRegionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRegionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRegionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRegionsRequest'
func (fpaiv *WatchRegionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRegionsRequest) bool {
	slice := fpaiv.WatchRegionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRegionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchRegionsRequest fields according to their type
type WatchRegionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRegionsRequest_FieldPath
}

func ParseWatchRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRegionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRegionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRegionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRegionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRegionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRegionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchRegionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRegionsRequest_FieldPathArrayOfValues = (*WatchRegionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRegionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*region.PagerCursor) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*region.OrderBy) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*region.Filter) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchRegionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*region.PagerCursor, bool) {
	res, ok := fpaov.values.([]*region.PagerCursor)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*region.OrderBy, bool) {
	res, ok := fpaov.values.([]*region.OrderBy)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*region.Filter, bool) {
	res, ok := fpaov.values.([]*region.Filter)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchRegionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRegionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRegionsResponse_FieldPathSelector
	Get(source *WatchRegionsResponse) []interface{}
	GetSingle(source *WatchRegionsResponse) (interface{}, bool)
	ClearValue(item *WatchRegionsResponse)

	// Those methods build corresponding WatchRegionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRegionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRegionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRegionsResponse_FieldPathArrayItemValue
}

type WatchRegionsResponse_FieldPathSelector int32

const (
	WatchRegionsResponse_FieldPathSelectorRegionChanges   WatchRegionsResponse_FieldPathSelector = 0
	WatchRegionsResponse_FieldPathSelectorIsCurrent       WatchRegionsResponse_FieldPathSelector = 1
	WatchRegionsResponse_FieldPathSelectorPageTokenChange WatchRegionsResponse_FieldPathSelector = 2
	WatchRegionsResponse_FieldPathSelectorResumeToken     WatchRegionsResponse_FieldPathSelector = 3
	WatchRegionsResponse_FieldPathSelectorSnapshotSize    WatchRegionsResponse_FieldPathSelector = 4
	WatchRegionsResponse_FieldPathSelectorIsSoftReset     WatchRegionsResponse_FieldPathSelector = 5
	WatchRegionsResponse_FieldPathSelectorIsHardReset     WatchRegionsResponse_FieldPathSelector = 6
)

func (s WatchRegionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		return "region_changes"
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", s))
	}
}

func BuildWatchRegionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRegionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRegionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "region_changes", "regionChanges", "region-changes":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorRegionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchRegionsResponse_FieldTerminalPath{selector: WatchRegionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchRegionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchRegionsResponse_FieldSubPath{selector: WatchRegionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRegionsResponse", fp)
}

func ParseWatchRegionsResponse_FieldPath(rawField string) (WatchRegionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRegionsResponse_FieldPath(fp)
}

func MustParseWatchRegionsResponse_FieldPath(rawField string) WatchRegionsResponse_FieldPath {
	fp, err := ParseWatchRegionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRegionsResponse_FieldTerminalPath struct {
	selector WatchRegionsResponse_FieldPathSelector
}

var _ WatchRegionsResponse_FieldPath = (*WatchRegionsResponse_FieldTerminalPath)(nil)

func (fp *WatchRegionsResponse_FieldTerminalPath) Selector() WatchRegionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRegionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRegionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRegionsResponse
func (fp *WatchRegionsResponse_FieldTerminalPath) Get(source *WatchRegionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRegionsResponse_FieldPathSelectorRegionChanges:
			for _, value := range source.GetRegionChanges() {
				values = append(values, value)
			}
		case WatchRegionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchRegionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchRegionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRegionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRegionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRegionsResponse
func (fp *WatchRegionsResponse_FieldTerminalPath) GetSingle(source *WatchRegionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		res := source.GetRegionChanges()
		return res, res != nil
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRegionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRegionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		return ([]*region.RegionChange)(nil)
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchRegionsResponse_PageTokenChange)(nil)
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponse_FieldTerminalPath) ClearValue(item *WatchRegionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRegionsResponse_FieldPathSelectorRegionChanges:
			item.RegionChanges = nil
		case WatchRegionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchRegionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchRegionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRegionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRegionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRegionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRegionsResponse_FieldPathSelectorRegionChanges ||
		fp.selector == WatchRegionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchRegionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchRegionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchRegionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchRegionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchRegionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRegionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.([]*region.RegionChange)}
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(*WatchRegionsResponse_PageTokenChange)}
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		return &WatchRegionsResponse_FieldTerminalPathValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRegionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRegionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([][]*region.RegionChange)}
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchRegionsResponse_PageTokenChange)}
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		return &WatchRegionsResponse_FieldTerminalPathArrayOfValues{WatchRegionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRegionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRegionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRegionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		return &WatchRegionsResponse_FieldTerminalPathArrayItemValue{WatchRegionsResponse_FieldTerminalPath: *fp, value: value.(*region.RegionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchRegionsResponse_FieldSubPath struct {
	selector WatchRegionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchRegionsResponse_FieldPath = (*WatchRegionsResponse_FieldSubPath)(nil)

func (fps *WatchRegionsResponse_FieldSubPath) Selector() WatchRegionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchRegionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchRegionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchRegionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchRegionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchRegionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchRegionsResponse
func (fps *WatchRegionsResponse_FieldSubPath) Get(source *WatchRegionsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchRegionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchRegionsResponse))
}

// GetSingle returns value of selected field from source WatchRegionsResponse
func (fps *WatchRegionsResponse_FieldSubPath) GetSingle(source *WatchRegionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fps.selector))
	}
}

func (fps *WatchRegionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchRegionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchRegionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchRegionsResponse_FieldSubPath) ClearValue(item *WatchRegionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchRegionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchRegionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchRegionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchRegionsResponse_FieldSubPath) WithIValue(value interface{}) WatchRegionsResponse_FieldPathValue {
	return &WatchRegionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchRegionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchRegionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchRegionsResponse_FieldPathArrayOfValues {
	return &WatchRegionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchRegionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchRegionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchRegionsResponse_FieldPathArrayItemValue {
	return &WatchRegionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchRegionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchRegionsResponse_FieldPathValue allows storing values for WatchRegionsResponse fields according to their type
type WatchRegionsResponse_FieldPathValue interface {
	WatchRegionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRegionsResponse)
	CompareWith(*WatchRegionsResponse) (cmp int, comparable bool)
}

func ParseWatchRegionsResponse_FieldPathValue(pathStr, valueStr string) (WatchRegionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRegionsResponse_FieldPathValue), nil
}

func MustParseWatchRegionsResponse_FieldPathValue(pathStr, valueStr string) WatchRegionsResponse_FieldPathValue {
	fpv, err := ParseWatchRegionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRegionsResponse_FieldTerminalPathValue struct {
	WatchRegionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRegionsResponse_FieldPathValue = (*WatchRegionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRegionsResponse' as interface{}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsRegionChangesValue() ([]*region.RegionChange, bool) {
	res, ok := fpv.value.([]*region.RegionChange)
	return res, ok
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchRegionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchRegionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchRegionsResponse
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) SetTo(target **WatchRegionsResponse) {
	if *target == nil {
		*target = new(WatchRegionsResponse)
	}
	switch fpv.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		(*target).RegionChanges = fpv.value.([]*region.RegionChange)
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchRegionsResponse_PageTokenChange)
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRegionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRegionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRegionsResponse_FieldTerminalPathValue' with the value under path in 'WatchRegionsResponse'.
func (fpv *WatchRegionsResponse_FieldTerminalPathValue) CompareWith(source *WatchRegionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		return 0, false
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRegionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRegionsResponse))
}

type WatchRegionsResponse_FieldSubPathValue struct {
	WatchRegionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchRegionsResponse_FieldPathValue = (*WatchRegionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchRegionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchRegionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchRegionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchRegionsResponse_FieldSubPathValue) SetTo(target **WatchRegionsResponse) {
	if *target == nil {
		*target = new(WatchRegionsResponse)
	}
	switch fpvs.Selector() {
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchRegionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRegionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRegionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchRegionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchRegionsResponse_FieldSubPathValue) CompareWith(source *WatchRegionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchRegionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRegionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchRegionsResponse))
}

// WatchRegionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRegionsResponse according to their type
// Present only for array (repeated) types.
type WatchRegionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRegionsResponse_FieldPath
	ContainsValue(*WatchRegionsResponse) bool
}

// ParseWatchRegionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRegionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRegionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRegionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRegionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRegionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchRegionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRegionsResponse_FieldPathArrayItemValue = (*WatchRegionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRegionsResponse as interface{}
func (fpaiv *WatchRegionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchRegionsResponse_FieldTerminalPathArrayItemValue) AsRegionChangesItemValue() (*region.RegionChange, bool) {
	res, ok := fpaiv.value.(*region.RegionChange)
	return res, ok
}

func (fpaiv *WatchRegionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRegionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRegionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRegionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRegionsResponse'
func (fpaiv *WatchRegionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRegionsResponse) bool {
	slice := fpaiv.WatchRegionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchRegionsResponse_FieldSubPathArrayItemValue struct {
	WatchRegionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchRegionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchRegionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRegionsResponse'
func (fpaivs *WatchRegionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchRegionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchRegionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchRegionsResponse fields according to their type
type WatchRegionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRegionsResponse_FieldPath
}

func ParseWatchRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRegionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRegionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRegionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRegionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRegionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRegionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRegionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchRegionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRegionsResponse_FieldPathArrayOfValues = (*WatchRegionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRegionsResponse_FieldPathSelectorRegionChanges:
		for _, v := range fpaov.values.([][]*region.RegionChange) {
			values = append(values, v)
		}
	case WatchRegionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRegionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchRegionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchRegionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRegionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchRegionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRegionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsRegionChangesArrayOfValues() ([][]*region.RegionChange, bool) {
	res, ok := fpaov.values.([][]*region.RegionChange)
	return res, ok
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchRegionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchRegionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRegionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchRegionsResponse_FieldSubPathArrayOfValues struct {
	WatchRegionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchRegionsResponse_FieldPathArrayOfValues = (*WatchRegionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchRegionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchRegionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRegionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRegionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchRegionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchRegionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchRegionsResponse_PageTokenChange)

	// Those methods build corresponding WatchRegionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRegionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchRegionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchRegionsResponsePageTokenChange_FieldPathSelector = 0
	WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchRegionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchRegionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchRegionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchRegionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRegionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchRegionsResponsePageTokenChange_FieldTerminalPath{selector: WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchRegionsResponsePageTokenChange_FieldTerminalPath{selector: WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRegionsResponse_PageTokenChange", fp)
}

func ParseWatchRegionsResponsePageTokenChange_FieldPath(rawField string) (WatchRegionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRegionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchRegionsResponsePageTokenChange_FieldPath(rawField string) WatchRegionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchRegionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRegionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchRegionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchRegionsResponsePageTokenChange_FieldPath = (*WatchRegionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchRegionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRegionsResponse_PageTokenChange
func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchRegionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRegionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchRegionsResponse_PageTokenChange
func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchRegionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRegionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*region.PagerCursor)(nil)
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*region.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchRegionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRegionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchRegionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRegionsResponsePageTokenChange_FieldTerminalPathValue{WatchRegionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*region.PagerCursor)}
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRegionsResponsePageTokenChange_FieldTerminalPathValue{WatchRegionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*region.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRegionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRegionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*region.PagerCursor)}
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRegionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*region.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRegionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRegionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchRegionsResponsePageTokenChange_FieldPathValue interface {
	WatchRegionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRegionsResponse_PageTokenChange)
	CompareWith(*WatchRegionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchRegionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchRegionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchRegionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRegionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchRegionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchRegionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchRegionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRegionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchRegionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRegionsResponsePageTokenChange_FieldPathValue = (*WatchRegionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*region.PagerCursor, bool) {
	res, ok := fpv.value.(*region.PagerCursor)
	return res, ok
}
func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*region.PagerCursor, bool) {
	res, ok := fpv.value.(*region.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchRegionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchRegionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*region.PagerCursor)
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*region.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRegionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRegionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchRegionsResponse_PageTokenChange'.
func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchRegionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRegionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRegionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRegionsResponse_PageTokenChange))
}

// WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRegionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchRegionsResponse_PageTokenChange) bool
}

// ParseWatchRegionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRegionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRegionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchRegionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRegionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchRegionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRegionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRegionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRegionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRegionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRegionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchRegionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRegionsResponsePageTokenChange_FieldPath
}

func ParseWatchRegionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRegionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchRegionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRegionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchRegionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchRegionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*region.PagerCursor) {
			values = append(values, v)
		}
	case WatchRegionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*region.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*region.PagerCursor, bool) {
	res, ok := fpaov.values.([]*region.PagerCursor)
	return res, ok
}
func (fpaov *WatchRegionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*region.PagerCursor, bool) {
	res, ok := fpaov.values.([]*region.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateRegionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateRegionRequest_FieldPathSelector
	Get(source *CreateRegionRequest) []interface{}
	GetSingle(source *CreateRegionRequest) (interface{}, bool)
	ClearValue(item *CreateRegionRequest)

	// Those methods build corresponding CreateRegionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateRegionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateRegionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateRegionRequest_FieldPathArrayItemValue
}

type CreateRegionRequest_FieldPathSelector int32

const (
	CreateRegionRequest_FieldPathSelectorRegion CreateRegionRequest_FieldPathSelector = 0
)

func (s CreateRegionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return "region"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", s))
	}
}

func BuildCreateRegionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateRegionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateRegionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "region":
			return &CreateRegionRequest_FieldTerminalPath{selector: CreateRegionRequest_FieldPathSelectorRegion}, nil
		}
	} else {
		switch fp[0] {
		case "region":
			if subpath, err := region.BuildRegion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateRegionRequest_FieldSubPath{selector: CreateRegionRequest_FieldPathSelectorRegion, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateRegionRequest", fp)
}

func ParseCreateRegionRequest_FieldPath(rawField string) (CreateRegionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateRegionRequest_FieldPath(fp)
}

func MustParseCreateRegionRequest_FieldPath(rawField string) CreateRegionRequest_FieldPath {
	fp, err := ParseCreateRegionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateRegionRequest_FieldTerminalPath struct {
	selector CreateRegionRequest_FieldPathSelector
}

var _ CreateRegionRequest_FieldPath = (*CreateRegionRequest_FieldTerminalPath)(nil)

func (fp *CreateRegionRequest_FieldTerminalPath) Selector() CreateRegionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateRegionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateRegionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateRegionRequest
func (fp *CreateRegionRequest_FieldTerminalPath) Get(source *CreateRegionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateRegionRequest_FieldPathSelectorRegion:
			if source.Region != nil {
				values = append(values, source.Region)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateRegionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateRegionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateRegionRequest
func (fp *CreateRegionRequest_FieldTerminalPath) GetSingle(source *CreateRegionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		res := source.GetRegion()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
	}
}

func (fp *CreateRegionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateRegionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateRegionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return (*region.Region)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
	}
}

func (fp *CreateRegionRequest_FieldTerminalPath) ClearValue(item *CreateRegionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateRegionRequest_FieldPathSelectorRegion:
			item.Region = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateRegionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateRegionRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateRegionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateRegionRequest_FieldPathValue {
	switch fp.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return &CreateRegionRequest_FieldTerminalPathValue{CreateRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Region)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
	}
}

func (fp *CreateRegionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateRegionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateRegionRequest_FieldPathArrayOfValues {
	fpaov := &CreateRegionRequest_FieldTerminalPathArrayOfValues{CreateRegionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return &CreateRegionRequest_FieldTerminalPathArrayOfValues{CreateRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Region)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateRegionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateRegionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateRegionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fp.selector))
	}
}

func (fp *CreateRegionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateRegionRequest_FieldSubPath struct {
	selector CreateRegionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateRegionRequest_FieldPath = (*CreateRegionRequest_FieldSubPath)(nil)

func (fps *CreateRegionRequest_FieldSubPath) Selector() CreateRegionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateRegionRequest_FieldSubPath) AsRegionSubPath() (region.Region_FieldPath, bool) {
	res, ok := fps.subPath.(region.Region_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateRegionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateRegionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateRegionRequest
func (fps *CreateRegionRequest_FieldSubPath) Get(source *CreateRegionRequest) (values []interface{}) {
	if asRegionFieldPath, ok := fps.AsRegionSubPath(); ok {
		values = append(values, asRegionFieldPath.Get(source.GetRegion())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateRegionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateRegionRequest))
}

// GetSingle returns value of selected field from source CreateRegionRequest
func (fps *CreateRegionRequest_FieldSubPath) GetSingle(source *CreateRegionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		if source.GetRegion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRegion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fps.selector))
	}
}

func (fps *CreateRegionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateRegionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateRegionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateRegionRequest_FieldSubPath) ClearValue(item *CreateRegionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateRegionRequest_FieldPathSelectorRegion:
			fps.subPath.ClearValueRaw(item.Region)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateRegionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateRegionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateRegionRequest_FieldSubPath) WithIValue(value interface{}) CreateRegionRequest_FieldPathValue {
	return &CreateRegionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateRegionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateRegionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateRegionRequest_FieldPathArrayOfValues {
	return &CreateRegionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateRegionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateRegionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateRegionRequest_FieldPathArrayItemValue {
	return &CreateRegionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateRegionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateRegionRequest_FieldPathValue allows storing values for CreateRegionRequest fields according to their type
type CreateRegionRequest_FieldPathValue interface {
	CreateRegionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateRegionRequest)
	CompareWith(*CreateRegionRequest) (cmp int, comparable bool)
}

func ParseCreateRegionRequest_FieldPathValue(pathStr, valueStr string) (CreateRegionRequest_FieldPathValue, error) {
	fp, err := ParseCreateRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRegionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateRegionRequest_FieldPathValue), nil
}

func MustParseCreateRegionRequest_FieldPathValue(pathStr, valueStr string) CreateRegionRequest_FieldPathValue {
	fpv, err := ParseCreateRegionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateRegionRequest_FieldTerminalPathValue struct {
	CreateRegionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRegionRequest_FieldPathValue = (*CreateRegionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateRegionRequest' as interface{}
func (fpv *CreateRegionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateRegionRequest_FieldTerminalPathValue) AsRegionValue() (*region.Region, bool) {
	res, ok := fpv.value.(*region.Region)
	return res, ok
}

// SetTo stores value for selected field for object CreateRegionRequest
func (fpv *CreateRegionRequest_FieldTerminalPathValue) SetTo(target **CreateRegionRequest) {
	if *target == nil {
		*target = new(CreateRegionRequest)
	}
	switch fpv.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		(*target).Region = fpv.value.(*region.Region)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRegionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRegionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateRegionRequest_FieldTerminalPathValue' with the value under path in 'CreateRegionRequest'.
func (fpv *CreateRegionRequest_FieldTerminalPathValue) CompareWith(source *CreateRegionRequest) (int, bool) {
	switch fpv.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRegionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateRegionRequest))
}

type CreateRegionRequest_FieldSubPathValue struct {
	CreateRegionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateRegionRequest_FieldPathValue = (*CreateRegionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateRegionRequest_FieldSubPathValue) AsRegionPathValue() (region.Region_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(region.Region_FieldPathValue)
	return res, ok
}

func (fpvs *CreateRegionRequest_FieldSubPathValue) SetTo(target **CreateRegionRequest) {
	if *target == nil {
		*target = new(CreateRegionRequest)
	}
	switch fpvs.Selector() {
	case CreateRegionRequest_FieldPathSelectorRegion:
		fpvs.subPathValue.(region.Region_FieldPathValue).SetTo(&(*target).Region)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRegionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRegionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateRegionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateRegionRequest_FieldSubPathValue) CompareWith(source *CreateRegionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return fpvs.subPathValue.(region.Region_FieldPathValue).CompareWith(source.GetRegion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRegionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateRegionRequest))
}

// CreateRegionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateRegionRequest according to their type
// Present only for array (repeated) types.
type CreateRegionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateRegionRequest_FieldPath
	ContainsValue(*CreateRegionRequest) bool
}

// ParseCreateRegionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateRegionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRegionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateRegionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateRegionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateRegionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateRegionRequest_FieldTerminalPathArrayItemValue struct {
	CreateRegionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRegionRequest_FieldPathArrayItemValue = (*CreateRegionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateRegionRequest as interface{}
func (fpaiv *CreateRegionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateRegionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateRegionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateRegionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateRegionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRegionRequest'
func (fpaiv *CreateRegionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateRegionRequest) bool {
	slice := fpaiv.CreateRegionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateRegionRequest_FieldSubPathArrayItemValue struct {
	CreateRegionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateRegionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateRegionRequest_FieldSubPathArrayItemValue) AsRegionPathItemValue() (region.Region_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRegionRequest'
func (fpaivs *CreateRegionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateRegionRequest) bool {
	switch fpaivs.Selector() {
	case CreateRegionRequest_FieldPathSelectorRegion:
		return fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue).ContainsValue(source.GetRegion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRegionRequest: %d", fpaivs.Selector()))
	}
}

// CreateRegionRequest_FieldPathArrayOfValues allows storing slice of values for CreateRegionRequest fields according to their type
type CreateRegionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateRegionRequest_FieldPath
}

func ParseCreateRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateRegionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRegionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateRegionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateRegionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateRegionRequest_FieldTerminalPathArrayOfValues struct {
	CreateRegionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateRegionRequest_FieldPathArrayOfValues = (*CreateRegionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateRegionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateRegionRequest_FieldPathSelectorRegion:
		for _, v := range fpaov.values.([]*region.Region) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateRegionRequest_FieldTerminalPathArrayOfValues) AsRegionArrayOfValues() ([]*region.Region, bool) {
	res, ok := fpaov.values.([]*region.Region)
	return res, ok
}

type CreateRegionRequest_FieldSubPathArrayOfValues struct {
	CreateRegionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateRegionRequest_FieldPathArrayOfValues = (*CreateRegionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateRegionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateRegionRequest_FieldSubPathArrayOfValues) AsRegionPathArrayOfValues() (region.Region_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(region.Region_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRegionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRegionRequest_FieldPathSelector
	Get(source *UpdateRegionRequest) []interface{}
	GetSingle(source *UpdateRegionRequest) (interface{}, bool)
	ClearValue(item *UpdateRegionRequest)

	// Those methods build corresponding UpdateRegionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRegionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRegionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRegionRequest_FieldPathArrayItemValue
}

type UpdateRegionRequest_FieldPathSelector int32

const (
	UpdateRegionRequest_FieldPathSelectorRegion     UpdateRegionRequest_FieldPathSelector = 0
	UpdateRegionRequest_FieldPathSelectorUpdateMask UpdateRegionRequest_FieldPathSelector = 1
	UpdateRegionRequest_FieldPathSelectorCas        UpdateRegionRequest_FieldPathSelector = 2
)

func (s UpdateRegionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return "region"
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateRegionRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", s))
	}
}

func BuildUpdateRegionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateRegionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRegionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "region":
			return &UpdateRegionRequest_FieldTerminalPath{selector: UpdateRegionRequest_FieldPathSelectorRegion}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateRegionRequest_FieldTerminalPath{selector: UpdateRegionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateRegionRequest_FieldTerminalPath{selector: UpdateRegionRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "region":
			if subpath, err := region.BuildRegion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRegionRequest_FieldSubPath{selector: UpdateRegionRequest_FieldPathSelectorRegion, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateRegionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRegionRequest_FieldSubPath{selector: UpdateRegionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRegionRequest", fp)
}

func ParseUpdateRegionRequest_FieldPath(rawField string) (UpdateRegionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRegionRequest_FieldPath(fp)
}

func MustParseUpdateRegionRequest_FieldPath(rawField string) UpdateRegionRequest_FieldPath {
	fp, err := ParseUpdateRegionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRegionRequest_FieldTerminalPath struct {
	selector UpdateRegionRequest_FieldPathSelector
}

var _ UpdateRegionRequest_FieldPath = (*UpdateRegionRequest_FieldTerminalPath)(nil)

func (fp *UpdateRegionRequest_FieldTerminalPath) Selector() UpdateRegionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRegionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRegionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRegionRequest
func (fp *UpdateRegionRequest_FieldTerminalPath) Get(source *UpdateRegionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRegionRequest_FieldPathSelectorRegion:
			if source.Region != nil {
				values = append(values, source.Region)
			}
		case UpdateRegionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateRegionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRegionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRegionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateRegionRequest
func (fp *UpdateRegionRequest_FieldTerminalPath) GetSingle(source *UpdateRegionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		res := source.GetRegion()
		return res, res != nil
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateRegionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRegionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRegionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return (*region.Region)(nil)
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		return (*region.Region_FieldMask)(nil)
	case UpdateRegionRequest_FieldPathSelectorCas:
		return (*UpdateRegionRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequest_FieldTerminalPath) ClearValue(item *UpdateRegionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateRegionRequest_FieldPathSelectorRegion:
			item.Region = nil
		case UpdateRegionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateRegionRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateRegionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRegionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRegionRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateRegionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateRegionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return &UpdateRegionRequest_FieldTerminalPathValue{UpdateRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Region)}
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		return &UpdateRegionRequest_FieldTerminalPathValue{UpdateRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	case UpdateRegionRequest_FieldPathSelectorCas:
		return &UpdateRegionRequest_FieldTerminalPathValue{UpdateRegionRequest_FieldTerminalPath: *fp, value: value.(*UpdateRegionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRegionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRegionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateRegionRequest_FieldTerminalPathArrayOfValues{UpdateRegionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return &UpdateRegionRequest_FieldTerminalPathArrayOfValues{UpdateRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Region)}
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		return &UpdateRegionRequest_FieldTerminalPathArrayOfValues{UpdateRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	case UpdateRegionRequest_FieldPathSelectorCas:
		return &UpdateRegionRequest_FieldTerminalPathArrayOfValues{UpdateRegionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateRegionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRegionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRegionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRegionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRegionRequest_FieldSubPath struct {
	selector UpdateRegionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRegionRequest_FieldPath = (*UpdateRegionRequest_FieldSubPath)(nil)

func (fps *UpdateRegionRequest_FieldSubPath) Selector() UpdateRegionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRegionRequest_FieldSubPath) AsRegionSubPath() (region.Region_FieldPath, bool) {
	res, ok := fps.subPath.(region.Region_FieldPath)
	return res, ok
}
func (fps *UpdateRegionRequest_FieldSubPath) AsCasSubPath() (UpdateRegionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateRegionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRegionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRegionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRegionRequest
func (fps *UpdateRegionRequest_FieldSubPath) Get(source *UpdateRegionRequest) (values []interface{}) {
	if asRegionFieldPath, ok := fps.AsRegionSubPath(); ok {
		values = append(values, asRegionFieldPath.Get(source.GetRegion())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateRegionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRegionRequest))
}

// GetSingle returns value of selected field from source UpdateRegionRequest
func (fps *UpdateRegionRequest_FieldSubPath) GetSingle(source *UpdateRegionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		if source.GetRegion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRegion())
	case UpdateRegionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fps.selector))
	}
}

func (fps *UpdateRegionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRegionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRegionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRegionRequest_FieldSubPath) ClearValue(item *UpdateRegionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateRegionRequest_FieldPathSelectorRegion:
			fps.subPath.ClearValueRaw(item.Region)
		case UpdateRegionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateRegionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRegionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRegionRequest_FieldSubPath) WithIValue(value interface{}) UpdateRegionRequest_FieldPathValue {
	return &UpdateRegionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRegionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRegionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRegionRequest_FieldPathArrayOfValues {
	return &UpdateRegionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRegionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRegionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRegionRequest_FieldPathArrayItemValue {
	return &UpdateRegionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRegionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRegionRequest_FieldPathValue allows storing values for UpdateRegionRequest fields according to their type
type UpdateRegionRequest_FieldPathValue interface {
	UpdateRegionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRegionRequest)
	CompareWith(*UpdateRegionRequest) (cmp int, comparable bool)
}

func ParseUpdateRegionRequest_FieldPathValue(pathStr, valueStr string) (UpdateRegionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRegionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRegionRequest_FieldPathValue), nil
}

func MustParseUpdateRegionRequest_FieldPathValue(pathStr, valueStr string) UpdateRegionRequest_FieldPathValue {
	fpv, err := ParseUpdateRegionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRegionRequest_FieldTerminalPathValue struct {
	UpdateRegionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRegionRequest_FieldPathValue = (*UpdateRegionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateRegionRequest' as interface{}
func (fpv *UpdateRegionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRegionRequest_FieldTerminalPathValue) AsRegionValue() (*region.Region, bool) {
	res, ok := fpv.value.(*region.Region)
	return res, ok
}
func (fpv *UpdateRegionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}
func (fpv *UpdateRegionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateRegionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateRegionRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateRegionRequest
func (fpv *UpdateRegionRequest_FieldTerminalPathValue) SetTo(target **UpdateRegionRequest) {
	if *target == nil {
		*target = new(UpdateRegionRequest)
	}
	switch fpv.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		(*target).Region = fpv.value.(*region.Region)
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*region.Region_FieldMask)
	case UpdateRegionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateRegionRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRegionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRegionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRegionRequest_FieldTerminalPathValue' with the value under path in 'UpdateRegionRequest'.
func (fpv *UpdateRegionRequest_FieldTerminalPathValue) CompareWith(source *UpdateRegionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return 0, false
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateRegionRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRegionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRegionRequest))
}

type UpdateRegionRequest_FieldSubPathValue struct {
	UpdateRegionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRegionRequest_FieldPathValue = (*UpdateRegionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateRegionRequest_FieldSubPathValue) AsRegionPathValue() (region.Region_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(region.Region_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateRegionRequest_FieldSubPathValue) AsCasPathValue() (UpdateRegionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateRegionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRegionRequest_FieldSubPathValue) SetTo(target **UpdateRegionRequest) {
	if *target == nil {
		*target = new(UpdateRegionRequest)
	}
	switch fpvs.Selector() {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		fpvs.subPathValue.(region.Region_FieldPathValue).SetTo(&(*target).Region)
	case UpdateRegionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateRegionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRegionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRegionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRegionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRegionRequest_FieldSubPathValue) CompareWith(source *UpdateRegionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return fpvs.subPathValue.(region.Region_FieldPathValue).CompareWith(source.GetRegion())
	case UpdateRegionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateRegionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRegionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRegionRequest))
}

// UpdateRegionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateRegionRequest according to their type
// Present only for array (repeated) types.
type UpdateRegionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRegionRequest_FieldPath
	ContainsValue(*UpdateRegionRequest) bool
}

// ParseUpdateRegionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRegionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRegionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRegionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRegionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRegionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRegionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateRegionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRegionRequest_FieldPathArrayItemValue = (*UpdateRegionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRegionRequest as interface{}
func (fpaiv *UpdateRegionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRegionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRegionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRegionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRegionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRegionRequest'
func (fpaiv *UpdateRegionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRegionRequest) bool {
	slice := fpaiv.UpdateRegionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRegionRequest_FieldSubPathArrayItemValue struct {
	UpdateRegionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRegionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRegionRequest_FieldSubPathArrayItemValue) AsRegionPathItemValue() (region.Region_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateRegionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateRegionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateRegionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRegionRequest'
func (fpaivs *UpdateRegionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRegionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		return fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue).ContainsValue(source.GetRegion())
	case UpdateRegionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateRegionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateRegionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateRegionRequest fields according to their type
type UpdateRegionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRegionRequest_FieldPath
}

func ParseUpdateRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRegionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRegionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRegionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRegionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRegionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateRegionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateRegionRequest_FieldPathArrayOfValues = (*UpdateRegionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRegionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRegionRequest_FieldPathSelectorRegion:
		for _, v := range fpaov.values.([]*region.Region) {
			values = append(values, v)
		}
	case UpdateRegionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	case UpdateRegionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateRegionRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRegionRequest_FieldTerminalPathArrayOfValues) AsRegionArrayOfValues() ([]*region.Region, bool) {
	res, ok := fpaov.values.([]*region.Region)
	return res, ok
}
func (fpaov *UpdateRegionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}
func (fpaov *UpdateRegionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateRegionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateRegionRequest_CAS)
	return res, ok
}

type UpdateRegionRequest_FieldSubPathArrayOfValues struct {
	UpdateRegionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRegionRequest_FieldPathArrayOfValues = (*UpdateRegionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRegionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRegionRequest_FieldSubPathArrayOfValues) AsRegionPathArrayOfValues() (region.Region_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(region.Region_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateRegionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateRegionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateRegionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRegionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRegionRequestCAS_FieldPathSelector
	Get(source *UpdateRegionRequest_CAS) []interface{}
	GetSingle(source *UpdateRegionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateRegionRequest_CAS)

	// Those methods build corresponding UpdateRegionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRegionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRegionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRegionRequestCAS_FieldPathArrayItemValue
}

type UpdateRegionRequestCAS_FieldPathSelector int32

const (
	UpdateRegionRequestCAS_FieldPathSelectorConditionalState UpdateRegionRequestCAS_FieldPathSelector = 0
	UpdateRegionRequestCAS_FieldPathSelectorFieldMask        UpdateRegionRequestCAS_FieldPathSelector = 1
)

func (s UpdateRegionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", s))
	}
}

func BuildUpdateRegionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateRegionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRegionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateRegionRequestCAS_FieldTerminalPath{selector: UpdateRegionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateRegionRequestCAS_FieldTerminalPath{selector: UpdateRegionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := region.BuildRegion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRegionRequestCAS_FieldSubPath{selector: UpdateRegionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRegionRequest_CAS", fp)
}

func ParseUpdateRegionRequestCAS_FieldPath(rawField string) (UpdateRegionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRegionRequestCAS_FieldPath(fp)
}

func MustParseUpdateRegionRequestCAS_FieldPath(rawField string) UpdateRegionRequestCAS_FieldPath {
	fp, err := ParseUpdateRegionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRegionRequestCAS_FieldTerminalPath struct {
	selector UpdateRegionRequestCAS_FieldPathSelector
}

var _ UpdateRegionRequestCAS_FieldPath = (*UpdateRegionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) Selector() UpdateRegionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRegionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRegionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRegionRequest_CAS
func (fp *UpdateRegionRequestCAS_FieldTerminalPath) Get(source *UpdateRegionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRegionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateRegionRequest_CAS
func (fp *UpdateRegionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateRegionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRegionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRegionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return (*region.Region)(nil)
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		return (*region.Region_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateRegionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRegionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRegionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRegionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateRegionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRegionRequestCAS_FieldTerminalPathValue{UpdateRegionRequestCAS_FieldTerminalPath: *fp, value: value.(*region.Region)}
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRegionRequestCAS_FieldTerminalPathValue{UpdateRegionRequestCAS_FieldTerminalPath: *fp, value: value.(*region.Region_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRegionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues{UpdateRegionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues{UpdateRegionRequestCAS_FieldTerminalPath: *fp, values: values.([]*region.Region)}
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues{UpdateRegionRequestCAS_FieldTerminalPath: *fp, values: values.([]*region.Region_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRegionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRegionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRegionRequestCAS_FieldSubPath struct {
	selector UpdateRegionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRegionRequestCAS_FieldPath = (*UpdateRegionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateRegionRequestCAS_FieldSubPath) Selector() UpdateRegionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRegionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (region.Region_FieldPath, bool) {
	res, ok := fps.subPath.(region.Region_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRegionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRegionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRegionRequest_CAS
func (fps *UpdateRegionRequestCAS_FieldSubPath) Get(source *UpdateRegionRequest_CAS) (values []interface{}) {
	if asRegionFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asRegionFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRegionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateRegionRequest_CAS
func (fps *UpdateRegionRequestCAS_FieldSubPath) GetSingle(source *UpdateRegionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRegionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRegionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) ClearValue(item *UpdateRegionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRegionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRegionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateRegionRequestCAS_FieldPathValue {
	return &UpdateRegionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRegionRequestCAS_FieldPathArrayOfValues {
	return &UpdateRegionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRegionRequestCAS_FieldPathArrayItemValue {
	return &UpdateRegionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRegionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRegionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateRegionRequestCAS_FieldPathValue interface {
	UpdateRegionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRegionRequest_CAS)
	CompareWith(*UpdateRegionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateRegionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateRegionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateRegionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRegionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateRegionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateRegionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateRegionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRegionRequestCAS_FieldTerminalPathValue struct {
	UpdateRegionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRegionRequestCAS_FieldPathValue = (*UpdateRegionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*region.Region, bool) {
	res, ok := fpv.value.(*region.Region)
	return res, ok
}
func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*region.Region_FieldMask, bool) {
	res, ok := fpv.value.(*region.Region_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateRegionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRegionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*region.Region)
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*region.Region_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRegionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRegionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateRegionRequest_CAS'.
func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateRegionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRegionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRegionRequest_CAS))
}

type UpdateRegionRequestCAS_FieldSubPathValue struct {
	UpdateRegionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRegionRequestCAS_FieldPathValue = (*UpdateRegionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateRegionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (region.Region_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(region.Region_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRegionRequestCAS_FieldSubPathValue) SetTo(target **UpdateRegionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRegionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(region.Region_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRegionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRegionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRegionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRegionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateRegionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(region.Region_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRegionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRegionRequest_CAS))
}

// UpdateRegionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateRegionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRegionRequestCAS_FieldPath
	ContainsValue(*UpdateRegionRequest_CAS) bool
}

// ParseUpdateRegionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRegionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRegionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRegionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRegionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateRegionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRegionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRegionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRegionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateRegionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRegionRequestCAS_FieldPathArrayItemValue = (*UpdateRegionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRegionRequest_CAS as interface{}
func (fpaiv *UpdateRegionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRegionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRegionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRegionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRegionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateRegionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRegionRequest_CAS) bool {
	slice := fpaiv.UpdateRegionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRegionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateRegionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRegionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRegionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (region.Region_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateRegionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRegionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(region.Region_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRegionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateRegionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateRegionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRegionRequestCAS_FieldPath
}

func ParseUpdateRegionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRegionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRegionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRegionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateRegionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRegionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRegionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateRegionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateRegionRequestCAS_FieldPathArrayOfValues = (*UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRegionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*region.Region) {
			values = append(values, v)
		}
	case UpdateRegionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*region.Region_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*region.Region, bool) {
	res, ok := fpaov.values.([]*region.Region)
	return res, ok
}
func (fpaov *UpdateRegionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*region.Region_FieldMask, bool) {
	res, ok := fpaov.values.([]*region.Region_FieldMask)
	return res, ok
}

type UpdateRegionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateRegionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRegionRequestCAS_FieldPathArrayOfValues = (*UpdateRegionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRegionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRegionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (region.Region_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(region.Region_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteRegionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteRegionRequest_FieldPathSelector
	Get(source *DeleteRegionRequest) []interface{}
	GetSingle(source *DeleteRegionRequest) (interface{}, bool)
	ClearValue(item *DeleteRegionRequest)

	// Those methods build corresponding DeleteRegionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteRegionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteRegionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteRegionRequest_FieldPathArrayItemValue
}

type DeleteRegionRequest_FieldPathSelector int32

const (
	DeleteRegionRequest_FieldPathSelectorName DeleteRegionRequest_FieldPathSelector = 0
)

func (s DeleteRegionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteRegionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", s))
	}
}

func BuildDeleteRegionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteRegionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteRegionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteRegionRequest_FieldTerminalPath{selector: DeleteRegionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteRegionRequest", fp)
}

func ParseDeleteRegionRequest_FieldPath(rawField string) (DeleteRegionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteRegionRequest_FieldPath(fp)
}

func MustParseDeleteRegionRequest_FieldPath(rawField string) DeleteRegionRequest_FieldPath {
	fp, err := ParseDeleteRegionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteRegionRequest_FieldTerminalPath struct {
	selector DeleteRegionRequest_FieldPathSelector
}

var _ DeleteRegionRequest_FieldPath = (*DeleteRegionRequest_FieldTerminalPath)(nil)

func (fp *DeleteRegionRequest_FieldTerminalPath) Selector() DeleteRegionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteRegionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteRegionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteRegionRequest
func (fp *DeleteRegionRequest_FieldTerminalPath) Get(source *DeleteRegionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteRegionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteRegionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteRegionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteRegionRequest
func (fp *DeleteRegionRequest_FieldTerminalPath) GetSingle(source *DeleteRegionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
	}
}

func (fp *DeleteRegionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteRegionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteRegionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		return (*region.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
	}
}

func (fp *DeleteRegionRequest_FieldTerminalPath) ClearValue(item *DeleteRegionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteRegionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteRegionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteRegionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteRegionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteRegionRequest_FieldPathSelectorName
}

func (fp *DeleteRegionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteRegionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		return &DeleteRegionRequest_FieldTerminalPathValue{DeleteRegionRequest_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
	}
}

func (fp *DeleteRegionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteRegionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteRegionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteRegionRequest_FieldTerminalPathArrayOfValues{DeleteRegionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		return &DeleteRegionRequest_FieldTerminalPathArrayOfValues{DeleteRegionRequest_FieldTerminalPath: *fp, values: values.([]*region.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteRegionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteRegionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteRegionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fp.selector))
	}
}

func (fp *DeleteRegionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteRegionRequest_FieldPathValue allows storing values for DeleteRegionRequest fields according to their type
type DeleteRegionRequest_FieldPathValue interface {
	DeleteRegionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteRegionRequest)
	CompareWith(*DeleteRegionRequest) (cmp int, comparable bool)
}

func ParseDeleteRegionRequest_FieldPathValue(pathStr, valueStr string) (DeleteRegionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRegionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteRegionRequest_FieldPathValue), nil
}

func MustParseDeleteRegionRequest_FieldPathValue(pathStr, valueStr string) DeleteRegionRequest_FieldPathValue {
	fpv, err := ParseDeleteRegionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteRegionRequest_FieldTerminalPathValue struct {
	DeleteRegionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRegionRequest_FieldPathValue = (*DeleteRegionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteRegionRequest' as interface{}
func (fpv *DeleteRegionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteRegionRequest_FieldTerminalPathValue) AsNameValue() (*region.Reference, bool) {
	res, ok := fpv.value.(*region.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteRegionRequest
func (fpv *DeleteRegionRequest_FieldTerminalPathValue) SetTo(target **DeleteRegionRequest) {
	if *target == nil {
		*target = new(DeleteRegionRequest)
	}
	switch fpv.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*region.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRegionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteRegionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteRegionRequest_FieldTerminalPathValue' with the value under path in 'DeleteRegionRequest'.
func (fpv *DeleteRegionRequest_FieldTerminalPathValue) CompareWith(source *DeleteRegionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*region.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRegionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRegionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteRegionRequest))
}

// DeleteRegionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteRegionRequest according to their type
// Present only for array (repeated) types.
type DeleteRegionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteRegionRequest_FieldPath
	ContainsValue(*DeleteRegionRequest) bool
}

// ParseDeleteRegionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteRegionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRegionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteRegionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteRegionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteRegionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteRegionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteRegionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteRegionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRegionRequest_FieldPathArrayItemValue = (*DeleteRegionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteRegionRequest as interface{}
func (fpaiv *DeleteRegionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteRegionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteRegionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteRegionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteRegionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteRegionRequest'
func (fpaiv *DeleteRegionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteRegionRequest) bool {
	slice := fpaiv.DeleteRegionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteRegionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteRegionRequest fields according to their type
type DeleteRegionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteRegionRequest_FieldPath
}

func ParseDeleteRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteRegionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteRegionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRegionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteRegionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteRegionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteRegionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteRegionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteRegionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteRegionRequest_FieldPathArrayOfValues = (*DeleteRegionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteRegionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteRegionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*region.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteRegionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*region.Reference, bool) {
	res, ok := fpaov.values.([]*region.Reference)
	return res, ok
}
