// Code generated by protoc-gen-goten-access
// Resource: TimeSeriesCollectionRule
// DO NOT EDIT!!!

package time_series_collection_rule_access

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"

	gotenaccess "github.com/cloudwan/goten-sdk/runtime/access"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
	"github.com/cloudwan/goten-sdk/types/watch_type"

	time_series_collection_rule_client "github.com/cloudwan/edgelq-sdk/monitoring/client/v4/time_series_collection_rule"
	time_series_collection_rule "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_collection_rule"
)

var (
	_ = new(context.Context)

	_ = metadata.MD{}
	_ = new(grpc.ClientConnInterface)
	_ = codes.NotFound
	_ = status.Status{}

	_ = new(gotenaccess.Watcher)
	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenresource.ListQuery)
	_ = gotenfilter.Eq
)

type apiTimeSeriesCollectionRuleAccess struct {
	client time_series_collection_rule_client.TimeSeriesCollectionRuleServiceClient
}

func NewApiTimeSeriesCollectionRuleAccess(client time_series_collection_rule_client.TimeSeriesCollectionRuleServiceClient) time_series_collection_rule.TimeSeriesCollectionRuleAccess {
	return &apiTimeSeriesCollectionRuleAccess{client: client}
}

func (a *apiTimeSeriesCollectionRuleAccess) GetTimeSeriesCollectionRule(ctx context.Context, query *time_series_collection_rule.GetQuery, opts ...gotenresource.GetOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error) {
	getOpts := gotenresource.MakeGetOptions(opts)
	callHeaders := metadata.MD{}
	if getOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	if !query.Reference.IsFullyQualified() {
		return nil, status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &time_series_collection_rule_client.GetTimeSeriesCollectionRuleRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	res, err := a.client.GetTimeSeriesCollectionRule(ctx, request, callOpts...)
	if err != nil {
		return nil, err
	}
	query.Reference.Resolve(res)
	return res, nil
}

func (a *apiTimeSeriesCollectionRuleAccess) BatchGetTimeSeriesCollectionRules(ctx context.Context, refs []*time_series_collection_rule.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	callHeaders := metadata.MD{}
	if batchGetOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	asNames := make([]*time_series_collection_rule.Name, 0, len(refs))
	for _, ref := range refs {
		if !ref.IsFullyQualified() {
			return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
		}
		asNames = append(asNames, &ref.Name)
	}
	request := &time_series_collection_rule_client.BatchGetTimeSeriesCollectionRulesRequest{
		Names: asNames,
	}
	fieldMask := batchGetOpts.GetFieldMask(time_series_collection_rule.GetDescriptor())
	if fieldMask != nil {
		request.FieldMask = fieldMask.(*time_series_collection_rule.TimeSeriesCollectionRule_FieldMask)
	}
	resp, err := a.client.BatchGetTimeSeriesCollectionRules(ctx, request, callOpts...)
	if err != nil {
		return err
	}
	resultMap := make(map[time_series_collection_rule.Name]*time_series_collection_rule.TimeSeriesCollectionRule, len(refs))
	for _, resolvedRes := range resp.GetTimeSeriesCollectionRules() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiTimeSeriesCollectionRuleAccess) QueryTimeSeriesCollectionRules(ctx context.Context, query *time_series_collection_rule.ListQuery, opts ...gotenresource.QueryOption) (*time_series_collection_rule.QueryResultSnapshot, error) {
	qOpts := gotenresource.MakeQueryOptions(opts)
	callHeaders := metadata.MD{}
	if qOpts.GetSkipCache() {
		callHeaders["cache-control"] = []string{"no-cache"}
	}
	callOpts := []grpc.CallOption{}
	if len(callHeaders) > 0 {
		callOpts = append(callOpts, grpc.Header(&callHeaders))
	}
	request := &time_series_collection_rule_client.ListTimeSeriesCollectionRulesRequest{
		Filter:            query.Filter,
		FieldMask:         query.Mask,
		IncludePagingInfo: query.WithPagingInfo,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	resp, err := a.client.ListTimeSeriesCollectionRules(ctx, request)
	if err != nil {
		return nil, err
	}
	return &time_series_collection_rule.QueryResultSnapshot{
		TimeSeriesCollectionRules: resp.TimeSeriesCollectionRules,
		NextPageCursor:            resp.NextPageToken,
		PrevPageCursor:            resp.PrevPageToken,
		TotalResultsCount:         resp.TotalResultsCount,
		CurrentOffset:             resp.CurrentOffset,
	}, nil
}

func (a *apiTimeSeriesCollectionRuleAccess) WatchTimeSeriesCollectionRule(ctx context.Context, query *time_series_collection_rule.GetQuery, observerCb func(*time_series_collection_rule.TimeSeriesCollectionRuleChange) error) error {
	if !query.Reference.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &time_series_collection_rule_client.WatchTimeSeriesCollectionRuleRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	changesStream, initErr := a.client.WatchTimeSeriesCollectionRule(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return status.Errorf(status.Code(err), "watch recv error: %s", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiTimeSeriesCollectionRuleAccess) WatchTimeSeriesCollectionRules(ctx context.Context, query *time_series_collection_rule.WatchQuery, observerCb func(*time_series_collection_rule.QueryResultChange) error) error {
	request := &time_series_collection_rule_client.WatchTimeSeriesCollectionRulesRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
		StartingTime: query.StartingTime,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	changesStream, initErr := a.client.WatchTimeSeriesCollectionRules(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return status.Errorf(status.Code(err), "watch recv error: %s", err)
		}
		changesWithPaging := &time_series_collection_rule.QueryResultChange{
			Changes:      respChange.TimeSeriesCollectionRuleChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiTimeSeriesCollectionRuleAccess) SaveTimeSeriesCollectionRule(ctx context.Context, res *time_series_collection_rule.TimeSeriesCollectionRule, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	var resp *time_series_collection_rule.TimeSeriesCollectionRule
	var err error
	if !saveOpts.OnlyCreate() {
		updateRequest := &time_series_collection_rule_client.UpdateTimeSeriesCollectionRuleRequest{
			TimeSeriesCollectionRule: res,
			AllowMissing:             !saveOpts.OnlyUpdate(),
		}
		if updateMask := saveOpts.GetUpdateMask(); updateMask != nil {
			updateRequest.UpdateMask = updateMask.(*time_series_collection_rule.TimeSeriesCollectionRule_FieldMask)
		}
		if mask, conditionalState := saveOpts.GetCAS(); mask != nil && conditionalState != nil {
			updateRequest.Cas = &time_series_collection_rule_client.UpdateTimeSeriesCollectionRuleRequest_CAS{
				ConditionalState: conditionalState.(*time_series_collection_rule.TimeSeriesCollectionRule),
				FieldMask:        mask.(*time_series_collection_rule.TimeSeriesCollectionRule_FieldMask),
			}
		}
		resp, err = a.client.UpdateTimeSeriesCollectionRule(ctx, updateRequest)
		if err != nil {
			return err
		}
	} else {
		createRequest := &time_series_collection_rule_client.CreateTimeSeriesCollectionRuleRequest{
			TimeSeriesCollectionRule: res,
		}
		resp, err = a.client.CreateTimeSeriesCollectionRule(ctx, createRequest)
		if err != nil {
			return err
		}
	}
	// Ensure object is updated - but in most shallow way possible
	res.MakeDiffFieldMask(resp).Set(res, resp)
	return nil
}

func (a *apiTimeSeriesCollectionRuleAccess) DeleteTimeSeriesCollectionRule(ctx context.Context, ref *time_series_collection_rule.Reference, opts ...gotenresource.DeleteOption) error {
	delOpts := gotenresource.MakeDeleteOptions(opts)
	if !ref.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
	}
	request := &time_series_collection_rule_client.DeleteTimeSeriesCollectionRuleRequest{
		Name:         &ref.Name,
		AllowMissing: delOpts.AllowMissing(),
	}
	_, err := a.client.DeleteTimeSeriesCollectionRule(ctx, request)
	return err
}
func getParentAndFilter(fullFilter *time_series_collection_rule.Filter) (*time_series_collection_rule.Filter, *time_series_collection_rule.ParentName) {
	var withParentExtraction func(cnd time_series_collection_rule.FilterCondition) time_series_collection_rule.FilterCondition
	var resultParent *time_series_collection_rule.ParentName
	var resultFilter *time_series_collection_rule.Filter
	withParentExtraction = func(cnd time_series_collection_rule.FilterCondition) time_series_collection_rule.FilterCondition {
		switch tCnd := cnd.(type) {
		case *time_series_collection_rule.FilterConditionComposite:
			if tCnd.GetOperator() == gotenfilter.AND {
				withoutParentCnds := make([]time_series_collection_rule.FilterCondition, 0)
				for _, subCnd := range tCnd.Conditions {
					if subCndNoParent := withParentExtraction(subCnd); subCndNoParent != nil {
						withoutParentCnds = append(withoutParentCnds, subCndNoParent)
					}
				}
				if len(withoutParentCnds) == 0 {
					return nil
				}
				if len(withoutParentCnds) == 1 {
					return withoutParentCnds[0]
				}
				return time_series_collection_rule.AndFilterConditions(withoutParentCnds...)
			} else {
				return tCnd
			}
		case *time_series_collection_rule.FilterConditionCompare:
			if tCnd.GetOperator() == gotenfilter.Eq && tCnd.GetRawFieldPath().String() == "name" {
				nameValue := tCnd.GetRawValue().(*time_series_collection_rule.Name)
				if nameValue != nil && nameValue.ParentName.IsSpecified() {
					resultParent = &nameValue.ParentName
					if nameValue.IsFullyQualified() {
						return tCnd
					}
					return nil
				}
			}
			return tCnd
		default:
			return tCnd
		}
	}
	cndWithoutParent := withParentExtraction(fullFilter.GetCondition())
	if cndWithoutParent != nil {
		resultFilter = &time_series_collection_rule.Filter{FilterCondition: cndWithoutParent}
	}
	return resultFilter, resultParent
}

func GetApiAccessBuilder() *gotenaccess.ApiAccessBuilder {
	return gotenaccess.GetRegistry().FindApiAccessBuilder(time_series_collection_rule.GetDescriptor())
}

func init() {
	gotenaccess.GetRegistry().RegisterApiAccessConstructor(time_series_collection_rule.GetDescriptor(), func(cc grpc.ClientConnInterface) gotenresource.Access {
		return time_series_collection_rule.AsAnyCastAccess(NewApiTimeSeriesCollectionRuleAccess(time_series_collection_rule_client.NewTimeSeriesCollectionRuleServiceClient(cc)))
	})
}
