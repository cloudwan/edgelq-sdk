syntax = "proto3";

package ntt.monitoring.v4;

import "edgelq-sdk/common/api/launch_stage.proto";
import "edgelq-sdk/monitoring/proto/v4/common.proto";
import "google/api/resource.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor;metric_descriptor";
option java_multiple_files = true;
option java_outer_classname = "MetricDescriptorProto";
option java_package = "com.ntt.monitoring.pb.v4";

// Defines a metric type and its schema. Once a metric descriptor is created,
// deleting or altering it stops data collection and makes the metric type's
// existing data unusable.
message MetricDescriptor {
  option (google.api.resource) = {
    type : "monitoring.edgelq.com/MetricDescriptor"
    pattern : "projects/{project}/metricDescriptors/{metric_descriptor}"
  };

  // Name of MetricDescriptor
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [\\w./-]{4,128}
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 35;

  // The metric type, including its DNS name prefix. The type is not
  // URL-encoded.  All user-defined metric types have the DNS name
  // `custom.googleapis.com` or `external.googleapis.com`.  Metric types should
  // use a natural hierarchical grouping. For example:
  //
  //     "custom.googleapis.com/invoice/paid/amount"
  //     "external.googleapis.com/prometheus/up"
  //     "appengine.googleapis.com/http/server/response_latencies"
  string type = 8;

  // associated resource_types (also used to infer defaults)
  // examples, devices.edgelq.com/Device, watchdog.edgelq.com/Agent
  // if not set, defaults to "global" resource type.
  repeated string resource_types = 34;

  // The set of labels that can be used to describe a specific
  // instance of this metric type. For example, the
  // `appengine.googleapis.com/http/server/response_latencies` metric
  // type has a label for the HTTP response code, `response_code`, so
  // you can look at latencies for successful responses or just
  // for responses that failed.
  repeated LabelDescriptor labels = 2;

  // Whether the metric records instantaneous values, changes to a value, etc.
  // Some combinations of `metric_kind` and `value_type` might not be supported.
  MetricKind metric_kind = 3;

  // Whether the measurement is an integer, a floating-point number, etc.
  // Some combinations of `metric_kind` and `value_type` might not be supported.
  ValueType value_type = 4;

  // The unit in which the metric value is reported. It is only applicable
  // if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
  // supported units are a subset of [The Unified Code for Units of
  // Measure](http://unitsofmeasure.org/ucum.html) standard:
  //
  // **Basic units (UNIT)**
  //
  // * `bit`   bit
  // * `By`    byte
  // * `s`     second
  // * `min`   minute
  // * `h`     hour
  // * `d`     day
  //
  // **Prefixes (PREFIX)**
  //
  // * `k`     kilo    (10**3)
  // * `M`     mega    (10**6)
  // * `G`     giga    (10**9)
  // * `T`     tera    (10**12)
  // * `P`     peta    (10**15)
  // * `E`     exa     (10**18)
  // * `Z`     zetta   (10**21)
  // * `Y`     yotta   (10**24)
  // * `m`     milli   (10**-3)
  // * `u`     micro   (10**-6)
  // * `n`     nano    (10**-9)
  // * `p`     pico    (10**-12)
  // * `f`     femto   (10**-15)
  // * `a`     atto    (10**-18)
  // * `z`     zepto   (10**-21)
  // * `y`     yocto   (10**-24)
  // * `Ki`    kibi    (2**10)
  // * `Mi`    mebi    (2**20)
  // * `Gi`    gibi    (2**30)
  // * `Ti`    tebi    (2**40)
  //
  // **Grammar**
  //
  // The grammar also includes these connectors:
  //
  // * `/`    division (as an infix operator, e.g. `1/s`).
  // * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
  //
  // The grammar for a unit is as follows:
  //
  //     Expression = Component { "." Component } { "/" Component } ;
  //
  //     Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
  //               | Annotation
  //               | "1"
  //               ;
  //
  //     Annotation = "{" NAME "}" ;
  //
  // Notes:
  //
  // * `Annotation` is just a comment if it follows a `UNIT` and is
  //    equivalent to `1` if it is used alone. For examples,
  //    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
  // * `NAME` is a sequence of non-blank printable ASCII characters not
  //    containing '{' or '}'.
  // * `1` represents dimensionless value 1, such as in `1/s`.
  // * `%` represents dimensionless value 1/100, and annotates values giving
  //    a percentage.
  string unit = 5;

  // A detailed description of the metric, which can be used in documentation.
  string description = 6;

  // A concise name for the metric, which can be displayed in user interfaces.
  // Use sentence case without an ending period, for example "Request count".
  // This field is optional but it is recommended to be set for any metrics
  // associated with user-visible concepts, such as Quota.
  string display_name = 7;

  // Optional. Metadata which can be used to guide usage of the metric.
  MetricDescriptorMetadata metric_descriptor_metadata = 10;

  // Distribution bucketing options - define only when ValueType is
  // Distribution. Used for validating input.
  Distribution.BucketOptions distribution_bucket_options = 31;

  // Promoted Label Key Sets allow defining multiple indexing rules for
  // underlying backend enabling query optimizations. Metric promoted label sets
  // are combined with MonitoredResource promoted label sets and result in
  // PromotedKeySet.
  repeated LabelKeySet promoted_label_key_sets = 32;

  // Indexing allows tweaking storage usage by tweaking amount of "duplicate"
  // data with different promotion criteria. It's important consideration for
  // balancing time series query performance and storage cost.
  IndexSpec index_spec = 36;

  // Storage settings
  StorageConfig storage_config = 33;

  // Additional annotations that can be used to guide the usage of a metric.
  message MetricDescriptorMetadata {
    // The launch stage of the metric definition.
    ntt.api.LaunchStage launch_stage = 1;
  }

  message IndexSpec {
    // PerResource index
    repeated PerMonitoredResource per_resource = 1;

    message Index {
      // each label is of format: `{metric,resource}.labels.<label-key>`.
      // since resource and metric labels are mixed. Full path is required.
      repeated string promoted_labels = 2;

      // whether this index is write-only and not usable for querying
      bool write_only = 3;
    }

    message PerMonitoredResource {
      string resource = 1;

      // List of indices for given metric and resource pair
      repeated Index indices = 2;
    }
  }

  // Backend storage config
  message StorageConfig {
    // whether to store raw points
    bool store_raw_points = 1;
  }

  // The kind of measurement. It describes how the data is reported.
  enum MetricKind {
    // Do not use this default value.
    METRIC_KIND_UNSPECIFIED = 0;

    // An instantaneous measurement of a value.
    GAUGE = 1;

    // The change in a value during a time interval.
    DELTA = 2;

    // A value accumulated over a time interval.  Cumulative
    // measurements in a time series should have the same start time
    // and increasing end times, until an event resets the cumulative
    // value to zero and sets a new start time for the following
    // points.
    CUMULATIVE = 3;
  }

  // The value type of a metric.
  enum ValueType {
    // Do not use this default value.
    VALUE_TYPE_UNSPECIFIED = 0;

    // The value is a boolean.
    // This value type can be used only if the metric kind is `GAUGE`.
    BOOL = 1;

    // The value is a signed 64-bit integer.
    INT64 = 2;

    // The value is a double precision floating point number.
    DOUBLE = 3;

    // The value is a text string.
    // This value type can be used only if the metric kind is `GAUGE`.
    STRING = 4;

    // The value is a [`Distribution`][google.api.Distribution].
    DISTRIBUTION = 5;

    // The value is money.
    MONEY = 6;
  }
}
