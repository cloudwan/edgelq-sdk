// Code generated by protoc-gen-goten-client
// API: MetricDescriptorService
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetricDescriptorServiceClient is the client API for MetricDescriptorService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricDescriptorServiceClient interface {
	BatchGetMetricDescriptors(ctx context.Context, in *BatchGetMetricDescriptorsRequest, opts ...grpc.CallOption) (*BatchGetMetricDescriptorsResponse, error)
	WatchMetricDescriptor(ctx context.Context, in *WatchMetricDescriptorRequest, opts ...grpc.CallOption) (WatchMetricDescriptorClientStream, error)
	WatchMetricDescriptors(ctx context.Context, in *WatchMetricDescriptorsRequest, opts ...grpc.CallOption) (WatchMetricDescriptorsClientStream, error)
	GetMetricDescriptor(ctx context.Context, in *GetMetricDescriptorRequest, opts ...grpc.CallOption) (*metric_descriptor.MetricDescriptor, error)
	CreateMetricDescriptor(ctx context.Context, in *CreateMetricDescriptorRequest, opts ...grpc.CallOption) (*metric_descriptor.MetricDescriptor, error)
	UpdateMetricDescriptor(ctx context.Context, in *UpdateMetricDescriptorRequest, opts ...grpc.CallOption) (*metric_descriptor.MetricDescriptor, error)
	DeleteMetricDescriptor(ctx context.Context, in *DeleteMetricDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMetricDescriptors(ctx context.Context, in *ListMetricDescriptorsRequest, opts ...grpc.CallOption) (*ListMetricDescriptorsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewMetricDescriptorServiceClient(cc grpc.ClientConnInterface) MetricDescriptorServiceClient {
	return &client{cc}
}

func (c *client) BatchGetMetricDescriptors(ctx context.Context, in *BatchGetMetricDescriptorsRequest, opts ...grpc.CallOption) (*BatchGetMetricDescriptorsResponse, error) {
	out := new(BatchGetMetricDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.MetricDescriptorService/BatchGetMetricDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchMetricDescriptor(ctx context.Context, in *WatchMetricDescriptorRequest, opts ...grpc.CallOption) (WatchMetricDescriptorClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchMetricDescriptor",
			ServerStreams: true,
		},
		"/ntt.monitoring.v4.MetricDescriptorService/WatchMetricDescriptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchMetricDescriptorWatchMetricDescriptorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchMetricDescriptorClientStream interface {
	Recv() (*WatchMetricDescriptorResponse, error)
	grpc.ClientStream
}

type watchMetricDescriptorWatchMetricDescriptorClient struct {
	grpc.ClientStream
}

func (x *watchMetricDescriptorWatchMetricDescriptorClient) Recv() (*WatchMetricDescriptorResponse, error) {
	m := new(WatchMetricDescriptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchMetricDescriptors(ctx context.Context, in *WatchMetricDescriptorsRequest, opts ...grpc.CallOption) (WatchMetricDescriptorsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchMetricDescriptors",
			ServerStreams: true,
		},
		"/ntt.monitoring.v4.MetricDescriptorService/WatchMetricDescriptors", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchMetricDescriptorsWatchMetricDescriptorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchMetricDescriptorsClientStream interface {
	Recv() (*WatchMetricDescriptorsResponse, error)
	grpc.ClientStream
}

type watchMetricDescriptorsWatchMetricDescriptorsClient struct {
	grpc.ClientStream
}

func (x *watchMetricDescriptorsWatchMetricDescriptorsClient) Recv() (*WatchMetricDescriptorsResponse, error) {
	m := new(WatchMetricDescriptorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) GetMetricDescriptor(ctx context.Context, in *GetMetricDescriptorRequest, opts ...grpc.CallOption) (*metric_descriptor.MetricDescriptor, error) {
	out := new(metric_descriptor.MetricDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.MetricDescriptorService/GetMetricDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateMetricDescriptor(ctx context.Context, in *CreateMetricDescriptorRequest, opts ...grpc.CallOption) (*metric_descriptor.MetricDescriptor, error) {
	out := new(metric_descriptor.MetricDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.MetricDescriptorService/CreateMetricDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateMetricDescriptor(ctx context.Context, in *UpdateMetricDescriptorRequest, opts ...grpc.CallOption) (*metric_descriptor.MetricDescriptor, error) {
	out := new(metric_descriptor.MetricDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.MetricDescriptorService/UpdateMetricDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteMetricDescriptor(ctx context.Context, in *DeleteMetricDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.MetricDescriptorService/DeleteMetricDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMetricDescriptors(ctx context.Context, in *ListMetricDescriptorsRequest, opts ...grpc.CallOption) (*ListMetricDescriptorsResponse, error) {
	out := new(ListMetricDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.MetricDescriptorService/ListMetricDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
