// Code generated by protoc-gen-goten-client
// API: MetricDescriptorService
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized              bool
	metricDescriptorServiceDescriptor   *MetricDescriptorServiceDescriptor
	batchGetMetricDescriptorsDescriptor *BatchGetMetricDescriptorsDescriptor
	watchMetricDescriptorDescriptor     *WatchMetricDescriptorDescriptor
	watchMetricDescriptorsDescriptor    *WatchMetricDescriptorsDescriptor
	getMetricDescriptorDescriptor       *GetMetricDescriptorDescriptor
	createMetricDescriptorDescriptor    *CreateMetricDescriptorDescriptor
	updateMetricDescriptorDescriptor    *UpdateMetricDescriptorDescriptor
	deleteMetricDescriptorDescriptor    *DeleteMetricDescriptorDescriptor
	listMetricDescriptorsDescriptor     *ListMetricDescriptorsDescriptor
)

type BatchGetMetricDescriptorsDescriptor struct{}

type BatchGetMetricDescriptorsDescriptorClientMsgHandle struct{}

type BatchGetMetricDescriptorsDescriptorServerMsgHandle struct{}

func (d *BatchGetMetricDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetMetricDescriptorsRequest{}
}

func (d *BatchGetMetricDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetMetricDescriptorsResponse{}
}

func (d *BatchGetMetricDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetMethodName() string {
	return "BatchGetMetricDescriptors"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/BatchGetMetricDescriptors"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *BatchGetMetricDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *BatchGetMetricDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetMetricDescriptorsDescriptorClientMsgHandle{}
}

func (d *BatchGetMetricDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetMetricDescriptorsDescriptorServerMsgHandle{}
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetMetricDescriptorsRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetMetricDescriptorsRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return metric_descriptor.MetricDescriptorNameList(names)
		}
	}
	return (metric_descriptor.MetricDescriptorNameList)(nil)
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetMetricDescriptorsRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetMetricDescriptorsRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetMetricDescriptorsRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetMetricDescriptorsResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetMetricDescriptorsResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetMetricDescriptors(); len(resources) > 0 {
			list := make(metric_descriptor.MetricDescriptorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (metric_descriptor.MetricDescriptorNameList)(nil)
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetMetricDescriptorsResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetMetricDescriptorsResponse) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetMetricDescriptorsResponse) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetMetricDescriptors(); len(resources) > 0 {
			return metric_descriptor.MetricDescriptorList(resources)
		}
	}
	return (metric_descriptor.MetricDescriptorList)(nil)
}

func GetBatchGetMetricDescriptorsDescriptor() *BatchGetMetricDescriptorsDescriptor {
	return batchGetMetricDescriptorsDescriptor
}

type WatchMetricDescriptorDescriptor struct{}

type WatchMetricDescriptorDescriptorClientMsgHandle struct{}

type WatchMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *WatchMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchMetricDescriptorRequest{}
}

func (d *WatchMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchMetricDescriptorResponse{}
}

func (d *WatchMetricDescriptorDescriptor) IsUnary() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchMetricDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *WatchMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchMetricDescriptorDescriptor) GetMethodName() string {
	return "WatchMetricDescriptor"
}

func (d *WatchMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/WatchMetricDescriptor"
}

func (d *WatchMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *WatchMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *WatchMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *WatchMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *WatchMetricDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *WatchMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *WatchMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchMetricDescriptorRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchMetricDescriptorRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMetricDescriptorResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *metric_descriptor.MetricDescriptorChange_Added_:
				return tResChange.Added.GetMetricDescriptor().GetName()
			case *metric_descriptor.MetricDescriptorChange_Modified_:
				return tResChange.Modified.GetName()
			case *metric_descriptor.MetricDescriptorChange_Removed_:
				return tResChange.Removed.GetName()
			case *metric_descriptor.MetricDescriptorChange_Current_:
				return tResChange.Current.GetMetricDescriptor().GetName()
			}
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMetricDescriptorResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchMetricDescriptorResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchMetricDescriptorResponse) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *metric_descriptor.MetricDescriptorChange_Added_:
				return tResChange.Added.GetMetricDescriptor()
			case *metric_descriptor.MetricDescriptorChange_Modified_:
				return tResChange.Modified.GetMetricDescriptor()
			case *metric_descriptor.MetricDescriptorChange_Current_:
				return tResChange.Current.GetMetricDescriptor()
			}
		}
	}
	return (*metric_descriptor.MetricDescriptor)(nil)
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchMetricDescriptorResponse) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchMetricDescriptorDescriptor() *WatchMetricDescriptorDescriptor {
	return watchMetricDescriptorDescriptor
}

type WatchMetricDescriptorsDescriptor struct{}

type WatchMetricDescriptorsDescriptorClientMsgHandle struct{}

type WatchMetricDescriptorsDescriptorServerMsgHandle struct{}

func (d *WatchMetricDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchMetricDescriptorsRequest{}
}

func (d *WatchMetricDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchMetricDescriptorsResponse{}
}

func (d *WatchMetricDescriptorsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchMetricDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchMetricDescriptorsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchMetricDescriptorsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchMetricDescriptorsDescriptor) GetMethodName() string {
	return "WatchMetricDescriptors"
}

func (d *WatchMetricDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/WatchMetricDescriptors"
}

func (d *WatchMetricDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *WatchMetricDescriptorsDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *WatchMetricDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchMetricDescriptorsDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *WatchMetricDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *WatchMetricDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *WatchMetricDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorsDescriptorClientMsgHandle{}
}

func (d *WatchMetricDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorsDescriptorServerMsgHandle{}
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMetricDescriptorsRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMetricDescriptorsRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchMetricDescriptorsRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*metric_descriptor.ParentName)(nil)
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchMetricDescriptorsRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchMetricDescriptorsRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMetricDescriptorsResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMetricDescriptorsResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetMetricDescriptorChanges(); len(resChanges) > 0 {
			list := make(metric_descriptor.MetricDescriptorNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *metric_descriptor.MetricDescriptorChange_Added_:
					list = append(list, tResChange.Added.GetMetricDescriptor().GetName())
				case *metric_descriptor.MetricDescriptorChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *metric_descriptor.MetricDescriptorChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *metric_descriptor.MetricDescriptorChange_Current_:
					list = append(list, tResChange.Current.GetMetricDescriptor().GetName())
				}
			}
			return list
		}
	}
	return (metric_descriptor.MetricDescriptorNameList)(nil)
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchMetricDescriptorsResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchMetricDescriptorsResponse) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchMetricDescriptorsResponse) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetMetricDescriptorChanges(); len(resChanges) > 0 {
			list := make(metric_descriptor.MetricDescriptorList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *metric_descriptor.MetricDescriptorChange_Added_:
					list = append(list, tResChange.Added.GetMetricDescriptor())
				case *metric_descriptor.MetricDescriptorChange_Modified_:
					list = append(list, tResChange.Modified.GetMetricDescriptor())
				case *metric_descriptor.MetricDescriptorChange_Current_:
					list = append(list, tResChange.Current.GetMetricDescriptor())
				}
			}
			return list
		}
	}
	return (metric_descriptor.MetricDescriptorList)(nil)
}

func GetWatchMetricDescriptorsDescriptor() *WatchMetricDescriptorsDescriptor {
	return watchMetricDescriptorsDescriptor
}

type GetMetricDescriptorDescriptor struct{}

type GetMetricDescriptorDescriptorClientMsgHandle struct{}

type GetMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *GetMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetMetricDescriptorRequest{}
}

func (d *GetMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &metric_descriptor.MetricDescriptor{}
}

func (d *GetMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *GetMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *GetMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) GetVerb() string {
	return "get"
}

func (d *GetMetricDescriptorDescriptor) GetMethodName() string {
	return "GetMetricDescriptor"
}

func (d *GetMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/GetMetricDescriptor"
}

func (d *GetMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *GetMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *GetMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *GetMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *GetMetricDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *GetMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *GetMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetMetricDescriptorRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetMetricDescriptorRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*metric_descriptor.MetricDescriptor) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*metric_descriptor.MetricDescriptor) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*metric_descriptor.MetricDescriptor) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*metric_descriptor.MetricDescriptor)
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*metric_descriptor.MetricDescriptor) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetMetricDescriptorDescriptor() *GetMetricDescriptorDescriptor {
	return getMetricDescriptorDescriptor
}

type CreateMetricDescriptorDescriptor struct{}

type CreateMetricDescriptorDescriptorClientMsgHandle struct{}

type CreateMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *CreateMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateMetricDescriptorRequest{}
}

func (d *CreateMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &metric_descriptor.MetricDescriptor{}
}

func (d *CreateMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateMetricDescriptorDescriptor) IsCollection() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *CreateMetricDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateMetricDescriptorDescriptor) GetMethodName() string {
	return "CreateMetricDescriptor"
}

func (d *CreateMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/CreateMetricDescriptor"
}

func (d *CreateMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *CreateMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *CreateMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreateMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *CreateMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *CreateMetricDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *CreateMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *CreateMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetMetricDescriptor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*metric_descriptor.ParentName)(nil)
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateMetricDescriptorRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetMetricDescriptor()
	}
	return (*metric_descriptor.MetricDescriptor)(nil)
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateMetricDescriptorRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*metric_descriptor.MetricDescriptor) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*metric_descriptor.MetricDescriptor) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*metric_descriptor.MetricDescriptor) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*metric_descriptor.MetricDescriptor)
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*metric_descriptor.MetricDescriptor) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateMetricDescriptorDescriptor() *CreateMetricDescriptorDescriptor {
	return createMetricDescriptorDescriptor
}

type UpdateMetricDescriptorDescriptor struct{}

type UpdateMetricDescriptorDescriptorClientMsgHandle struct{}

type UpdateMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *UpdateMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateMetricDescriptorRequest{}
}

func (d *UpdateMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &metric_descriptor.MetricDescriptor{}
}

func (d *UpdateMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *UpdateMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateMetricDescriptorDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateMetricDescriptorDescriptor) GetMethodName() string {
	return "UpdateMetricDescriptor"
}

func (d *UpdateMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/UpdateMetricDescriptor"
}

func (d *UpdateMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *UpdateMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *UpdateMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *UpdateMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *UpdateMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *UpdateMetricDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *UpdateMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *UpdateMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetMetricDescriptor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateMetricDescriptorRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetMetricDescriptor()
	}
	return (*metric_descriptor.MetricDescriptor)(nil)
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateMetricDescriptorRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*metric_descriptor.MetricDescriptor) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*metric_descriptor.MetricDescriptor) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*metric_descriptor.MetricDescriptor) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*metric_descriptor.MetricDescriptor)
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*metric_descriptor.MetricDescriptor) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateMetricDescriptorDescriptor() *UpdateMetricDescriptorDescriptor {
	return updateMetricDescriptorDescriptor
}

type DeleteMetricDescriptorDescriptor struct{}

type DeleteMetricDescriptorDescriptorClientMsgHandle struct{}

type DeleteMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *DeleteMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteMetricDescriptorRequest{}
}

func (d *DeleteMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *DeleteMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteMetricDescriptorDescriptor) GetMethodName() string {
	return "DeleteMetricDescriptor"
}

func (d *DeleteMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/DeleteMetricDescriptor"
}

func (d *DeleteMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *DeleteMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *DeleteMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeleteMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *DeleteMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *DeleteMetricDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *DeleteMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *DeleteMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteMetricDescriptorRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteMetricDescriptorRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteMetricDescriptorDescriptor() *DeleteMetricDescriptorDescriptor {
	return deleteMetricDescriptorDescriptor
}

type ListMetricDescriptorsDescriptor struct{}

type ListMetricDescriptorsDescriptorClientMsgHandle struct{}

type ListMetricDescriptorsDescriptorServerMsgHandle struct{}

func (d *ListMetricDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMetricDescriptorsRequest{}
}

func (d *ListMetricDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMetricDescriptorsResponse{}
}

func (d *ListMetricDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMetricDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMetricDescriptorsDescriptor) IsCollection() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMetricDescriptorsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListMetricDescriptorsDescriptor) GetMethodName() string {
	return "ListMetricDescriptors"
}

func (d *ListMetricDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService/ListMetricDescriptors"
}

func (d *ListMetricDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *ListMetricDescriptorsDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *ListMetricDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListMetricDescriptorsDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *ListMetricDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *ListMetricDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *ListMetricDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMetricDescriptorsDescriptorClientMsgHandle{}
}

func (d *ListMetricDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMetricDescriptorsDescriptorServerMsgHandle{}
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMetricDescriptorsRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMetricDescriptorsRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListMetricDescriptorsRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*metric_descriptor.ParentName)(nil)
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListMetricDescriptorsRequest) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListMetricDescriptorsRequest) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMetricDescriptorsResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMetricDescriptorsResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListMetricDescriptorsResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListMetricDescriptorsResponse) *metric_descriptor.MetricDescriptor
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListMetricDescriptorsResponse) []*metric_descriptor.MetricDescriptor
	})
	if ok {
		return metric_descriptor.MetricDescriptorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetListMetricDescriptorsDescriptor() *ListMetricDescriptorsDescriptor {
	return listMetricDescriptorsDescriptor
}

type MetricDescriptorServiceDescriptor struct{}

func (d *MetricDescriptorServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		batchGetMetricDescriptorsDescriptor,
		watchMetricDescriptorDescriptor,
		watchMetricDescriptorsDescriptor,
		getMetricDescriptorDescriptor,
		createMetricDescriptorDescriptor,
		updateMetricDescriptorDescriptor,
		deleteMetricDescriptorDescriptor,
		listMetricDescriptorsDescriptor,
	}
}

func (d *MetricDescriptorServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v4.MetricDescriptorService"
}

func (d *MetricDescriptorServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *MetricDescriptorServiceDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *MetricDescriptorServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *MetricDescriptorServiceDescriptor) GetServiceVersion() string {
	return "v4"
}

func GetMetricDescriptorServiceDescriptor() *MetricDescriptorServiceDescriptor {
	return metricDescriptorServiceDescriptor
}

func initDescriptors() {
	metricDescriptorServiceDescriptor = &MetricDescriptorServiceDescriptor{}
	batchGetMetricDescriptorsDescriptor = &BatchGetMetricDescriptorsDescriptor{}
	watchMetricDescriptorDescriptor = &WatchMetricDescriptorDescriptor{}
	watchMetricDescriptorsDescriptor = &WatchMetricDescriptorsDescriptor{}
	getMetricDescriptorDescriptor = &GetMetricDescriptorDescriptor{}
	createMetricDescriptorDescriptor = &CreateMetricDescriptorDescriptor{}
	updateMetricDescriptorDescriptor = &UpdateMetricDescriptorDescriptor{}
	deleteMetricDescriptorDescriptor = &DeleteMetricDescriptorDescriptor{}
	listMetricDescriptorsDescriptor = &ListMetricDescriptorsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(metricDescriptorServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetMetricDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchMetricDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMetricDescriptorsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
