// Code generated by protoc-gen-goten-validate
// File: edgelq/monitoring/proto/v4/time_serie_custom.proto
// DO NOT EDIT!!!

package time_serie_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &meta_service.Service{}
)

func (obj *ListTimeSeriesRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Interval == nil {
		return gotenvalidate.NewValidationError("ListTimeSeriesRequest", "interval", obj.Interval, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Interval).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ListTimeSeriesRequest", "interval", obj.Interval, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Aggregation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ListTimeSeriesRequest", "aggregation", obj.Aggregation, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Pagination).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ListTimeSeriesRequest", "pagination", obj.Pagination, "nested object validation failed", err)
		}
	}
	if !(obj.PointsCap >= 0 && obj.PointsCap <= 100000) {
		return gotenvalidate.NewValidationError("ListTimeSeriesRequest", "pointsCap", obj.PointsCap, "field must be in range [0, 100000]", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListTimeSeriesResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListTimeSeriesResponse", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ExecutionErrors {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListTimeSeriesResponse", "executionErrors", obj.ExecutionErrors[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.TotalPointCounters {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListTimeSeriesResponse", "totalPointCounters", obj.TotalPointCounters[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListTimeSeriesResponse_ErrorDetails) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateTimeSeriesRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateTimeSeriesRequest", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateTimeSeriesResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.FailedTimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateTimeSeriesResponse", "failedTimeSeries", obj.FailedTimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateTimeSeriesError) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.TimeSeries).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("CreateTimeSeriesError", "timeSeries", obj.TimeSeries, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Status).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("CreateTimeSeriesError", "status", obj.Status, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Request.(type) {
	case *StatsQuery_CallLatencies_:
		if subobj, ok := interface{}(opt.CallLatencies).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "callLatencies", opt.CallLatencies, "nested object validation failed", err)
			}
		}
	case *StatsQuery_ExecutedCalls_:
		if subobj, ok := interface{}(opt.ExecutedCalls).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "executedCalls", opt.ExecutedCalls, "nested object validation failed", err)
			}
		}
	case *StatsQuery_OpenCalls_:
		if subobj, ok := interface{}(opt.OpenCalls).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "openCalls", opt.OpenCalls, "nested object validation failed", err)
			}
		}
	case *StatsQuery_ErrorCounts_:
		if subobj, ok := interface{}(opt.ErrorCounts).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "errorCounts", opt.ErrorCounts, "nested object validation failed", err)
			}
		}
	case *StatsQuery_IngressThroughput_:
		if subobj, ok := interface{}(opt.IngressThroughput).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "ingressThroughput", opt.IngressThroughput, "nested object validation failed", err)
			}
		}
	case *StatsQuery_EgressThroughput_:
		if subobj, ok := interface{}(opt.EgressThroughput).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "egressThroughput", opt.EgressThroughput, "nested object validation failed", err)
			}
		}
	case *StatsQuery_StoreUsage:
		if subobj, ok := interface{}(opt.StoreUsage).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "storeUsage", opt.StoreUsage, "nested object validation failed", err)
			}
		}
	case *StatsQuery_ResourceCount_:
		if subobj, ok := interface{}(opt.ResourceCount).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "resourceCount", opt.ResourceCount, "nested object validation failed", err)
			}
		}
	case *StatsQuery_LogsUsage:
		if subobj, ok := interface{}(opt.LogsUsage).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "logsUsage", opt.LogsUsage, "nested object validation failed", err)
			}
		}
	case *StatsQuery_ActivityLogsUsage:
		if subobj, ok := interface{}(opt.ActivityLogsUsage).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "activityLogsUsage", opt.ActivityLogsUsage, "nested object validation failed", err)
			}
		}
	case *StatsQuery_ResourceChangeLogsUsage:
		if subobj, ok := interface{}(opt.ResourceChangeLogsUsage).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "resourceChangeLogsUsage", opt.ResourceChangeLogsUsage, "nested object validation failed", err)
			}
		}
	case *StatsQuery_TimeSeriesUsage:
		if subobj, ok := interface{}(opt.TimeSeriesUsage).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "timeSeriesUsage", opt.TimeSeriesUsage, "nested object validation failed", err)
			}
		}
	case *StatsQuery_TimeSeriesLatencies_:
		if subobj, ok := interface{}(opt.TimeSeriesLatencies).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StatsQuery", "timeSeriesLatencies", opt.TimeSeriesLatencies, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_CallLatencies) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_ExecutedCalls) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_OpenCalls) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_ErrorCounts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_IngressThroughput) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_EgressThroughput) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_StoreOperations) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Operations) < 1 {
		return gotenvalidate.NewValidationError("StoreOperations", "operations", obj.Operations, "field must have at least 1 items", nil)
	}
	for _, el := range obj.Operations {

		if _, ok := StatsQuery_StoreOperations_Operation_name[int32(el)]; !ok {
			return gotenvalidate.NewValidationError("StoreOperations", "operations", el, "field must be a defined enum value", nil)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_ResourceCount) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_Logs) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if _, ok := StatsQuery_Logs_Type_name[int32(obj.Type)]; !ok {
		return gotenvalidate.NewValidationError("Logs", "type", obj.Type, "field must be a defined enum value", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_ActivityLogs) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if _, ok := StatsQuery_ActivityLogs_Type_name[int32(obj.Type)]; !ok {
		return gotenvalidate.NewValidationError("ActivityLogs", "type", obj.Type, "field must be a defined enum value", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_ResourceChangeLogs) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if _, ok := StatsQuery_ResourceChangeLogs_Type_name[int32(obj.Type)]; !ok {
		return gotenvalidate.NewValidationError("ResourceChangeLogs", "type", obj.Type, "field must be a defined enum value", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_TimeSeries) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if _, ok := StatsQuery_TimeSeries_Type_name[int32(obj.Type)]; !ok {
		return gotenvalidate.NewValidationError("TimeSeries", "type", obj.Type, "field must be a defined enum value", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StatsQuery_TimeSeriesLatencies) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *QueryProjectTimeSeriesStatsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Service == "" {
		return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "service", obj.Service, "field is required", nil)
	}
	if obj.RegionId == "" {
		return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "regionId", obj.RegionId, "field is required", nil)
	}
	if obj.Interval == nil {
		return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "interval", obj.Interval, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Interval).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "interval", obj.Interval, "nested object validation failed", err)
		}
	}
	if !(obj.PageSize >= 0 && obj.PageSize <= 100000) {
		return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "pageSize", obj.PageSize, "field must be in range [0, 100000]", nil)
	}
	if obj.Query == nil {
		return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "query", obj.Query, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Query).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsRequest", "query", obj.Query, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *QueryProjectTimeSeriesStatsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsResponse", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ExecutionErrors {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("QueryProjectTimeSeriesStatsResponse", "executionErrors", obj.ExecutionErrors[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *QueryProjectTimeSeriesStatsResponse_ErrorDetails) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *QueryServiceTimeSeriesStatsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.RegionId == "" {
		return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsRequest", "regionId", obj.RegionId, "field is required", nil)
	}
	if obj.Interval == nil {
		return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsRequest", "interval", obj.Interval, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Interval).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsRequest", "interval", obj.Interval, "nested object validation failed", err)
		}
	}
	if !(obj.PageSize >= 0 && obj.PageSize <= 100000) {
		return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsRequest", "pageSize", obj.PageSize, "field must be in range [0, 100000]", nil)
	}
	if obj.Query == nil {
		return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsRequest", "query", obj.Query, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Query).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsRequest", "query", obj.Query, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *QueryServiceTimeSeriesStatsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsResponse", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ExecutionErrors {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("QueryServiceTimeSeriesStatsResponse", "executionErrors", obj.ExecutionErrors[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *QueryServiceTimeSeriesStatsResponse_ErrorDetails) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchTimeSeriesRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Aggregation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WatchTimeSeriesRequest", "aggregation", obj.Aggregation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WatchTimeSeriesResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.TimeSeries {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WatchTimeSeriesResponse", "timeSeries", obj.TimeSeries[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
