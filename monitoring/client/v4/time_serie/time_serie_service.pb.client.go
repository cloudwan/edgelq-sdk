// Code generated by protoc-gen-goten-client
// API: TimeSerieService
// DO NOT EDIT!!!

package time_serie_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &time_serie.Point{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeSerieServiceClient is the client API for TimeSerieService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeSerieServiceClient interface {
	ListTimeSeries(ctx context.Context, in *ListTimeSeriesRequest, opts ...grpc.CallOption) (*ListTimeSeriesResponse, error)
	QueryProjectTimeSeriesStats(ctx context.Context, in *QueryProjectTimeSeriesStatsRequest, opts ...grpc.CallOption) (*QueryProjectTimeSeriesStatsResponse, error)
	QueryServiceTimeSeriesStats(ctx context.Context, in *QueryServiceTimeSeriesStatsRequest, opts ...grpc.CallOption) (*QueryServiceTimeSeriesStatsResponse, error)
	CreateTimeSeries(ctx context.Context, in *CreateTimeSeriesRequest, opts ...grpc.CallOption) (*CreateTimeSeriesResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewTimeSerieServiceClient(cc grpc.ClientConnInterface) TimeSerieServiceClient {
	return &client{cc}
}

func (c *client) ListTimeSeries(ctx context.Context, in *ListTimeSeriesRequest, opts ...grpc.CallOption) (*ListTimeSeriesResponse, error) {
	out := new(ListTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSerieService/ListTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) QueryProjectTimeSeriesStats(ctx context.Context, in *QueryProjectTimeSeriesStatsRequest, opts ...grpc.CallOption) (*QueryProjectTimeSeriesStatsResponse, error) {
	out := new(QueryProjectTimeSeriesStatsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSerieService/QueryProjectTimeSeriesStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) QueryServiceTimeSeriesStats(ctx context.Context, in *QueryServiceTimeSeriesStatsRequest, opts ...grpc.CallOption) (*QueryServiceTimeSeriesStatsResponse, error) {
	out := new(QueryServiceTimeSeriesStatsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSerieService/QueryServiceTimeSeriesStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateTimeSeries(ctx context.Context, in *CreateTimeSeriesRequest, opts ...grpc.CallOption) (*CreateTimeSeriesResponse, error) {
	out := new(CreateTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSerieService/CreateTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
