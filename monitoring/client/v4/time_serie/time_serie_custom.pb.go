// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/time_serie_custom.proto
// DO NOT EDIT!!!

package time_serie_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_service.Service{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatsQuery_CallLatencies_Groups int32

const (
	StatsQuery_CallLatencies_METHOD        StatsQuery_CallLatencies_Groups = 0
	StatsQuery_CallLatencies_VERSION       StatsQuery_CallLatencies_Groups = 1
	StatsQuery_CallLatencies_RESOURCE_TYPE StatsQuery_CallLatencies_Groups = 2
)

var (
	StatsQuery_CallLatencies_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
	}

	StatsQuery_CallLatencies_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
	}
)

func (x StatsQuery_CallLatencies_Groups) Enum() *StatsQuery_CallLatencies_Groups {
	p := new(StatsQuery_CallLatencies_Groups)
	*p = x
	return p
}

func (x StatsQuery_CallLatencies_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_CallLatencies_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[0].Descriptor()
}

func (StatsQuery_CallLatencies_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[0]
}

func (x StatsQuery_CallLatencies_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_CallLatencies_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_CallLatencies_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 0, 0}
}

type StatsQuery_CallLatencies_Reducer int32

const (
	StatsQuery_CallLatencies_SUMMARY StatsQuery_CallLatencies_Reducer = 0
	StatsQuery_CallLatencies_MIN     StatsQuery_CallLatencies_Reducer = 1
	StatsQuery_CallLatencies_MAX     StatsQuery_CallLatencies_Reducer = 2
	StatsQuery_CallLatencies_P50     StatsQuery_CallLatencies_Reducer = 3
	StatsQuery_CallLatencies_P95     StatsQuery_CallLatencies_Reducer = 4
	StatsQuery_CallLatencies_P99     StatsQuery_CallLatencies_Reducer = 5
	StatsQuery_CallLatencies_MEAN    StatsQuery_CallLatencies_Reducer = 6
	StatsQuery_CallLatencies_STD_DEV StatsQuery_CallLatencies_Reducer = 7
)

var (
	StatsQuery_CallLatencies_Reducer_name = map[int32]string{
		0: "SUMMARY",
		1: "MIN",
		2: "MAX",
		3: "P50",
		4: "P95",
		5: "P99",
		6: "MEAN",
		7: "STD_DEV",
	}

	StatsQuery_CallLatencies_Reducer_value = map[string]int32{
		"SUMMARY": 0,
		"MIN":     1,
		"MAX":     2,
		"P50":     3,
		"P95":     4,
		"P99":     5,
		"MEAN":    6,
		"STD_DEV": 7,
	}
)

func (x StatsQuery_CallLatencies_Reducer) Enum() *StatsQuery_CallLatencies_Reducer {
	p := new(StatsQuery_CallLatencies_Reducer)
	*p = x
	return p
}

func (x StatsQuery_CallLatencies_Reducer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_CallLatencies_Reducer) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[1].Descriptor()
}

func (StatsQuery_CallLatencies_Reducer) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[1]
}

func (x StatsQuery_CallLatencies_Reducer) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_CallLatencies_Reducer.ProtoReflect.Descriptor instead.
func (StatsQuery_CallLatencies_Reducer) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 0, 1}
}

type StatsQuery_ExecutedCalls_Groups int32

const (
	StatsQuery_ExecutedCalls_METHOD        StatsQuery_ExecutedCalls_Groups = 0
	StatsQuery_ExecutedCalls_VERSION       StatsQuery_ExecutedCalls_Groups = 1
	StatsQuery_ExecutedCalls_RESOURCE_TYPE StatsQuery_ExecutedCalls_Groups = 2
)

var (
	StatsQuery_ExecutedCalls_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
	}

	StatsQuery_ExecutedCalls_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
	}
)

func (x StatsQuery_ExecutedCalls_Groups) Enum() *StatsQuery_ExecutedCalls_Groups {
	p := new(StatsQuery_ExecutedCalls_Groups)
	*p = x
	return p
}

func (x StatsQuery_ExecutedCalls_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_ExecutedCalls_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[2].Descriptor()
}

func (StatsQuery_ExecutedCalls_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[2]
}

func (x StatsQuery_ExecutedCalls_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_ExecutedCalls_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_ExecutedCalls_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 1, 0}
}

type StatsQuery_OpenCalls_Groups int32

const (
	StatsQuery_OpenCalls_METHOD        StatsQuery_OpenCalls_Groups = 0
	StatsQuery_OpenCalls_VERSION       StatsQuery_OpenCalls_Groups = 1
	StatsQuery_OpenCalls_RESOURCE_TYPE StatsQuery_OpenCalls_Groups = 2
)

var (
	StatsQuery_OpenCalls_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
	}

	StatsQuery_OpenCalls_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
	}
)

func (x StatsQuery_OpenCalls_Groups) Enum() *StatsQuery_OpenCalls_Groups {
	p := new(StatsQuery_OpenCalls_Groups)
	*p = x
	return p
}

func (x StatsQuery_OpenCalls_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_OpenCalls_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[3].Descriptor()
}

func (StatsQuery_OpenCalls_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[3]
}

func (x StatsQuery_OpenCalls_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_OpenCalls_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_OpenCalls_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 2, 0}
}

type StatsQuery_ErrorCounts_Groups int32

const (
	StatsQuery_ErrorCounts_METHOD        StatsQuery_ErrorCounts_Groups = 0
	StatsQuery_ErrorCounts_VERSION       StatsQuery_ErrorCounts_Groups = 1
	StatsQuery_ErrorCounts_RESOURCE_TYPE StatsQuery_ErrorCounts_Groups = 2
	StatsQuery_ErrorCounts_RESPONSE_CODE StatsQuery_ErrorCounts_Groups = 3
)

var (
	StatsQuery_ErrorCounts_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
		3: "RESPONSE_CODE",
	}

	StatsQuery_ErrorCounts_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
		"RESPONSE_CODE": 3,
	}
)

func (x StatsQuery_ErrorCounts_Groups) Enum() *StatsQuery_ErrorCounts_Groups {
	p := new(StatsQuery_ErrorCounts_Groups)
	*p = x
	return p
}

func (x StatsQuery_ErrorCounts_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_ErrorCounts_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[4].Descriptor()
}

func (StatsQuery_ErrorCounts_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[4]
}

func (x StatsQuery_ErrorCounts_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_ErrorCounts_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_ErrorCounts_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 3, 0}
}

type StatsQuery_IngressThroughput_Groups int32

const (
	StatsQuery_IngressThroughput_METHOD        StatsQuery_IngressThroughput_Groups = 0
	StatsQuery_IngressThroughput_VERSION       StatsQuery_IngressThroughput_Groups = 1
	StatsQuery_IngressThroughput_RESOURCE_TYPE StatsQuery_IngressThroughput_Groups = 2
)

var (
	StatsQuery_IngressThroughput_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
	}

	StatsQuery_IngressThroughput_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
	}
)

func (x StatsQuery_IngressThroughput_Groups) Enum() *StatsQuery_IngressThroughput_Groups {
	p := new(StatsQuery_IngressThroughput_Groups)
	*p = x
	return p
}

func (x StatsQuery_IngressThroughput_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_IngressThroughput_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[5].Descriptor()
}

func (StatsQuery_IngressThroughput_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[5]
}

func (x StatsQuery_IngressThroughput_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_IngressThroughput_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_IngressThroughput_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 4, 0}
}

type StatsQuery_EgressThroughput_Groups int32

const (
	StatsQuery_EgressThroughput_METHOD        StatsQuery_EgressThroughput_Groups = 0
	StatsQuery_EgressThroughput_VERSION       StatsQuery_EgressThroughput_Groups = 1
	StatsQuery_EgressThroughput_RESOURCE_TYPE StatsQuery_EgressThroughput_Groups = 2
)

var (
	StatsQuery_EgressThroughput_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
	}

	StatsQuery_EgressThroughput_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
	}
)

func (x StatsQuery_EgressThroughput_Groups) Enum() *StatsQuery_EgressThroughput_Groups {
	p := new(StatsQuery_EgressThroughput_Groups)
	*p = x
	return p
}

func (x StatsQuery_EgressThroughput_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_EgressThroughput_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[6].Descriptor()
}

func (StatsQuery_EgressThroughput_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[6]
}

func (x StatsQuery_EgressThroughput_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_EgressThroughput_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_EgressThroughput_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 5, 0}
}

type StatsQuery_StoreOperations_Groups int32

const (
	StatsQuery_StoreOperations_METHOD        StatsQuery_StoreOperations_Groups = 0
	StatsQuery_StoreOperations_VERSION       StatsQuery_StoreOperations_Groups = 1
	StatsQuery_StoreOperations_RESOURCE_TYPE StatsQuery_StoreOperations_Groups = 2
	StatsQuery_StoreOperations_OPERATION     StatsQuery_StoreOperations_Groups = 3
)

var (
	StatsQuery_StoreOperations_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "RESOURCE_TYPE",
		3: "OPERATION",
	}

	StatsQuery_StoreOperations_Groups_value = map[string]int32{
		"METHOD":        0,
		"VERSION":       1,
		"RESOURCE_TYPE": 2,
		"OPERATION":     3,
	}
)

func (x StatsQuery_StoreOperations_Groups) Enum() *StatsQuery_StoreOperations_Groups {
	p := new(StatsQuery_StoreOperations_Groups)
	*p = x
	return p
}

func (x StatsQuery_StoreOperations_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_StoreOperations_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[7].Descriptor()
}

func (StatsQuery_StoreOperations_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[7]
}

func (x StatsQuery_StoreOperations_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_StoreOperations_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_StoreOperations_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 6, 0}
}

type StatsQuery_StoreOperations_Operation int32

const (
	StatsQuery_StoreOperations_UNDEFINED StatsQuery_StoreOperations_Operation = 0
	StatsQuery_StoreOperations_GET       StatsQuery_StoreOperations_Operation = 1
	StatsQuery_StoreOperations_LIST      StatsQuery_StoreOperations_Operation = 2
	StatsQuery_StoreOperations_SEARCH    StatsQuery_StoreOperations_Operation = 3
	StatsQuery_StoreOperations_WATCH     StatsQuery_StoreOperations_Operation = 4
	StatsQuery_StoreOperations_CREATE    StatsQuery_StoreOperations_Operation = 5
	StatsQuery_StoreOperations_UPDATE    StatsQuery_StoreOperations_Operation = 6
	StatsQuery_StoreOperations_DELETE    StatsQuery_StoreOperations_Operation = 7
)

var (
	StatsQuery_StoreOperations_Operation_name = map[int32]string{
		0: "UNDEFINED",
		1: "GET",
		2: "LIST",
		3: "SEARCH",
		4: "WATCH",
		5: "CREATE",
		6: "UPDATE",
		7: "DELETE",
	}

	StatsQuery_StoreOperations_Operation_value = map[string]int32{
		"UNDEFINED": 0,
		"GET":       1,
		"LIST":      2,
		"SEARCH":    3,
		"WATCH":     4,
		"CREATE":    5,
		"UPDATE":    6,
		"DELETE":    7,
	}
)

func (x StatsQuery_StoreOperations_Operation) Enum() *StatsQuery_StoreOperations_Operation {
	p := new(StatsQuery_StoreOperations_Operation)
	*p = x
	return p
}

func (x StatsQuery_StoreOperations_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_StoreOperations_Operation) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[8].Descriptor()
}

func (StatsQuery_StoreOperations_Operation) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[8]
}

func (x StatsQuery_StoreOperations_Operation) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_StoreOperations_Operation.ProtoReflect.Descriptor instead.
func (StatsQuery_StoreOperations_Operation) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 6, 1}
}

type StatsQuery_Logs_Groups int32

const (
	StatsQuery_Logs_LOG_TYPE StatsQuery_Logs_Groups = 0
)

var (
	StatsQuery_Logs_Groups_name = map[int32]string{
		0: "LOG_TYPE",
	}

	StatsQuery_Logs_Groups_value = map[string]int32{
		"LOG_TYPE": 0,
	}
)

func (x StatsQuery_Logs_Groups) Enum() *StatsQuery_Logs_Groups {
	p := new(StatsQuery_Logs_Groups)
	*p = x
	return p
}

func (x StatsQuery_Logs_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_Logs_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[9].Descriptor()
}

func (StatsQuery_Logs_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[9]
}

func (x StatsQuery_Logs_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_Logs_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_Logs_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 8, 0}
}

type StatsQuery_Logs_Type int32

const (
	StatsQuery_Logs_UNDEFINED StatsQuery_Logs_Type = 0
	StatsQuery_Logs_READS     StatsQuery_Logs_Type = 1
	StatsQuery_Logs_WRITES    StatsQuery_Logs_Type = 2
)

var (
	StatsQuery_Logs_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "READS",
		2: "WRITES",
	}

	StatsQuery_Logs_Type_value = map[string]int32{
		"UNDEFINED": 0,
		"READS":     1,
		"WRITES":    2,
	}
)

func (x StatsQuery_Logs_Type) Enum() *StatsQuery_Logs_Type {
	p := new(StatsQuery_Logs_Type)
	*p = x
	return p
}

func (x StatsQuery_Logs_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_Logs_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[10].Descriptor()
}

func (StatsQuery_Logs_Type) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[10]
}

func (x StatsQuery_Logs_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_Logs_Type.ProtoReflect.Descriptor instead.
func (StatsQuery_Logs_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 8, 1}
}

type StatsQuery_ActivityLogs_Groups int32

const (
	StatsQuery_ActivityLogs_METHOD   StatsQuery_ActivityLogs_Groups = 0
	StatsQuery_ActivityLogs_VERSION  StatsQuery_ActivityLogs_Groups = 1
	StatsQuery_ActivityLogs_CATEGORY StatsQuery_ActivityLogs_Groups = 2
)

var (
	StatsQuery_ActivityLogs_Groups_name = map[int32]string{
		0: "METHOD",
		1: "VERSION",
		2: "CATEGORY",
	}

	StatsQuery_ActivityLogs_Groups_value = map[string]int32{
		"METHOD":   0,
		"VERSION":  1,
		"CATEGORY": 2,
	}
)

func (x StatsQuery_ActivityLogs_Groups) Enum() *StatsQuery_ActivityLogs_Groups {
	p := new(StatsQuery_ActivityLogs_Groups)
	*p = x
	return p
}

func (x StatsQuery_ActivityLogs_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_ActivityLogs_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[11].Descriptor()
}

func (StatsQuery_ActivityLogs_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[11]
}

func (x StatsQuery_ActivityLogs_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_ActivityLogs_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_ActivityLogs_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 9, 0}
}

type StatsQuery_ActivityLogs_Type int32

const (
	StatsQuery_ActivityLogs_UNDEFINED StatsQuery_ActivityLogs_Type = 0
	StatsQuery_ActivityLogs_READS     StatsQuery_ActivityLogs_Type = 1
	StatsQuery_ActivityLogs_WRITES    StatsQuery_ActivityLogs_Type = 2
)

var (
	StatsQuery_ActivityLogs_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "READS",
		2: "WRITES",
	}

	StatsQuery_ActivityLogs_Type_value = map[string]int32{
		"UNDEFINED": 0,
		"READS":     1,
		"WRITES":    2,
	}
)

func (x StatsQuery_ActivityLogs_Type) Enum() *StatsQuery_ActivityLogs_Type {
	p := new(StatsQuery_ActivityLogs_Type)
	*p = x
	return p
}

func (x StatsQuery_ActivityLogs_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_ActivityLogs_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[12].Descriptor()
}

func (StatsQuery_ActivityLogs_Type) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[12]
}

func (x StatsQuery_ActivityLogs_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_ActivityLogs_Type.ProtoReflect.Descriptor instead.
func (StatsQuery_ActivityLogs_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 9, 1}
}

type StatsQuery_ResourceChangeLogs_Groups int32

const (
	StatsQuery_ResourceChangeLogs_RESOURCE_TYPE StatsQuery_ResourceChangeLogs_Groups = 0
)

var (
	StatsQuery_ResourceChangeLogs_Groups_name = map[int32]string{
		0: "RESOURCE_TYPE",
	}

	StatsQuery_ResourceChangeLogs_Groups_value = map[string]int32{
		"RESOURCE_TYPE": 0,
	}
)

func (x StatsQuery_ResourceChangeLogs_Groups) Enum() *StatsQuery_ResourceChangeLogs_Groups {
	p := new(StatsQuery_ResourceChangeLogs_Groups)
	*p = x
	return p
}

func (x StatsQuery_ResourceChangeLogs_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_ResourceChangeLogs_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[13].Descriptor()
}

func (StatsQuery_ResourceChangeLogs_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[13]
}

func (x StatsQuery_ResourceChangeLogs_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_ResourceChangeLogs_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_ResourceChangeLogs_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 10, 0}
}

type StatsQuery_ResourceChangeLogs_Type int32

const (
	StatsQuery_ResourceChangeLogs_UNDEFINED StatsQuery_ResourceChangeLogs_Type = 0
	StatsQuery_ResourceChangeLogs_READS     StatsQuery_ResourceChangeLogs_Type = 1
	StatsQuery_ResourceChangeLogs_WRITES    StatsQuery_ResourceChangeLogs_Type = 2
)

var (
	StatsQuery_ResourceChangeLogs_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "READS",
		2: "WRITES",
	}

	StatsQuery_ResourceChangeLogs_Type_value = map[string]int32{
		"UNDEFINED": 0,
		"READS":     1,
		"WRITES":    2,
	}
)

func (x StatsQuery_ResourceChangeLogs_Type) Enum() *StatsQuery_ResourceChangeLogs_Type {
	p := new(StatsQuery_ResourceChangeLogs_Type)
	*p = x
	return p
}

func (x StatsQuery_ResourceChangeLogs_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_ResourceChangeLogs_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[14].Descriptor()
}

func (StatsQuery_ResourceChangeLogs_Type) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[14]
}

func (x StatsQuery_ResourceChangeLogs_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_ResourceChangeLogs_Type.ProtoReflect.Descriptor instead.
func (StatsQuery_ResourceChangeLogs_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 10, 1}
}

type StatsQuery_TimeSeries_Groups int32

const (
	StatsQuery_TimeSeries_RESOURCE_TYPE StatsQuery_TimeSeries_Groups = 0
	StatsQuery_TimeSeries_METRIC_TYPE   StatsQuery_TimeSeries_Groups = 1
)

var (
	StatsQuery_TimeSeries_Groups_name = map[int32]string{
		0: "RESOURCE_TYPE",
		1: "METRIC_TYPE",
	}

	StatsQuery_TimeSeries_Groups_value = map[string]int32{
		"RESOURCE_TYPE": 0,
		"METRIC_TYPE":   1,
	}
)

func (x StatsQuery_TimeSeries_Groups) Enum() *StatsQuery_TimeSeries_Groups {
	p := new(StatsQuery_TimeSeries_Groups)
	*p = x
	return p
}

func (x StatsQuery_TimeSeries_Groups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_TimeSeries_Groups) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[15].Descriptor()
}

func (StatsQuery_TimeSeries_Groups) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[15]
}

func (x StatsQuery_TimeSeries_Groups) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_TimeSeries_Groups.ProtoReflect.Descriptor instead.
func (StatsQuery_TimeSeries_Groups) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 11, 0}
}

type StatsQuery_TimeSeries_Type int32

const (
	StatsQuery_TimeSeries_UNDEFINED     StatsQuery_TimeSeries_Type = 0
	StatsQuery_TimeSeries_READS         StatsQuery_TimeSeries_Type = 1
	StatsQuery_TimeSeries_RAW_WRITES    StatsQuery_TimeSeries_Type = 2
	StatsQuery_TimeSeries_ROLLUP_WRITES StatsQuery_TimeSeries_Type = 3
)

var (
	StatsQuery_TimeSeries_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "READS",
		2: "RAW_WRITES",
		3: "ROLLUP_WRITES",
	}

	StatsQuery_TimeSeries_Type_value = map[string]int32{
		"UNDEFINED":     0,
		"READS":         1,
		"RAW_WRITES":    2,
		"ROLLUP_WRITES": 3,
	}
)

func (x StatsQuery_TimeSeries_Type) Enum() *StatsQuery_TimeSeries_Type {
	p := new(StatsQuery_TimeSeries_Type)
	*p = x
	return p
}

func (x StatsQuery_TimeSeries_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_TimeSeries_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[16].Descriptor()
}

func (StatsQuery_TimeSeries_Type) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[16]
}

func (x StatsQuery_TimeSeries_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_TimeSeries_Type.ProtoReflect.Descriptor instead.
func (StatsQuery_TimeSeries_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 11, 1}
}

type StatsQuery_TimeSeriesLatencies_Reducer int32

const (
	StatsQuery_TimeSeriesLatencies_SUMMARY StatsQuery_TimeSeriesLatencies_Reducer = 0
	StatsQuery_TimeSeriesLatencies_MIN     StatsQuery_TimeSeriesLatencies_Reducer = 1
	StatsQuery_TimeSeriesLatencies_MAX     StatsQuery_TimeSeriesLatencies_Reducer = 2
	StatsQuery_TimeSeriesLatencies_P50     StatsQuery_TimeSeriesLatencies_Reducer = 3
	StatsQuery_TimeSeriesLatencies_P95     StatsQuery_TimeSeriesLatencies_Reducer = 4
	StatsQuery_TimeSeriesLatencies_P99     StatsQuery_TimeSeriesLatencies_Reducer = 5
	StatsQuery_TimeSeriesLatencies_MEAN    StatsQuery_TimeSeriesLatencies_Reducer = 6
	StatsQuery_TimeSeriesLatencies_STD_DEV StatsQuery_TimeSeriesLatencies_Reducer = 7
)

var (
	StatsQuery_TimeSeriesLatencies_Reducer_name = map[int32]string{
		0: "SUMMARY",
		1: "MIN",
		2: "MAX",
		3: "P50",
		4: "P95",
		5: "P99",
		6: "MEAN",
		7: "STD_DEV",
	}

	StatsQuery_TimeSeriesLatencies_Reducer_value = map[string]int32{
		"SUMMARY": 0,
		"MIN":     1,
		"MAX":     2,
		"P50":     3,
		"P95":     4,
		"P99":     5,
		"MEAN":    6,
		"STD_DEV": 7,
	}
)

func (x StatsQuery_TimeSeriesLatencies_Reducer) Enum() *StatsQuery_TimeSeriesLatencies_Reducer {
	p := new(StatsQuery_TimeSeriesLatencies_Reducer)
	*p = x
	return p
}

func (x StatsQuery_TimeSeriesLatencies_Reducer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StatsQuery_TimeSeriesLatencies_Reducer) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[17].Descriptor()
}

func (StatsQuery_TimeSeriesLatencies_Reducer) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes[17]
}

func (x StatsQuery_TimeSeriesLatencies_Reducer) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StatsQuery_TimeSeriesLatencies_Reducer.ProtoReflect.Descriptor instead.
func (StatsQuery_TimeSeriesLatencies_Reducer) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 12, 0}
}

// Request message for method [ListTimeSeries][ntt.monitoring.v4.ListTimeSeries]
type ListTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The project on which to execute the request. The format is
	// "projects/{project_id}", or
	// "projects/{project_id}/regions/{region_id}/buckets/{bucket_id}"
	Parent string `protobuf:"bytes,10,opt,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// A monitoring filter that specifies which time
	// series should be returned.  The filter must specify a single metric type,
	// and can additionally specify metric labels and other information. For
	// example:
	//
	//     metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
	//         metric.label.instance_name = "my-instance-name"
	Filter *time_serie.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// The time interval for which results should be returned. Only time series
	// that contain data points in the specified interval are included
	// in the response.
	Interval *common.TimeInterval `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// Instructs how to transform individual time series (aligner) and combine
	// them together (reducer, group by fields).
	// Cannot be used with pagination, as pagination exactly defines aggregation.
	// Query will be rejected if it touches too many time series.
	Aggregation *common.Aggregation `protobuf:"bytes,5,opt,name=aggregation,proto3" json:"aggregation,omitempty" firestore:"aggregation"`
	// Picks paginated time series according to pre-defined (in metric descriptor)
	// view and function. Cannot be used with aggregation, because pagination
	// view and function determines time series transformation and sorting.
	Pagination *common.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" firestore:"pagination"`
	// Specifies which information is returned about the time series.
	View common.TimeSeriesView `protobuf:"varint,7,opt,name=view,proto3,enum=ntt.monitoring.v4.TimeSeriesView" json:"view,omitempty" firestore:"view"`
	// view list mask. Optimize network usage and limit returned header fields to
	// a required subset. example fields in field mask:
	// - "key": for later caching,
	// - "resource.labels.project_id", "resource.labels.instance_name", etc -
	// specific labels only
	// - "resource", "metric": all resource labels, reduced_labels and type
	// NOTE: points are added implicitly
	FieldMask *time_serie.TimeSerie_FieldMask `protobuf:"bytes,12,opt,customtype=TimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// A positive number that is the maximum number of Points to return. If
	// `points_cap` is empty or more than 100,000 results, the effective
	// `points_cap` is 100,000 results. If `view` is set to `HEADERS`, this is
	// the maximum number of `TimeSeries` returned.
	PointsCap int32 `protobuf:"varint,8,opt,name=points_cap,json=pointsCap,proto3" json:"points_cap,omitempty" firestore:"pointsCap"`
	// If this field is not empty then it must contain the `continuation_token`
	// value returned by a previous call to this method.  Using this field causes
	// the method to return additional results from the previous method call.
	ContinuationToken string `protobuf:"bytes,9,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty" firestore:"continuationToken"`
}

func (m *ListTimeSeriesRequest) Reset() {
	*m = ListTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesRequest) ProtoMessage() {}

func (m *ListTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use ListTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ListTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTimeSeriesRequest) GetFilter() *time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetAggregation() *common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetPagination() *common.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetView() common.TimeSeriesView {
	if m != nil {
		return m.View
	}
	return common.TimeSeriesView_FULL
}

func (m *ListTimeSeriesRequest) GetFieldMask() *time_serie.TimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetPointsCap() int32 {
	if m != nil {
		return m.PointsCap
	}
	return int32(0)
}

func (m *ListTimeSeriesRequest) GetContinuationToken() string {
	if m != nil {
		return m.ContinuationToken
	}
	return ""
}

func (m *ListTimeSeriesRequest) SetParent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *ListTimeSeriesRequest) SetFilter(fv *time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListTimeSeriesRequest"))
	}
	m.Filter = fv
}

func (m *ListTimeSeriesRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ListTimeSeriesRequest"))
	}
	m.Interval = fv
}

func (m *ListTimeSeriesRequest) SetAggregation(fv *common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "ListTimeSeriesRequest"))
	}
	m.Aggregation = fv
}

func (m *ListTimeSeriesRequest) SetPagination(fv *common.Pagination) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pagination", "ListTimeSeriesRequest"))
	}
	m.Pagination = fv
}

func (m *ListTimeSeriesRequest) SetView(fv common.TimeSeriesView) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListTimeSeriesRequest"))
	}
	m.View = fv
}

func (m *ListTimeSeriesRequest) SetFieldMask(fv *time_serie.TimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListTimeSeriesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListTimeSeriesRequest) SetPointsCap(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PointsCap", "ListTimeSeriesRequest"))
	}
	m.PointsCap = fv
}

func (m *ListTimeSeriesRequest) SetContinuationToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContinuationToken", "ListTimeSeriesRequest"))
	}
	m.ContinuationToken = fv
}

// Response message for method
// [ListTimeSeries][ntt.monitoring.v4.ListTimeSeries]
type ListTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// One or more time series that match the filter included in the request.
	TimeSeries []*time_serie.TimeSerie `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	// Query execution errors that may have caused the time series data returned
	// to be incomplete.
	ExecutionErrors []*rpc.Status `protobuf:"bytes,3,rep,name=execution_errors,json=executionErrors,proto3" json:"execution_errors,omitempty" firestore:"executionErrors"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value.  To see the additional results,
	// use that value as `continuation_token` in the next call to this method.
	ContinuationToken string `protobuf:"bytes,2,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty" firestore:"continuationToken"`
	// Special time series with total amount of records available for pagination
	// by given time series key. Metric/Resource labels will contain "common"
	// values shared by all ranked time series. ValueType will be always INT64 and
	// metricKind GAUGE. In a sense, this time series is execution of
	// ListTimeSeries with Aggregation = {groupByFields: [<viewPaginatedLabels>],
	// REDUCER: REDUCE_COUNT} This field is only populated for paginated queries
	// (pagination in ListTimeSeries is specified).
	TotalPointCounters []*time_serie.TimeSerie `protobuf:"bytes,4,rep,name=total_point_counters,json=totalPointCounters,proto3" json:"total_point_counters,omitempty" firestore:"totalPointCounters"`
}

func (m *ListTimeSeriesResponse) Reset() {
	*m = ListTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesResponse) ProtoMessage() {}

func (m *ListTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use ListTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ListTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesResponse) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *ListTimeSeriesResponse) GetExecutionErrors() []*rpc.Status {
	if m != nil {
		return m.ExecutionErrors
	}
	return nil
}

func (m *ListTimeSeriesResponse) GetContinuationToken() string {
	if m != nil {
		return m.ContinuationToken
	}
	return ""
}

func (m *ListTimeSeriesResponse) GetTotalPointCounters() []*time_serie.TimeSerie {
	if m != nil {
		return m.TotalPointCounters
	}
	return nil
}

func (m *ListTimeSeriesResponse) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "ListTimeSeriesResponse"))
	}
	m.TimeSeries = fv
}

func (m *ListTimeSeriesResponse) SetExecutionErrors(fv []*rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExecutionErrors", "ListTimeSeriesResponse"))
	}
	m.ExecutionErrors = fv
}

func (m *ListTimeSeriesResponse) SetContinuationToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContinuationToken", "ListTimeSeriesResponse"))
	}
	m.ContinuationToken = fv
}

func (m *ListTimeSeriesResponse) SetTotalPointCounters(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalPointCounters", "ListTimeSeriesResponse"))
	}
	m.TotalPointCounters = fv
}

// Request message for method
// [CreateTimeSeries][ntt.monitoring.v4.CreateTimeSeries]
type CreateTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The project on which to execute the request. The format is
	// "projects/{project_id}", or
	// "projects/{project_id}/regions/{region_id}/buckets/{bucket_id}"
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// The new data to be added to a list of time series.
	// Adds at most one data point to each of several time series.  The new data
	// point must be more recent than any other point in its time series.  Each
	// `TimeSeries` value must fully specify a unique time series by supplying
	// all label values for the metric and the monitored resource.
	TimeSeries []*time_serie.TimeSerie `protobuf:"bytes,2,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
}

func (m *CreateTimeSeriesRequest) Reset() {
	*m = CreateTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesRequest) ProtoMessage() {}

func (m *CreateTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{2}
}

func (m *CreateTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateTimeSeriesRequest) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *CreateTimeSeriesRequest) SetParent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *CreateTimeSeriesRequest) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "CreateTimeSeriesRequest"))
	}
	m.TimeSeries = fv
}

// Response message for method
// [CreateTimeSeries][ntt.monitoring.v4.CreateTimeSeries]
type CreateTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Time Serie keys indexed by Create position - present only when given
	// TimeSerie didn't use Key field
	TimeSerieKeys map[uint32][]byte `protobuf:"bytes,11,rep,name=time_serie_keys,json=timeSerieKeys,proto3" json:"time_serie_keys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"timeSerieKeys"`
	// Time series that failed to be created
	FailedTimeSeries []*CreateTimeSeriesError `protobuf:"bytes,50,rep,name=failed_time_series,json=failedTimeSeries,proto3" json:"failed_time_series,omitempty" firestore:"failedTimeSeries"`
}

func (m *CreateTimeSeriesResponse) Reset() {
	*m = CreateTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesResponse) ProtoMessage() {}

func (m *CreateTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{3}
}

func (m *CreateTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesResponse) GetTimeSerieKeys() map[uint32][]byte {
	if m != nil {
		return m.TimeSerieKeys
	}
	return nil
}

func (m *CreateTimeSeriesResponse) GetFailedTimeSeries() []*CreateTimeSeriesError {
	if m != nil {
		return m.FailedTimeSeries
	}
	return nil
}

func (m *CreateTimeSeriesResponse) SetTimeSerieKeys(fv map[uint32][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSerieKeys", "CreateTimeSeriesResponse"))
	}
	m.TimeSerieKeys = fv
}

func (m *CreateTimeSeriesResponse) SetFailedTimeSeries(fv []*CreateTimeSeriesError) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FailedTimeSeries", "CreateTimeSeriesResponse"))
	}
	m.FailedTimeSeries = fv
}

// Describes the result of a failed request to write data to a time series.
type CreateTimeSeriesError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The time series, including the `Metric`, `MonitoredResource`,
	// and `Point`s (including timestamp and value) that resulted
	// in the error. This field provides all of the context that
	// would be needed to retry the operation.
	TimeSeries *time_serie.TimeSerie `protobuf:"bytes,1,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	// The status of the requested write operation.
	Status *rpc.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *CreateTimeSeriesError) Reset() {
	*m = CreateTimeSeriesError{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesError) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesError) ProtoMessage() {}

func (m *CreateTimeSeriesError) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesError) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesError.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesError) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{4}
}

func (m *CreateTimeSeriesError) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesError) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesError) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesError) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesError) GetTimeSeries() *time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *CreateTimeSeriesError) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateTimeSeriesError) SetTimeSeries(fv *time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "CreateTimeSeriesError"))
	}
	m.TimeSeries = fv
}

func (m *CreateTimeSeriesError) SetStatus(fv *rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "CreateTimeSeriesError"))
	}
	m.Status = fv
}

type StatsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Request:
	//	*StatsQuery_CallLatencies_
	//	*StatsQuery_ExecutedCalls_
	//	*StatsQuery_OpenCalls_
	//	*StatsQuery_ErrorCounts_
	//	*StatsQuery_IngressThroughput_
	//	*StatsQuery_EgressThroughput_
	//	*StatsQuery_StoreUsage
	//	*StatsQuery_ResourceCount_
	//	*StatsQuery_LogsUsage
	//	*StatsQuery_ActivityLogsUsage
	//	*StatsQuery_ResourceChangeLogsUsage
	//	*StatsQuery_TimeSeriesUsage
	//	*StatsQuery_TimeSeriesLatencies_
	Request isStatsQuery_Request `protobuf_oneof:"request"`
}

func (m *StatsQuery) Reset() {
	*m = StatsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery) ProtoMessage() {}

func (m *StatsQuery) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery) GotenMessage() {}

// Deprecated, Use StatsQuery.ProtoReflect.Descriptor instead.
func (*StatsQuery) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5}
}

func (m *StatsQuery) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isStatsQuery_Request interface {
	isStatsQuery_Request()
}

type StatsQuery_CallLatencies_ struct {
	CallLatencies *StatsQuery_CallLatencies `protobuf:"bytes,1,opt,name=call_latencies,json=callLatencies,proto3,oneof" firestore:"callLatencies"`
}
type StatsQuery_ExecutedCalls_ struct {
	ExecutedCalls *StatsQuery_ExecutedCalls `protobuf:"bytes,2,opt,name=executed_calls,json=executedCalls,proto3,oneof" firestore:"executedCalls"`
}
type StatsQuery_OpenCalls_ struct {
	OpenCalls *StatsQuery_OpenCalls `protobuf:"bytes,3,opt,name=open_calls,json=openCalls,proto3,oneof" firestore:"openCalls"`
}
type StatsQuery_ErrorCounts_ struct {
	ErrorCounts *StatsQuery_ErrorCounts `protobuf:"bytes,4,opt,name=error_counts,json=errorCounts,proto3,oneof" firestore:"errorCounts"`
}
type StatsQuery_IngressThroughput_ struct {
	IngressThroughput *StatsQuery_IngressThroughput `protobuf:"bytes,5,opt,name=ingress_throughput,json=ingressThroughput,proto3,oneof" firestore:"ingressThroughput"`
}
type StatsQuery_EgressThroughput_ struct {
	EgressThroughput *StatsQuery_EgressThroughput `protobuf:"bytes,6,opt,name=egress_throughput,json=egressThroughput,proto3,oneof" firestore:"egressThroughput"`
}
type StatsQuery_StoreUsage struct {
	StoreUsage *StatsQuery_StoreOperations `protobuf:"bytes,7,opt,name=store_usage,json=storeUsage,proto3,oneof" firestore:"storeUsage"`
}
type StatsQuery_ResourceCount_ struct {
	ResourceCount *StatsQuery_ResourceCount `protobuf:"bytes,8,opt,name=resource_count,json=resourceCount,proto3,oneof" firestore:"resourceCount"`
}
type StatsQuery_LogsUsage struct {
	LogsUsage *StatsQuery_Logs `protobuf:"bytes,9,opt,name=logs_usage,json=logsUsage,proto3,oneof" firestore:"logsUsage"`
}
type StatsQuery_ActivityLogsUsage struct {
	ActivityLogsUsage *StatsQuery_ActivityLogs `protobuf:"bytes,10,opt,name=activity_logs_usage,json=activityLogsUsage,proto3,oneof" firestore:"activityLogsUsage"`
}
type StatsQuery_ResourceChangeLogsUsage struct {
	ResourceChangeLogsUsage *StatsQuery_ResourceChangeLogs `protobuf:"bytes,11,opt,name=resource_change_logs_usage,json=resourceChangeLogsUsage,proto3,oneof" firestore:"resourceChangeLogsUsage"`
}
type StatsQuery_TimeSeriesUsage struct {
	TimeSeriesUsage *StatsQuery_TimeSeries `protobuf:"bytes,12,opt,name=time_series_usage,json=timeSeriesUsage,proto3,oneof" firestore:"timeSeriesUsage"`
}
type StatsQuery_TimeSeriesLatencies_ struct {
	TimeSeriesLatencies *StatsQuery_TimeSeriesLatencies `protobuf:"bytes,13,opt,name=time_series_latencies,json=timeSeriesLatencies,proto3,oneof" firestore:"timeSeriesLatencies"`
}

func (*StatsQuery_CallLatencies_) isStatsQuery_Request()          {}
func (*StatsQuery_ExecutedCalls_) isStatsQuery_Request()          {}
func (*StatsQuery_OpenCalls_) isStatsQuery_Request()              {}
func (*StatsQuery_ErrorCounts_) isStatsQuery_Request()            {}
func (*StatsQuery_IngressThroughput_) isStatsQuery_Request()      {}
func (*StatsQuery_EgressThroughput_) isStatsQuery_Request()       {}
func (*StatsQuery_StoreUsage) isStatsQuery_Request()              {}
func (*StatsQuery_ResourceCount_) isStatsQuery_Request()          {}
func (*StatsQuery_LogsUsage) isStatsQuery_Request()               {}
func (*StatsQuery_ActivityLogsUsage) isStatsQuery_Request()       {}
func (*StatsQuery_ResourceChangeLogsUsage) isStatsQuery_Request() {}
func (*StatsQuery_TimeSeriesUsage) isStatsQuery_Request()         {}
func (*StatsQuery_TimeSeriesLatencies_) isStatsQuery_Request()    {}
func (m *StatsQuery) GetRequest() isStatsQuery_Request {
	if m != nil {
		return m.Request
	}
	return nil
}
func (m *StatsQuery) GetCallLatencies() *StatsQuery_CallLatencies {
	if x, ok := m.GetRequest().(*StatsQuery_CallLatencies_); ok {
		return x.CallLatencies
	}
	return nil
}
func (m *StatsQuery) GetExecutedCalls() *StatsQuery_ExecutedCalls {
	if x, ok := m.GetRequest().(*StatsQuery_ExecutedCalls_); ok {
		return x.ExecutedCalls
	}
	return nil
}
func (m *StatsQuery) GetOpenCalls() *StatsQuery_OpenCalls {
	if x, ok := m.GetRequest().(*StatsQuery_OpenCalls_); ok {
		return x.OpenCalls
	}
	return nil
}
func (m *StatsQuery) GetErrorCounts() *StatsQuery_ErrorCounts {
	if x, ok := m.GetRequest().(*StatsQuery_ErrorCounts_); ok {
		return x.ErrorCounts
	}
	return nil
}
func (m *StatsQuery) GetIngressThroughput() *StatsQuery_IngressThroughput {
	if x, ok := m.GetRequest().(*StatsQuery_IngressThroughput_); ok {
		return x.IngressThroughput
	}
	return nil
}
func (m *StatsQuery) GetEgressThroughput() *StatsQuery_EgressThroughput {
	if x, ok := m.GetRequest().(*StatsQuery_EgressThroughput_); ok {
		return x.EgressThroughput
	}
	return nil
}
func (m *StatsQuery) GetStoreUsage() *StatsQuery_StoreOperations {
	if x, ok := m.GetRequest().(*StatsQuery_StoreUsage); ok {
		return x.StoreUsage
	}
	return nil
}
func (m *StatsQuery) GetResourceCount() *StatsQuery_ResourceCount {
	if x, ok := m.GetRequest().(*StatsQuery_ResourceCount_); ok {
		return x.ResourceCount
	}
	return nil
}
func (m *StatsQuery) GetLogsUsage() *StatsQuery_Logs {
	if x, ok := m.GetRequest().(*StatsQuery_LogsUsage); ok {
		return x.LogsUsage
	}
	return nil
}
func (m *StatsQuery) GetActivityLogsUsage() *StatsQuery_ActivityLogs {
	if x, ok := m.GetRequest().(*StatsQuery_ActivityLogsUsage); ok {
		return x.ActivityLogsUsage
	}
	return nil
}
func (m *StatsQuery) GetResourceChangeLogsUsage() *StatsQuery_ResourceChangeLogs {
	if x, ok := m.GetRequest().(*StatsQuery_ResourceChangeLogsUsage); ok {
		return x.ResourceChangeLogsUsage
	}
	return nil
}
func (m *StatsQuery) GetTimeSeriesUsage() *StatsQuery_TimeSeries {
	if x, ok := m.GetRequest().(*StatsQuery_TimeSeriesUsage); ok {
		return x.TimeSeriesUsage
	}
	return nil
}
func (m *StatsQuery) GetTimeSeriesLatencies() *StatsQuery_TimeSeriesLatencies {
	if x, ok := m.GetRequest().(*StatsQuery_TimeSeriesLatencies_); ok {
		return x.TimeSeriesLatencies
	}
	return nil
}
func (m *StatsQuery) SetRequest(ofv isStatsQuery_Request) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isStatsQuery_Request", "StatsQuery"))
	}
	m.Request = ofv
}
func (m *StatsQuery) SetCallLatencies(fv *StatsQuery_CallLatencies) {
	m.SetRequest(&StatsQuery_CallLatencies_{CallLatencies: fv})
}
func (m *StatsQuery) SetExecutedCalls(fv *StatsQuery_ExecutedCalls) {
	m.SetRequest(&StatsQuery_ExecutedCalls_{ExecutedCalls: fv})
}
func (m *StatsQuery) SetOpenCalls(fv *StatsQuery_OpenCalls) {
	m.SetRequest(&StatsQuery_OpenCalls_{OpenCalls: fv})
}
func (m *StatsQuery) SetErrorCounts(fv *StatsQuery_ErrorCounts) {
	m.SetRequest(&StatsQuery_ErrorCounts_{ErrorCounts: fv})
}
func (m *StatsQuery) SetIngressThroughput(fv *StatsQuery_IngressThroughput) {
	m.SetRequest(&StatsQuery_IngressThroughput_{IngressThroughput: fv})
}
func (m *StatsQuery) SetEgressThroughput(fv *StatsQuery_EgressThroughput) {
	m.SetRequest(&StatsQuery_EgressThroughput_{EgressThroughput: fv})
}
func (m *StatsQuery) SetStoreUsage(fv *StatsQuery_StoreOperations) {
	m.SetRequest(&StatsQuery_StoreUsage{StoreUsage: fv})
}
func (m *StatsQuery) SetResourceCount(fv *StatsQuery_ResourceCount) {
	m.SetRequest(&StatsQuery_ResourceCount_{ResourceCount: fv})
}
func (m *StatsQuery) SetLogsUsage(fv *StatsQuery_Logs) {
	m.SetRequest(&StatsQuery_LogsUsage{LogsUsage: fv})
}
func (m *StatsQuery) SetActivityLogsUsage(fv *StatsQuery_ActivityLogs) {
	m.SetRequest(&StatsQuery_ActivityLogsUsage{ActivityLogsUsage: fv})
}
func (m *StatsQuery) SetResourceChangeLogsUsage(fv *StatsQuery_ResourceChangeLogs) {
	m.SetRequest(&StatsQuery_ResourceChangeLogsUsage{ResourceChangeLogsUsage: fv})
}
func (m *StatsQuery) SetTimeSeriesUsage(fv *StatsQuery_TimeSeries) {
	m.SetRequest(&StatsQuery_TimeSeriesUsage{TimeSeriesUsage: fv})
}
func (m *StatsQuery) SetTimeSeriesLatencies(fv *StatsQuery_TimeSeriesLatencies) {
	m.SetRequest(&StatsQuery_TimeSeriesLatencies_{TimeSeriesLatencies: fv})
}

// Response message for method
// [QueryProjectTimeSeriesStats][ntt.monitoring.v4.QueryProjectTimeSeriesStats]
type QueryProjectTimeSeriesStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Name `protobuf:"bytes,1,opt,customtype=Name,name=project,proto3" json:"project,omitempty" firestore:"project"`
	// Service domain for which we request stats, for example "devices.edgelq.com"
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Region ID from which to get metrics
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	// Aggregation alignment period
	Ap *durationpb.Duration `protobuf:"bytes,4,opt,name=ap,proto3" json:"ap,omitempty" firestore:"ap"`
	// The time interval for which results should be returned.
	Interval *common.TimeInterval `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// A positive number that is the maximum number of results to return. If
	// `page_size` is empty or more than 100,000 results, the effective
	// `page_size` is 100,000 results.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// If this field is not empty then it must contain the `nextPageToken` value
	// returned by a previous call to this method.  Using this field causes the
	// method to return additional results from the previous method call.
	PageToken string      `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	Query     *StatsQuery `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty" firestore:"query"`
}

func (m *QueryProjectTimeSeriesStatsRequest) Reset() {
	*m = QueryProjectTimeSeriesStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QueryProjectTimeSeriesStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QueryProjectTimeSeriesStatsRequest) ProtoMessage() {}

func (m *QueryProjectTimeSeriesStatsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QueryProjectTimeSeriesStatsRequest) GotenMessage() {}

// Deprecated, Use QueryProjectTimeSeriesStatsRequest.ProtoReflect.Descriptor instead.
func (*QueryProjectTimeSeriesStatsRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{6}
}

func (m *QueryProjectTimeSeriesStatsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QueryProjectTimeSeriesStatsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QueryProjectTimeSeriesStatsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QueryProjectTimeSeriesStatsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QueryProjectTimeSeriesStatsRequest) GetProject() *project.Name {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *QueryProjectTimeSeriesStatsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *QueryProjectTimeSeriesStatsRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *QueryProjectTimeSeriesStatsRequest) GetAp() *durationpb.Duration {
	if m != nil {
		return m.Ap
	}
	return nil
}

func (m *QueryProjectTimeSeriesStatsRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *QueryProjectTimeSeriesStatsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *QueryProjectTimeSeriesStatsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *QueryProjectTimeSeriesStatsRequest) GetQuery() *StatsQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *QueryProjectTimeSeriesStatsRequest) SetProject(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.Project = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetService(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.Service = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.RegionId = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetAp(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ap", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.Ap = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.Interval = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.PageSize = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.PageToken = fv
}

func (m *QueryProjectTimeSeriesStatsRequest) SetQuery(fv *StatsQuery) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "QueryProjectTimeSeriesStatsRequest"))
	}
	m.Query = fv
}

// Response message for method
// [QueryProjectTimeSeriesStats][ntt.monitoring.v4.QueryProjectTimeSeriesStats]
type QueryProjectTimeSeriesStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// One or more time series that match the request.
	TimeSeries []*time_serie.TimeSerie `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value.  To see the additional results,
	// use that value as `pageToken` in the next call to this method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Query execution errors that may have caused the time series data returned
	// to be incomplete.
	ExecutionErrors []*rpc.Status `protobuf:"bytes,3,rep,name=execution_errors,json=executionErrors,proto3" json:"execution_errors,omitempty" firestore:"executionErrors"`
}

func (m *QueryProjectTimeSeriesStatsResponse) Reset() {
	*m = QueryProjectTimeSeriesStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QueryProjectTimeSeriesStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QueryProjectTimeSeriesStatsResponse) ProtoMessage() {}

func (m *QueryProjectTimeSeriesStatsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QueryProjectTimeSeriesStatsResponse) GotenMessage() {}

// Deprecated, Use QueryProjectTimeSeriesStatsResponse.ProtoReflect.Descriptor instead.
func (*QueryProjectTimeSeriesStatsResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{7}
}

func (m *QueryProjectTimeSeriesStatsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QueryProjectTimeSeriesStatsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QueryProjectTimeSeriesStatsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QueryProjectTimeSeriesStatsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QueryProjectTimeSeriesStatsResponse) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *QueryProjectTimeSeriesStatsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *QueryProjectTimeSeriesStatsResponse) GetExecutionErrors() []*rpc.Status {
	if m != nil {
		return m.ExecutionErrors
	}
	return nil
}

func (m *QueryProjectTimeSeriesStatsResponse) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "QueryProjectTimeSeriesStatsResponse"))
	}
	m.TimeSeries = fv
}

func (m *QueryProjectTimeSeriesStatsResponse) SetNextPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "QueryProjectTimeSeriesStatsResponse"))
	}
	m.NextPageToken = fv
}

func (m *QueryProjectTimeSeriesStatsResponse) SetExecutionErrors(fv []*rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExecutionErrors", "QueryProjectTimeSeriesStatsResponse"))
	}
	m.ExecutionErrors = fv
}

// Response message for method
// [QueryServiceTimeSeriesStats][ntt.monitoring.v4.QueryServiceTimeSeriesStats]
type QueryServiceTimeSeriesStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Service       *meta_service.Name `protobuf:"bytes,1,opt,customtype=Name,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Region ID from which stats should e obtained
	RegionId string               `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	Ap       *durationpb.Duration `protobuf:"bytes,3,opt,name=ap,proto3" json:"ap,omitempty" firestore:"ap"`
	// The time interval for which results should be returned.
	Interval *common.TimeInterval `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// A positive number that is the maximum number of results to return. If
	// `page_size` is empty or more than 100,000 results, the effective
	// `page_size` is 100,000 results.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// If this field is not empty then it must contain the `nextPageToken` value
	// returned by a previous call to this method.  Using this field causes the
	// method to return additional results from the previous method call.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Optional list of user projects for which we want to get stats. If provided,
	// statistics will be grouped by them.
	UserProjectIds []string    `protobuf:"bytes,7,rep,name=user_project_ids,json=userProjectIds,proto3" json:"user_project_ids,omitempty" firestore:"userProjectIds"`
	Query          *StatsQuery `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty" firestore:"query"`
}

func (m *QueryServiceTimeSeriesStatsRequest) Reset() {
	*m = QueryServiceTimeSeriesStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QueryServiceTimeSeriesStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QueryServiceTimeSeriesStatsRequest) ProtoMessage() {}

func (m *QueryServiceTimeSeriesStatsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QueryServiceTimeSeriesStatsRequest) GotenMessage() {}

// Deprecated, Use QueryServiceTimeSeriesStatsRequest.ProtoReflect.Descriptor instead.
func (*QueryServiceTimeSeriesStatsRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{8}
}

func (m *QueryServiceTimeSeriesStatsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QueryServiceTimeSeriesStatsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QueryServiceTimeSeriesStatsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QueryServiceTimeSeriesStatsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QueryServiceTimeSeriesStatsRequest) GetService() *meta_service.Name {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *QueryServiceTimeSeriesStatsRequest) GetAp() *durationpb.Duration {
	if m != nil {
		return m.Ap
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *QueryServiceTimeSeriesStatsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *QueryServiceTimeSeriesStatsRequest) GetUserProjectIds() []string {
	if m != nil {
		return m.UserProjectIds
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsRequest) GetQuery() *StatsQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsRequest) SetService(fv *meta_service.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.Service = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.RegionId = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetAp(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ap", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.Ap = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.Interval = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.PageSize = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.PageToken = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetUserProjectIds(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UserProjectIds", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.UserProjectIds = fv
}

func (m *QueryServiceTimeSeriesStatsRequest) SetQuery(fv *StatsQuery) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "QueryServiceTimeSeriesStatsRequest"))
	}
	m.Query = fv
}

// Response message for method
// [QueryServiceTimeSeriesStats][ntt.monitoring.v4.QueryServiceTimeSeriesStats]
type QueryServiceTimeSeriesStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// One or more time series that match the request.
	TimeSeries []*time_serie.TimeSerie `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value.  To see the additional results,
	// use that value as `pageToken` in the next call to this method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Query execution errors that may have caused the time series data returned
	// to be incomplete.
	ExecutionErrors []*rpc.Status `protobuf:"bytes,3,rep,name=execution_errors,json=executionErrors,proto3" json:"execution_errors,omitempty" firestore:"executionErrors"`
}

func (m *QueryServiceTimeSeriesStatsResponse) Reset() {
	*m = QueryServiceTimeSeriesStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QueryServiceTimeSeriesStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QueryServiceTimeSeriesStatsResponse) ProtoMessage() {}

func (m *QueryServiceTimeSeriesStatsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QueryServiceTimeSeriesStatsResponse) GotenMessage() {}

// Deprecated, Use QueryServiceTimeSeriesStatsResponse.ProtoReflect.Descriptor instead.
func (*QueryServiceTimeSeriesStatsResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{9}
}

func (m *QueryServiceTimeSeriesStatsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QueryServiceTimeSeriesStatsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QueryServiceTimeSeriesStatsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QueryServiceTimeSeriesStatsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QueryServiceTimeSeriesStatsResponse) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *QueryServiceTimeSeriesStatsResponse) GetExecutionErrors() []*rpc.Status {
	if m != nil {
		return m.ExecutionErrors
	}
	return nil
}

func (m *QueryServiceTimeSeriesStatsResponse) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "QueryServiceTimeSeriesStatsResponse"))
	}
	m.TimeSeries = fv
}

func (m *QueryServiceTimeSeriesStatsResponse) SetNextPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "QueryServiceTimeSeriesStatsResponse"))
	}
	m.NextPageToken = fv
}

func (m *QueryServiceTimeSeriesStatsResponse) SetExecutionErrors(fv []*rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExecutionErrors", "QueryServiceTimeSeriesStatsResponse"))
	}
	m.ExecutionErrors = fv
}

type WatchTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The project on which to execute the request. The format is
	// "projects/{project_id}", or
	// "projects/{project_id}/regions/{region_id}/buckets/{bucket_id}"
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// A monitoring filter that specifies which time
	// series should be returned.  The filter must specify a single metric type,
	// and can additionally specify metric labels and other information. For
	// example:
	//
	//     metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
	//         metric.label.instance_name = "my-instance-name"
	Filter *time_serie.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// Instructs how to transform individual time series (aligner) and combine
	// them together (reducer, group by fields).
	Aggregation *common.Aggregation `protobuf:"bytes,3,opt,name=aggregation,proto3" json:"aggregation,omitempty" firestore:"aggregation"`
	// Amount of past data to fetch when new time series key appears (not present
	// in current session). For example: If client lost previous watch session for
	// 15 minutes, they can set this field value to 15 minutes duration + 1 extra
	// AlignmentPeriod value just in case. Initial time series in response will
	// contain extra past data. Once specific TimeSeries key was already observed,
	// further values will be coming only from realtime watch.
	// This field has lower priority than starting_time!
	SnapshotIntervalToFetch *durationpb.Duration `protobuf:"bytes,4,opt,name=snapshot_interval_to_fetch,json=snapshotIntervalToFetch,proto3" json:"snapshot_interval_to_fetch,omitempty" firestore:"snapshotIntervalToFetch"`
	// For every new unique time series key monitoring will try to fetch past
	// data from given starting time. This is useful for recovery purposes, if
	// client has lost previous watch session. Once snapshot is retrieved for
	// given key, further data will contain live updates. This field takes
	// priority over snapshot_interval_to_fetch.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
}

func (m *WatchTimeSeriesRequest) Reset() {
	*m = WatchTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesRequest) ProtoMessage() {}

func (m *WatchTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{10}
}

func (m *WatchTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *WatchTimeSeriesRequest) GetFilter() *time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchTimeSeriesRequest) GetAggregation() *common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *WatchTimeSeriesRequest) GetSnapshotIntervalToFetch() *durationpb.Duration {
	if m != nil {
		return m.SnapshotIntervalToFetch
	}
	return nil
}

func (m *WatchTimeSeriesRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchTimeSeriesRequest) SetParent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *WatchTimeSeriesRequest) SetFilter(fv *time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchTimeSeriesRequest"))
	}
	m.Filter = fv
}

func (m *WatchTimeSeriesRequest) SetAggregation(fv *common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "WatchTimeSeriesRequest"))
	}
	m.Aggregation = fv
}

func (m *WatchTimeSeriesRequest) SetSnapshotIntervalToFetch(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotIntervalToFetch", "WatchTimeSeriesRequest"))
	}
	m.SnapshotIntervalToFetch = fv
}

func (m *WatchTimeSeriesRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchTimeSeriesRequest"))
	}
	m.StartingTime = fv
}

type WatchTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	TimeSeries    []*time_serie.TimeSerie `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
}

func (m *WatchTimeSeriesResponse) Reset() {
	*m = WatchTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesResponse) ProtoMessage() {}

func (m *WatchTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{11}
}

func (m *WatchTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesResponse) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *WatchTimeSeriesResponse) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "WatchTimeSeriesResponse"))
	}
	m.TimeSeries = fv
}

// ErrorDetails is used when one of the queried regions fails to produce
// results. It is used in execution_errors field (see subfield
// ntt.rpc.Status.details).
type ListTimeSeriesResponse_ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// region id which failed to give results.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
}

func (m *ListTimeSeriesResponse_ErrorDetails) Reset() {
	*m = ListTimeSeriesResponse_ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesResponse_ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesResponse_ErrorDetails) ProtoMessage() {}

func (m *ListTimeSeriesResponse_ErrorDetails) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesResponse_ErrorDetails) GotenMessage() {}

// Deprecated, Use ListTimeSeriesResponse_ErrorDetails.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesResponse_ErrorDetails) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ListTimeSeriesResponse_ErrorDetails) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ListTimeSeriesResponse_ErrorDetails) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ListTimeSeriesResponse_ErrorDetails"))
	}
	m.RegionId = fv
}

type StatsQuery_CallLatencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                          `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                          `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                          `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	Reducer       StatsQuery_CallLatencies_Reducer  `protobuf:"varint,4,opt,name=reducer,proto3,enum=ntt.monitoring.v4.StatsQuery_CallLatencies_Reducer" json:"reducer,omitempty" firestore:"reducer"`
	GroupBy       []StatsQuery_CallLatencies_Groups `protobuf:"varint,5,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_CallLatencies_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_CallLatencies) Reset() {
	*m = StatsQuery_CallLatencies{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_CallLatencies) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_CallLatencies) ProtoMessage() {}

func (m *StatsQuery_CallLatencies) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_CallLatencies) GotenMessage() {}

// Deprecated, Use StatsQuery_CallLatencies.ProtoReflect.Descriptor instead.
func (*StatsQuery_CallLatencies) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 0}
}

func (m *StatsQuery_CallLatencies) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_CallLatencies) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_CallLatencies) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_CallLatencies) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_CallLatencies) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_CallLatencies) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_CallLatencies) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_CallLatencies) GetReducer() StatsQuery_CallLatencies_Reducer {
	if m != nil {
		return m.Reducer
	}
	return StatsQuery_CallLatencies_SUMMARY
}

func (m *StatsQuery_CallLatencies) GetGroupBy() []StatsQuery_CallLatencies_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_CallLatencies) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_CallLatencies"))
	}
	m.Methods = fv
}

func (m *StatsQuery_CallLatencies) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_CallLatencies"))
	}
	m.Versions = fv
}

func (m *StatsQuery_CallLatencies) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_CallLatencies"))
	}
	m.Resources = fv
}

func (m *StatsQuery_CallLatencies) SetReducer(fv StatsQuery_CallLatencies_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reducer", "StatsQuery_CallLatencies"))
	}
	m.Reducer = fv
}

func (m *StatsQuery_CallLatencies) SetGroupBy(fv []StatsQuery_CallLatencies_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_CallLatencies"))
	}
	m.GroupBy = fv
}

type StatsQuery_ExecutedCalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                          `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                          `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                          `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	GroupBy       []StatsQuery_ExecutedCalls_Groups `protobuf:"varint,4,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_ExecutedCalls_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_ExecutedCalls) Reset() {
	*m = StatsQuery_ExecutedCalls{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_ExecutedCalls) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_ExecutedCalls) ProtoMessage() {}

func (m *StatsQuery_ExecutedCalls) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_ExecutedCalls) GotenMessage() {}

// Deprecated, Use StatsQuery_ExecutedCalls.ProtoReflect.Descriptor instead.
func (*StatsQuery_ExecutedCalls) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 1}
}

func (m *StatsQuery_ExecutedCalls) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_ExecutedCalls) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_ExecutedCalls) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_ExecutedCalls) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_ExecutedCalls) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_ExecutedCalls) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_ExecutedCalls) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_ExecutedCalls) GetGroupBy() []StatsQuery_ExecutedCalls_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_ExecutedCalls) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_ExecutedCalls"))
	}
	m.Methods = fv
}

func (m *StatsQuery_ExecutedCalls) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_ExecutedCalls"))
	}
	m.Versions = fv
}

func (m *StatsQuery_ExecutedCalls) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_ExecutedCalls"))
	}
	m.Resources = fv
}

func (m *StatsQuery_ExecutedCalls) SetGroupBy(fv []StatsQuery_ExecutedCalls_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_ExecutedCalls"))
	}
	m.GroupBy = fv
}

type StatsQuery_OpenCalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                      `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                      `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                      `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	GroupBy       []StatsQuery_OpenCalls_Groups `protobuf:"varint,4,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_OpenCalls_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_OpenCalls) Reset() {
	*m = StatsQuery_OpenCalls{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_OpenCalls) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_OpenCalls) ProtoMessage() {}

func (m *StatsQuery_OpenCalls) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_OpenCalls) GotenMessage() {}

// Deprecated, Use StatsQuery_OpenCalls.ProtoReflect.Descriptor instead.
func (*StatsQuery_OpenCalls) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 2}
}

func (m *StatsQuery_OpenCalls) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_OpenCalls) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_OpenCalls) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_OpenCalls) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_OpenCalls) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_OpenCalls) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_OpenCalls) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_OpenCalls) GetGroupBy() []StatsQuery_OpenCalls_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_OpenCalls) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_OpenCalls"))
	}
	m.Methods = fv
}

func (m *StatsQuery_OpenCalls) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_OpenCalls"))
	}
	m.Versions = fv
}

func (m *StatsQuery_OpenCalls) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_OpenCalls"))
	}
	m.Resources = fv
}

func (m *StatsQuery_OpenCalls) SetGroupBy(fv []StatsQuery_OpenCalls_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_OpenCalls"))
	}
	m.GroupBy = fv
}

type StatsQuery_ErrorCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                        `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                        `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                        `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	ErrorCodes    []string                        `protobuf:"bytes,4,rep,name=error_codes,json=errorCodes,proto3" json:"error_codes,omitempty" firestore:"errorCodes"`
	GroupBy       []StatsQuery_ErrorCounts_Groups `protobuf:"varint,5,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_ErrorCounts_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_ErrorCounts) Reset() {
	*m = StatsQuery_ErrorCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_ErrorCounts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_ErrorCounts) ProtoMessage() {}

func (m *StatsQuery_ErrorCounts) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_ErrorCounts) GotenMessage() {}

// Deprecated, Use StatsQuery_ErrorCounts.ProtoReflect.Descriptor instead.
func (*StatsQuery_ErrorCounts) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 3}
}

func (m *StatsQuery_ErrorCounts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_ErrorCounts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_ErrorCounts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_ErrorCounts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_ErrorCounts) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_ErrorCounts) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_ErrorCounts) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_ErrorCounts) GetErrorCodes() []string {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

func (m *StatsQuery_ErrorCounts) GetGroupBy() []StatsQuery_ErrorCounts_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_ErrorCounts) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_ErrorCounts"))
	}
	m.Methods = fv
}

func (m *StatsQuery_ErrorCounts) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_ErrorCounts"))
	}
	m.Versions = fv
}

func (m *StatsQuery_ErrorCounts) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_ErrorCounts"))
	}
	m.Resources = fv
}

func (m *StatsQuery_ErrorCounts) SetErrorCodes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorCodes", "StatsQuery_ErrorCounts"))
	}
	m.ErrorCodes = fv
}

func (m *StatsQuery_ErrorCounts) SetGroupBy(fv []StatsQuery_ErrorCounts_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_ErrorCounts"))
	}
	m.GroupBy = fv
}

type StatsQuery_IngressThroughput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                              `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                              `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                              `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	GroupBy       []StatsQuery_IngressThroughput_Groups `protobuf:"varint,4,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_IngressThroughput_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_IngressThroughput) Reset() {
	*m = StatsQuery_IngressThroughput{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_IngressThroughput) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_IngressThroughput) ProtoMessage() {}

func (m *StatsQuery_IngressThroughput) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_IngressThroughput) GotenMessage() {}

// Deprecated, Use StatsQuery_IngressThroughput.ProtoReflect.Descriptor instead.
func (*StatsQuery_IngressThroughput) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 4}
}

func (m *StatsQuery_IngressThroughput) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_IngressThroughput) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_IngressThroughput) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_IngressThroughput) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_IngressThroughput) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_IngressThroughput) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_IngressThroughput) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_IngressThroughput) GetGroupBy() []StatsQuery_IngressThroughput_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_IngressThroughput) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_IngressThroughput"))
	}
	m.Methods = fv
}

func (m *StatsQuery_IngressThroughput) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_IngressThroughput"))
	}
	m.Versions = fv
}

func (m *StatsQuery_IngressThroughput) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_IngressThroughput"))
	}
	m.Resources = fv
}

func (m *StatsQuery_IngressThroughput) SetGroupBy(fv []StatsQuery_IngressThroughput_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_IngressThroughput"))
	}
	m.GroupBy = fv
}

type StatsQuery_EgressThroughput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                             `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                             `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                             `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	GroupBy       []StatsQuery_EgressThroughput_Groups `protobuf:"varint,4,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_EgressThroughput_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_EgressThroughput) Reset() {
	*m = StatsQuery_EgressThroughput{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_EgressThroughput) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_EgressThroughput) ProtoMessage() {}

func (m *StatsQuery_EgressThroughput) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_EgressThroughput) GotenMessage() {}

// Deprecated, Use StatsQuery_EgressThroughput.ProtoReflect.Descriptor instead.
func (*StatsQuery_EgressThroughput) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 5}
}

func (m *StatsQuery_EgressThroughput) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_EgressThroughput) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_EgressThroughput) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_EgressThroughput) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_EgressThroughput) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_EgressThroughput) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_EgressThroughput) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_EgressThroughput) GetGroupBy() []StatsQuery_EgressThroughput_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_EgressThroughput) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_EgressThroughput"))
	}
	m.Methods = fv
}

func (m *StatsQuery_EgressThroughput) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_EgressThroughput"))
	}
	m.Versions = fv
}

func (m *StatsQuery_EgressThroughput) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_EgressThroughput"))
	}
	m.Resources = fv
}

func (m *StatsQuery_EgressThroughput) SetGroupBy(fv []StatsQuery_EgressThroughput_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_EgressThroughput"))
	}
	m.GroupBy = fv
}

type StatsQuery_StoreOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Methods       []string                               `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                               `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Resources     []string                               `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	Operations    []StatsQuery_StoreOperations_Operation `protobuf:"varint,4,rep,packed,name=operations,proto3,enum=ntt.monitoring.v4.StatsQuery_StoreOperations_Operation" json:"operations,omitempty" firestore:"operations"`
	GroupBy       []StatsQuery_StoreOperations_Groups    `protobuf:"varint,5,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_StoreOperations_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_StoreOperations) Reset() {
	*m = StatsQuery_StoreOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_StoreOperations) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_StoreOperations) ProtoMessage() {}

func (m *StatsQuery_StoreOperations) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_StoreOperations) GotenMessage() {}

// Deprecated, Use StatsQuery_StoreOperations.ProtoReflect.Descriptor instead.
func (*StatsQuery_StoreOperations) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 6}
}

func (m *StatsQuery_StoreOperations) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_StoreOperations) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_StoreOperations) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_StoreOperations) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_StoreOperations) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_StoreOperations) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_StoreOperations) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_StoreOperations) GetOperations() []StatsQuery_StoreOperations_Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *StatsQuery_StoreOperations) GetGroupBy() []StatsQuery_StoreOperations_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_StoreOperations) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_StoreOperations"))
	}
	m.Methods = fv
}

func (m *StatsQuery_StoreOperations) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_StoreOperations"))
	}
	m.Versions = fv
}

func (m *StatsQuery_StoreOperations) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_StoreOperations"))
	}
	m.Resources = fv
}

func (m *StatsQuery_StoreOperations) SetOperations(fv []StatsQuery_StoreOperations_Operation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Operations", "StatsQuery_StoreOperations"))
	}
	m.Operations = fv
}

func (m *StatsQuery_StoreOperations) SetGroupBy(fv []StatsQuery_StoreOperations_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_StoreOperations"))
	}
	m.GroupBy = fv
}

type StatsQuery_ResourceCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Resources     []string `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
}

func (m *StatsQuery_ResourceCount) Reset() {
	*m = StatsQuery_ResourceCount{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_ResourceCount) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_ResourceCount) ProtoMessage() {}

func (m *StatsQuery_ResourceCount) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_ResourceCount) GotenMessage() {}

// Deprecated, Use StatsQuery_ResourceCount.ProtoReflect.Descriptor instead.
func (*StatsQuery_ResourceCount) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 7}
}

func (m *StatsQuery_ResourceCount) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_ResourceCount) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_ResourceCount) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_ResourceCount) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_ResourceCount) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StatsQuery_ResourceCount) SetResources(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "StatsQuery_ResourceCount"))
	}
	m.Resources = fv
}

type StatsQuery_Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          StatsQuery_Logs_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.monitoring.v4.StatsQuery_Logs_Type" json:"type,omitempty" firestore:"type"`
	LogTypes      []string                 `protobuf:"bytes,2,rep,name=log_types,json=logTypes,proto3" json:"log_types,omitempty" firestore:"logTypes"`
	GroupBy       []StatsQuery_Logs_Groups `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_Logs_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_Logs) Reset() {
	*m = StatsQuery_Logs{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_Logs) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_Logs) ProtoMessage() {}

func (m *StatsQuery_Logs) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_Logs) GotenMessage() {}

// Deprecated, Use StatsQuery_Logs.ProtoReflect.Descriptor instead.
func (*StatsQuery_Logs) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 8}
}

func (m *StatsQuery_Logs) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_Logs) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_Logs) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_Logs) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_Logs) GetType() StatsQuery_Logs_Type {
	if m != nil {
		return m.Type
	}
	return StatsQuery_Logs_UNDEFINED
}

func (m *StatsQuery_Logs) GetLogTypes() []string {
	if m != nil {
		return m.LogTypes
	}
	return nil
}

func (m *StatsQuery_Logs) GetGroupBy() []StatsQuery_Logs_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_Logs) SetType(fv StatsQuery_Logs_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "StatsQuery_Logs"))
	}
	m.Type = fv
}

func (m *StatsQuery_Logs) SetLogTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogTypes", "StatsQuery_Logs"))
	}
	m.LogTypes = fv
}

func (m *StatsQuery_Logs) SetGroupBy(fv []StatsQuery_Logs_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_Logs"))
	}
	m.GroupBy = fv
}

type StatsQuery_ActivityLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          StatsQuery_ActivityLogs_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.monitoring.v4.StatsQuery_ActivityLogs_Type" json:"type,omitempty" firestore:"type"`
	Methods       []string                         `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty" firestore:"methods"`
	Versions      []string                         `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	Categories    []string                         `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty" firestore:"categories"`
	GroupBy       []StatsQuery_ActivityLogs_Groups `protobuf:"varint,5,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_ActivityLogs_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_ActivityLogs) Reset() {
	*m = StatsQuery_ActivityLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_ActivityLogs) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_ActivityLogs) ProtoMessage() {}

func (m *StatsQuery_ActivityLogs) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_ActivityLogs) GotenMessage() {}

// Deprecated, Use StatsQuery_ActivityLogs.ProtoReflect.Descriptor instead.
func (*StatsQuery_ActivityLogs) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 9}
}

func (m *StatsQuery_ActivityLogs) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_ActivityLogs) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_ActivityLogs) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_ActivityLogs) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_ActivityLogs) GetType() StatsQuery_ActivityLogs_Type {
	if m != nil {
		return m.Type
	}
	return StatsQuery_ActivityLogs_UNDEFINED
}

func (m *StatsQuery_ActivityLogs) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *StatsQuery_ActivityLogs) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *StatsQuery_ActivityLogs) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *StatsQuery_ActivityLogs) GetGroupBy() []StatsQuery_ActivityLogs_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_ActivityLogs) SetType(fv StatsQuery_ActivityLogs_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "StatsQuery_ActivityLogs"))
	}
	m.Type = fv
}

func (m *StatsQuery_ActivityLogs) SetMethods(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Methods", "StatsQuery_ActivityLogs"))
	}
	m.Methods = fv
}

func (m *StatsQuery_ActivityLogs) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "StatsQuery_ActivityLogs"))
	}
	m.Versions = fv
}

func (m *StatsQuery_ActivityLogs) SetCategories(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Categories", "StatsQuery_ActivityLogs"))
	}
	m.Categories = fv
}

func (m *StatsQuery_ActivityLogs) SetGroupBy(fv []StatsQuery_ActivityLogs_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_ActivityLogs"))
	}
	m.GroupBy = fv
}

type StatsQuery_ResourceChangeLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          StatsQuery_ResourceChangeLogs_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.monitoring.v4.StatsQuery_ResourceChangeLogs_Type" json:"type,omitempty" firestore:"type"`
	ResourceTypes []string                               `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	GroupBy       []StatsQuery_ResourceChangeLogs_Groups `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_ResourceChangeLogs_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_ResourceChangeLogs) Reset() {
	*m = StatsQuery_ResourceChangeLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_ResourceChangeLogs) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_ResourceChangeLogs) ProtoMessage() {}

func (m *StatsQuery_ResourceChangeLogs) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_ResourceChangeLogs) GotenMessage() {}

// Deprecated, Use StatsQuery_ResourceChangeLogs.ProtoReflect.Descriptor instead.
func (*StatsQuery_ResourceChangeLogs) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 10}
}

func (m *StatsQuery_ResourceChangeLogs) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_ResourceChangeLogs) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_ResourceChangeLogs) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_ResourceChangeLogs) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_ResourceChangeLogs) GetType() StatsQuery_ResourceChangeLogs_Type {
	if m != nil {
		return m.Type
	}
	return StatsQuery_ResourceChangeLogs_UNDEFINED
}

func (m *StatsQuery_ResourceChangeLogs) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *StatsQuery_ResourceChangeLogs) GetGroupBy() []StatsQuery_ResourceChangeLogs_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_ResourceChangeLogs) SetType(fv StatsQuery_ResourceChangeLogs_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "StatsQuery_ResourceChangeLogs"))
	}
	m.Type = fv
}

func (m *StatsQuery_ResourceChangeLogs) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "StatsQuery_ResourceChangeLogs"))
	}
	m.ResourceTypes = fv
}

func (m *StatsQuery_ResourceChangeLogs) SetGroupBy(fv []StatsQuery_ResourceChangeLogs_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_ResourceChangeLogs"))
	}
	m.GroupBy = fv
}

type StatsQuery_TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          StatsQuery_TimeSeries_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.monitoring.v4.StatsQuery_TimeSeries_Type" json:"type,omitempty" firestore:"type"`
	ResourceTypes []string                       `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	MetricTypes   []string                       `protobuf:"bytes,3,rep,name=metric_types,json=metricTypes,proto3" json:"metric_types,omitempty" firestore:"metricTypes"`
	GroupBy       []StatsQuery_TimeSeries_Groups `protobuf:"varint,4,rep,packed,name=group_by,json=groupBy,proto3,enum=ntt.monitoring.v4.StatsQuery_TimeSeries_Groups" json:"group_by,omitempty" firestore:"groupBy"`
}

func (m *StatsQuery_TimeSeries) Reset() {
	*m = StatsQuery_TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_TimeSeries) ProtoMessage() {}

func (m *StatsQuery_TimeSeries) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_TimeSeries) GotenMessage() {}

// Deprecated, Use StatsQuery_TimeSeries.ProtoReflect.Descriptor instead.
func (*StatsQuery_TimeSeries) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 11}
}

func (m *StatsQuery_TimeSeries) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_TimeSeries) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_TimeSeries) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_TimeSeries) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_TimeSeries) GetType() StatsQuery_TimeSeries_Type {
	if m != nil {
		return m.Type
	}
	return StatsQuery_TimeSeries_UNDEFINED
}

func (m *StatsQuery_TimeSeries) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *StatsQuery_TimeSeries) GetMetricTypes() []string {
	if m != nil {
		return m.MetricTypes
	}
	return nil
}

func (m *StatsQuery_TimeSeries) GetGroupBy() []StatsQuery_TimeSeries_Groups {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *StatsQuery_TimeSeries) SetType(fv StatsQuery_TimeSeries_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "StatsQuery_TimeSeries"))
	}
	m.Type = fv
}

func (m *StatsQuery_TimeSeries) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "StatsQuery_TimeSeries"))
	}
	m.ResourceTypes = fv
}

func (m *StatsQuery_TimeSeries) SetMetricTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricTypes", "StatsQuery_TimeSeries"))
	}
	m.MetricTypes = fv
}

func (m *StatsQuery_TimeSeries) SetGroupBy(fv []StatsQuery_TimeSeries_Groups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupBy", "StatsQuery_TimeSeries"))
	}
	m.GroupBy = fv
}

type StatsQuery_TimeSeriesLatencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	OfAp          *durationpb.Duration                   `protobuf:"bytes,1,opt,name=of_ap,json=ofAp,proto3" json:"of_ap,omitempty" firestore:"ofAp"`
	Reducer       StatsQuery_TimeSeriesLatencies_Reducer `protobuf:"varint,2,opt,name=reducer,proto3,enum=ntt.monitoring.v4.StatsQuery_TimeSeriesLatencies_Reducer" json:"reducer,omitempty" firestore:"reducer"`
}

func (m *StatsQuery_TimeSeriesLatencies) Reset() {
	*m = StatsQuery_TimeSeriesLatencies{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StatsQuery_TimeSeriesLatencies) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StatsQuery_TimeSeriesLatencies) ProtoMessage() {}

func (m *StatsQuery_TimeSeriesLatencies) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StatsQuery_TimeSeriesLatencies) GotenMessage() {}

// Deprecated, Use StatsQuery_TimeSeriesLatencies.ProtoReflect.Descriptor instead.
func (*StatsQuery_TimeSeriesLatencies) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{5, 12}
}

func (m *StatsQuery_TimeSeriesLatencies) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StatsQuery_TimeSeriesLatencies) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StatsQuery_TimeSeriesLatencies) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StatsQuery_TimeSeriesLatencies) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StatsQuery_TimeSeriesLatencies) GetOfAp() *durationpb.Duration {
	if m != nil {
		return m.OfAp
	}
	return nil
}

func (m *StatsQuery_TimeSeriesLatencies) GetReducer() StatsQuery_TimeSeriesLatencies_Reducer {
	if m != nil {
		return m.Reducer
	}
	return StatsQuery_TimeSeriesLatencies_SUMMARY
}

func (m *StatsQuery_TimeSeriesLatencies) SetOfAp(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OfAp", "StatsQuery_TimeSeriesLatencies"))
	}
	m.OfAp = fv
}

func (m *StatsQuery_TimeSeriesLatencies) SetReducer(fv StatsQuery_TimeSeriesLatencies_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reducer", "StatsQuery_TimeSeriesLatencies"))
	}
	m.Reducer = fv
}

// ErrorDetails is used when one of the queried regions fails to produce
// results. It is used in execution_errors field (see subfield
// ntt.rpc.Status.details).
type QueryProjectTimeSeriesStatsResponse_ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// region id which failed to give results.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) Reset() {
	*m = QueryProjectTimeSeriesStatsResponse_ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QueryProjectTimeSeriesStatsResponse_ErrorDetails) ProtoMessage() {}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QueryProjectTimeSeriesStatsResponse_ErrorDetails) GotenMessage() {}

// Deprecated, Use QueryProjectTimeSeriesStatsResponse_ErrorDetails.ProtoReflect.Descriptor instead.
func (*QueryProjectTimeSeriesStatsResponse_ErrorDetails) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{7, 0}
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *QueryProjectTimeSeriesStatsResponse_ErrorDetails) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "QueryProjectTimeSeriesStatsResponse_ErrorDetails"))
	}
	m.RegionId = fv
}

// ErrorDetails is used when one of the queried regions fails to produce
// results. It is used in execution_errors field (see subfield
// ntt.rpc.Status.details).
type QueryServiceTimeSeriesStatsResponse_ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// region id which failed to give results.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) Reset() {
	*m = QueryServiceTimeSeriesStatsResponse_ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QueryServiceTimeSeriesStatsResponse_ErrorDetails) ProtoMessage() {}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QueryServiceTimeSeriesStatsResponse_ErrorDetails) GotenMessage() {}

// Deprecated, Use QueryServiceTimeSeriesStatsResponse_ErrorDetails.ProtoReflect.Descriptor instead.
func (*QueryServiceTimeSeriesStatsResponse_ErrorDetails) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP(), []int{9, 0}
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *QueryServiceTimeSeriesStatsResponse_ErrorDetails) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "QueryServiceTimeSeriesStatsResponse_ErrorDetails"))
	}
	m.RegionId = fv
}

var edgelq_monitoring_proto_v4_time_serie_custom_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d,
	0x1a, 0x0b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x12, 0x08, 0x1a, 0x04,
	0x08, 0xa0, 0x8d, 0x06, 0x2a, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x61,
	0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xbf, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x2b, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x56, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x25, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x4e, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x60, 0x0a, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x5d, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x12, 0x50, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a,
	0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x11,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x93, 0x03,
	0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x22, 0x34, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x22, 0x5a, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x35, 0x30, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x39,
	0x35, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x39, 0x39, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x45, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x10, 0x07, 0x1a, 0xe8, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x34, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x1a, 0xe0,
	0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x34, 0x0a, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x02, 0x1a, 0x98, 0x02, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x22, 0x47, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x1a, 0xf0, 0x01, 0x0a,
	0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x34, 0x0a, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x1a,
	0xee, 0x01, 0x0a, 0x10, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x34, 0x0a, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02,
	0x1a, 0xd0, 0x03, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0xca, 0xc6, 0x27, 0x0c, 0x42, 0x0a, 0x0a, 0x02, 0x08,
	0x01, 0x22, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x22, 0x43, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x68, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x07, 0x1a, 0x2d, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x1a, 0xf6, 0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x22, 0x2c, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x10, 0x02, 0x1a, 0xe0, 0x02, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22,
	0x2f, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x02,
	0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x53,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x10, 0x02, 0x1a, 0xaf,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x3a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x1b, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x10, 0x02,
	0x1a, 0xe2, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x22, 0x2c, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x22, 0x43, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x53,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x57, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x53, 0x10, 0x03, 0x1a, 0xf6, 0x01, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x05, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6f, 0x66, 0x41, 0x70, 0x12, 0x53, 0x0a,
	0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x22, 0x5a, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x35, 0x30, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x39, 0x35, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x39, 0x39, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x4e, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x10, 0x07, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x22, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x2a, 0x02, 0x68, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x2a, 0x02, 0x68, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x61,
	0x70, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6, 0x27,
	0x0a, 0x12, 0x08, 0x1a, 0x04, 0x08, 0xa0, 0x8d, 0x06, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0xf5, 0x01, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x2b,
	0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xac, 0x03, 0x0a, 0x22,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x1a, 0x0a, 0x18, 0x0a, 0x16, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x09,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x2a, 0x02, 0x68, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x61, 0x70, 0x12, 0x45,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x12, 0x08,
	0x1a, 0x04, 0x08, 0xa0, 0x8d, 0x06, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62,
	0x02, 0x08, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xf5, 0x01, 0x0a, 0x23, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x2b, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x1a, 0x0b, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x1a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x54, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x17, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x84, 0x01, 0xe8, 0xde, 0x21, 0x00, 0x0a, 0x18, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x34, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescData = edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDesc
)

func edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDescData
}

var edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var edgelq_monitoring_proto_v4_time_serie_custom_proto_goTypes = []interface{}{
	(StatsQuery_CallLatencies_Groups)(0),        // 0: ntt.monitoring.v4.StatsQuery_CallLatencies_Groups
	(StatsQuery_CallLatencies_Reducer)(0),       // 1: ntt.monitoring.v4.StatsQuery_CallLatencies_Reducer
	(StatsQuery_ExecutedCalls_Groups)(0),        // 2: ntt.monitoring.v4.StatsQuery_ExecutedCalls_Groups
	(StatsQuery_OpenCalls_Groups)(0),            // 3: ntt.monitoring.v4.StatsQuery_OpenCalls_Groups
	(StatsQuery_ErrorCounts_Groups)(0),          // 4: ntt.monitoring.v4.StatsQuery_ErrorCounts_Groups
	(StatsQuery_IngressThroughput_Groups)(0),    // 5: ntt.monitoring.v4.StatsQuery_IngressThroughput_Groups
	(StatsQuery_EgressThroughput_Groups)(0),     // 6: ntt.monitoring.v4.StatsQuery_EgressThroughput_Groups
	(StatsQuery_StoreOperations_Groups)(0),      // 7: ntt.monitoring.v4.StatsQuery_StoreOperations_Groups
	(StatsQuery_StoreOperations_Operation)(0),   // 8: ntt.monitoring.v4.StatsQuery_StoreOperations_Operation
	(StatsQuery_Logs_Groups)(0),                 // 9: ntt.monitoring.v4.StatsQuery_Logs_Groups
	(StatsQuery_Logs_Type)(0),                   // 10: ntt.monitoring.v4.StatsQuery_Logs_Type
	(StatsQuery_ActivityLogs_Groups)(0),         // 11: ntt.monitoring.v4.StatsQuery_ActivityLogs_Groups
	(StatsQuery_ActivityLogs_Type)(0),           // 12: ntt.monitoring.v4.StatsQuery_ActivityLogs_Type
	(StatsQuery_ResourceChangeLogs_Groups)(0),   // 13: ntt.monitoring.v4.StatsQuery_ResourceChangeLogs_Groups
	(StatsQuery_ResourceChangeLogs_Type)(0),     // 14: ntt.monitoring.v4.StatsQuery_ResourceChangeLogs_Type
	(StatsQuery_TimeSeries_Groups)(0),           // 15: ntt.monitoring.v4.StatsQuery_TimeSeries_Groups
	(StatsQuery_TimeSeries_Type)(0),             // 16: ntt.monitoring.v4.StatsQuery_TimeSeries_Type
	(StatsQuery_TimeSeriesLatencies_Reducer)(0), // 17: ntt.monitoring.v4.StatsQuery_TimeSeriesLatencies_Reducer
	(*ListTimeSeriesRequest)(nil),               // 18: ntt.monitoring.v4.ListTimeSeriesRequest
	(*ListTimeSeriesResponse)(nil),              // 19: ntt.monitoring.v4.ListTimeSeriesResponse
	(*CreateTimeSeriesRequest)(nil),             // 20: ntt.monitoring.v4.CreateTimeSeriesRequest
	(*CreateTimeSeriesResponse)(nil),            // 21: ntt.monitoring.v4.CreateTimeSeriesResponse
	(*CreateTimeSeriesError)(nil),               // 22: ntt.monitoring.v4.CreateTimeSeriesError
	(*StatsQuery)(nil),                          // 23: ntt.monitoring.v4.StatsQuery
	(*QueryProjectTimeSeriesStatsRequest)(nil),  // 24: ntt.monitoring.v4.QueryProjectTimeSeriesStatsRequest
	(*QueryProjectTimeSeriesStatsResponse)(nil), // 25: ntt.monitoring.v4.QueryProjectTimeSeriesStatsResponse
	(*QueryServiceTimeSeriesStatsRequest)(nil),  // 26: ntt.monitoring.v4.QueryServiceTimeSeriesStatsRequest
	(*QueryServiceTimeSeriesStatsResponse)(nil), // 27: ntt.monitoring.v4.QueryServiceTimeSeriesStatsResponse
	(*WatchTimeSeriesRequest)(nil),              // 28: ntt.monitoring.v4.WatchTimeSeriesRequest
	(*WatchTimeSeriesResponse)(nil),             // 29: ntt.monitoring.v4.WatchTimeSeriesResponse
	(*ListTimeSeriesResponse_ErrorDetails)(nil), // 30: ntt.monitoring.v4.ListTimeSeriesResponse.ErrorDetails
	nil,                                                      // 31: ntt.monitoring.v4.CreateTimeSeriesResponse.TimeSerieKeysEntry
	(*StatsQuery_CallLatencies)(nil),                         // 32: ntt.monitoring.v4.StatsQuery.CallLatencies
	(*StatsQuery_ExecutedCalls)(nil),                         // 33: ntt.monitoring.v4.StatsQuery.ExecutedCalls
	(*StatsQuery_OpenCalls)(nil),                             // 34: ntt.monitoring.v4.StatsQuery.OpenCalls
	(*StatsQuery_ErrorCounts)(nil),                           // 35: ntt.monitoring.v4.StatsQuery.ErrorCounts
	(*StatsQuery_IngressThroughput)(nil),                     // 36: ntt.monitoring.v4.StatsQuery.IngressThroughput
	(*StatsQuery_EgressThroughput)(nil),                      // 37: ntt.monitoring.v4.StatsQuery.EgressThroughput
	(*StatsQuery_StoreOperations)(nil),                       // 38: ntt.monitoring.v4.StatsQuery.StoreOperations
	(*StatsQuery_ResourceCount)(nil),                         // 39: ntt.monitoring.v4.StatsQuery.ResourceCount
	(*StatsQuery_Logs)(nil),                                  // 40: ntt.monitoring.v4.StatsQuery.Logs
	(*StatsQuery_ActivityLogs)(nil),                          // 41: ntt.monitoring.v4.StatsQuery.ActivityLogs
	(*StatsQuery_ResourceChangeLogs)(nil),                    // 42: ntt.monitoring.v4.StatsQuery.ResourceChangeLogs
	(*StatsQuery_TimeSeries)(nil),                            // 43: ntt.monitoring.v4.StatsQuery.TimeSeries
	(*StatsQuery_TimeSeriesLatencies)(nil),                   // 44: ntt.monitoring.v4.StatsQuery.TimeSeriesLatencies
	(*QueryProjectTimeSeriesStatsResponse_ErrorDetails)(nil), // 45: ntt.monitoring.v4.QueryProjectTimeSeriesStatsResponse.ErrorDetails
	(*QueryServiceTimeSeriesStatsResponse_ErrorDetails)(nil), // 46: ntt.monitoring.v4.QueryServiceTimeSeriesStatsResponse.ErrorDetails
	(*common.TimeInterval)(nil),                              // 47: ntt.monitoring.v4.TimeInterval
	(*common.Aggregation)(nil),                               // 48: ntt.monitoring.v4.Aggregation
	(*common.Pagination)(nil),                                // 49: ntt.monitoring.v4.Pagination
	(common.TimeSeriesView)(0),                               // 50: ntt.monitoring.v4.TimeSeriesView
	(*time_serie.TimeSerie_FieldMask)(nil),                   // 51: ntt.monitoring.v4.TimeSerie_FieldMask
	(*time_serie.TimeSerie)(nil),                             // 52: ntt.monitoring.v4.TimeSerie
	(*rpc.Status)(nil),                                       // 53: ntt.rpc.Status
	(*durationpb.Duration)(nil),                              // 54: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                            // 55: google.protobuf.Timestamp
}
var edgelq_monitoring_proto_v4_time_serie_custom_proto_depIdxs = []int32{
	47, // 0: ntt.monitoring.v4.ListTimeSeriesRequest.interval:type_name -> ntt.monitoring.v4.TimeInterval
	48, // 1: ntt.monitoring.v4.ListTimeSeriesRequest.aggregation:type_name -> ntt.monitoring.v4.Aggregation
	49, // 2: ntt.monitoring.v4.ListTimeSeriesRequest.pagination:type_name -> ntt.monitoring.v4.Pagination
	50, // 3: ntt.monitoring.v4.ListTimeSeriesRequest.view:type_name -> ntt.monitoring.v4.TimeSeriesView
	51, // 4: ntt.monitoring.v4.ListTimeSeriesRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSerie_FieldMask
	52, // 5: ntt.monitoring.v4.ListTimeSeriesResponse.time_series:type_name -> ntt.monitoring.v4.TimeSerie
	53, // 6: ntt.monitoring.v4.ListTimeSeriesResponse.execution_errors:type_name -> ntt.rpc.Status
	52, // 7: ntt.monitoring.v4.ListTimeSeriesResponse.total_point_counters:type_name -> ntt.monitoring.v4.TimeSerie
	52, // 8: ntt.monitoring.v4.CreateTimeSeriesRequest.time_series:type_name -> ntt.monitoring.v4.TimeSerie
	31, // 9: ntt.monitoring.v4.CreateTimeSeriesResponse.time_serie_keys:type_name -> ntt.monitoring.v4.CreateTimeSeriesResponse.TimeSerieKeysEntry
	22, // 10: ntt.monitoring.v4.CreateTimeSeriesResponse.failed_time_series:type_name -> ntt.monitoring.v4.CreateTimeSeriesError
	52, // 11: ntt.monitoring.v4.CreateTimeSeriesError.time_series:type_name -> ntt.monitoring.v4.TimeSerie
	53, // 12: ntt.monitoring.v4.CreateTimeSeriesError.status:type_name -> ntt.rpc.Status
	32, // 13: ntt.monitoring.v4.StatsQuery.call_latencies:type_name -> ntt.monitoring.v4.StatsQuery.CallLatencies
	33, // 14: ntt.monitoring.v4.StatsQuery.executed_calls:type_name -> ntt.monitoring.v4.StatsQuery.ExecutedCalls
	34, // 15: ntt.monitoring.v4.StatsQuery.open_calls:type_name -> ntt.monitoring.v4.StatsQuery.OpenCalls
	35, // 16: ntt.monitoring.v4.StatsQuery.error_counts:type_name -> ntt.monitoring.v4.StatsQuery.ErrorCounts
	36, // 17: ntt.monitoring.v4.StatsQuery.ingress_throughput:type_name -> ntt.monitoring.v4.StatsQuery.IngressThroughput
	37, // 18: ntt.monitoring.v4.StatsQuery.egress_throughput:type_name -> ntt.monitoring.v4.StatsQuery.EgressThroughput
	38, // 19: ntt.monitoring.v4.StatsQuery.store_usage:type_name -> ntt.monitoring.v4.StatsQuery.StoreOperations
	39, // 20: ntt.monitoring.v4.StatsQuery.resource_count:type_name -> ntt.monitoring.v4.StatsQuery.ResourceCount
	40, // 21: ntt.monitoring.v4.StatsQuery.logs_usage:type_name -> ntt.monitoring.v4.StatsQuery.Logs
	41, // 22: ntt.monitoring.v4.StatsQuery.activity_logs_usage:type_name -> ntt.monitoring.v4.StatsQuery.ActivityLogs
	42, // 23: ntt.monitoring.v4.StatsQuery.resource_change_logs_usage:type_name -> ntt.monitoring.v4.StatsQuery.ResourceChangeLogs
	43, // 24: ntt.monitoring.v4.StatsQuery.time_series_usage:type_name -> ntt.monitoring.v4.StatsQuery.TimeSeries
	44, // 25: ntt.monitoring.v4.StatsQuery.time_series_latencies:type_name -> ntt.monitoring.v4.StatsQuery.TimeSeriesLatencies
	54, // 26: ntt.monitoring.v4.QueryProjectTimeSeriesStatsRequest.ap:type_name -> google.protobuf.Duration
	47, // 27: ntt.monitoring.v4.QueryProjectTimeSeriesStatsRequest.interval:type_name -> ntt.monitoring.v4.TimeInterval
	23, // 28: ntt.monitoring.v4.QueryProjectTimeSeriesStatsRequest.query:type_name -> ntt.monitoring.v4.StatsQuery
	52, // 29: ntt.monitoring.v4.QueryProjectTimeSeriesStatsResponse.time_series:type_name -> ntt.monitoring.v4.TimeSerie
	53, // 30: ntt.monitoring.v4.QueryProjectTimeSeriesStatsResponse.execution_errors:type_name -> ntt.rpc.Status
	54, // 31: ntt.monitoring.v4.QueryServiceTimeSeriesStatsRequest.ap:type_name -> google.protobuf.Duration
	47, // 32: ntt.monitoring.v4.QueryServiceTimeSeriesStatsRequest.interval:type_name -> ntt.monitoring.v4.TimeInterval
	23, // 33: ntt.monitoring.v4.QueryServiceTimeSeriesStatsRequest.query:type_name -> ntt.monitoring.v4.StatsQuery
	52, // 34: ntt.monitoring.v4.QueryServiceTimeSeriesStatsResponse.time_series:type_name -> ntt.monitoring.v4.TimeSerie
	53, // 35: ntt.monitoring.v4.QueryServiceTimeSeriesStatsResponse.execution_errors:type_name -> ntt.rpc.Status
	48, // 36: ntt.monitoring.v4.WatchTimeSeriesRequest.aggregation:type_name -> ntt.monitoring.v4.Aggregation
	54, // 37: ntt.monitoring.v4.WatchTimeSeriesRequest.snapshot_interval_to_fetch:type_name -> google.protobuf.Duration
	55, // 38: ntt.monitoring.v4.WatchTimeSeriesRequest.starting_time:type_name -> google.protobuf.Timestamp
	52, // 39: ntt.monitoring.v4.WatchTimeSeriesResponse.time_series:type_name -> ntt.monitoring.v4.TimeSerie
	1,  // 40: ntt.monitoring.v4.StatsQuery.CallLatencies.reducer:type_name -> ntt.monitoring.v4.StatsQuery_CallLatencies_Reducer
	0,  // 41: ntt.monitoring.v4.StatsQuery.CallLatencies.group_by:type_name -> ntt.monitoring.v4.StatsQuery_CallLatencies_Groups
	2,  // 42: ntt.monitoring.v4.StatsQuery.ExecutedCalls.group_by:type_name -> ntt.monitoring.v4.StatsQuery_ExecutedCalls_Groups
	3,  // 43: ntt.monitoring.v4.StatsQuery.OpenCalls.group_by:type_name -> ntt.monitoring.v4.StatsQuery_OpenCalls_Groups
	4,  // 44: ntt.monitoring.v4.StatsQuery.ErrorCounts.group_by:type_name -> ntt.monitoring.v4.StatsQuery_ErrorCounts_Groups
	5,  // 45: ntt.monitoring.v4.StatsQuery.IngressThroughput.group_by:type_name -> ntt.monitoring.v4.StatsQuery_IngressThroughput_Groups
	6,  // 46: ntt.monitoring.v4.StatsQuery.EgressThroughput.group_by:type_name -> ntt.monitoring.v4.StatsQuery_EgressThroughput_Groups
	8,  // 47: ntt.monitoring.v4.StatsQuery.StoreOperations.operations:type_name -> ntt.monitoring.v4.StatsQuery_StoreOperations_Operation
	7,  // 48: ntt.monitoring.v4.StatsQuery.StoreOperations.group_by:type_name -> ntt.monitoring.v4.StatsQuery_StoreOperations_Groups
	10, // 49: ntt.monitoring.v4.StatsQuery.Logs.type:type_name -> ntt.monitoring.v4.StatsQuery_Logs_Type
	9,  // 50: ntt.monitoring.v4.StatsQuery.Logs.group_by:type_name -> ntt.monitoring.v4.StatsQuery_Logs_Groups
	12, // 51: ntt.monitoring.v4.StatsQuery.ActivityLogs.type:type_name -> ntt.monitoring.v4.StatsQuery_ActivityLogs_Type
	11, // 52: ntt.monitoring.v4.StatsQuery.ActivityLogs.group_by:type_name -> ntt.monitoring.v4.StatsQuery_ActivityLogs_Groups
	14, // 53: ntt.monitoring.v4.StatsQuery.ResourceChangeLogs.type:type_name -> ntt.monitoring.v4.StatsQuery_ResourceChangeLogs_Type
	13, // 54: ntt.monitoring.v4.StatsQuery.ResourceChangeLogs.group_by:type_name -> ntt.monitoring.v4.StatsQuery_ResourceChangeLogs_Groups
	16, // 55: ntt.monitoring.v4.StatsQuery.TimeSeries.type:type_name -> ntt.monitoring.v4.StatsQuery_TimeSeries_Type
	15, // 56: ntt.monitoring.v4.StatsQuery.TimeSeries.group_by:type_name -> ntt.monitoring.v4.StatsQuery_TimeSeries_Groups
	54, // 57: ntt.monitoring.v4.StatsQuery.TimeSeriesLatencies.of_ap:type_name -> google.protobuf.Duration
	17, // 58: ntt.monitoring.v4.StatsQuery.TimeSeriesLatencies.reducer:type_name -> ntt.monitoring.v4.StatsQuery_TimeSeriesLatencies_Reducer
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_time_serie_custom_proto_init() }
func edgelq_monitoring_proto_v4_time_serie_custom_proto_init() {
	if edgelq_monitoring_proto_v4_time_serie_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProjectTimeSeriesStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProjectTimeSeriesStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceTimeSeriesStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceTimeSeriesStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesResponse_ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_CallLatencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_ExecutedCalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_OpenCalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_ErrorCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_IngressThroughput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_EgressThroughput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_StoreOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_ResourceCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_Logs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_ActivityLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_ResourceChangeLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsQuery_TimeSeriesLatencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProjectTimeSeriesStatsResponse_ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceTimeSeriesStatsResponse_ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*StatsQuery_CallLatencies_)(nil),
		(*StatsQuery_ExecutedCalls_)(nil),
		(*StatsQuery_OpenCalls_)(nil),
		(*StatsQuery_ErrorCounts_)(nil),
		(*StatsQuery_IngressThroughput_)(nil),
		(*StatsQuery_EgressThroughput_)(nil),
		(*StatsQuery_StoreUsage)(nil),
		(*StatsQuery_ResourceCount_)(nil),
		(*StatsQuery_LogsUsage)(nil),
		(*StatsQuery_ActivityLogsUsage)(nil),
		(*StatsQuery_ResourceChangeLogsUsage)(nil),
		(*StatsQuery_TimeSeriesUsage)(nil),
		(*StatsQuery_TimeSeriesLatencies_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_time_serie_custom_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_time_serie_custom_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v4_time_serie_custom_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v4_time_serie_custom_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_time_serie_custom_proto = out.File
	edgelq_monitoring_proto_v4_time_serie_custom_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_time_serie_custom_proto_goTypes = nil
	edgelq_monitoring_proto_v4_time_serie_custom_proto_depIdxs = nil
}
