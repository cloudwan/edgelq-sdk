// Code generated by protoc-gen-goten-client
// API: TimeSeriesCollectionRuleService
// DO NOT EDIT!!!

package time_series_collection_rule_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	time_series_collection_rule "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_collection_rule"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &time_series_collection_rule.TimeSeriesCollectionRule{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized                      bool
	timeSeriesCollectionRuleServiceDescriptor   *TimeSeriesCollectionRuleServiceDescriptor
	getTimeSeriesCollectionRuleDescriptor       *GetTimeSeriesCollectionRuleDescriptor
	batchGetTimeSeriesCollectionRulesDescriptor *BatchGetTimeSeriesCollectionRulesDescriptor
	listTimeSeriesCollectionRulesDescriptor     *ListTimeSeriesCollectionRulesDescriptor
	watchTimeSeriesCollectionRuleDescriptor     *WatchTimeSeriesCollectionRuleDescriptor
	watchTimeSeriesCollectionRulesDescriptor    *WatchTimeSeriesCollectionRulesDescriptor
	createTimeSeriesCollectionRuleDescriptor    *CreateTimeSeriesCollectionRuleDescriptor
	updateTimeSeriesCollectionRuleDescriptor    *UpdateTimeSeriesCollectionRuleDescriptor
	deleteTimeSeriesCollectionRuleDescriptor    *DeleteTimeSeriesCollectionRuleDescriptor
)

type GetTimeSeriesCollectionRuleDescriptor struct{}

type GetTimeSeriesCollectionRuleDescriptorClientMsgHandle struct{}

type GetTimeSeriesCollectionRuleDescriptorServerMsgHandle struct{}

func (d *GetTimeSeriesCollectionRuleDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetTimeSeriesCollectionRuleRequest{}
}

func (d *GetTimeSeriesCollectionRuleDescriptor) NewEmptyServerMsg() proto.Message {
	return &time_series_collection_rule.TimeSeriesCollectionRule{}
}

func (d *GetTimeSeriesCollectionRuleDescriptor) IsUnary() bool {
	return true
}

func (d *GetTimeSeriesCollectionRuleDescriptor) IsClientStream() bool {
	return false
}

func (d *GetTimeSeriesCollectionRuleDescriptor) IsServerStream() bool {
	return false
}

func (d *GetTimeSeriesCollectionRuleDescriptor) IsCollection() bool {
	return false
}

func (d *GetTimeSeriesCollectionRuleDescriptor) IsPlural() bool {
	return false
}

func (d *GetTimeSeriesCollectionRuleDescriptor) HasResource() bool {
	return true
}

func (d *GetTimeSeriesCollectionRuleDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetVerb() string {
	return "get"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetMethodName() string {
	return "GetTimeSeriesCollectionRule"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/GetTimeSeriesCollectionRule"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTimeSeriesCollectionRuleDescriptorClientMsgHandle{}
}

func (d *GetTimeSeriesCollectionRuleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTimeSeriesCollectionRuleDescriptorServerMsgHandle{}
}

func (h *GetTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetTimeSeriesCollectionRuleRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *GetTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetTimeSeriesCollectionRuleRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetTimeSeriesCollectionRuleRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*time_series_collection_rule.TimeSeriesCollectionRule) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *GetTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*time_series_collection_rule.TimeSeriesCollectionRule) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*time_series_collection_rule.TimeSeriesCollectionRule) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
}

func (h *GetTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*time_series_collection_rule.TimeSeriesCollectionRule) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetTimeSeriesCollectionRuleDescriptor() *GetTimeSeriesCollectionRuleDescriptor {
	return getTimeSeriesCollectionRuleDescriptor
}

type BatchGetTimeSeriesCollectionRulesDescriptor struct{}

type BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle struct{}

type BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle struct{}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetTimeSeriesCollectionRulesRequest{}
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetTimeSeriesCollectionRulesResponse{}
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetMethodName() string {
	return "BatchGetTimeSeriesCollectionRules"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/BatchGetTimeSeriesCollectionRules"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle{}
}

func (d *BatchGetTimeSeriesCollectionRulesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle{}
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetTimeSeriesCollectionRulesRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetTimeSeriesCollectionRulesRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return time_series_collection_rule.TimeSeriesCollectionRuleNameList(names)
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleNameList)(nil)
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetTimeSeriesCollectionRulesRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetTimeSeriesCollectionRulesRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetTimeSeriesCollectionRulesRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetTimeSeriesCollectionRulesResponse) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetTimeSeriesCollectionRulesResponse) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetTimeSeriesCollectionRules(); len(resources) > 0 {
			list := make(time_series_collection_rule.TimeSeriesCollectionRuleNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleNameList)(nil)
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetTimeSeriesCollectionRulesResponse) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetTimeSeriesCollectionRulesResponse) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetTimeSeriesCollectionRulesResponse) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetTimeSeriesCollectionRules(); len(resources) > 0 {
			return time_series_collection_rule.TimeSeriesCollectionRuleList(resources)
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleList)(nil)
}

func GetBatchGetTimeSeriesCollectionRulesDescriptor() *BatchGetTimeSeriesCollectionRulesDescriptor {
	return batchGetTimeSeriesCollectionRulesDescriptor
}

type ListTimeSeriesCollectionRulesDescriptor struct{}

type ListTimeSeriesCollectionRulesDescriptorClientMsgHandle struct{}

type ListTimeSeriesCollectionRulesDescriptorServerMsgHandle struct{}

func (d *ListTimeSeriesCollectionRulesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListTimeSeriesCollectionRulesRequest{}
}

func (d *ListTimeSeriesCollectionRulesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListTimeSeriesCollectionRulesResponse{}
}

func (d *ListTimeSeriesCollectionRulesDescriptor) IsUnary() bool {
	return true
}

func (d *ListTimeSeriesCollectionRulesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListTimeSeriesCollectionRulesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListTimeSeriesCollectionRulesDescriptor) IsCollection() bool {
	return true
}

func (d *ListTimeSeriesCollectionRulesDescriptor) IsPlural() bool {
	return true
}

func (d *ListTimeSeriesCollectionRulesDescriptor) HasResource() bool {
	return true
}

func (d *ListTimeSeriesCollectionRulesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetMethodName() string {
	return "ListTimeSeriesCollectionRules"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/ListTimeSeriesCollectionRules"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTimeSeriesCollectionRulesDescriptorClientMsgHandle{}
}

func (d *ListTimeSeriesCollectionRulesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTimeSeriesCollectionRulesDescriptorServerMsgHandle{}
}

func (h *ListTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListTimeSeriesCollectionRulesRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListTimeSeriesCollectionRulesRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListTimeSeriesCollectionRulesRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*time_series_collection_rule.ParentName)(nil)
}

func (h *ListTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListTimeSeriesCollectionRulesRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListTimeSeriesCollectionRulesRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListTimeSeriesCollectionRulesResponse) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListTimeSeriesCollectionRulesResponse) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetTimeSeriesCollectionRules(); len(resources) > 0 {
			list := make(time_series_collection_rule.TimeSeriesCollectionRuleNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleNameList)(nil)
}

func (h *ListTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListTimeSeriesCollectionRulesResponse) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListTimeSeriesCollectionRulesResponse) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListTimeSeriesCollectionRulesResponse) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetTimeSeriesCollectionRules(); len(resources) > 0 {
			return time_series_collection_rule.TimeSeriesCollectionRuleList(resources)
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleList)(nil)
}

func GetListTimeSeriesCollectionRulesDescriptor() *ListTimeSeriesCollectionRulesDescriptor {
	return listTimeSeriesCollectionRulesDescriptor
}

type WatchTimeSeriesCollectionRuleDescriptor struct{}

type WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle struct{}

type WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle struct{}

func (d *WatchTimeSeriesCollectionRuleDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTimeSeriesCollectionRuleRequest{}
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTimeSeriesCollectionRuleResponse{}
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) IsCollection() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) IsPlural() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) HasResource() bool {
	return true
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetMethodName() string {
	return "WatchTimeSeriesCollectionRule"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/WatchTimeSeriesCollectionRule"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle{}
}

func (d *WatchTimeSeriesCollectionRuleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle{}
}

func (h *WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTimeSeriesCollectionRuleRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTimeSeriesCollectionRuleRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTimeSeriesCollectionRuleRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTimeSeriesCollectionRuleResponse) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Added_:
				return tResChange.Added.GetTimeSeriesCollectionRule().GetName()
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Modified_:
				return tResChange.Modified.GetName()
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Removed_:
				return tResChange.Removed.GetName()
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Current_:
				return tResChange.Current.GetTimeSeriesCollectionRule().GetName()
			}
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTimeSeriesCollectionRuleResponse) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTimeSeriesCollectionRuleResponse) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTimeSeriesCollectionRuleResponse) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Added_:
				return tResChange.Added.GetTimeSeriesCollectionRule()
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Modified_:
				return tResChange.Modified.GetTimeSeriesCollectionRule()
			case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Current_:
				return tResChange.Current.GetTimeSeriesCollectionRule()
			}
		}
	}
	return (*time_series_collection_rule.TimeSeriesCollectionRule)(nil)
}

func (h *WatchTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRuleResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTimeSeriesCollectionRuleResponse) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchTimeSeriesCollectionRuleDescriptor() *WatchTimeSeriesCollectionRuleDescriptor {
	return watchTimeSeriesCollectionRuleDescriptor
}

type WatchTimeSeriesCollectionRulesDescriptor struct{}

type WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle struct{}

type WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle struct{}

func (d *WatchTimeSeriesCollectionRulesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTimeSeriesCollectionRulesRequest{}
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTimeSeriesCollectionRulesResponse{}
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) HasResource() bool {
	return true
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetMethodName() string {
	return "WatchTimeSeriesCollectionRules"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/WatchTimeSeriesCollectionRules"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle{}
}

func (d *WatchTimeSeriesCollectionRulesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle{}
}

func (h *WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTimeSeriesCollectionRulesRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTimeSeriesCollectionRulesRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTimeSeriesCollectionRulesRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*time_series_collection_rule.ParentName)(nil)
}

func (h *WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTimeSeriesCollectionRulesRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTimeSeriesCollectionRulesRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchTimeSeriesCollectionRulesResponse) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchTimeSeriesCollectionRulesResponse) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetTimeSeriesCollectionRuleChanges(); len(resChanges) > 0 {
			list := make(time_series_collection_rule.TimeSeriesCollectionRuleNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Added_:
					list = append(list, tResChange.Added.GetTimeSeriesCollectionRule().GetName())
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Current_:
					list = append(list, tResChange.Current.GetTimeSeriesCollectionRule().GetName())
				}
			}
			return list
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleNameList)(nil)
}

func (h *WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchTimeSeriesCollectionRulesResponse) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchTimeSeriesCollectionRulesResponse) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchTimeSeriesCollectionRulesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchTimeSeriesCollectionRulesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchTimeSeriesCollectionRulesResponse) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetTimeSeriesCollectionRuleChanges(); len(resChanges) > 0 {
			list := make(time_series_collection_rule.TimeSeriesCollectionRuleList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Added_:
					list = append(list, tResChange.Added.GetTimeSeriesCollectionRule())
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Modified_:
					list = append(list, tResChange.Modified.GetTimeSeriesCollectionRule())
				case *time_series_collection_rule.TimeSeriesCollectionRuleChange_Current_:
					list = append(list, tResChange.Current.GetTimeSeriesCollectionRule())
				}
			}
			return list
		}
	}
	return (time_series_collection_rule.TimeSeriesCollectionRuleList)(nil)
}

func GetWatchTimeSeriesCollectionRulesDescriptor() *WatchTimeSeriesCollectionRulesDescriptor {
	return watchTimeSeriesCollectionRulesDescriptor
}

type CreateTimeSeriesCollectionRuleDescriptor struct{}

type CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle struct{}

type CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle struct{}

func (d *CreateTimeSeriesCollectionRuleDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateTimeSeriesCollectionRuleRequest{}
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) NewEmptyServerMsg() proto.Message {
	return &time_series_collection_rule.TimeSeriesCollectionRule{}
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) IsUnary() bool {
	return true
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) IsCollection() bool {
	return true
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) IsPlural() bool {
	return false
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) HasResource() bool {
	return true
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetMethodName() string {
	return "CreateTimeSeriesCollectionRule"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/CreateTimeSeriesCollectionRule"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle{}
}

func (d *CreateTimeSeriesCollectionRuleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle{}
}

func (h *CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateTimeSeriesCollectionRuleRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetTimeSeriesCollectionRule()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateTimeSeriesCollectionRuleRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*time_series_collection_rule.ParentName)(nil)
}

func (h *CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateTimeSeriesCollectionRuleRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetTimeSeriesCollectionRule()
	}
	return (*time_series_collection_rule.TimeSeriesCollectionRule)(nil)
}

func (h *CreateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*time_series_collection_rule.TimeSeriesCollectionRule) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*time_series_collection_rule.TimeSeriesCollectionRule) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*time_series_collection_rule.TimeSeriesCollectionRule) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
}

func (h *CreateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*time_series_collection_rule.TimeSeriesCollectionRule) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateTimeSeriesCollectionRuleDescriptor() *CreateTimeSeriesCollectionRuleDescriptor {
	return createTimeSeriesCollectionRuleDescriptor
}

type UpdateTimeSeriesCollectionRuleDescriptor struct{}

type UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle struct{}

type UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle struct{}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateTimeSeriesCollectionRuleRequest{}
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) NewEmptyServerMsg() proto.Message {
	return &time_series_collection_rule.TimeSeriesCollectionRule{}
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) HasResource() bool {
	return true
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetMethodName() string {
	return "UpdateTimeSeriesCollectionRule"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/UpdateTimeSeriesCollectionRule"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle{}
}

func (d *UpdateTimeSeriesCollectionRuleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle{}
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateTimeSeriesCollectionRuleRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetTimeSeriesCollectionRule()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateTimeSeriesCollectionRuleRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateTimeSeriesCollectionRuleRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetTimeSeriesCollectionRule()
	}
	return (*time_series_collection_rule.TimeSeriesCollectionRule)(nil)
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*time_series_collection_rule.TimeSeriesCollectionRule) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*time_series_collection_rule.TimeSeriesCollectionRule) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*time_series_collection_rule.TimeSeriesCollectionRule) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
}

func (h *UpdateTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*time_series_collection_rule.TimeSeriesCollectionRule)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*time_series_collection_rule.TimeSeriesCollectionRule) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateTimeSeriesCollectionRuleDescriptor() *UpdateTimeSeriesCollectionRuleDescriptor {
	return updateTimeSeriesCollectionRuleDescriptor
}

type DeleteTimeSeriesCollectionRuleDescriptor struct{}

type DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle struct{}

type DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle struct{}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteTimeSeriesCollectionRuleRequest{}
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) HasResource() bool {
	return true
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetMethodName() string {
	return "DeleteTimeSeriesCollectionRule"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/DeleteTimeSeriesCollectionRule"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetServiceVersion() string {
	return "v4"
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return time_series_collection_rule.GetDescriptor()
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle{}
}

func (d *DeleteTimeSeriesCollectionRuleDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle{}
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteTimeSeriesCollectionRuleRequest) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*time_series_collection_rule.Name)(nil)
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteTimeSeriesCollectionRuleRequest) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteTimeSeriesCollectionRuleRequest) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteTimeSeriesCollectionRuleRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteTimeSeriesCollectionRuleRequest) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *time_series_collection_rule.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*time_series_collection_rule.Name
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *time_series_collection_rule.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteTimeSeriesCollectionRuleDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*time_series_collection_rule.TimeSeriesCollectionRule
	})
	if ok {
		return time_series_collection_rule.TimeSeriesCollectionRuleList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteTimeSeriesCollectionRuleDescriptor() *DeleteTimeSeriesCollectionRuleDescriptor {
	return deleteTimeSeriesCollectionRuleDescriptor
}

type TimeSeriesCollectionRuleServiceDescriptor struct{}

func (d *TimeSeriesCollectionRuleServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getTimeSeriesCollectionRuleDescriptor,
		batchGetTimeSeriesCollectionRulesDescriptor,
		listTimeSeriesCollectionRulesDescriptor,
		watchTimeSeriesCollectionRuleDescriptor,
		watchTimeSeriesCollectionRulesDescriptor,
		createTimeSeriesCollectionRuleDescriptor,
		updateTimeSeriesCollectionRuleDescriptor,
		deleteTimeSeriesCollectionRuleDescriptor,
	}
}

func (d *TimeSeriesCollectionRuleServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v4.TimeSeriesCollectionRuleService"
}

func (d *TimeSeriesCollectionRuleServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v4"
}

func (d *TimeSeriesCollectionRuleServiceDescriptor) GetApiName() string {
	return "TimeSeriesCollectionRuleService"
}

func (d *TimeSeriesCollectionRuleServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *TimeSeriesCollectionRuleServiceDescriptor) GetServiceVersion() string {
	return "v4"
}

func GetTimeSeriesCollectionRuleServiceDescriptor() *TimeSeriesCollectionRuleServiceDescriptor {
	return timeSeriesCollectionRuleServiceDescriptor
}

func initDescriptors() {
	timeSeriesCollectionRuleServiceDescriptor = &TimeSeriesCollectionRuleServiceDescriptor{}
	getTimeSeriesCollectionRuleDescriptor = &GetTimeSeriesCollectionRuleDescriptor{}
	batchGetTimeSeriesCollectionRulesDescriptor = &BatchGetTimeSeriesCollectionRulesDescriptor{}
	listTimeSeriesCollectionRulesDescriptor = &ListTimeSeriesCollectionRulesDescriptor{}
	watchTimeSeriesCollectionRuleDescriptor = &WatchTimeSeriesCollectionRuleDescriptor{}
	watchTimeSeriesCollectionRulesDescriptor = &WatchTimeSeriesCollectionRulesDescriptor{}
	createTimeSeriesCollectionRuleDescriptor = &CreateTimeSeriesCollectionRuleDescriptor{}
	updateTimeSeriesCollectionRuleDescriptor = &UpdateTimeSeriesCollectionRuleDescriptor{}
	deleteTimeSeriesCollectionRuleDescriptor = &DeleteTimeSeriesCollectionRuleDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(timeSeriesCollectionRuleServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getTimeSeriesCollectionRuleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetTimeSeriesCollectionRulesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listTimeSeriesCollectionRulesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTimeSeriesCollectionRuleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTimeSeriesCollectionRulesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createTimeSeriesCollectionRuleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateTimeSeriesCollectionRuleDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteTimeSeriesCollectionRuleDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
