// Code generated by protoc-gen-goten-client
// API: TimeSeriesCollectionRuleService
// DO NOT EDIT!!!

package time_series_collection_rule_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	time_series_collection_rule "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_collection_rule"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &time_series_collection_rule.TimeSeriesCollectionRule{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeSeriesCollectionRuleServiceClient is the client API for TimeSeriesCollectionRuleService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeSeriesCollectionRuleServiceClient interface {
	GetTimeSeriesCollectionRule(ctx context.Context, in *GetTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error)
	BatchGetTimeSeriesCollectionRules(ctx context.Context, in *BatchGetTimeSeriesCollectionRulesRequest, opts ...grpc.CallOption) (*BatchGetTimeSeriesCollectionRulesResponse, error)
	ListTimeSeriesCollectionRules(ctx context.Context, in *ListTimeSeriesCollectionRulesRequest, opts ...grpc.CallOption) (*ListTimeSeriesCollectionRulesResponse, error)
	WatchTimeSeriesCollectionRule(ctx context.Context, in *WatchTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (WatchTimeSeriesCollectionRuleClientStream, error)
	WatchTimeSeriesCollectionRules(ctx context.Context, in *WatchTimeSeriesCollectionRulesRequest, opts ...grpc.CallOption) (WatchTimeSeriesCollectionRulesClientStream, error)
	CreateTimeSeriesCollectionRule(ctx context.Context, in *CreateTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error)
	UpdateTimeSeriesCollectionRule(ctx context.Context, in *UpdateTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error)
	DeleteTimeSeriesCollectionRule(ctx context.Context, in *DeleteTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewTimeSeriesCollectionRuleServiceClient(cc grpc.ClientConnInterface) TimeSeriesCollectionRuleServiceClient {
	return &client{cc}
}

func (c *client) GetTimeSeriesCollectionRule(ctx context.Context, in *GetTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error) {
	out := new(time_series_collection_rule.TimeSeriesCollectionRule)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/GetTimeSeriesCollectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetTimeSeriesCollectionRules(ctx context.Context, in *BatchGetTimeSeriesCollectionRulesRequest, opts ...grpc.CallOption) (*BatchGetTimeSeriesCollectionRulesResponse, error) {
	out := new(BatchGetTimeSeriesCollectionRulesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/BatchGetTimeSeriesCollectionRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTimeSeriesCollectionRules(ctx context.Context, in *ListTimeSeriesCollectionRulesRequest, opts ...grpc.CallOption) (*ListTimeSeriesCollectionRulesResponse, error) {
	out := new(ListTimeSeriesCollectionRulesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/ListTimeSeriesCollectionRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchTimeSeriesCollectionRule(ctx context.Context, in *WatchTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (WatchTimeSeriesCollectionRuleClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTimeSeriesCollectionRule",
			ServerStreams: true,
		},
		"/ntt.monitoring.v4.TimeSeriesCollectionRuleService/WatchTimeSeriesCollectionRule", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTimeSeriesCollectionRuleWatchTimeSeriesCollectionRuleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTimeSeriesCollectionRuleClientStream interface {
	Recv() (*WatchTimeSeriesCollectionRuleResponse, error)
	grpc.ClientStream
}

type watchTimeSeriesCollectionRuleWatchTimeSeriesCollectionRuleClient struct {
	grpc.ClientStream
}

func (x *watchTimeSeriesCollectionRuleWatchTimeSeriesCollectionRuleClient) Recv() (*WatchTimeSeriesCollectionRuleResponse, error) {
	m := new(WatchTimeSeriesCollectionRuleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchTimeSeriesCollectionRules(ctx context.Context, in *WatchTimeSeriesCollectionRulesRequest, opts ...grpc.CallOption) (WatchTimeSeriesCollectionRulesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTimeSeriesCollectionRules",
			ServerStreams: true,
		},
		"/ntt.monitoring.v4.TimeSeriesCollectionRuleService/WatchTimeSeriesCollectionRules", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTimeSeriesCollectionRulesWatchTimeSeriesCollectionRulesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTimeSeriesCollectionRulesClientStream interface {
	Recv() (*WatchTimeSeriesCollectionRulesResponse, error)
	grpc.ClientStream
}

type watchTimeSeriesCollectionRulesWatchTimeSeriesCollectionRulesClient struct {
	grpc.ClientStream
}

func (x *watchTimeSeriesCollectionRulesWatchTimeSeriesCollectionRulesClient) Recv() (*WatchTimeSeriesCollectionRulesResponse, error) {
	m := new(WatchTimeSeriesCollectionRulesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateTimeSeriesCollectionRule(ctx context.Context, in *CreateTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error) {
	out := new(time_series_collection_rule.TimeSeriesCollectionRule)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/CreateTimeSeriesCollectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTimeSeriesCollectionRule(ctx context.Context, in *UpdateTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*time_series_collection_rule.TimeSeriesCollectionRule, error) {
	out := new(time_series_collection_rule.TimeSeriesCollectionRule)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/UpdateTimeSeriesCollectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTimeSeriesCollectionRule(ctx context.Context, in *DeleteTimeSeriesCollectionRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesCollectionRuleService/DeleteTimeSeriesCollectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
