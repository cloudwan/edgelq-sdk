// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/time_series_collection_rule_service.proto
// DO NOT EDIT!!!

package time_series_collection_rule_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_series_collection_rule "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_collection_rule"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &time_series_collection_rule.TimeSeriesCollectionRule{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetTimeSeriesCollectionRule method.
type GetTimeSeriesCollectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.TimeSeriesCollectionRule
	Name *time_series_collection_rule.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetTimeSeriesCollectionRuleRequest) Reset() {
	*m = GetTimeSeriesCollectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetTimeSeriesCollectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetTimeSeriesCollectionRuleRequest) ProtoMessage() {}

func (m *GetTimeSeriesCollectionRuleRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetTimeSeriesCollectionRuleRequest) GotenMessage() {}

// Deprecated, Use GetTimeSeriesCollectionRuleRequest.ProtoReflect.Descriptor instead.
func (*GetTimeSeriesCollectionRuleRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetTimeSeriesCollectionRuleRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetTimeSeriesCollectionRuleRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetTimeSeriesCollectionRuleRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetTimeSeriesCollectionRuleRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetTimeSeriesCollectionRuleRequest) GetName() *time_series_collection_rule.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetTimeSeriesCollectionRuleRequest) GetFieldMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetTimeSeriesCollectionRuleRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetTimeSeriesCollectionRuleRequest) SetName(fv *time_series_collection_rule.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetTimeSeriesCollectionRuleRequest"))
	}
	m.Name = fv
}

func (m *GetTimeSeriesCollectionRuleRequest) SetFieldMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetTimeSeriesCollectionRuleRequest"))
	}
	m.FieldMask = fv
}

func (m *GetTimeSeriesCollectionRuleRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetTimeSeriesCollectionRuleRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetTimeSeriesCollectionRules method.
type BatchGetTimeSeriesCollectionRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of TimeSeriesCollectionRules
	Names []*time_series_collection_rule.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) Reset() {
	*m = BatchGetTimeSeriesCollectionRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTimeSeriesCollectionRulesRequest) ProtoMessage() {}

func (m *BatchGetTimeSeriesCollectionRulesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTimeSeriesCollectionRulesRequest) GotenMessage() {}

// Deprecated, Use BatchGetTimeSeriesCollectionRulesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTimeSeriesCollectionRulesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) GetNames() []*time_series_collection_rule.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) GetFieldMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) SetNames(fv []*time_series_collection_rule.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetTimeSeriesCollectionRulesRequest"))
	}
	m.Names = fv
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) SetFieldMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetTimeSeriesCollectionRulesRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetTimeSeriesCollectionRulesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetTimeSeriesCollectionRulesRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetTimeSeriesCollectionRules method.
type BatchGetTimeSeriesCollectionRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found TimeSeriesCollectionRules
	TimeSeriesCollectionRules []*time_series_collection_rule.TimeSeriesCollectionRule `protobuf:"bytes,1,rep,name=time_series_collection_rules,json=timeSeriesCollectionRules,proto3" json:"time_series_collection_rules,omitempty"`
	// list of not found TimeSeriesCollectionRules
	Missing []*time_series_collection_rule.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) Reset() {
	*m = BatchGetTimeSeriesCollectionRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTimeSeriesCollectionRulesResponse) ProtoMessage() {}

func (m *BatchGetTimeSeriesCollectionRulesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTimeSeriesCollectionRulesResponse) GotenMessage() {}

// Deprecated, Use BatchGetTimeSeriesCollectionRulesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTimeSeriesCollectionRulesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) GetTimeSeriesCollectionRules() []*time_series_collection_rule.TimeSeriesCollectionRule {
	if m != nil {
		return m.TimeSeriesCollectionRules
	}
	return nil
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) GetMissing() []*time_series_collection_rule.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) SetTimeSeriesCollectionRules(fv []*time_series_collection_rule.TimeSeriesCollectionRule) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesCollectionRules", "BatchGetTimeSeriesCollectionRulesResponse"))
	}
	m.TimeSeriesCollectionRules = fv
}

func (m *BatchGetTimeSeriesCollectionRulesResponse) SetMissing(fv []*time_series_collection_rule.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetTimeSeriesCollectionRulesResponse"))
	}
	m.Missing = fv
}

// A request message of the ListTimeSeriesCollectionRules method.
type ListTimeSeriesCollectionRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.TimeSeriesCollectionRule
	Parent *time_series_collection_rule.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer TimeSeriesCollectionRules than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListTimeSeriesCollectionRulesResponse.next_page_token.
	PageToken *time_series_collection_rule.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *time_series_collection_rule.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *time_series_collection_rule.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,6,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListTimeSeriesCollectionRulesRequest) Reset() {
	*m = ListTimeSeriesCollectionRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesCollectionRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesCollectionRulesRequest) ProtoMessage() {}

func (m *ListTimeSeriesCollectionRulesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesCollectionRulesRequest) GotenMessage() {}

// Deprecated, Use ListTimeSeriesCollectionRulesRequest.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesCollectionRulesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListTimeSeriesCollectionRulesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesCollectionRulesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesCollectionRulesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesCollectionRulesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesCollectionRulesRequest) GetParent() *time_series_collection_rule.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListTimeSeriesCollectionRulesRequest) GetPageToken() *time_series_collection_rule.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesRequest) GetOrderBy() *time_series_collection_rule.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesRequest) GetFilter() *time_series_collection_rule.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesRequest) GetFieldMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListTimeSeriesCollectionRulesRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListTimeSeriesCollectionRulesRequest) SetParent(fv *time_series_collection_rule.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.Parent = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.PageSize = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetPageToken(fv *time_series_collection_rule.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.PageToken = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetOrderBy(fv *time_series_collection_rule.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.OrderBy = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetFilter(fv *time_series_collection_rule.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.Filter = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetFieldMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.View = fv
}

func (m *ListTimeSeriesCollectionRulesRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListTimeSeriesCollectionRulesRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListTimeSeriesCollectionRules method.
type ListTimeSeriesCollectionRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of TimeSeriesCollectionRules
	TimeSeriesCollectionRules []*time_series_collection_rule.TimeSeriesCollectionRule `protobuf:"bytes,1,rep,name=time_series_collection_rules,json=timeSeriesCollectionRules,proto3" json:"time_series_collection_rules,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListTimeSeriesCollectionRulesRequest.page_token.
	PrevPageToken *time_series_collection_rule.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListTimeSeriesCollectionRulesRequest.page_token.
	NextPageToken *time_series_collection_rule.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total TimeSeriesCollectionRules across all pages or 0, if there
	// are no items, paging info was not requested or there was an error while
	// trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListTimeSeriesCollectionRulesResponse) Reset() {
	*m = ListTimeSeriesCollectionRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesCollectionRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesCollectionRulesResponse) ProtoMessage() {}

func (m *ListTimeSeriesCollectionRulesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesCollectionRulesResponse) GotenMessage() {}

// Deprecated, Use ListTimeSeriesCollectionRulesResponse.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesCollectionRulesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListTimeSeriesCollectionRulesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesCollectionRulesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesCollectionRulesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesCollectionRulesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesCollectionRulesResponse) GetTimeSeriesCollectionRules() []*time_series_collection_rule.TimeSeriesCollectionRule {
	if m != nil {
		return m.TimeSeriesCollectionRules
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesResponse) GetPrevPageToken() *time_series_collection_rule.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesResponse) GetNextPageToken() *time_series_collection_rule.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListTimeSeriesCollectionRulesResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListTimeSeriesCollectionRulesResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListTimeSeriesCollectionRulesResponse) SetTimeSeriesCollectionRules(fv []*time_series_collection_rule.TimeSeriesCollectionRule) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesCollectionRules", "ListTimeSeriesCollectionRulesResponse"))
	}
	m.TimeSeriesCollectionRules = fv
}

func (m *ListTimeSeriesCollectionRulesResponse) SetPrevPageToken(fv *time_series_collection_rule.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListTimeSeriesCollectionRulesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListTimeSeriesCollectionRulesResponse) SetNextPageToken(fv *time_series_collection_rule.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListTimeSeriesCollectionRulesResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListTimeSeriesCollectionRulesResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListTimeSeriesCollectionRulesResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListTimeSeriesCollectionRulesResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListTimeSeriesCollectionRulesResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchTimeSeriesCollectionRule method.
type WatchTimeSeriesCollectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.TimeSeriesCollectionRule
	Name *time_series_collection_rule.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,2,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchTimeSeriesCollectionRuleRequest) Reset() {
	*m = WatchTimeSeriesCollectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesCollectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesCollectionRuleRequest) ProtoMessage() {}

func (m *WatchTimeSeriesCollectionRuleRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesCollectionRuleRequest) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesCollectionRuleRequest.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesCollectionRuleRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchTimeSeriesCollectionRuleRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesCollectionRuleRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRuleRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRuleRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesCollectionRuleRequest) GetName() *time_series_collection_rule.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRuleRequest) GetFieldMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRuleRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTimeSeriesCollectionRuleRequest) SetName(fv *time_series_collection_rule.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchTimeSeriesCollectionRuleRequest"))
	}
	m.Name = fv
}

func (m *WatchTimeSeriesCollectionRuleRequest) SetFieldMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTimeSeriesCollectionRuleRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTimeSeriesCollectionRuleRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTimeSeriesCollectionRuleRequest"))
	}
	m.View = fv
}

// A response message of the WatchTimeSeriesCollectionRule method.
type WatchTimeSeriesCollectionRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *time_series_collection_rule.TimeSeriesCollectionRuleChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchTimeSeriesCollectionRuleResponse) Reset() {
	*m = WatchTimeSeriesCollectionRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesCollectionRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesCollectionRuleResponse) ProtoMessage() {}

func (m *WatchTimeSeriesCollectionRuleResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesCollectionRuleResponse) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesCollectionRuleResponse.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesCollectionRuleResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchTimeSeriesCollectionRuleResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesCollectionRuleResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRuleResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRuleResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesCollectionRuleResponse) GetChange() *time_series_collection_rule.TimeSeriesCollectionRuleChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRuleResponse) SetChange(fv *time_series_collection_rule.TimeSeriesCollectionRuleChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchTimeSeriesCollectionRuleResponse"))
	}
	m.Change = fv
}

// A request message of the WatchTimeSeriesCollectionRules method.
type WatchTimeSeriesCollectionRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Parent name of ntt.monitoring.v4.TimeSeriesCollectionRule
	Parent *time_series_collection_rule.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer TimeSeriesCollectionRules than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *time_series_collection_rule.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *time_series_collection_rule.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *time_series_collection_rule.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to TimeSeriesCollectionRule
	// that don't affect any of masked fields won't be sent back.
	FieldMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,6,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// TimeSeriesCollectionRule that don't affect any of masked fields won't be
	// sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchTimeSeriesCollectionRulesRequest) Reset() {
	*m = WatchTimeSeriesCollectionRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesCollectionRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesCollectionRulesRequest) ProtoMessage() {}

func (m *WatchTimeSeriesCollectionRulesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesCollectionRulesRequest) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesCollectionRulesRequest.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesCollectionRulesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchTimeSeriesCollectionRulesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesCollectionRulesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRulesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRulesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetParent() *time_series_collection_rule.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetPageToken() *time_series_collection_rule.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetOrderBy() *time_series_collection_rule.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetFilter() *time_series_collection_rule.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetFieldMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTimeSeriesCollectionRulesRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.Type = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetParent(fv *time_series_collection_rule.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.Parent = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.PageSize = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetPageToken(fv *time_series_collection_rule.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.PageToken = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetOrderBy(fv *time_series_collection_rule.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetFilter(fv *time_series_collection_rule.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.Filter = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetFieldMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.View = fv
}

func (m *WatchTimeSeriesCollectionRulesRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchTimeSeriesCollectionRulesRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchTimeSeriesCollectionRules method.
type WatchTimeSeriesCollectionRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of TimeSeriesCollectionRules
	TimeSeriesCollectionRuleChanges []*time_series_collection_rule.TimeSeriesCollectionRuleChange `protobuf:"bytes,2,rep,name=time_series_collection_rule_changes,json=timeSeriesCollectionRuleChanges,proto3" json:"time_series_collection_rule_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All TimeSeriesCollectionRules will be
	// of type Added/Current (depending on watch_type specified in the request).
	// Further responses will be incremental - however messages may still be
	// chunked and is_current logic still applies. is_current is always true for
	// stateful watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchTimeSeriesCollectionRulesResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (TimeSeriesCollectionRules will
	// contains changes of type Current only). Any resume tokens should be
	// discarded as well. This field should be checked only for stateless watch.
	// In stateful those kind of errors are handled by the server side. Will never
	// be sent along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchTimeSeriesCollectionRulesResponse) Reset() {
	*m = WatchTimeSeriesCollectionRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesCollectionRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesCollectionRulesResponse) ProtoMessage() {}

func (m *WatchTimeSeriesCollectionRulesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesCollectionRulesResponse) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesCollectionRulesResponse.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesCollectionRulesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchTimeSeriesCollectionRulesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesCollectionRulesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRulesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRulesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetTimeSeriesCollectionRuleChanges() []*time_series_collection_rule.TimeSeriesCollectionRuleChange {
	if m != nil {
		return m.TimeSeriesCollectionRuleChanges
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetPageTokenChange() *WatchTimeSeriesCollectionRulesResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchTimeSeriesCollectionRulesResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetTimeSeriesCollectionRuleChanges(fv []*time_series_collection_rule.TimeSeriesCollectionRuleChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesCollectionRuleChanges", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.TimeSeriesCollectionRuleChanges = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetPageTokenChange(fv *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchTimeSeriesCollectionRulesResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateTimeSeriesCollectionRule method.
type CreateTimeSeriesCollectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.TimeSeriesCollectionRule
	Parent *time_series_collection_rule.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// TimeSeriesCollectionRule resource body
	TimeSeriesCollectionRule *time_series_collection_rule.TimeSeriesCollectionRule `protobuf:"bytes,2,opt,name=time_series_collection_rule,json=timeSeriesCollectionRule,proto3" json:"time_series_collection_rule,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateTimeSeriesCollectionRuleRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreateTimeSeriesCollectionRuleRequest) Reset() {
	*m = CreateTimeSeriesCollectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesCollectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesCollectionRuleRequest) ProtoMessage() {}

func (m *CreateTimeSeriesCollectionRuleRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesCollectionRuleRequest) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesCollectionRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesCollectionRuleRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateTimeSeriesCollectionRuleRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesCollectionRuleRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesCollectionRuleRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesCollectionRuleRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesCollectionRuleRequest) GetParent() *time_series_collection_rule.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateTimeSeriesCollectionRuleRequest) GetTimeSeriesCollectionRule() *time_series_collection_rule.TimeSeriesCollectionRule {
	if m != nil {
		return m.TimeSeriesCollectionRule
	}
	return nil
}

func (m *CreateTimeSeriesCollectionRuleRequest) GetResponseMask() *CreateTimeSeriesCollectionRuleRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateTimeSeriesCollectionRuleRequest) SetParent(fv *time_series_collection_rule.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateTimeSeriesCollectionRuleRequest"))
	}
	m.Parent = fv
}

func (m *CreateTimeSeriesCollectionRuleRequest) SetTimeSeriesCollectionRule(fv *time_series_collection_rule.TimeSeriesCollectionRule) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesCollectionRule", "CreateTimeSeriesCollectionRuleRequest"))
	}
	m.TimeSeriesCollectionRule = fv
}

func (m *CreateTimeSeriesCollectionRuleRequest) SetResponseMask(fv *CreateTimeSeriesCollectionRuleRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateTimeSeriesCollectionRuleRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateTimeSeriesCollectionRule method.
type UpdateTimeSeriesCollectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TimeSeriesCollectionRule resource body
	TimeSeriesCollectionRule *time_series_collection_rule.TimeSeriesCollectionRule `protobuf:"bytes,2,opt,name=time_series_collection_rule,json=timeSeriesCollectionRule,proto3" json:"time_series_collection_rule,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateTimeSeriesCollectionRuleRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdateTimeSeriesCollectionRuleRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdateTimeSeriesCollectionRuleRequest) Reset() {
	*m = UpdateTimeSeriesCollectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTimeSeriesCollectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTimeSeriesCollectionRuleRequest) ProtoMessage() {}

func (m *UpdateTimeSeriesCollectionRuleRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTimeSeriesCollectionRuleRequest) GotenMessage() {}

// Deprecated, Use UpdateTimeSeriesCollectionRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateTimeSeriesCollectionRuleRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateTimeSeriesCollectionRuleRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest) GetTimeSeriesCollectionRule() *time_series_collection_rule.TimeSeriesCollectionRule {
	if m != nil {
		return m.TimeSeriesCollectionRule
	}
	return nil
}

func (m *UpdateTimeSeriesCollectionRuleRequest) GetUpdateMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateTimeSeriesCollectionRuleRequest) GetCas() *UpdateTimeSeriesCollectionRuleRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateTimeSeriesCollectionRuleRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateTimeSeriesCollectionRuleRequest) GetResponseMask() *UpdateTimeSeriesCollectionRuleRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateTimeSeriesCollectionRuleRequest) SetTimeSeriesCollectionRule(fv *time_series_collection_rule.TimeSeriesCollectionRule) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesCollectionRule", "UpdateTimeSeriesCollectionRuleRequest"))
	}
	m.TimeSeriesCollectionRule = fv
}

func (m *UpdateTimeSeriesCollectionRuleRequest) SetUpdateMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateTimeSeriesCollectionRuleRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateTimeSeriesCollectionRuleRequest) SetCas(fv *UpdateTimeSeriesCollectionRuleRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateTimeSeriesCollectionRuleRequest"))
	}
	m.Cas = fv
}

func (m *UpdateTimeSeriesCollectionRuleRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateTimeSeriesCollectionRuleRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateTimeSeriesCollectionRuleRequest) SetResponseMask(fv *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateTimeSeriesCollectionRuleRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteTimeSeriesCollectionRule method.
type DeleteTimeSeriesCollectionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.TimeSeriesCollectionRule
	Name *time_series_collection_rule.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTimeSeriesCollectionRuleRequest) Reset() {
	*m = DeleteTimeSeriesCollectionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteTimeSeriesCollectionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteTimeSeriesCollectionRuleRequest) ProtoMessage() {}

func (m *DeleteTimeSeriesCollectionRuleRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteTimeSeriesCollectionRuleRequest) GotenMessage() {}

// Deprecated, Use DeleteTimeSeriesCollectionRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteTimeSeriesCollectionRuleRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteTimeSeriesCollectionRuleRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteTimeSeriesCollectionRuleRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteTimeSeriesCollectionRuleRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteTimeSeriesCollectionRuleRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteTimeSeriesCollectionRuleRequest) GetName() *time_series_collection_rule.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteTimeSeriesCollectionRuleRequest) SetName(fv *time_series_collection_rule.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteTimeSeriesCollectionRuleRequest"))
	}
	m.Name = fv
}

type WatchTimeSeriesCollectionRulesResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *time_series_collection_rule.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *time_series_collection_rule.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) Reset() {
	*m = WatchTimeSeriesCollectionRulesResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesCollectionRulesResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesCollectionRulesResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesCollectionRulesResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesCollectionRulesResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) GetPrevPageToken() *time_series_collection_rule.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) GetNextPageToken() *time_series_collection_rule.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) SetPrevPageToken(fv *time_series_collection_rule.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchTimeSeriesCollectionRulesResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchTimeSeriesCollectionRulesResponse_PageTokenChange) SetNextPageToken(fv *time_series_collection_rule.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchTimeSeriesCollectionRulesResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateTimeSeriesCollectionRuleRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask
	Masking isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) Reset() {
	*m = CreateTimeSeriesCollectionRuleRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesCollectionRuleRequest_ResponseMask) ProtoMessage() {}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesCollectionRuleRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesCollectionRuleRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesCollectionRuleRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking interface {
	isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking()
}

type CreateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,2,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody) isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking() {
}
func (*CreateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask) isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking() {
}
func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) GetMasking() isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) GetBodyMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if x, ok := m.GetMasking().(*CreateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) SetMasking(ofv isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateTimeSeriesCollectionRuleRequest_ResponseMask_Masking", "CreateTimeSeriesCollectionRuleRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateTimeSeriesCollectionRuleRequest_ResponseMask) SetBodyMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	m.SetMasking(&CreateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateTimeSeriesCollectionRuleRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *time_series_collection_rule.TimeSeriesCollectionRule `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,2,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) Reset() {
	*m = UpdateTimeSeriesCollectionRuleRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTimeSeriesCollectionRuleRequest_CAS) ProtoMessage() {}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTimeSeriesCollectionRuleRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateTimeSeriesCollectionRuleRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateTimeSeriesCollectionRuleRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) GetConditionalState() *time_series_collection_rule.TimeSeriesCollectionRule {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) GetFieldMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) SetConditionalState(fv *time_series_collection_rule.TimeSeriesCollectionRule) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateTimeSeriesCollectionRuleRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateTimeSeriesCollectionRuleRequest_CAS) SetFieldMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateTimeSeriesCollectionRuleRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateTimeSeriesCollectionRuleRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask
	Masking isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) Reset() {
	*m = UpdateTimeSeriesCollectionRuleRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTimeSeriesCollectionRuleRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTimeSeriesCollectionRuleRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateTimeSeriesCollectionRuleRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateTimeSeriesCollectionRuleRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking interface {
	isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking()
}

type UpdateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdateTimeSeriesCollectionRuleRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesCollectionRule_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody) isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking() {
}
func (*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_UpdatedFieldsOnly) isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking() {
}
func (*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask) isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking() {
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) GetMasking() isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) GetBodyMask() *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask {
	if x, ok := m.GetMasking().(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) SetMasking(ofv isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateTimeSeriesCollectionRuleRequest_ResponseMask_Masking", "UpdateTimeSeriesCollectionRuleRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateTimeSeriesCollectionRuleRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateTimeSeriesCollectionRuleRequest_ResponseMask) SetBodyMask(fv *time_series_collection_rule.TimeSeriesCollectionRule_FieldMask) {
	m.SetMasking(&UpdateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDesc = []byte{
	0x0a, 0x44, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xde, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x0a, 0x1a, 0x0a, 0x18, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda,
	0x21, 0x1c, 0x32, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x22, 0xec, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda,
	0x21, 0x1c, 0x0a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x32, 0x1a, 0x0a, 0x18, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0xd5, 0x01, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x1c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda,
	0x21, 0x1c, 0x0a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf3, 0x03, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x3a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x22, 0x1a, 0x0a, 0x18, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x2a, 0x1a, 0x0a, 0x18, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0xb2, 0xda, 0x21, 0x1c, 0x1a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x32,
	0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x03,
	0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0xb2, 0xda, 0x21, 0x1c, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x48, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x22, 0x1a,
	0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe0, 0x01, 0x0a, 0x24, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x0a, 0x1a, 0x0a,
	0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5b, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x20, 0xb2, 0xda, 0x21, 0x1c, 0x32, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x72, 0x0a, 0x25, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x88, 0x05, 0x0a, 0x25, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2,
	0xda, 0x21, 0x1c, 0x3a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x2a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x1a, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c,
	0x32, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02,
	0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xf7, 0x04, 0x0a, 0x26, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x23, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1f, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x75, 0x0a,
	0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x1a, 0xa5, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21,
	0x1c, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfd, 0x03, 0x0a,
	0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x3a, 0x1a, 0x0a, 0x18,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x78, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01,
	0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xb3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b,
	0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x32, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x07, 0x0a,
	0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x5d, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x32, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x4e, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x1a, 0xc6, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda,
	0x21, 0x1c, 0x32, 0x1a, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xe5, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x32, 0x1a,
	0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f,
	0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e,
	0x67, 0x22, 0x5d, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xda, 0x21, 0x1c, 0x0a, 0x1a,
	0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x8f, 0x13, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x76, 0x82, 0xdb, 0x21, 0x2f, 0x0a, 0x18,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x34, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00,
	0x12, 0xac, 0x02, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8b, 0x01, 0x82, 0xdb, 0x21, 0x4f, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x1e, 0x12, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12,
	0xaa, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x82, 0xdb, 0x21, 0x4e, 0x0a, 0x18, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a,
	0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x1e, 0x12, 0x1c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0x97, 0x02, 0x0a,
	0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x37,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x80, 0x01, 0x82, 0xdb, 0x21, 0x33, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xbd, 0x02, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3,
	0x01, 0x82, 0xdb, 0x21, 0x56, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x25, 0x12, 0x23, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xc3, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0xb9, 0x01, 0x82, 0xdb, 0x21, 0x53, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x25, 0x12, 0x1b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x22, 0x31, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xd5, 0x02, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xcb, 0x01, 0x82, 0xdb, 0x21, 0x49, 0x0a, 0x18, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a,
	0x1d, 0x12, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x6c, 0x3a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x1a,
	0x4d, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc,
	0x26, 0x02, 0x10, 0x01, 0x12, 0xe7, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x73, 0x82, 0xdb, 0x21, 0x2a, 0x0a,
	0x18, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x32,
	0xca, 0x41, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x42, 0xa2, 0x03, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x71, 0x0a, 0x22,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x8a,
	0xff, 0xd0, 0x02, 0x71, 0x0a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42,
	0x24, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescData = edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDesc
)

func edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDescData
}

var edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_goTypes = []interface{}{
	(*GetTimeSeriesCollectionRuleRequest)(nil),                             // 0: ntt.monitoring.v4.GetTimeSeriesCollectionRuleRequest
	(*BatchGetTimeSeriesCollectionRulesRequest)(nil),                       // 1: ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesRequest
	(*BatchGetTimeSeriesCollectionRulesResponse)(nil),                      // 2: ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesResponse
	(*ListTimeSeriesCollectionRulesRequest)(nil),                           // 3: ntt.monitoring.v4.ListTimeSeriesCollectionRulesRequest
	(*ListTimeSeriesCollectionRulesResponse)(nil),                          // 4: ntt.monitoring.v4.ListTimeSeriesCollectionRulesResponse
	(*WatchTimeSeriesCollectionRuleRequest)(nil),                           // 5: ntt.monitoring.v4.WatchTimeSeriesCollectionRuleRequest
	(*WatchTimeSeriesCollectionRuleResponse)(nil),                          // 6: ntt.monitoring.v4.WatchTimeSeriesCollectionRuleResponse
	(*WatchTimeSeriesCollectionRulesRequest)(nil),                          // 7: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesRequest
	(*WatchTimeSeriesCollectionRulesResponse)(nil),                         // 8: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesResponse
	(*CreateTimeSeriesCollectionRuleRequest)(nil),                          // 9: ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest
	(*UpdateTimeSeriesCollectionRuleRequest)(nil),                          // 10: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest
	(*DeleteTimeSeriesCollectionRuleRequest)(nil),                          // 11: ntt.monitoring.v4.DeleteTimeSeriesCollectionRuleRequest
	(*WatchTimeSeriesCollectionRulesResponse_PageTokenChange)(nil),         // 12: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesResponse.PageTokenChange
	(*CreateTimeSeriesCollectionRuleRequest_ResponseMask)(nil),             // 13: ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest.ResponseMask
	(*UpdateTimeSeriesCollectionRuleRequest_CAS)(nil),                      // 14: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.CAS
	(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask)(nil),             // 15: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.ResponseMask
	(*time_series_collection_rule.TimeSeriesCollectionRule_FieldMask)(nil), // 16: ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	(view.View)(0), // 17: goten.types.View
	(*time_series_collection_rule.TimeSeriesCollectionRule)(nil),       // 18: ntt.monitoring.v4.TimeSeriesCollectionRule
	(*time_series_collection_rule.TimeSeriesCollectionRuleChange)(nil), // 19: ntt.monitoring.v4.TimeSeriesCollectionRuleChange
	(watch_type.WatchType)(0),     // 20: goten.types.WatchType
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 22: google.protobuf.Empty
}
var edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_depIdxs = []int32{
	16, // 0: ntt.monitoring.v4.GetTimeSeriesCollectionRuleRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	17, // 1: ntt.monitoring.v4.GetTimeSeriesCollectionRuleRequest.view:type_name -> goten.types.View
	16, // 2: ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	17, // 3: ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesRequest.view:type_name -> goten.types.View
	18, // 4: ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesResponse.time_series_collection_rules:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule
	16, // 5: ntt.monitoring.v4.ListTimeSeriesCollectionRulesRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	17, // 6: ntt.monitoring.v4.ListTimeSeriesCollectionRulesRequest.view:type_name -> goten.types.View
	18, // 7: ntt.monitoring.v4.ListTimeSeriesCollectionRulesResponse.time_series_collection_rules:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule
	16, // 8: ntt.monitoring.v4.WatchTimeSeriesCollectionRuleRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	17, // 9: ntt.monitoring.v4.WatchTimeSeriesCollectionRuleRequest.view:type_name -> goten.types.View
	19, // 10: ntt.monitoring.v4.WatchTimeSeriesCollectionRuleResponse.change:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRuleChange
	20, // 11: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesRequest.type:type_name -> goten.types.WatchType
	21, // 12: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesRequest.starting_time:type_name -> google.protobuf.Timestamp
	16, // 13: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	17, // 14: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesRequest.view:type_name -> goten.types.View
	19, // 15: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesResponse.time_series_collection_rule_changes:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRuleChange
	12, // 16: ntt.monitoring.v4.WatchTimeSeriesCollectionRulesResponse.page_token_change:type_name -> ntt.monitoring.v4.WatchTimeSeriesCollectionRulesResponse.PageTokenChange
	18, // 17: ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest.time_series_collection_rule:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule
	13, // 18: ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest.response_mask:type_name -> ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest.ResponseMask
	18, // 19: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.time_series_collection_rule:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule
	16, // 20: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.update_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	14, // 21: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.cas:type_name -> ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.CAS
	15, // 22: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.response_mask:type_name -> ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.ResponseMask
	16, // 23: ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest.ResponseMask.body_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	18, // 24: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.CAS.conditional_state:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule
	16, // 25: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.CAS.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	16, // 26: ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest.ResponseMask.body_mask:type_name -> ntt.monitoring.v4.TimeSeriesCollectionRule_FieldMask
	0,  // 27: ntt.monitoring.v4.TimeSeriesCollectionRuleService.GetTimeSeriesCollectionRule:input_type -> ntt.monitoring.v4.GetTimeSeriesCollectionRuleRequest
	1,  // 28: ntt.monitoring.v4.TimeSeriesCollectionRuleService.BatchGetTimeSeriesCollectionRules:input_type -> ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesRequest
	3,  // 29: ntt.monitoring.v4.TimeSeriesCollectionRuleService.ListTimeSeriesCollectionRules:input_type -> ntt.monitoring.v4.ListTimeSeriesCollectionRulesRequest
	5,  // 30: ntt.monitoring.v4.TimeSeriesCollectionRuleService.WatchTimeSeriesCollectionRule:input_type -> ntt.monitoring.v4.WatchTimeSeriesCollectionRuleRequest
	7,  // 31: ntt.monitoring.v4.TimeSeriesCollectionRuleService.WatchTimeSeriesCollectionRules:input_type -> ntt.monitoring.v4.WatchTimeSeriesCollectionRulesRequest
	9,  // 32: ntt.monitoring.v4.TimeSeriesCollectionRuleService.CreateTimeSeriesCollectionRule:input_type -> ntt.monitoring.v4.CreateTimeSeriesCollectionRuleRequest
	10, // 33: ntt.monitoring.v4.TimeSeriesCollectionRuleService.UpdateTimeSeriesCollectionRule:input_type -> ntt.monitoring.v4.UpdateTimeSeriesCollectionRuleRequest
	11, // 34: ntt.monitoring.v4.TimeSeriesCollectionRuleService.DeleteTimeSeriesCollectionRule:input_type -> ntt.monitoring.v4.DeleteTimeSeriesCollectionRuleRequest
	18, // 35: ntt.monitoring.v4.TimeSeriesCollectionRuleService.GetTimeSeriesCollectionRule:output_type -> ntt.monitoring.v4.TimeSeriesCollectionRule
	2,  // 36: ntt.monitoring.v4.TimeSeriesCollectionRuleService.BatchGetTimeSeriesCollectionRules:output_type -> ntt.monitoring.v4.BatchGetTimeSeriesCollectionRulesResponse
	4,  // 37: ntt.monitoring.v4.TimeSeriesCollectionRuleService.ListTimeSeriesCollectionRules:output_type -> ntt.monitoring.v4.ListTimeSeriesCollectionRulesResponse
	6,  // 38: ntt.monitoring.v4.TimeSeriesCollectionRuleService.WatchTimeSeriesCollectionRule:output_type -> ntt.monitoring.v4.WatchTimeSeriesCollectionRuleResponse
	8,  // 39: ntt.monitoring.v4.TimeSeriesCollectionRuleService.WatchTimeSeriesCollectionRules:output_type -> ntt.monitoring.v4.WatchTimeSeriesCollectionRulesResponse
	18, // 40: ntt.monitoring.v4.TimeSeriesCollectionRuleService.CreateTimeSeriesCollectionRule:output_type -> ntt.monitoring.v4.TimeSeriesCollectionRule
	18, // 41: ntt.monitoring.v4.TimeSeriesCollectionRuleService.UpdateTimeSeriesCollectionRule:output_type -> ntt.monitoring.v4.TimeSeriesCollectionRule
	22, // 42: ntt.monitoring.v4.TimeSeriesCollectionRuleService.DeleteTimeSeriesCollectionRule:output_type -> google.protobuf.Empty
	35, // [35:43] is the sub-list for method output_type
	27, // [27:35] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_init() }
func edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_init() {
	if edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeSeriesCollectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTimeSeriesCollectionRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTimeSeriesCollectionRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesCollectionRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesCollectionRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesCollectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesCollectionRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesCollectionRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesCollectionRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesCollectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeSeriesCollectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTimeSeriesCollectionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesCollectionRulesResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesCollectionRuleRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeSeriesCollectionRuleRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CreateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateTimeSeriesCollectionRuleRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto = out.File
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_goTypes = nil
	edgelq_monitoring_proto_v4_time_series_collection_rule_service_proto_depIdxs = nil
}
