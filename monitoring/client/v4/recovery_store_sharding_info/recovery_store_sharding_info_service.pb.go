// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/recovery_store_sharding_info_service.proto
// DO NOT EDIT!!!

package recovery_store_sharding_info_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	recovery_store_sharding_info "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/recovery_store_sharding_info"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &recovery_store_sharding_info.RecoveryStoreShardingInfo{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetRecoveryStoreShardingInfo][ntt.monitoring.v4.GetRecoveryStoreShardingInfo]
type GetRecoveryStoreShardingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.RecoveryStoreShardingInfo
	Name *recovery_store_sharding_info.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,3,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetRecoveryStoreShardingInfoRequest) Reset() {
	*m = GetRecoveryStoreShardingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetRecoveryStoreShardingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetRecoveryStoreShardingInfoRequest) ProtoMessage() {}

func (m *GetRecoveryStoreShardingInfoRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetRecoveryStoreShardingInfoRequest) GotenMessage() {}

// Deprecated, Use GetRecoveryStoreShardingInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRecoveryStoreShardingInfoRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetRecoveryStoreShardingInfoRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetRecoveryStoreShardingInfoRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetRecoveryStoreShardingInfoRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetRecoveryStoreShardingInfoRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetRecoveryStoreShardingInfoRequest) GetName() *recovery_store_sharding_info.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetRecoveryStoreShardingInfoRequest) GetFieldMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetRecoveryStoreShardingInfoRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetRecoveryStoreShardingInfoRequest) SetName(fv *recovery_store_sharding_info.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetRecoveryStoreShardingInfoRequest"))
	}
	m.Name = fv
}

func (m *GetRecoveryStoreShardingInfoRequest) SetFieldMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetRecoveryStoreShardingInfoRequest"))
	}
	m.FieldMask = fv
}

func (m *GetRecoveryStoreShardingInfoRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetRecoveryStoreShardingInfoRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetRecoveryStoreShardingInfos][ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfos]
type BatchGetRecoveryStoreShardingInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of RecoveryStoreShardingInfos
	Names []*recovery_store_sharding_info.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,3,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) Reset() {
	*m = BatchGetRecoveryStoreShardingInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetRecoveryStoreShardingInfosRequest) ProtoMessage() {}

func (m *BatchGetRecoveryStoreShardingInfosRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetRecoveryStoreShardingInfosRequest) GotenMessage() {}

// Deprecated, Use BatchGetRecoveryStoreShardingInfosRequest.ProtoReflect.Descriptor instead.
func (*BatchGetRecoveryStoreShardingInfosRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) GetNames() []*recovery_store_sharding_info.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) GetFieldMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) SetNames(fv []*recovery_store_sharding_info.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetRecoveryStoreShardingInfosRequest"))
	}
	m.Names = fv
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) SetFieldMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetRecoveryStoreShardingInfosRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetRecoveryStoreShardingInfosRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetRecoveryStoreShardingInfosRequest"))
	}
	m.View = fv
}

// BatchGetRecoveryStoreShardingInfosResponse
type BatchGetRecoveryStoreShardingInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found RecoveryStoreShardingInfos
	RecoveryStoreShardingInfos []*recovery_store_sharding_info.RecoveryStoreShardingInfo `protobuf:"bytes,1,rep,name=recovery_store_sharding_infos,json=recoveryStoreShardingInfos,proto3" json:"recovery_store_sharding_infos,omitempty" firestore:"recoveryStoreShardingInfos"`
	// list of not found RecoveryStoreShardingInfos
	Missing []*recovery_store_sharding_info.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) Reset() {
	*m = BatchGetRecoveryStoreShardingInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetRecoveryStoreShardingInfosResponse) ProtoMessage() {}

func (m *BatchGetRecoveryStoreShardingInfosResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetRecoveryStoreShardingInfosResponse) GotenMessage() {}

// Deprecated, Use BatchGetRecoveryStoreShardingInfosResponse.ProtoReflect.Descriptor instead.
func (*BatchGetRecoveryStoreShardingInfosResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) GetRecoveryStoreShardingInfos() []*recovery_store_sharding_info.RecoveryStoreShardingInfo {
	if m != nil {
		return m.RecoveryStoreShardingInfos
	}
	return nil
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) GetMissing() []*recovery_store_sharding_info.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) SetRecoveryStoreShardingInfos(fv []*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RecoveryStoreShardingInfos", "BatchGetRecoveryStoreShardingInfosResponse"))
	}
	m.RecoveryStoreShardingInfos = fv
}

func (m *BatchGetRecoveryStoreShardingInfosResponse) SetMissing(fv []*recovery_store_sharding_info.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetRecoveryStoreShardingInfosResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListRecoveryStoreShardingInfos][ntt.monitoring.v4.ListRecoveryStoreShardingInfos]
type ListRecoveryStoreShardingInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.RecoveryStoreShardingInfo
	Parent *recovery_store_sharding_info.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer RecoveryStoreShardingInfos
	// than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListRecoveryStoreShardingInfosResponse.next_page_token][ntt.monitoring.v4.ListRecoveryStoreShardingInfosResponse.next_page_token]
	PageToken *recovery_store_sharding_info.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *recovery_store_sharding_info.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *recovery_store_sharding_info.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,6,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListRecoveryStoreShardingInfosRequest) Reset() {
	*m = ListRecoveryStoreShardingInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListRecoveryStoreShardingInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListRecoveryStoreShardingInfosRequest) ProtoMessage() {}

func (m *ListRecoveryStoreShardingInfosRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListRecoveryStoreShardingInfosRequest) GotenMessage() {}

// Deprecated, Use ListRecoveryStoreShardingInfosRequest.ProtoReflect.Descriptor instead.
func (*ListRecoveryStoreShardingInfosRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListRecoveryStoreShardingInfosRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListRecoveryStoreShardingInfosRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListRecoveryStoreShardingInfosRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListRecoveryStoreShardingInfosRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListRecoveryStoreShardingInfosRequest) GetParent() *recovery_store_sharding_info.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListRecoveryStoreShardingInfosRequest) GetPageToken() *recovery_store_sharding_info.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosRequest) GetOrderBy() *recovery_store_sharding_info.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosRequest) GetFilter() *recovery_store_sharding_info.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosRequest) GetFieldMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListRecoveryStoreShardingInfosRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListRecoveryStoreShardingInfosRequest) SetParent(fv *recovery_store_sharding_info.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.Parent = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.PageSize = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetPageToken(fv *recovery_store_sharding_info.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.PageToken = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetOrderBy(fv *recovery_store_sharding_info.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.OrderBy = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetFilter(fv *recovery_store_sharding_info.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.Filter = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetFieldMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.FieldMask = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.View = fv
}

func (m *ListRecoveryStoreShardingInfosRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListRecoveryStoreShardingInfosRequest"))
	}
	m.IncludePagingInfo = fv
}

// Request message for method
// [ListRecoveryStoreShardingInfos][ntt.monitoring.v4.ListRecoveryStoreShardingInfos]
type ListRecoveryStoreShardingInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of RecoveryStoreShardingInfos
	RecoveryStoreShardingInfos []*recovery_store_sharding_info.RecoveryStoreShardingInfo `protobuf:"bytes,1,rep,name=recovery_store_sharding_infos,json=recoveryStoreShardingInfos,proto3" json:"recovery_store_sharding_infos,omitempty" firestore:"recoveryStoreShardingInfos"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListRecoveryStoreShardingInfosRequest.page_token][ntt.monitoring.v4.ListRecoveryStoreShardingInfosRequest.page_token]
	PrevPageToken *recovery_store_sharding_info.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListRecoveryStoreShardingInfosRequest.page_token][ntt.monitoring.v4.ListRecoveryStoreShardingInfosRequest.page_token]
	NextPageToken *recovery_store_sharding_info.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total RecoveryStoreShardingInfos across all pages or 0, if there
	// are no items, paging info was not requested or there was an error while
	// trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListRecoveryStoreShardingInfosResponse) Reset() {
	*m = ListRecoveryStoreShardingInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListRecoveryStoreShardingInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListRecoveryStoreShardingInfosResponse) ProtoMessage() {}

func (m *ListRecoveryStoreShardingInfosResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListRecoveryStoreShardingInfosResponse) GotenMessage() {}

// Deprecated, Use ListRecoveryStoreShardingInfosResponse.ProtoReflect.Descriptor instead.
func (*ListRecoveryStoreShardingInfosResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListRecoveryStoreShardingInfosResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListRecoveryStoreShardingInfosResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListRecoveryStoreShardingInfosResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListRecoveryStoreShardingInfosResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListRecoveryStoreShardingInfosResponse) GetRecoveryStoreShardingInfos() []*recovery_store_sharding_info.RecoveryStoreShardingInfo {
	if m != nil {
		return m.RecoveryStoreShardingInfos
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosResponse) GetPrevPageToken() *recovery_store_sharding_info.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosResponse) GetNextPageToken() *recovery_store_sharding_info.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListRecoveryStoreShardingInfosResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListRecoveryStoreShardingInfosResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListRecoveryStoreShardingInfosResponse) SetRecoveryStoreShardingInfos(fv []*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RecoveryStoreShardingInfos", "ListRecoveryStoreShardingInfosResponse"))
	}
	m.RecoveryStoreShardingInfos = fv
}

func (m *ListRecoveryStoreShardingInfosResponse) SetPrevPageToken(fv *recovery_store_sharding_info.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListRecoveryStoreShardingInfosResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListRecoveryStoreShardingInfosResponse) SetNextPageToken(fv *recovery_store_sharding_info.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListRecoveryStoreShardingInfosResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListRecoveryStoreShardingInfosResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListRecoveryStoreShardingInfosResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListRecoveryStoreShardingInfosResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListRecoveryStoreShardingInfosResponse"))
	}
	m.TotalResultsCount = fv
}

// Request message for method
// [WatchRecoveryStoreShardingInfo][ntt.monitoring.v4.WatchRecoveryStoreShardingInfo]
type WatchRecoveryStoreShardingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.RecoveryStoreShardingInfo
	Name *recovery_store_sharding_info.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,2,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchRecoveryStoreShardingInfoRequest) Reset() {
	*m = WatchRecoveryStoreShardingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchRecoveryStoreShardingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchRecoveryStoreShardingInfoRequest) ProtoMessage() {}

func (m *WatchRecoveryStoreShardingInfoRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchRecoveryStoreShardingInfoRequest) GotenMessage() {}

// Deprecated, Use WatchRecoveryStoreShardingInfoRequest.ProtoReflect.Descriptor instead.
func (*WatchRecoveryStoreShardingInfoRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchRecoveryStoreShardingInfoRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchRecoveryStoreShardingInfoRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfoRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfoRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchRecoveryStoreShardingInfoRequest) GetName() *recovery_store_sharding_info.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfoRequest) GetFieldMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfoRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchRecoveryStoreShardingInfoRequest) SetName(fv *recovery_store_sharding_info.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchRecoveryStoreShardingInfoRequest"))
	}
	m.Name = fv
}

func (m *WatchRecoveryStoreShardingInfoRequest) SetFieldMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchRecoveryStoreShardingInfoRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchRecoveryStoreShardingInfoRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchRecoveryStoreShardingInfoRequest"))
	}
	m.View = fv
}

// WatchRecoveryStoreShardingInfoResponse
type WatchRecoveryStoreShardingInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *recovery_store_sharding_info.RecoveryStoreShardingInfoChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchRecoveryStoreShardingInfoResponse) Reset() {
	*m = WatchRecoveryStoreShardingInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchRecoveryStoreShardingInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchRecoveryStoreShardingInfoResponse) ProtoMessage() {}

func (m *WatchRecoveryStoreShardingInfoResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchRecoveryStoreShardingInfoResponse) GotenMessage() {}

// Deprecated, Use WatchRecoveryStoreShardingInfoResponse.ProtoReflect.Descriptor instead.
func (*WatchRecoveryStoreShardingInfoResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchRecoveryStoreShardingInfoResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchRecoveryStoreShardingInfoResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfoResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfoResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchRecoveryStoreShardingInfoResponse) GetChange() *recovery_store_sharding_info.RecoveryStoreShardingInfoChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfoResponse) SetChange(fv *recovery_store_sharding_info.RecoveryStoreShardingInfoChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchRecoveryStoreShardingInfoResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchRecoveryStoreShardingInfos][ntt.monitoring.v4.WatchRecoveryStoreShardingInfos]
type WatchRecoveryStoreShardingInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent name of ntt.monitoring.v4.RecoveryStoreShardingInfo
	Parent *recovery_store_sharding_info.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer RecoveryStoreShardingInfos
	// than requested. If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *recovery_store_sharding_info.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *recovery_store_sharding_info.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *recovery_store_sharding_info.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to RecoveryStoreShardingInfo
	// that don't affect any of masked fields won't be sent back.
	FieldMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,6,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// RecoveryStoreShardingInfo that don't affect any of masked fields won't be
	// sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchRecoveryStoreShardingInfosRequest) Reset() {
	*m = WatchRecoveryStoreShardingInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchRecoveryStoreShardingInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchRecoveryStoreShardingInfosRequest) ProtoMessage() {}

func (m *WatchRecoveryStoreShardingInfosRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchRecoveryStoreShardingInfosRequest) GotenMessage() {}

// Deprecated, Use WatchRecoveryStoreShardingInfosRequest.ProtoReflect.Descriptor instead.
func (*WatchRecoveryStoreShardingInfosRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchRecoveryStoreShardingInfosRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchRecoveryStoreShardingInfosRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfosRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfosRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetParent() *recovery_store_sharding_info.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetPageToken() *recovery_store_sharding_info.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetOrderBy() *recovery_store_sharding_info.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetFilter() *recovery_store_sharding_info.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetFieldMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchRecoveryStoreShardingInfosRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.Type = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetParent(fv *recovery_store_sharding_info.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.Parent = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.PageSize = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetPageToken(fv *recovery_store_sharding_info.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.PageToken = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetOrderBy(fv *recovery_store_sharding_info.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetFilter(fv *recovery_store_sharding_info.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.Filter = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetFieldMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.View = fv
}

func (m *WatchRecoveryStoreShardingInfosRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchRecoveryStoreShardingInfosRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchRecoveryStoreShardingInfosResponse
type WatchRecoveryStoreShardingInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of RecoveryStoreShardingInfos
	RecoveryStoreShardingInfoChanges []*recovery_store_sharding_info.RecoveryStoreShardingInfoChange `protobuf:"bytes,2,rep,name=recovery_store_sharding_info_changes,json=recoveryStoreShardingInfoChanges,proto3" json:"recovery_store_sharding_info_changes,omitempty" firestore:"recoveryStoreShardingInfoChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All RecoveryStoreShardingInfos will be
	// of type Added/Current (depending on watch_type specified in the request).
	// Further responses will be incremental - however messages may still be
	// chunked and is_current logic still applies. is_current is always true for
	// stateful watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchRecoveryStoreShardingInfosResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (RecoveryStoreShardingInfos will
	// contains changes of type Current only). Any resume tokens should be
	// discarded as well. This field should be checked only for stateless watch.
	// In stateful those kind of errors are handled by the server side. Will never
	// be sent along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchRecoveryStoreShardingInfosResponse) Reset() {
	*m = WatchRecoveryStoreShardingInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchRecoveryStoreShardingInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchRecoveryStoreShardingInfosResponse) ProtoMessage() {}

func (m *WatchRecoveryStoreShardingInfosResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchRecoveryStoreShardingInfosResponse) GotenMessage() {}

// Deprecated, Use WatchRecoveryStoreShardingInfosResponse.ProtoReflect.Descriptor instead.
func (*WatchRecoveryStoreShardingInfosResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchRecoveryStoreShardingInfosResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchRecoveryStoreShardingInfosResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfosResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfosResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetRecoveryStoreShardingInfoChanges() []*recovery_store_sharding_info.RecoveryStoreShardingInfoChange {
	if m != nil {
		return m.RecoveryStoreShardingInfoChanges
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetPageTokenChange() *WatchRecoveryStoreShardingInfosResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchRecoveryStoreShardingInfosResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetRecoveryStoreShardingInfoChanges(fv []*recovery_store_sharding_info.RecoveryStoreShardingInfoChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RecoveryStoreShardingInfoChanges", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.RecoveryStoreShardingInfoChanges = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetPageTokenChange(fv *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchRecoveryStoreShardingInfosResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateRecoveryStoreShardingInfo][ntt.monitoring.v4.CreateRecoveryStoreShardingInfo]
type CreateRecoveryStoreShardingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.RecoveryStoreShardingInfo
	Parent *recovery_store_sharding_info.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// RecoveryStoreShardingInfo resource body
	RecoveryStoreShardingInfo *recovery_store_sharding_info.RecoveryStoreShardingInfo `protobuf:"bytes,2,opt,name=recovery_store_sharding_info,json=recoveryStoreShardingInfo,proto3" json:"recovery_store_sharding_info,omitempty" firestore:"recoveryStoreShardingInfo"`
}

func (m *CreateRecoveryStoreShardingInfoRequest) Reset() {
	*m = CreateRecoveryStoreShardingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateRecoveryStoreShardingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateRecoveryStoreShardingInfoRequest) ProtoMessage() {}

func (m *CreateRecoveryStoreShardingInfoRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateRecoveryStoreShardingInfoRequest) GotenMessage() {}

// Deprecated, Use CreateRecoveryStoreShardingInfoRequest.ProtoReflect.Descriptor instead.
func (*CreateRecoveryStoreShardingInfoRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateRecoveryStoreShardingInfoRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateRecoveryStoreShardingInfoRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateRecoveryStoreShardingInfoRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateRecoveryStoreShardingInfoRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateRecoveryStoreShardingInfoRequest) GetParent() *recovery_store_sharding_info.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateRecoveryStoreShardingInfoRequest) GetRecoveryStoreShardingInfo() *recovery_store_sharding_info.RecoveryStoreShardingInfo {
	if m != nil {
		return m.RecoveryStoreShardingInfo
	}
	return nil
}

func (m *CreateRecoveryStoreShardingInfoRequest) SetParent(fv *recovery_store_sharding_info.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateRecoveryStoreShardingInfoRequest"))
	}
	m.Parent = fv
}

func (m *CreateRecoveryStoreShardingInfoRequest) SetRecoveryStoreShardingInfo(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RecoveryStoreShardingInfo", "CreateRecoveryStoreShardingInfoRequest"))
	}
	m.RecoveryStoreShardingInfo = fv
}

// Request message for method
// [UpdateRecoveryStoreShardingInfo][ntt.monitoring.v4.UpdateRecoveryStoreShardingInfo]
type UpdateRecoveryStoreShardingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// RecoveryStoreShardingInfo resource body
	RecoveryStoreShardingInfo *recovery_store_sharding_info.RecoveryStoreShardingInfo `protobuf:"bytes,2,opt,name=recovery_store_sharding_info,json=recoveryStoreShardingInfo,proto3" json:"recovery_store_sharding_info,omitempty" firestore:"recoveryStoreShardingInfo"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,3,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateRecoveryStoreShardingInfoRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty" firestore:"allowMissing"`
}

func (m *UpdateRecoveryStoreShardingInfoRequest) Reset() {
	*m = UpdateRecoveryStoreShardingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateRecoveryStoreShardingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateRecoveryStoreShardingInfoRequest) ProtoMessage() {}

func (m *UpdateRecoveryStoreShardingInfoRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateRecoveryStoreShardingInfoRequest) GotenMessage() {}

// Deprecated, Use UpdateRecoveryStoreShardingInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecoveryStoreShardingInfoRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateRecoveryStoreShardingInfoRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest) GetRecoveryStoreShardingInfo() *recovery_store_sharding_info.RecoveryStoreShardingInfo {
	if m != nil {
		return m.RecoveryStoreShardingInfo
	}
	return nil
}

func (m *UpdateRecoveryStoreShardingInfoRequest) GetUpdateMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateRecoveryStoreShardingInfoRequest) GetCas() *UpdateRecoveryStoreShardingInfoRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateRecoveryStoreShardingInfoRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateRecoveryStoreShardingInfoRequest) SetRecoveryStoreShardingInfo(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RecoveryStoreShardingInfo", "UpdateRecoveryStoreShardingInfoRequest"))
	}
	m.RecoveryStoreShardingInfo = fv
}

func (m *UpdateRecoveryStoreShardingInfoRequest) SetUpdateMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateRecoveryStoreShardingInfoRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateRecoveryStoreShardingInfoRequest) SetCas(fv *UpdateRecoveryStoreShardingInfoRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateRecoveryStoreShardingInfoRequest"))
	}
	m.Cas = fv
}

func (m *UpdateRecoveryStoreShardingInfoRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateRecoveryStoreShardingInfoRequest"))
	}
	m.AllowMissing = fv
}

// Request message for method
// [DeleteRecoveryStoreShardingInfo][ntt.monitoring.v4.DeleteRecoveryStoreShardingInfo]
type DeleteRecoveryStoreShardingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.RecoveryStoreShardingInfo
	Name *recovery_store_sharding_info.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteRecoveryStoreShardingInfoRequest) Reset() {
	*m = DeleteRecoveryStoreShardingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteRecoveryStoreShardingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteRecoveryStoreShardingInfoRequest) ProtoMessage() {}

func (m *DeleteRecoveryStoreShardingInfoRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteRecoveryStoreShardingInfoRequest) GotenMessage() {}

// Deprecated, Use DeleteRecoveryStoreShardingInfoRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecoveryStoreShardingInfoRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteRecoveryStoreShardingInfoRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteRecoveryStoreShardingInfoRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteRecoveryStoreShardingInfoRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteRecoveryStoreShardingInfoRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteRecoveryStoreShardingInfoRequest) GetName() *recovery_store_sharding_info.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteRecoveryStoreShardingInfoRequest) SetName(fv *recovery_store_sharding_info.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteRecoveryStoreShardingInfoRequest"))
	}
	m.Name = fv
}

type WatchRecoveryStoreShardingInfosResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *recovery_store_sharding_info.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *recovery_store_sharding_info.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) Reset() {
	*m = WatchRecoveryStoreShardingInfosResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchRecoveryStoreShardingInfosResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchRecoveryStoreShardingInfosResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchRecoveryStoreShardingInfosResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchRecoveryStoreShardingInfosResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) GetPrevPageToken() *recovery_store_sharding_info.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) GetNextPageToken() *recovery_store_sharding_info.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) SetPrevPageToken(fv *recovery_store_sharding_info.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchRecoveryStoreShardingInfosResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) SetNextPageToken(fv *recovery_store_sharding_info.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchRecoveryStoreShardingInfosResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateRecoveryStoreShardingInfoRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *recovery_store_sharding_info.RecoveryStoreShardingInfo `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask `protobuf:"bytes,2,opt,customtype=RecoveryStoreShardingInfo_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) Reset() {
	*m = UpdateRecoveryStoreShardingInfoRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateRecoveryStoreShardingInfoRequest_CAS) ProtoMessage() {}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateRecoveryStoreShardingInfoRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateRecoveryStoreShardingInfoRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateRecoveryStoreShardingInfoRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) GetConditionalState() *recovery_store_sharding_info.RecoveryStoreShardingInfo {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) GetFieldMask() *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) SetConditionalState(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateRecoveryStoreShardingInfoRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateRecoveryStoreShardingInfoRequest_CAS) SetFieldMask(fv *recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateRecoveryStoreShardingInfoRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDesc = []byte{
	0x0a, 0x45, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b,
	0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xef, 0x01, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5c, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2,
	0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xda, 0x01, 0x0a, 0x2a, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a,
	0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf9, 0x03, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xb2, 0xda, 0x21, 0x1d, 0x3a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x2a, 0x1b, 0x0a, 0x19, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x1a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda,
	0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x86, 0x03, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x49, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x25, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21,
	0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x74, 0x0a, 0x26, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8e, 0x05, 0x0a, 0x26, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2,
	0xda, 0x21, 0x1d, 0x3a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x2a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x1a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21,
	0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xff, 0x04, 0x0a, 0x27, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a,
	0xa7, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda,
	0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a,
	0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x26, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x3a, 0x1b, 0x0a, 0x19, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x7b, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08,
	0x01, 0x52, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbc, 0x04, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0xc8, 0xd5, 0x22,
	0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4f, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53,
	0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x1a, 0xbe, 0x01, 0x0a, 0x03, 0x43,
	0x41, 0x53, 0x12, 0x59, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2,
	0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5f, 0x0a, 0x26, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xb8, 0x13, 0x0a,
	0x20, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xfd, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x82, 0xdb, 0x21, 0x30, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x34, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26,
	0x00, 0x12, 0xb2, 0x02, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xdb, 0x21, 0x51, 0x0a, 0x19, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x1f, 0x12, 0x1d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x34, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xaf, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97,
	0x01, 0x82, 0xdb, 0x21, 0x50, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x1f, 0x12, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x12, 0x31, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0x9b, 0x02, 0x0a, 0x1e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x81, 0x01, 0x82, 0xdb, 0x21, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xc2, 0x02, 0x0a, 0x1f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x39, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa5, 0x01, 0x82, 0xdb, 0x21, 0x58, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x26, 0x12, 0x24, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f, 0x76,
	0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xc9, 0x02, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbc, 0x01, 0x82, 0xdb, 0x21, 0x55, 0x0a,
	0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x2a, 0x26, 0x12, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51,
	0x3a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x31,
	0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xdc, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcf, 0x01, 0x82, 0xdb, 0x21, 0x4b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x1e,
	0x12, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x6e, 0x3a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x1a, 0x4e, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x2a, 0x7d,
	0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xea, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x74, 0x82,
	0xdb, 0x21, 0x2b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x34, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26,
	0x02, 0x10, 0x01, 0x1a, 0x32, 0xca, 0x41, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xa9, 0x03, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff,
	0xd0, 0x02, 0x73, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x34, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x8a, 0xff, 0xd0, 0x02, 0x73, 0x0a, 0x23, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x34, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x25, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x00, 0x5a, 0x70, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x34, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3b,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescData = edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDesc
)

func edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDescData
}

var edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_goTypes = []interface{}{
	(*GetRecoveryStoreShardingInfoRequest)(nil),                              // 0: ntt.monitoring.v4.GetRecoveryStoreShardingInfoRequest
	(*BatchGetRecoveryStoreShardingInfosRequest)(nil),                        // 1: ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosRequest
	(*BatchGetRecoveryStoreShardingInfosResponse)(nil),                       // 2: ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosResponse
	(*ListRecoveryStoreShardingInfosRequest)(nil),                            // 3: ntt.monitoring.v4.ListRecoveryStoreShardingInfosRequest
	(*ListRecoveryStoreShardingInfosResponse)(nil),                           // 4: ntt.monitoring.v4.ListRecoveryStoreShardingInfosResponse
	(*WatchRecoveryStoreShardingInfoRequest)(nil),                            // 5: ntt.monitoring.v4.WatchRecoveryStoreShardingInfoRequest
	(*WatchRecoveryStoreShardingInfoResponse)(nil),                           // 6: ntt.monitoring.v4.WatchRecoveryStoreShardingInfoResponse
	(*WatchRecoveryStoreShardingInfosRequest)(nil),                           // 7: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosRequest
	(*WatchRecoveryStoreShardingInfosResponse)(nil),                          // 8: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosResponse
	(*CreateRecoveryStoreShardingInfoRequest)(nil),                           // 9: ntt.monitoring.v4.CreateRecoveryStoreShardingInfoRequest
	(*UpdateRecoveryStoreShardingInfoRequest)(nil),                           // 10: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest
	(*DeleteRecoveryStoreShardingInfoRequest)(nil),                           // 11: ntt.monitoring.v4.DeleteRecoveryStoreShardingInfoRequest
	(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)(nil),          // 12: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosResponse.PageTokenChange
	(*UpdateRecoveryStoreShardingInfoRequest_CAS)(nil),                       // 13: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.CAS
	(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil), // 14: ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	(view.View)(0), // 15: goten.types.View
	(*recovery_store_sharding_info.RecoveryStoreShardingInfo)(nil),       // 16: ntt.monitoring.v4.RecoveryStoreShardingInfo
	(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)(nil), // 17: ntt.monitoring.v4.RecoveryStoreShardingInfoChange
	(watch_type.WatchType)(0),     // 18: goten.types.WatchType
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 20: google.protobuf.Empty
}
var edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_depIdxs = []int32{
	14, // 0: ntt.monitoring.v4.GetRecoveryStoreShardingInfoRequest.field_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	15, // 1: ntt.monitoring.v4.GetRecoveryStoreShardingInfoRequest.view:type_name -> goten.types.View
	14, // 2: ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosRequest.field_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	15, // 3: ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosRequest.view:type_name -> goten.types.View
	16, // 4: ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosResponse.recovery_store_sharding_infos:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	14, // 5: ntt.monitoring.v4.ListRecoveryStoreShardingInfosRequest.field_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	15, // 6: ntt.monitoring.v4.ListRecoveryStoreShardingInfosRequest.view:type_name -> goten.types.View
	16, // 7: ntt.monitoring.v4.ListRecoveryStoreShardingInfosResponse.recovery_store_sharding_infos:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	14, // 8: ntt.monitoring.v4.WatchRecoveryStoreShardingInfoRequest.field_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	15, // 9: ntt.monitoring.v4.WatchRecoveryStoreShardingInfoRequest.view:type_name -> goten.types.View
	17, // 10: ntt.monitoring.v4.WatchRecoveryStoreShardingInfoResponse.change:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfoChange
	18, // 11: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosRequest.type:type_name -> goten.types.WatchType
	19, // 12: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosRequest.starting_time:type_name -> google.protobuf.Timestamp
	14, // 13: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosRequest.field_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	15, // 14: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosRequest.view:type_name -> goten.types.View
	17, // 15: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosResponse.recovery_store_sharding_info_changes:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfoChange
	12, // 16: ntt.monitoring.v4.WatchRecoveryStoreShardingInfosResponse.page_token_change:type_name -> ntt.monitoring.v4.WatchRecoveryStoreShardingInfosResponse.PageTokenChange
	16, // 17: ntt.monitoring.v4.CreateRecoveryStoreShardingInfoRequest.recovery_store_sharding_info:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	16, // 18: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.recovery_store_sharding_info:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	14, // 19: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.update_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	13, // 20: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.cas:type_name -> ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.CAS
	16, // 21: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.CAS.conditional_state:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	14, // 22: ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest.CAS.field_mask:type_name -> ntt.monitoring.v4.RecoveryStoreShardingInfo_FieldMask
	0,  // 23: ntt.monitoring.v4.RecoveryStoreShardingInfoService.GetRecoveryStoreShardingInfo:input_type -> ntt.monitoring.v4.GetRecoveryStoreShardingInfoRequest
	1,  // 24: ntt.monitoring.v4.RecoveryStoreShardingInfoService.BatchGetRecoveryStoreShardingInfos:input_type -> ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosRequest
	3,  // 25: ntt.monitoring.v4.RecoveryStoreShardingInfoService.ListRecoveryStoreShardingInfos:input_type -> ntt.monitoring.v4.ListRecoveryStoreShardingInfosRequest
	5,  // 26: ntt.monitoring.v4.RecoveryStoreShardingInfoService.WatchRecoveryStoreShardingInfo:input_type -> ntt.monitoring.v4.WatchRecoveryStoreShardingInfoRequest
	7,  // 27: ntt.monitoring.v4.RecoveryStoreShardingInfoService.WatchRecoveryStoreShardingInfos:input_type -> ntt.monitoring.v4.WatchRecoveryStoreShardingInfosRequest
	9,  // 28: ntt.monitoring.v4.RecoveryStoreShardingInfoService.CreateRecoveryStoreShardingInfo:input_type -> ntt.monitoring.v4.CreateRecoveryStoreShardingInfoRequest
	10, // 29: ntt.monitoring.v4.RecoveryStoreShardingInfoService.UpdateRecoveryStoreShardingInfo:input_type -> ntt.monitoring.v4.UpdateRecoveryStoreShardingInfoRequest
	11, // 30: ntt.monitoring.v4.RecoveryStoreShardingInfoService.DeleteRecoveryStoreShardingInfo:input_type -> ntt.monitoring.v4.DeleteRecoveryStoreShardingInfoRequest
	16, // 31: ntt.monitoring.v4.RecoveryStoreShardingInfoService.GetRecoveryStoreShardingInfo:output_type -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	2,  // 32: ntt.monitoring.v4.RecoveryStoreShardingInfoService.BatchGetRecoveryStoreShardingInfos:output_type -> ntt.monitoring.v4.BatchGetRecoveryStoreShardingInfosResponse
	4,  // 33: ntt.monitoring.v4.RecoveryStoreShardingInfoService.ListRecoveryStoreShardingInfos:output_type -> ntt.monitoring.v4.ListRecoveryStoreShardingInfosResponse
	6,  // 34: ntt.monitoring.v4.RecoveryStoreShardingInfoService.WatchRecoveryStoreShardingInfo:output_type -> ntt.monitoring.v4.WatchRecoveryStoreShardingInfoResponse
	8,  // 35: ntt.monitoring.v4.RecoveryStoreShardingInfoService.WatchRecoveryStoreShardingInfos:output_type -> ntt.monitoring.v4.WatchRecoveryStoreShardingInfosResponse
	16, // 36: ntt.monitoring.v4.RecoveryStoreShardingInfoService.CreateRecoveryStoreShardingInfo:output_type -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	16, // 37: ntt.monitoring.v4.RecoveryStoreShardingInfoService.UpdateRecoveryStoreShardingInfo:output_type -> ntt.monitoring.v4.RecoveryStoreShardingInfo
	20, // 38: ntt.monitoring.v4.RecoveryStoreShardingInfoService.DeleteRecoveryStoreShardingInfo:output_type -> google.protobuf.Empty
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_init() }
func edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_init() {
	if edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecoveryStoreShardingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRecoveryStoreShardingInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRecoveryStoreShardingInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecoveryStoreShardingInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecoveryStoreShardingInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRecoveryStoreShardingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRecoveryStoreShardingInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRecoveryStoreShardingInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRecoveryStoreShardingInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecoveryStoreShardingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecoveryStoreShardingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecoveryStoreShardingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecoveryStoreShardingInfoRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto = out.File
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_goTypes = nil
	edgelq_monitoring_proto_v4_recovery_store_sharding_info_service_proto_depIdxs = nil
}
