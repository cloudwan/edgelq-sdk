// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/alerting_condition_service.proto
// DO NOT EDIT!!!

package alerting_condition_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetAlertingCondition method.
type GetAlertingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.AlertingCondition
	Name *alerting_condition.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,3,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetAlertingConditionRequest) Reset() {
	*m = GetAlertingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetAlertingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetAlertingConditionRequest) ProtoMessage() {}

func (m *GetAlertingConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetAlertingConditionRequest) GotenMessage() {}

// Deprecated, Use GetAlertingConditionRequest.ProtoReflect.Descriptor instead.
func (*GetAlertingConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetAlertingConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetAlertingConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetAlertingConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetAlertingConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetAlertingConditionRequest) GetName() *alerting_condition.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetAlertingConditionRequest) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetAlertingConditionRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetAlertingConditionRequest) SetName(fv *alerting_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetAlertingConditionRequest"))
	}
	m.Name = fv
}

func (m *GetAlertingConditionRequest) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetAlertingConditionRequest"))
	}
	m.FieldMask = fv
}

func (m *GetAlertingConditionRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetAlertingConditionRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetAlertingConditions method.
type BatchGetAlertingConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of AlertingConditions
	Names []*alerting_condition.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,3,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetAlertingConditionsRequest) Reset() {
	*m = BatchGetAlertingConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAlertingConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAlertingConditionsRequest) ProtoMessage() {}

func (m *BatchGetAlertingConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAlertingConditionsRequest) GotenMessage() {}

// Deprecated, Use BatchGetAlertingConditionsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetAlertingConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetAlertingConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAlertingConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAlertingConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAlertingConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAlertingConditionsRequest) GetNames() []*alerting_condition.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetAlertingConditionsRequest) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetAlertingConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetAlertingConditionsRequest) SetNames(fv []*alerting_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetAlertingConditionsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetAlertingConditionsRequest) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetAlertingConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetAlertingConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetAlertingConditionsRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetAlertingConditions method.
type BatchGetAlertingConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found AlertingConditions
	AlertingConditions []*alerting_condition.AlertingCondition `protobuf:"bytes,1,rep,name=alerting_conditions,json=alertingConditions,proto3" json:"alerting_conditions,omitempty"`
	// list of not found AlertingConditions
	Missing []*alerting_condition.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetAlertingConditionsResponse) Reset() {
	*m = BatchGetAlertingConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAlertingConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAlertingConditionsResponse) ProtoMessage() {}

func (m *BatchGetAlertingConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAlertingConditionsResponse) GotenMessage() {}

// Deprecated, Use BatchGetAlertingConditionsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetAlertingConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetAlertingConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAlertingConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAlertingConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAlertingConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAlertingConditionsResponse) GetAlertingConditions() []*alerting_condition.AlertingCondition {
	if m != nil {
		return m.AlertingConditions
	}
	return nil
}

func (m *BatchGetAlertingConditionsResponse) GetMissing() []*alerting_condition.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetAlertingConditionsResponse) SetAlertingConditions(fv []*alerting_condition.AlertingCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingConditions", "BatchGetAlertingConditionsResponse"))
	}
	m.AlertingConditions = fv
}

func (m *BatchGetAlertingConditionsResponse) SetMissing(fv []*alerting_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetAlertingConditionsResponse"))
	}
	m.Missing = fv
}

// A request message of the ListAlertingConditions method.
type ListAlertingConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.AlertingCondition
	Parent *alerting_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer AlertingConditions than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListAlertingConditionsResponse.next_page_token.
	PageToken *alerting_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *alerting_condition.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *alerting_condition.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,6,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListAlertingConditionsRequest) Reset() {
	*m = ListAlertingConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAlertingConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAlertingConditionsRequest) ProtoMessage() {}

func (m *ListAlertingConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAlertingConditionsRequest) GotenMessage() {}

// Deprecated, Use ListAlertingConditionsRequest.ProtoReflect.Descriptor instead.
func (*ListAlertingConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListAlertingConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAlertingConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAlertingConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAlertingConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAlertingConditionsRequest) GetParent() *alerting_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListAlertingConditionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListAlertingConditionsRequest) GetPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListAlertingConditionsRequest) GetOrderBy() *alerting_condition.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListAlertingConditionsRequest) GetFilter() *alerting_condition.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAlertingConditionsRequest) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListAlertingConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListAlertingConditionsRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListAlertingConditionsRequest) SetParent(fv *alerting_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListAlertingConditionsRequest"))
	}
	m.Parent = fv
}

func (m *ListAlertingConditionsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListAlertingConditionsRequest"))
	}
	m.PageSize = fv
}

func (m *ListAlertingConditionsRequest) SetPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListAlertingConditionsRequest"))
	}
	m.PageToken = fv
}

func (m *ListAlertingConditionsRequest) SetOrderBy(fv *alerting_condition.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListAlertingConditionsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListAlertingConditionsRequest) SetFilter(fv *alerting_condition.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListAlertingConditionsRequest"))
	}
	m.Filter = fv
}

func (m *ListAlertingConditionsRequest) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListAlertingConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListAlertingConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListAlertingConditionsRequest"))
	}
	m.View = fv
}

func (m *ListAlertingConditionsRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListAlertingConditionsRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListAlertingConditions method.
type ListAlertingConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of AlertingConditions
	AlertingConditions []*alerting_condition.AlertingCondition `protobuf:"bytes,1,rep,name=alerting_conditions,json=alertingConditions,proto3" json:"alerting_conditions,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListAlertingConditionsRequest.page_token.
	PrevPageToken *alerting_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListAlertingConditionsRequest.page_token.
	NextPageToken *alerting_condition.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total AlertingConditions across all pages or 0, if there are no
	// items, paging info was not requested or there was an error while trying to
	// get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListAlertingConditionsResponse) Reset() {
	*m = ListAlertingConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAlertingConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAlertingConditionsResponse) ProtoMessage() {}

func (m *ListAlertingConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAlertingConditionsResponse) GotenMessage() {}

// Deprecated, Use ListAlertingConditionsResponse.ProtoReflect.Descriptor instead.
func (*ListAlertingConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListAlertingConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAlertingConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAlertingConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAlertingConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAlertingConditionsResponse) GetAlertingConditions() []*alerting_condition.AlertingCondition {
	if m != nil {
		return m.AlertingConditions
	}
	return nil
}

func (m *ListAlertingConditionsResponse) GetPrevPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListAlertingConditionsResponse) GetNextPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListAlertingConditionsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListAlertingConditionsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListAlertingConditionsResponse) SetAlertingConditions(fv []*alerting_condition.AlertingCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingConditions", "ListAlertingConditionsResponse"))
	}
	m.AlertingConditions = fv
}

func (m *ListAlertingConditionsResponse) SetPrevPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListAlertingConditionsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListAlertingConditionsResponse) SetNextPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListAlertingConditionsResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListAlertingConditionsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListAlertingConditionsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListAlertingConditionsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListAlertingConditionsResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchAlertingCondition method.
type WatchAlertingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.AlertingCondition
	Name *alerting_condition.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,2,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchAlertingConditionRequest) Reset() {
	*m = WatchAlertingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAlertingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAlertingConditionRequest) ProtoMessage() {}

func (m *WatchAlertingConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAlertingConditionRequest) GotenMessage() {}

// Deprecated, Use WatchAlertingConditionRequest.ProtoReflect.Descriptor instead.
func (*WatchAlertingConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchAlertingConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAlertingConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAlertingConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAlertingConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAlertingConditionRequest) GetName() *alerting_condition.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchAlertingConditionRequest) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAlertingConditionRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAlertingConditionRequest) SetName(fv *alerting_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchAlertingConditionRequest"))
	}
	m.Name = fv
}

func (m *WatchAlertingConditionRequest) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAlertingConditionRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAlertingConditionRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAlertingConditionRequest"))
	}
	m.View = fv
}

// A response message of the WatchAlertingCondition method.
type WatchAlertingConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *alerting_condition.AlertingConditionChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchAlertingConditionResponse) Reset() {
	*m = WatchAlertingConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAlertingConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAlertingConditionResponse) ProtoMessage() {}

func (m *WatchAlertingConditionResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAlertingConditionResponse) GotenMessage() {}

// Deprecated, Use WatchAlertingConditionResponse.ProtoReflect.Descriptor instead.
func (*WatchAlertingConditionResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchAlertingConditionResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAlertingConditionResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAlertingConditionResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAlertingConditionResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAlertingConditionResponse) GetChange() *alerting_condition.AlertingConditionChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchAlertingConditionResponse) SetChange(fv *alerting_condition.AlertingConditionChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchAlertingConditionResponse"))
	}
	m.Change = fv
}

// A request message of the WatchAlertingConditions method.
type WatchAlertingConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Parent name of ntt.monitoring.v4.AlertingCondition
	Parent *alerting_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer AlertingConditions than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *alerting_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *alerting_condition.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *alerting_condition.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to AlertingCondition that
	// don't affect any of masked fields won't be sent back.
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,6,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// AlertingCondition that don't affect any of masked fields won't be sent
	// back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchAlertingConditionsRequest) Reset() {
	*m = WatchAlertingConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAlertingConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAlertingConditionsRequest) ProtoMessage() {}

func (m *WatchAlertingConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAlertingConditionsRequest) GotenMessage() {}

// Deprecated, Use WatchAlertingConditionsRequest.ProtoReflect.Descriptor instead.
func (*WatchAlertingConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchAlertingConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAlertingConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAlertingConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAlertingConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAlertingConditionsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchAlertingConditionsRequest) GetParent() *alerting_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchAlertingConditionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchAlertingConditionsRequest) GetPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchAlertingConditionsRequest) GetOrderBy() *alerting_condition.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchAlertingConditionsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAlertingConditionsRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchAlertingConditionsRequest) GetFilter() *alerting_condition.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchAlertingConditionsRequest) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAlertingConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAlertingConditionsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchAlertingConditionsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchAlertingConditionsRequest"))
	}
	m.Type = fv
}

func (m *WatchAlertingConditionsRequest) SetParent(fv *alerting_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchAlertingConditionsRequest"))
	}
	m.Parent = fv
}

func (m *WatchAlertingConditionsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchAlertingConditionsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchAlertingConditionsRequest) SetPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchAlertingConditionsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchAlertingConditionsRequest) SetOrderBy(fv *alerting_condition.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchAlertingConditionsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchAlertingConditionsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAlertingConditionsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchAlertingConditionsRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchAlertingConditionsRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchAlertingConditionsRequest) SetFilter(fv *alerting_condition.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchAlertingConditionsRequest"))
	}
	m.Filter = fv
}

func (m *WatchAlertingConditionsRequest) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAlertingConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAlertingConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAlertingConditionsRequest"))
	}
	m.View = fv
}

func (m *WatchAlertingConditionsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchAlertingConditionsRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchAlertingConditions method.
type WatchAlertingConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of AlertingConditions
	AlertingConditionChanges []*alerting_condition.AlertingConditionChange `protobuf:"bytes,2,rep,name=alerting_condition_changes,json=alertingConditionChanges,proto3" json:"alerting_condition_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All AlertingConditions will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchAlertingConditionsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (AlertingConditions will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchAlertingConditionsResponse) Reset() {
	*m = WatchAlertingConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAlertingConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAlertingConditionsResponse) ProtoMessage() {}

func (m *WatchAlertingConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAlertingConditionsResponse) GotenMessage() {}

// Deprecated, Use WatchAlertingConditionsResponse.ProtoReflect.Descriptor instead.
func (*WatchAlertingConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchAlertingConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAlertingConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAlertingConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAlertingConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAlertingConditionsResponse) GetAlertingConditionChanges() []*alerting_condition.AlertingConditionChange {
	if m != nil {
		return m.AlertingConditionChanges
	}
	return nil
}

func (m *WatchAlertingConditionsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchAlertingConditionsResponse) GetPageTokenChange() *WatchAlertingConditionsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchAlertingConditionsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAlertingConditionsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchAlertingConditionsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchAlertingConditionsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchAlertingConditionsResponse) SetAlertingConditionChanges(fv []*alerting_condition.AlertingConditionChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingConditionChanges", "WatchAlertingConditionsResponse"))
	}
	m.AlertingConditionChanges = fv
}

func (m *WatchAlertingConditionsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchAlertingConditionsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchAlertingConditionsResponse) SetPageTokenChange(fv *WatchAlertingConditionsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchAlertingConditionsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchAlertingConditionsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAlertingConditionsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchAlertingConditionsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchAlertingConditionsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchAlertingConditionsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchAlertingConditionsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchAlertingConditionsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchAlertingConditionsResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateAlertingCondition method.
type CreateAlertingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.AlertingCondition
	Parent *alerting_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// AlertingCondition resource body
	AlertingCondition *alerting_condition.AlertingCondition `protobuf:"bytes,2,opt,name=alerting_condition,json=alertingCondition,proto3" json:"alerting_condition,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateAlertingConditionRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreateAlertingConditionRequest) Reset() {
	*m = CreateAlertingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateAlertingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateAlertingConditionRequest) ProtoMessage() {}

func (m *CreateAlertingConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateAlertingConditionRequest) GotenMessage() {}

// Deprecated, Use CreateAlertingConditionRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertingConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateAlertingConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateAlertingConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateAlertingConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateAlertingConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateAlertingConditionRequest) GetParent() *alerting_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateAlertingConditionRequest) GetAlertingCondition() *alerting_condition.AlertingCondition {
	if m != nil {
		return m.AlertingCondition
	}
	return nil
}

func (m *CreateAlertingConditionRequest) GetResponseMask() *CreateAlertingConditionRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateAlertingConditionRequest) SetParent(fv *alerting_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateAlertingConditionRequest"))
	}
	m.Parent = fv
}

func (m *CreateAlertingConditionRequest) SetAlertingCondition(fv *alerting_condition.AlertingCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingCondition", "CreateAlertingConditionRequest"))
	}
	m.AlertingCondition = fv
}

func (m *CreateAlertingConditionRequest) SetResponseMask(fv *CreateAlertingConditionRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateAlertingConditionRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateAlertingCondition method.
type UpdateAlertingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AlertingCondition resource body
	AlertingCondition *alerting_condition.AlertingCondition `protobuf:"bytes,2,opt,name=alerting_condition,json=alertingCondition,proto3" json:"alerting_condition,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,3,opt,customtype=AlertingCondition_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateAlertingConditionRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdateAlertingConditionRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdateAlertingConditionRequest) Reset() {
	*m = UpdateAlertingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAlertingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAlertingConditionRequest) ProtoMessage() {}

func (m *UpdateAlertingConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAlertingConditionRequest) GotenMessage() {}

// Deprecated, Use UpdateAlertingConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertingConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateAlertingConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAlertingConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAlertingConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAlertingConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAlertingConditionRequest) GetAlertingCondition() *alerting_condition.AlertingCondition {
	if m != nil {
		return m.AlertingCondition
	}
	return nil
}

func (m *UpdateAlertingConditionRequest) GetUpdateMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateAlertingConditionRequest) GetCas() *UpdateAlertingConditionRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateAlertingConditionRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateAlertingConditionRequest) GetResponseMask() *UpdateAlertingConditionRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateAlertingConditionRequest) SetAlertingCondition(fv *alerting_condition.AlertingCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingCondition", "UpdateAlertingConditionRequest"))
	}
	m.AlertingCondition = fv
}

func (m *UpdateAlertingConditionRequest) SetUpdateMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateAlertingConditionRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateAlertingConditionRequest) SetCas(fv *UpdateAlertingConditionRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateAlertingConditionRequest"))
	}
	m.Cas = fv
}

func (m *UpdateAlertingConditionRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateAlertingConditionRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateAlertingConditionRequest) SetResponseMask(fv *UpdateAlertingConditionRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateAlertingConditionRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteAlertingCondition method.
type DeleteAlertingConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.AlertingCondition
	Name *alerting_condition.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, method will be successful
	// and will not return NotFound error.
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (m *DeleteAlertingConditionRequest) Reset() {
	*m = DeleteAlertingConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteAlertingConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteAlertingConditionRequest) ProtoMessage() {}

func (m *DeleteAlertingConditionRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteAlertingConditionRequest) GotenMessage() {}

// Deprecated, Use DeleteAlertingConditionRequest.ProtoReflect.Descriptor instead.
func (*DeleteAlertingConditionRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteAlertingConditionRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteAlertingConditionRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteAlertingConditionRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteAlertingConditionRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteAlertingConditionRequest) GetName() *alerting_condition.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteAlertingConditionRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *DeleteAlertingConditionRequest) SetName(fv *alerting_condition.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteAlertingConditionRequest"))
	}
	m.Name = fv
}

func (m *DeleteAlertingConditionRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "DeleteAlertingConditionRequest"))
	}
	m.AllowMissing = fv
}

// A request message of the SearchAlertingConditions method.
type SearchAlertingConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.AlertingCondition
	Parent *alerting_condition.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer AlertingConditions than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// SearchAlertingConditionsResponse.next_page_token.
	PageToken *alerting_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *alerting_condition.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *alerting_condition.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,6,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Optional search phrase used to further filter results.
	Phrase string `protobuf:"bytes,8,opt,name=phrase,proto3" json:"phrase,omitempty"`
}

func (m *SearchAlertingConditionsRequest) Reset() {
	*m = SearchAlertingConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchAlertingConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchAlertingConditionsRequest) ProtoMessage() {}

func (m *SearchAlertingConditionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchAlertingConditionsRequest) GotenMessage() {}

// Deprecated, Use SearchAlertingConditionsRequest.ProtoReflect.Descriptor instead.
func (*SearchAlertingConditionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{12}
}

func (m *SearchAlertingConditionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchAlertingConditionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchAlertingConditionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchAlertingConditionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchAlertingConditionsRequest) GetParent() *alerting_condition.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SearchAlertingConditionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *SearchAlertingConditionsRequest) GetPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *SearchAlertingConditionsRequest) GetOrderBy() *alerting_condition.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SearchAlertingConditionsRequest) GetFilter() *alerting_condition.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchAlertingConditionsRequest) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchAlertingConditionsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *SearchAlertingConditionsRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *SearchAlertingConditionsRequest) SetParent(fv *alerting_condition.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "SearchAlertingConditionsRequest"))
	}
	m.Parent = fv
}

func (m *SearchAlertingConditionsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "SearchAlertingConditionsRequest"))
	}
	m.PageSize = fv
}

func (m *SearchAlertingConditionsRequest) SetPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "SearchAlertingConditionsRequest"))
	}
	m.PageToken = fv
}

func (m *SearchAlertingConditionsRequest) SetOrderBy(fv *alerting_condition.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "SearchAlertingConditionsRequest"))
	}
	m.OrderBy = fv
}

func (m *SearchAlertingConditionsRequest) SetFilter(fv *alerting_condition.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "SearchAlertingConditionsRequest"))
	}
	m.Filter = fv
}

func (m *SearchAlertingConditionsRequest) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "SearchAlertingConditionsRequest"))
	}
	m.FieldMask = fv
}

func (m *SearchAlertingConditionsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "SearchAlertingConditionsRequest"))
	}
	m.View = fv
}

func (m *SearchAlertingConditionsRequest) SetPhrase(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phrase", "SearchAlertingConditionsRequest"))
	}
	m.Phrase = fv
}

// A response message of the SearchAlertingConditions method.
type SearchAlertingConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of AlertingConditions
	AlertingConditions []*alerting_condition.AlertingCondition `protobuf:"bytes,1,rep,name=alerting_conditions,json=alertingConditions,proto3" json:"alerting_conditions,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the SearchAlertingConditionsRequest.page_token.
	PrevPageToken *alerting_condition.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the SearchAlertingConditionsRequest.page_token.
	NextPageToken *alerting_condition.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page (0 if no page tokens were given). Page
	// index can be computed from offset and limit provided in a request
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total AlertingConditions across all pages.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *SearchAlertingConditionsResponse) Reset() {
	*m = SearchAlertingConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchAlertingConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchAlertingConditionsResponse) ProtoMessage() {}

func (m *SearchAlertingConditionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchAlertingConditionsResponse) GotenMessage() {}

// Deprecated, Use SearchAlertingConditionsResponse.ProtoReflect.Descriptor instead.
func (*SearchAlertingConditionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{13}
}

func (m *SearchAlertingConditionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchAlertingConditionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchAlertingConditionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchAlertingConditionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchAlertingConditionsResponse) GetAlertingConditions() []*alerting_condition.AlertingCondition {
	if m != nil {
		return m.AlertingConditions
	}
	return nil
}

func (m *SearchAlertingConditionsResponse) GetPrevPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *SearchAlertingConditionsResponse) GetNextPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *SearchAlertingConditionsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *SearchAlertingConditionsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *SearchAlertingConditionsResponse) SetAlertingConditions(fv []*alerting_condition.AlertingCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingConditions", "SearchAlertingConditionsResponse"))
	}
	m.AlertingConditions = fv
}

func (m *SearchAlertingConditionsResponse) SetPrevPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "SearchAlertingConditionsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *SearchAlertingConditionsResponse) SetNextPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "SearchAlertingConditionsResponse"))
	}
	m.NextPageToken = fv
}

func (m *SearchAlertingConditionsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "SearchAlertingConditionsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *SearchAlertingConditionsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "SearchAlertingConditionsResponse"))
	}
	m.TotalResultsCount = fv
}

type WatchAlertingConditionsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *alerting_condition.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *alerting_condition.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) Reset() {
	*m = WatchAlertingConditionsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAlertingConditionsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchAlertingConditionsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAlertingConditionsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchAlertingConditionsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchAlertingConditionsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) GetPrevPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) GetNextPageToken() *alerting_condition.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) SetPrevPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchAlertingConditionsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchAlertingConditionsResponse_PageTokenChange) SetNextPageToken(fv *alerting_condition.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchAlertingConditionsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateAlertingConditionRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateAlertingConditionRequest_ResponseMask_BodyMask
	Masking isCreateAlertingConditionRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateAlertingConditionRequest_ResponseMask) Reset() {
	*m = CreateAlertingConditionRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateAlertingConditionRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateAlertingConditionRequest_ResponseMask) ProtoMessage() {}

func (m *CreateAlertingConditionRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateAlertingConditionRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateAlertingConditionRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateAlertingConditionRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateAlertingConditionRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateAlertingConditionRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateAlertingConditionRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateAlertingConditionRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateAlertingConditionRequest_ResponseMask_Masking interface {
	isCreateAlertingConditionRequest_ResponseMask_Masking()
}

type CreateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreateAlertingConditionRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,2,opt,customtype=AlertingCondition_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody) isCreateAlertingConditionRequest_ResponseMask_Masking() {
}
func (*CreateAlertingConditionRequest_ResponseMask_BodyMask) isCreateAlertingConditionRequest_ResponseMask_Masking() {
}
func (m *CreateAlertingConditionRequest_ResponseMask) GetMasking() isCreateAlertingConditionRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateAlertingConditionRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateAlertingConditionRequest_ResponseMask) GetBodyMask() *alerting_condition.AlertingCondition_FieldMask {
	if x, ok := m.GetMasking().(*CreateAlertingConditionRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateAlertingConditionRequest_ResponseMask) SetMasking(ofv isCreateAlertingConditionRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateAlertingConditionRequest_ResponseMask_Masking", "CreateAlertingConditionRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateAlertingConditionRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateAlertingConditionRequest_ResponseMask) SetBodyMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	m.SetMasking(&CreateAlertingConditionRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateAlertingConditionRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *alerting_condition.AlertingCondition `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,2,opt,customtype=AlertingCondition_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdateAlertingConditionRequest_CAS) Reset() {
	*m = UpdateAlertingConditionRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAlertingConditionRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAlertingConditionRequest_CAS) ProtoMessage() {}

func (m *UpdateAlertingConditionRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAlertingConditionRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateAlertingConditionRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateAlertingConditionRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateAlertingConditionRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAlertingConditionRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAlertingConditionRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAlertingConditionRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAlertingConditionRequest_CAS) GetConditionalState() *alerting_condition.AlertingCondition {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateAlertingConditionRequest_CAS) GetFieldMask() *alerting_condition.AlertingCondition_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateAlertingConditionRequest_CAS) SetConditionalState(fv *alerting_condition.AlertingCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateAlertingConditionRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateAlertingConditionRequest_CAS) SetFieldMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateAlertingConditionRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateAlertingConditionRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateAlertingConditionRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateAlertingConditionRequest_ResponseMask_BodyMask
	Masking isUpdateAlertingConditionRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateAlertingConditionRequest_ResponseMask) Reset() {
	*m = UpdateAlertingConditionRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAlertingConditionRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAlertingConditionRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateAlertingConditionRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAlertingConditionRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateAlertingConditionRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateAlertingConditionRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateAlertingConditionRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAlertingConditionRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAlertingConditionRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAlertingConditionRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateAlertingConditionRequest_ResponseMask_Masking interface {
	isUpdateAlertingConditionRequest_ResponseMask_Masking()
}

type UpdateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdateAlertingConditionRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdateAlertingConditionRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *alerting_condition.AlertingCondition_FieldMask `protobuf:"bytes,3,opt,customtype=AlertingCondition_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody) isUpdateAlertingConditionRequest_ResponseMask_Masking() {
}
func (*UpdateAlertingConditionRequest_ResponseMask_UpdatedFieldsOnly) isUpdateAlertingConditionRequest_ResponseMask_Masking() {
}
func (*UpdateAlertingConditionRequest_ResponseMask_BodyMask) isUpdateAlertingConditionRequest_ResponseMask_Masking() {
}
func (m *UpdateAlertingConditionRequest_ResponseMask) GetMasking() isUpdateAlertingConditionRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateAlertingConditionRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateAlertingConditionRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateAlertingConditionRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateAlertingConditionRequest_ResponseMask) GetBodyMask() *alerting_condition.AlertingCondition_FieldMask {
	if x, ok := m.GetMasking().(*UpdateAlertingConditionRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateAlertingConditionRequest_ResponseMask) SetMasking(ofv isUpdateAlertingConditionRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateAlertingConditionRequest_ResponseMask_Masking", "UpdateAlertingConditionRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateAlertingConditionRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateAlertingConditionRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateAlertingConditionRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateAlertingConditionRequest_ResponseMask) SetBodyMask(fv *alerting_condition.AlertingCondition_FieldMask) {
	m.SetMasking(&UpdateAlertingConditionRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_monitoring_proto_v4_alerting_condition_service_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x22, 0xd7, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a,
	0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xb0, 0x01, 0x0a, 0x22, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x0a,
	0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc9, 0x03,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xb2, 0xda, 0x21, 0x15, 0x3a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2,
	0xda, 0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x2a, 0x13, 0x0a, 0x11, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x1a,
	0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2, 0xda,
	0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda,
	0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xb2, 0xda, 0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xcb, 0x01, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x64,
	0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xde, 0x04, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x3a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12,
	0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x2a,
	0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x1a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12,
	0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x1f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1a, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xb2, 0xda, 0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xca, 0x03, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xb2, 0xda, 0x21, 0x15, 0x3a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x61, 0x0a, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02,
	0x08, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xac, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x54, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a,
	0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xca, 0x06, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x12,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c,
	0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x11, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xb8, 0x01, 0x0a, 0x03, 0x43,
	0x41, 0x53, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x54, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xde, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69,
	0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x74, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x0a, 0x13, 0x0a, 0x11,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xb3, 0x03, 0x0a,
	0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x3a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xb2, 0xda, 0x21, 0x15, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x2a, 0x13, 0x0a, 0x11,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15,
	0x1a, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x54, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x19, 0xb2,
	0xda, 0x21, 0x15, 0x32, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x22, 0x13, 0x0a,
	0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15,
	0x22, 0x13, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xa8, 0x14, 0x0a, 0x18,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x82, 0xdb, 0x21, 0x28, 0x0a, 0x11,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12,
	0xff, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xdb, 0x21,
	0x3f, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01,
	0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x15, 0x12, 0x13, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76,
	0x34, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26,
	0x00, 0x12, 0x9b, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9b, 0x01, 0x82, 0xdb, 0x21, 0x3e, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32,
	0x15, 0x12, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12,
	0x91, 0x02, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8f, 0x01, 0x82, 0xdb, 0x21, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22, 0x4d,
	0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26,
	0x00, 0x30, 0x01, 0x12, 0xae, 0x02, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x82, 0xdb, 0x21, 0x46, 0x0a, 0x11, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x1c, 0x12, 0x1a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22,
	0x4d, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc,
	0x26, 0x00, 0x30, 0x01, 0x12, 0xab, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x82, 0xdb, 0x21, 0x43,
	0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x1c, 0x12,
	0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x3a,
	0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x47, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8a, 0xcc, 0x26, 0x02,
	0x10, 0x01, 0x12, 0xb4, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x82, 0xdb, 0x21, 0x39, 0x0a, 0x11,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x14, 0x12, 0x12, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x70, 0x3a, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5a, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xe9, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x82, 0x01, 0x82, 0xdb, 0x21, 0x23, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x2a, 0x47, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x8a,
	0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xaa, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xdb,
	0x21, 0x40, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x15, 0x12, 0x13, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x4e,
	0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x8a, 0xcc,
	0x26, 0x00, 0x1a, 0x32, 0xca, 0x41, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xe5, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0,
	0x02, 0x5f, 0x0a, 0x19, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x34, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x8a, 0xff, 0xd0, 0x02, 0x5f, 0x0a, 0x19, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42,
	0x1d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00,
	0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x34, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescData = edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDesc
)

func edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDescData
}

var edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var edgelq_monitoring_proto_v4_alerting_condition_service_proto_goTypes = []interface{}{
	(*GetAlertingConditionRequest)(nil),                     // 0: ntt.monitoring.v4.GetAlertingConditionRequest
	(*BatchGetAlertingConditionsRequest)(nil),               // 1: ntt.monitoring.v4.BatchGetAlertingConditionsRequest
	(*BatchGetAlertingConditionsResponse)(nil),              // 2: ntt.monitoring.v4.BatchGetAlertingConditionsResponse
	(*ListAlertingConditionsRequest)(nil),                   // 3: ntt.monitoring.v4.ListAlertingConditionsRequest
	(*ListAlertingConditionsResponse)(nil),                  // 4: ntt.monitoring.v4.ListAlertingConditionsResponse
	(*WatchAlertingConditionRequest)(nil),                   // 5: ntt.monitoring.v4.WatchAlertingConditionRequest
	(*WatchAlertingConditionResponse)(nil),                  // 6: ntt.monitoring.v4.WatchAlertingConditionResponse
	(*WatchAlertingConditionsRequest)(nil),                  // 7: ntt.monitoring.v4.WatchAlertingConditionsRequest
	(*WatchAlertingConditionsResponse)(nil),                 // 8: ntt.monitoring.v4.WatchAlertingConditionsResponse
	(*CreateAlertingConditionRequest)(nil),                  // 9: ntt.monitoring.v4.CreateAlertingConditionRequest
	(*UpdateAlertingConditionRequest)(nil),                  // 10: ntt.monitoring.v4.UpdateAlertingConditionRequest
	(*DeleteAlertingConditionRequest)(nil),                  // 11: ntt.monitoring.v4.DeleteAlertingConditionRequest
	(*SearchAlertingConditionsRequest)(nil),                 // 12: ntt.monitoring.v4.SearchAlertingConditionsRequest
	(*SearchAlertingConditionsResponse)(nil),                // 13: ntt.monitoring.v4.SearchAlertingConditionsResponse
	(*WatchAlertingConditionsResponse_PageTokenChange)(nil), // 14: ntt.monitoring.v4.WatchAlertingConditionsResponse.PageTokenChange
	(*CreateAlertingConditionRequest_ResponseMask)(nil),     // 15: ntt.monitoring.v4.CreateAlertingConditionRequest.ResponseMask
	(*UpdateAlertingConditionRequest_CAS)(nil),              // 16: ntt.monitoring.v4.UpdateAlertingConditionRequest.CAS
	(*UpdateAlertingConditionRequest_ResponseMask)(nil),     // 17: ntt.monitoring.v4.UpdateAlertingConditionRequest.ResponseMask
	(*alerting_condition.AlertingCondition_FieldMask)(nil),  // 18: ntt.monitoring.v4.AlertingCondition_FieldMask
	(view.View)(0), // 19: goten.types.View
	(*alerting_condition.AlertingCondition)(nil),       // 20: ntt.monitoring.v4.AlertingCondition
	(*alerting_condition.AlertingConditionChange)(nil), // 21: ntt.monitoring.v4.AlertingConditionChange
	(watch_type.WatchType)(0),                          // 22: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                      // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                              // 24: google.protobuf.Empty
}
var edgelq_monitoring_proto_v4_alerting_condition_service_proto_depIdxs = []int32{
	18, // 0: ntt.monitoring.v4.GetAlertingConditionRequest.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	19, // 1: ntt.monitoring.v4.GetAlertingConditionRequest.view:type_name -> goten.types.View
	18, // 2: ntt.monitoring.v4.BatchGetAlertingConditionsRequest.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	19, // 3: ntt.monitoring.v4.BatchGetAlertingConditionsRequest.view:type_name -> goten.types.View
	20, // 4: ntt.monitoring.v4.BatchGetAlertingConditionsResponse.alerting_conditions:type_name -> ntt.monitoring.v4.AlertingCondition
	18, // 5: ntt.monitoring.v4.ListAlertingConditionsRequest.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	19, // 6: ntt.monitoring.v4.ListAlertingConditionsRequest.view:type_name -> goten.types.View
	20, // 7: ntt.monitoring.v4.ListAlertingConditionsResponse.alerting_conditions:type_name -> ntt.monitoring.v4.AlertingCondition
	18, // 8: ntt.monitoring.v4.WatchAlertingConditionRequest.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	19, // 9: ntt.monitoring.v4.WatchAlertingConditionRequest.view:type_name -> goten.types.View
	21, // 10: ntt.monitoring.v4.WatchAlertingConditionResponse.change:type_name -> ntt.monitoring.v4.AlertingConditionChange
	22, // 11: ntt.monitoring.v4.WatchAlertingConditionsRequest.type:type_name -> goten.types.WatchType
	23, // 12: ntt.monitoring.v4.WatchAlertingConditionsRequest.starting_time:type_name -> google.protobuf.Timestamp
	18, // 13: ntt.monitoring.v4.WatchAlertingConditionsRequest.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	19, // 14: ntt.monitoring.v4.WatchAlertingConditionsRequest.view:type_name -> goten.types.View
	21, // 15: ntt.monitoring.v4.WatchAlertingConditionsResponse.alerting_condition_changes:type_name -> ntt.monitoring.v4.AlertingConditionChange
	14, // 16: ntt.monitoring.v4.WatchAlertingConditionsResponse.page_token_change:type_name -> ntt.monitoring.v4.WatchAlertingConditionsResponse.PageTokenChange
	20, // 17: ntt.monitoring.v4.CreateAlertingConditionRequest.alerting_condition:type_name -> ntt.monitoring.v4.AlertingCondition
	15, // 18: ntt.monitoring.v4.CreateAlertingConditionRequest.response_mask:type_name -> ntt.monitoring.v4.CreateAlertingConditionRequest.ResponseMask
	20, // 19: ntt.monitoring.v4.UpdateAlertingConditionRequest.alerting_condition:type_name -> ntt.monitoring.v4.AlertingCondition
	18, // 20: ntt.monitoring.v4.UpdateAlertingConditionRequest.update_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	16, // 21: ntt.monitoring.v4.UpdateAlertingConditionRequest.cas:type_name -> ntt.monitoring.v4.UpdateAlertingConditionRequest.CAS
	17, // 22: ntt.monitoring.v4.UpdateAlertingConditionRequest.response_mask:type_name -> ntt.monitoring.v4.UpdateAlertingConditionRequest.ResponseMask
	18, // 23: ntt.monitoring.v4.SearchAlertingConditionsRequest.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	19, // 24: ntt.monitoring.v4.SearchAlertingConditionsRequest.view:type_name -> goten.types.View
	20, // 25: ntt.monitoring.v4.SearchAlertingConditionsResponse.alerting_conditions:type_name -> ntt.monitoring.v4.AlertingCondition
	18, // 26: ntt.monitoring.v4.CreateAlertingConditionRequest.ResponseMask.body_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	20, // 27: ntt.monitoring.v4.UpdateAlertingConditionRequest.CAS.conditional_state:type_name -> ntt.monitoring.v4.AlertingCondition
	18, // 28: ntt.monitoring.v4.UpdateAlertingConditionRequest.CAS.field_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	18, // 29: ntt.monitoring.v4.UpdateAlertingConditionRequest.ResponseMask.body_mask:type_name -> ntt.monitoring.v4.AlertingCondition_FieldMask
	0,  // 30: ntt.monitoring.v4.AlertingConditionService.GetAlertingCondition:input_type -> ntt.monitoring.v4.GetAlertingConditionRequest
	1,  // 31: ntt.monitoring.v4.AlertingConditionService.BatchGetAlertingConditions:input_type -> ntt.monitoring.v4.BatchGetAlertingConditionsRequest
	3,  // 32: ntt.monitoring.v4.AlertingConditionService.ListAlertingConditions:input_type -> ntt.monitoring.v4.ListAlertingConditionsRequest
	5,  // 33: ntt.monitoring.v4.AlertingConditionService.WatchAlertingCondition:input_type -> ntt.monitoring.v4.WatchAlertingConditionRequest
	7,  // 34: ntt.monitoring.v4.AlertingConditionService.WatchAlertingConditions:input_type -> ntt.monitoring.v4.WatchAlertingConditionsRequest
	9,  // 35: ntt.monitoring.v4.AlertingConditionService.CreateAlertingCondition:input_type -> ntt.monitoring.v4.CreateAlertingConditionRequest
	10, // 36: ntt.monitoring.v4.AlertingConditionService.UpdateAlertingCondition:input_type -> ntt.monitoring.v4.UpdateAlertingConditionRequest
	11, // 37: ntt.monitoring.v4.AlertingConditionService.DeleteAlertingCondition:input_type -> ntt.monitoring.v4.DeleteAlertingConditionRequest
	12, // 38: ntt.monitoring.v4.AlertingConditionService.SearchAlertingConditions:input_type -> ntt.monitoring.v4.SearchAlertingConditionsRequest
	20, // 39: ntt.monitoring.v4.AlertingConditionService.GetAlertingCondition:output_type -> ntt.monitoring.v4.AlertingCondition
	2,  // 40: ntt.monitoring.v4.AlertingConditionService.BatchGetAlertingConditions:output_type -> ntt.monitoring.v4.BatchGetAlertingConditionsResponse
	4,  // 41: ntt.monitoring.v4.AlertingConditionService.ListAlertingConditions:output_type -> ntt.monitoring.v4.ListAlertingConditionsResponse
	6,  // 42: ntt.monitoring.v4.AlertingConditionService.WatchAlertingCondition:output_type -> ntt.monitoring.v4.WatchAlertingConditionResponse
	8,  // 43: ntt.monitoring.v4.AlertingConditionService.WatchAlertingConditions:output_type -> ntt.monitoring.v4.WatchAlertingConditionsResponse
	20, // 44: ntt.monitoring.v4.AlertingConditionService.CreateAlertingCondition:output_type -> ntt.monitoring.v4.AlertingCondition
	20, // 45: ntt.monitoring.v4.AlertingConditionService.UpdateAlertingCondition:output_type -> ntt.monitoring.v4.AlertingCondition
	24, // 46: ntt.monitoring.v4.AlertingConditionService.DeleteAlertingCondition:output_type -> google.protobuf.Empty
	13, // 47: ntt.monitoring.v4.AlertingConditionService.SearchAlertingConditions:output_type -> ntt.monitoring.v4.SearchAlertingConditionsResponse
	39, // [39:48] is the sub-list for method output_type
	30, // [30:39] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_alerting_condition_service_proto_init() }
func edgelq_monitoring_proto_v4_alerting_condition_service_proto_init() {
	if edgelq_monitoring_proto_v4_alerting_condition_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAlertingConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAlertingConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlertingConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlertingConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAlertingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAlertingConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAlertingConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAlertingConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlertingConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAlertingConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAlertingConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAlertingConditionsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertingConditionRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertingConditionRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertingConditionRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CreateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateAlertingConditionRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*UpdateAlertingConditionRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateAlertingConditionRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateAlertingConditionRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_monitoring_proto_v4_alerting_condition_service_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_alerting_condition_service_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v4_alerting_condition_service_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_alerting_condition_service_proto = out.File
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_goTypes = nil
	edgelq_monitoring_proto_v4_alerting_condition_service_proto_depIdxs = nil
}
