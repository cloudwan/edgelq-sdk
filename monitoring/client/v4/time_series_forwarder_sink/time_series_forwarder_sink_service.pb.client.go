// Code generated by protoc-gen-goten-client
// API: TimeSeriesForwarderSinkService
// DO NOT EDIT!!!

package time_series_forwarder_sink_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	time_series_forwarder_sink "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_forwarder_sink"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &time_series_forwarder_sink.TimeSeriesForwarderSink{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeSeriesForwarderSinkServiceClient is the client API for TimeSeriesForwarderSinkService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeSeriesForwarderSinkServiceClient interface {
	GetTimeSeriesForwarderSink(ctx context.Context, in *GetTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*time_series_forwarder_sink.TimeSeriesForwarderSink, error)
	BatchGetTimeSeriesForwarderSinks(ctx context.Context, in *BatchGetTimeSeriesForwarderSinksRequest, opts ...grpc.CallOption) (*BatchGetTimeSeriesForwarderSinksResponse, error)
	ListTimeSeriesForwarderSinks(ctx context.Context, in *ListTimeSeriesForwarderSinksRequest, opts ...grpc.CallOption) (*ListTimeSeriesForwarderSinksResponse, error)
	WatchTimeSeriesForwarderSink(ctx context.Context, in *WatchTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (WatchTimeSeriesForwarderSinkClientStream, error)
	WatchTimeSeriesForwarderSinks(ctx context.Context, in *WatchTimeSeriesForwarderSinksRequest, opts ...grpc.CallOption) (WatchTimeSeriesForwarderSinksClientStream, error)
	CreateTimeSeriesForwarderSink(ctx context.Context, in *CreateTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*time_series_forwarder_sink.TimeSeriesForwarderSink, error)
	UpdateTimeSeriesForwarderSink(ctx context.Context, in *UpdateTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*time_series_forwarder_sink.TimeSeriesForwarderSink, error)
	DeleteTimeSeriesForwarderSink(ctx context.Context, in *DeleteTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewTimeSeriesForwarderSinkServiceClient(cc grpc.ClientConnInterface) TimeSeriesForwarderSinkServiceClient {
	return &client{cc}
}

func (c *client) GetTimeSeriesForwarderSink(ctx context.Context, in *GetTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*time_series_forwarder_sink.TimeSeriesForwarderSink, error) {
	out := new(time_series_forwarder_sink.TimeSeriesForwarderSink)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesForwarderSinkService/GetTimeSeriesForwarderSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetTimeSeriesForwarderSinks(ctx context.Context, in *BatchGetTimeSeriesForwarderSinksRequest, opts ...grpc.CallOption) (*BatchGetTimeSeriesForwarderSinksResponse, error) {
	out := new(BatchGetTimeSeriesForwarderSinksResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesForwarderSinkService/BatchGetTimeSeriesForwarderSinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTimeSeriesForwarderSinks(ctx context.Context, in *ListTimeSeriesForwarderSinksRequest, opts ...grpc.CallOption) (*ListTimeSeriesForwarderSinksResponse, error) {
	out := new(ListTimeSeriesForwarderSinksResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesForwarderSinkService/ListTimeSeriesForwarderSinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchTimeSeriesForwarderSink(ctx context.Context, in *WatchTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (WatchTimeSeriesForwarderSinkClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTimeSeriesForwarderSink",
			ServerStreams: true,
		},
		"/ntt.monitoring.v4.TimeSeriesForwarderSinkService/WatchTimeSeriesForwarderSink", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTimeSeriesForwarderSinkWatchTimeSeriesForwarderSinkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTimeSeriesForwarderSinkClientStream interface {
	Recv() (*WatchTimeSeriesForwarderSinkResponse, error)
	grpc.ClientStream
}

type watchTimeSeriesForwarderSinkWatchTimeSeriesForwarderSinkClient struct {
	grpc.ClientStream
}

func (x *watchTimeSeriesForwarderSinkWatchTimeSeriesForwarderSinkClient) Recv() (*WatchTimeSeriesForwarderSinkResponse, error) {
	m := new(WatchTimeSeriesForwarderSinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchTimeSeriesForwarderSinks(ctx context.Context, in *WatchTimeSeriesForwarderSinksRequest, opts ...grpc.CallOption) (WatchTimeSeriesForwarderSinksClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchTimeSeriesForwarderSinks",
			ServerStreams: true,
		},
		"/ntt.monitoring.v4.TimeSeriesForwarderSinkService/WatchTimeSeriesForwarderSinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchTimeSeriesForwarderSinksWatchTimeSeriesForwarderSinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchTimeSeriesForwarderSinksClientStream interface {
	Recv() (*WatchTimeSeriesForwarderSinksResponse, error)
	grpc.ClientStream
}

type watchTimeSeriesForwarderSinksWatchTimeSeriesForwarderSinksClient struct {
	grpc.ClientStream
}

func (x *watchTimeSeriesForwarderSinksWatchTimeSeriesForwarderSinksClient) Recv() (*WatchTimeSeriesForwarderSinksResponse, error) {
	m := new(WatchTimeSeriesForwarderSinksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateTimeSeriesForwarderSink(ctx context.Context, in *CreateTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*time_series_forwarder_sink.TimeSeriesForwarderSink, error) {
	out := new(time_series_forwarder_sink.TimeSeriesForwarderSink)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesForwarderSinkService/CreateTimeSeriesForwarderSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTimeSeriesForwarderSink(ctx context.Context, in *UpdateTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*time_series_forwarder_sink.TimeSeriesForwarderSink, error) {
	out := new(time_series_forwarder_sink.TimeSeriesForwarderSink)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesForwarderSinkService/UpdateTimeSeriesForwarderSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTimeSeriesForwarderSink(ctx context.Context, in *DeleteTimeSeriesForwarderSinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v4.TimeSeriesForwarderSinkService/DeleteTimeSeriesForwarderSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
