// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/time_series_forwarder_sink_service.proto
// DO NOT EDIT!!!

package time_series_forwarder_sink_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_series_forwarder_sink "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_forwarder_sink"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &time_series_forwarder_sink.TimeSeriesForwarderSink{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetTimeSeriesForwarderSink method.
type GetTimeSeriesForwarderSinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.TimeSeriesForwarderSink
	Name *time_series_forwarder_sink.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetTimeSeriesForwarderSinkRequest) Reset() {
	*m = GetTimeSeriesForwarderSinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetTimeSeriesForwarderSinkRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetTimeSeriesForwarderSinkRequest) ProtoMessage() {}

func (m *GetTimeSeriesForwarderSinkRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetTimeSeriesForwarderSinkRequest) GotenMessage() {}

// Deprecated, Use GetTimeSeriesForwarderSinkRequest.ProtoReflect.Descriptor instead.
func (*GetTimeSeriesForwarderSinkRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetTimeSeriesForwarderSinkRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetTimeSeriesForwarderSinkRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetTimeSeriesForwarderSinkRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetTimeSeriesForwarderSinkRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetTimeSeriesForwarderSinkRequest) GetName() *time_series_forwarder_sink.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetTimeSeriesForwarderSinkRequest) GetFieldMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetTimeSeriesForwarderSinkRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetTimeSeriesForwarderSinkRequest) SetName(fv *time_series_forwarder_sink.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetTimeSeriesForwarderSinkRequest"))
	}
	m.Name = fv
}

func (m *GetTimeSeriesForwarderSinkRequest) SetFieldMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetTimeSeriesForwarderSinkRequest"))
	}
	m.FieldMask = fv
}

func (m *GetTimeSeriesForwarderSinkRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetTimeSeriesForwarderSinkRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetTimeSeriesForwarderSinks method.
type BatchGetTimeSeriesForwarderSinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of TimeSeriesForwarderSinks
	Names []*time_series_forwarder_sink.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) Reset() {
	*m = BatchGetTimeSeriesForwarderSinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTimeSeriesForwarderSinksRequest) ProtoMessage() {}

func (m *BatchGetTimeSeriesForwarderSinksRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTimeSeriesForwarderSinksRequest) GotenMessage() {}

// Deprecated, Use BatchGetTimeSeriesForwarderSinksRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTimeSeriesForwarderSinksRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) GetNames() []*time_series_forwarder_sink.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) GetFieldMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) SetNames(fv []*time_series_forwarder_sink.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetTimeSeriesForwarderSinksRequest"))
	}
	m.Names = fv
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) SetFieldMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetTimeSeriesForwarderSinksRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetTimeSeriesForwarderSinksRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetTimeSeriesForwarderSinksRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetTimeSeriesForwarderSinks method.
type BatchGetTimeSeriesForwarderSinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found TimeSeriesForwarderSinks
	TimeSeriesForwarderSinks []*time_series_forwarder_sink.TimeSeriesForwarderSink `protobuf:"bytes,1,rep,name=time_series_forwarder_sinks,json=timeSeriesForwarderSinks,proto3" json:"time_series_forwarder_sinks,omitempty" firestore:"timeSeriesForwarderSinks"`
	// list of not found TimeSeriesForwarderSinks
	Missing []*time_series_forwarder_sink.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) Reset() {
	*m = BatchGetTimeSeriesForwarderSinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTimeSeriesForwarderSinksResponse) ProtoMessage() {}

func (m *BatchGetTimeSeriesForwarderSinksResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTimeSeriesForwarderSinksResponse) GotenMessage() {}

// Deprecated, Use BatchGetTimeSeriesForwarderSinksResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTimeSeriesForwarderSinksResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) GetTimeSeriesForwarderSinks() []*time_series_forwarder_sink.TimeSeriesForwarderSink {
	if m != nil {
		return m.TimeSeriesForwarderSinks
	}
	return nil
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) GetMissing() []*time_series_forwarder_sink.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) SetTimeSeriesForwarderSinks(fv []*time_series_forwarder_sink.TimeSeriesForwarderSink) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesForwarderSinks", "BatchGetTimeSeriesForwarderSinksResponse"))
	}
	m.TimeSeriesForwarderSinks = fv
}

func (m *BatchGetTimeSeriesForwarderSinksResponse) SetMissing(fv []*time_series_forwarder_sink.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetTimeSeriesForwarderSinksResponse"))
	}
	m.Missing = fv
}

// A request message of the ListTimeSeriesForwarderSinks method.
type ListTimeSeriesForwarderSinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.TimeSeriesForwarderSink
	Parent *time_series_forwarder_sink.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer TimeSeriesForwarderSinks than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListTimeSeriesForwarderSinksResponse.next_page_token.
	PageToken *time_series_forwarder_sink.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *time_series_forwarder_sink.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *time_series_forwarder_sink.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,6,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListTimeSeriesForwarderSinksRequest) Reset() {
	*m = ListTimeSeriesForwarderSinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesForwarderSinksRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesForwarderSinksRequest) ProtoMessage() {}

func (m *ListTimeSeriesForwarderSinksRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesForwarderSinksRequest) GotenMessage() {}

// Deprecated, Use ListTimeSeriesForwarderSinksRequest.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesForwarderSinksRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListTimeSeriesForwarderSinksRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesForwarderSinksRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesForwarderSinksRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesForwarderSinksRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesForwarderSinksRequest) GetParent() *time_series_forwarder_sink.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListTimeSeriesForwarderSinksRequest) GetPageToken() *time_series_forwarder_sink.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksRequest) GetOrderBy() *time_series_forwarder_sink.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksRequest) GetFilter() *time_series_forwarder_sink.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksRequest) GetFieldMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListTimeSeriesForwarderSinksRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListTimeSeriesForwarderSinksRequest) SetParent(fv *time_series_forwarder_sink.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.Parent = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.PageSize = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetPageToken(fv *time_series_forwarder_sink.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.PageToken = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetOrderBy(fv *time_series_forwarder_sink.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.OrderBy = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetFilter(fv *time_series_forwarder_sink.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.Filter = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetFieldMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.FieldMask = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.View = fv
}

func (m *ListTimeSeriesForwarderSinksRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListTimeSeriesForwarderSinksRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListTimeSeriesForwarderSinks method.
type ListTimeSeriesForwarderSinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of TimeSeriesForwarderSinks
	TimeSeriesForwarderSinks []*time_series_forwarder_sink.TimeSeriesForwarderSink `protobuf:"bytes,1,rep,name=time_series_forwarder_sinks,json=timeSeriesForwarderSinks,proto3" json:"time_series_forwarder_sinks,omitempty" firestore:"timeSeriesForwarderSinks"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListTimeSeriesForwarderSinksRequest.page_token.
	PrevPageToken *time_series_forwarder_sink.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListTimeSeriesForwarderSinksRequest.page_token.
	NextPageToken *time_series_forwarder_sink.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total TimeSeriesForwarderSinks across all pages or 0, if there
	// are no items, paging info was not requested or there was an error while
	// trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListTimeSeriesForwarderSinksResponse) Reset() {
	*m = ListTimeSeriesForwarderSinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesForwarderSinksResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesForwarderSinksResponse) ProtoMessage() {}

func (m *ListTimeSeriesForwarderSinksResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesForwarderSinksResponse) GotenMessage() {}

// Deprecated, Use ListTimeSeriesForwarderSinksResponse.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesForwarderSinksResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListTimeSeriesForwarderSinksResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesForwarderSinksResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesForwarderSinksResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesForwarderSinksResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesForwarderSinksResponse) GetTimeSeriesForwarderSinks() []*time_series_forwarder_sink.TimeSeriesForwarderSink {
	if m != nil {
		return m.TimeSeriesForwarderSinks
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksResponse) GetPrevPageToken() *time_series_forwarder_sink.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksResponse) GetNextPageToken() *time_series_forwarder_sink.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListTimeSeriesForwarderSinksResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListTimeSeriesForwarderSinksResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListTimeSeriesForwarderSinksResponse) SetTimeSeriesForwarderSinks(fv []*time_series_forwarder_sink.TimeSeriesForwarderSink) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesForwarderSinks", "ListTimeSeriesForwarderSinksResponse"))
	}
	m.TimeSeriesForwarderSinks = fv
}

func (m *ListTimeSeriesForwarderSinksResponse) SetPrevPageToken(fv *time_series_forwarder_sink.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListTimeSeriesForwarderSinksResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListTimeSeriesForwarderSinksResponse) SetNextPageToken(fv *time_series_forwarder_sink.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListTimeSeriesForwarderSinksResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListTimeSeriesForwarderSinksResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListTimeSeriesForwarderSinksResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListTimeSeriesForwarderSinksResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListTimeSeriesForwarderSinksResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchTimeSeriesForwarderSink method.
type WatchTimeSeriesForwarderSinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.TimeSeriesForwarderSink
	Name *time_series_forwarder_sink.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,2,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchTimeSeriesForwarderSinkRequest) Reset() {
	*m = WatchTimeSeriesForwarderSinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesForwarderSinkRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesForwarderSinkRequest) ProtoMessage() {}

func (m *WatchTimeSeriesForwarderSinkRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesForwarderSinkRequest) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesForwarderSinkRequest.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesForwarderSinkRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchTimeSeriesForwarderSinkRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesForwarderSinkRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinkRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinkRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesForwarderSinkRequest) GetName() *time_series_forwarder_sink.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinkRequest) GetFieldMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinkRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTimeSeriesForwarderSinkRequest) SetName(fv *time_series_forwarder_sink.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchTimeSeriesForwarderSinkRequest"))
	}
	m.Name = fv
}

func (m *WatchTimeSeriesForwarderSinkRequest) SetFieldMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTimeSeriesForwarderSinkRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTimeSeriesForwarderSinkRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTimeSeriesForwarderSinkRequest"))
	}
	m.View = fv
}

// A response message of the WatchTimeSeriesForwarderSink method.
type WatchTimeSeriesForwarderSinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *time_series_forwarder_sink.TimeSeriesForwarderSinkChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchTimeSeriesForwarderSinkResponse) Reset() {
	*m = WatchTimeSeriesForwarderSinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesForwarderSinkResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesForwarderSinkResponse) ProtoMessage() {}

func (m *WatchTimeSeriesForwarderSinkResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesForwarderSinkResponse) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesForwarderSinkResponse.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesForwarderSinkResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchTimeSeriesForwarderSinkResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesForwarderSinkResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinkResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinkResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesForwarderSinkResponse) GetChange() *time_series_forwarder_sink.TimeSeriesForwarderSinkChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinkResponse) SetChange(fv *time_series_forwarder_sink.TimeSeriesForwarderSinkChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchTimeSeriesForwarderSinkResponse"))
	}
	m.Change = fv
}

// A request message of the WatchTimeSeriesForwarderSinks method.
type WatchTimeSeriesForwarderSinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent name of ntt.monitoring.v4.TimeSeriesForwarderSink
	Parent *time_series_forwarder_sink.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer TimeSeriesForwarderSinks than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *time_series_forwarder_sink.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *time_series_forwarder_sink.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *time_series_forwarder_sink.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to TimeSeriesForwarderSink
	// that don't affect any of masked fields won't be sent back.
	FieldMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,6,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// TimeSeriesForwarderSink that don't affect any of masked fields won't be
	// sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchTimeSeriesForwarderSinksRequest) Reset() {
	*m = WatchTimeSeriesForwarderSinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesForwarderSinksRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesForwarderSinksRequest) ProtoMessage() {}

func (m *WatchTimeSeriesForwarderSinksRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesForwarderSinksRequest) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesForwarderSinksRequest.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesForwarderSinksRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchTimeSeriesForwarderSinksRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesForwarderSinksRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinksRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinksRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetParent() *time_series_forwarder_sink.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetPageToken() *time_series_forwarder_sink.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetOrderBy() *time_series_forwarder_sink.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetFilter() *time_series_forwarder_sink.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetFieldMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTimeSeriesForwarderSinksRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.Type = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetParent(fv *time_series_forwarder_sink.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.Parent = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.PageSize = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetPageToken(fv *time_series_forwarder_sink.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.PageToken = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetOrderBy(fv *time_series_forwarder_sink.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetFilter(fv *time_series_forwarder_sink.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.Filter = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetFieldMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.View = fv
}

func (m *WatchTimeSeriesForwarderSinksRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchTimeSeriesForwarderSinksRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchTimeSeriesForwarderSinks method.
type WatchTimeSeriesForwarderSinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of TimeSeriesForwarderSinks
	TimeSeriesForwarderSinkChanges []*time_series_forwarder_sink.TimeSeriesForwarderSinkChange `protobuf:"bytes,2,rep,name=time_series_forwarder_sink_changes,json=timeSeriesForwarderSinkChanges,proto3" json:"time_series_forwarder_sink_changes,omitempty" firestore:"timeSeriesForwarderSinkChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All TimeSeriesForwarderSinks will be
	// of type Added/Current (depending on watch_type specified in the request).
	// Further responses will be incremental - however messages may still be
	// chunked and is_current logic still applies. is_current is always true for
	// stateful watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchTimeSeriesForwarderSinksResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (TimeSeriesForwarderSinks will
	// contains changes of type Current only). Any resume tokens should be
	// discarded as well. This field should be checked only for stateless watch.
	// In stateful those kind of errors are handled by the server side. Will never
	// be sent along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchTimeSeriesForwarderSinksResponse) Reset() {
	*m = WatchTimeSeriesForwarderSinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesForwarderSinksResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesForwarderSinksResponse) ProtoMessage() {}

func (m *WatchTimeSeriesForwarderSinksResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesForwarderSinksResponse) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesForwarderSinksResponse.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesForwarderSinksResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchTimeSeriesForwarderSinksResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesForwarderSinksResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinksResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinksResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetTimeSeriesForwarderSinkChanges() []*time_series_forwarder_sink.TimeSeriesForwarderSinkChange {
	if m != nil {
		return m.TimeSeriesForwarderSinkChanges
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetPageTokenChange() *WatchTimeSeriesForwarderSinksResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchTimeSeriesForwarderSinksResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetTimeSeriesForwarderSinkChanges(fv []*time_series_forwarder_sink.TimeSeriesForwarderSinkChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesForwarderSinkChanges", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.TimeSeriesForwarderSinkChanges = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetPageTokenChange(fv *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchTimeSeriesForwarderSinksResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateTimeSeriesForwarderSink method.
type CreateTimeSeriesForwarderSinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v4.TimeSeriesForwarderSink
	Parent *time_series_forwarder_sink.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// TimeSeriesForwarderSink resource body
	TimeSeriesForwarderSink *time_series_forwarder_sink.TimeSeriesForwarderSink `protobuf:"bytes,2,opt,name=time_series_forwarder_sink,json=timeSeriesForwarderSink,proto3" json:"time_series_forwarder_sink,omitempty" firestore:"timeSeriesForwarderSink"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateTimeSeriesForwarderSinkRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty" firestore:"responseMask"`
}

func (m *CreateTimeSeriesForwarderSinkRequest) Reset() {
	*m = CreateTimeSeriesForwarderSinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesForwarderSinkRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesForwarderSinkRequest) ProtoMessage() {}

func (m *CreateTimeSeriesForwarderSinkRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesForwarderSinkRequest) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesForwarderSinkRequest.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesForwarderSinkRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateTimeSeriesForwarderSinkRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesForwarderSinkRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesForwarderSinkRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesForwarderSinkRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesForwarderSinkRequest) GetParent() *time_series_forwarder_sink.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateTimeSeriesForwarderSinkRequest) GetTimeSeriesForwarderSink() *time_series_forwarder_sink.TimeSeriesForwarderSink {
	if m != nil {
		return m.TimeSeriesForwarderSink
	}
	return nil
}

func (m *CreateTimeSeriesForwarderSinkRequest) GetResponseMask() *CreateTimeSeriesForwarderSinkRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateTimeSeriesForwarderSinkRequest) SetParent(fv *time_series_forwarder_sink.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateTimeSeriesForwarderSinkRequest"))
	}
	m.Parent = fv
}

func (m *CreateTimeSeriesForwarderSinkRequest) SetTimeSeriesForwarderSink(fv *time_series_forwarder_sink.TimeSeriesForwarderSink) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesForwarderSink", "CreateTimeSeriesForwarderSinkRequest"))
	}
	m.TimeSeriesForwarderSink = fv
}

func (m *CreateTimeSeriesForwarderSinkRequest) SetResponseMask(fv *CreateTimeSeriesForwarderSinkRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateTimeSeriesForwarderSinkRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateTimeSeriesForwarderSink method.
type UpdateTimeSeriesForwarderSinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TimeSeriesForwarderSink resource body
	TimeSeriesForwarderSink *time_series_forwarder_sink.TimeSeriesForwarderSink `protobuf:"bytes,2,opt,name=time_series_forwarder_sink,json=timeSeriesForwarderSink,proto3" json:"time_series_forwarder_sink,omitempty" firestore:"timeSeriesForwarderSink"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateTimeSeriesForwarderSinkRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty" firestore:"allowMissing"`
	// reduce message response size.
	ResponseMask *UpdateTimeSeriesForwarderSinkRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty" firestore:"responseMask"`
}

func (m *UpdateTimeSeriesForwarderSinkRequest) Reset() {
	*m = UpdateTimeSeriesForwarderSinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTimeSeriesForwarderSinkRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTimeSeriesForwarderSinkRequest) ProtoMessage() {}

func (m *UpdateTimeSeriesForwarderSinkRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTimeSeriesForwarderSinkRequest) GotenMessage() {}

// Deprecated, Use UpdateTimeSeriesForwarderSinkRequest.ProtoReflect.Descriptor instead.
func (*UpdateTimeSeriesForwarderSinkRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateTimeSeriesForwarderSinkRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest) GetTimeSeriesForwarderSink() *time_series_forwarder_sink.TimeSeriesForwarderSink {
	if m != nil {
		return m.TimeSeriesForwarderSink
	}
	return nil
}

func (m *UpdateTimeSeriesForwarderSinkRequest) GetUpdateMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateTimeSeriesForwarderSinkRequest) GetCas() *UpdateTimeSeriesForwarderSinkRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateTimeSeriesForwarderSinkRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateTimeSeriesForwarderSinkRequest) GetResponseMask() *UpdateTimeSeriesForwarderSinkRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateTimeSeriesForwarderSinkRequest) SetTimeSeriesForwarderSink(fv *time_series_forwarder_sink.TimeSeriesForwarderSink) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeriesForwarderSink", "UpdateTimeSeriesForwarderSinkRequest"))
	}
	m.TimeSeriesForwarderSink = fv
}

func (m *UpdateTimeSeriesForwarderSinkRequest) SetUpdateMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateTimeSeriesForwarderSinkRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateTimeSeriesForwarderSinkRequest) SetCas(fv *UpdateTimeSeriesForwarderSinkRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateTimeSeriesForwarderSinkRequest"))
	}
	m.Cas = fv
}

func (m *UpdateTimeSeriesForwarderSinkRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateTimeSeriesForwarderSinkRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateTimeSeriesForwarderSinkRequest) SetResponseMask(fv *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateTimeSeriesForwarderSinkRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteTimeSeriesForwarderSink method.
type DeleteTimeSeriesForwarderSinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.monitoring.v4.TimeSeriesForwarderSink
	Name *time_series_forwarder_sink.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteTimeSeriesForwarderSinkRequest) Reset() {
	*m = DeleteTimeSeriesForwarderSinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteTimeSeriesForwarderSinkRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteTimeSeriesForwarderSinkRequest) ProtoMessage() {}

func (m *DeleteTimeSeriesForwarderSinkRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteTimeSeriesForwarderSinkRequest) GotenMessage() {}

// Deprecated, Use DeleteTimeSeriesForwarderSinkRequest.ProtoReflect.Descriptor instead.
func (*DeleteTimeSeriesForwarderSinkRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteTimeSeriesForwarderSinkRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteTimeSeriesForwarderSinkRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteTimeSeriesForwarderSinkRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteTimeSeriesForwarderSinkRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteTimeSeriesForwarderSinkRequest) GetName() *time_series_forwarder_sink.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteTimeSeriesForwarderSinkRequest) SetName(fv *time_series_forwarder_sink.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteTimeSeriesForwarderSinkRequest"))
	}
	m.Name = fv
}

type WatchTimeSeriesForwarderSinksResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *time_series_forwarder_sink.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *time_series_forwarder_sink.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) Reset() {
	*m = WatchTimeSeriesForwarderSinksResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTimeSeriesForwarderSinksResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTimeSeriesForwarderSinksResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchTimeSeriesForwarderSinksResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchTimeSeriesForwarderSinksResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) GetPrevPageToken() *time_series_forwarder_sink.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) GetNextPageToken() *time_series_forwarder_sink.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) SetPrevPageToken(fv *time_series_forwarder_sink.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchTimeSeriesForwarderSinksResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchTimeSeriesForwarderSinksResponse_PageTokenChange) SetNextPageToken(fv *time_series_forwarder_sink.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchTimeSeriesForwarderSinksResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateTimeSeriesForwarderSinkRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask
	Masking isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) Reset() {
	*m = CreateTimeSeriesForwarderSinkRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesForwarderSinkRequest_ResponseMask) ProtoMessage() {}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesForwarderSinkRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesForwarderSinkRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesForwarderSinkRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking interface {
	isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking()
}

type CreateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof" firestore:"skipEntireResponseBody"`
}
type CreateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,2,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=body_mask,json=bodyMask,proto3,oneof" firestore:"bodyMask"`
}

func (*CreateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody) isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking() {
}
func (*CreateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask) isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking() {
}
func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) GetMasking() isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) GetBodyMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if x, ok := m.GetMasking().(*CreateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) SetMasking(ofv isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateTimeSeriesForwarderSinkRequest_ResponseMask_Masking", "CreateTimeSeriesForwarderSinkRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateTimeSeriesForwarderSinkRequest_ResponseMask) SetBodyMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	m.SetMasking(&CreateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateTimeSeriesForwarderSinkRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *time_series_forwarder_sink.TimeSeriesForwarderSink `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,2,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) Reset() {
	*m = UpdateTimeSeriesForwarderSinkRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTimeSeriesForwarderSinkRequest_CAS) ProtoMessage() {}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTimeSeriesForwarderSinkRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateTimeSeriesForwarderSinkRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateTimeSeriesForwarderSinkRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) GetConditionalState() *time_series_forwarder_sink.TimeSeriesForwarderSink {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) GetFieldMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) SetConditionalState(fv *time_series_forwarder_sink.TimeSeriesForwarderSink) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateTimeSeriesForwarderSinkRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateTimeSeriesForwarderSinkRequest_CAS) SetFieldMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateTimeSeriesForwarderSinkRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateTimeSeriesForwarderSinkRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask
	Masking isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) Reset() {
	*m = UpdateTimeSeriesForwarderSinkRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTimeSeriesForwarderSinkRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTimeSeriesForwarderSinkRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateTimeSeriesForwarderSinkRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateTimeSeriesForwarderSinkRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking interface {
	isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking()
}

type UpdateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof" firestore:"skipEntireResponseBody"`
}
type UpdateTimeSeriesForwarderSinkRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof" firestore:"updatedFieldsOnly"`
}
type UpdateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask `protobuf:"bytes,3,opt,customtype=TimeSeriesForwarderSink_FieldMask,name=body_mask,json=bodyMask,proto3,oneof" firestore:"bodyMask"`
}

func (*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody) isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking() {
}
func (*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_UpdatedFieldsOnly) isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking() {
}
func (*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask) isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking() {
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) GetMasking() isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) GetBodyMask() *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask {
	if x, ok := m.GetMasking().(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) SetMasking(ofv isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateTimeSeriesForwarderSinkRequest_ResponseMask_Masking", "UpdateTimeSeriesForwarderSinkRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateTimeSeriesForwarderSinkRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateTimeSeriesForwarderSinkRequest_ResponseMask) SetBodyMask(fv *time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask) {
	m.SetMasking(&UpdateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDesc = []byte{
	0x0a, 0x43, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x0a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e,
	0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a,
	0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xe9, 0x01, 0x0a, 0x27, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x0a, 0x19, 0x0a, 0x17, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5a, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2,
	0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xd0, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x39,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x0a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x03, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x3a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x22, 0x19, 0x0a, 0x17, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x2a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x37, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2,
	0xda, 0x21, 0x1b, 0x1a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xfa, 0x02, 0x0a, 0x24, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x6e, 0x6b, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x22, 0x19, 0x0a, 0x17,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x23, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda,
	0x21, 0x1b, 0x0a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x70, 0x0a, 0x24, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x82, 0x05, 0x0a, 0x24, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2,
	0xda, 0x21, 0x1b, 0x3a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12,
	0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x2a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2,
	0xda, 0x21, 0x1b, 0x1a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf0, 0x04,
	0x0a, 0x25, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0xa3, 0x01, 0x0a, 0x0f, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x47,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x22, 0x19, 0x0a,
	0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e,
	0x6b, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xf6, 0x03, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x3a,
	0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x75, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01,
	0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x69, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xb2, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70,
	0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x88, 0x07, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x75, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01,
	0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x5c, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b,
	0x32, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41,
	0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xc4, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x61,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xe4, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b,
	0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x5a, 0x0a,
	0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1f, 0xb2, 0xda,
	0x21, 0x1b, 0x32, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b,
	0x0a, 0x19, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0xde, 0x12, 0x0a, 0x1e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xf4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x6e, 0x6b, 0x12, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x6e, 0x6b, 0x22, 0x74, 0x82, 0xdb, 0x21, 0x2e, 0x0a, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xa6, 0x02, 0x0a, 0x20,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xdb, 0x21, 0x4d,
	0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x1d,
	0x12, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x73, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x34, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x8a, 0xcc, 0x26, 0x00, 0x12, 0xa4, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x82, 0xdb, 0x21, 0x4c, 0x0a, 0x17, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x1d, 0x12, 0x1b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0x91, 0x02, 0x0a, 0x1c,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x36, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82,
	0xdb, 0x21, 0x32, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x22, 0x36, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12,
	0xb7, 0x02, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x82, 0xdb, 0x21, 0x54, 0x0a, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a,
	0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x24, 0x12, 0x22, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2,
	0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f, 0x76, 0x34,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x3a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xbc, 0x02, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x22, 0xb5, 0x01, 0x82, 0xdb, 0x21, 0x51, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b,
	0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x24, 0x12, 0x1a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x22, 0x30, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e,
	0x6b, 0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xcd, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x22,
	0xc6, 0x01, 0x82, 0xdb, 0x21, 0x47, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x1c, 0x12, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21,
	0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x3a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x1a, 0x4b, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x2f,
	0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xe3, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x71, 0x82, 0xdb, 0x21,
	0x29, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x34, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x32,
	0xca, 0x41, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x42, 0x9b, 0x03, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x6f, 0x0a, 0x21,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x8a, 0xff, 0xd0,
	0x02, 0x6f, 0x0a, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x23, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x00, 0x5a, 0x6c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x3b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescData = edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDesc
)

func edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDescData
}

var edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_goTypes = []interface{}{
	(*GetTimeSeriesForwarderSinkRequest)(nil),                            // 0: ntt.monitoring.v4.GetTimeSeriesForwarderSinkRequest
	(*BatchGetTimeSeriesForwarderSinksRequest)(nil),                      // 1: ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksRequest
	(*BatchGetTimeSeriesForwarderSinksResponse)(nil),                     // 2: ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksResponse
	(*ListTimeSeriesForwarderSinksRequest)(nil),                          // 3: ntt.monitoring.v4.ListTimeSeriesForwarderSinksRequest
	(*ListTimeSeriesForwarderSinksResponse)(nil),                         // 4: ntt.monitoring.v4.ListTimeSeriesForwarderSinksResponse
	(*WatchTimeSeriesForwarderSinkRequest)(nil),                          // 5: ntt.monitoring.v4.WatchTimeSeriesForwarderSinkRequest
	(*WatchTimeSeriesForwarderSinkResponse)(nil),                         // 6: ntt.monitoring.v4.WatchTimeSeriesForwarderSinkResponse
	(*WatchTimeSeriesForwarderSinksRequest)(nil),                         // 7: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksRequest
	(*WatchTimeSeriesForwarderSinksResponse)(nil),                        // 8: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksResponse
	(*CreateTimeSeriesForwarderSinkRequest)(nil),                         // 9: ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest
	(*UpdateTimeSeriesForwarderSinkRequest)(nil),                         // 10: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest
	(*DeleteTimeSeriesForwarderSinkRequest)(nil),                         // 11: ntt.monitoring.v4.DeleteTimeSeriesForwarderSinkRequest
	(*WatchTimeSeriesForwarderSinksResponse_PageTokenChange)(nil),        // 12: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksResponse.PageTokenChange
	(*CreateTimeSeriesForwarderSinkRequest_ResponseMask)(nil),            // 13: ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest.ResponseMask
	(*UpdateTimeSeriesForwarderSinkRequest_CAS)(nil),                     // 14: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.CAS
	(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask)(nil),            // 15: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.ResponseMask
	(*time_series_forwarder_sink.TimeSeriesForwarderSink_FieldMask)(nil), // 16: ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	(view.View)(0), // 17: goten.types.View
	(*time_series_forwarder_sink.TimeSeriesForwarderSink)(nil),       // 18: ntt.monitoring.v4.TimeSeriesForwarderSink
	(*time_series_forwarder_sink.TimeSeriesForwarderSinkChange)(nil), // 19: ntt.monitoring.v4.TimeSeriesForwarderSinkChange
	(watch_type.WatchType)(0),                                        // 20: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                                    // 21: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                            // 22: google.protobuf.Empty
}
var edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_depIdxs = []int32{
	16, // 0: ntt.monitoring.v4.GetTimeSeriesForwarderSinkRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	17, // 1: ntt.monitoring.v4.GetTimeSeriesForwarderSinkRequest.view:type_name -> goten.types.View
	16, // 2: ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	17, // 3: ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksRequest.view:type_name -> goten.types.View
	18, // 4: ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksResponse.time_series_forwarder_sinks:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink
	16, // 5: ntt.monitoring.v4.ListTimeSeriesForwarderSinksRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	17, // 6: ntt.monitoring.v4.ListTimeSeriesForwarderSinksRequest.view:type_name -> goten.types.View
	18, // 7: ntt.monitoring.v4.ListTimeSeriesForwarderSinksResponse.time_series_forwarder_sinks:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink
	16, // 8: ntt.monitoring.v4.WatchTimeSeriesForwarderSinkRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	17, // 9: ntt.monitoring.v4.WatchTimeSeriesForwarderSinkRequest.view:type_name -> goten.types.View
	19, // 10: ntt.monitoring.v4.WatchTimeSeriesForwarderSinkResponse.change:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSinkChange
	20, // 11: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksRequest.type:type_name -> goten.types.WatchType
	21, // 12: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksRequest.starting_time:type_name -> google.protobuf.Timestamp
	16, // 13: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksRequest.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	17, // 14: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksRequest.view:type_name -> goten.types.View
	19, // 15: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksResponse.time_series_forwarder_sink_changes:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSinkChange
	12, // 16: ntt.monitoring.v4.WatchTimeSeriesForwarderSinksResponse.page_token_change:type_name -> ntt.monitoring.v4.WatchTimeSeriesForwarderSinksResponse.PageTokenChange
	18, // 17: ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest.time_series_forwarder_sink:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink
	13, // 18: ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest.response_mask:type_name -> ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest.ResponseMask
	18, // 19: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.time_series_forwarder_sink:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink
	16, // 20: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.update_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	14, // 21: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.cas:type_name -> ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.CAS
	15, // 22: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.response_mask:type_name -> ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.ResponseMask
	16, // 23: ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest.ResponseMask.body_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	18, // 24: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.CAS.conditional_state:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink
	16, // 25: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.CAS.field_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	16, // 26: ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest.ResponseMask.body_mask:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_FieldMask
	0,  // 27: ntt.monitoring.v4.TimeSeriesForwarderSinkService.GetTimeSeriesForwarderSink:input_type -> ntt.monitoring.v4.GetTimeSeriesForwarderSinkRequest
	1,  // 28: ntt.monitoring.v4.TimeSeriesForwarderSinkService.BatchGetTimeSeriesForwarderSinks:input_type -> ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksRequest
	3,  // 29: ntt.monitoring.v4.TimeSeriesForwarderSinkService.ListTimeSeriesForwarderSinks:input_type -> ntt.monitoring.v4.ListTimeSeriesForwarderSinksRequest
	5,  // 30: ntt.monitoring.v4.TimeSeriesForwarderSinkService.WatchTimeSeriesForwarderSink:input_type -> ntt.monitoring.v4.WatchTimeSeriesForwarderSinkRequest
	7,  // 31: ntt.monitoring.v4.TimeSeriesForwarderSinkService.WatchTimeSeriesForwarderSinks:input_type -> ntt.monitoring.v4.WatchTimeSeriesForwarderSinksRequest
	9,  // 32: ntt.monitoring.v4.TimeSeriesForwarderSinkService.CreateTimeSeriesForwarderSink:input_type -> ntt.monitoring.v4.CreateTimeSeriesForwarderSinkRequest
	10, // 33: ntt.monitoring.v4.TimeSeriesForwarderSinkService.UpdateTimeSeriesForwarderSink:input_type -> ntt.monitoring.v4.UpdateTimeSeriesForwarderSinkRequest
	11, // 34: ntt.monitoring.v4.TimeSeriesForwarderSinkService.DeleteTimeSeriesForwarderSink:input_type -> ntt.monitoring.v4.DeleteTimeSeriesForwarderSinkRequest
	18, // 35: ntt.monitoring.v4.TimeSeriesForwarderSinkService.GetTimeSeriesForwarderSink:output_type -> ntt.monitoring.v4.TimeSeriesForwarderSink
	2,  // 36: ntt.monitoring.v4.TimeSeriesForwarderSinkService.BatchGetTimeSeriesForwarderSinks:output_type -> ntt.monitoring.v4.BatchGetTimeSeriesForwarderSinksResponse
	4,  // 37: ntt.monitoring.v4.TimeSeriesForwarderSinkService.ListTimeSeriesForwarderSinks:output_type -> ntt.monitoring.v4.ListTimeSeriesForwarderSinksResponse
	6,  // 38: ntt.monitoring.v4.TimeSeriesForwarderSinkService.WatchTimeSeriesForwarderSink:output_type -> ntt.monitoring.v4.WatchTimeSeriesForwarderSinkResponse
	8,  // 39: ntt.monitoring.v4.TimeSeriesForwarderSinkService.WatchTimeSeriesForwarderSinks:output_type -> ntt.monitoring.v4.WatchTimeSeriesForwarderSinksResponse
	18, // 40: ntt.monitoring.v4.TimeSeriesForwarderSinkService.CreateTimeSeriesForwarderSink:output_type -> ntt.monitoring.v4.TimeSeriesForwarderSink
	18, // 41: ntt.monitoring.v4.TimeSeriesForwarderSinkService.UpdateTimeSeriesForwarderSink:output_type -> ntt.monitoring.v4.TimeSeriesForwarderSink
	22, // 42: ntt.monitoring.v4.TimeSeriesForwarderSinkService.DeleteTimeSeriesForwarderSink:output_type -> google.protobuf.Empty
	35, // [35:43] is the sub-list for method output_type
	27, // [27:35] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_init() }
func edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_init() {
	if edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeSeriesForwarderSinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTimeSeriesForwarderSinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTimeSeriesForwarderSinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesForwarderSinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesForwarderSinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesForwarderSinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesForwarderSinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesForwarderSinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesForwarderSinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesForwarderSinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeSeriesForwarderSinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTimeSeriesForwarderSinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeSeriesForwarderSinksResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesForwarderSinkRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeSeriesForwarderSinkRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CreateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateTimeSeriesForwarderSinkRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto = out.File
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_goTypes = nil
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_service_proto_depIdxs = nil
}
