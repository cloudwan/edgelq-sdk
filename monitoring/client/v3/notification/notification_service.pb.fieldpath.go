// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_service.proto
// DO NOT EDIT!!!

package notification_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	notification "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &notification.Notification{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetNotificationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetNotificationRequest_FieldPathSelector
	Get(source *GetNotificationRequest) []interface{}
	GetSingle(source *GetNotificationRequest) (interface{}, bool)
	ClearValue(item *GetNotificationRequest)

	// Those methods build corresponding GetNotificationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetNotificationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetNotificationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetNotificationRequest_FieldPathArrayItemValue
}

type GetNotificationRequest_FieldPathSelector int32

const (
	GetNotificationRequest_FieldPathSelectorName      GetNotificationRequest_FieldPathSelector = 0
	GetNotificationRequest_FieldPathSelectorFieldMask GetNotificationRequest_FieldPathSelector = 1
	GetNotificationRequest_FieldPathSelectorView      GetNotificationRequest_FieldPathSelector = 2
)

func (s GetNotificationRequest_FieldPathSelector) String() string {
	switch s {
	case GetNotificationRequest_FieldPathSelectorName:
		return "name"
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetNotificationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", s))
	}
}

func BuildGetNotificationRequest_FieldPath(fp gotenobject.RawFieldPath) (GetNotificationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetNotificationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetNotificationRequest_FieldTerminalPath{selector: GetNotificationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetNotificationRequest_FieldTerminalPath{selector: GetNotificationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetNotificationRequest_FieldTerminalPath{selector: GetNotificationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetNotificationRequest", fp)
}

func ParseGetNotificationRequest_FieldPath(rawField string) (GetNotificationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetNotificationRequest_FieldPath(fp)
}

func MustParseGetNotificationRequest_FieldPath(rawField string) GetNotificationRequest_FieldPath {
	fp, err := ParseGetNotificationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetNotificationRequest_FieldTerminalPath struct {
	selector GetNotificationRequest_FieldPathSelector
}

var _ GetNotificationRequest_FieldPath = (*GetNotificationRequest_FieldTerminalPath)(nil)

func (fp *GetNotificationRequest_FieldTerminalPath) Selector() GetNotificationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetNotificationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetNotificationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetNotificationRequest
func (fp *GetNotificationRequest_FieldTerminalPath) Get(source *GetNotificationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetNotificationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetNotificationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetNotificationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetNotificationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetNotificationRequest))
}

// GetSingle returns value pointed by specific field of from source GetNotificationRequest
func (fp *GetNotificationRequest_FieldTerminalPath) GetSingle(source *GetNotificationRequest) (interface{}, bool) {
	switch fp.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetNotificationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetNotificationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		return (*notification.Reference)(nil)
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	case GetNotificationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationRequest_FieldTerminalPath) ClearValue(item *GetNotificationRequest) {
	if item != nil {
		switch fp.selector {
		case GetNotificationRequest_FieldPathSelectorName:
			item.Name = nil
		case GetNotificationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetNotificationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
		}
	}
}

func (fp *GetNotificationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetNotificationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetNotificationRequest_FieldPathSelectorName ||
		fp.selector == GetNotificationRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetNotificationRequest_FieldPathSelectorView
}

func (fp *GetNotificationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetNotificationRequest_FieldTerminalPath) WithIValue(value interface{}) GetNotificationRequest_FieldPathValue {
	switch fp.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		return &GetNotificationRequest_FieldTerminalPathValue{GetNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Reference)}
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		return &GetNotificationRequest_FieldTerminalPathValue{GetNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case GetNotificationRequest_FieldPathSelectorView:
		return &GetNotificationRequest_FieldTerminalPathValue{GetNotificationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetNotificationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetNotificationRequest_FieldPathArrayOfValues {
	fpaov := &GetNotificationRequest_FieldTerminalPathArrayOfValues{GetNotificationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		return &GetNotificationRequest_FieldTerminalPathArrayOfValues{GetNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Reference)}
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		return &GetNotificationRequest_FieldTerminalPathArrayOfValues{GetNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case GetNotificationRequest_FieldPathSelectorView:
		return &GetNotificationRequest_FieldTerminalPathArrayOfValues{GetNotificationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetNotificationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetNotificationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetNotificationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetNotificationRequest_FieldPathValue allows storing values for GetNotificationRequest fields according to their type
type GetNotificationRequest_FieldPathValue interface {
	GetNotificationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetNotificationRequest)
	CompareWith(*GetNotificationRequest) (cmp int, comparable bool)
}

func ParseGetNotificationRequest_FieldPathValue(pathStr, valueStr string) (GetNotificationRequest_FieldPathValue, error) {
	fp, err := ParseGetNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNotificationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetNotificationRequest_FieldPathValue), nil
}

func MustParseGetNotificationRequest_FieldPathValue(pathStr, valueStr string) GetNotificationRequest_FieldPathValue {
	fpv, err := ParseGetNotificationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetNotificationRequest_FieldTerminalPathValue struct {
	GetNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ GetNotificationRequest_FieldPathValue = (*GetNotificationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetNotificationRequest' as interface{}
func (fpv *GetNotificationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetNotificationRequest_FieldTerminalPathValue) AsNameValue() (*notification.Reference, bool) {
	res, ok := fpv.value.(*notification.Reference)
	return res, ok
}
func (fpv *GetNotificationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *GetNotificationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetNotificationRequest
func (fpv *GetNotificationRequest_FieldTerminalPathValue) SetTo(target **GetNotificationRequest) {
	if *target == nil {
		*target = new(GetNotificationRequest)
	}
	switch fpv.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*notification.Reference)
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	case GetNotificationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *GetNotificationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetNotificationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetNotificationRequest_FieldTerminalPathValue' with the value under path in 'GetNotificationRequest'.
func (fpv *GetNotificationRequest_FieldTerminalPathValue) CompareWith(source *GetNotificationRequest) (int, bool) {
	switch fpv.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*notification.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetNotificationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *GetNotificationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetNotificationRequest))
}

// GetNotificationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetNotificationRequest according to their type
// Present only for array (repeated) types.
type GetNotificationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetNotificationRequest_FieldPath
	ContainsValue(*GetNotificationRequest) bool
}

// ParseGetNotificationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetNotificationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNotificationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetNotificationRequest_FieldPathArrayItemValue), nil
}

func MustParseGetNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetNotificationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetNotificationRequest_FieldTerminalPathArrayItemValue struct {
	GetNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ GetNotificationRequest_FieldPathArrayItemValue = (*GetNotificationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetNotificationRequest as interface{}
func (fpaiv *GetNotificationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetNotificationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetNotificationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetNotificationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetNotificationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetNotificationRequest'
func (fpaiv *GetNotificationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetNotificationRequest) bool {
	slice := fpaiv.GetNotificationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetNotificationRequest_FieldPathArrayOfValues allows storing slice of values for GetNotificationRequest fields according to their type
type GetNotificationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetNotificationRequest_FieldPath
}

func ParseGetNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetNotificationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNotificationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetNotificationRequest_FieldPathArrayOfValues), nil
}

func MustParseGetNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetNotificationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetNotificationRequest_FieldTerminalPathArrayOfValues struct {
	GetNotificationRequest_FieldTerminalPath
	values interface{}
}

var _ GetNotificationRequest_FieldPathArrayOfValues = (*GetNotificationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetNotificationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetNotificationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*notification.Reference) {
			values = append(values, v)
		}
	case GetNotificationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case GetNotificationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetNotificationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*notification.Reference, bool) {
	res, ok := fpaov.values.([]*notification.Reference)
	return res, ok
}
func (fpaov *GetNotificationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *GetNotificationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetNotificationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetNotificationsRequest_FieldPathSelector
	Get(source *BatchGetNotificationsRequest) []interface{}
	GetSingle(source *BatchGetNotificationsRequest) (interface{}, bool)
	ClearValue(item *BatchGetNotificationsRequest)

	// Those methods build corresponding BatchGetNotificationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetNotificationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetNotificationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetNotificationsRequest_FieldPathArrayItemValue
}

type BatchGetNotificationsRequest_FieldPathSelector int32

const (
	BatchGetNotificationsRequest_FieldPathSelectorNames     BatchGetNotificationsRequest_FieldPathSelector = 0
	BatchGetNotificationsRequest_FieldPathSelectorFieldMask BatchGetNotificationsRequest_FieldPathSelector = 1
	BatchGetNotificationsRequest_FieldPathSelectorView      BatchGetNotificationsRequest_FieldPathSelector = 2
)

func (s BatchGetNotificationsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", s))
	}
}

func BuildBatchGetNotificationsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetNotificationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetNotificationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetNotificationsRequest", fp)
}

func ParseBatchGetNotificationsRequest_FieldPath(rawField string) (BatchGetNotificationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetNotificationsRequest_FieldPath(fp)
}

func MustParseBatchGetNotificationsRequest_FieldPath(rawField string) BatchGetNotificationsRequest_FieldPath {
	fp, err := ParseBatchGetNotificationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetNotificationsRequest_FieldTerminalPath struct {
	selector BatchGetNotificationsRequest_FieldPathSelector
}

var _ BatchGetNotificationsRequest_FieldPath = (*BatchGetNotificationsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) Selector() BatchGetNotificationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetNotificationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetNotificationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetNotificationsRequest
func (fp *BatchGetNotificationsRequest_FieldTerminalPath) Get(source *BatchGetNotificationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetNotificationsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetNotificationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetNotificationsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetNotificationsRequest
func (fp *BatchGetNotificationsRequest_FieldTerminalPath) GetSingle(source *BatchGetNotificationsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetNotificationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetNotificationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		return ([]*notification.Reference)(nil)
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) ClearValue(item *BatchGetNotificationsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetNotificationsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetNotificationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetNotificationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetNotificationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetNotificationsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetNotificationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetNotificationsRequest_FieldPathSelectorView
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetNotificationsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		return &BatchGetNotificationsRequest_FieldTerminalPathValue{BatchGetNotificationsRequest_FieldTerminalPath: *fp, value: value.([]*notification.Reference)}
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetNotificationsRequest_FieldTerminalPathValue{BatchGetNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		return &BatchGetNotificationsRequest_FieldTerminalPathValue{BatchGetNotificationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetNotificationsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		return &BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationsRequest_FieldTerminalPath: *fp, values: values.([][]*notification.Reference)}
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		return &BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		return &BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetNotificationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		return &BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue{BatchGetNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetNotificationsRequest_FieldPathValue allows storing values for BatchGetNotificationsRequest fields according to their type
type BatchGetNotificationsRequest_FieldPathValue interface {
	BatchGetNotificationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetNotificationsRequest)
	CompareWith(*BatchGetNotificationsRequest) (cmp int, comparable bool)
}

func ParseBatchGetNotificationsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetNotificationsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetNotificationsRequest_FieldPathValue), nil
}

func MustParseBatchGetNotificationsRequest_FieldPathValue(pathStr, valueStr string) BatchGetNotificationsRequest_FieldPathValue {
	fpv, err := ParseBatchGetNotificationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetNotificationsRequest_FieldTerminalPathValue struct {
	BatchGetNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationsRequest_FieldPathValue = (*BatchGetNotificationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetNotificationsRequest' as interface{}
func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) AsNamesValue() ([]*notification.Reference, bool) {
	res, ok := fpv.value.([]*notification.Reference)
	return res, ok
}
func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetNotificationsRequest
func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) SetTo(target **BatchGetNotificationsRequest) {
	if *target == nil {
		*target = new(BatchGetNotificationsRequest)
	}
	switch fpv.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*notification.Reference)
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetNotificationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetNotificationsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetNotificationsRequest'.
func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetNotificationsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetNotificationsRequest))
}

// BatchGetNotificationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetNotificationsRequest according to their type
// Present only for array (repeated) types.
type BatchGetNotificationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetNotificationsRequest_FieldPath
	ContainsValue(*BatchGetNotificationsRequest) bool
}

// ParseBatchGetNotificationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetNotificationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetNotificationsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetNotificationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationsRequest_FieldPathArrayItemValue = (*BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetNotificationsRequest as interface{}
func (fpaiv *BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*notification.Reference, bool) {
	res, ok := fpaiv.value.(*notification.Reference)
	return res, ok
}

func (fpaiv *BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetNotificationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetNotificationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetNotificationsRequest'
func (fpaiv *BatchGetNotificationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetNotificationsRequest) bool {
	slice := fpaiv.BatchGetNotificationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetNotificationsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetNotificationsRequest fields according to their type
type BatchGetNotificationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetNotificationsRequest_FieldPath
}

func ParseBatchGetNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetNotificationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetNotificationsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetNotificationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetNotificationsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetNotificationsRequest_FieldPathArrayOfValues = (*BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetNotificationsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*notification.Reference) {
			values = append(values, v)
		}
	case BatchGetNotificationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case BatchGetNotificationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*notification.Reference, bool) {
	res, ok := fpaov.values.([][]*notification.Reference)
	return res, ok
}
func (fpaov *BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *BatchGetNotificationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetNotificationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetNotificationsResponse_FieldPathSelector
	Get(source *BatchGetNotificationsResponse) []interface{}
	GetSingle(source *BatchGetNotificationsResponse) (interface{}, bool)
	ClearValue(item *BatchGetNotificationsResponse)

	// Those methods build corresponding BatchGetNotificationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetNotificationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetNotificationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetNotificationsResponse_FieldPathArrayItemValue
}

type BatchGetNotificationsResponse_FieldPathSelector int32

const (
	BatchGetNotificationsResponse_FieldPathSelectorNotifications BatchGetNotificationsResponse_FieldPathSelector = 0
	BatchGetNotificationsResponse_FieldPathSelectorMissing       BatchGetNotificationsResponse_FieldPathSelector = 1
)

func (s BatchGetNotificationsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return "notifications"
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", s))
	}
}

func BuildBatchGetNotificationsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetNotificationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetNotificationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notifications":
			return &BatchGetNotificationsResponse_FieldTerminalPath{selector: BatchGetNotificationsResponse_FieldPathSelectorNotifications}, nil
		case "missing":
			return &BatchGetNotificationsResponse_FieldTerminalPath{selector: BatchGetNotificationsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "notifications":
			if subpath, err := notification.BuildNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetNotificationsResponse_FieldSubPath{selector: BatchGetNotificationsResponse_FieldPathSelectorNotifications, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetNotificationsResponse", fp)
}

func ParseBatchGetNotificationsResponse_FieldPath(rawField string) (BatchGetNotificationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetNotificationsResponse_FieldPath(fp)
}

func MustParseBatchGetNotificationsResponse_FieldPath(rawField string) BatchGetNotificationsResponse_FieldPath {
	fp, err := ParseBatchGetNotificationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetNotificationsResponse_FieldTerminalPath struct {
	selector BatchGetNotificationsResponse_FieldPathSelector
}

var _ BatchGetNotificationsResponse_FieldPath = (*BatchGetNotificationsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) Selector() BatchGetNotificationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetNotificationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetNotificationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetNotificationsResponse
func (fp *BatchGetNotificationsResponse_FieldTerminalPath) Get(source *BatchGetNotificationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
			for _, value := range source.GetNotifications() {
				values = append(values, value)
			}
		case BatchGetNotificationsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetNotificationsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetNotificationsResponse
func (fp *BatchGetNotificationsResponse_FieldTerminalPath) GetSingle(source *BatchGetNotificationsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		res := source.GetNotifications()
		return res, res != nil
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetNotificationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return ([]*notification.Notification)(nil)
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		return ([]*notification.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) ClearValue(item *BatchGetNotificationsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
			item.Notifications = nil
		case BatchGetNotificationsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetNotificationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetNotificationsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetNotificationsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return &BatchGetNotificationsResponse_FieldTerminalPathValue{BatchGetNotificationsResponse_FieldTerminalPath: *fp, value: value.([]*notification.Notification)}
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		return &BatchGetNotificationsResponse_FieldTerminalPathValue{BatchGetNotificationsResponse_FieldTerminalPath: *fp, value: value.([]*notification.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetNotificationsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues{BatchGetNotificationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return &BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues{BatchGetNotificationsResponse_FieldTerminalPath: *fp, values: values.([][]*notification.Notification)}
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		return &BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues{BatchGetNotificationsResponse_FieldTerminalPath: *fp, values: values.([][]*notification.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetNotificationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return &BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue{BatchGetNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.Notification)}
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		return &BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue{BatchGetNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetNotificationsResponse_FieldSubPath struct {
	selector BatchGetNotificationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetNotificationsResponse_FieldPath = (*BatchGetNotificationsResponse_FieldSubPath)(nil)

func (fps *BatchGetNotificationsResponse_FieldSubPath) Selector() BatchGetNotificationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetNotificationsResponse_FieldSubPath) AsNotificationsSubPath() (notification.Notification_FieldPath, bool) {
	res, ok := fps.subPath.(notification.Notification_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetNotificationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetNotificationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetNotificationsResponse
func (fps *BatchGetNotificationsResponse_FieldSubPath) Get(source *BatchGetNotificationsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		for _, item := range source.GetNotifications() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetNotificationsResponse))
}

// GetSingle returns value of selected field from source BatchGetNotificationsResponse
func (fps *BatchGetNotificationsResponse_FieldSubPath) GetSingle(source *BatchGetNotificationsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		if len(source.GetNotifications()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotifications()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetNotificationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) ClearValue(item *BatchGetNotificationsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
			for _, subItem := range item.Notifications {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetNotificationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetNotificationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetNotificationsResponse_FieldPathValue {
	return &BatchGetNotificationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetNotificationsResponse_FieldPathArrayOfValues {
	return &BatchGetNotificationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetNotificationsResponse_FieldPathArrayItemValue {
	return &BatchGetNotificationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetNotificationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetNotificationsResponse_FieldPathValue allows storing values for BatchGetNotificationsResponse fields according to their type
type BatchGetNotificationsResponse_FieldPathValue interface {
	BatchGetNotificationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetNotificationsResponse)
	CompareWith(*BatchGetNotificationsResponse) (cmp int, comparable bool)
}

func ParseBatchGetNotificationsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetNotificationsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetNotificationsResponse_FieldPathValue), nil
}

func MustParseBatchGetNotificationsResponse_FieldPathValue(pathStr, valueStr string) BatchGetNotificationsResponse_FieldPathValue {
	fpv, err := ParseBatchGetNotificationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetNotificationsResponse_FieldTerminalPathValue struct {
	BatchGetNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationsResponse_FieldPathValue = (*BatchGetNotificationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetNotificationsResponse' as interface{}
func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) AsNotificationsValue() ([]*notification.Notification, bool) {
	res, ok := fpv.value.([]*notification.Notification)
	return res, ok
}
func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) AsMissingValue() ([]*notification.Reference, bool) {
	res, ok := fpv.value.([]*notification.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetNotificationsResponse
func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) SetTo(target **BatchGetNotificationsResponse) {
	if *target == nil {
		*target = new(BatchGetNotificationsResponse)
	}
	switch fpv.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		(*target).Notifications = fpv.value.([]*notification.Notification)
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*notification.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetNotificationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetNotificationsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetNotificationsResponse'.
func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetNotificationsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return 0, false
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetNotificationsResponse))
}

type BatchGetNotificationsResponse_FieldSubPathValue struct {
	BatchGetNotificationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetNotificationsResponse_FieldPathValue = (*BatchGetNotificationsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetNotificationsResponse_FieldSubPathValue) AsNotificationsPathValue() (notification.Notification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification.Notification_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetNotificationsResponse_FieldSubPathValue) SetTo(target **BatchGetNotificationsResponse) {
	if *target == nil {
		*target = new(BatchGetNotificationsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetNotificationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetNotificationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetNotificationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetNotificationsResponse_FieldSubPathValue) CompareWith(source *BatchGetNotificationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetNotificationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetNotificationsResponse))
}

// BatchGetNotificationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetNotificationsResponse according to their type
// Present only for array (repeated) types.
type BatchGetNotificationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetNotificationsResponse_FieldPath
	ContainsValue(*BatchGetNotificationsResponse) bool
}

// ParseBatchGetNotificationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetNotificationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetNotificationsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetNotificationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationsResponse_FieldPathArrayItemValue = (*BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetNotificationsResponse as interface{}
func (fpaiv *BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue) AsNotificationsItemValue() (*notification.Notification, bool) {
	res, ok := fpaiv.value.(*notification.Notification)
	return res, ok
}
func (fpaiv *BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*notification.Reference, bool) {
	res, ok := fpaiv.value.(*notification.Reference)
	return res, ok
}

func (fpaiv *BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetNotificationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetNotificationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetNotificationsResponse'
func (fpaiv *BatchGetNotificationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetNotificationsResponse) bool {
	slice := fpaiv.BatchGetNotificationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetNotificationsResponse_FieldSubPathArrayItemValue struct {
	BatchGetNotificationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetNotificationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetNotificationsResponse_FieldSubPathArrayItemValue) AsNotificationsPathItemValue() (notification.Notification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetNotificationsResponse'
func (fpaivs *BatchGetNotificationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetNotificationsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetNotificationsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetNotificationsResponse fields according to their type
type BatchGetNotificationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetNotificationsResponse_FieldPath
}

func ParseBatchGetNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetNotificationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetNotificationsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetNotificationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetNotificationsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetNotificationsResponse_FieldPathArrayOfValues = (*BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetNotificationsResponse_FieldPathSelectorNotifications:
		for _, v := range fpaov.values.([][]*notification.Notification) {
			values = append(values, v)
		}
	case BatchGetNotificationsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*notification.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues) AsNotificationsArrayOfValues() ([][]*notification.Notification, bool) {
	res, ok := fpaov.values.([][]*notification.Notification)
	return res, ok
}
func (fpaov *BatchGetNotificationsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*notification.Reference, bool) {
	res, ok := fpaov.values.([][]*notification.Reference)
	return res, ok
}

type BatchGetNotificationsResponse_FieldSubPathArrayOfValues struct {
	BatchGetNotificationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetNotificationsResponse_FieldPathArrayOfValues = (*BatchGetNotificationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetNotificationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetNotificationsResponse_FieldSubPathArrayOfValues) AsNotificationsPathArrayOfValues() (notification.Notification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification.Notification_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListNotificationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListNotificationsRequest_FieldPathSelector
	Get(source *ListNotificationsRequest) []interface{}
	GetSingle(source *ListNotificationsRequest) (interface{}, bool)
	ClearValue(item *ListNotificationsRequest)

	// Those methods build corresponding ListNotificationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListNotificationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListNotificationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListNotificationsRequest_FieldPathArrayItemValue
}

type ListNotificationsRequest_FieldPathSelector int32

const (
	ListNotificationsRequest_FieldPathSelectorParent            ListNotificationsRequest_FieldPathSelector = 0
	ListNotificationsRequest_FieldPathSelectorPageSize          ListNotificationsRequest_FieldPathSelector = 1
	ListNotificationsRequest_FieldPathSelectorPageToken         ListNotificationsRequest_FieldPathSelector = 2
	ListNotificationsRequest_FieldPathSelectorOrderBy           ListNotificationsRequest_FieldPathSelector = 3
	ListNotificationsRequest_FieldPathSelectorFilter            ListNotificationsRequest_FieldPathSelector = 4
	ListNotificationsRequest_FieldPathSelectorFieldMask         ListNotificationsRequest_FieldPathSelector = 5
	ListNotificationsRequest_FieldPathSelectorView              ListNotificationsRequest_FieldPathSelector = 6
	ListNotificationsRequest_FieldPathSelectorIncludePagingInfo ListNotificationsRequest_FieldPathSelector = 7
)

func (s ListNotificationsRequest_FieldPathSelector) String() string {
	switch s {
	case ListNotificationsRequest_FieldPathSelectorParent:
		return "parent"
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListNotificationsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListNotificationsRequest_FieldPathSelectorView:
		return "view"
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", s))
	}
}

func BuildListNotificationsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListNotificationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListNotificationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListNotificationsRequest", fp)
}

func ParseListNotificationsRequest_FieldPath(rawField string) (ListNotificationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListNotificationsRequest_FieldPath(fp)
}

func MustParseListNotificationsRequest_FieldPath(rawField string) ListNotificationsRequest_FieldPath {
	fp, err := ParseListNotificationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListNotificationsRequest_FieldTerminalPath struct {
	selector ListNotificationsRequest_FieldPathSelector
}

var _ ListNotificationsRequest_FieldPath = (*ListNotificationsRequest_FieldTerminalPath)(nil)

func (fp *ListNotificationsRequest_FieldTerminalPath) Selector() ListNotificationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListNotificationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListNotificationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListNotificationsRequest
func (fp *ListNotificationsRequest_FieldTerminalPath) Get(source *ListNotificationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListNotificationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListNotificationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListNotificationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListNotificationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListNotificationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListNotificationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListNotificationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListNotificationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListNotificationsRequest))
}

// GetSingle returns value pointed by specific field of from source ListNotificationsRequest
func (fp *ListNotificationsRequest_FieldTerminalPath) GetSingle(source *ListNotificationsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListNotificationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListNotificationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListNotificationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListNotificationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		return (*notification.ParentName)(nil)
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		return (*notification.PagerCursor)(nil)
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		return (*notification.OrderBy)(nil)
	case ListNotificationsRequest_FieldPathSelectorFilter:
		return (*notification.Filter)(nil)
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	case ListNotificationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationsRequest_FieldTerminalPath) ClearValue(item *ListNotificationsRequest) {
	if item != nil {
		switch fp.selector {
		case ListNotificationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListNotificationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListNotificationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListNotificationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListNotificationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListNotificationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListNotificationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListNotificationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListNotificationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListNotificationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListNotificationsRequest_FieldPathSelectorParent ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorFilter ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorView ||
		fp.selector == ListNotificationsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListNotificationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListNotificationsRequest_FieldTerminalPath) WithIValue(value interface{}) ListNotificationsRequest_FieldPathValue {
	switch fp.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.ParentName)}
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.OrderBy)}
	case ListNotificationsRequest_FieldPathSelectorFilter:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Filter)}
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case ListNotificationsRequest_FieldPathSelectorView:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListNotificationsRequest_FieldTerminalPathValue{ListNotificationsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListNotificationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListNotificationsRequest_FieldPathArrayOfValues {
	fpaov := &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.ParentName)}
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.OrderBy)}
	case ListNotificationsRequest_FieldPathSelectorFilter:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Filter)}
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case ListNotificationsRequest_FieldPathSelectorView:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListNotificationsRequest_FieldTerminalPathArrayOfValues{ListNotificationsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListNotificationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListNotificationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListNotificationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListNotificationsRequest_FieldPathValue allows storing values for ListNotificationsRequest fields according to their type
type ListNotificationsRequest_FieldPathValue interface {
	ListNotificationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListNotificationsRequest)
	CompareWith(*ListNotificationsRequest) (cmp int, comparable bool)
}

func ParseListNotificationsRequest_FieldPathValue(pathStr, valueStr string) (ListNotificationsRequest_FieldPathValue, error) {
	fp, err := ParseListNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListNotificationsRequest_FieldPathValue), nil
}

func MustParseListNotificationsRequest_FieldPathValue(pathStr, valueStr string) ListNotificationsRequest_FieldPathValue {
	fpv, err := ParseListNotificationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListNotificationsRequest_FieldTerminalPathValue struct {
	ListNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListNotificationsRequest_FieldPathValue = (*ListNotificationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListNotificationsRequest' as interface{}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsParentValue() (*notification.ParentName, bool) {
	res, ok := fpv.value.(*notification.ParentName)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsOrderByValue() (*notification.OrderBy, bool) {
	res, ok := fpv.value.(*notification.OrderBy)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsFilterValue() (*notification.Filter, bool) {
	res, ok := fpv.value.(*notification.Filter)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListNotificationsRequest
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) SetTo(target **ListNotificationsRequest) {
	if *target == nil {
		*target = new(ListNotificationsRequest)
	}
	switch fpv.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification.ParentName)
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*notification.PagerCursor)
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*notification.OrderBy)
	case ListNotificationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*notification.Filter)
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	case ListNotificationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListNotificationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListNotificationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListNotificationsRequest_FieldTerminalPathValue' with the value under path in 'ListNotificationsRequest'.
func (fpv *ListNotificationsRequest_FieldTerminalPathValue) CompareWith(source *ListNotificationsRequest) (int, bool) {
	switch fpv.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListNotificationsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListNotificationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *ListNotificationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListNotificationsRequest))
}

// ListNotificationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListNotificationsRequest according to their type
// Present only for array (repeated) types.
type ListNotificationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListNotificationsRequest_FieldPath
	ContainsValue(*ListNotificationsRequest) bool
}

// ParseListNotificationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListNotificationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListNotificationsRequest_FieldPathArrayItemValue), nil
}

func MustParseListNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListNotificationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListNotificationsRequest_FieldTerminalPathArrayItemValue struct {
	ListNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ ListNotificationsRequest_FieldPathArrayItemValue = (*ListNotificationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListNotificationsRequest as interface{}
func (fpaiv *ListNotificationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListNotificationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListNotificationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListNotificationsRequest'
func (fpaiv *ListNotificationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListNotificationsRequest) bool {
	slice := fpaiv.ListNotificationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListNotificationsRequest_FieldPathArrayOfValues allows storing slice of values for ListNotificationsRequest fields according to their type
type ListNotificationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListNotificationsRequest_FieldPath
}

func ParseListNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListNotificationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListNotificationsRequest_FieldPathArrayOfValues), nil
}

func MustParseListNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListNotificationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListNotificationsRequest_FieldTerminalPathArrayOfValues struct {
	ListNotificationsRequest_FieldTerminalPath
	values interface{}
}

var _ ListNotificationsRequest_FieldPathArrayOfValues = (*ListNotificationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListNotificationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification.ParentName) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*notification.OrderBy) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*notification.Filter) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListNotificationsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification.ParentName, bool) {
	res, ok := fpaov.values.([]*notification.ParentName)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*notification.OrderBy, bool) {
	res, ok := fpaov.values.([]*notification.OrderBy)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*notification.Filter, bool) {
	res, ok := fpaov.values.([]*notification.Filter)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListNotificationsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListNotificationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListNotificationsResponse_FieldPathSelector
	Get(source *ListNotificationsResponse) []interface{}
	GetSingle(source *ListNotificationsResponse) (interface{}, bool)
	ClearValue(item *ListNotificationsResponse)

	// Those methods build corresponding ListNotificationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListNotificationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListNotificationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListNotificationsResponse_FieldPathArrayItemValue
}

type ListNotificationsResponse_FieldPathSelector int32

const (
	ListNotificationsResponse_FieldPathSelectorNotifications     ListNotificationsResponse_FieldPathSelector = 0
	ListNotificationsResponse_FieldPathSelectorPrevPageToken     ListNotificationsResponse_FieldPathSelector = 1
	ListNotificationsResponse_FieldPathSelectorNextPageToken     ListNotificationsResponse_FieldPathSelector = 2
	ListNotificationsResponse_FieldPathSelectorCurrentOffset     ListNotificationsResponse_FieldPathSelector = 3
	ListNotificationsResponse_FieldPathSelectorTotalResultsCount ListNotificationsResponse_FieldPathSelector = 4
)

func (s ListNotificationsResponse_FieldPathSelector) String() string {
	switch s {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return "notifications"
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", s))
	}
}

func BuildListNotificationsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListNotificationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListNotificationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notifications":
			return &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorNotifications}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "notifications":
			if subpath, err := notification.BuildNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListNotificationsResponse_FieldSubPath{selector: ListNotificationsResponse_FieldPathSelectorNotifications, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListNotificationsResponse", fp)
}

func ParseListNotificationsResponse_FieldPath(rawField string) (ListNotificationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListNotificationsResponse_FieldPath(fp)
}

func MustParseListNotificationsResponse_FieldPath(rawField string) ListNotificationsResponse_FieldPath {
	fp, err := ParseListNotificationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListNotificationsResponse_FieldTerminalPath struct {
	selector ListNotificationsResponse_FieldPathSelector
}

var _ ListNotificationsResponse_FieldPath = (*ListNotificationsResponse_FieldTerminalPath)(nil)

func (fp *ListNotificationsResponse_FieldTerminalPath) Selector() ListNotificationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListNotificationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListNotificationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListNotificationsResponse
func (fp *ListNotificationsResponse_FieldTerminalPath) Get(source *ListNotificationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListNotificationsResponse_FieldPathSelectorNotifications:
			for _, value := range source.GetNotifications() {
				values = append(values, value)
			}
		case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListNotificationsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListNotificationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListNotificationsResponse))
}

// GetSingle returns value pointed by specific field of from source ListNotificationsResponse
func (fp *ListNotificationsResponse_FieldTerminalPath) GetSingle(source *ListNotificationsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		res := source.GetNotifications()
		return res, res != nil
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListNotificationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return ([]*notification.Notification)(nil)
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		return (*notification.PagerCursor)(nil)
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		return (*notification.PagerCursor)(nil)
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationsResponse_FieldTerminalPath) ClearValue(item *ListNotificationsResponse) {
	if item != nil {
		switch fp.selector {
		case ListNotificationsResponse_FieldPathSelectorNotifications:
			item.Notifications = nil
		case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListNotificationsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListNotificationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListNotificationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListNotificationsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListNotificationsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListNotificationsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListNotificationsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListNotificationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListNotificationsResponse_FieldTerminalPath) WithIValue(value interface{}) ListNotificationsResponse_FieldPathValue {
	switch fp.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return &ListNotificationsResponse_FieldTerminalPathValue{ListNotificationsResponse_FieldTerminalPath: *fp, value: value.([]*notification.Notification)}
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		return &ListNotificationsResponse_FieldTerminalPathValue{ListNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		return &ListNotificationsResponse_FieldTerminalPathValue{ListNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		return &ListNotificationsResponse_FieldTerminalPathValue{ListNotificationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return &ListNotificationsResponse_FieldTerminalPathValue{ListNotificationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListNotificationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListNotificationsResponse_FieldPathArrayOfValues {
	fpaov := &ListNotificationsResponse_FieldTerminalPathArrayOfValues{ListNotificationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return &ListNotificationsResponse_FieldTerminalPathArrayOfValues{ListNotificationsResponse_FieldTerminalPath: *fp, values: values.([][]*notification.Notification)}
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		return &ListNotificationsResponse_FieldTerminalPathArrayOfValues{ListNotificationsResponse_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		return &ListNotificationsResponse_FieldTerminalPathArrayOfValues{ListNotificationsResponse_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		return &ListNotificationsResponse_FieldTerminalPathArrayOfValues{ListNotificationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return &ListNotificationsResponse_FieldTerminalPathArrayOfValues{ListNotificationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListNotificationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListNotificationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListNotificationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return &ListNotificationsResponse_FieldTerminalPathArrayItemValue{ListNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.Notification)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListNotificationsResponse_FieldSubPath struct {
	selector ListNotificationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListNotificationsResponse_FieldPath = (*ListNotificationsResponse_FieldSubPath)(nil)

func (fps *ListNotificationsResponse_FieldSubPath) Selector() ListNotificationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListNotificationsResponse_FieldSubPath) AsNotificationsSubPath() (notification.Notification_FieldPath, bool) {
	res, ok := fps.subPath.(notification.Notification_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListNotificationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListNotificationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListNotificationsResponse
func (fps *ListNotificationsResponse_FieldSubPath) Get(source *ListNotificationsResponse) (values []interface{}) {
	switch fps.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		for _, item := range source.GetNotifications() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListNotificationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListNotificationsResponse))
}

// GetSingle returns value of selected field from source ListNotificationsResponse
func (fps *ListNotificationsResponse_FieldSubPath) GetSingle(source *ListNotificationsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		if len(source.GetNotifications()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotifications()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fps.selector))
	}
}

func (fps *ListNotificationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListNotificationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListNotificationsResponse_FieldSubPath) ClearValue(item *ListNotificationsResponse) {
	if item != nil {
		switch fps.selector {
		case ListNotificationsResponse_FieldPathSelectorNotifications:
			for _, subItem := range item.Notifications {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListNotificationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListNotificationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListNotificationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListNotificationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListNotificationsResponse_FieldSubPath) WithIValue(value interface{}) ListNotificationsResponse_FieldPathValue {
	return &ListNotificationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListNotificationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListNotificationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListNotificationsResponse_FieldPathArrayOfValues {
	return &ListNotificationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListNotificationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListNotificationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListNotificationsResponse_FieldPathArrayItemValue {
	return &ListNotificationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListNotificationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListNotificationsResponse_FieldPathValue allows storing values for ListNotificationsResponse fields according to their type
type ListNotificationsResponse_FieldPathValue interface {
	ListNotificationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListNotificationsResponse)
	CompareWith(*ListNotificationsResponse) (cmp int, comparable bool)
}

func ParseListNotificationsResponse_FieldPathValue(pathStr, valueStr string) (ListNotificationsResponse_FieldPathValue, error) {
	fp, err := ParseListNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListNotificationsResponse_FieldPathValue), nil
}

func MustParseListNotificationsResponse_FieldPathValue(pathStr, valueStr string) ListNotificationsResponse_FieldPathValue {
	fpv, err := ParseListNotificationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListNotificationsResponse_FieldTerminalPathValue struct {
	ListNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListNotificationsResponse_FieldPathValue = (*ListNotificationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListNotificationsResponse' as interface{}
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) AsNotificationsValue() ([]*notification.Notification, bool) {
	res, ok := fpv.value.([]*notification.Notification)
	return res, ok
}
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListNotificationsResponse
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) SetTo(target **ListNotificationsResponse) {
	if *target == nil {
		*target = new(ListNotificationsResponse)
	}
	switch fpv.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		(*target).Notifications = fpv.value.([]*notification.Notification)
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*notification.PagerCursor)
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*notification.PagerCursor)
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListNotificationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListNotificationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListNotificationsResponse_FieldTerminalPathValue' with the value under path in 'ListNotificationsResponse'.
func (fpv *ListNotificationsResponse_FieldTerminalPathValue) CompareWith(source *ListNotificationsResponse) (int, bool) {
	switch fpv.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return 0, false
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *ListNotificationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListNotificationsResponse))
}

type ListNotificationsResponse_FieldSubPathValue struct {
	ListNotificationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListNotificationsResponse_FieldPathValue = (*ListNotificationsResponse_FieldSubPathValue)(nil)

func (fpvs *ListNotificationsResponse_FieldSubPathValue) AsNotificationsPathValue() (notification.Notification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification.Notification_FieldPathValue)
	return res, ok
}

func (fpvs *ListNotificationsResponse_FieldSubPathValue) SetTo(target **ListNotificationsResponse) {
	if *target == nil {
		*target = new(ListNotificationsResponse)
	}
	switch fpvs.Selector() {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListNotificationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListNotificationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListNotificationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListNotificationsResponse_FieldSubPathValue) CompareWith(source *ListNotificationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListNotificationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListNotificationsResponse))
}

// ListNotificationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListNotificationsResponse according to their type
// Present only for array (repeated) types.
type ListNotificationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListNotificationsResponse_FieldPath
	ContainsValue(*ListNotificationsResponse) bool
}

// ParseListNotificationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListNotificationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListNotificationsResponse_FieldPathArrayItemValue), nil
}

func MustParseListNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListNotificationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListNotificationsResponse_FieldTerminalPathArrayItemValue struct {
	ListNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ ListNotificationsResponse_FieldPathArrayItemValue = (*ListNotificationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListNotificationsResponse as interface{}
func (fpaiv *ListNotificationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListNotificationsResponse_FieldTerminalPathArrayItemValue) AsNotificationsItemValue() (*notification.Notification, bool) {
	res, ok := fpaiv.value.(*notification.Notification)
	return res, ok
}

func (fpaiv *ListNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListNotificationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListNotificationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListNotificationsResponse'
func (fpaiv *ListNotificationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListNotificationsResponse) bool {
	slice := fpaiv.ListNotificationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListNotificationsResponse_FieldSubPathArrayItemValue struct {
	ListNotificationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListNotificationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListNotificationsResponse_FieldSubPathArrayItemValue) AsNotificationsPathItemValue() (notification.Notification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListNotificationsResponse'
func (fpaivs *ListNotificationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListNotificationsResponse) bool {
	switch fpaivs.Selector() {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationsResponse: %d", fpaivs.Selector()))
	}
}

// ListNotificationsResponse_FieldPathArrayOfValues allows storing slice of values for ListNotificationsResponse fields according to their type
type ListNotificationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListNotificationsResponse_FieldPath
}

func ParseListNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListNotificationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListNotificationsResponse_FieldPathArrayOfValues), nil
}

func MustParseListNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListNotificationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListNotificationsResponse_FieldTerminalPathArrayOfValues struct {
	ListNotificationsResponse_FieldTerminalPath
	values interface{}
}

var _ ListNotificationsResponse_FieldPathArrayOfValues = (*ListNotificationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListNotificationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListNotificationsResponse_FieldPathSelectorNotifications:
		for _, v := range fpaov.values.([][]*notification.Notification) {
			values = append(values, v)
		}
	case ListNotificationsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case ListNotificationsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case ListNotificationsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListNotificationsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListNotificationsResponse_FieldTerminalPathArrayOfValues) AsNotificationsArrayOfValues() ([][]*notification.Notification, bool) {
	res, ok := fpaov.values.([][]*notification.Notification)
	return res, ok
}
func (fpaov *ListNotificationsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *ListNotificationsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *ListNotificationsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListNotificationsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListNotificationsResponse_FieldSubPathArrayOfValues struct {
	ListNotificationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListNotificationsResponse_FieldPathArrayOfValues = (*ListNotificationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListNotificationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListNotificationsResponse_FieldSubPathArrayOfValues) AsNotificationsPathArrayOfValues() (notification.Notification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification.Notification_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationRequest_FieldPathSelector
	Get(source *WatchNotificationRequest) []interface{}
	GetSingle(source *WatchNotificationRequest) (interface{}, bool)
	ClearValue(item *WatchNotificationRequest)

	// Those methods build corresponding WatchNotificationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationRequest_FieldPathArrayItemValue
}

type WatchNotificationRequest_FieldPathSelector int32

const (
	WatchNotificationRequest_FieldPathSelectorName      WatchNotificationRequest_FieldPathSelector = 0
	WatchNotificationRequest_FieldPathSelectorFieldMask WatchNotificationRequest_FieldPathSelector = 1
	WatchNotificationRequest_FieldPathSelectorView      WatchNotificationRequest_FieldPathSelector = 2
)

func (s WatchNotificationRequest_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationRequest_FieldPathSelectorName:
		return "name"
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchNotificationRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", s))
	}
}

func BuildWatchNotificationRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchNotificationRequest_FieldTerminalPath{selector: WatchNotificationRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchNotificationRequest_FieldTerminalPath{selector: WatchNotificationRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchNotificationRequest_FieldTerminalPath{selector: WatchNotificationRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationRequest", fp)
}

func ParseWatchNotificationRequest_FieldPath(rawField string) (WatchNotificationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationRequest_FieldPath(fp)
}

func MustParseWatchNotificationRequest_FieldPath(rawField string) WatchNotificationRequest_FieldPath {
	fp, err := ParseWatchNotificationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationRequest_FieldTerminalPath struct {
	selector WatchNotificationRequest_FieldPathSelector
}

var _ WatchNotificationRequest_FieldPath = (*WatchNotificationRequest_FieldTerminalPath)(nil)

func (fp *WatchNotificationRequest_FieldTerminalPath) Selector() WatchNotificationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationRequest
func (fp *WatchNotificationRequest_FieldTerminalPath) Get(source *WatchNotificationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchNotificationRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchNotificationRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationRequest))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationRequest
func (fp *WatchNotificationRequest_FieldTerminalPath) GetSingle(source *WatchNotificationRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchNotificationRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		return (*notification.Reference)(nil)
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	case WatchNotificationRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationRequest_FieldTerminalPath) ClearValue(item *WatchNotificationRequest) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchNotificationRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchNotificationRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationRequest_FieldPathSelectorName ||
		fp.selector == WatchNotificationRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchNotificationRequest_FieldPathSelectorView
}

func (fp *WatchNotificationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationRequest_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationRequest_FieldPathValue {
	switch fp.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		return &WatchNotificationRequest_FieldTerminalPathValue{WatchNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Reference)}
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationRequest_FieldTerminalPathValue{WatchNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case WatchNotificationRequest_FieldPathSelectorView:
		return &WatchNotificationRequest_FieldTerminalPathValue{WatchNotificationRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationRequest_FieldPathArrayOfValues {
	fpaov := &WatchNotificationRequest_FieldTerminalPathArrayOfValues{WatchNotificationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		return &WatchNotificationRequest_FieldTerminalPathArrayOfValues{WatchNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Reference)}
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationRequest_FieldTerminalPathArrayOfValues{WatchNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case WatchNotificationRequest_FieldPathSelectorView:
		return &WatchNotificationRequest_FieldTerminalPathArrayOfValues{WatchNotificationRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationRequest_FieldPathValue allows storing values for WatchNotificationRequest fields according to their type
type WatchNotificationRequest_FieldPathValue interface {
	WatchNotificationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationRequest)
	CompareWith(*WatchNotificationRequest) (cmp int, comparable bool)
}

func ParseWatchNotificationRequest_FieldPathValue(pathStr, valueStr string) (WatchNotificationRequest_FieldPathValue, error) {
	fp, err := ParseWatchNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationRequest_FieldPathValue), nil
}

func MustParseWatchNotificationRequest_FieldPathValue(pathStr, valueStr string) WatchNotificationRequest_FieldPathValue {
	fpv, err := ParseWatchNotificationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationRequest_FieldTerminalPathValue struct {
	WatchNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationRequest_FieldPathValue = (*WatchNotificationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationRequest' as interface{}
func (fpv *WatchNotificationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationRequest_FieldTerminalPathValue) AsNameValue() (*notification.Reference, bool) {
	res, ok := fpv.value.(*notification.Reference)
	return res, ok
}
func (fpv *WatchNotificationRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *WatchNotificationRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationRequest
func (fpv *WatchNotificationRequest_FieldTerminalPathValue) SetTo(target **WatchNotificationRequest) {
	if *target == nil {
		*target = new(WatchNotificationRequest)
	}
	switch fpv.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*notification.Reference)
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	case WatchNotificationRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationRequest_FieldTerminalPathValue' with the value under path in 'WatchNotificationRequest'.
func (fpv *WatchNotificationRequest_FieldTerminalPathValue) CompareWith(source *WatchNotificationRequest) (int, bool) {
	switch fpv.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*notification.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchNotificationRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationRequest))
}

// WatchNotificationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationRequest according to their type
// Present only for array (repeated) types.
type WatchNotificationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationRequest_FieldPath
	ContainsValue(*WatchNotificationRequest) bool
}

// ParseWatchNotificationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationRequest_FieldTerminalPathArrayItemValue struct {
	WatchNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationRequest_FieldPathArrayItemValue = (*WatchNotificationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationRequest as interface{}
func (fpaiv *WatchNotificationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationRequest'
func (fpaiv *WatchNotificationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationRequest) bool {
	slice := fpaiv.WatchNotificationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationRequest_FieldPathArrayOfValues allows storing slice of values for WatchNotificationRequest fields according to their type
type WatchNotificationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationRequest_FieldPath
}

func ParseWatchNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationRequest_FieldTerminalPathArrayOfValues struct {
	WatchNotificationRequest_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationRequest_FieldPathArrayOfValues = (*WatchNotificationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*notification.Reference) {
			values = append(values, v)
		}
	case WatchNotificationRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case WatchNotificationRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*notification.Reference, bool) {
	res, ok := fpaov.values.([]*notification.Reference)
	return res, ok
}
func (fpaov *WatchNotificationRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *WatchNotificationRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationResponse_FieldPathSelector
	Get(source *WatchNotificationResponse) []interface{}
	GetSingle(source *WatchNotificationResponse) (interface{}, bool)
	ClearValue(item *WatchNotificationResponse)

	// Those methods build corresponding WatchNotificationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationResponse_FieldPathArrayItemValue
}

type WatchNotificationResponse_FieldPathSelector int32

const (
	WatchNotificationResponse_FieldPathSelectorChange WatchNotificationResponse_FieldPathSelector = 0
)

func (s WatchNotificationResponse_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", s))
	}
}

func BuildWatchNotificationResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchNotificationResponse_FieldTerminalPath{selector: WatchNotificationResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationResponse", fp)
}

func ParseWatchNotificationResponse_FieldPath(rawField string) (WatchNotificationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationResponse_FieldPath(fp)
}

func MustParseWatchNotificationResponse_FieldPath(rawField string) WatchNotificationResponse_FieldPath {
	fp, err := ParseWatchNotificationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationResponse_FieldTerminalPath struct {
	selector WatchNotificationResponse_FieldPathSelector
}

var _ WatchNotificationResponse_FieldPath = (*WatchNotificationResponse_FieldTerminalPath)(nil)

func (fp *WatchNotificationResponse_FieldTerminalPath) Selector() WatchNotificationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationResponse
func (fp *WatchNotificationResponse_FieldTerminalPath) Get(source *WatchNotificationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationResponse))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationResponse
func (fp *WatchNotificationResponse_FieldTerminalPath) GetSingle(source *WatchNotificationResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		return (*notification.NotificationChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationResponse_FieldTerminalPath) ClearValue(item *WatchNotificationResponse) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationResponse_FieldPathSelectorChange
}

func (fp *WatchNotificationResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationResponse_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationResponse_FieldPathValue {
	switch fp.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		return &WatchNotificationResponse_FieldTerminalPathValue{WatchNotificationResponse_FieldTerminalPath: *fp, value: value.(*notification.NotificationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationResponse_FieldPathArrayOfValues {
	fpaov := &WatchNotificationResponse_FieldTerminalPathArrayOfValues{WatchNotificationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		return &WatchNotificationResponse_FieldTerminalPathArrayOfValues{WatchNotificationResponse_FieldTerminalPath: *fp, values: values.([]*notification.NotificationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationResponse_FieldPathValue allows storing values for WatchNotificationResponse fields according to their type
type WatchNotificationResponse_FieldPathValue interface {
	WatchNotificationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationResponse)
	CompareWith(*WatchNotificationResponse) (cmp int, comparable bool)
}

func ParseWatchNotificationResponse_FieldPathValue(pathStr, valueStr string) (WatchNotificationResponse_FieldPathValue, error) {
	fp, err := ParseWatchNotificationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationResponse_FieldPathValue), nil
}

func MustParseWatchNotificationResponse_FieldPathValue(pathStr, valueStr string) WatchNotificationResponse_FieldPathValue {
	fpv, err := ParseWatchNotificationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationResponse_FieldTerminalPathValue struct {
	WatchNotificationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationResponse_FieldPathValue = (*WatchNotificationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationResponse' as interface{}
func (fpv *WatchNotificationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationResponse_FieldTerminalPathValue) AsChangeValue() (*notification.NotificationChange, bool) {
	res, ok := fpv.value.(*notification.NotificationChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationResponse
func (fpv *WatchNotificationResponse_FieldTerminalPathValue) SetTo(target **WatchNotificationResponse) {
	if *target == nil {
		*target = new(WatchNotificationResponse)
	}
	switch fpv.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*notification.NotificationChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationResponse_FieldTerminalPathValue' with the value under path in 'WatchNotificationResponse'.
func (fpv *WatchNotificationResponse_FieldTerminalPathValue) CompareWith(source *WatchNotificationResponse) (int, bool) {
	switch fpv.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationResponse))
}

// WatchNotificationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationResponse according to their type
// Present only for array (repeated) types.
type WatchNotificationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationResponse_FieldPath
	ContainsValue(*WatchNotificationResponse) bool
}

// ParseWatchNotificationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationResponse_FieldTerminalPathArrayItemValue struct {
	WatchNotificationResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationResponse_FieldPathArrayItemValue = (*WatchNotificationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationResponse as interface{}
func (fpaiv *WatchNotificationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationResponse'
func (fpaiv *WatchNotificationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationResponse) bool {
	slice := fpaiv.WatchNotificationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationResponse_FieldPathArrayOfValues allows storing slice of values for WatchNotificationResponse fields according to their type
type WatchNotificationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationResponse_FieldPath
}

func ParseWatchNotificationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationResponse_FieldTerminalPathArrayOfValues struct {
	WatchNotificationResponse_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationResponse_FieldPathArrayOfValues = (*WatchNotificationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*notification.NotificationChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*notification.NotificationChange, bool) {
	res, ok := fpaov.values.([]*notification.NotificationChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationsRequest_FieldPathSelector
	Get(source *WatchNotificationsRequest) []interface{}
	GetSingle(source *WatchNotificationsRequest) (interface{}, bool)
	ClearValue(item *WatchNotificationsRequest)

	// Those methods build corresponding WatchNotificationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationsRequest_FieldPathArrayItemValue
}

type WatchNotificationsRequest_FieldPathSelector int32

const (
	WatchNotificationsRequest_FieldPathSelectorType         WatchNotificationsRequest_FieldPathSelector = 0
	WatchNotificationsRequest_FieldPathSelectorParent       WatchNotificationsRequest_FieldPathSelector = 1
	WatchNotificationsRequest_FieldPathSelectorPageSize     WatchNotificationsRequest_FieldPathSelector = 2
	WatchNotificationsRequest_FieldPathSelectorPageToken    WatchNotificationsRequest_FieldPathSelector = 3
	WatchNotificationsRequest_FieldPathSelectorOrderBy      WatchNotificationsRequest_FieldPathSelector = 4
	WatchNotificationsRequest_FieldPathSelectorResumeToken  WatchNotificationsRequest_FieldPathSelector = 5
	WatchNotificationsRequest_FieldPathSelectorStartingTime WatchNotificationsRequest_FieldPathSelector = 6
	WatchNotificationsRequest_FieldPathSelectorFilter       WatchNotificationsRequest_FieldPathSelector = 7
	WatchNotificationsRequest_FieldPathSelectorFieldMask    WatchNotificationsRequest_FieldPathSelector = 8
	WatchNotificationsRequest_FieldPathSelectorView         WatchNotificationsRequest_FieldPathSelector = 9
	WatchNotificationsRequest_FieldPathSelectorMaxChunkSize WatchNotificationsRequest_FieldPathSelector = 10
)

func (s WatchNotificationsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationsRequest_FieldPathSelectorType:
		return "type"
	case WatchNotificationsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchNotificationsRequest_FieldPathSelectorView:
		return "view"
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", s))
	}
}

func BuildWatchNotificationsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationsRequest", fp)
}

func ParseWatchNotificationsRequest_FieldPath(rawField string) (WatchNotificationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationsRequest_FieldPath(fp)
}

func MustParseWatchNotificationsRequest_FieldPath(rawField string) WatchNotificationsRequest_FieldPath {
	fp, err := ParseWatchNotificationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationsRequest_FieldTerminalPath struct {
	selector WatchNotificationsRequest_FieldPathSelector
}

var _ WatchNotificationsRequest_FieldPath = (*WatchNotificationsRequest_FieldTerminalPath)(nil)

func (fp *WatchNotificationsRequest_FieldTerminalPath) Selector() WatchNotificationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationsRequest
func (fp *WatchNotificationsRequest_FieldTerminalPath) Get(source *WatchNotificationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchNotificationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchNotificationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchNotificationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchNotificationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchNotificationsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchNotificationsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchNotificationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchNotificationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchNotificationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationsRequest
func (fp *WatchNotificationsRequest_FieldTerminalPath) GetSingle(source *WatchNotificationsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchNotificationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchNotificationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchNotificationsRequest_FieldPathSelectorParent:
		return (*notification.ParentReference)(nil)
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		return (*notification.PagerCursor)(nil)
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		return (*notification.OrderBy)(nil)
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		return (*notification.Filter)(nil)
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	case WatchNotificationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) ClearValue(item *WatchNotificationsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchNotificationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchNotificationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchNotificationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchNotificationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchNotificationsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchNotificationsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchNotificationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchNotificationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchNotificationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationsRequest_FieldPathSelectorType ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorParent ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorView ||
		fp.selector == WatchNotificationsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationsRequest_FieldPathValue {
	switch fp.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchNotificationsRequest_FieldPathSelectorParent:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.ParentReference)}
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.OrderBy)}
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Filter)}
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case WatchNotificationsRequest_FieldPathSelectorView:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchNotificationsRequest_FieldTerminalPathValue{WatchNotificationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationsRequest_FieldPathArrayOfValues {
	fpaov := &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchNotificationsRequest_FieldPathSelectorParent:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.ParentReference)}
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.OrderBy)}
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Filter)}
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case WatchNotificationsRequest_FieldPathSelectorView:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchNotificationsRequest_FieldTerminalPathArrayOfValues{WatchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationsRequest_FieldPathValue allows storing values for WatchNotificationsRequest fields according to their type
type WatchNotificationsRequest_FieldPathValue interface {
	WatchNotificationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationsRequest)
	CompareWith(*WatchNotificationsRequest) (cmp int, comparable bool)
}

func ParseWatchNotificationsRequest_FieldPathValue(pathStr, valueStr string) (WatchNotificationsRequest_FieldPathValue, error) {
	fp, err := ParseWatchNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationsRequest_FieldPathValue), nil
}

func MustParseWatchNotificationsRequest_FieldPathValue(pathStr, valueStr string) WatchNotificationsRequest_FieldPathValue {
	fpv, err := ParseWatchNotificationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationsRequest_FieldTerminalPathValue struct {
	WatchNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationsRequest_FieldPathValue = (*WatchNotificationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationsRequest' as interface{}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsParentValue() (*notification.ParentReference, bool) {
	res, ok := fpv.value.(*notification.ParentReference)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsOrderByValue() (*notification.OrderBy, bool) {
	res, ok := fpv.value.(*notification.OrderBy)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsFilterValue() (*notification.Filter, bool) {
	res, ok := fpv.value.(*notification.Filter)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationsRequest
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) SetTo(target **WatchNotificationsRequest) {
	if *target == nil {
		*target = new(WatchNotificationsRequest)
	}
	switch fpv.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchNotificationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification.ParentReference)
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*notification.PagerCursor)
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*notification.OrderBy)
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*notification.Filter)
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	case WatchNotificationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationsRequest_FieldTerminalPathValue' with the value under path in 'WatchNotificationsRequest'.
func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) CompareWith(source *WatchNotificationsRequest) (int, bool) {
	switch fpv.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchNotificationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationsRequest))
}

// WatchNotificationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationsRequest according to their type
// Present only for array (repeated) types.
type WatchNotificationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationsRequest_FieldPath
	ContainsValue(*WatchNotificationsRequest) bool
}

// ParseWatchNotificationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationsRequest_FieldTerminalPathArrayItemValue struct {
	WatchNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationsRequest_FieldPathArrayItemValue = (*WatchNotificationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationsRequest as interface{}
func (fpaiv *WatchNotificationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationsRequest'
func (fpaiv *WatchNotificationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationsRequest) bool {
	slice := fpaiv.WatchNotificationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationsRequest_FieldPathArrayOfValues allows storing slice of values for WatchNotificationsRequest fields according to their type
type WatchNotificationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationsRequest_FieldPath
}

func ParseWatchNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationsRequest_FieldTerminalPathArrayOfValues struct {
	WatchNotificationsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationsRequest_FieldPathArrayOfValues = (*WatchNotificationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification.ParentReference) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*notification.OrderBy) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*notification.Filter) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchNotificationsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification.ParentReference, bool) {
	res, ok := fpaov.values.([]*notification.ParentReference)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*notification.OrderBy, bool) {
	res, ok := fpaov.values.([]*notification.OrderBy)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*notification.Filter, bool) {
	res, ok := fpaov.values.([]*notification.Filter)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchNotificationsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationsResponse_FieldPathSelector
	Get(source *WatchNotificationsResponse) []interface{}
	GetSingle(source *WatchNotificationsResponse) (interface{}, bool)
	ClearValue(item *WatchNotificationsResponse)

	// Those methods build corresponding WatchNotificationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationsResponse_FieldPathArrayItemValue
}

type WatchNotificationsResponse_FieldPathSelector int32

const (
	WatchNotificationsResponse_FieldPathSelectorNotificationChanges WatchNotificationsResponse_FieldPathSelector = 0
	WatchNotificationsResponse_FieldPathSelectorIsCurrent           WatchNotificationsResponse_FieldPathSelector = 1
	WatchNotificationsResponse_FieldPathSelectorPageTokenChange     WatchNotificationsResponse_FieldPathSelector = 2
	WatchNotificationsResponse_FieldPathSelectorResumeToken         WatchNotificationsResponse_FieldPathSelector = 3
	WatchNotificationsResponse_FieldPathSelectorSnapshotSize        WatchNotificationsResponse_FieldPathSelector = 4
	WatchNotificationsResponse_FieldPathSelectorIsSoftReset         WatchNotificationsResponse_FieldPathSelector = 5
	WatchNotificationsResponse_FieldPathSelectorIsHardReset         WatchNotificationsResponse_FieldPathSelector = 6
)

func (s WatchNotificationsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		return "notification_changes"
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", s))
	}
}

func BuildWatchNotificationsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notification_changes", "notificationChanges", "notification-changes":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorNotificationChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchNotificationsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchNotificationsResponse_FieldSubPath{selector: WatchNotificationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationsResponse", fp)
}

func ParseWatchNotificationsResponse_FieldPath(rawField string) (WatchNotificationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationsResponse_FieldPath(fp)
}

func MustParseWatchNotificationsResponse_FieldPath(rawField string) WatchNotificationsResponse_FieldPath {
	fp, err := ParseWatchNotificationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationsResponse_FieldTerminalPath struct {
	selector WatchNotificationsResponse_FieldPathSelector
}

var _ WatchNotificationsResponse_FieldPath = (*WatchNotificationsResponse_FieldTerminalPath)(nil)

func (fp *WatchNotificationsResponse_FieldTerminalPath) Selector() WatchNotificationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationsResponse
func (fp *WatchNotificationsResponse_FieldTerminalPath) Get(source *WatchNotificationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
			for _, value := range source.GetNotificationChanges() {
				values = append(values, value)
			}
		case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchNotificationsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationsResponse
func (fp *WatchNotificationsResponse_FieldTerminalPath) GetSingle(source *WatchNotificationsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		res := source.GetNotificationChanges()
		return res, res != nil
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		return ([]*notification.NotificationChange)(nil)
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchNotificationsResponse_PageTokenChange)(nil)
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) ClearValue(item *WatchNotificationsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
			item.NotificationChanges = nil
		case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchNotificationsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationsResponse_FieldPathSelectorNotificationChanges ||
		fp.selector == WatchNotificationsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchNotificationsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchNotificationsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchNotificationsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchNotificationsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationsResponse_FieldPathValue {
	switch fp.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.([]*notification.NotificationChange)}
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(*WatchNotificationsResponse_PageTokenChange)}
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		return &WatchNotificationsResponse_FieldTerminalPathValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationsResponse_FieldPathArrayOfValues {
	fpaov := &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([][]*notification.NotificationChange)}
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]*WatchNotificationsResponse_PageTokenChange)}
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		return &WatchNotificationsResponse_FieldTerminalPathArrayOfValues{WatchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		return &WatchNotificationsResponse_FieldTerminalPathArrayItemValue{WatchNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.NotificationChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchNotificationsResponse_FieldSubPath struct {
	selector WatchNotificationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchNotificationsResponse_FieldPath = (*WatchNotificationsResponse_FieldSubPath)(nil)

func (fps *WatchNotificationsResponse_FieldSubPath) Selector() WatchNotificationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchNotificationsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchNotificationsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchNotificationsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchNotificationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchNotificationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchNotificationsResponse
func (fps *WatchNotificationsResponse_FieldSubPath) Get(source *WatchNotificationsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchNotificationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchNotificationsResponse))
}

// GetSingle returns value of selected field from source WatchNotificationsResponse
func (fps *WatchNotificationsResponse_FieldSubPath) GetSingle(source *WatchNotificationsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fps.selector))
	}
}

func (fps *WatchNotificationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchNotificationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchNotificationsResponse_FieldSubPath) ClearValue(item *WatchNotificationsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchNotificationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchNotificationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchNotificationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchNotificationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchNotificationsResponse_FieldSubPath) WithIValue(value interface{}) WatchNotificationsResponse_FieldPathValue {
	return &WatchNotificationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchNotificationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchNotificationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchNotificationsResponse_FieldPathArrayOfValues {
	return &WatchNotificationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchNotificationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchNotificationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchNotificationsResponse_FieldPathArrayItemValue {
	return &WatchNotificationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchNotificationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchNotificationsResponse_FieldPathValue allows storing values for WatchNotificationsResponse fields according to their type
type WatchNotificationsResponse_FieldPathValue interface {
	WatchNotificationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationsResponse)
	CompareWith(*WatchNotificationsResponse) (cmp int, comparable bool)
}

func ParseWatchNotificationsResponse_FieldPathValue(pathStr, valueStr string) (WatchNotificationsResponse_FieldPathValue, error) {
	fp, err := ParseWatchNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationsResponse_FieldPathValue), nil
}

func MustParseWatchNotificationsResponse_FieldPathValue(pathStr, valueStr string) WatchNotificationsResponse_FieldPathValue {
	fpv, err := ParseWatchNotificationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationsResponse_FieldTerminalPathValue struct {
	WatchNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationsResponse_FieldPathValue = (*WatchNotificationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationsResponse' as interface{}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsNotificationChangesValue() ([]*notification.NotificationChange, bool) {
	res, ok := fpv.value.([]*notification.NotificationChange)
	return res, ok
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchNotificationsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchNotificationsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationsResponse
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) SetTo(target **WatchNotificationsResponse) {
	if *target == nil {
		*target = new(WatchNotificationsResponse)
	}
	switch fpv.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		(*target).NotificationChanges = fpv.value.([]*notification.NotificationChange)
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchNotificationsResponse_PageTokenChange)
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationsResponse_FieldTerminalPathValue' with the value under path in 'WatchNotificationsResponse'.
func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) CompareWith(source *WatchNotificationsResponse) (int, bool) {
	switch fpv.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		return 0, false
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationsResponse))
}

type WatchNotificationsResponse_FieldSubPathValue struct {
	WatchNotificationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchNotificationsResponse_FieldPathValue = (*WatchNotificationsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchNotificationsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchNotificationsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchNotificationsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchNotificationsResponse_FieldSubPathValue) SetTo(target **WatchNotificationsResponse) {
	if *target == nil {
		*target = new(WatchNotificationsResponse)
	}
	switch fpvs.Selector() {
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchNotificationsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchNotificationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchNotificationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchNotificationsResponse_FieldSubPathValue) CompareWith(source *WatchNotificationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchNotificationsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchNotificationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchNotificationsResponse))
}

// WatchNotificationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationsResponse according to their type
// Present only for array (repeated) types.
type WatchNotificationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationsResponse_FieldPath
	ContainsValue(*WatchNotificationsResponse) bool
}

// ParseWatchNotificationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationsResponse_FieldTerminalPathArrayItemValue struct {
	WatchNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationsResponse_FieldPathArrayItemValue = (*WatchNotificationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationsResponse as interface{}
func (fpaiv *WatchNotificationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchNotificationsResponse_FieldTerminalPathArrayItemValue) AsNotificationChangesItemValue() (*notification.NotificationChange, bool) {
	res, ok := fpaiv.value.(*notification.NotificationChange)
	return res, ok
}

func (fpaiv *WatchNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationsResponse'
func (fpaiv *WatchNotificationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationsResponse) bool {
	slice := fpaiv.WatchNotificationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchNotificationsResponse_FieldSubPathArrayItemValue struct {
	WatchNotificationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchNotificationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchNotificationsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationsResponse'
func (fpaivs *WatchNotificationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchNotificationsResponse) bool {
	switch fpaivs.Selector() {
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse: %d", fpaivs.Selector()))
	}
}

// WatchNotificationsResponse_FieldPathArrayOfValues allows storing slice of values for WatchNotificationsResponse fields according to their type
type WatchNotificationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationsResponse_FieldPath
}

func ParseWatchNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationsResponse_FieldTerminalPathArrayOfValues struct {
	WatchNotificationsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationsResponse_FieldPathArrayOfValues = (*WatchNotificationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationsResponse_FieldPathSelectorNotificationChanges:
		for _, v := range fpaov.values.([][]*notification.NotificationChange) {
			values = append(values, v)
		}
	case WatchNotificationsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchNotificationsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchNotificationsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchNotificationsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchNotificationsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchNotificationsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchNotificationsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsNotificationChangesArrayOfValues() ([][]*notification.NotificationChange, bool) {
	res, ok := fpaov.values.([][]*notification.NotificationChange)
	return res, ok
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchNotificationsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchNotificationsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchNotificationsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchNotificationsResponse_FieldSubPathArrayOfValues struct {
	WatchNotificationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchNotificationsResponse_FieldPathArrayOfValues = (*WatchNotificationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchNotificationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchNotificationsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchNotificationsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchNotificationsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchNotificationsResponse_PageTokenChange)

	// Those methods build corresponding WatchNotificationsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchNotificationsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchNotificationsResponsePageTokenChange_FieldPathSelector = 0
	WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchNotificationsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchNotificationsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchNotificationsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchNotificationsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchNotificationsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationsResponse_PageTokenChange", fp)
}

func ParseWatchNotificationsResponsePageTokenChange_FieldPath(rawField string) (WatchNotificationsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchNotificationsResponsePageTokenChange_FieldPath(rawField string) WatchNotificationsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchNotificationsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchNotificationsResponsePageTokenChange_FieldPathSelector
}

var _ WatchNotificationsResponsePageTokenChange_FieldPath = (*WatchNotificationsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) Selector() WatchNotificationsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationsResponse_PageTokenChange
func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchNotificationsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationsResponse_PageTokenChange
func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchNotificationsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*notification.PagerCursor)(nil)
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*notification.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchNotificationsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue{WatchNotificationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue{WatchNotificationsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchNotificationsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchNotificationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchNotificationsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchNotificationsResponsePageTokenChange_FieldPathValue interface {
	WatchNotificationsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationsResponse_PageTokenChange)
	CompareWith(*WatchNotificationsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchNotificationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchNotificationsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchNotificationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchNotificationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchNotificationsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchNotificationsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchNotificationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationsResponsePageTokenChange_FieldPathValue = (*WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchNotificationsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchNotificationsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*notification.PagerCursor)
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*notification.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchNotificationsResponse_PageTokenChange'.
func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchNotificationsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationsResponse_PageTokenChange))
}

// WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchNotificationsResponse_PageTokenChange) bool
}

// ParseWatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchNotificationsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationsResponse_PageTokenChange as interface{}
func (fpaiv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchNotificationsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationsResponsePageTokenChange_FieldPath
}

func ParseWatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchNotificationsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *WatchNotificationsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateNotificationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateNotificationRequest_FieldPathSelector
	Get(source *CreateNotificationRequest) []interface{}
	GetSingle(source *CreateNotificationRequest) (interface{}, bool)
	ClearValue(item *CreateNotificationRequest)

	// Those methods build corresponding CreateNotificationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateNotificationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateNotificationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateNotificationRequest_FieldPathArrayItemValue
}

type CreateNotificationRequest_FieldPathSelector int32

const (
	CreateNotificationRequest_FieldPathSelectorParent       CreateNotificationRequest_FieldPathSelector = 0
	CreateNotificationRequest_FieldPathSelectorNotification CreateNotificationRequest_FieldPathSelector = 1
)

func (s CreateNotificationRequest_FieldPathSelector) String() string {
	switch s {
	case CreateNotificationRequest_FieldPathSelectorParent:
		return "parent"
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return "notification"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", s))
	}
}

func BuildCreateNotificationRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateNotificationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateNotificationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateNotificationRequest_FieldTerminalPath{selector: CreateNotificationRequest_FieldPathSelectorParent}, nil
		case "notification":
			return &CreateNotificationRequest_FieldTerminalPath{selector: CreateNotificationRequest_FieldPathSelectorNotification}, nil
		}
	} else {
		switch fp[0] {
		case "notification":
			if subpath, err := notification.BuildNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateNotificationRequest_FieldSubPath{selector: CreateNotificationRequest_FieldPathSelectorNotification, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateNotificationRequest", fp)
}

func ParseCreateNotificationRequest_FieldPath(rawField string) (CreateNotificationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateNotificationRequest_FieldPath(fp)
}

func MustParseCreateNotificationRequest_FieldPath(rawField string) CreateNotificationRequest_FieldPath {
	fp, err := ParseCreateNotificationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateNotificationRequest_FieldTerminalPath struct {
	selector CreateNotificationRequest_FieldPathSelector
}

var _ CreateNotificationRequest_FieldPath = (*CreateNotificationRequest_FieldTerminalPath)(nil)

func (fp *CreateNotificationRequest_FieldTerminalPath) Selector() CreateNotificationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateNotificationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateNotificationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateNotificationRequest
func (fp *CreateNotificationRequest_FieldTerminalPath) Get(source *CreateNotificationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateNotificationRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateNotificationRequest_FieldPathSelectorNotification:
			if source.Notification != nil {
				values = append(values, source.Notification)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateNotificationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateNotificationRequest))
}

// GetSingle returns value pointed by specific field of from source CreateNotificationRequest
func (fp *CreateNotificationRequest_FieldTerminalPath) GetSingle(source *CreateNotificationRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateNotificationRequest_FieldPathSelectorNotification:
		res := source.GetNotification()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateNotificationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		return (*notification.ParentReference)(nil)
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return (*notification.Notification)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationRequest_FieldTerminalPath) ClearValue(item *CreateNotificationRequest) {
	if item != nil {
		switch fp.selector {
		case CreateNotificationRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateNotificationRequest_FieldPathSelectorNotification:
			item.Notification = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateNotificationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateNotificationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateNotificationRequest_FieldPathSelectorParent
}

func (fp *CreateNotificationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateNotificationRequest_FieldTerminalPath) WithIValue(value interface{}) CreateNotificationRequest_FieldPathValue {
	switch fp.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		return &CreateNotificationRequest_FieldTerminalPathValue{CreateNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.ParentReference)}
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return &CreateNotificationRequest_FieldTerminalPathValue{CreateNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateNotificationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateNotificationRequest_FieldPathArrayOfValues {
	fpaov := &CreateNotificationRequest_FieldTerminalPathArrayOfValues{CreateNotificationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		return &CreateNotificationRequest_FieldTerminalPathArrayOfValues{CreateNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.ParentReference)}
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return &CreateNotificationRequest_FieldTerminalPathArrayOfValues{CreateNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateNotificationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateNotificationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateNotificationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateNotificationRequest_FieldSubPath struct {
	selector CreateNotificationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateNotificationRequest_FieldPath = (*CreateNotificationRequest_FieldSubPath)(nil)

func (fps *CreateNotificationRequest_FieldSubPath) Selector() CreateNotificationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateNotificationRequest_FieldSubPath) AsNotificationSubPath() (notification.Notification_FieldPath, bool) {
	res, ok := fps.subPath.(notification.Notification_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateNotificationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateNotificationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateNotificationRequest
func (fps *CreateNotificationRequest_FieldSubPath) Get(source *CreateNotificationRequest) (values []interface{}) {
	switch fps.selector {
	case CreateNotificationRequest_FieldPathSelectorNotification:
		values = append(values, fps.subPath.GetRaw(source.GetNotification())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateNotificationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateNotificationRequest))
}

// GetSingle returns value of selected field from source CreateNotificationRequest
func (fps *CreateNotificationRequest_FieldSubPath) GetSingle(source *CreateNotificationRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateNotificationRequest_FieldPathSelectorNotification:
		if source.GetNotification() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotification())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fps.selector))
	}
}

func (fps *CreateNotificationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateNotificationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateNotificationRequest_FieldSubPath) ClearValue(item *CreateNotificationRequest) {
	if item != nil {
		switch fps.selector {
		case CreateNotificationRequest_FieldPathSelectorNotification:
			fps.subPath.ClearValueRaw(item.Notification)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateNotificationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateNotificationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateNotificationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateNotificationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateNotificationRequest_FieldSubPath) WithIValue(value interface{}) CreateNotificationRequest_FieldPathValue {
	return &CreateNotificationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateNotificationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateNotificationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateNotificationRequest_FieldPathArrayOfValues {
	return &CreateNotificationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateNotificationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateNotificationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateNotificationRequest_FieldPathArrayItemValue {
	return &CreateNotificationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateNotificationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateNotificationRequest_FieldPathValue allows storing values for CreateNotificationRequest fields according to their type
type CreateNotificationRequest_FieldPathValue interface {
	CreateNotificationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateNotificationRequest)
	CompareWith(*CreateNotificationRequest) (cmp int, comparable bool)
}

func ParseCreateNotificationRequest_FieldPathValue(pathStr, valueStr string) (CreateNotificationRequest_FieldPathValue, error) {
	fp, err := ParseCreateNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateNotificationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateNotificationRequest_FieldPathValue), nil
}

func MustParseCreateNotificationRequest_FieldPathValue(pathStr, valueStr string) CreateNotificationRequest_FieldPathValue {
	fpv, err := ParseCreateNotificationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateNotificationRequest_FieldTerminalPathValue struct {
	CreateNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateNotificationRequest_FieldPathValue = (*CreateNotificationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateNotificationRequest' as interface{}
func (fpv *CreateNotificationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateNotificationRequest_FieldTerminalPathValue) AsParentValue() (*notification.ParentReference, bool) {
	res, ok := fpv.value.(*notification.ParentReference)
	return res, ok
}
func (fpv *CreateNotificationRequest_FieldTerminalPathValue) AsNotificationValue() (*notification.Notification, bool) {
	res, ok := fpv.value.(*notification.Notification)
	return res, ok
}

// SetTo stores value for selected field for object CreateNotificationRequest
func (fpv *CreateNotificationRequest_FieldTerminalPathValue) SetTo(target **CreateNotificationRequest) {
	if *target == nil {
		*target = new(CreateNotificationRequest)
	}
	switch fpv.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification.ParentReference)
	case CreateNotificationRequest_FieldPathSelectorNotification:
		(*target).Notification = fpv.value.(*notification.Notification)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateNotificationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateNotificationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateNotificationRequest_FieldTerminalPathValue' with the value under path in 'CreateNotificationRequest'.
func (fpv *CreateNotificationRequest_FieldTerminalPathValue) CompareWith(source *CreateNotificationRequest) (int, bool) {
	switch fpv.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *CreateNotificationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateNotificationRequest))
}

type CreateNotificationRequest_FieldSubPathValue struct {
	CreateNotificationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateNotificationRequest_FieldPathValue = (*CreateNotificationRequest_FieldSubPathValue)(nil)

func (fpvs *CreateNotificationRequest_FieldSubPathValue) AsNotificationPathValue() (notification.Notification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification.Notification_FieldPathValue)
	return res, ok
}

func (fpvs *CreateNotificationRequest_FieldSubPathValue) SetTo(target **CreateNotificationRequest) {
	if *target == nil {
		*target = new(CreateNotificationRequest)
	}
	switch fpvs.Selector() {
	case CreateNotificationRequest_FieldPathSelectorNotification:
		fpvs.subPathValue.(notification.Notification_FieldPathValue).SetTo(&(*target).Notification)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateNotificationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateNotificationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateNotificationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateNotificationRequest_FieldSubPathValue) CompareWith(source *CreateNotificationRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return fpvs.subPathValue.(notification.Notification_FieldPathValue).CompareWith(source.GetNotification())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateNotificationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateNotificationRequest))
}

// CreateNotificationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateNotificationRequest according to their type
// Present only for array (repeated) types.
type CreateNotificationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateNotificationRequest_FieldPath
	ContainsValue(*CreateNotificationRequest) bool
}

// ParseCreateNotificationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateNotificationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateNotificationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateNotificationRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateNotificationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateNotificationRequest_FieldTerminalPathArrayItemValue struct {
	CreateNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ CreateNotificationRequest_FieldPathArrayItemValue = (*CreateNotificationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateNotificationRequest as interface{}
func (fpaiv *CreateNotificationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateNotificationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateNotificationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateNotificationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateNotificationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateNotificationRequest'
func (fpaiv *CreateNotificationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateNotificationRequest) bool {
	slice := fpaiv.CreateNotificationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateNotificationRequest_FieldSubPathArrayItemValue struct {
	CreateNotificationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateNotificationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateNotificationRequest_FieldSubPathArrayItemValue) AsNotificationPathItemValue() (notification.Notification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateNotificationRequest'
func (fpaivs *CreateNotificationRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateNotificationRequest) bool {
	switch fpaivs.Selector() {
	case CreateNotificationRequest_FieldPathSelectorNotification:
		return fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue).ContainsValue(source.GetNotification())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationRequest: %d", fpaivs.Selector()))
	}
}

// CreateNotificationRequest_FieldPathArrayOfValues allows storing slice of values for CreateNotificationRequest fields according to their type
type CreateNotificationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateNotificationRequest_FieldPath
}

func ParseCreateNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateNotificationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateNotificationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateNotificationRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateNotificationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateNotificationRequest_FieldTerminalPathArrayOfValues struct {
	CreateNotificationRequest_FieldTerminalPath
	values interface{}
}

var _ CreateNotificationRequest_FieldPathArrayOfValues = (*CreateNotificationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateNotificationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateNotificationRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification.ParentReference) {
			values = append(values, v)
		}
	case CreateNotificationRequest_FieldPathSelectorNotification:
		for _, v := range fpaov.values.([]*notification.Notification) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateNotificationRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification.ParentReference, bool) {
	res, ok := fpaov.values.([]*notification.ParentReference)
	return res, ok
}
func (fpaov *CreateNotificationRequest_FieldTerminalPathArrayOfValues) AsNotificationArrayOfValues() ([]*notification.Notification, bool) {
	res, ok := fpaov.values.([]*notification.Notification)
	return res, ok
}

type CreateNotificationRequest_FieldSubPathArrayOfValues struct {
	CreateNotificationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateNotificationRequest_FieldPathArrayOfValues = (*CreateNotificationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateNotificationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateNotificationRequest_FieldSubPathArrayOfValues) AsNotificationPathArrayOfValues() (notification.Notification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification.Notification_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateNotificationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateNotificationRequest_FieldPathSelector
	Get(source *UpdateNotificationRequest) []interface{}
	GetSingle(source *UpdateNotificationRequest) (interface{}, bool)
	ClearValue(item *UpdateNotificationRequest)

	// Those methods build corresponding UpdateNotificationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateNotificationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateNotificationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateNotificationRequest_FieldPathArrayItemValue
}

type UpdateNotificationRequest_FieldPathSelector int32

const (
	UpdateNotificationRequest_FieldPathSelectorNotification UpdateNotificationRequest_FieldPathSelector = 0
	UpdateNotificationRequest_FieldPathSelectorUpdateMask   UpdateNotificationRequest_FieldPathSelector = 1
	UpdateNotificationRequest_FieldPathSelectorCas          UpdateNotificationRequest_FieldPathSelector = 2
)

func (s UpdateNotificationRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return "notification"
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", s))
	}
}

func BuildUpdateNotificationRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateNotificationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateNotificationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notification":
			return &UpdateNotificationRequest_FieldTerminalPath{selector: UpdateNotificationRequest_FieldPathSelectorNotification}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateNotificationRequest_FieldTerminalPath{selector: UpdateNotificationRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateNotificationRequest_FieldTerminalPath{selector: UpdateNotificationRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "notification":
			if subpath, err := notification.BuildNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateNotificationRequest_FieldSubPath{selector: UpdateNotificationRequest_FieldPathSelectorNotification, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateNotificationRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateNotificationRequest_FieldSubPath{selector: UpdateNotificationRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateNotificationRequest", fp)
}

func ParseUpdateNotificationRequest_FieldPath(rawField string) (UpdateNotificationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateNotificationRequest_FieldPath(fp)
}

func MustParseUpdateNotificationRequest_FieldPath(rawField string) UpdateNotificationRequest_FieldPath {
	fp, err := ParseUpdateNotificationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateNotificationRequest_FieldTerminalPath struct {
	selector UpdateNotificationRequest_FieldPathSelector
}

var _ UpdateNotificationRequest_FieldPath = (*UpdateNotificationRequest_FieldTerminalPath)(nil)

func (fp *UpdateNotificationRequest_FieldTerminalPath) Selector() UpdateNotificationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateNotificationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateNotificationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateNotificationRequest
func (fp *UpdateNotificationRequest_FieldTerminalPath) Get(source *UpdateNotificationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateNotificationRequest_FieldPathSelectorNotification:
			if source.Notification != nil {
				values = append(values, source.Notification)
			}
		case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateNotificationRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateNotificationRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateNotificationRequest
func (fp *UpdateNotificationRequest_FieldTerminalPath) GetSingle(source *UpdateNotificationRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		res := source.GetNotification()
		return res, res != nil
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateNotificationRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateNotificationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return (*notification.Notification)(nil)
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		return (*notification.Notification_FieldMask)(nil)
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return (*UpdateNotificationRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) ClearValue(item *UpdateNotificationRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateNotificationRequest_FieldPathSelectorNotification:
			item.Notification = nil
		case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateNotificationRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateNotificationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateNotificationRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateNotificationRequest_FieldPathValue {
	switch fp.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return &UpdateNotificationRequest_FieldTerminalPathValue{UpdateNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification)}
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		return &UpdateNotificationRequest_FieldTerminalPathValue{UpdateNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return &UpdateNotificationRequest_FieldTerminalPathValue{UpdateNotificationRequest_FieldTerminalPath: *fp, value: value.(*UpdateNotificationRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateNotificationRequest_FieldPathArrayOfValues {
	fpaov := &UpdateNotificationRequest_FieldTerminalPathArrayOfValues{UpdateNotificationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return &UpdateNotificationRequest_FieldTerminalPathArrayOfValues{UpdateNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification)}
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		return &UpdateNotificationRequest_FieldTerminalPathArrayOfValues{UpdateNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return &UpdateNotificationRequest_FieldTerminalPathArrayOfValues{UpdateNotificationRequest_FieldTerminalPath: *fp, values: values.([]*UpdateNotificationRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateNotificationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateNotificationRequest_FieldSubPath struct {
	selector UpdateNotificationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateNotificationRequest_FieldPath = (*UpdateNotificationRequest_FieldSubPath)(nil)

func (fps *UpdateNotificationRequest_FieldSubPath) Selector() UpdateNotificationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateNotificationRequest_FieldSubPath) AsNotificationSubPath() (notification.Notification_FieldPath, bool) {
	res, ok := fps.subPath.(notification.Notification_FieldPath)
	return res, ok
}
func (fps *UpdateNotificationRequest_FieldSubPath) AsCasSubPath() (UpdateNotificationRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateNotificationRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateNotificationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateNotificationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateNotificationRequest
func (fps *UpdateNotificationRequest_FieldSubPath) Get(source *UpdateNotificationRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		values = append(values, fps.subPath.GetRaw(source.GetNotification())...)
	case UpdateNotificationRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateNotificationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateNotificationRequest))
}

// GetSingle returns value of selected field from source UpdateNotificationRequest
func (fps *UpdateNotificationRequest_FieldSubPath) GetSingle(source *UpdateNotificationRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		if source.GetNotification() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotification())
	case UpdateNotificationRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fps.selector))
	}
}

func (fps *UpdateNotificationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateNotificationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateNotificationRequest_FieldSubPath) ClearValue(item *UpdateNotificationRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateNotificationRequest_FieldPathSelectorNotification:
			fps.subPath.ClearValueRaw(item.Notification)
		case UpdateNotificationRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateNotificationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateNotificationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateNotificationRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateNotificationRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateNotificationRequest_FieldSubPath) WithIValue(value interface{}) UpdateNotificationRequest_FieldPathValue {
	return &UpdateNotificationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateNotificationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateNotificationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateNotificationRequest_FieldPathArrayOfValues {
	return &UpdateNotificationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateNotificationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateNotificationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateNotificationRequest_FieldPathArrayItemValue {
	return &UpdateNotificationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateNotificationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateNotificationRequest_FieldPathValue allows storing values for UpdateNotificationRequest fields according to their type
type UpdateNotificationRequest_FieldPathValue interface {
	UpdateNotificationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateNotificationRequest)
	CompareWith(*UpdateNotificationRequest) (cmp int, comparable bool)
}

func ParseUpdateNotificationRequest_FieldPathValue(pathStr, valueStr string) (UpdateNotificationRequest_FieldPathValue, error) {
	fp, err := ParseUpdateNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateNotificationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateNotificationRequest_FieldPathValue), nil
}

func MustParseUpdateNotificationRequest_FieldPathValue(pathStr, valueStr string) UpdateNotificationRequest_FieldPathValue {
	fpv, err := ParseUpdateNotificationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateNotificationRequest_FieldTerminalPathValue struct {
	UpdateNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationRequest_FieldPathValue = (*UpdateNotificationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateNotificationRequest' as interface{}
func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) AsNotificationValue() (*notification.Notification, bool) {
	res, ok := fpv.value.(*notification.Notification)
	return res, ok
}
func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) AsCasValue() (*UpdateNotificationRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateNotificationRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateNotificationRequest
func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) SetTo(target **UpdateNotificationRequest) {
	if *target == nil {
		*target = new(UpdateNotificationRequest)
	}
	switch fpv.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		(*target).Notification = fpv.value.(*notification.Notification)
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*notification.Notification_FieldMask)
	case UpdateNotificationRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateNotificationRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateNotificationRequest_FieldTerminalPathValue' with the value under path in 'UpdateNotificationRequest'.
func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) CompareWith(source *UpdateNotificationRequest) (int, bool) {
	switch fpv.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return 0, false
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateNotificationRequest))
}

type UpdateNotificationRequest_FieldSubPathValue struct {
	UpdateNotificationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateNotificationRequest_FieldPathValue = (*UpdateNotificationRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateNotificationRequest_FieldSubPathValue) AsNotificationPathValue() (notification.Notification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification.Notification_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateNotificationRequest_FieldSubPathValue) AsCasPathValue() (UpdateNotificationRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateNotificationRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateNotificationRequest_FieldSubPathValue) SetTo(target **UpdateNotificationRequest) {
	if *target == nil {
		*target = new(UpdateNotificationRequest)
	}
	switch fpvs.Selector() {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		fpvs.subPathValue.(notification.Notification_FieldPathValue).SetTo(&(*target).Notification)
	case UpdateNotificationRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateNotificationRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateNotificationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateNotificationRequest_FieldSubPathValue) CompareWith(source *UpdateNotificationRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return fpvs.subPathValue.(notification.Notification_FieldPathValue).CompareWith(source.GetNotification())
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateNotificationRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateNotificationRequest))
}

// UpdateNotificationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateNotificationRequest according to their type
// Present only for array (repeated) types.
type UpdateNotificationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateNotificationRequest_FieldPath
	ContainsValue(*UpdateNotificationRequest) bool
}

// ParseUpdateNotificationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateNotificationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateNotificationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateNotificationRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateNotificationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateNotificationRequest_FieldTerminalPathArrayItemValue struct {
	UpdateNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationRequest_FieldPathArrayItemValue = (*UpdateNotificationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateNotificationRequest as interface{}
func (fpaiv *UpdateNotificationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateNotificationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateNotificationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateNotificationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateNotificationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateNotificationRequest'
func (fpaiv *UpdateNotificationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateNotificationRequest) bool {
	slice := fpaiv.UpdateNotificationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateNotificationRequest_FieldSubPathArrayItemValue struct {
	UpdateNotificationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateNotificationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateNotificationRequest_FieldSubPathArrayItemValue) AsNotificationPathItemValue() (notification.Notification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateNotificationRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateNotificationRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateNotificationRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateNotificationRequest'
func (fpaivs *UpdateNotificationRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateNotificationRequest) bool {
	switch fpaivs.Selector() {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		return fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue).ContainsValue(source.GetNotification())
	case UpdateNotificationRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateNotificationRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest: %d", fpaivs.Selector()))
	}
}

// UpdateNotificationRequest_FieldPathArrayOfValues allows storing slice of values for UpdateNotificationRequest fields according to their type
type UpdateNotificationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateNotificationRequest_FieldPath
}

func ParseUpdateNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateNotificationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateNotificationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateNotificationRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateNotificationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateNotificationRequest_FieldTerminalPathArrayOfValues struct {
	UpdateNotificationRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateNotificationRequest_FieldPathArrayOfValues = (*UpdateNotificationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateNotificationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateNotificationRequest_FieldPathSelectorNotification:
		for _, v := range fpaov.values.([]*notification.Notification) {
			values = append(values, v)
		}
	case UpdateNotificationRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case UpdateNotificationRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateNotificationRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateNotificationRequest_FieldTerminalPathArrayOfValues) AsNotificationArrayOfValues() ([]*notification.Notification, bool) {
	res, ok := fpaov.values.([]*notification.Notification)
	return res, ok
}
func (fpaov *UpdateNotificationRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *UpdateNotificationRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateNotificationRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateNotificationRequest_CAS)
	return res, ok
}

type UpdateNotificationRequest_FieldSubPathArrayOfValues struct {
	UpdateNotificationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateNotificationRequest_FieldPathArrayOfValues = (*UpdateNotificationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateNotificationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateNotificationRequest_FieldSubPathArrayOfValues) AsNotificationPathArrayOfValues() (notification.Notification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification.Notification_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateNotificationRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateNotificationRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateNotificationRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateNotificationRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateNotificationRequestCAS_FieldPathSelector
	Get(source *UpdateNotificationRequest_CAS) []interface{}
	GetSingle(source *UpdateNotificationRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateNotificationRequest_CAS)

	// Those methods build corresponding UpdateNotificationRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateNotificationRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateNotificationRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateNotificationRequestCAS_FieldPathArrayItemValue
}

type UpdateNotificationRequestCAS_FieldPathSelector int32

const (
	UpdateNotificationRequestCAS_FieldPathSelectorConditionalState UpdateNotificationRequestCAS_FieldPathSelector = 0
	UpdateNotificationRequestCAS_FieldPathSelectorFieldMask        UpdateNotificationRequestCAS_FieldPathSelector = 1
)

func (s UpdateNotificationRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", s))
	}
}

func BuildUpdateNotificationRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateNotificationRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateNotificationRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateNotificationRequestCAS_FieldTerminalPath{selector: UpdateNotificationRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateNotificationRequestCAS_FieldTerminalPath{selector: UpdateNotificationRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := notification.BuildNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateNotificationRequestCAS_FieldSubPath{selector: UpdateNotificationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateNotificationRequest_CAS", fp)
}

func ParseUpdateNotificationRequestCAS_FieldPath(rawField string) (UpdateNotificationRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateNotificationRequestCAS_FieldPath(fp)
}

func MustParseUpdateNotificationRequestCAS_FieldPath(rawField string) UpdateNotificationRequestCAS_FieldPath {
	fp, err := ParseUpdateNotificationRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateNotificationRequestCAS_FieldTerminalPath struct {
	selector UpdateNotificationRequestCAS_FieldPathSelector
}

var _ UpdateNotificationRequestCAS_FieldPath = (*UpdateNotificationRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) Selector() UpdateNotificationRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateNotificationRequest_CAS
func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) Get(source *UpdateNotificationRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateNotificationRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateNotificationRequest_CAS
func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) GetSingle(source *UpdateNotificationRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateNotificationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return (*notification.Notification)(nil)
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) ClearValue(item *UpdateNotificationRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateNotificationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateNotificationRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateNotificationRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateNotificationRequestCAS_FieldTerminalPathValue{UpdateNotificationRequestCAS_FieldTerminalPath: *fp, value: value.(*notification.Notification)}
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateNotificationRequestCAS_FieldTerminalPathValue{UpdateNotificationRequestCAS_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateNotificationRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues{UpdateNotificationRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues{UpdateNotificationRequestCAS_FieldTerminalPath: *fp, values: values.([]*notification.Notification)}
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues{UpdateNotificationRequestCAS_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateNotificationRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateNotificationRequestCAS_FieldSubPath struct {
	selector UpdateNotificationRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateNotificationRequestCAS_FieldPath = (*UpdateNotificationRequestCAS_FieldSubPath)(nil)

func (fps *UpdateNotificationRequestCAS_FieldSubPath) Selector() UpdateNotificationRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateNotificationRequestCAS_FieldSubPath) AsConditionalStateSubPath() (notification.Notification_FieldPath, bool) {
	res, ok := fps.subPath.(notification.Notification_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateNotificationRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateNotificationRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateNotificationRequest_CAS
func (fps *UpdateNotificationRequestCAS_FieldSubPath) Get(source *UpdateNotificationRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateNotificationRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateNotificationRequest_CAS
func (fps *UpdateNotificationRequestCAS_FieldSubPath) GetSingle(source *UpdateNotificationRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateNotificationRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateNotificationRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) ClearValue(item *UpdateNotificationRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateNotificationRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateNotificationRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateNotificationRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateNotificationRequestCAS_FieldPathValue {
	return &UpdateNotificationRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateNotificationRequestCAS_FieldPathArrayOfValues {
	return &UpdateNotificationRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateNotificationRequestCAS_FieldPathArrayItemValue {
	return &UpdateNotificationRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateNotificationRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateNotificationRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateNotificationRequestCAS_FieldPathValue interface {
	UpdateNotificationRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateNotificationRequest_CAS)
	CompareWith(*UpdateNotificationRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateNotificationRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateNotificationRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateNotificationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateNotificationRequestCAS_FieldPathValue), nil
}

func MustParseUpdateNotificationRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateNotificationRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateNotificationRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateNotificationRequestCAS_FieldTerminalPathValue struct {
	UpdateNotificationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationRequestCAS_FieldPathValue = (*UpdateNotificationRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*notification.Notification, bool) {
	res, ok := fpv.value.(*notification.Notification)
	return res, ok
}
func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateNotificationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateNotificationRequest_CAS)
	}
	switch fpv.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*notification.Notification)
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateNotificationRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateNotificationRequest_CAS'.
func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateNotificationRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateNotificationRequest_CAS))
}

type UpdateNotificationRequestCAS_FieldSubPathValue struct {
	UpdateNotificationRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateNotificationRequestCAS_FieldPathValue = (*UpdateNotificationRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateNotificationRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (notification.Notification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification.Notification_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateNotificationRequestCAS_FieldSubPathValue) SetTo(target **UpdateNotificationRequest_CAS) {
	if *target == nil {
		*target = new(UpdateNotificationRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(notification.Notification_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateNotificationRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateNotificationRequestCAS_FieldSubPathValue) CompareWith(source *UpdateNotificationRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(notification.Notification_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateNotificationRequest_CAS))
}

// UpdateNotificationRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateNotificationRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateNotificationRequestCAS_FieldPath
	ContainsValue(*UpdateNotificationRequest_CAS) bool
}

// ParseUpdateNotificationRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateNotificationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateNotificationRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateNotificationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateNotificationRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateNotificationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateNotificationRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateNotificationRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateNotificationRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateNotificationRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationRequestCAS_FieldPathArrayItemValue = (*UpdateNotificationRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateNotificationRequest_CAS as interface{}
func (fpaiv *UpdateNotificationRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateNotificationRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateNotificationRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateNotificationRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateNotificationRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateNotificationRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateNotificationRequest_CAS) bool {
	slice := fpaiv.UpdateNotificationRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateNotificationRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateNotificationRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateNotificationRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateNotificationRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (notification.Notification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateNotificationRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateNotificationRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateNotificationRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateNotificationRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateNotificationRequestCAS_FieldPath
}

func ParseUpdateNotificationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateNotificationRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateNotificationRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateNotificationRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateNotificationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateNotificationRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateNotificationRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateNotificationRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateNotificationRequestCAS_FieldPathArrayOfValues = (*UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateNotificationRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*notification.Notification) {
			values = append(values, v)
		}
	case UpdateNotificationRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*notification.Notification, bool) {
	res, ok := fpaov.values.([]*notification.Notification)
	return res, ok
}
func (fpaov *UpdateNotificationRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}

type UpdateNotificationRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateNotificationRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateNotificationRequestCAS_FieldPathArrayOfValues = (*UpdateNotificationRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateNotificationRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateNotificationRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (notification.Notification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification.Notification_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteNotificationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteNotificationRequest_FieldPathSelector
	Get(source *DeleteNotificationRequest) []interface{}
	GetSingle(source *DeleteNotificationRequest) (interface{}, bool)
	ClearValue(item *DeleteNotificationRequest)

	// Those methods build corresponding DeleteNotificationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteNotificationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteNotificationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteNotificationRequest_FieldPathArrayItemValue
}

type DeleteNotificationRequest_FieldPathSelector int32

const (
	DeleteNotificationRequest_FieldPathSelectorName DeleteNotificationRequest_FieldPathSelector = 0
)

func (s DeleteNotificationRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteNotificationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", s))
	}
}

func BuildDeleteNotificationRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteNotificationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteNotificationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteNotificationRequest_FieldTerminalPath{selector: DeleteNotificationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteNotificationRequest", fp)
}

func ParseDeleteNotificationRequest_FieldPath(rawField string) (DeleteNotificationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteNotificationRequest_FieldPath(fp)
}

func MustParseDeleteNotificationRequest_FieldPath(rawField string) DeleteNotificationRequest_FieldPath {
	fp, err := ParseDeleteNotificationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteNotificationRequest_FieldTerminalPath struct {
	selector DeleteNotificationRequest_FieldPathSelector
}

var _ DeleteNotificationRequest_FieldPath = (*DeleteNotificationRequest_FieldTerminalPath)(nil)

func (fp *DeleteNotificationRequest_FieldTerminalPath) Selector() DeleteNotificationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteNotificationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteNotificationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteNotificationRequest
func (fp *DeleteNotificationRequest_FieldTerminalPath) Get(source *DeleteNotificationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteNotificationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteNotificationRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteNotificationRequest
func (fp *DeleteNotificationRequest_FieldTerminalPath) GetSingle(source *DeleteNotificationRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteNotificationRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteNotificationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		return (*notification.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) ClearValue(item *DeleteNotificationRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteNotificationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteNotificationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteNotificationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteNotificationRequest_FieldPathSelectorName
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteNotificationRequest_FieldPathValue {
	switch fp.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		return &DeleteNotificationRequest_FieldTerminalPathValue{DeleteNotificationRequest_FieldTerminalPath: *fp, value: value.(*notification.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteNotificationRequest_FieldPathArrayOfValues {
	fpaov := &DeleteNotificationRequest_FieldTerminalPathArrayOfValues{DeleteNotificationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		return &DeleteNotificationRequest_FieldTerminalPathArrayOfValues{DeleteNotificationRequest_FieldTerminalPath: *fp, values: values.([]*notification.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteNotificationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteNotificationRequest_FieldPathValue allows storing values for DeleteNotificationRequest fields according to their type
type DeleteNotificationRequest_FieldPathValue interface {
	DeleteNotificationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteNotificationRequest)
	CompareWith(*DeleteNotificationRequest) (cmp int, comparable bool)
}

func ParseDeleteNotificationRequest_FieldPathValue(pathStr, valueStr string) (DeleteNotificationRequest_FieldPathValue, error) {
	fp, err := ParseDeleteNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteNotificationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteNotificationRequest_FieldPathValue), nil
}

func MustParseDeleteNotificationRequest_FieldPathValue(pathStr, valueStr string) DeleteNotificationRequest_FieldPathValue {
	fpv, err := ParseDeleteNotificationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteNotificationRequest_FieldTerminalPathValue struct {
	DeleteNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteNotificationRequest_FieldPathValue = (*DeleteNotificationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteNotificationRequest' as interface{}
func (fpv *DeleteNotificationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteNotificationRequest_FieldTerminalPathValue) AsNameValue() (*notification.Reference, bool) {
	res, ok := fpv.value.(*notification.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteNotificationRequest
func (fpv *DeleteNotificationRequest_FieldTerminalPathValue) SetTo(target **DeleteNotificationRequest) {
	if *target == nil {
		*target = new(DeleteNotificationRequest)
	}
	switch fpv.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*notification.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteNotificationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteNotificationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteNotificationRequest_FieldTerminalPathValue' with the value under path in 'DeleteNotificationRequest'.
func (fpv *DeleteNotificationRequest_FieldTerminalPathValue) CompareWith(source *DeleteNotificationRequest) (int, bool) {
	switch fpv.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*notification.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteNotificationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteNotificationRequest))
}

// DeleteNotificationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteNotificationRequest according to their type
// Present only for array (repeated) types.
type DeleteNotificationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteNotificationRequest_FieldPath
	ContainsValue(*DeleteNotificationRequest) bool
}

// ParseDeleteNotificationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteNotificationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteNotificationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteNotificationRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteNotificationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteNotificationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteNotificationRequest_FieldTerminalPathArrayItemValue struct {
	DeleteNotificationRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteNotificationRequest_FieldPathArrayItemValue = (*DeleteNotificationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteNotificationRequest as interface{}
func (fpaiv *DeleteNotificationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteNotificationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteNotificationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteNotificationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteNotificationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteNotificationRequest'
func (fpaiv *DeleteNotificationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteNotificationRequest) bool {
	slice := fpaiv.DeleteNotificationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteNotificationRequest_FieldPathArrayOfValues allows storing slice of values for DeleteNotificationRequest fields according to their type
type DeleteNotificationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteNotificationRequest_FieldPath
}

func ParseDeleteNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteNotificationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteNotificationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteNotificationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteNotificationRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteNotificationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteNotificationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteNotificationRequest_FieldTerminalPathArrayOfValues struct {
	DeleteNotificationRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteNotificationRequest_FieldPathArrayOfValues = (*DeleteNotificationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteNotificationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteNotificationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*notification.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteNotificationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*notification.Reference, bool) {
	res, ok := fpaov.values.([]*notification.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchNotificationsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchNotificationsRequest_FieldPathSelector
	Get(source *SearchNotificationsRequest) []interface{}
	GetSingle(source *SearchNotificationsRequest) (interface{}, bool)
	ClearValue(item *SearchNotificationsRequest)

	// Those methods build corresponding SearchNotificationsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchNotificationsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchNotificationsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchNotificationsRequest_FieldPathArrayItemValue
}

type SearchNotificationsRequest_FieldPathSelector int32

const (
	SearchNotificationsRequest_FieldPathSelectorParent    SearchNotificationsRequest_FieldPathSelector = 0
	SearchNotificationsRequest_FieldPathSelectorPageSize  SearchNotificationsRequest_FieldPathSelector = 1
	SearchNotificationsRequest_FieldPathSelectorPageToken SearchNotificationsRequest_FieldPathSelector = 2
	SearchNotificationsRequest_FieldPathSelectorOrderBy   SearchNotificationsRequest_FieldPathSelector = 3
	SearchNotificationsRequest_FieldPathSelectorFilter    SearchNotificationsRequest_FieldPathSelector = 4
	SearchNotificationsRequest_FieldPathSelectorFieldMask SearchNotificationsRequest_FieldPathSelector = 5
	SearchNotificationsRequest_FieldPathSelectorView      SearchNotificationsRequest_FieldPathSelector = 6
	SearchNotificationsRequest_FieldPathSelectorPhrase    SearchNotificationsRequest_FieldPathSelector = 7
)

func (s SearchNotificationsRequest_FieldPathSelector) String() string {
	switch s {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		return "parent"
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		return "filter"
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case SearchNotificationsRequest_FieldPathSelectorView:
		return "view"
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		return "phrase"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", s))
	}
}

func BuildSearchNotificationsRequest_FieldPath(fp gotenobject.RawFieldPath) (SearchNotificationsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchNotificationsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorView}, nil
		case "phrase":
			return &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorPhrase}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchNotificationsRequest", fp)
}

func ParseSearchNotificationsRequest_FieldPath(rawField string) (SearchNotificationsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchNotificationsRequest_FieldPath(fp)
}

func MustParseSearchNotificationsRequest_FieldPath(rawField string) SearchNotificationsRequest_FieldPath {
	fp, err := ParseSearchNotificationsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchNotificationsRequest_FieldTerminalPath struct {
	selector SearchNotificationsRequest_FieldPathSelector
}

var _ SearchNotificationsRequest_FieldPath = (*SearchNotificationsRequest_FieldTerminalPath)(nil)

func (fp *SearchNotificationsRequest_FieldTerminalPath) Selector() SearchNotificationsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchNotificationsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchNotificationsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchNotificationsRequest
func (fp *SearchNotificationsRequest_FieldTerminalPath) Get(source *SearchNotificationsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchNotificationsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SearchNotificationsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case SearchNotificationsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case SearchNotificationsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case SearchNotificationsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case SearchNotificationsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case SearchNotificationsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case SearchNotificationsRequest_FieldPathSelectorPhrase:
			values = append(values, source.Phrase)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchNotificationsRequest))
}

// GetSingle returns value pointed by specific field of from source SearchNotificationsRequest
func (fp *SearchNotificationsRequest_FieldTerminalPath) GetSingle(source *SearchNotificationsRequest) (interface{}, bool) {
	switch fp.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case SearchNotificationsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		return source.GetPhrase(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchNotificationsRequest))
}

// GetDefault returns a default value of the field type
func (fp *SearchNotificationsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		return (*notification.ParentName)(nil)
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		return (*notification.PagerCursor)(nil)
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		return (*notification.OrderBy)(nil)
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		return (*notification.Filter)(nil)
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		return (*notification.Notification_FieldMask)(nil)
	case SearchNotificationsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) ClearValue(item *SearchNotificationsRequest) {
	if item != nil {
		switch fp.selector {
		case SearchNotificationsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SearchNotificationsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case SearchNotificationsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case SearchNotificationsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case SearchNotificationsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case SearchNotificationsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case SearchNotificationsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case SearchNotificationsRequest_FieldPathSelectorPhrase:
			item.Phrase = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
		}
	}
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchNotificationsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchNotificationsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchNotificationsRequest_FieldPathSelectorParent ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorPageSize ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorPageToken ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorOrderBy ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorFilter ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorFieldMask ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorView ||
		fp.selector == SearchNotificationsRequest_FieldPathSelectorPhrase
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) WithIValue(value interface{}) SearchNotificationsRequest_FieldPathValue {
	switch fp.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.ParentName)}
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.OrderBy)}
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Filter)}
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(*notification.Notification_FieldMask)}
	case SearchNotificationsRequest_FieldPathSelectorView:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		return &SearchNotificationsRequest_FieldTerminalPathValue{SearchNotificationsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchNotificationsRequest_FieldPathArrayOfValues {
	fpaov := &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.ParentName)}
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.OrderBy)}
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Filter)}
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]*notification.Notification_FieldMask)}
	case SearchNotificationsRequest_FieldPathSelectorView:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		return &SearchNotificationsRequest_FieldTerminalPathArrayOfValues{SearchNotificationsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchNotificationsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fp.selector))
	}
}

func (fp *SearchNotificationsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchNotificationsRequest_FieldPathValue allows storing values for SearchNotificationsRequest fields according to their type
type SearchNotificationsRequest_FieldPathValue interface {
	SearchNotificationsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchNotificationsRequest)
	CompareWith(*SearchNotificationsRequest) (cmp int, comparable bool)
}

func ParseSearchNotificationsRequest_FieldPathValue(pathStr, valueStr string) (SearchNotificationsRequest_FieldPathValue, error) {
	fp, err := ParseSearchNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchNotificationsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchNotificationsRequest_FieldPathValue), nil
}

func MustParseSearchNotificationsRequest_FieldPathValue(pathStr, valueStr string) SearchNotificationsRequest_FieldPathValue {
	fpv, err := ParseSearchNotificationsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchNotificationsRequest_FieldTerminalPathValue struct {
	SearchNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchNotificationsRequest_FieldPathValue = (*SearchNotificationsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchNotificationsRequest' as interface{}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsParentValue() (*notification.ParentName, bool) {
	res, ok := fpv.value.(*notification.ParentName)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsOrderByValue() (*notification.OrderBy, bool) {
	res, ok := fpv.value.(*notification.OrderBy)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsFilterValue() (*notification.Filter, bool) {
	res, ok := fpv.value.(*notification.Filter)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification.Notification_FieldMask, bool) {
	res, ok := fpv.value.(*notification.Notification_FieldMask)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) AsPhraseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object SearchNotificationsRequest
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) SetTo(target **SearchNotificationsRequest) {
	if *target == nil {
		*target = new(SearchNotificationsRequest)
	}
	switch fpv.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification.ParentName)
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*notification.PagerCursor)
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*notification.OrderBy)
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*notification.Filter)
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification.Notification_FieldMask)
	case SearchNotificationsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		(*target).Phrase = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchNotificationsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchNotificationsRequest_FieldTerminalPathValue' with the value under path in 'SearchNotificationsRequest'.
func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) CompareWith(source *SearchNotificationsRequest) (int, bool) {
	switch fpv.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		return 0, false
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		return 0, false
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case SearchNotificationsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		leftValue := fpv.value.(string)
		rightValue := source.GetPhrase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchNotificationsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchNotificationsRequest))
}

// SearchNotificationsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchNotificationsRequest according to their type
// Present only for array (repeated) types.
type SearchNotificationsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchNotificationsRequest_FieldPath
	ContainsValue(*SearchNotificationsRequest) bool
}

// ParseSearchNotificationsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SearchNotificationsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchNotificationsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchNotificationsRequest_FieldPathArrayItemValue), nil
}

func MustParseSearchNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr string) SearchNotificationsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchNotificationsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchNotificationsRequest_FieldTerminalPathArrayItemValue struct {
	SearchNotificationsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchNotificationsRequest_FieldPathArrayItemValue = (*SearchNotificationsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchNotificationsRequest as interface{}
func (fpaiv *SearchNotificationsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SearchNotificationsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchNotificationsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchNotificationsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchNotificationsRequest'
func (fpaiv *SearchNotificationsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchNotificationsRequest) bool {
	slice := fpaiv.SearchNotificationsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchNotificationsRequest_FieldPathArrayOfValues allows storing slice of values for SearchNotificationsRequest fields according to their type
type SearchNotificationsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchNotificationsRequest_FieldPath
}

func ParseSearchNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchNotificationsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchNotificationsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchNotificationsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchNotificationsRequest_FieldPathArrayOfValues), nil
}

func MustParseSearchNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SearchNotificationsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSearchNotificationsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchNotificationsRequest_FieldTerminalPathArrayOfValues struct {
	SearchNotificationsRequest_FieldTerminalPath
	values interface{}
}

var _ SearchNotificationsRequest_FieldPathArrayOfValues = (*SearchNotificationsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchNotificationsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification.ParentName) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*notification.OrderBy) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*notification.Filter) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification.Notification_FieldMask) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case SearchNotificationsRequest_FieldPathSelectorPhrase:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification.ParentName, bool) {
	res, ok := fpaov.values.([]*notification.ParentName)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*notification.OrderBy, bool) {
	res, ok := fpaov.values.([]*notification.OrderBy)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*notification.Filter, bool) {
	res, ok := fpaov.values.([]*notification.Filter)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification.Notification_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification.Notification_FieldMask)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *SearchNotificationsRequest_FieldTerminalPathArrayOfValues) AsPhraseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchNotificationsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchNotificationsResponse_FieldPathSelector
	Get(source *SearchNotificationsResponse) []interface{}
	GetSingle(source *SearchNotificationsResponse) (interface{}, bool)
	ClearValue(item *SearchNotificationsResponse)

	// Those methods build corresponding SearchNotificationsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchNotificationsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchNotificationsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchNotificationsResponse_FieldPathArrayItemValue
}

type SearchNotificationsResponse_FieldPathSelector int32

const (
	SearchNotificationsResponse_FieldPathSelectorNotifications     SearchNotificationsResponse_FieldPathSelector = 0
	SearchNotificationsResponse_FieldPathSelectorPrevPageToken     SearchNotificationsResponse_FieldPathSelector = 1
	SearchNotificationsResponse_FieldPathSelectorNextPageToken     SearchNotificationsResponse_FieldPathSelector = 2
	SearchNotificationsResponse_FieldPathSelectorCurrentOffset     SearchNotificationsResponse_FieldPathSelector = 3
	SearchNotificationsResponse_FieldPathSelectorTotalResultsCount SearchNotificationsResponse_FieldPathSelector = 4
)

func (s SearchNotificationsResponse_FieldPathSelector) String() string {
	switch s {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return "notifications"
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", s))
	}
}

func BuildSearchNotificationsResponse_FieldPath(fp gotenobject.RawFieldPath) (SearchNotificationsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchNotificationsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notifications":
			return &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorNotifications}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "notifications":
			if subpath, err := notification.BuildNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchNotificationsResponse_FieldSubPath{selector: SearchNotificationsResponse_FieldPathSelectorNotifications, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchNotificationsResponse", fp)
}

func ParseSearchNotificationsResponse_FieldPath(rawField string) (SearchNotificationsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchNotificationsResponse_FieldPath(fp)
}

func MustParseSearchNotificationsResponse_FieldPath(rawField string) SearchNotificationsResponse_FieldPath {
	fp, err := ParseSearchNotificationsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchNotificationsResponse_FieldTerminalPath struct {
	selector SearchNotificationsResponse_FieldPathSelector
}

var _ SearchNotificationsResponse_FieldPath = (*SearchNotificationsResponse_FieldTerminalPath)(nil)

func (fp *SearchNotificationsResponse_FieldTerminalPath) Selector() SearchNotificationsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchNotificationsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchNotificationsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchNotificationsResponse
func (fp *SearchNotificationsResponse_FieldTerminalPath) Get(source *SearchNotificationsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchNotificationsResponse_FieldPathSelectorNotifications:
			for _, value := range source.GetNotifications() {
				values = append(values, value)
			}
		case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchNotificationsResponse))
}

// GetSingle returns value pointed by specific field of from source SearchNotificationsResponse
func (fp *SearchNotificationsResponse_FieldTerminalPath) GetSingle(source *SearchNotificationsResponse) (interface{}, bool) {
	switch fp.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		res := source.GetNotifications()
		return res, res != nil
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fp *SearchNotificationsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return ([]*notification.Notification)(nil)
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		return (*notification.PagerCursor)(nil)
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		return (*notification.PagerCursor)(nil)
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) ClearValue(item *SearchNotificationsResponse) {
	if item != nil {
		switch fp.selector {
		case SearchNotificationsResponse_FieldPathSelectorNotifications:
			item.Notifications = nil
		case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
		}
	}
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchNotificationsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchNotificationsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == SearchNotificationsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == SearchNotificationsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == SearchNotificationsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) WithIValue(value interface{}) SearchNotificationsResponse_FieldPathValue {
	switch fp.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return &SearchNotificationsResponse_FieldTerminalPathValue{SearchNotificationsResponse_FieldTerminalPath: *fp, value: value.([]*notification.Notification)}
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		return &SearchNotificationsResponse_FieldTerminalPathValue{SearchNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		return &SearchNotificationsResponse_FieldTerminalPathValue{SearchNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.PagerCursor)}
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		return &SearchNotificationsResponse_FieldTerminalPathValue{SearchNotificationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchNotificationsResponse_FieldTerminalPathValue{SearchNotificationsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchNotificationsResponse_FieldPathArrayOfValues {
	fpaov := &SearchNotificationsResponse_FieldTerminalPathArrayOfValues{SearchNotificationsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return &SearchNotificationsResponse_FieldTerminalPathArrayOfValues{SearchNotificationsResponse_FieldTerminalPath: *fp, values: values.([][]*notification.Notification)}
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		return &SearchNotificationsResponse_FieldTerminalPathArrayOfValues{SearchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		return &SearchNotificationsResponse_FieldTerminalPathArrayOfValues{SearchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]*notification.PagerCursor)}
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		return &SearchNotificationsResponse_FieldTerminalPathArrayOfValues{SearchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchNotificationsResponse_FieldTerminalPathArrayOfValues{SearchNotificationsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchNotificationsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return &SearchNotificationsResponse_FieldTerminalPathArrayItemValue{SearchNotificationsResponse_FieldTerminalPath: *fp, value: value.(*notification.Notification)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fp.selector))
	}
}

func (fp *SearchNotificationsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchNotificationsResponse_FieldSubPath struct {
	selector SearchNotificationsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchNotificationsResponse_FieldPath = (*SearchNotificationsResponse_FieldSubPath)(nil)

func (fps *SearchNotificationsResponse_FieldSubPath) Selector() SearchNotificationsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *SearchNotificationsResponse_FieldSubPath) AsNotificationsSubPath() (notification.Notification_FieldPath, bool) {
	res, ok := fps.subPath.(notification.Notification_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchNotificationsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchNotificationsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchNotificationsResponse
func (fps *SearchNotificationsResponse_FieldSubPath) Get(source *SearchNotificationsResponse) (values []interface{}) {
	switch fps.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		for _, item := range source.GetNotifications() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fps.selector))
	}
	return
}

func (fps *SearchNotificationsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchNotificationsResponse))
}

// GetSingle returns value of selected field from source SearchNotificationsResponse
func (fps *SearchNotificationsResponse_FieldSubPath) GetSingle(source *SearchNotificationsResponse) (interface{}, bool) {
	switch fps.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		if len(source.GetNotifications()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotifications()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fps.selector))
	}
}

func (fps *SearchNotificationsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchNotificationsResponse))
}

// GetDefault returns a default value of the field type
func (fps *SearchNotificationsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchNotificationsResponse_FieldSubPath) ClearValue(item *SearchNotificationsResponse) {
	if item != nil {
		switch fps.selector {
		case SearchNotificationsResponse_FieldPathSelectorNotifications:
			for _, subItem := range item.Notifications {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fps.selector))
		}
	}
}

func (fps *SearchNotificationsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchNotificationsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchNotificationsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchNotificationsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SearchNotificationsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SearchNotificationsResponse_FieldSubPath) WithIValue(value interface{}) SearchNotificationsResponse_FieldPathValue {
	return &SearchNotificationsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchNotificationsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchNotificationsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) SearchNotificationsResponse_FieldPathArrayOfValues {
	return &SearchNotificationsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchNotificationsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchNotificationsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) SearchNotificationsResponse_FieldPathArrayItemValue {
	return &SearchNotificationsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchNotificationsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchNotificationsResponse_FieldPathValue allows storing values for SearchNotificationsResponse fields according to their type
type SearchNotificationsResponse_FieldPathValue interface {
	SearchNotificationsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchNotificationsResponse)
	CompareWith(*SearchNotificationsResponse) (cmp int, comparable bool)
}

func ParseSearchNotificationsResponse_FieldPathValue(pathStr, valueStr string) (SearchNotificationsResponse_FieldPathValue, error) {
	fp, err := ParseSearchNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchNotificationsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchNotificationsResponse_FieldPathValue), nil
}

func MustParseSearchNotificationsResponse_FieldPathValue(pathStr, valueStr string) SearchNotificationsResponse_FieldPathValue {
	fpv, err := ParseSearchNotificationsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchNotificationsResponse_FieldTerminalPathValue struct {
	SearchNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchNotificationsResponse_FieldPathValue = (*SearchNotificationsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchNotificationsResponse' as interface{}
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) AsNotificationsValue() ([]*notification.Notification, bool) {
	res, ok := fpv.value.([]*notification.Notification)
	return res, ok
}
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*notification.PagerCursor, bool) {
	res, ok := fpv.value.(*notification.PagerCursor)
	return res, ok
}
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SearchNotificationsResponse
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) SetTo(target **SearchNotificationsResponse) {
	if *target == nil {
		*target = new(SearchNotificationsResponse)
	}
	switch fpv.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		(*target).Notifications = fpv.value.([]*notification.Notification)
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*notification.PagerCursor)
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*notification.PagerCursor)
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchNotificationsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchNotificationsResponse_FieldTerminalPathValue' with the value under path in 'SearchNotificationsResponse'.
func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) CompareWith(source *SearchNotificationsResponse) (int, bool) {
	switch fpv.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return 0, false
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchNotificationsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchNotificationsResponse))
}

type SearchNotificationsResponse_FieldSubPathValue struct {
	SearchNotificationsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchNotificationsResponse_FieldPathValue = (*SearchNotificationsResponse_FieldSubPathValue)(nil)

func (fpvs *SearchNotificationsResponse_FieldSubPathValue) AsNotificationsPathValue() (notification.Notification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification.Notification_FieldPathValue)
	return res, ok
}

func (fpvs *SearchNotificationsResponse_FieldSubPathValue) SetTo(target **SearchNotificationsResponse) {
	if *target == nil {
		*target = new(SearchNotificationsResponse)
	}
	switch fpvs.Selector() {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchNotificationsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchNotificationsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchNotificationsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchNotificationsResponse_FieldSubPathValue) CompareWith(source *SearchNotificationsResponse) (int, bool) {
	switch fpvs.Selector() {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchNotificationsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchNotificationsResponse))
}

// SearchNotificationsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchNotificationsResponse according to their type
// Present only for array (repeated) types.
type SearchNotificationsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchNotificationsResponse_FieldPath
	ContainsValue(*SearchNotificationsResponse) bool
}

// ParseSearchNotificationsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SearchNotificationsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchNotificationsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchNotificationsResponse_FieldPathArrayItemValue), nil
}

func MustParseSearchNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr string) SearchNotificationsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchNotificationsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchNotificationsResponse_FieldTerminalPathArrayItemValue struct {
	SearchNotificationsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchNotificationsResponse_FieldPathArrayItemValue = (*SearchNotificationsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchNotificationsResponse as interface{}
func (fpaiv *SearchNotificationsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SearchNotificationsResponse_FieldTerminalPathArrayItemValue) AsNotificationsItemValue() (*notification.Notification, bool) {
	res, ok := fpaiv.value.(*notification.Notification)
	return res, ok
}

func (fpaiv *SearchNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SearchNotificationsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchNotificationsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchNotificationsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchNotificationsResponse'
func (fpaiv *SearchNotificationsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchNotificationsResponse) bool {
	slice := fpaiv.SearchNotificationsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchNotificationsResponse_FieldSubPathArrayItemValue struct {
	SearchNotificationsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchNotificationsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchNotificationsResponse_FieldSubPathArrayItemValue) AsNotificationsPathItemValue() (notification.Notification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification.Notification_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchNotificationsResponse'
func (fpaivs *SearchNotificationsResponse_FieldSubPathArrayItemValue) ContainsValue(source *SearchNotificationsResponse) bool {
	switch fpaivs.Selector() {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchNotificationsResponse: %d", fpaivs.Selector()))
	}
}

// SearchNotificationsResponse_FieldPathArrayOfValues allows storing slice of values for SearchNotificationsResponse fields according to their type
type SearchNotificationsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchNotificationsResponse_FieldPath
}

func ParseSearchNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchNotificationsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchNotificationsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchNotificationsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchNotificationsResponse_FieldPathArrayOfValues), nil
}

func MustParseSearchNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SearchNotificationsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSearchNotificationsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchNotificationsResponse_FieldTerminalPathArrayOfValues struct {
	SearchNotificationsResponse_FieldTerminalPath
	values interface{}
}

var _ SearchNotificationsResponse_FieldPathArrayOfValues = (*SearchNotificationsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchNotificationsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchNotificationsResponse_FieldPathSelectorNotifications:
		for _, v := range fpaov.values.([][]*notification.Notification) {
			values = append(values, v)
		}
	case SearchNotificationsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case SearchNotificationsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*notification.PagerCursor) {
			values = append(values, v)
		}
	case SearchNotificationsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchNotificationsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchNotificationsResponse_FieldTerminalPathArrayOfValues) AsNotificationsArrayOfValues() ([][]*notification.Notification, bool) {
	res, ok := fpaov.values.([][]*notification.Notification)
	return res, ok
}
func (fpaov *SearchNotificationsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *SearchNotificationsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*notification.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification.PagerCursor)
	return res, ok
}
func (fpaov *SearchNotificationsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchNotificationsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type SearchNotificationsResponse_FieldSubPathArrayOfValues struct {
	SearchNotificationsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchNotificationsResponse_FieldPathArrayOfValues = (*SearchNotificationsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchNotificationsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchNotificationsResponse_FieldSubPathArrayOfValues) AsNotificationsPathArrayOfValues() (notification.Notification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification.Notification_FieldPathArrayOfValues)
	return res, ok
}
