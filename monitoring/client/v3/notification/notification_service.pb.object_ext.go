// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_service.proto
// DO NOT EDIT!!!

package notification_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	notification "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &notification.Notification{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetNotificationRequest) GotenObjectExt() {}

func (o *GetNotificationRequest) MakeFullFieldMask() *GetNotificationRequest_FieldMask {
	return FullGetNotificationRequest_FieldMask()
}

func (o *GetNotificationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetNotificationRequest_FieldMask()
}

func (o *GetNotificationRequest) MakeDiffFieldMask(other *GetNotificationRequest) *GetNotificationRequest_FieldMask {
	if o == nil && other == nil {
		return &GetNotificationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetNotificationRequest_FieldMask()
	}

	res := &GetNotificationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetNotificationRequest_FieldTerminalPath{selector: GetNotificationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetNotificationRequest_FieldTerminalPath{selector: GetNotificationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetNotificationRequest_FieldTerminalPath{selector: GetNotificationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetNotificationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetNotificationRequest))
}

func (o *GetNotificationRequest) Clone() *GetNotificationRequest {
	if o == nil {
		return nil
	}
	result := &GetNotificationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	result.View = o.View
	return result
}

func (o *GetNotificationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetNotificationRequest) Merge(source *GetNotificationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetNotificationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetNotificationRequest))
}

func (o *BatchGetNotificationsRequest) GotenObjectExt() {}

func (o *BatchGetNotificationsRequest) MakeFullFieldMask() *BatchGetNotificationsRequest_FieldMask {
	return FullBatchGetNotificationsRequest_FieldMask()
}

func (o *BatchGetNotificationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetNotificationsRequest_FieldMask()
}

func (o *BatchGetNotificationsRequest) MakeDiffFieldMask(other *BatchGetNotificationsRequest) *BatchGetNotificationsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetNotificationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetNotificationsRequest_FieldMask()
	}

	res := &BatchGetNotificationsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetNotificationsRequest_FieldTerminalPath{selector: BatchGetNotificationsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetNotificationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetNotificationsRequest))
}

func (o *BatchGetNotificationsRequest) Clone() *BatchGetNotificationsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetNotificationsRequest{}
	result.Names = make([]*notification.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &notification.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetNotificationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetNotificationsRequest) Merge(source *BatchGetNotificationsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &notification.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetNotificationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetNotificationsRequest))
}

func (o *BatchGetNotificationsResponse) GotenObjectExt() {}

func (o *BatchGetNotificationsResponse) MakeFullFieldMask() *BatchGetNotificationsResponse_FieldMask {
	return FullBatchGetNotificationsResponse_FieldMask()
}

func (o *BatchGetNotificationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetNotificationsResponse_FieldMask()
}

func (o *BatchGetNotificationsResponse) MakeDiffFieldMask(other *BatchGetNotificationsResponse) *BatchGetNotificationsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetNotificationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetNotificationsResponse_FieldMask()
	}

	res := &BatchGetNotificationsResponse_FieldMask{}

	if len(o.GetNotifications()) == len(other.GetNotifications()) {
		for i, lValue := range o.GetNotifications() {
			rValue := other.GetNotifications()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetNotificationsResponse_FieldTerminalPath{selector: BatchGetNotificationsResponse_FieldPathSelectorNotifications})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetNotificationsResponse_FieldTerminalPath{selector: BatchGetNotificationsResponse_FieldPathSelectorNotifications})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetNotificationsResponse_FieldTerminalPath{selector: BatchGetNotificationsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetNotificationsResponse_FieldTerminalPath{selector: BatchGetNotificationsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetNotificationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetNotificationsResponse))
}

func (o *BatchGetNotificationsResponse) Clone() *BatchGetNotificationsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetNotificationsResponse{}
	result.Notifications = make([]*notification.Notification, len(o.Notifications))
	for i, sourceValue := range o.Notifications {
		result.Notifications[i] = sourceValue.Clone()
	}
	result.Missing = make([]*notification.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &notification.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetNotificationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetNotificationsResponse) Merge(source *BatchGetNotificationsResponse) {
	for _, sourceValue := range source.GetNotifications() {
		exists := false
		for _, currentValue := range o.Notifications {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification.Notification
			if sourceValue != nil {
				newDstElement = new(notification.Notification)
				newDstElement.Merge(sourceValue)
			}
			o.Notifications = append(o.Notifications, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &notification.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetNotificationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetNotificationsResponse))
}

func (o *ListNotificationsRequest) GotenObjectExt() {}

func (o *ListNotificationsRequest) MakeFullFieldMask() *ListNotificationsRequest_FieldMask {
	return FullListNotificationsRequest_FieldMask()
}

func (o *ListNotificationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListNotificationsRequest_FieldMask()
}

func (o *ListNotificationsRequest) MakeDiffFieldMask(other *ListNotificationsRequest) *ListNotificationsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListNotificationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListNotificationsRequest_FieldMask()
	}

	res := &ListNotificationsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListNotificationsRequest_FieldTerminalPath{selector: ListNotificationsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListNotificationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListNotificationsRequest))
}

func (o *ListNotificationsRequest) Clone() *ListNotificationsRequest {
	if o == nil {
		return nil
	}
	result := &ListNotificationsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &notification.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &notification.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &notification.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListNotificationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListNotificationsRequest) Merge(source *ListNotificationsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &notification.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &notification.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &notification.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListNotificationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListNotificationsRequest))
}

func (o *ListNotificationsResponse) GotenObjectExt() {}

func (o *ListNotificationsResponse) MakeFullFieldMask() *ListNotificationsResponse_FieldMask {
	return FullListNotificationsResponse_FieldMask()
}

func (o *ListNotificationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListNotificationsResponse_FieldMask()
}

func (o *ListNotificationsResponse) MakeDiffFieldMask(other *ListNotificationsResponse) *ListNotificationsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListNotificationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListNotificationsResponse_FieldMask()
	}

	res := &ListNotificationsResponse_FieldMask{}

	if len(o.GetNotifications()) == len(other.GetNotifications()) {
		for i, lValue := range o.GetNotifications() {
			rValue := other.GetNotifications()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorNotifications})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorNotifications})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListNotificationsResponse_FieldTerminalPath{selector: ListNotificationsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListNotificationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListNotificationsResponse))
}

func (o *ListNotificationsResponse) Clone() *ListNotificationsResponse {
	if o == nil {
		return nil
	}
	result := &ListNotificationsResponse{}
	result.Notifications = make([]*notification.Notification, len(o.Notifications))
	for i, sourceValue := range o.Notifications {
		result.Notifications[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &notification.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &notification.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListNotificationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListNotificationsResponse) Merge(source *ListNotificationsResponse) {
	for _, sourceValue := range source.GetNotifications() {
		exists := false
		for _, currentValue := range o.Notifications {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification.Notification
			if sourceValue != nil {
				newDstElement = new(notification.Notification)
				newDstElement.Merge(sourceValue)
			}
			o.Notifications = append(o.Notifications, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &notification.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &notification.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListNotificationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListNotificationsResponse))
}

func (o *WatchNotificationRequest) GotenObjectExt() {}

func (o *WatchNotificationRequest) MakeFullFieldMask() *WatchNotificationRequest_FieldMask {
	return FullWatchNotificationRequest_FieldMask()
}

func (o *WatchNotificationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationRequest_FieldMask()
}

func (o *WatchNotificationRequest) MakeDiffFieldMask(other *WatchNotificationRequest) *WatchNotificationRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationRequest_FieldMask()
	}

	res := &WatchNotificationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchNotificationRequest_FieldTerminalPath{selector: WatchNotificationRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchNotificationRequest_FieldTerminalPath{selector: WatchNotificationRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchNotificationRequest_FieldTerminalPath{selector: WatchNotificationRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchNotificationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationRequest))
}

func (o *WatchNotificationRequest) Clone() *WatchNotificationRequest {
	if o == nil {
		return nil
	}
	result := &WatchNotificationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchNotificationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationRequest) Merge(source *WatchNotificationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchNotificationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationRequest))
}

func (o *WatchNotificationResponse) GotenObjectExt() {}

func (o *WatchNotificationResponse) MakeFullFieldMask() *WatchNotificationResponse_FieldMask {
	return FullWatchNotificationResponse_FieldMask()
}

func (o *WatchNotificationResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationResponse_FieldMask()
}

func (o *WatchNotificationResponse) MakeDiffFieldMask(other *WatchNotificationResponse) *WatchNotificationResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationResponse_FieldMask()
	}

	res := &WatchNotificationResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchNotificationResponse_FieldTerminalPath{selector: WatchNotificationResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchNotificationResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationResponse))
}

func (o *WatchNotificationResponse) Clone() *WatchNotificationResponse {
	if o == nil {
		return nil
	}
	result := &WatchNotificationResponse{}
	result.Change = proto.Clone(o.Change).(*notification.NotificationChange)
	return result
}

func (o *WatchNotificationResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationResponse) Merge(source *WatchNotificationResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(notification.NotificationChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchNotificationResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationResponse))
}

func (o *WatchNotificationsRequest) GotenObjectExt() {}

func (o *WatchNotificationsRequest) MakeFullFieldMask() *WatchNotificationsRequest_FieldMask {
	return FullWatchNotificationsRequest_FieldMask()
}

func (o *WatchNotificationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationsRequest_FieldMask()
}

func (o *WatchNotificationsRequest) MakeDiffFieldMask(other *WatchNotificationsRequest) *WatchNotificationsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationsRequest_FieldMask()
	}

	res := &WatchNotificationsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchNotificationsRequest_FieldTerminalPath{selector: WatchNotificationsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchNotificationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationsRequest))
}

func (o *WatchNotificationsRequest) Clone() *WatchNotificationsRequest {
	if o == nil {
		return nil
	}
	result := &WatchNotificationsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &notification.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &notification.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &notification.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchNotificationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationsRequest) Merge(source *WatchNotificationsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &notification.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &notification.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &notification.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchNotificationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationsRequest))
}

func (o *WatchNotificationsResponse) GotenObjectExt() {}

func (o *WatchNotificationsResponse) MakeFullFieldMask() *WatchNotificationsResponse_FieldMask {
	return FullWatchNotificationsResponse_FieldMask()
}

func (o *WatchNotificationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationsResponse_FieldMask()
}

func (o *WatchNotificationsResponse) MakeDiffFieldMask(other *WatchNotificationsResponse) *WatchNotificationsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationsResponse_FieldMask()
	}

	res := &WatchNotificationsResponse_FieldMask{}

	if len(o.GetNotificationChanges()) == len(other.GetNotificationChanges()) {
		for i, lValue := range o.GetNotificationChanges() {
			rValue := other.GetNotificationChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorNotificationChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorNotificationChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldSubPath{selector: WatchNotificationsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchNotificationsResponse_FieldTerminalPath{selector: WatchNotificationsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchNotificationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationsResponse))
}

func (o *WatchNotificationsResponse) Clone() *WatchNotificationsResponse {
	if o == nil {
		return nil
	}
	result := &WatchNotificationsResponse{}
	result.NotificationChanges = make([]*notification.NotificationChange, len(o.NotificationChanges))
	for i, sourceValue := range o.NotificationChanges {
		result.NotificationChanges[i] = proto.Clone(sourceValue).(*notification.NotificationChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchNotificationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationsResponse) Merge(source *WatchNotificationsResponse) {
	for _, sourceValue := range source.GetNotificationChanges() {
		exists := false
		for _, currentValue := range o.NotificationChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification.NotificationChange
			if sourceValue != nil {
				newDstElement = new(notification.NotificationChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.NotificationChanges = append(o.NotificationChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchNotificationsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchNotificationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationsResponse))
}

func (o *WatchNotificationsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchNotificationsResponse_PageTokenChange) MakeFullFieldMask() *WatchNotificationsResponse_PageTokenChange_FieldMask {
	return FullWatchNotificationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchNotificationsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationsResponse_PageTokenChange_FieldMask()
}

func (o *WatchNotificationsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchNotificationsResponse_PageTokenChange) *WatchNotificationsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchNotificationsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchNotificationsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchNotificationsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchNotificationsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationsResponse_PageTokenChange))
}

func (o *WatchNotificationsResponse_PageTokenChange) Clone() *WatchNotificationsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchNotificationsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &notification.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &notification.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchNotificationsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationsResponse_PageTokenChange) Merge(source *WatchNotificationsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &notification.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &notification.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchNotificationsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationsResponse_PageTokenChange))
}

func (o *CreateNotificationRequest) GotenObjectExt() {}

func (o *CreateNotificationRequest) MakeFullFieldMask() *CreateNotificationRequest_FieldMask {
	return FullCreateNotificationRequest_FieldMask()
}

func (o *CreateNotificationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateNotificationRequest_FieldMask()
}

func (o *CreateNotificationRequest) MakeDiffFieldMask(other *CreateNotificationRequest) *CreateNotificationRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateNotificationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateNotificationRequest_FieldMask()
	}

	res := &CreateNotificationRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateNotificationRequest_FieldTerminalPath{selector: CreateNotificationRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetNotification().MakeDiffFieldMask(other.GetNotification())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateNotificationRequest_FieldTerminalPath{selector: CreateNotificationRequest_FieldPathSelectorNotification})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateNotificationRequest_FieldSubPath{selector: CreateNotificationRequest_FieldPathSelectorNotification, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateNotificationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateNotificationRequest))
}

func (o *CreateNotificationRequest) Clone() *CreateNotificationRequest {
	if o == nil {
		return nil
	}
	result := &CreateNotificationRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Notification = o.Notification.Clone()
	return result
}

func (o *CreateNotificationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateNotificationRequest) Merge(source *CreateNotificationRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetNotification() != nil {
		if o.Notification == nil {
			o.Notification = new(notification.Notification)
		}
		o.Notification.Merge(source.GetNotification())
	}
}

func (o *CreateNotificationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateNotificationRequest))
}

func (o *UpdateNotificationRequest) GotenObjectExt() {}

func (o *UpdateNotificationRequest) MakeFullFieldMask() *UpdateNotificationRequest_FieldMask {
	return FullUpdateNotificationRequest_FieldMask()
}

func (o *UpdateNotificationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateNotificationRequest_FieldMask()
}

func (o *UpdateNotificationRequest) MakeDiffFieldMask(other *UpdateNotificationRequest) *UpdateNotificationRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateNotificationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateNotificationRequest_FieldMask()
	}

	res := &UpdateNotificationRequest_FieldMask{}
	{
		subMask := o.GetNotification().MakeDiffFieldMask(other.GetNotification())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateNotificationRequest_FieldTerminalPath{selector: UpdateNotificationRequest_FieldPathSelectorNotification})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateNotificationRequest_FieldSubPath{selector: UpdateNotificationRequest_FieldPathSelectorNotification, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateNotificationRequest_FieldTerminalPath{selector: UpdateNotificationRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateNotificationRequest_FieldTerminalPath{selector: UpdateNotificationRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateNotificationRequest_FieldSubPath{selector: UpdateNotificationRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateNotificationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateNotificationRequest))
}

func (o *UpdateNotificationRequest) Clone() *UpdateNotificationRequest {
	if o == nil {
		return nil
	}
	result := &UpdateNotificationRequest{}
	result.Notification = o.Notification.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*notification.Notification_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateNotificationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateNotificationRequest) Merge(source *UpdateNotificationRequest) {
	if source.GetNotification() != nil {
		if o.Notification == nil {
			o.Notification = new(notification.Notification)
		}
		o.Notification.Merge(source.GetNotification())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateNotificationRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateNotificationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateNotificationRequest))
}

func (o *UpdateNotificationRequest_CAS) GotenObjectExt() {}

func (o *UpdateNotificationRequest_CAS) MakeFullFieldMask() *UpdateNotificationRequest_CAS_FieldMask {
	return FullUpdateNotificationRequest_CAS_FieldMask()
}

func (o *UpdateNotificationRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateNotificationRequest_CAS_FieldMask()
}

func (o *UpdateNotificationRequest_CAS) MakeDiffFieldMask(other *UpdateNotificationRequest_CAS) *UpdateNotificationRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateNotificationRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateNotificationRequest_CAS_FieldMask()
	}

	res := &UpdateNotificationRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateNotificationRequestCAS_FieldTerminalPath{selector: UpdateNotificationRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateNotificationRequestCAS_FieldSubPath{selector: UpdateNotificationRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateNotificationRequestCAS_FieldTerminalPath{selector: UpdateNotificationRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateNotificationRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateNotificationRequest_CAS))
}

func (o *UpdateNotificationRequest_CAS) Clone() *UpdateNotificationRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateNotificationRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	return result
}

func (o *UpdateNotificationRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateNotificationRequest_CAS) Merge(source *UpdateNotificationRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(notification.Notification)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateNotificationRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateNotificationRequest_CAS))
}

func (o *DeleteNotificationRequest) GotenObjectExt() {}

func (o *DeleteNotificationRequest) MakeFullFieldMask() *DeleteNotificationRequest_FieldMask {
	return FullDeleteNotificationRequest_FieldMask()
}

func (o *DeleteNotificationRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteNotificationRequest_FieldMask()
}

func (o *DeleteNotificationRequest) MakeDiffFieldMask(other *DeleteNotificationRequest) *DeleteNotificationRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteNotificationRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteNotificationRequest_FieldMask()
	}

	res := &DeleteNotificationRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteNotificationRequest_FieldTerminalPath{selector: DeleteNotificationRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteNotificationRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteNotificationRequest))
}

func (o *DeleteNotificationRequest) Clone() *DeleteNotificationRequest {
	if o == nil {
		return nil
	}
	result := &DeleteNotificationRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteNotificationRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteNotificationRequest) Merge(source *DeleteNotificationRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteNotificationRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteNotificationRequest))
}

func (o *SearchNotificationsRequest) GotenObjectExt() {}

func (o *SearchNotificationsRequest) MakeFullFieldMask() *SearchNotificationsRequest_FieldMask {
	return FullSearchNotificationsRequest_FieldMask()
}

func (o *SearchNotificationsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchNotificationsRequest_FieldMask()
}

func (o *SearchNotificationsRequest) MakeDiffFieldMask(other *SearchNotificationsRequest) *SearchNotificationsRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchNotificationsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchNotificationsRequest_FieldMask()
	}

	res := &SearchNotificationsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchNotificationsRequest_FieldTerminalPath{selector: SearchNotificationsRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchNotificationsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchNotificationsRequest))
}

func (o *SearchNotificationsRequest) Clone() *SearchNotificationsRequest {
	if o == nil {
		return nil
	}
	result := &SearchNotificationsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &notification.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &notification.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &notification.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification.Notification_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchNotificationsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchNotificationsRequest) Merge(source *SearchNotificationsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &notification.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &notification.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &notification.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification.Notification_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchNotificationsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchNotificationsRequest))
}

func (o *SearchNotificationsResponse) GotenObjectExt() {}

func (o *SearchNotificationsResponse) MakeFullFieldMask() *SearchNotificationsResponse_FieldMask {
	return FullSearchNotificationsResponse_FieldMask()
}

func (o *SearchNotificationsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchNotificationsResponse_FieldMask()
}

func (o *SearchNotificationsResponse) MakeDiffFieldMask(other *SearchNotificationsResponse) *SearchNotificationsResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchNotificationsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchNotificationsResponse_FieldMask()
	}

	res := &SearchNotificationsResponse_FieldMask{}

	if len(o.GetNotifications()) == len(other.GetNotifications()) {
		for i, lValue := range o.GetNotifications() {
			rValue := other.GetNotifications()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorNotifications})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorNotifications})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchNotificationsResponse_FieldTerminalPath{selector: SearchNotificationsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchNotificationsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchNotificationsResponse))
}

func (o *SearchNotificationsResponse) Clone() *SearchNotificationsResponse {
	if o == nil {
		return nil
	}
	result := &SearchNotificationsResponse{}
	result.Notifications = make([]*notification.Notification, len(o.Notifications))
	for i, sourceValue := range o.Notifications {
		result.Notifications[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &notification.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &notification.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchNotificationsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchNotificationsResponse) Merge(source *SearchNotificationsResponse) {
	for _, sourceValue := range source.GetNotifications() {
		exists := false
		for _, currentValue := range o.Notifications {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification.Notification
			if sourceValue != nil {
				newDstElement = new(notification.Notification)
				newDstElement.Merge(sourceValue)
			}
			o.Notifications = append(o.Notifications, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &notification.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &notification.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchNotificationsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchNotificationsResponse))
}
