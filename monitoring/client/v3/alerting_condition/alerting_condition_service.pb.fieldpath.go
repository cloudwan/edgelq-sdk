// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/alerting_condition_service.proto
// DO NOT EDIT!!!

package alerting_condition_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAlertingConditionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAlertingConditionRequest_FieldPathSelector
	Get(source *GetAlertingConditionRequest) []interface{}
	GetSingle(source *GetAlertingConditionRequest) (interface{}, bool)
	ClearValue(item *GetAlertingConditionRequest)

	// Those methods build corresponding GetAlertingConditionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAlertingConditionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAlertingConditionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAlertingConditionRequest_FieldPathArrayItemValue
}

type GetAlertingConditionRequest_FieldPathSelector int32

const (
	GetAlertingConditionRequest_FieldPathSelectorName      GetAlertingConditionRequest_FieldPathSelector = 0
	GetAlertingConditionRequest_FieldPathSelectorFieldMask GetAlertingConditionRequest_FieldPathSelector = 1
	GetAlertingConditionRequest_FieldPathSelectorView      GetAlertingConditionRequest_FieldPathSelector = 2
)

func (s GetAlertingConditionRequest_FieldPathSelector) String() string {
	switch s {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		return "name"
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAlertingConditionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", s))
	}
}

func BuildGetAlertingConditionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAlertingConditionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAlertingConditionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAlertingConditionRequest_FieldTerminalPath{selector: GetAlertingConditionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAlertingConditionRequest_FieldTerminalPath{selector: GetAlertingConditionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAlertingConditionRequest_FieldTerminalPath{selector: GetAlertingConditionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAlertingConditionRequest", fp)
}

func ParseGetAlertingConditionRequest_FieldPath(rawField string) (GetAlertingConditionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAlertingConditionRequest_FieldPath(fp)
}

func MustParseGetAlertingConditionRequest_FieldPath(rawField string) GetAlertingConditionRequest_FieldPath {
	fp, err := ParseGetAlertingConditionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAlertingConditionRequest_FieldTerminalPath struct {
	selector GetAlertingConditionRequest_FieldPathSelector
}

var _ GetAlertingConditionRequest_FieldPath = (*GetAlertingConditionRequest_FieldTerminalPath)(nil)

func (fp *GetAlertingConditionRequest_FieldTerminalPath) Selector() GetAlertingConditionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAlertingConditionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAlertingConditionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAlertingConditionRequest
func (fp *GetAlertingConditionRequest_FieldTerminalPath) Get(source *GetAlertingConditionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAlertingConditionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAlertingConditionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAlertingConditionRequest))
}

// GetSingle returns value pointed by specific field of from source GetAlertingConditionRequest
func (fp *GetAlertingConditionRequest_FieldTerminalPath) GetSingle(source *GetAlertingConditionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAlertingConditionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAlertingConditionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		return (*alerting_condition.Reference)(nil)
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	case GetAlertingConditionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) ClearValue(item *GetAlertingConditionRequest) {
	if item != nil {
		switch fp.selector {
		case GetAlertingConditionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAlertingConditionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAlertingConditionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAlertingConditionRequest_FieldPathSelectorName ||
		fp.selector == GetAlertingConditionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAlertingConditionRequest_FieldPathSelectorView
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) WithIValue(value interface{}) GetAlertingConditionRequest_FieldPathValue {
	switch fp.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		return &GetAlertingConditionRequest_FieldTerminalPathValue{GetAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.Reference)}
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		return &GetAlertingConditionRequest_FieldTerminalPathValue{GetAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	case GetAlertingConditionRequest_FieldPathSelectorView:
		return &GetAlertingConditionRequest_FieldTerminalPathValue{GetAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov := &GetAlertingConditionRequest_FieldTerminalPathArrayOfValues{GetAlertingConditionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		return &GetAlertingConditionRequest_FieldTerminalPathArrayOfValues{GetAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.Reference)}
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		return &GetAlertingConditionRequest_FieldTerminalPathArrayOfValues{GetAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	case GetAlertingConditionRequest_FieldPathSelectorView:
		return &GetAlertingConditionRequest_FieldTerminalPathArrayOfValues{GetAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAlertingConditionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *GetAlertingConditionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAlertingConditionRequest_FieldPathValue allows storing values for GetAlertingConditionRequest fields according to their type
type GetAlertingConditionRequest_FieldPathValue interface {
	GetAlertingConditionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAlertingConditionRequest)
	CompareWith(*GetAlertingConditionRequest) (cmp int, comparable bool)
}

func ParseGetAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) (GetAlertingConditionRequest_FieldPathValue, error) {
	fp, err := ParseGetAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAlertingConditionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAlertingConditionRequest_FieldPathValue), nil
}

func MustParseGetAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) GetAlertingConditionRequest_FieldPathValue {
	fpv, err := ParseGetAlertingConditionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAlertingConditionRequest_FieldTerminalPathValue struct {
	GetAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ GetAlertingConditionRequest_FieldPathValue = (*GetAlertingConditionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAlertingConditionRequest' as interface{}
func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) AsNameValue() (*alerting_condition.Reference, bool) {
	res, ok := fpv.value.(*alerting_condition.Reference)
	return res, ok
}
func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAlertingConditionRequest
func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) SetTo(target **GetAlertingConditionRequest) {
	if *target == nil {
		*target = new(GetAlertingConditionRequest)
	}
	switch fpv.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*alerting_condition.Reference)
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	case GetAlertingConditionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAlertingConditionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAlertingConditionRequest_FieldTerminalPathValue' with the value under path in 'GetAlertingConditionRequest'.
func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) CompareWith(source *GetAlertingConditionRequest) (int, bool) {
	switch fpv.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*alerting_condition.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAlertingConditionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *GetAlertingConditionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAlertingConditionRequest))
}

// GetAlertingConditionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAlertingConditionRequest according to their type
// Present only for array (repeated) types.
type GetAlertingConditionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAlertingConditionRequest_FieldPath
	ContainsValue(*GetAlertingConditionRequest) bool
}

// ParseGetAlertingConditionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAlertingConditionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAlertingConditionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAlertingConditionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAlertingConditionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAlertingConditionRequest_FieldTerminalPathArrayItemValue struct {
	GetAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ GetAlertingConditionRequest_FieldPathArrayItemValue = (*GetAlertingConditionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAlertingConditionRequest as interface{}
func (fpaiv *GetAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAlertingConditionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAlertingConditionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAlertingConditionRequest'
func (fpaiv *GetAlertingConditionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAlertingConditionRequest) bool {
	slice := fpaiv.GetAlertingConditionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAlertingConditionRequest_FieldPathArrayOfValues allows storing slice of values for GetAlertingConditionRequest fields according to their type
type GetAlertingConditionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAlertingConditionRequest_FieldPath
}

func ParseGetAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAlertingConditionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAlertingConditionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAlertingConditionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAlertingConditionRequest_FieldTerminalPathArrayOfValues struct {
	GetAlertingConditionRequest_FieldTerminalPath
	values interface{}
}

var _ GetAlertingConditionRequest_FieldPathArrayOfValues = (*GetAlertingConditionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAlertingConditionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAlertingConditionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*alerting_condition.Reference) {
			values = append(values, v)
		}
	case GetAlertingConditionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	case GetAlertingConditionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*alerting_condition.Reference, bool) {
	res, ok := fpaov.values.([]*alerting_condition.Reference)
	return res, ok
}
func (fpaov *GetAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpaov *GetAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAlertingConditionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAlertingConditionsRequest_FieldPathSelector
	Get(source *BatchGetAlertingConditionsRequest) []interface{}
	GetSingle(source *BatchGetAlertingConditionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAlertingConditionsRequest)

	// Those methods build corresponding BatchGetAlertingConditionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAlertingConditionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAlertingConditionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAlertingConditionsRequest_FieldPathArrayItemValue
}

type BatchGetAlertingConditionsRequest_FieldPathSelector int32

const (
	BatchGetAlertingConditionsRequest_FieldPathSelectorNames     BatchGetAlertingConditionsRequest_FieldPathSelector = 0
	BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask BatchGetAlertingConditionsRequest_FieldPathSelector = 1
	BatchGetAlertingConditionsRequest_FieldPathSelectorView      BatchGetAlertingConditionsRequest_FieldPathSelector = 2
)

func (s BatchGetAlertingConditionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", s))
	}
}

func BuildBatchGetAlertingConditionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAlertingConditionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAlertingConditionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAlertingConditionsRequest", fp)
}

func ParseBatchGetAlertingConditionsRequest_FieldPath(rawField string) (BatchGetAlertingConditionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAlertingConditionsRequest_FieldPath(fp)
}

func MustParseBatchGetAlertingConditionsRequest_FieldPath(rawField string) BatchGetAlertingConditionsRequest_FieldPath {
	fp, err := ParseBatchGetAlertingConditionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAlertingConditionsRequest_FieldTerminalPath struct {
	selector BatchGetAlertingConditionsRequest_FieldPathSelector
}

var _ BatchGetAlertingConditionsRequest_FieldPath = (*BatchGetAlertingConditionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) Selector() BatchGetAlertingConditionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAlertingConditionsRequest
func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) Get(source *BatchGetAlertingConditionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAlertingConditionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAlertingConditionsRequest
func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) GetSingle(source *BatchGetAlertingConditionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAlertingConditionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		return ([]*alerting_condition.Reference)(nil)
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) ClearValue(item *BatchGetAlertingConditionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAlertingConditionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAlertingConditionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAlertingConditionsRequest_FieldPathSelectorView
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAlertingConditionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathValue{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.([]*alerting_condition.Reference)}
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathValue{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathValue{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAlertingConditionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([][]*alerting_condition.Reference)}
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAlertingConditionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		return &BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue{BatchGetAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAlertingConditionsRequest_FieldPathValue allows storing values for BatchGetAlertingConditionsRequest fields according to their type
type BatchGetAlertingConditionsRequest_FieldPathValue interface {
	BatchGetAlertingConditionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAlertingConditionsRequest)
	CompareWith(*BatchGetAlertingConditionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAlertingConditionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAlertingConditionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertingConditionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAlertingConditionsRequest_FieldPathValue), nil
}

func MustParseBatchGetAlertingConditionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAlertingConditionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAlertingConditionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAlertingConditionsRequest_FieldTerminalPathValue struct {
	BatchGetAlertingConditionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertingConditionsRequest_FieldPathValue = (*BatchGetAlertingConditionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAlertingConditionsRequest' as interface{}
func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*alerting_condition.Reference, bool) {
	res, ok := fpv.value.([]*alerting_condition.Reference)
	return res, ok
}
func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAlertingConditionsRequest
func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAlertingConditionsRequest) {
	if *target == nil {
		*target = new(BatchGetAlertingConditionsRequest)
	}
	switch fpv.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*alerting_condition.Reference)
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAlertingConditionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAlertingConditionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAlertingConditionsRequest'.
func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAlertingConditionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertingConditionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAlertingConditionsRequest))
}

// BatchGetAlertingConditionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAlertingConditionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAlertingConditionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAlertingConditionsRequest_FieldPath
	ContainsValue(*BatchGetAlertingConditionsRequest) bool
}

// ParseBatchGetAlertingConditionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAlertingConditionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertingConditionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAlertingConditionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAlertingConditionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAlertingConditionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertingConditionsRequest_FieldPathArrayItemValue = (*BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAlertingConditionsRequest as interface{}
func (fpaiv *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*alerting_condition.Reference, bool) {
	res, ok := fpaiv.value.(*alerting_condition.Reference)
	return res, ok
}

func (fpaiv *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAlertingConditionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAlertingConditionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAlertingConditionsRequest'
func (fpaiv *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAlertingConditionsRequest) bool {
	slice := fpaiv.BatchGetAlertingConditionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAlertingConditionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAlertingConditionsRequest fields according to their type
type BatchGetAlertingConditionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAlertingConditionsRequest_FieldPath
}

func ParseBatchGetAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAlertingConditionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertingConditionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAlertingConditionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAlertingConditionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAlertingConditionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAlertingConditionsRequest_FieldPathArrayOfValues = (*BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAlertingConditionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*alerting_condition.Reference) {
			values = append(values, v)
		}
	case BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAlertingConditionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*alerting_condition.Reference, bool) {
	res, ok := fpaov.values.([][]*alerting_condition.Reference)
	return res, ok
}
func (fpaov *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAlertingConditionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAlertingConditionsResponse_FieldPathSelector
	Get(source *BatchGetAlertingConditionsResponse) []interface{}
	GetSingle(source *BatchGetAlertingConditionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAlertingConditionsResponse)

	// Those methods build corresponding BatchGetAlertingConditionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAlertingConditionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAlertingConditionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAlertingConditionsResponse_FieldPathArrayItemValue
}

type BatchGetAlertingConditionsResponse_FieldPathSelector int32

const (
	BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions BatchGetAlertingConditionsResponse_FieldPathSelector = 0
	BatchGetAlertingConditionsResponse_FieldPathSelectorMissing            BatchGetAlertingConditionsResponse_FieldPathSelector = 1
)

func (s BatchGetAlertingConditionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return "alerting_conditions"
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", s))
	}
}

func BuildBatchGetAlertingConditionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAlertingConditionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAlertingConditionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerting_conditions", "alertingConditions", "alerting-conditions":
			return &BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions}, nil
		case "missing":
			return &BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "alerting_conditions", "alertingConditions", "alerting-conditions":
			if subpath, err := alerting_condition.BuildAlertingCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAlertingConditionsResponse_FieldSubPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAlertingConditionsResponse", fp)
}

func ParseBatchGetAlertingConditionsResponse_FieldPath(rawField string) (BatchGetAlertingConditionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAlertingConditionsResponse_FieldPath(fp)
}

func MustParseBatchGetAlertingConditionsResponse_FieldPath(rawField string) BatchGetAlertingConditionsResponse_FieldPath {
	fp, err := ParseBatchGetAlertingConditionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAlertingConditionsResponse_FieldTerminalPath struct {
	selector BatchGetAlertingConditionsResponse_FieldPathSelector
}

var _ BatchGetAlertingConditionsResponse_FieldPath = (*BatchGetAlertingConditionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) Selector() BatchGetAlertingConditionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAlertingConditionsResponse
func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) Get(source *BatchGetAlertingConditionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
			for _, value := range source.GetAlertingConditions() {
				values = append(values, value)
			}
		case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAlertingConditionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAlertingConditionsResponse
func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) GetSingle(source *BatchGetAlertingConditionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		res := source.GetAlertingConditions()
		return res, res != nil
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAlertingConditionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return ([]*alerting_condition.AlertingCondition)(nil)
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		return ([]*alerting_condition.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) ClearValue(item *BatchGetAlertingConditionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
			item.AlertingConditions = nil
		case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAlertingConditionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAlertingConditionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAlertingConditionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return &BatchGetAlertingConditionsResponse_FieldTerminalPathValue{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.([]*alerting_condition.AlertingCondition)}
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		return &BatchGetAlertingConditionsResponse_FieldTerminalPathValue{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.([]*alerting_condition.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAlertingConditionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return &BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([][]*alerting_condition.AlertingCondition)}
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		return &BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([][]*alerting_condition.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAlertingConditionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return &BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition)}
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		return &BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue{BatchGetAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertingConditionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAlertingConditionsResponse_FieldSubPath struct {
	selector BatchGetAlertingConditionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAlertingConditionsResponse_FieldPath = (*BatchGetAlertingConditionsResponse_FieldSubPath)(nil)

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) Selector() BatchGetAlertingConditionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) AsAlertingConditionsSubPath() (alerting_condition.AlertingCondition_FieldPath, bool) {
	res, ok := fps.subPath.(alerting_condition.AlertingCondition_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAlertingConditionsResponse
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) Get(source *BatchGetAlertingConditionsResponse) (values []interface{}) {
	if asAlertingConditionFieldPath, ok := fps.AsAlertingConditionsSubPath(); ok {
		for _, item := range source.GetAlertingConditions() {
			values = append(values, asAlertingConditionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAlertingConditionsResponse))
}

// GetSingle returns value of selected field from source BatchGetAlertingConditionsResponse
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) GetSingle(source *BatchGetAlertingConditionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		if len(source.GetAlertingConditions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlertingConditions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAlertingConditionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) ClearValue(item *BatchGetAlertingConditionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
			for _, subItem := range item.AlertingConditions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAlertingConditionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAlertingConditionsResponse_FieldPathValue {
	return &BatchGetAlertingConditionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAlertingConditionsResponse_FieldPathArrayOfValues {
	return &BatchGetAlertingConditionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAlertingConditionsResponse_FieldPathArrayItemValue {
	return &BatchGetAlertingConditionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAlertingConditionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAlertingConditionsResponse_FieldPathValue allows storing values for BatchGetAlertingConditionsResponse fields according to their type
type BatchGetAlertingConditionsResponse_FieldPathValue interface {
	BatchGetAlertingConditionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAlertingConditionsResponse)
	CompareWith(*BatchGetAlertingConditionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAlertingConditionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAlertingConditionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertingConditionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAlertingConditionsResponse_FieldPathValue), nil
}

func MustParseBatchGetAlertingConditionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAlertingConditionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAlertingConditionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAlertingConditionsResponse_FieldTerminalPathValue struct {
	BatchGetAlertingConditionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertingConditionsResponse_FieldPathValue = (*BatchGetAlertingConditionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAlertingConditionsResponse' as interface{}
func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) AsAlertingConditionsValue() ([]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpv.value.([]*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*alerting_condition.Reference, bool) {
	res, ok := fpv.value.([]*alerting_condition.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAlertingConditionsResponse
func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAlertingConditionsResponse) {
	if *target == nil {
		*target = new(BatchGetAlertingConditionsResponse)
	}
	switch fpv.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		(*target).AlertingConditions = fpv.value.([]*alerting_condition.AlertingCondition)
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*alerting_condition.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAlertingConditionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAlertingConditionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAlertingConditionsResponse'.
func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAlertingConditionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return 0, false
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertingConditionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAlertingConditionsResponse))
}

type BatchGetAlertingConditionsResponse_FieldSubPathValue struct {
	BatchGetAlertingConditionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAlertingConditionsResponse_FieldPathValue = (*BatchGetAlertingConditionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAlertingConditionsResponse_FieldSubPathValue) AsAlertingConditionsPathValue() (alerting_condition.AlertingCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAlertingConditionsResponse_FieldSubPathValue) SetTo(target **BatchGetAlertingConditionsResponse) {
	if *target == nil {
		*target = new(BatchGetAlertingConditionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAlertingConditionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAlertingConditionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAlertingConditionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAlertingConditionsResponse_FieldSubPathValue) CompareWith(source *BatchGetAlertingConditionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAlertingConditionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAlertingConditionsResponse))
}

// BatchGetAlertingConditionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAlertingConditionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAlertingConditionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAlertingConditionsResponse_FieldPath
	ContainsValue(*BatchGetAlertingConditionsResponse) bool
}

// ParseBatchGetAlertingConditionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAlertingConditionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertingConditionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAlertingConditionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAlertingConditionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAlertingConditionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertingConditionsResponse_FieldPathArrayItemValue = (*BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAlertingConditionsResponse as interface{}
func (fpaiv *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue) AsAlertingConditionsItemValue() (*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaiv.value.(*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpaiv *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*alerting_condition.Reference, bool) {
	res, ok := fpaiv.value.(*alerting_condition.Reference)
	return res, ok
}

func (fpaiv *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAlertingConditionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAlertingConditionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAlertingConditionsResponse'
func (fpaiv *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAlertingConditionsResponse) bool {
	slice := fpaiv.BatchGetAlertingConditionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAlertingConditionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAlertingConditionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAlertingConditionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAlertingConditionsResponse_FieldSubPathArrayItemValue) AsAlertingConditionsPathItemValue() (alerting_condition.AlertingCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAlertingConditionsResponse'
func (fpaivs *BatchGetAlertingConditionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAlertingConditionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertingConditionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAlertingConditionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAlertingConditionsResponse fields according to their type
type BatchGetAlertingConditionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAlertingConditionsResponse_FieldPath
}

func ParseBatchGetAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAlertingConditionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertingConditionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAlertingConditionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAlertingConditionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAlertingConditionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAlertingConditionsResponse_FieldPathArrayOfValues = (*BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		for _, v := range fpaov.values.([][]*alerting_condition.AlertingCondition) {
			values = append(values, v)
		}
	case BatchGetAlertingConditionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*alerting_condition.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsAlertingConditionsArrayOfValues() ([][]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaov.values.([][]*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpaov *BatchGetAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*alerting_condition.Reference, bool) {
	res, ok := fpaov.values.([][]*alerting_condition.Reference)
	return res, ok
}

type BatchGetAlertingConditionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAlertingConditionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAlertingConditionsResponse_FieldPathArrayOfValues = (*BatchGetAlertingConditionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAlertingConditionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAlertingConditionsResponse_FieldSubPathArrayOfValues) AsAlertingConditionsPathArrayOfValues() (alerting_condition.AlertingCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alerting_condition.AlertingCondition_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAlertingConditionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAlertingConditionsRequest_FieldPathSelector
	Get(source *ListAlertingConditionsRequest) []interface{}
	GetSingle(source *ListAlertingConditionsRequest) (interface{}, bool)
	ClearValue(item *ListAlertingConditionsRequest)

	// Those methods build corresponding ListAlertingConditionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAlertingConditionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAlertingConditionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAlertingConditionsRequest_FieldPathArrayItemValue
}

type ListAlertingConditionsRequest_FieldPathSelector int32

const (
	ListAlertingConditionsRequest_FieldPathSelectorParent    ListAlertingConditionsRequest_FieldPathSelector = 0
	ListAlertingConditionsRequest_FieldPathSelectorPageSize  ListAlertingConditionsRequest_FieldPathSelector = 1
	ListAlertingConditionsRequest_FieldPathSelectorPageToken ListAlertingConditionsRequest_FieldPathSelector = 2
	ListAlertingConditionsRequest_FieldPathSelectorOrderBy   ListAlertingConditionsRequest_FieldPathSelector = 3
	ListAlertingConditionsRequest_FieldPathSelectorFilter    ListAlertingConditionsRequest_FieldPathSelector = 4
	ListAlertingConditionsRequest_FieldPathSelectorFieldMask ListAlertingConditionsRequest_FieldPathSelector = 5
	ListAlertingConditionsRequest_FieldPathSelectorView      ListAlertingConditionsRequest_FieldPathSelector = 6
)

func (s ListAlertingConditionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		return "parent"
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", s))
	}
}

func BuildListAlertingConditionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAlertingConditionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAlertingConditionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAlertingConditionsRequest", fp)
}

func ParseListAlertingConditionsRequest_FieldPath(rawField string) (ListAlertingConditionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAlertingConditionsRequest_FieldPath(fp)
}

func MustParseListAlertingConditionsRequest_FieldPath(rawField string) ListAlertingConditionsRequest_FieldPath {
	fp, err := ParseListAlertingConditionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAlertingConditionsRequest_FieldTerminalPath struct {
	selector ListAlertingConditionsRequest_FieldPathSelector
}

var _ ListAlertingConditionsRequest_FieldPath = (*ListAlertingConditionsRequest_FieldTerminalPath)(nil)

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) Selector() ListAlertingConditionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAlertingConditionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAlertingConditionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAlertingConditionsRequest
func (fp *ListAlertingConditionsRequest_FieldTerminalPath) Get(source *ListAlertingConditionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAlertingConditionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAlertingConditionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAlertingConditionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAlertingConditionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAlertingConditionsRequest
func (fp *ListAlertingConditionsRequest_FieldTerminalPath) GetSingle(source *ListAlertingConditionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAlertingConditionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAlertingConditionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		return (*alerting_condition.ParentName)(nil)
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		return (*alerting_condition.PagerCursor)(nil)
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return (*alerting_condition.OrderBy)(nil)
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		return (*alerting_condition.Filter)(nil)
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) ClearValue(item *ListAlertingConditionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAlertingConditionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAlertingConditionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAlertingConditionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAlertingConditionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAlertingConditionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAlertingConditionsRequest_FieldPathSelectorParent ||
		fp.selector == ListAlertingConditionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAlertingConditionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAlertingConditionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAlertingConditionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAlertingConditionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAlertingConditionsRequest_FieldPathSelectorView
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAlertingConditionsRequest_FieldPathValue {
	switch fp.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.ParentName)}
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.PagerCursor)}
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.OrderBy)}
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.Filter)}
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		return &ListAlertingConditionsRequest_FieldTerminalPathValue{ListAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAlertingConditionsRequest_FieldPathArrayOfValues {
	fpaov := &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.ParentName)}
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.PagerCursor)}
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.OrderBy)}
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.Filter)}
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		return &ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues{ListAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAlertingConditionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAlertingConditionsRequest_FieldPathValue allows storing values for ListAlertingConditionsRequest fields according to their type
type ListAlertingConditionsRequest_FieldPathValue interface {
	ListAlertingConditionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAlertingConditionsRequest)
	CompareWith(*ListAlertingConditionsRequest) (cmp int, comparable bool)
}

func ParseListAlertingConditionsRequest_FieldPathValue(pathStr, valueStr string) (ListAlertingConditionsRequest_FieldPathValue, error) {
	fp, err := ParseListAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertingConditionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAlertingConditionsRequest_FieldPathValue), nil
}

func MustParseListAlertingConditionsRequest_FieldPathValue(pathStr, valueStr string) ListAlertingConditionsRequest_FieldPathValue {
	fpv, err := ParseListAlertingConditionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAlertingConditionsRequest_FieldTerminalPathValue struct {
	ListAlertingConditionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAlertingConditionsRequest_FieldPathValue = (*ListAlertingConditionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAlertingConditionsRequest' as interface{}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsParentValue() (*alerting_condition.ParentName, bool) {
	res, ok := fpv.value.(*alerting_condition.ParentName)
	return res, ok
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*alerting_condition.PagerCursor, bool) {
	res, ok := fpv.value.(*alerting_condition.PagerCursor)
	return res, ok
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsOrderByValue() (*alerting_condition.OrderBy, bool) {
	res, ok := fpv.value.(*alerting_condition.OrderBy)
	return res, ok
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsFilterValue() (*alerting_condition.Filter, bool) {
	res, ok := fpv.value.(*alerting_condition.Filter)
	return res, ok
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAlertingConditionsRequest
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) SetTo(target **ListAlertingConditionsRequest) {
	if *target == nil {
		*target = new(ListAlertingConditionsRequest)
	}
	switch fpv.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*alerting_condition.ParentName)
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*alerting_condition.PagerCursor)
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*alerting_condition.OrderBy)
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*alerting_condition.Filter)
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAlertingConditionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAlertingConditionsRequest_FieldTerminalPathValue' with the value under path in 'ListAlertingConditionsRequest'.
func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) CompareWith(source *ListAlertingConditionsRequest) (int, bool) {
	switch fpv.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*alerting_condition.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAlertingConditionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAlertingConditionsRequest))
}

// ListAlertingConditionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAlertingConditionsRequest according to their type
// Present only for array (repeated) types.
type ListAlertingConditionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAlertingConditionsRequest_FieldPath
	ContainsValue(*ListAlertingConditionsRequest) bool
}

// ParseListAlertingConditionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAlertingConditionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertingConditionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAlertingConditionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAlertingConditionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAlertingConditionsRequest_FieldTerminalPathArrayItemValue struct {
	ListAlertingConditionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAlertingConditionsRequest_FieldPathArrayItemValue = (*ListAlertingConditionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAlertingConditionsRequest as interface{}
func (fpaiv *ListAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAlertingConditionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAlertingConditionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAlertingConditionsRequest'
func (fpaiv *ListAlertingConditionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAlertingConditionsRequest) bool {
	slice := fpaiv.ListAlertingConditionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAlertingConditionsRequest_FieldPathArrayOfValues allows storing slice of values for ListAlertingConditionsRequest fields according to their type
type ListAlertingConditionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAlertingConditionsRequest_FieldPath
}

func ParseListAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAlertingConditionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertingConditionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAlertingConditionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAlertingConditionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues struct {
	ListAlertingConditionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAlertingConditionsRequest_FieldPathArrayOfValues = (*ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAlertingConditionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*alerting_condition.ParentName) {
			values = append(values, v)
		}
	case ListAlertingConditionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAlertingConditionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*alerting_condition.PagerCursor) {
			values = append(values, v)
		}
	case ListAlertingConditionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*alerting_condition.OrderBy) {
			values = append(values, v)
		}
	case ListAlertingConditionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*alerting_condition.Filter) {
			values = append(values, v)
		}
	case ListAlertingConditionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	case ListAlertingConditionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*alerting_condition.ParentName, bool) {
	res, ok := fpaov.values.([]*alerting_condition.ParentName)
	return res, ok
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*alerting_condition.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alerting_condition.PagerCursor)
	return res, ok
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*alerting_condition.OrderBy, bool) {
	res, ok := fpaov.values.([]*alerting_condition.OrderBy)
	return res, ok
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*alerting_condition.Filter, bool) {
	res, ok := fpaov.values.([]*alerting_condition.Filter)
	return res, ok
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpaov *ListAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAlertingConditionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAlertingConditionsResponse_FieldPathSelector
	Get(source *ListAlertingConditionsResponse) []interface{}
	GetSingle(source *ListAlertingConditionsResponse) (interface{}, bool)
	ClearValue(item *ListAlertingConditionsResponse)

	// Those methods build corresponding ListAlertingConditionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAlertingConditionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAlertingConditionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAlertingConditionsResponse_FieldPathArrayItemValue
}

type ListAlertingConditionsResponse_FieldPathSelector int32

const (
	ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions ListAlertingConditionsResponse_FieldPathSelector = 0
	ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken      ListAlertingConditionsResponse_FieldPathSelector = 1
	ListAlertingConditionsResponse_FieldPathSelectorNextPageToken      ListAlertingConditionsResponse_FieldPathSelector = 2
)

func (s ListAlertingConditionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return "alerting_conditions"
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", s))
	}
}

func BuildListAlertingConditionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAlertingConditionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAlertingConditionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerting_conditions", "alertingConditions", "alerting-conditions":
			return &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "alerting_conditions", "alertingConditions", "alerting-conditions":
			if subpath, err := alerting_condition.BuildAlertingCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAlertingConditionsResponse_FieldSubPath{selector: ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAlertingConditionsResponse", fp)
}

func ParseListAlertingConditionsResponse_FieldPath(rawField string) (ListAlertingConditionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAlertingConditionsResponse_FieldPath(fp)
}

func MustParseListAlertingConditionsResponse_FieldPath(rawField string) ListAlertingConditionsResponse_FieldPath {
	fp, err := ParseListAlertingConditionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAlertingConditionsResponse_FieldTerminalPath struct {
	selector ListAlertingConditionsResponse_FieldPathSelector
}

var _ ListAlertingConditionsResponse_FieldPath = (*ListAlertingConditionsResponse_FieldTerminalPath)(nil)

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) Selector() ListAlertingConditionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAlertingConditionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAlertingConditionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAlertingConditionsResponse
func (fp *ListAlertingConditionsResponse_FieldTerminalPath) Get(source *ListAlertingConditionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
			for _, value := range source.GetAlertingConditions() {
				values = append(values, value)
			}
		case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAlertingConditionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAlertingConditionsResponse
func (fp *ListAlertingConditionsResponse_FieldTerminalPath) GetSingle(source *ListAlertingConditionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		res := source.GetAlertingConditions()
		return res, res != nil
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAlertingConditionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAlertingConditionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return ([]*alerting_condition.AlertingCondition)(nil)
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		return (*alerting_condition.PagerCursor)(nil)
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		return (*alerting_condition.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) ClearValue(item *ListAlertingConditionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
			item.AlertingConditions = nil
		case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAlertingConditionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAlertingConditionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAlertingConditionsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAlertingConditionsResponse_FieldPathValue {
	switch fp.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return &ListAlertingConditionsResponse_FieldTerminalPathValue{ListAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.([]*alerting_condition.AlertingCondition)}
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		return &ListAlertingConditionsResponse_FieldTerminalPathValue{ListAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.PagerCursor)}
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		return &ListAlertingConditionsResponse_FieldTerminalPathValue{ListAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAlertingConditionsResponse_FieldPathArrayOfValues {
	fpaov := &ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues{ListAlertingConditionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return &ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues{ListAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([][]*alerting_condition.AlertingCondition)}
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		return &ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues{ListAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]*alerting_condition.PagerCursor)}
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		return &ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues{ListAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]*alerting_condition.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAlertingConditionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return &ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue{ListAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertingConditionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAlertingConditionsResponse_FieldSubPath struct {
	selector ListAlertingConditionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAlertingConditionsResponse_FieldPath = (*ListAlertingConditionsResponse_FieldSubPath)(nil)

func (fps *ListAlertingConditionsResponse_FieldSubPath) Selector() ListAlertingConditionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAlertingConditionsResponse_FieldSubPath) AsAlertingConditionsSubPath() (alerting_condition.AlertingCondition_FieldPath, bool) {
	res, ok := fps.subPath.(alerting_condition.AlertingCondition_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAlertingConditionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAlertingConditionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAlertingConditionsResponse
func (fps *ListAlertingConditionsResponse_FieldSubPath) Get(source *ListAlertingConditionsResponse) (values []interface{}) {
	if asAlertingConditionFieldPath, ok := fps.AsAlertingConditionsSubPath(); ok {
		for _, item := range source.GetAlertingConditions() {
			values = append(values, asAlertingConditionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAlertingConditionsResponse))
}

// GetSingle returns value of selected field from source ListAlertingConditionsResponse
func (fps *ListAlertingConditionsResponse_FieldSubPath) GetSingle(source *ListAlertingConditionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		if len(source.GetAlertingConditions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlertingConditions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fps.selector))
	}
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAlertingConditionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAlertingConditionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) ClearValue(item *ListAlertingConditionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
			for _, subItem := range item.AlertingConditions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAlertingConditionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAlertingConditionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListAlertingConditionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) WithIValue(value interface{}) ListAlertingConditionsResponse_FieldPathValue {
	return &ListAlertingConditionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAlertingConditionsResponse_FieldPathArrayOfValues {
	return &ListAlertingConditionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAlertingConditionsResponse_FieldPathArrayItemValue {
	return &ListAlertingConditionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAlertingConditionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAlertingConditionsResponse_FieldPathValue allows storing values for ListAlertingConditionsResponse fields according to their type
type ListAlertingConditionsResponse_FieldPathValue interface {
	ListAlertingConditionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAlertingConditionsResponse)
	CompareWith(*ListAlertingConditionsResponse) (cmp int, comparable bool)
}

func ParseListAlertingConditionsResponse_FieldPathValue(pathStr, valueStr string) (ListAlertingConditionsResponse_FieldPathValue, error) {
	fp, err := ParseListAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertingConditionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAlertingConditionsResponse_FieldPathValue), nil
}

func MustParseListAlertingConditionsResponse_FieldPathValue(pathStr, valueStr string) ListAlertingConditionsResponse_FieldPathValue {
	fpv, err := ParseListAlertingConditionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAlertingConditionsResponse_FieldTerminalPathValue struct {
	ListAlertingConditionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAlertingConditionsResponse_FieldPathValue = (*ListAlertingConditionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAlertingConditionsResponse' as interface{}
func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) AsAlertingConditionsValue() ([]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpv.value.([]*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*alerting_condition.PagerCursor, bool) {
	res, ok := fpv.value.(*alerting_condition.PagerCursor)
	return res, ok
}
func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*alerting_condition.PagerCursor, bool) {
	res, ok := fpv.value.(*alerting_condition.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAlertingConditionsResponse
func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) SetTo(target **ListAlertingConditionsResponse) {
	if *target == nil {
		*target = new(ListAlertingConditionsResponse)
	}
	switch fpv.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		(*target).AlertingConditions = fpv.value.([]*alerting_condition.AlertingCondition)
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*alerting_condition.PagerCursor)
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*alerting_condition.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAlertingConditionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAlertingConditionsResponse_FieldTerminalPathValue' with the value under path in 'ListAlertingConditionsResponse'.
func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) CompareWith(source *ListAlertingConditionsResponse) (int, bool) {
	switch fpv.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return 0, false
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAlertingConditionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAlertingConditionsResponse))
}

type ListAlertingConditionsResponse_FieldSubPathValue struct {
	ListAlertingConditionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAlertingConditionsResponse_FieldPathValue = (*ListAlertingConditionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAlertingConditionsResponse_FieldSubPathValue) AsAlertingConditionsPathValue() (alerting_condition.AlertingCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue)
	return res, ok
}

func (fpvs *ListAlertingConditionsResponse_FieldSubPathValue) SetTo(target **ListAlertingConditionsResponse) {
	if *target == nil {
		*target = new(ListAlertingConditionsResponse)
	}
	switch fpvs.Selector() {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAlertingConditionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAlertingConditionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAlertingConditionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAlertingConditionsResponse_FieldSubPathValue) CompareWith(source *ListAlertingConditionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAlertingConditionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAlertingConditionsResponse))
}

// ListAlertingConditionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAlertingConditionsResponse according to their type
// Present only for array (repeated) types.
type ListAlertingConditionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAlertingConditionsResponse_FieldPath
	ContainsValue(*ListAlertingConditionsResponse) bool
}

// ParseListAlertingConditionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAlertingConditionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertingConditionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAlertingConditionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAlertingConditionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue struct {
	ListAlertingConditionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAlertingConditionsResponse_FieldPathArrayItemValue = (*ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAlertingConditionsResponse as interface{}
func (fpaiv *ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue) AsAlertingConditionsItemValue() (*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaiv.value.(*alerting_condition.AlertingCondition)
	return res, ok
}

func (fpaiv *ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAlertingConditionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAlertingConditionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAlertingConditionsResponse'
func (fpaiv *ListAlertingConditionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAlertingConditionsResponse) bool {
	slice := fpaiv.ListAlertingConditionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAlertingConditionsResponse_FieldSubPathArrayItemValue struct {
	ListAlertingConditionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAlertingConditionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAlertingConditionsResponse_FieldSubPathArrayItemValue) AsAlertingConditionsPathItemValue() (alerting_condition.AlertingCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAlertingConditionsResponse'
func (fpaivs *ListAlertingConditionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAlertingConditionsResponse) bool {
	switch fpaivs.Selector() {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertingConditionsResponse: %d", fpaivs.Selector()))
	}
}

// ListAlertingConditionsResponse_FieldPathArrayOfValues allows storing slice of values for ListAlertingConditionsResponse fields according to their type
type ListAlertingConditionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAlertingConditionsResponse_FieldPath
}

func ParseListAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAlertingConditionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertingConditionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAlertingConditionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAlertingConditionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues struct {
	ListAlertingConditionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAlertingConditionsResponse_FieldPathArrayOfValues = (*ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions:
		for _, v := range fpaov.values.([][]*alerting_condition.AlertingCondition) {
			values = append(values, v)
		}
	case ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*alerting_condition.PagerCursor) {
			values = append(values, v)
		}
	case ListAlertingConditionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*alerting_condition.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsAlertingConditionsArrayOfValues() ([][]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaov.values.([][]*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpaov *ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*alerting_condition.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alerting_condition.PagerCursor)
	return res, ok
}
func (fpaov *ListAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*alerting_condition.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alerting_condition.PagerCursor)
	return res, ok
}

type ListAlertingConditionsResponse_FieldSubPathArrayOfValues struct {
	ListAlertingConditionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAlertingConditionsResponse_FieldPathArrayOfValues = (*ListAlertingConditionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAlertingConditionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAlertingConditionsResponse_FieldSubPathArrayOfValues) AsAlertingConditionsPathArrayOfValues() (alerting_condition.AlertingCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alerting_condition.AlertingCondition_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertingConditionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertingConditionRequest_FieldPathSelector
	Get(source *WatchAlertingConditionRequest) []interface{}
	GetSingle(source *WatchAlertingConditionRequest) (interface{}, bool)
	ClearValue(item *WatchAlertingConditionRequest)

	// Those methods build corresponding WatchAlertingConditionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertingConditionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertingConditionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertingConditionRequest_FieldPathArrayItemValue
}

type WatchAlertingConditionRequest_FieldPathSelector int32

const (
	WatchAlertingConditionRequest_FieldPathSelectorName      WatchAlertingConditionRequest_FieldPathSelector = 0
	WatchAlertingConditionRequest_FieldPathSelectorFieldMask WatchAlertingConditionRequest_FieldPathSelector = 1
	WatchAlertingConditionRequest_FieldPathSelectorView      WatchAlertingConditionRequest_FieldPathSelector = 2
)

func (s WatchAlertingConditionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		return "name"
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", s))
	}
}

func BuildWatchAlertingConditionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertingConditionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertingConditionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAlertingConditionRequest_FieldTerminalPath{selector: WatchAlertingConditionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAlertingConditionRequest_FieldTerminalPath{selector: WatchAlertingConditionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAlertingConditionRequest_FieldTerminalPath{selector: WatchAlertingConditionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertingConditionRequest", fp)
}

func ParseWatchAlertingConditionRequest_FieldPath(rawField string) (WatchAlertingConditionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertingConditionRequest_FieldPath(fp)
}

func MustParseWatchAlertingConditionRequest_FieldPath(rawField string) WatchAlertingConditionRequest_FieldPath {
	fp, err := ParseWatchAlertingConditionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertingConditionRequest_FieldTerminalPath struct {
	selector WatchAlertingConditionRequest_FieldPathSelector
}

var _ WatchAlertingConditionRequest_FieldPath = (*WatchAlertingConditionRequest_FieldTerminalPath)(nil)

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) Selector() WatchAlertingConditionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertingConditionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertingConditionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertingConditionRequest
func (fp *WatchAlertingConditionRequest_FieldTerminalPath) Get(source *WatchAlertingConditionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertingConditionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAlertingConditionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertingConditionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAlertingConditionRequest
func (fp *WatchAlertingConditionRequest_FieldTerminalPath) GetSingle(source *WatchAlertingConditionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertingConditionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		return (*alerting_condition.Reference)(nil)
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) ClearValue(item *WatchAlertingConditionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAlertingConditionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAlertingConditionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertingConditionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertingConditionRequest_FieldPathSelectorName ||
		fp.selector == WatchAlertingConditionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAlertingConditionRequest_FieldPathSelectorView
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAlertingConditionRequest_FieldPathValue {
	switch fp.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		return &WatchAlertingConditionRequest_FieldTerminalPathValue{WatchAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.Reference)}
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		return &WatchAlertingConditionRequest_FieldTerminalPathValue{WatchAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		return &WatchAlertingConditionRequest_FieldTerminalPathValue{WatchAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov := &WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		return &WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.Reference)}
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		return &WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		return &WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertingConditionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertingConditionRequest_FieldPathValue allows storing values for WatchAlertingConditionRequest fields according to their type
type WatchAlertingConditionRequest_FieldPathValue interface {
	WatchAlertingConditionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertingConditionRequest)
	CompareWith(*WatchAlertingConditionRequest) (cmp int, comparable bool)
}

func ParseWatchAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) (WatchAlertingConditionRequest_FieldPathValue, error) {
	fp, err := ParseWatchAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertingConditionRequest_FieldPathValue), nil
}

func MustParseWatchAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) WatchAlertingConditionRequest_FieldPathValue {
	fpv, err := ParseWatchAlertingConditionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertingConditionRequest_FieldTerminalPathValue struct {
	WatchAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionRequest_FieldPathValue = (*WatchAlertingConditionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertingConditionRequest' as interface{}
func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) AsNameValue() (*alerting_condition.Reference, bool) {
	res, ok := fpv.value.(*alerting_condition.Reference)
	return res, ok
}
func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertingConditionRequest
func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) SetTo(target **WatchAlertingConditionRequest) {
	if *target == nil {
		*target = new(WatchAlertingConditionRequest)
	}
	switch fpv.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*alerting_condition.Reference)
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertingConditionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertingConditionRequest_FieldTerminalPathValue' with the value under path in 'WatchAlertingConditionRequest'.
func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) CompareWith(source *WatchAlertingConditionRequest) (int, bool) {
	switch fpv.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*alerting_condition.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertingConditionRequest))
}

// WatchAlertingConditionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertingConditionRequest according to their type
// Present only for array (repeated) types.
type WatchAlertingConditionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertingConditionRequest_FieldPath
	ContainsValue(*WatchAlertingConditionRequest) bool
}

// ParseWatchAlertingConditionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertingConditionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertingConditionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertingConditionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertingConditionRequest_FieldTerminalPathArrayItemValue struct {
	WatchAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionRequest_FieldPathArrayItemValue = (*WatchAlertingConditionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertingConditionRequest as interface{}
func (fpaiv *WatchAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertingConditionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertingConditionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertingConditionRequest'
func (fpaiv *WatchAlertingConditionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertingConditionRequest) bool {
	slice := fpaiv.WatchAlertingConditionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertingConditionRequest_FieldPathArrayOfValues allows storing slice of values for WatchAlertingConditionRequest fields according to their type
type WatchAlertingConditionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertingConditionRequest_FieldPath
}

func ParseWatchAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertingConditionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertingConditionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues struct {
	WatchAlertingConditionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAlertingConditionRequest_FieldPathArrayOfValues = (*WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertingConditionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*alerting_condition.Reference) {
			values = append(values, v)
		}
	case WatchAlertingConditionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	case WatchAlertingConditionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*alerting_condition.Reference, bool) {
	res, ok := fpaov.values.([]*alerting_condition.Reference)
	return res, ok
}
func (fpaov *WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpaov *WatchAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertingConditionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertingConditionResponse_FieldPathSelector
	Get(source *WatchAlertingConditionResponse) []interface{}
	GetSingle(source *WatchAlertingConditionResponse) (interface{}, bool)
	ClearValue(item *WatchAlertingConditionResponse)

	// Those methods build corresponding WatchAlertingConditionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertingConditionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertingConditionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertingConditionResponse_FieldPathArrayItemValue
}

type WatchAlertingConditionResponse_FieldPathSelector int32

const (
	WatchAlertingConditionResponse_FieldPathSelectorChange WatchAlertingConditionResponse_FieldPathSelector = 0
)

func (s WatchAlertingConditionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", s))
	}
}

func BuildWatchAlertingConditionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertingConditionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertingConditionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAlertingConditionResponse_FieldTerminalPath{selector: WatchAlertingConditionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertingConditionResponse", fp)
}

func ParseWatchAlertingConditionResponse_FieldPath(rawField string) (WatchAlertingConditionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertingConditionResponse_FieldPath(fp)
}

func MustParseWatchAlertingConditionResponse_FieldPath(rawField string) WatchAlertingConditionResponse_FieldPath {
	fp, err := ParseWatchAlertingConditionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertingConditionResponse_FieldTerminalPath struct {
	selector WatchAlertingConditionResponse_FieldPathSelector
}

var _ WatchAlertingConditionResponse_FieldPath = (*WatchAlertingConditionResponse_FieldTerminalPath)(nil)

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) Selector() WatchAlertingConditionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertingConditionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertingConditionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertingConditionResponse
func (fp *WatchAlertingConditionResponse_FieldTerminalPath) Get(source *WatchAlertingConditionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertingConditionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertingConditionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAlertingConditionResponse
func (fp *WatchAlertingConditionResponse_FieldTerminalPath) GetSingle(source *WatchAlertingConditionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertingConditionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertingConditionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		return (*alerting_condition.AlertingConditionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) ClearValue(item *WatchAlertingConditionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAlertingConditionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertingConditionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertingConditionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertingConditionResponse_FieldPathSelectorChange
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAlertingConditionResponse_FieldPathValue {
	switch fp.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		return &WatchAlertingConditionResponse_FieldTerminalPathValue{WatchAlertingConditionResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingConditionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertingConditionResponse_FieldPathArrayOfValues {
	fpaov := &WatchAlertingConditionResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		return &WatchAlertingConditionResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionResponse_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingConditionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertingConditionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertingConditionResponse_FieldPathValue allows storing values for WatchAlertingConditionResponse fields according to their type
type WatchAlertingConditionResponse_FieldPathValue interface {
	WatchAlertingConditionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertingConditionResponse)
	CompareWith(*WatchAlertingConditionResponse) (cmp int, comparable bool)
}

func ParseWatchAlertingConditionResponse_FieldPathValue(pathStr, valueStr string) (WatchAlertingConditionResponse_FieldPathValue, error) {
	fp, err := ParseWatchAlertingConditionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertingConditionResponse_FieldPathValue), nil
}

func MustParseWatchAlertingConditionResponse_FieldPathValue(pathStr, valueStr string) WatchAlertingConditionResponse_FieldPathValue {
	fpv, err := ParseWatchAlertingConditionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertingConditionResponse_FieldTerminalPathValue struct {
	WatchAlertingConditionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionResponse_FieldPathValue = (*WatchAlertingConditionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertingConditionResponse' as interface{}
func (fpv *WatchAlertingConditionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertingConditionResponse_FieldTerminalPathValue) AsChangeValue() (*alerting_condition.AlertingConditionChange, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingConditionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertingConditionResponse
func (fpv *WatchAlertingConditionResponse_FieldTerminalPathValue) SetTo(target **WatchAlertingConditionResponse) {
	if *target == nil {
		*target = new(WatchAlertingConditionResponse)
	}
	switch fpv.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*alerting_condition.AlertingConditionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertingConditionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertingConditionResponse_FieldTerminalPathValue' with the value under path in 'WatchAlertingConditionResponse'.
func (fpv *WatchAlertingConditionResponse_FieldTerminalPathValue) CompareWith(source *WatchAlertingConditionResponse) (int, bool) {
	switch fpv.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertingConditionResponse))
}

// WatchAlertingConditionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertingConditionResponse according to their type
// Present only for array (repeated) types.
type WatchAlertingConditionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertingConditionResponse_FieldPath
	ContainsValue(*WatchAlertingConditionResponse) bool
}

// ParseWatchAlertingConditionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertingConditionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertingConditionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertingConditionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertingConditionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertingConditionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertingConditionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertingConditionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertingConditionResponse_FieldTerminalPathArrayItemValue struct {
	WatchAlertingConditionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionResponse_FieldPathArrayItemValue = (*WatchAlertingConditionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertingConditionResponse as interface{}
func (fpaiv *WatchAlertingConditionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertingConditionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertingConditionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertingConditionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertingConditionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertingConditionResponse'
func (fpaiv *WatchAlertingConditionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertingConditionResponse) bool {
	slice := fpaiv.WatchAlertingConditionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertingConditionResponse_FieldPathArrayOfValues allows storing slice of values for WatchAlertingConditionResponse fields according to their type
type WatchAlertingConditionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertingConditionResponse_FieldPath
}

func ParseWatchAlertingConditionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertingConditionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertingConditionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertingConditionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertingConditionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertingConditionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertingConditionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertingConditionResponse_FieldTerminalPathArrayOfValues struct {
	WatchAlertingConditionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAlertingConditionResponse_FieldPathArrayOfValues = (*WatchAlertingConditionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertingConditionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertingConditionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingConditionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertingConditionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*alerting_condition.AlertingConditionChange, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingConditionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertingConditionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertingConditionsRequest_FieldPathSelector
	Get(source *WatchAlertingConditionsRequest) []interface{}
	GetSingle(source *WatchAlertingConditionsRequest) (interface{}, bool)
	ClearValue(item *WatchAlertingConditionsRequest)

	// Those methods build corresponding WatchAlertingConditionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertingConditionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertingConditionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertingConditionsRequest_FieldPathArrayItemValue
}

type WatchAlertingConditionsRequest_FieldPathSelector int32

const (
	WatchAlertingConditionsRequest_FieldPathSelectorType         WatchAlertingConditionsRequest_FieldPathSelector = 0
	WatchAlertingConditionsRequest_FieldPathSelectorParent       WatchAlertingConditionsRequest_FieldPathSelector = 1
	WatchAlertingConditionsRequest_FieldPathSelectorPageSize     WatchAlertingConditionsRequest_FieldPathSelector = 2
	WatchAlertingConditionsRequest_FieldPathSelectorPageToken    WatchAlertingConditionsRequest_FieldPathSelector = 3
	WatchAlertingConditionsRequest_FieldPathSelectorOrderBy      WatchAlertingConditionsRequest_FieldPathSelector = 4
	WatchAlertingConditionsRequest_FieldPathSelectorResumeToken  WatchAlertingConditionsRequest_FieldPathSelector = 5
	WatchAlertingConditionsRequest_FieldPathSelectorFilter       WatchAlertingConditionsRequest_FieldPathSelector = 6
	WatchAlertingConditionsRequest_FieldPathSelectorFieldMask    WatchAlertingConditionsRequest_FieldPathSelector = 7
	WatchAlertingConditionsRequest_FieldPathSelectorView         WatchAlertingConditionsRequest_FieldPathSelector = 8
	WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize WatchAlertingConditionsRequest_FieldPathSelector = 9
)

func (s WatchAlertingConditionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		return "type"
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		return "view"
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", s))
	}
}

func BuildWatchAlertingConditionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertingConditionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertingConditionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertingConditionsRequest", fp)
}

func ParseWatchAlertingConditionsRequest_FieldPath(rawField string) (WatchAlertingConditionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertingConditionsRequest_FieldPath(fp)
}

func MustParseWatchAlertingConditionsRequest_FieldPath(rawField string) WatchAlertingConditionsRequest_FieldPath {
	fp, err := ParseWatchAlertingConditionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertingConditionsRequest_FieldTerminalPath struct {
	selector WatchAlertingConditionsRequest_FieldPathSelector
}

var _ WatchAlertingConditionsRequest_FieldPath = (*WatchAlertingConditionsRequest_FieldTerminalPath)(nil)

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) Selector() WatchAlertingConditionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertingConditionsRequest
func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) Get(source *WatchAlertingConditionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertingConditionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAlertingConditionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAlertingConditionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertingConditionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAlertingConditionsRequest
func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) GetSingle(source *WatchAlertingConditionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertingConditionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		return (*alerting_condition.ParentReference)(nil)
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		return (*alerting_condition.PagerCursor)(nil)
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return (*alerting_condition.OrderBy)(nil)
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		return (*alerting_condition.Filter)(nil)
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) ClearValue(item *WatchAlertingConditionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAlertingConditionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAlertingConditionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAlertingConditionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertingConditionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorType ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorParent ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorView ||
		fp.selector == WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAlertingConditionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.ParentReference)}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.PagerCursor)}
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.OrderBy)}
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.Filter)}
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAlertingConditionsRequest_FieldTerminalPathValue{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertingConditionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.ParentReference)}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.PagerCursor)}
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.OrderBy)}
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.Filter)}
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues{WatchAlertingConditionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertingConditionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertingConditionsRequest_FieldPathValue allows storing values for WatchAlertingConditionsRequest fields according to their type
type WatchAlertingConditionsRequest_FieldPathValue interface {
	WatchAlertingConditionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertingConditionsRequest)
	CompareWith(*WatchAlertingConditionsRequest) (cmp int, comparable bool)
}

func ParseWatchAlertingConditionsRequest_FieldPathValue(pathStr, valueStr string) (WatchAlertingConditionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertingConditionsRequest_FieldPathValue), nil
}

func MustParseWatchAlertingConditionsRequest_FieldPathValue(pathStr, valueStr string) WatchAlertingConditionsRequest_FieldPathValue {
	fpv, err := ParseWatchAlertingConditionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertingConditionsRequest_FieldTerminalPathValue struct {
	WatchAlertingConditionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionsRequest_FieldPathValue = (*WatchAlertingConditionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertingConditionsRequest' as interface{}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsParentValue() (*alerting_condition.ParentReference, bool) {
	res, ok := fpv.value.(*alerting_condition.ParentReference)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*alerting_condition.PagerCursor, bool) {
	res, ok := fpv.value.(*alerting_condition.PagerCursor)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsOrderByValue() (*alerting_condition.OrderBy, bool) {
	res, ok := fpv.value.(*alerting_condition.OrderBy)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsFilterValue() (*alerting_condition.Filter, bool) {
	res, ok := fpv.value.(*alerting_condition.Filter)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertingConditionsRequest
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) SetTo(target **WatchAlertingConditionsRequest) {
	if *target == nil {
		*target = new(WatchAlertingConditionsRequest)
	}
	switch fpv.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*alerting_condition.ParentReference)
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*alerting_condition.PagerCursor)
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*alerting_condition.OrderBy)
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*alerting_condition.Filter)
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertingConditionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertingConditionsRequest_FieldTerminalPathValue' with the value under path in 'WatchAlertingConditionsRequest'.
func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) CompareWith(source *WatchAlertingConditionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*alerting_condition.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertingConditionsRequest))
}

// WatchAlertingConditionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertingConditionsRequest according to their type
// Present only for array (repeated) types.
type WatchAlertingConditionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertingConditionsRequest_FieldPath
	ContainsValue(*WatchAlertingConditionsRequest) bool
}

// ParseWatchAlertingConditionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertingConditionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertingConditionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertingConditionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertingConditionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertingConditionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAlertingConditionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionsRequest_FieldPathArrayItemValue = (*WatchAlertingConditionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertingConditionsRequest as interface{}
func (fpaiv *WatchAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertingConditionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertingConditionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertingConditionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertingConditionsRequest'
func (fpaiv *WatchAlertingConditionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertingConditionsRequest) bool {
	slice := fpaiv.WatchAlertingConditionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertingConditionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAlertingConditionsRequest fields according to their type
type WatchAlertingConditionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertingConditionsRequest_FieldPath
}

func ParseWatchAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertingConditionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertingConditionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertingConditionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertingConditionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertingConditionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAlertingConditionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAlertingConditionsRequest_FieldPathArrayOfValues = (*WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertingConditionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*alerting_condition.ParentReference) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*alerting_condition.PagerCursor) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*alerting_condition.OrderBy) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*alerting_condition.Filter) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*alerting_condition.ParentReference, bool) {
	res, ok := fpaov.values.([]*alerting_condition.ParentReference)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*alerting_condition.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alerting_condition.PagerCursor)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*alerting_condition.OrderBy, bool) {
	res, ok := fpaov.values.([]*alerting_condition.OrderBy)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*alerting_condition.Filter, bool) {
	res, ok := fpaov.values.([]*alerting_condition.Filter)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAlertingConditionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertingConditionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertingConditionsResponse_FieldPathSelector
	Get(source *WatchAlertingConditionsResponse) []interface{}
	GetSingle(source *WatchAlertingConditionsResponse) (interface{}, bool)
	ClearValue(item *WatchAlertingConditionsResponse)

	// Those methods build corresponding WatchAlertingConditionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertingConditionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertingConditionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertingConditionsResponse_FieldPathArrayItemValue
}

type WatchAlertingConditionsResponse_FieldPathSelector int32

const (
	WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges WatchAlertingConditionsResponse_FieldPathSelector = 0
	WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent                WatchAlertingConditionsResponse_FieldPathSelector = 1
	WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange          WatchAlertingConditionsResponse_FieldPathSelector = 2
	WatchAlertingConditionsResponse_FieldPathSelectorResumeToken              WatchAlertingConditionsResponse_FieldPathSelector = 3
	WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize             WatchAlertingConditionsResponse_FieldPathSelector = 4
	WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset              WatchAlertingConditionsResponse_FieldPathSelector = 5
	WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset              WatchAlertingConditionsResponse_FieldPathSelector = 6
)

func (s WatchAlertingConditionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		return "alerting_condition_changes"
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", s))
	}
}

func BuildWatchAlertingConditionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertingConditionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertingConditionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerting_condition_changes", "alertingConditionChanges", "alerting-condition-changes":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAlertingConditionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAlertingConditionsResponse_FieldSubPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertingConditionsResponse", fp)
}

func ParseWatchAlertingConditionsResponse_FieldPath(rawField string) (WatchAlertingConditionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertingConditionsResponse_FieldPath(fp)
}

func MustParseWatchAlertingConditionsResponse_FieldPath(rawField string) WatchAlertingConditionsResponse_FieldPath {
	fp, err := ParseWatchAlertingConditionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertingConditionsResponse_FieldTerminalPath struct {
	selector WatchAlertingConditionsResponse_FieldPathSelector
}

var _ WatchAlertingConditionsResponse_FieldPath = (*WatchAlertingConditionsResponse_FieldTerminalPath)(nil)

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) Selector() WatchAlertingConditionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertingConditionsResponse
func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) Get(source *WatchAlertingConditionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
			for _, value := range source.GetAlertingConditionChanges() {
				values = append(values, value)
			}
		case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertingConditionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAlertingConditionsResponse
func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) GetSingle(source *WatchAlertingConditionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		res := source.GetAlertingConditionChanges()
		return res, res != nil
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertingConditionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		return ([]*alerting_condition.AlertingConditionChange)(nil)
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAlertingConditionsResponse_PageTokenChange)(nil)
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) ClearValue(item *WatchAlertingConditionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
			item.AlertingConditionChanges = nil
		case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertingConditionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges ||
		fp.selector == WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAlertingConditionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAlertingConditionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.([]*alerting_condition.AlertingConditionChange)}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*WatchAlertingConditionsResponse_PageTokenChange)}
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		return &WatchAlertingConditionsResponse_FieldTerminalPathValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertingConditionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([][]*alerting_condition.AlertingConditionChange)}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAlertingConditionsResponse_PageTokenChange)}
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertingConditionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		return &WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue{WatchAlertingConditionsResponse_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingConditionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAlertingConditionsResponse_FieldSubPath struct {
	selector WatchAlertingConditionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAlertingConditionsResponse_FieldPath = (*WatchAlertingConditionsResponse_FieldSubPath)(nil)

func (fps *WatchAlertingConditionsResponse_FieldSubPath) Selector() WatchAlertingConditionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAlertingConditionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAlertingConditionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAlertingConditionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAlertingConditionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAlertingConditionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAlertingConditionsResponse
func (fps *WatchAlertingConditionsResponse_FieldSubPath) Get(source *WatchAlertingConditionsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAlertingConditionsResponse))
}

// GetSingle returns value of selected field from source WatchAlertingConditionsResponse
func (fps *WatchAlertingConditionsResponse_FieldSubPath) GetSingle(source *WatchAlertingConditionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fps.selector))
	}
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAlertingConditionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAlertingConditionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) ClearValue(item *WatchAlertingConditionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAlertingConditionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAlertingConditionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchAlertingConditionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) WithIValue(value interface{}) WatchAlertingConditionsResponse_FieldPathValue {
	return &WatchAlertingConditionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAlertingConditionsResponse_FieldPathArrayOfValues {
	return &WatchAlertingConditionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAlertingConditionsResponse_FieldPathArrayItemValue {
	return &WatchAlertingConditionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAlertingConditionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAlertingConditionsResponse_FieldPathValue allows storing values for WatchAlertingConditionsResponse fields according to their type
type WatchAlertingConditionsResponse_FieldPathValue interface {
	WatchAlertingConditionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertingConditionsResponse)
	CompareWith(*WatchAlertingConditionsResponse) (cmp int, comparable bool)
}

func ParseWatchAlertingConditionsResponse_FieldPathValue(pathStr, valueStr string) (WatchAlertingConditionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertingConditionsResponse_FieldPathValue), nil
}

func MustParseWatchAlertingConditionsResponse_FieldPathValue(pathStr, valueStr string) WatchAlertingConditionsResponse_FieldPathValue {
	fpv, err := ParseWatchAlertingConditionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertingConditionsResponse_FieldTerminalPathValue struct {
	WatchAlertingConditionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionsResponse_FieldPathValue = (*WatchAlertingConditionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertingConditionsResponse' as interface{}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsAlertingConditionChangesValue() ([]*alerting_condition.AlertingConditionChange, bool) {
	res, ok := fpv.value.([]*alerting_condition.AlertingConditionChange)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAlertingConditionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAlertingConditionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertingConditionsResponse
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) SetTo(target **WatchAlertingConditionsResponse) {
	if *target == nil {
		*target = new(WatchAlertingConditionsResponse)
	}
	switch fpv.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		(*target).AlertingConditionChanges = fpv.value.([]*alerting_condition.AlertingConditionChange)
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAlertingConditionsResponse_PageTokenChange)
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertingConditionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertingConditionsResponse_FieldTerminalPathValue' with the value under path in 'WatchAlertingConditionsResponse'.
func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) CompareWith(source *WatchAlertingConditionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		return 0, false
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertingConditionsResponse))
}

type WatchAlertingConditionsResponse_FieldSubPathValue struct {
	WatchAlertingConditionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAlertingConditionsResponse_FieldPathValue = (*WatchAlertingConditionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAlertingConditionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAlertingConditionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAlertingConditionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAlertingConditionsResponse_FieldSubPathValue) SetTo(target **WatchAlertingConditionsResponse) {
	if *target == nil {
		*target = new(WatchAlertingConditionsResponse)
	}
	switch fpvs.Selector() {
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAlertingConditionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAlertingConditionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertingConditionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAlertingConditionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAlertingConditionsResponse_FieldSubPathValue) CompareWith(source *WatchAlertingConditionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAlertingConditionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAlertingConditionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAlertingConditionsResponse))
}

// WatchAlertingConditionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertingConditionsResponse according to their type
// Present only for array (repeated) types.
type WatchAlertingConditionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertingConditionsResponse_FieldPath
	ContainsValue(*WatchAlertingConditionsResponse) bool
}

// ParseWatchAlertingConditionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertingConditionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertingConditionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertingConditionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertingConditionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAlertingConditionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionsResponse_FieldPathArrayItemValue = (*WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertingConditionsResponse as interface{}
func (fpaiv *WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue) AsAlertingConditionChangesItemValue() (*alerting_condition.AlertingConditionChange, bool) {
	res, ok := fpaiv.value.(*alerting_condition.AlertingConditionChange)
	return res, ok
}

func (fpaiv *WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertingConditionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertingConditionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertingConditionsResponse'
func (fpaiv *WatchAlertingConditionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertingConditionsResponse) bool {
	slice := fpaiv.WatchAlertingConditionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAlertingConditionsResponse_FieldSubPathArrayItemValue struct {
	WatchAlertingConditionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAlertingConditionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAlertingConditionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertingConditionsResponse'
func (fpaivs *WatchAlertingConditionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAlertingConditionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAlertingConditionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAlertingConditionsResponse fields according to their type
type WatchAlertingConditionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertingConditionsResponse_FieldPath
}

func ParseWatchAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertingConditionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertingConditionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertingConditionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertingConditionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertingConditionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertingConditionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAlertingConditionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAlertingConditionsResponse_FieldPathArrayOfValues = (*WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges:
		for _, v := range fpaov.values.([][]*alerting_condition.AlertingConditionChange) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAlertingConditionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsAlertingConditionChangesArrayOfValues() ([][]*alerting_condition.AlertingConditionChange, bool) {
	res, ok := fpaov.values.([][]*alerting_condition.AlertingConditionChange)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAlertingConditionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAlertingConditionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAlertingConditionsResponse_FieldSubPathArrayOfValues struct {
	WatchAlertingConditionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAlertingConditionsResponse_FieldPathArrayOfValues = (*WatchAlertingConditionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAlertingConditionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAlertingConditionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertingConditionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAlertingConditionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAlertingConditionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAlertingConditionsResponse_PageTokenChange)

	// Those methods build corresponding WatchAlertingConditionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertingConditionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector = 0
	WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAlertingConditionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertingConditionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertingConditionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertingConditionsResponse_PageTokenChange", fp)
}

func ParseWatchAlertingConditionsResponsePageTokenChange_FieldPath(rawField string) (WatchAlertingConditionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertingConditionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAlertingConditionsResponsePageTokenChange_FieldPath(rawField string) WatchAlertingConditionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAlertingConditionsResponsePageTokenChange_FieldPath = (*WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAlertingConditionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertingConditionsResponse_PageTokenChange
func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAlertingConditionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertingConditionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAlertingConditionsResponse_PageTokenChange
func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAlertingConditionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertingConditionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*alerting_condition.PagerCursor)(nil)
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*alerting_condition.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAlertingConditionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertingConditionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAlertingConditionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue{WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*alerting_condition.PagerCursor)}
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue{WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*alerting_condition.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*alerting_condition.PagerCursor)}
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*alerting_condition.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertingConditionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAlertingConditionsResponsePageTokenChange_FieldPathValue interface {
	WatchAlertingConditionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertingConditionsResponse_PageTokenChange)
	CompareWith(*WatchAlertingConditionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAlertingConditionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertingConditionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAlertingConditionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAlertingConditionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionsResponsePageTokenChange_FieldPathValue = (*WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*alerting_condition.PagerCursor, bool) {
	res, ok := fpv.value.(*alerting_condition.PagerCursor)
	return res, ok
}
func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*alerting_condition.PagerCursor, bool) {
	res, ok := fpv.value.(*alerting_condition.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAlertingConditionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAlertingConditionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*alerting_condition.PagerCursor)
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*alerting_condition.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertingConditionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAlertingConditionsResponse_PageTokenChange'.
func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAlertingConditionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertingConditionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertingConditionsResponse_PageTokenChange))
}

// WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertingConditionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAlertingConditionsResponse_PageTokenChange) bool
}

// ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertingConditionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertingConditionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertingConditionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertingConditionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertingConditionsResponsePageTokenChange_FieldPath
}

func ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAlertingConditionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*alerting_condition.PagerCursor) {
			values = append(values, v)
		}
	case WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*alerting_condition.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*alerting_condition.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alerting_condition.PagerCursor)
	return res, ok
}
func (fpaov *WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*alerting_condition.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alerting_condition.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAlertingConditionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAlertingConditionRequest_FieldPathSelector
	Get(source *CreateAlertingConditionRequest) []interface{}
	GetSingle(source *CreateAlertingConditionRequest) (interface{}, bool)
	ClearValue(item *CreateAlertingConditionRequest)

	// Those methods build corresponding CreateAlertingConditionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAlertingConditionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAlertingConditionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAlertingConditionRequest_FieldPathArrayItemValue
}

type CreateAlertingConditionRequest_FieldPathSelector int32

const (
	CreateAlertingConditionRequest_FieldPathSelectorParent            CreateAlertingConditionRequest_FieldPathSelector = 0
	CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition CreateAlertingConditionRequest_FieldPathSelector = 1
)

func (s CreateAlertingConditionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return "alerting_condition"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", s))
	}
}

func BuildCreateAlertingConditionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAlertingConditionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAlertingConditionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAlertingConditionRequest_FieldTerminalPath{selector: CreateAlertingConditionRequest_FieldPathSelectorParent}, nil
		case "alerting_condition", "alertingCondition", "alerting-condition":
			return &CreateAlertingConditionRequest_FieldTerminalPath{selector: CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition}, nil
		}
	} else {
		switch fp[0] {
		case "alerting_condition", "alertingCondition", "alerting-condition":
			if subpath, err := alerting_condition.BuildAlertingCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAlertingConditionRequest_FieldSubPath{selector: CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAlertingConditionRequest", fp)
}

func ParseCreateAlertingConditionRequest_FieldPath(rawField string) (CreateAlertingConditionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAlertingConditionRequest_FieldPath(fp)
}

func MustParseCreateAlertingConditionRequest_FieldPath(rawField string) CreateAlertingConditionRequest_FieldPath {
	fp, err := ParseCreateAlertingConditionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAlertingConditionRequest_FieldTerminalPath struct {
	selector CreateAlertingConditionRequest_FieldPathSelector
}

var _ CreateAlertingConditionRequest_FieldPath = (*CreateAlertingConditionRequest_FieldTerminalPath)(nil)

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) Selector() CreateAlertingConditionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAlertingConditionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAlertingConditionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAlertingConditionRequest
func (fp *CreateAlertingConditionRequest_FieldTerminalPath) Get(source *CreateAlertingConditionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAlertingConditionRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
			if source.AlertingCondition != nil {
				values = append(values, source.AlertingCondition)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAlertingConditionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAlertingConditionRequest
func (fp *CreateAlertingConditionRequest_FieldTerminalPath) GetSingle(source *CreateAlertingConditionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		res := source.GetAlertingCondition()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAlertingConditionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		return (*alerting_condition.ParentReference)(nil)
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return (*alerting_condition.AlertingCondition)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) ClearValue(item *CreateAlertingConditionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAlertingConditionRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
			item.AlertingCondition = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAlertingConditionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAlertingConditionRequest_FieldPathSelectorParent
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAlertingConditionRequest_FieldPathValue {
	switch fp.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		return &CreateAlertingConditionRequest_FieldTerminalPathValue{CreateAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.ParentReference)}
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return &CreateAlertingConditionRequest_FieldTerminalPathValue{CreateAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov := &CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues{CreateAlertingConditionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		return &CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues{CreateAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.ParentReference)}
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return &CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues{CreateAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAlertingConditionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertingConditionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAlertingConditionRequest_FieldSubPath struct {
	selector CreateAlertingConditionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAlertingConditionRequest_FieldPath = (*CreateAlertingConditionRequest_FieldSubPath)(nil)

func (fps *CreateAlertingConditionRequest_FieldSubPath) Selector() CreateAlertingConditionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAlertingConditionRequest_FieldSubPath) AsAlertingConditionSubPath() (alerting_condition.AlertingCondition_FieldPath, bool) {
	res, ok := fps.subPath.(alerting_condition.AlertingCondition_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAlertingConditionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAlertingConditionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAlertingConditionRequest
func (fps *CreateAlertingConditionRequest_FieldSubPath) Get(source *CreateAlertingConditionRequest) (values []interface{}) {
	if asAlertingConditionFieldPath, ok := fps.AsAlertingConditionSubPath(); ok {
		values = append(values, asAlertingConditionFieldPath.Get(source.GetAlertingCondition())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAlertingConditionRequest))
}

// GetSingle returns value of selected field from source CreateAlertingConditionRequest
func (fps *CreateAlertingConditionRequest_FieldSubPath) GetSingle(source *CreateAlertingConditionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		if source.GetAlertingCondition() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlertingCondition())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fps.selector))
	}
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAlertingConditionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) ClearValue(item *CreateAlertingConditionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
			fps.subPath.ClearValueRaw(item.AlertingCondition)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAlertingConditionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateAlertingConditionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) WithIValue(value interface{}) CreateAlertingConditionRequest_FieldPathValue {
	return &CreateAlertingConditionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAlertingConditionRequest_FieldPathArrayOfValues {
	return &CreateAlertingConditionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAlertingConditionRequest_FieldPathArrayItemValue {
	return &CreateAlertingConditionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAlertingConditionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAlertingConditionRequest_FieldPathValue allows storing values for CreateAlertingConditionRequest fields according to their type
type CreateAlertingConditionRequest_FieldPathValue interface {
	CreateAlertingConditionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAlertingConditionRequest)
	CompareWith(*CreateAlertingConditionRequest) (cmp int, comparable bool)
}

func ParseCreateAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) (CreateAlertingConditionRequest_FieldPathValue, error) {
	fp, err := ParseCreateAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAlertingConditionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAlertingConditionRequest_FieldPathValue), nil
}

func MustParseCreateAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) CreateAlertingConditionRequest_FieldPathValue {
	fpv, err := ParseCreateAlertingConditionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAlertingConditionRequest_FieldTerminalPathValue struct {
	CreateAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAlertingConditionRequest_FieldPathValue = (*CreateAlertingConditionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAlertingConditionRequest' as interface{}
func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) AsParentValue() (*alerting_condition.ParentReference, bool) {
	res, ok := fpv.value.(*alerting_condition.ParentReference)
	return res, ok
}
func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) AsAlertingConditionValue() (*alerting_condition.AlertingCondition, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition)
	return res, ok
}

// SetTo stores value for selected field for object CreateAlertingConditionRequest
func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) SetTo(target **CreateAlertingConditionRequest) {
	if *target == nil {
		*target = new(CreateAlertingConditionRequest)
	}
	switch fpv.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*alerting_condition.ParentReference)
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		(*target).AlertingCondition = fpv.value.(*alerting_condition.AlertingCondition)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAlertingConditionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAlertingConditionRequest_FieldTerminalPathValue' with the value under path in 'CreateAlertingConditionRequest'.
func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) CompareWith(source *CreateAlertingConditionRequest) (int, bool) {
	switch fpv.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*alerting_condition.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAlertingConditionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAlertingConditionRequest))
}

type CreateAlertingConditionRequest_FieldSubPathValue struct {
	CreateAlertingConditionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAlertingConditionRequest_FieldPathValue = (*CreateAlertingConditionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAlertingConditionRequest_FieldSubPathValue) AsAlertingConditionPathValue() (alerting_condition.AlertingCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAlertingConditionRequest_FieldSubPathValue) SetTo(target **CreateAlertingConditionRequest) {
	if *target == nil {
		*target = new(CreateAlertingConditionRequest)
	}
	switch fpvs.Selector() {
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue).SetTo(&(*target).AlertingCondition)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAlertingConditionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAlertingConditionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAlertingConditionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAlertingConditionRequest_FieldSubPathValue) CompareWith(source *CreateAlertingConditionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue).CompareWith(source.GetAlertingCondition())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAlertingConditionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAlertingConditionRequest))
}

// CreateAlertingConditionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAlertingConditionRequest according to their type
// Present only for array (repeated) types.
type CreateAlertingConditionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAlertingConditionRequest_FieldPath
	ContainsValue(*CreateAlertingConditionRequest) bool
}

// ParseCreateAlertingConditionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAlertingConditionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAlertingConditionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAlertingConditionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAlertingConditionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAlertingConditionRequest_FieldTerminalPathArrayItemValue struct {
	CreateAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAlertingConditionRequest_FieldPathArrayItemValue = (*CreateAlertingConditionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAlertingConditionRequest as interface{}
func (fpaiv *CreateAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAlertingConditionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAlertingConditionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAlertingConditionRequest'
func (fpaiv *CreateAlertingConditionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAlertingConditionRequest) bool {
	slice := fpaiv.CreateAlertingConditionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAlertingConditionRequest_FieldSubPathArrayItemValue struct {
	CreateAlertingConditionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAlertingConditionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAlertingConditionRequest_FieldSubPathArrayItemValue) AsAlertingConditionPathItemValue() (alerting_condition.AlertingCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAlertingConditionRequest'
func (fpaivs *CreateAlertingConditionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAlertingConditionRequest) bool {
	switch fpaivs.Selector() {
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue).ContainsValue(source.GetAlertingCondition())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertingConditionRequest: %d", fpaivs.Selector()))
	}
}

// CreateAlertingConditionRequest_FieldPathArrayOfValues allows storing slice of values for CreateAlertingConditionRequest fields according to their type
type CreateAlertingConditionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAlertingConditionRequest_FieldPath
}

func ParseCreateAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAlertingConditionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAlertingConditionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAlertingConditionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues struct {
	CreateAlertingConditionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAlertingConditionRequest_FieldPathArrayOfValues = (*CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAlertingConditionRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*alerting_condition.ParentReference) {
			values = append(values, v)
		}
	case CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*alerting_condition.ParentReference, bool) {
	res, ok := fpaov.values.([]*alerting_condition.ParentReference)
	return res, ok
}
func (fpaov *CreateAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsAlertingConditionArrayOfValues() ([]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition)
	return res, ok
}

type CreateAlertingConditionRequest_FieldSubPathArrayOfValues struct {
	CreateAlertingConditionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAlertingConditionRequest_FieldPathArrayOfValues = (*CreateAlertingConditionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAlertingConditionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAlertingConditionRequest_FieldSubPathArrayOfValues) AsAlertingConditionPathArrayOfValues() (alerting_condition.AlertingCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alerting_condition.AlertingCondition_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAlertingConditionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAlertingConditionRequest_FieldPathSelector
	Get(source *UpdateAlertingConditionRequest) []interface{}
	GetSingle(source *UpdateAlertingConditionRequest) (interface{}, bool)
	ClearValue(item *UpdateAlertingConditionRequest)

	// Those methods build corresponding UpdateAlertingConditionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAlertingConditionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAlertingConditionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAlertingConditionRequest_FieldPathArrayItemValue
}

type UpdateAlertingConditionRequest_FieldPathSelector int32

const (
	UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition UpdateAlertingConditionRequest_FieldPathSelector = 0
	UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask        UpdateAlertingConditionRequest_FieldPathSelector = 1
	UpdateAlertingConditionRequest_FieldPathSelectorCas               UpdateAlertingConditionRequest_FieldPathSelector = 2
)

func (s UpdateAlertingConditionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return "alerting_condition"
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", s))
	}
}

func BuildUpdateAlertingConditionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAlertingConditionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAlertingConditionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerting_condition", "alertingCondition", "alerting-condition":
			return &UpdateAlertingConditionRequest_FieldTerminalPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAlertingConditionRequest_FieldTerminalPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAlertingConditionRequest_FieldTerminalPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "alerting_condition", "alertingCondition", "alerting-condition":
			if subpath, err := alerting_condition.BuildAlertingCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAlertingConditionRequest_FieldSubPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAlertingConditionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAlertingConditionRequest_FieldSubPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAlertingConditionRequest", fp)
}

func ParseUpdateAlertingConditionRequest_FieldPath(rawField string) (UpdateAlertingConditionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAlertingConditionRequest_FieldPath(fp)
}

func MustParseUpdateAlertingConditionRequest_FieldPath(rawField string) UpdateAlertingConditionRequest_FieldPath {
	fp, err := ParseUpdateAlertingConditionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAlertingConditionRequest_FieldTerminalPath struct {
	selector UpdateAlertingConditionRequest_FieldPathSelector
}

var _ UpdateAlertingConditionRequest_FieldPath = (*UpdateAlertingConditionRequest_FieldTerminalPath)(nil)

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) Selector() UpdateAlertingConditionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAlertingConditionRequest
func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) Get(source *UpdateAlertingConditionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
			if source.AlertingCondition != nil {
				values = append(values, source.AlertingCondition)
			}
		case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAlertingConditionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAlertingConditionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAlertingConditionRequest
func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) GetSingle(source *UpdateAlertingConditionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		res := source.GetAlertingCondition()
		return res, res != nil
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return (*alerting_condition.AlertingCondition)(nil)
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return (*UpdateAlertingConditionRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) ClearValue(item *UpdateAlertingConditionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
			item.AlertingCondition = nil
		case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAlertingConditionRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAlertingConditionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return &UpdateAlertingConditionRequest_FieldTerminalPathValue{UpdateAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition)}
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		return &UpdateAlertingConditionRequest_FieldTerminalPathValue{UpdateAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return &UpdateAlertingConditionRequest_FieldTerminalPathValue{UpdateAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*UpdateAlertingConditionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return &UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition)}
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		return &UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return &UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAlertingConditionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAlertingConditionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAlertingConditionRequest_FieldSubPath struct {
	selector UpdateAlertingConditionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAlertingConditionRequest_FieldPath = (*UpdateAlertingConditionRequest_FieldSubPath)(nil)

func (fps *UpdateAlertingConditionRequest_FieldSubPath) Selector() UpdateAlertingConditionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAlertingConditionRequest_FieldSubPath) AsAlertingConditionSubPath() (alerting_condition.AlertingCondition_FieldPath, bool) {
	res, ok := fps.subPath.(alerting_condition.AlertingCondition_FieldPath)
	return res, ok
}
func (fps *UpdateAlertingConditionRequest_FieldSubPath) AsCasSubPath() (UpdateAlertingConditionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAlertingConditionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAlertingConditionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAlertingConditionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAlertingConditionRequest
func (fps *UpdateAlertingConditionRequest_FieldSubPath) Get(source *UpdateAlertingConditionRequest) (values []interface{}) {
	if asAlertingConditionFieldPath, ok := fps.AsAlertingConditionSubPath(); ok {
		values = append(values, asAlertingConditionFieldPath.Get(source.GetAlertingCondition())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAlertingConditionRequest))
}

// GetSingle returns value of selected field from source UpdateAlertingConditionRequest
func (fps *UpdateAlertingConditionRequest_FieldSubPath) GetSingle(source *UpdateAlertingConditionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		if source.GetAlertingCondition() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlertingCondition())
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fps.selector))
	}
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAlertingConditionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) ClearValue(item *UpdateAlertingConditionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
			fps.subPath.ClearValueRaw(item.AlertingCondition)
		case UpdateAlertingConditionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAlertingConditionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAlertingConditionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) WithIValue(value interface{}) UpdateAlertingConditionRequest_FieldPathValue {
	return &UpdateAlertingConditionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAlertingConditionRequest_FieldPathArrayOfValues {
	return &UpdateAlertingConditionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAlertingConditionRequest_FieldPathArrayItemValue {
	return &UpdateAlertingConditionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAlertingConditionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAlertingConditionRequest_FieldPathValue allows storing values for UpdateAlertingConditionRequest fields according to their type
type UpdateAlertingConditionRequest_FieldPathValue interface {
	UpdateAlertingConditionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAlertingConditionRequest)
	CompareWith(*UpdateAlertingConditionRequest) (cmp int, comparable bool)
}

func ParseUpdateAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) (UpdateAlertingConditionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAlertingConditionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAlertingConditionRequest_FieldPathValue), nil
}

func MustParseUpdateAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) UpdateAlertingConditionRequest_FieldPathValue {
	fpv, err := ParseUpdateAlertingConditionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAlertingConditionRequest_FieldTerminalPathValue struct {
	UpdateAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertingConditionRequest_FieldPathValue = (*UpdateAlertingConditionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAlertingConditionRequest' as interface{}
func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) AsAlertingConditionValue() (*alerting_condition.AlertingCondition, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAlertingConditionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAlertingConditionRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAlertingConditionRequest
func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) SetTo(target **UpdateAlertingConditionRequest) {
	if *target == nil {
		*target = new(UpdateAlertingConditionRequest)
	}
	switch fpv.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		(*target).AlertingCondition = fpv.value.(*alerting_condition.AlertingCondition)
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAlertingConditionRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertingConditionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAlertingConditionRequest_FieldTerminalPathValue' with the value under path in 'UpdateAlertingConditionRequest'.
func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) CompareWith(source *UpdateAlertingConditionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return 0, false
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertingConditionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAlertingConditionRequest))
}

type UpdateAlertingConditionRequest_FieldSubPathValue struct {
	UpdateAlertingConditionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAlertingConditionRequest_FieldPathValue = (*UpdateAlertingConditionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) AsAlertingConditionPathValue() (alerting_condition.AlertingCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) AsCasPathValue() (UpdateAlertingConditionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAlertingConditionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) SetTo(target **UpdateAlertingConditionRequest) {
	if *target == nil {
		*target = new(UpdateAlertingConditionRequest)
	}
	switch fpvs.Selector() {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue).SetTo(&(*target).AlertingCondition)
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAlertingConditionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertingConditionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) CompareWith(source *UpdateAlertingConditionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue).CompareWith(source.GetAlertingCondition())
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAlertingConditionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertingConditionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAlertingConditionRequest))
}

// UpdateAlertingConditionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAlertingConditionRequest according to their type
// Present only for array (repeated) types.
type UpdateAlertingConditionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAlertingConditionRequest_FieldPath
	ContainsValue(*UpdateAlertingConditionRequest) bool
}

// ParseUpdateAlertingConditionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAlertingConditionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAlertingConditionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAlertingConditionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAlertingConditionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAlertingConditionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertingConditionRequest_FieldPathArrayItemValue = (*UpdateAlertingConditionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAlertingConditionRequest as interface{}
func (fpaiv *UpdateAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAlertingConditionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAlertingConditionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAlertingConditionRequest'
func (fpaiv *UpdateAlertingConditionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAlertingConditionRequest) bool {
	slice := fpaiv.UpdateAlertingConditionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAlertingConditionRequest_FieldSubPathArrayItemValue struct {
	UpdateAlertingConditionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAlertingConditionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAlertingConditionRequest_FieldSubPathArrayItemValue) AsAlertingConditionPathItemValue() (alerting_condition.AlertingCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAlertingConditionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAlertingConditionRequest'
func (fpaivs *UpdateAlertingConditionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAlertingConditionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		return fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue).ContainsValue(source.GetAlertingCondition())
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAlertingConditionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAlertingConditionRequest fields according to their type
type UpdateAlertingConditionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAlertingConditionRequest_FieldPath
}

func ParseUpdateAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAlertingConditionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAlertingConditionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAlertingConditionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAlertingConditionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAlertingConditionRequest_FieldPathArrayOfValues = (*UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition) {
			values = append(values, v)
		}
	case UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	case UpdateAlertingConditionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAlertingConditionRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsAlertingConditionArrayOfValues() ([]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpaov *UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}
func (fpaov *UpdateAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAlertingConditionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAlertingConditionRequest_CAS)
	return res, ok
}

type UpdateAlertingConditionRequest_FieldSubPathArrayOfValues struct {
	UpdateAlertingConditionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAlertingConditionRequest_FieldPathArrayOfValues = (*UpdateAlertingConditionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAlertingConditionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAlertingConditionRequest_FieldSubPathArrayOfValues) AsAlertingConditionPathArrayOfValues() (alerting_condition.AlertingCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alerting_condition.AlertingCondition_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAlertingConditionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAlertingConditionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAlertingConditionRequestCAS_FieldPathSelector
	Get(source *UpdateAlertingConditionRequest_CAS) []interface{}
	GetSingle(source *UpdateAlertingConditionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAlertingConditionRequest_CAS)

	// Those methods build corresponding UpdateAlertingConditionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAlertingConditionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue
}

type UpdateAlertingConditionRequestCAS_FieldPathSelector int32

const (
	UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState UpdateAlertingConditionRequestCAS_FieldPathSelector = 0
	UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask        UpdateAlertingConditionRequestCAS_FieldPathSelector = 1
)

func (s UpdateAlertingConditionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", s))
	}
}

func BuildUpdateAlertingConditionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAlertingConditionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAlertingConditionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAlertingConditionRequestCAS_FieldTerminalPath{selector: UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAlertingConditionRequestCAS_FieldTerminalPath{selector: UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := alerting_condition.BuildAlertingCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAlertingConditionRequestCAS_FieldSubPath{selector: UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAlertingConditionRequest_CAS", fp)
}

func ParseUpdateAlertingConditionRequestCAS_FieldPath(rawField string) (UpdateAlertingConditionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAlertingConditionRequestCAS_FieldPath(fp)
}

func MustParseUpdateAlertingConditionRequestCAS_FieldPath(rawField string) UpdateAlertingConditionRequestCAS_FieldPath {
	fp, err := ParseUpdateAlertingConditionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAlertingConditionRequestCAS_FieldTerminalPath struct {
	selector UpdateAlertingConditionRequestCAS_FieldPathSelector
}

var _ UpdateAlertingConditionRequestCAS_FieldPath = (*UpdateAlertingConditionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) Selector() UpdateAlertingConditionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAlertingConditionRequest_CAS
func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) Get(source *UpdateAlertingConditionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAlertingConditionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAlertingConditionRequest_CAS
func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAlertingConditionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAlertingConditionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return (*alerting_condition.AlertingCondition)(nil)
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		return (*alerting_condition.AlertingCondition_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAlertingConditionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAlertingConditionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAlertingConditionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAlertingConditionRequestCAS_FieldTerminalPathValue{UpdateAlertingConditionRequestCAS_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition)}
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAlertingConditionRequestCAS_FieldTerminalPathValue{UpdateAlertingConditionRequestCAS_FieldTerminalPath: *fp, value: value.(*alerting_condition.AlertingCondition_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequestCAS_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition)}
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues{UpdateAlertingConditionRequestCAS_FieldTerminalPath: *fp, values: values.([]*alerting_condition.AlertingCondition_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertingConditionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAlertingConditionRequestCAS_FieldSubPath struct {
	selector UpdateAlertingConditionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAlertingConditionRequestCAS_FieldPath = (*UpdateAlertingConditionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) Selector() UpdateAlertingConditionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (alerting_condition.AlertingCondition_FieldPath, bool) {
	res, ok := fps.subPath.(alerting_condition.AlertingCondition_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAlertingConditionRequest_CAS
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) Get(source *UpdateAlertingConditionRequest_CAS) (values []interface{}) {
	if asAlertingConditionFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAlertingConditionFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAlertingConditionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAlertingConditionRequest_CAS
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) GetSingle(source *UpdateAlertingConditionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAlertingConditionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) ClearValue(item *UpdateAlertingConditionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAlertingConditionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAlertingConditionRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAlertingConditionRequestCAS_FieldPathValue {
	return &UpdateAlertingConditionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues {
	return &UpdateAlertingConditionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue {
	return &UpdateAlertingConditionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAlertingConditionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAlertingConditionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAlertingConditionRequestCAS_FieldPathValue interface {
	UpdateAlertingConditionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAlertingConditionRequest_CAS)
	CompareWith(*UpdateAlertingConditionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAlertingConditionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAlertingConditionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAlertingConditionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAlertingConditionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAlertingConditionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAlertingConditionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAlertingConditionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAlertingConditionRequestCAS_FieldTerminalPathValue struct {
	UpdateAlertingConditionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertingConditionRequestCAS_FieldPathValue = (*UpdateAlertingConditionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*alerting_condition.AlertingCondition, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAlertingConditionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAlertingConditionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*alerting_condition.AlertingCondition)
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alerting_condition.AlertingCondition_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertingConditionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAlertingConditionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAlertingConditionRequest_CAS'.
func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAlertingConditionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertingConditionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAlertingConditionRequest_CAS))
}

type UpdateAlertingConditionRequestCAS_FieldSubPathValue struct {
	UpdateAlertingConditionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAlertingConditionRequestCAS_FieldPathValue = (*UpdateAlertingConditionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAlertingConditionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (alerting_condition.AlertingCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAlertingConditionRequestCAS_FieldSubPathValue) SetTo(target **UpdateAlertingConditionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAlertingConditionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertingConditionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertingConditionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAlertingConditionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAlertingConditionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAlertingConditionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(alerting_condition.AlertingCondition_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertingConditionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAlertingConditionRequest_CAS))
}

// UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAlertingConditionRequestCAS_FieldPath
	ContainsValue(*UpdateAlertingConditionRequest_CAS) bool
}

// ParseUpdateAlertingConditionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAlertingConditionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAlertingConditionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAlertingConditionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAlertingConditionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAlertingConditionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertingConditionRequestCAS_FieldPathArrayItemValue = (*UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAlertingConditionRequest_CAS as interface{}
func (fpaiv *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAlertingConditionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAlertingConditionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAlertingConditionRequest_CAS) bool {
	slice := fpaiv.UpdateAlertingConditionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAlertingConditionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAlertingConditionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAlertingConditionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAlertingConditionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (alerting_condition.AlertingCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAlertingConditionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAlertingConditionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(alerting_condition.AlertingCondition_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertingConditionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAlertingConditionRequestCAS_FieldPath
}

func ParseUpdateAlertingConditionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAlertingConditionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAlertingConditionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAlertingConditionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAlertingConditionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues = (*UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition) {
			values = append(values, v)
		}
	case UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*alerting_condition.AlertingCondition, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition)
	return res, ok
}
func (fpaov *UpdateAlertingConditionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alerting_condition.AlertingCondition_FieldMask, bool) {
	res, ok := fpaov.values.([]*alerting_condition.AlertingCondition_FieldMask)
	return res, ok
}

type UpdateAlertingConditionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAlertingConditionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAlertingConditionRequestCAS_FieldPathArrayOfValues = (*UpdateAlertingConditionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAlertingConditionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAlertingConditionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (alerting_condition.AlertingCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alerting_condition.AlertingCondition_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAlertingConditionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAlertingConditionRequest_FieldPathSelector
	Get(source *DeleteAlertingConditionRequest) []interface{}
	GetSingle(source *DeleteAlertingConditionRequest) (interface{}, bool)
	ClearValue(item *DeleteAlertingConditionRequest)

	// Those methods build corresponding DeleteAlertingConditionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAlertingConditionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAlertingConditionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAlertingConditionRequest_FieldPathArrayItemValue
}

type DeleteAlertingConditionRequest_FieldPathSelector int32

const (
	DeleteAlertingConditionRequest_FieldPathSelectorName DeleteAlertingConditionRequest_FieldPathSelector = 0
)

func (s DeleteAlertingConditionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", s))
	}
}

func BuildDeleteAlertingConditionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAlertingConditionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAlertingConditionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAlertingConditionRequest_FieldTerminalPath{selector: DeleteAlertingConditionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAlertingConditionRequest", fp)
}

func ParseDeleteAlertingConditionRequest_FieldPath(rawField string) (DeleteAlertingConditionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAlertingConditionRequest_FieldPath(fp)
}

func MustParseDeleteAlertingConditionRequest_FieldPath(rawField string) DeleteAlertingConditionRequest_FieldPath {
	fp, err := ParseDeleteAlertingConditionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAlertingConditionRequest_FieldTerminalPath struct {
	selector DeleteAlertingConditionRequest_FieldPathSelector
}

var _ DeleteAlertingConditionRequest_FieldPath = (*DeleteAlertingConditionRequest_FieldTerminalPath)(nil)

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) Selector() DeleteAlertingConditionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAlertingConditionRequest
func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) Get(source *DeleteAlertingConditionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAlertingConditionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAlertingConditionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAlertingConditionRequest
func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) GetSingle(source *DeleteAlertingConditionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAlertingConditionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		return (*alerting_condition.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) ClearValue(item *DeleteAlertingConditionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAlertingConditionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAlertingConditionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAlertingConditionRequest_FieldPathSelectorName
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAlertingConditionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		return &DeleteAlertingConditionRequest_FieldTerminalPathValue{DeleteAlertingConditionRequest_FieldTerminalPath: *fp, value: value.(*alerting_condition.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAlertingConditionRequest_FieldTerminalPathArrayOfValues{DeleteAlertingConditionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		return &DeleteAlertingConditionRequest_FieldTerminalPathArrayOfValues{DeleteAlertingConditionRequest_FieldTerminalPath: *fp, values: values.([]*alerting_condition.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAlertingConditionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertingConditionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAlertingConditionRequest_FieldPathValue allows storing values for DeleteAlertingConditionRequest fields according to their type
type DeleteAlertingConditionRequest_FieldPathValue interface {
	DeleteAlertingConditionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAlertingConditionRequest)
	CompareWith(*DeleteAlertingConditionRequest) (cmp int, comparable bool)
}

func ParseDeleteAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) (DeleteAlertingConditionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAlertingConditionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAlertingConditionRequest_FieldPathValue), nil
}

func MustParseDeleteAlertingConditionRequest_FieldPathValue(pathStr, valueStr string) DeleteAlertingConditionRequest_FieldPathValue {
	fpv, err := ParseDeleteAlertingConditionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAlertingConditionRequest_FieldTerminalPathValue struct {
	DeleteAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAlertingConditionRequest_FieldPathValue = (*DeleteAlertingConditionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAlertingConditionRequest' as interface{}
func (fpv *DeleteAlertingConditionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAlertingConditionRequest_FieldTerminalPathValue) AsNameValue() (*alerting_condition.Reference, bool) {
	res, ok := fpv.value.(*alerting_condition.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAlertingConditionRequest
func (fpv *DeleteAlertingConditionRequest_FieldTerminalPathValue) SetTo(target **DeleteAlertingConditionRequest) {
	if *target == nil {
		*target = new(DeleteAlertingConditionRequest)
	}
	switch fpv.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*alerting_condition.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAlertingConditionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAlertingConditionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAlertingConditionRequest_FieldTerminalPathValue' with the value under path in 'DeleteAlertingConditionRequest'.
func (fpv *DeleteAlertingConditionRequest_FieldTerminalPathValue) CompareWith(source *DeleteAlertingConditionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*alerting_condition.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertingConditionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAlertingConditionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAlertingConditionRequest))
}

// DeleteAlertingConditionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAlertingConditionRequest according to their type
// Present only for array (repeated) types.
type DeleteAlertingConditionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAlertingConditionRequest_FieldPath
	ContainsValue(*DeleteAlertingConditionRequest) bool
}

// ParseDeleteAlertingConditionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAlertingConditionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAlertingConditionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAlertingConditionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAlertingConditionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAlertingConditionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAlertingConditionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAlertingConditionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAlertingConditionRequest_FieldPathArrayItemValue = (*DeleteAlertingConditionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAlertingConditionRequest as interface{}
func (fpaiv *DeleteAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAlertingConditionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAlertingConditionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAlertingConditionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAlertingConditionRequest'
func (fpaiv *DeleteAlertingConditionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAlertingConditionRequest) bool {
	slice := fpaiv.DeleteAlertingConditionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAlertingConditionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAlertingConditionRequest fields according to their type
type DeleteAlertingConditionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAlertingConditionRequest_FieldPath
}

func ParseDeleteAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAlertingConditionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAlertingConditionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAlertingConditionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAlertingConditionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAlertingConditionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAlertingConditionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAlertingConditionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAlertingConditionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAlertingConditionRequest_FieldPathArrayOfValues = (*DeleteAlertingConditionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAlertingConditionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAlertingConditionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*alerting_condition.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAlertingConditionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*alerting_condition.Reference, bool) {
	res, ok := fpaov.values.([]*alerting_condition.Reference)
	return res, ok
}
