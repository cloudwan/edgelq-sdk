// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/alerting_condition_service.proto
// DO NOT EDIT!!!

package alerting_condition_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetAlertingConditionRequest) GotenObjectExt() {}

func (o *GetAlertingConditionRequest) MakeFullFieldMask() *GetAlertingConditionRequest_FieldMask {
	return FullGetAlertingConditionRequest_FieldMask()
}

func (o *GetAlertingConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAlertingConditionRequest_FieldMask()
}

func (o *GetAlertingConditionRequest) MakeDiffFieldMask(other *GetAlertingConditionRequest) *GetAlertingConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAlertingConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAlertingConditionRequest_FieldMask()
	}

	res := &GetAlertingConditionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAlertingConditionRequest_FieldTerminalPath{selector: GetAlertingConditionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAlertingConditionRequest_FieldTerminalPath{selector: GetAlertingConditionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAlertingConditionRequest_FieldTerminalPath{selector: GetAlertingConditionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAlertingConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAlertingConditionRequest))
}

func (o *GetAlertingConditionRequest) Clone() *GetAlertingConditionRequest {
	if o == nil {
		return nil
	}
	result := &GetAlertingConditionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &alerting_condition.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alerting_condition.AlertingCondition_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAlertingConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAlertingConditionRequest) Merge(source *GetAlertingConditionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &alerting_condition.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAlertingConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAlertingConditionRequest))
}

func (o *BatchGetAlertingConditionsRequest) GotenObjectExt() {}

func (o *BatchGetAlertingConditionsRequest) MakeFullFieldMask() *BatchGetAlertingConditionsRequest_FieldMask {
	return FullBatchGetAlertingConditionsRequest_FieldMask()
}

func (o *BatchGetAlertingConditionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAlertingConditionsRequest_FieldMask()
}

func (o *BatchGetAlertingConditionsRequest) MakeDiffFieldMask(other *BatchGetAlertingConditionsRequest) *BatchGetAlertingConditionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAlertingConditionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAlertingConditionsRequest_FieldMask()
	}

	res := &BatchGetAlertingConditionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAlertingConditionsRequest_FieldTerminalPath{selector: BatchGetAlertingConditionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAlertingConditionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAlertingConditionsRequest))
}

func (o *BatchGetAlertingConditionsRequest) Clone() *BatchGetAlertingConditionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAlertingConditionsRequest{}
	result.Names = make([]*alerting_condition.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &alerting_condition.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alerting_condition.AlertingCondition_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAlertingConditionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAlertingConditionsRequest) Merge(source *BatchGetAlertingConditionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alerting_condition.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &alerting_condition.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAlertingConditionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAlertingConditionsRequest))
}

func (o *BatchGetAlertingConditionsResponse) GotenObjectExt() {}

func (o *BatchGetAlertingConditionsResponse) MakeFullFieldMask() *BatchGetAlertingConditionsResponse_FieldMask {
	return FullBatchGetAlertingConditionsResponse_FieldMask()
}

func (o *BatchGetAlertingConditionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAlertingConditionsResponse_FieldMask()
}

func (o *BatchGetAlertingConditionsResponse) MakeDiffFieldMask(other *BatchGetAlertingConditionsResponse) *BatchGetAlertingConditionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAlertingConditionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAlertingConditionsResponse_FieldMask()
	}

	res := &BatchGetAlertingConditionsResponse_FieldMask{}

	if len(o.GetAlertingConditions()) == len(other.GetAlertingConditions()) {
		for i, lValue := range o.GetAlertingConditions() {
			rValue := other.GetAlertingConditions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorAlertingConditions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAlertingConditionsResponse_FieldTerminalPath{selector: BatchGetAlertingConditionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAlertingConditionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAlertingConditionsResponse))
}

func (o *BatchGetAlertingConditionsResponse) Clone() *BatchGetAlertingConditionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAlertingConditionsResponse{}
	result.AlertingConditions = make([]*alerting_condition.AlertingCondition, len(o.AlertingConditions))
	for i, sourceValue := range o.AlertingConditions {
		result.AlertingConditions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*alerting_condition.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &alerting_condition.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAlertingConditionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAlertingConditionsResponse) Merge(source *BatchGetAlertingConditionsResponse) {
	for _, sourceValue := range source.GetAlertingConditions() {
		exists := false
		for _, currentValue := range o.AlertingConditions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alerting_condition.AlertingCondition
			if sourceValue != nil {
				newDstElement = new(alerting_condition.AlertingCondition)
				newDstElement.Merge(sourceValue)
			}
			o.AlertingConditions = append(o.AlertingConditions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alerting_condition.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &alerting_condition.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAlertingConditionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAlertingConditionsResponse))
}

func (o *ListAlertingConditionsRequest) GotenObjectExt() {}

func (o *ListAlertingConditionsRequest) MakeFullFieldMask() *ListAlertingConditionsRequest_FieldMask {
	return FullListAlertingConditionsRequest_FieldMask()
}

func (o *ListAlertingConditionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAlertingConditionsRequest_FieldMask()
}

func (o *ListAlertingConditionsRequest) MakeDiffFieldMask(other *ListAlertingConditionsRequest) *ListAlertingConditionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAlertingConditionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAlertingConditionsRequest_FieldMask()
	}

	res := &ListAlertingConditionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAlertingConditionsRequest_FieldTerminalPath{selector: ListAlertingConditionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListAlertingConditionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAlertingConditionsRequest))
}

func (o *ListAlertingConditionsRequest) Clone() *ListAlertingConditionsRequest {
	if o == nil {
		return nil
	}
	result := &ListAlertingConditionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alerting_condition.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &alerting_condition.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &alerting_condition.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &alerting_condition.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alerting_condition.AlertingCondition_FieldMask)
	result.View = o.View
	return result
}

func (o *ListAlertingConditionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAlertingConditionsRequest) Merge(source *ListAlertingConditionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alerting_condition.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &alerting_condition.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &alerting_condition.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &alerting_condition.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListAlertingConditionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAlertingConditionsRequest))
}

func (o *ListAlertingConditionsResponse) GotenObjectExt() {}

func (o *ListAlertingConditionsResponse) MakeFullFieldMask() *ListAlertingConditionsResponse_FieldMask {
	return FullListAlertingConditionsResponse_FieldMask()
}

func (o *ListAlertingConditionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAlertingConditionsResponse_FieldMask()
}

func (o *ListAlertingConditionsResponse) MakeDiffFieldMask(other *ListAlertingConditionsResponse) *ListAlertingConditionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAlertingConditionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAlertingConditionsResponse_FieldMask()
	}

	res := &ListAlertingConditionsResponse_FieldMask{}

	if len(o.GetAlertingConditions()) == len(other.GetAlertingConditions()) {
		for i, lValue := range o.GetAlertingConditions() {
			rValue := other.GetAlertingConditions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorAlertingConditions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAlertingConditionsResponse_FieldTerminalPath{selector: ListAlertingConditionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListAlertingConditionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAlertingConditionsResponse))
}

func (o *ListAlertingConditionsResponse) Clone() *ListAlertingConditionsResponse {
	if o == nil {
		return nil
	}
	result := &ListAlertingConditionsResponse{}
	result.AlertingConditions = make([]*alerting_condition.AlertingCondition, len(o.AlertingConditions))
	for i, sourceValue := range o.AlertingConditions {
		result.AlertingConditions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &alerting_condition.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &alerting_condition.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListAlertingConditionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAlertingConditionsResponse) Merge(source *ListAlertingConditionsResponse) {
	for _, sourceValue := range source.GetAlertingConditions() {
		exists := false
		for _, currentValue := range o.AlertingConditions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alerting_condition.AlertingCondition
			if sourceValue != nil {
				newDstElement = new(alerting_condition.AlertingCondition)
				newDstElement.Merge(sourceValue)
			}
			o.AlertingConditions = append(o.AlertingConditions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &alerting_condition.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &alerting_condition.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListAlertingConditionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAlertingConditionsResponse))
}

func (o *WatchAlertingConditionRequest) GotenObjectExt() {}

func (o *WatchAlertingConditionRequest) MakeFullFieldMask() *WatchAlertingConditionRequest_FieldMask {
	return FullWatchAlertingConditionRequest_FieldMask()
}

func (o *WatchAlertingConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertingConditionRequest_FieldMask()
}

func (o *WatchAlertingConditionRequest) MakeDiffFieldMask(other *WatchAlertingConditionRequest) *WatchAlertingConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertingConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertingConditionRequest_FieldMask()
	}

	res := &WatchAlertingConditionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionRequest_FieldTerminalPath{selector: WatchAlertingConditionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAlertingConditionRequest_FieldTerminalPath{selector: WatchAlertingConditionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAlertingConditionRequest_FieldTerminalPath{selector: WatchAlertingConditionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAlertingConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertingConditionRequest))
}

func (o *WatchAlertingConditionRequest) Clone() *WatchAlertingConditionRequest {
	if o == nil {
		return nil
	}
	result := &WatchAlertingConditionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &alerting_condition.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alerting_condition.AlertingCondition_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAlertingConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertingConditionRequest) Merge(source *WatchAlertingConditionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &alerting_condition.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAlertingConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertingConditionRequest))
}

func (o *WatchAlertingConditionResponse) GotenObjectExt() {}

func (o *WatchAlertingConditionResponse) MakeFullFieldMask() *WatchAlertingConditionResponse_FieldMask {
	return FullWatchAlertingConditionResponse_FieldMask()
}

func (o *WatchAlertingConditionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertingConditionResponse_FieldMask()
}

func (o *WatchAlertingConditionResponse) MakeDiffFieldMask(other *WatchAlertingConditionResponse) *WatchAlertingConditionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertingConditionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertingConditionResponse_FieldMask()
	}

	res := &WatchAlertingConditionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAlertingConditionResponse_FieldTerminalPath{selector: WatchAlertingConditionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAlertingConditionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertingConditionResponse))
}

func (o *WatchAlertingConditionResponse) Clone() *WatchAlertingConditionResponse {
	if o == nil {
		return nil
	}
	result := &WatchAlertingConditionResponse{}
	result.Change = proto.Clone(o.Change).(*alerting_condition.AlertingConditionChange)
	return result
}

func (o *WatchAlertingConditionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertingConditionResponse) Merge(source *WatchAlertingConditionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(alerting_condition.AlertingConditionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAlertingConditionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertingConditionResponse))
}

func (o *WatchAlertingConditionsRequest) GotenObjectExt() {}

func (o *WatchAlertingConditionsRequest) MakeFullFieldMask() *WatchAlertingConditionsRequest_FieldMask {
	return FullWatchAlertingConditionsRequest_FieldMask()
}

func (o *WatchAlertingConditionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertingConditionsRequest_FieldMask()
}

func (o *WatchAlertingConditionsRequest) MakeDiffFieldMask(other *WatchAlertingConditionsRequest) *WatchAlertingConditionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertingConditionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertingConditionsRequest_FieldMask()
	}

	res := &WatchAlertingConditionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsRequest_FieldTerminalPath{selector: WatchAlertingConditionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAlertingConditionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertingConditionsRequest))
}

func (o *WatchAlertingConditionsRequest) Clone() *WatchAlertingConditionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAlertingConditionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alerting_condition.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &alerting_condition.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &alerting_condition.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &alerting_condition.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alerting_condition.AlertingCondition_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAlertingConditionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertingConditionsRequest) Merge(source *WatchAlertingConditionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alerting_condition.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &alerting_condition.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &alerting_condition.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &alerting_condition.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAlertingConditionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertingConditionsRequest))
}

func (o *WatchAlertingConditionsResponse) GotenObjectExt() {}

func (o *WatchAlertingConditionsResponse) MakeFullFieldMask() *WatchAlertingConditionsResponse_FieldMask {
	return FullWatchAlertingConditionsResponse_FieldMask()
}

func (o *WatchAlertingConditionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertingConditionsResponse_FieldMask()
}

func (o *WatchAlertingConditionsResponse) MakeDiffFieldMask(other *WatchAlertingConditionsResponse) *WatchAlertingConditionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertingConditionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertingConditionsResponse_FieldMask()
	}

	res := &WatchAlertingConditionsResponse_FieldMask{}

	if len(o.GetAlertingConditionChanges()) == len(other.GetAlertingConditionChanges()) {
		for i, lValue := range o.GetAlertingConditionChanges() {
			rValue := other.GetAlertingConditionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorAlertingConditionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldSubPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponse_FieldTerminalPath{selector: WatchAlertingConditionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAlertingConditionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertingConditionsResponse))
}

func (o *WatchAlertingConditionsResponse) Clone() *WatchAlertingConditionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAlertingConditionsResponse{}
	result.AlertingConditionChanges = make([]*alerting_condition.AlertingConditionChange, len(o.AlertingConditionChanges))
	for i, sourceValue := range o.AlertingConditionChanges {
		result.AlertingConditionChanges[i] = proto.Clone(sourceValue).(*alerting_condition.AlertingConditionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAlertingConditionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertingConditionsResponse) Merge(source *WatchAlertingConditionsResponse) {
	for _, sourceValue := range source.GetAlertingConditionChanges() {
		exists := false
		for _, currentValue := range o.AlertingConditionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alerting_condition.AlertingConditionChange
			if sourceValue != nil {
				newDstElement = new(alerting_condition.AlertingConditionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AlertingConditionChanges = append(o.AlertingConditionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAlertingConditionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAlertingConditionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertingConditionsResponse))
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAlertingConditionsResponse_PageTokenChange) MakeFullFieldMask() *WatchAlertingConditionsResponse_PageTokenChange_FieldMask {
	return FullWatchAlertingConditionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertingConditionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAlertingConditionsResponse_PageTokenChange) *WatchAlertingConditionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertingConditionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertingConditionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAlertingConditionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAlertingConditionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertingConditionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertingConditionsResponse_PageTokenChange))
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) Clone() *WatchAlertingConditionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAlertingConditionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &alerting_condition.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &alerting_condition.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) Merge(source *WatchAlertingConditionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &alerting_condition.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &alerting_condition.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAlertingConditionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertingConditionsResponse_PageTokenChange))
}

func (o *CreateAlertingConditionRequest) GotenObjectExt() {}

func (o *CreateAlertingConditionRequest) MakeFullFieldMask() *CreateAlertingConditionRequest_FieldMask {
	return FullCreateAlertingConditionRequest_FieldMask()
}

func (o *CreateAlertingConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAlertingConditionRequest_FieldMask()
}

func (o *CreateAlertingConditionRequest) MakeDiffFieldMask(other *CreateAlertingConditionRequest) *CreateAlertingConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAlertingConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAlertingConditionRequest_FieldMask()
	}

	res := &CreateAlertingConditionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAlertingConditionRequest_FieldTerminalPath{selector: CreateAlertingConditionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetAlertingCondition().MakeDiffFieldMask(other.GetAlertingCondition())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAlertingConditionRequest_FieldTerminalPath{selector: CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAlertingConditionRequest_FieldSubPath{selector: CreateAlertingConditionRequest_FieldPathSelectorAlertingCondition, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAlertingConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAlertingConditionRequest))
}

func (o *CreateAlertingConditionRequest) Clone() *CreateAlertingConditionRequest {
	if o == nil {
		return nil
	}
	result := &CreateAlertingConditionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alerting_condition.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.AlertingCondition = o.AlertingCondition.Clone()
	return result
}

func (o *CreateAlertingConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAlertingConditionRequest) Merge(source *CreateAlertingConditionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alerting_condition.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetAlertingCondition() != nil {
		if o.AlertingCondition == nil {
			o.AlertingCondition = new(alerting_condition.AlertingCondition)
		}
		o.AlertingCondition.Merge(source.GetAlertingCondition())
	}
}

func (o *CreateAlertingConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAlertingConditionRequest))
}

func (o *UpdateAlertingConditionRequest) GotenObjectExt() {}

func (o *UpdateAlertingConditionRequest) MakeFullFieldMask() *UpdateAlertingConditionRequest_FieldMask {
	return FullUpdateAlertingConditionRequest_FieldMask()
}

func (o *UpdateAlertingConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAlertingConditionRequest_FieldMask()
}

func (o *UpdateAlertingConditionRequest) MakeDiffFieldMask(other *UpdateAlertingConditionRequest) *UpdateAlertingConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAlertingConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAlertingConditionRequest_FieldMask()
	}

	res := &UpdateAlertingConditionRequest_FieldMask{}
	{
		subMask := o.GetAlertingCondition().MakeDiffFieldMask(other.GetAlertingCondition())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAlertingConditionRequest_FieldTerminalPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAlertingConditionRequest_FieldSubPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorAlertingCondition, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAlertingConditionRequest_FieldTerminalPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAlertingConditionRequest_FieldTerminalPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAlertingConditionRequest_FieldSubPath{selector: UpdateAlertingConditionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAlertingConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAlertingConditionRequest))
}

func (o *UpdateAlertingConditionRequest) Clone() *UpdateAlertingConditionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAlertingConditionRequest{}
	result.AlertingCondition = o.AlertingCondition.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*alerting_condition.AlertingCondition_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAlertingConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAlertingConditionRequest) Merge(source *UpdateAlertingConditionRequest) {
	if source.GetAlertingCondition() != nil {
		if o.AlertingCondition == nil {
			o.AlertingCondition = new(alerting_condition.AlertingCondition)
		}
		o.AlertingCondition.Merge(source.GetAlertingCondition())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAlertingConditionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAlertingConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAlertingConditionRequest))
}

func (o *UpdateAlertingConditionRequest_CAS) GotenObjectExt() {}

func (o *UpdateAlertingConditionRequest_CAS) MakeFullFieldMask() *UpdateAlertingConditionRequest_CAS_FieldMask {
	return FullUpdateAlertingConditionRequest_CAS_FieldMask()
}

func (o *UpdateAlertingConditionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAlertingConditionRequest_CAS_FieldMask()
}

func (o *UpdateAlertingConditionRequest_CAS) MakeDiffFieldMask(other *UpdateAlertingConditionRequest_CAS) *UpdateAlertingConditionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAlertingConditionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAlertingConditionRequest_CAS_FieldMask()
	}

	res := &UpdateAlertingConditionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAlertingConditionRequestCAS_FieldTerminalPath{selector: UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAlertingConditionRequestCAS_FieldSubPath{selector: UpdateAlertingConditionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAlertingConditionRequestCAS_FieldTerminalPath{selector: UpdateAlertingConditionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAlertingConditionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAlertingConditionRequest_CAS))
}

func (o *UpdateAlertingConditionRequest_CAS) Clone() *UpdateAlertingConditionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAlertingConditionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*alerting_condition.AlertingCondition_FieldMask)
	return result
}

func (o *UpdateAlertingConditionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAlertingConditionRequest_CAS) Merge(source *UpdateAlertingConditionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(alerting_condition.AlertingCondition)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alerting_condition.AlertingCondition_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAlertingConditionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAlertingConditionRequest_CAS))
}

func (o *DeleteAlertingConditionRequest) GotenObjectExt() {}

func (o *DeleteAlertingConditionRequest) MakeFullFieldMask() *DeleteAlertingConditionRequest_FieldMask {
	return FullDeleteAlertingConditionRequest_FieldMask()
}

func (o *DeleteAlertingConditionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAlertingConditionRequest_FieldMask()
}

func (o *DeleteAlertingConditionRequest) MakeDiffFieldMask(other *DeleteAlertingConditionRequest) *DeleteAlertingConditionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAlertingConditionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAlertingConditionRequest_FieldMask()
	}

	res := &DeleteAlertingConditionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAlertingConditionRequest_FieldTerminalPath{selector: DeleteAlertingConditionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAlertingConditionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAlertingConditionRequest))
}

func (o *DeleteAlertingConditionRequest) Clone() *DeleteAlertingConditionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAlertingConditionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &alerting_condition.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAlertingConditionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAlertingConditionRequest) Merge(source *DeleteAlertingConditionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &alerting_condition.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAlertingConditionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAlertingConditionRequest))
}
