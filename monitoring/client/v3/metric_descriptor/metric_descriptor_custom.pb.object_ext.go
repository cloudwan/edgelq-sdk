// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/metric_descriptor_custom.proto
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/metric_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &project.Project{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
)

func (o *ListMetricDescriptorsRequest) GotenObjectExt() {}

func (o *ListMetricDescriptorsRequest) MakeFullFieldMask() *ListMetricDescriptorsRequest_FieldMask {
	return FullListMetricDescriptorsRequest_FieldMask()
}

func (o *ListMetricDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMetricDescriptorsRequest_FieldMask()
}

func (o *ListMetricDescriptorsRequest) MakeDiffFieldMask(other *ListMetricDescriptorsRequest) *ListMetricDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListMetricDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMetricDescriptorsRequest_FieldMask()
	}

	res := &ListMetricDescriptorsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorParent})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorFilter})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListMetricDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMetricDescriptorsRequest))
}

func (o *ListMetricDescriptorsRequest) Clone() *ListMetricDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &ListMetricDescriptorsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &metric_descriptor.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &metric_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &metric_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &metric_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListMetricDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMetricDescriptorsRequest) Merge(source *ListMetricDescriptorsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &metric_descriptor.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &metric_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &metric_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &metric_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListMetricDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMetricDescriptorsRequest))
}

func (o *ListMetricDescriptorsResponse) GotenObjectExt() {}

func (o *ListMetricDescriptorsResponse) MakeFullFieldMask() *ListMetricDescriptorsResponse_FieldMask {
	return FullListMetricDescriptorsResponse_FieldMask()
}

func (o *ListMetricDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMetricDescriptorsResponse_FieldMask()
}

func (o *ListMetricDescriptorsResponse) MakeDiffFieldMask(other *ListMetricDescriptorsResponse) *ListMetricDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListMetricDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMetricDescriptorsResponse_FieldMask()
	}

	res := &ListMetricDescriptorsResponse_FieldMask{}

	if len(o.GetMetricDescriptors()) == len(other.GetMetricDescriptors()) {
		for i, lValue := range o.GetMetricDescriptors() {
			rValue := other.GetMetricDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListMetricDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMetricDescriptorsResponse))
}

func (o *ListMetricDescriptorsResponse) Clone() *ListMetricDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &ListMetricDescriptorsResponse{}
	result.MetricDescriptors = make([]*metric_descriptor.MetricDescriptor, len(o.MetricDescriptors))
	for i, sourceValue := range o.MetricDescriptors {
		result.MetricDescriptors[i] = sourceValue.Clone()
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &metric_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &metric_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListMetricDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMetricDescriptorsResponse) Merge(source *ListMetricDescriptorsResponse) {
	for _, sourceValue := range source.GetMetricDescriptors() {
		exists := false
		for _, currentValue := range o.MetricDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *metric_descriptor.MetricDescriptor
			if sourceValue != nil {
				newDstElement = new(metric_descriptor.MetricDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.MetricDescriptors = append(o.MetricDescriptors, newDstElement)
		}
	}

	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &metric_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &metric_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListMetricDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMetricDescriptorsResponse))
}

func (o *GetMetricDescriptorRequest) GotenObjectExt() {}

func (o *GetMetricDescriptorRequest) MakeFullFieldMask() *GetMetricDescriptorRequest_FieldMask {
	return FullGetMetricDescriptorRequest_FieldMask()
}

func (o *GetMetricDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetMetricDescriptorRequest_FieldMask()
}

func (o *GetMetricDescriptorRequest) MakeDiffFieldMask(other *GetMetricDescriptorRequest) *GetMetricDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &GetMetricDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetMetricDescriptorRequest_FieldMask()
	}

	res := &GetMetricDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetMetricDescriptorRequest_FieldTerminalPath{selector: GetMetricDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetMetricDescriptorRequest_FieldTerminalPath{selector: GetMetricDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetMetricDescriptorRequest_FieldTerminalPath{selector: GetMetricDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetMetricDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetMetricDescriptorRequest))
}

func (o *GetMetricDescriptorRequest) Clone() *GetMetricDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &GetMetricDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &metric_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *GetMetricDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetMetricDescriptorRequest) Merge(source *GetMetricDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &metric_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetMetricDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetMetricDescriptorRequest))
}

func (o *CreateMetricDescriptorRequest) GotenObjectExt() {}

func (o *CreateMetricDescriptorRequest) MakeFullFieldMask() *CreateMetricDescriptorRequest_FieldMask {
	return FullCreateMetricDescriptorRequest_FieldMask()
}

func (o *CreateMetricDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateMetricDescriptorRequest_FieldMask()
}

func (o *CreateMetricDescriptorRequest) MakeDiffFieldMask(other *CreateMetricDescriptorRequest) *CreateMetricDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateMetricDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateMetricDescriptorRequest_FieldMask()
	}

	res := &CreateMetricDescriptorRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateMetricDescriptorRequest_FieldTerminalPath{selector: CreateMetricDescriptorRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetMetricDescriptor().MakeDiffFieldMask(other.GetMetricDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateMetricDescriptorRequest_FieldTerminalPath{selector: CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateMetricDescriptorRequest_FieldSubPath{selector: CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateMetricDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateMetricDescriptorRequest))
}

func (o *CreateMetricDescriptorRequest) Clone() *CreateMetricDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &CreateMetricDescriptorRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &metric_descriptor.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.MetricDescriptor = o.MetricDescriptor.Clone()
	return result
}

func (o *CreateMetricDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateMetricDescriptorRequest) Merge(source *CreateMetricDescriptorRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &metric_descriptor.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetMetricDescriptor() != nil {
		if o.MetricDescriptor == nil {
			o.MetricDescriptor = new(metric_descriptor.MetricDescriptor)
		}
		o.MetricDescriptor.Merge(source.GetMetricDescriptor())
	}
}

func (o *CreateMetricDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateMetricDescriptorRequest))
}

func (o *UpdateMetricDescriptorRequest) GotenObjectExt() {}

func (o *UpdateMetricDescriptorRequest) MakeFullFieldMask() *UpdateMetricDescriptorRequest_FieldMask {
	return FullUpdateMetricDescriptorRequest_FieldMask()
}

func (o *UpdateMetricDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMetricDescriptorRequest_FieldMask()
}

func (o *UpdateMetricDescriptorRequest) MakeDiffFieldMask(other *UpdateMetricDescriptorRequest) *UpdateMetricDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateMetricDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMetricDescriptorRequest_FieldMask()
	}

	res := &UpdateMetricDescriptorRequest_FieldMask{}
	{
		subMask := o.GetMetricDescriptor().MakeDiffFieldMask(other.GetMetricDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldSubPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldSubPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateMetricDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMetricDescriptorRequest))
}

func (o *UpdateMetricDescriptorRequest) Clone() *UpdateMetricDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateMetricDescriptorRequest{}
	result.MetricDescriptor = o.MetricDescriptor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateMetricDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMetricDescriptorRequest) Merge(source *UpdateMetricDescriptorRequest) {
	if source.GetMetricDescriptor() != nil {
		if o.MetricDescriptor == nil {
			o.MetricDescriptor = new(metric_descriptor.MetricDescriptor)
		}
		o.MetricDescriptor.Merge(source.GetMetricDescriptor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateMetricDescriptorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateMetricDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMetricDescriptorRequest))
}

func (o *UpdateMetricDescriptorRequest_CAS) GotenObjectExt() {}

func (o *UpdateMetricDescriptorRequest_CAS) MakeFullFieldMask() *UpdateMetricDescriptorRequest_CAS_FieldMask {
	return FullUpdateMetricDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMetricDescriptorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMetricDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMetricDescriptorRequest_CAS) MakeDiffFieldMask(other *UpdateMetricDescriptorRequest_CAS) *UpdateMetricDescriptorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateMetricDescriptorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMetricDescriptorRequest_CAS_FieldMask()
	}

	res := &UpdateMetricDescriptorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMetricDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMetricDescriptorRequestCAS_FieldSubPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateMetricDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateMetricDescriptorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMetricDescriptorRequest_CAS))
}

func (o *UpdateMetricDescriptorRequest_CAS) Clone() *UpdateMetricDescriptorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateMetricDescriptorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	return result
}

func (o *UpdateMetricDescriptorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMetricDescriptorRequest_CAS) Merge(source *UpdateMetricDescriptorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(metric_descriptor.MetricDescriptor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateMetricDescriptorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMetricDescriptorRequest_CAS))
}

func (o *DeleteMetricDescriptorRequest) GotenObjectExt() {}

func (o *DeleteMetricDescriptorRequest) MakeFullFieldMask() *DeleteMetricDescriptorRequest_FieldMask {
	return FullDeleteMetricDescriptorRequest_FieldMask()
}

func (o *DeleteMetricDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteMetricDescriptorRequest_FieldMask()
}

func (o *DeleteMetricDescriptorRequest) MakeDiffFieldMask(other *DeleteMetricDescriptorRequest) *DeleteMetricDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteMetricDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteMetricDescriptorRequest_FieldMask()
	}

	res := &DeleteMetricDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteMetricDescriptorRequest_FieldTerminalPath{selector: DeleteMetricDescriptorRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteMetricDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteMetricDescriptorRequest))
}

func (o *DeleteMetricDescriptorRequest) Clone() *DeleteMetricDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &DeleteMetricDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &metric_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteMetricDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteMetricDescriptorRequest) Merge(source *DeleteMetricDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &metric_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteMetricDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteMetricDescriptorRequest))
}
