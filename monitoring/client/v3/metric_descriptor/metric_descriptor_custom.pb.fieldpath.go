// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/metric_descriptor_custom.proto
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/metric_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &project.Project{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMetricDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMetricDescriptorsRequest_FieldPathSelector
	Get(source *ListMetricDescriptorsRequest) []interface{}
	GetSingle(source *ListMetricDescriptorsRequest) (interface{}, bool)
	ClearValue(item *ListMetricDescriptorsRequest)

	// Those methods build corresponding ListMetricDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMetricDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMetricDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMetricDescriptorsRequest_FieldPathArrayItemValue
}

type ListMetricDescriptorsRequest_FieldPathSelector int32

const (
	ListMetricDescriptorsRequest_FieldPathSelectorParent    ListMetricDescriptorsRequest_FieldPathSelector = 0
	ListMetricDescriptorsRequest_FieldPathSelectorFilter    ListMetricDescriptorsRequest_FieldPathSelector = 1
	ListMetricDescriptorsRequest_FieldPathSelectorPageSize  ListMetricDescriptorsRequest_FieldPathSelector = 2
	ListMetricDescriptorsRequest_FieldPathSelectorPageToken ListMetricDescriptorsRequest_FieldPathSelector = 3
	ListMetricDescriptorsRequest_FieldPathSelectorOrderBy   ListMetricDescriptorsRequest_FieldPathSelector = 4
	ListMetricDescriptorsRequest_FieldPathSelectorFieldMask ListMetricDescriptorsRequest_FieldPathSelector = 5
	ListMetricDescriptorsRequest_FieldPathSelectorView      ListMetricDescriptorsRequest_FieldPathSelector = 6
)

func (s ListMetricDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		return "parent"
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", s))
	}
}

func BuildListMetricDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListMetricDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMetricDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorParent}, nil
		case "filter":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "page_size", "pageSize", "page-size":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListMetricDescriptorsRequest_FieldTerminalPath{selector: ListMetricDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMetricDescriptorsRequest", fp)
}

func ParseListMetricDescriptorsRequest_FieldPath(rawField string) (ListMetricDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMetricDescriptorsRequest_FieldPath(fp)
}

func MustParseListMetricDescriptorsRequest_FieldPath(rawField string) ListMetricDescriptorsRequest_FieldPath {
	fp, err := ParseListMetricDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMetricDescriptorsRequest_FieldTerminalPath struct {
	selector ListMetricDescriptorsRequest_FieldPathSelector
}

var _ ListMetricDescriptorsRequest_FieldPath = (*ListMetricDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) Selector() ListMetricDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMetricDescriptorsRequest
func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) Get(source *ListMetricDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMetricDescriptorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListMetricDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMetricDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source ListMetricDescriptorsRequest
func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) GetSingle(source *ListMetricDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMetricDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		return (*metric_descriptor.ParentName)(nil)
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		return (*metric_descriptor.Filter)(nil)
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return (*metric_descriptor.PagerCursor)(nil)
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*metric_descriptor.OrderBy)(nil)
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) ClearValue(item *ListMetricDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case ListMetricDescriptorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListMetricDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMetricDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorParent ||
		fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListMetricDescriptorsRequest_FieldPathSelectorView
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) ListMetricDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.ParentName)}
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Filter)}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.PagerCursor)}
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.OrderBy)}
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		return &ListMetricDescriptorsRequest_FieldTerminalPathValue{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMetricDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.ParentName)}
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.Filter)}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.PagerCursor)}
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.OrderBy)}
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		return &ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMetricDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListMetricDescriptorsRequest_FieldPathValue allows storing values for ListMetricDescriptorsRequest fields according to their type
type ListMetricDescriptorsRequest_FieldPathValue interface {
	ListMetricDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMetricDescriptorsRequest)
	CompareWith(*ListMetricDescriptorsRequest) (cmp int, comparable bool)
}

func ParseListMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (ListMetricDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseListMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMetricDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMetricDescriptorsRequest_FieldPathValue), nil
}

func MustParseListMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr string) ListMetricDescriptorsRequest_FieldPathValue {
	fpv, err := ParseListMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMetricDescriptorsRequest_FieldTerminalPathValue struct {
	ListMetricDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMetricDescriptorsRequest_FieldPathValue = (*ListMetricDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMetricDescriptorsRequest' as interface{}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsParentValue() (*metric_descriptor.ParentName, bool) {
	res, ok := fpv.value.(*metric_descriptor.ParentName)
	return res, ok
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*metric_descriptor.Filter, bool) {
	res, ok := fpv.value.(*metric_descriptor.Filter)
	return res, ok
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*metric_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*metric_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*metric_descriptor.OrderBy)
	return res, ok
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListMetricDescriptorsRequest
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) SetTo(target **ListMetricDescriptorsRequest) {
	if *target == nil {
		*target = new(ListMetricDescriptorsRequest)
	}
	switch fpv.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*metric_descriptor.ParentName)
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*metric_descriptor.Filter)
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*metric_descriptor.PagerCursor)
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*metric_descriptor.OrderBy)
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMetricDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMetricDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'ListMetricDescriptorsRequest'.
func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *ListMetricDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*metric_descriptor.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMetricDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMetricDescriptorsRequest))
}

// ListMetricDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMetricDescriptorsRequest according to their type
// Present only for array (repeated) types.
type ListMetricDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMetricDescriptorsRequest_FieldPath
	ContainsValue(*ListMetricDescriptorsRequest) bool
}

// ParseListMetricDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListMetricDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMetricDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMetricDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseListMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListMetricDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMetricDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	ListMetricDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMetricDescriptorsRequest_FieldPathArrayItemValue = (*ListMetricDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMetricDescriptorsRequest as interface{}
func (fpaiv *ListMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListMetricDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMetricDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMetricDescriptorsRequest'
func (fpaiv *ListMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMetricDescriptorsRequest) bool {
	slice := fpaiv.ListMetricDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListMetricDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for ListMetricDescriptorsRequest fields according to their type
type ListMetricDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMetricDescriptorsRequest_FieldPath
}

func ParseListMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMetricDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMetricDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMetricDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseListMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListMetricDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	ListMetricDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ ListMetricDescriptorsRequest_FieldPathArrayOfValues = (*ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMetricDescriptorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*metric_descriptor.ParentName) {
			values = append(values, v)
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*metric_descriptor.Filter) {
			values = append(values, v)
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*metric_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*metric_descriptor.OrderBy) {
			values = append(values, v)
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	case ListMetricDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*metric_descriptor.ParentName, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.ParentName)
	return res, ok
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*metric_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.Filter)
	return res, ok
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*metric_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*metric_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.OrderBy)
	return res, ok
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpaov *ListMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMetricDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMetricDescriptorsResponse_FieldPathSelector
	Get(source *ListMetricDescriptorsResponse) []interface{}
	GetSingle(source *ListMetricDescriptorsResponse) (interface{}, bool)
	ClearValue(item *ListMetricDescriptorsResponse)

	// Those methods build corresponding ListMetricDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMetricDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMetricDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMetricDescriptorsResponse_FieldPathArrayItemValue
}

type ListMetricDescriptorsResponse_FieldPathSelector int32

const (
	ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors ListMetricDescriptorsResponse_FieldPathSelector = 0
	ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken     ListMetricDescriptorsResponse_FieldPathSelector = 1
	ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken     ListMetricDescriptorsResponse_FieldPathSelector = 2
)

func (s ListMetricDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return "metric_descriptors"
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", s))
	}
}

func BuildListMetricDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListMetricDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMetricDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metric_descriptors", "metricDescriptors", "metric-descriptors":
			return &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListMetricDescriptorsResponse_FieldTerminalPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "metric_descriptors", "metricDescriptors", "metric-descriptors":
			if subpath, err := metric_descriptor.BuildMetricDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListMetricDescriptorsResponse_FieldSubPath{selector: ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMetricDescriptorsResponse", fp)
}

func ParseListMetricDescriptorsResponse_FieldPath(rawField string) (ListMetricDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMetricDescriptorsResponse_FieldPath(fp)
}

func MustParseListMetricDescriptorsResponse_FieldPath(rawField string) ListMetricDescriptorsResponse_FieldPath {
	fp, err := ParseListMetricDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMetricDescriptorsResponse_FieldTerminalPath struct {
	selector ListMetricDescriptorsResponse_FieldPathSelector
}

var _ ListMetricDescriptorsResponse_FieldPath = (*ListMetricDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) Selector() ListMetricDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMetricDescriptorsResponse
func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) Get(source *ListMetricDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
			for _, value := range source.GetMetricDescriptors() {
				values = append(values, value)
			}
		case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMetricDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source ListMetricDescriptorsResponse
func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) GetSingle(source *ListMetricDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		res := source.GetMetricDescriptors()
		return res, res != nil
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMetricDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return ([]*metric_descriptor.MetricDescriptor)(nil)
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		return (*metric_descriptor.PagerCursor)(nil)
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return (*metric_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) ClearValue(item *ListMetricDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
			item.MetricDescriptors = nil
		case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMetricDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) ListMetricDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return &ListMetricDescriptorsResponse_FieldTerminalPathValue{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*metric_descriptor.MetricDescriptor)}
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListMetricDescriptorsResponse_FieldTerminalPathValue{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.PagerCursor)}
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListMetricDescriptorsResponse_FieldTerminalPathValue{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMetricDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMetricDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return &ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*metric_descriptor.MetricDescriptor)}
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.PagerCursor)}
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMetricDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return &ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue{ListMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMetricDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListMetricDescriptorsResponse_FieldSubPath struct {
	selector ListMetricDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListMetricDescriptorsResponse_FieldPath = (*ListMetricDescriptorsResponse_FieldSubPath)(nil)

func (fps *ListMetricDescriptorsResponse_FieldSubPath) Selector() ListMetricDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListMetricDescriptorsResponse_FieldSubPath) AsMetricDescriptorsSubPath() (metric_descriptor.MetricDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(metric_descriptor.MetricDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListMetricDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListMetricDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListMetricDescriptorsResponse
func (fps *ListMetricDescriptorsResponse_FieldSubPath) Get(source *ListMetricDescriptorsResponse) (values []interface{}) {
	if asMetricDescriptorFieldPath, ok := fps.AsMetricDescriptorsSubPath(); ok {
		for _, item := range source.GetMetricDescriptors() {
			values = append(values, asMetricDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListMetricDescriptorsResponse))
}

// GetSingle returns value of selected field from source ListMetricDescriptorsResponse
func (fps *ListMetricDescriptorsResponse_FieldSubPath) GetSingle(source *ListMetricDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		if len(source.GetMetricDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetricDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListMetricDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListMetricDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) ClearValue(item *ListMetricDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
			for _, subItem := range item.MetricDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListMetricDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListMetricDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) ListMetricDescriptorsResponse_FieldPathValue {
	return &ListMetricDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListMetricDescriptorsResponse_FieldPathArrayOfValues {
	return &ListMetricDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListMetricDescriptorsResponse_FieldPathArrayItemValue {
	return &ListMetricDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListMetricDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListMetricDescriptorsResponse_FieldPathValue allows storing values for ListMetricDescriptorsResponse fields according to their type
type ListMetricDescriptorsResponse_FieldPathValue interface {
	ListMetricDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMetricDescriptorsResponse)
	CompareWith(*ListMetricDescriptorsResponse) (cmp int, comparable bool)
}

func ParseListMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (ListMetricDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseListMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMetricDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMetricDescriptorsResponse_FieldPathValue), nil
}

func MustParseListMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr string) ListMetricDescriptorsResponse_FieldPathValue {
	fpv, err := ParseListMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMetricDescriptorsResponse_FieldTerminalPathValue struct {
	ListMetricDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMetricDescriptorsResponse_FieldPathValue = (*ListMetricDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMetricDescriptorsResponse' as interface{}
func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) AsMetricDescriptorsValue() ([]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpv.value.([]*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*metric_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*metric_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*metric_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListMetricDescriptorsResponse
func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) SetTo(target **ListMetricDescriptorsResponse) {
	if *target == nil {
		*target = new(ListMetricDescriptorsResponse)
	}
	switch fpv.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		(*target).MetricDescriptors = fpv.value.([]*metric_descriptor.MetricDescriptor)
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*metric_descriptor.PagerCursor)
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*metric_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMetricDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMetricDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'ListMetricDescriptorsResponse'.
func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *ListMetricDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return 0, false
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMetricDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMetricDescriptorsResponse))
}

type ListMetricDescriptorsResponse_FieldSubPathValue struct {
	ListMetricDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListMetricDescriptorsResponse_FieldPathValue = (*ListMetricDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *ListMetricDescriptorsResponse_FieldSubPathValue) AsMetricDescriptorsPathValue() (metric_descriptor.MetricDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *ListMetricDescriptorsResponse_FieldSubPathValue) SetTo(target **ListMetricDescriptorsResponse) {
	if *target == nil {
		*target = new(ListMetricDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMetricDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMetricDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListMetricDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListMetricDescriptorsResponse_FieldSubPathValue) CompareWith(source *ListMetricDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMetricDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListMetricDescriptorsResponse))
}

// ListMetricDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMetricDescriptorsResponse according to their type
// Present only for array (repeated) types.
type ListMetricDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMetricDescriptorsResponse_FieldPath
	ContainsValue(*ListMetricDescriptorsResponse) bool
}

// ParseListMetricDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListMetricDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMetricDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMetricDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseListMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListMetricDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	ListMetricDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMetricDescriptorsResponse_FieldPathArrayItemValue = (*ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMetricDescriptorsResponse as interface{}
func (fpaiv *ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMetricDescriptorsItemValue() (*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaiv.value.(*metric_descriptor.MetricDescriptor)
	return res, ok
}

func (fpaiv *ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListMetricDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMetricDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMetricDescriptorsResponse'
func (fpaiv *ListMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMetricDescriptorsResponse) bool {
	slice := fpaiv.ListMetricDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListMetricDescriptorsResponse_FieldSubPathArrayItemValue struct {
	ListMetricDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListMetricDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListMetricDescriptorsResponse_FieldSubPathArrayItemValue) AsMetricDescriptorsPathItemValue() (metric_descriptor.MetricDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMetricDescriptorsResponse'
func (fpaivs *ListMetricDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListMetricDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMetricDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// ListMetricDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for ListMetricDescriptorsResponse fields according to their type
type ListMetricDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMetricDescriptorsResponse_FieldPath
}

func ParseListMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMetricDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMetricDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMetricDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseListMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListMetricDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	ListMetricDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ ListMetricDescriptorsResponse_FieldPathArrayOfValues = (*ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		for _, v := range fpaov.values.([][]*metric_descriptor.MetricDescriptor) {
			values = append(values, v)
		}
	case ListMetricDescriptorsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*metric_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMetricDescriptorsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*metric_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMetricDescriptorsArrayOfValues() ([][]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaov.values.([][]*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpaov *ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*metric_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*metric_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.PagerCursor)
	return res, ok
}

type ListMetricDescriptorsResponse_FieldSubPathArrayOfValues struct {
	ListMetricDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListMetricDescriptorsResponse_FieldPathArrayOfValues = (*ListMetricDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListMetricDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListMetricDescriptorsResponse_FieldSubPathArrayOfValues) AsMetricDescriptorsPathArrayOfValues() (metric_descriptor.MetricDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(metric_descriptor.MetricDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetMetricDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetMetricDescriptorRequest_FieldPathSelector
	Get(source *GetMetricDescriptorRequest) []interface{}
	GetSingle(source *GetMetricDescriptorRequest) (interface{}, bool)
	ClearValue(item *GetMetricDescriptorRequest)

	// Those methods build corresponding GetMetricDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetMetricDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetMetricDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetMetricDescriptorRequest_FieldPathArrayItemValue
}

type GetMetricDescriptorRequest_FieldPathSelector int32

const (
	GetMetricDescriptorRequest_FieldPathSelectorName      GetMetricDescriptorRequest_FieldPathSelector = 0
	GetMetricDescriptorRequest_FieldPathSelectorFieldMask GetMetricDescriptorRequest_FieldPathSelector = 1
	GetMetricDescriptorRequest_FieldPathSelectorView      GetMetricDescriptorRequest_FieldPathSelector = 2
)

func (s GetMetricDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		return "name"
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", s))
	}
}

func BuildGetMetricDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (GetMetricDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetMetricDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetMetricDescriptorRequest_FieldTerminalPath{selector: GetMetricDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetMetricDescriptorRequest_FieldTerminalPath{selector: GetMetricDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetMetricDescriptorRequest_FieldTerminalPath{selector: GetMetricDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetMetricDescriptorRequest", fp)
}

func ParseGetMetricDescriptorRequest_FieldPath(rawField string) (GetMetricDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetMetricDescriptorRequest_FieldPath(fp)
}

func MustParseGetMetricDescriptorRequest_FieldPath(rawField string) GetMetricDescriptorRequest_FieldPath {
	fp, err := ParseGetMetricDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetMetricDescriptorRequest_FieldTerminalPath struct {
	selector GetMetricDescriptorRequest_FieldPathSelector
}

var _ GetMetricDescriptorRequest_FieldPath = (*GetMetricDescriptorRequest_FieldTerminalPath)(nil)

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) Selector() GetMetricDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetMetricDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetMetricDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetMetricDescriptorRequest
func (fp *GetMetricDescriptorRequest_FieldTerminalPath) Get(source *GetMetricDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetMetricDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetMetricDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetMetricDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source GetMetricDescriptorRequest
func (fp *GetMetricDescriptorRequest_FieldTerminalPath) GetSingle(source *GetMetricDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetMetricDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		return (*metric_descriptor.Reference)(nil)
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) ClearValue(item *GetMetricDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case GetMetricDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetMetricDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetMetricDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetMetricDescriptorRequest_FieldPathSelectorName ||
		fp.selector == GetMetricDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetMetricDescriptorRequest_FieldPathSelectorView
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) GetMetricDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		return &GetMetricDescriptorRequest_FieldTerminalPathValue{GetMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Reference)}
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetMetricDescriptorRequest_FieldTerminalPathValue{GetMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		return &GetMetricDescriptorRequest_FieldTerminalPathValue{GetMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues{GetMetricDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		return &GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues{GetMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.Reference)}
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues{GetMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		return &GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues{GetMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetMetricDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetMetricDescriptorRequest_FieldPathValue allows storing values for GetMetricDescriptorRequest fields according to their type
type GetMetricDescriptorRequest_FieldPathValue interface {
	GetMetricDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetMetricDescriptorRequest)
	CompareWith(*GetMetricDescriptorRequest) (cmp int, comparable bool)
}

func ParseGetMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) (GetMetricDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseGetMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMetricDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetMetricDescriptorRequest_FieldPathValue), nil
}

func MustParseGetMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) GetMetricDescriptorRequest_FieldPathValue {
	fpv, err := ParseGetMetricDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetMetricDescriptorRequest_FieldTerminalPathValue struct {
	GetMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetMetricDescriptorRequest_FieldPathValue = (*GetMetricDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetMetricDescriptorRequest' as interface{}
func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*metric_descriptor.Reference, bool) {
	res, ok := fpv.value.(*metric_descriptor.Reference)
	return res, ok
}
func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetMetricDescriptorRequest
func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) SetTo(target **GetMetricDescriptorRequest) {
	if *target == nil {
		*target = new(GetMetricDescriptorRequest)
	}
	switch fpv.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*metric_descriptor.Reference)
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetMetricDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetMetricDescriptorRequest_FieldTerminalPathValue' with the value under path in 'GetMetricDescriptorRequest'.
func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) CompareWith(source *GetMetricDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*metric_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetMetricDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetMetricDescriptorRequest))
}

// GetMetricDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetMetricDescriptorRequest according to their type
// Present only for array (repeated) types.
type GetMetricDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetMetricDescriptorRequest_FieldPath
	ContainsValue(*GetMetricDescriptorRequest) bool
}

// ParseGetMetricDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetMetricDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMetricDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetMetricDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseGetMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetMetricDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetMetricDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	GetMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetMetricDescriptorRequest_FieldPathArrayItemValue = (*GetMetricDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetMetricDescriptorRequest as interface{}
func (fpaiv *GetMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetMetricDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetMetricDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetMetricDescriptorRequest'
func (fpaiv *GetMetricDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetMetricDescriptorRequest) bool {
	slice := fpaiv.GetMetricDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetMetricDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for GetMetricDescriptorRequest fields according to their type
type GetMetricDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetMetricDescriptorRequest_FieldPath
}

func ParseGetMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetMetricDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMetricDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetMetricDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseGetMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	GetMetricDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ GetMetricDescriptorRequest_FieldPathArrayOfValues = (*GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetMetricDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*metric_descriptor.Reference) {
			values = append(values, v)
		}
	case GetMetricDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	case GetMetricDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*metric_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.Reference)
	return res, ok
}
func (fpaov *GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpaov *GetMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateMetricDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateMetricDescriptorRequest_FieldPathSelector
	Get(source *CreateMetricDescriptorRequest) []interface{}
	GetSingle(source *CreateMetricDescriptorRequest) (interface{}, bool)
	ClearValue(item *CreateMetricDescriptorRequest)

	// Those methods build corresponding CreateMetricDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateMetricDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateMetricDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateMetricDescriptorRequest_FieldPathArrayItemValue
}

type CreateMetricDescriptorRequest_FieldPathSelector int32

const (
	CreateMetricDescriptorRequest_FieldPathSelectorParent           CreateMetricDescriptorRequest_FieldPathSelector = 0
	CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor CreateMetricDescriptorRequest_FieldPathSelector = 1
)

func (s CreateMetricDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		return "parent"
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return "metric_descriptor"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", s))
	}
}

func BuildCreateMetricDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateMetricDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateMetricDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateMetricDescriptorRequest_FieldTerminalPath{selector: CreateMetricDescriptorRequest_FieldPathSelectorParent}, nil
		case "metric_descriptor", "metricDescriptor", "metric-descriptor":
			return &CreateMetricDescriptorRequest_FieldTerminalPath{selector: CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor}, nil
		}
	} else {
		switch fp[0] {
		case "metric_descriptor", "metricDescriptor", "metric-descriptor":
			if subpath, err := metric_descriptor.BuildMetricDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateMetricDescriptorRequest_FieldSubPath{selector: CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateMetricDescriptorRequest", fp)
}

func ParseCreateMetricDescriptorRequest_FieldPath(rawField string) (CreateMetricDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateMetricDescriptorRequest_FieldPath(fp)
}

func MustParseCreateMetricDescriptorRequest_FieldPath(rawField string) CreateMetricDescriptorRequest_FieldPath {
	fp, err := ParseCreateMetricDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateMetricDescriptorRequest_FieldTerminalPath struct {
	selector CreateMetricDescriptorRequest_FieldPathSelector
}

var _ CreateMetricDescriptorRequest_FieldPath = (*CreateMetricDescriptorRequest_FieldTerminalPath)(nil)

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) Selector() CreateMetricDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateMetricDescriptorRequest
func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) Get(source *CreateMetricDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateMetricDescriptorRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
			if source.MetricDescriptor != nil {
				values = append(values, source.MetricDescriptor)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateMetricDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source CreateMetricDescriptorRequest
func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) GetSingle(source *CreateMetricDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		res := source.GetMetricDescriptor()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		return (*metric_descriptor.ParentReference)(nil)
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return (*metric_descriptor.MetricDescriptor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) ClearValue(item *CreateMetricDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case CreateMetricDescriptorRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
			item.MetricDescriptor = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateMetricDescriptorRequest_FieldPathSelectorParent
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) CreateMetricDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		return &CreateMetricDescriptorRequest_FieldTerminalPathValue{CreateMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.ParentReference)}
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return &CreateMetricDescriptorRequest_FieldTerminalPathValue{CreateMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMetricDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		return &CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.ParentReference)}
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return &CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateMetricDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateMetricDescriptorRequest_FieldSubPath struct {
	selector CreateMetricDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateMetricDescriptorRequest_FieldPath = (*CreateMetricDescriptorRequest_FieldSubPath)(nil)

func (fps *CreateMetricDescriptorRequest_FieldSubPath) Selector() CreateMetricDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateMetricDescriptorRequest_FieldSubPath) AsMetricDescriptorSubPath() (metric_descriptor.MetricDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(metric_descriptor.MetricDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateMetricDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateMetricDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateMetricDescriptorRequest
func (fps *CreateMetricDescriptorRequest_FieldSubPath) Get(source *CreateMetricDescriptorRequest) (values []interface{}) {
	if asMetricDescriptorFieldPath, ok := fps.AsMetricDescriptorSubPath(); ok {
		values = append(values, asMetricDescriptorFieldPath.Get(source.GetMetricDescriptor())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateMetricDescriptorRequest))
}

// GetSingle returns value of selected field from source CreateMetricDescriptorRequest
func (fps *CreateMetricDescriptorRequest_FieldSubPath) GetSingle(source *CreateMetricDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		if source.GetMetricDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetricDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fps.selector))
	}
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateMetricDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) ClearValue(item *CreateMetricDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
			fps.subPath.ClearValueRaw(item.MetricDescriptor)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateMetricDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) WithIValue(value interface{}) CreateMetricDescriptorRequest_FieldPathValue {
	return &CreateMetricDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateMetricDescriptorRequest_FieldPathArrayOfValues {
	return &CreateMetricDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateMetricDescriptorRequest_FieldPathArrayItemValue {
	return &CreateMetricDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateMetricDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateMetricDescriptorRequest_FieldPathValue allows storing values for CreateMetricDescriptorRequest fields according to their type
type CreateMetricDescriptorRequest_FieldPathValue interface {
	CreateMetricDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateMetricDescriptorRequest)
	CompareWith(*CreateMetricDescriptorRequest) (cmp int, comparable bool)
}

func ParseCreateMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) (CreateMetricDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseCreateMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMetricDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateMetricDescriptorRequest_FieldPathValue), nil
}

func MustParseCreateMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) CreateMetricDescriptorRequest_FieldPathValue {
	fpv, err := ParseCreateMetricDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateMetricDescriptorRequest_FieldTerminalPathValue struct {
	CreateMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateMetricDescriptorRequest_FieldPathValue = (*CreateMetricDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateMetricDescriptorRequest' as interface{}
func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) AsParentValue() (*metric_descriptor.ParentReference, bool) {
	res, ok := fpv.value.(*metric_descriptor.ParentReference)
	return res, ok
}
func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) AsMetricDescriptorValue() (*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor)
	return res, ok
}

// SetTo stores value for selected field for object CreateMetricDescriptorRequest
func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) SetTo(target **CreateMetricDescriptorRequest) {
	if *target == nil {
		*target = new(CreateMetricDescriptorRequest)
	}
	switch fpv.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*metric_descriptor.ParentReference)
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		(*target).MetricDescriptor = fpv.value.(*metric_descriptor.MetricDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateMetricDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateMetricDescriptorRequest_FieldTerminalPathValue' with the value under path in 'CreateMetricDescriptorRequest'.
func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) CompareWith(source *CreateMetricDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*metric_descriptor.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateMetricDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateMetricDescriptorRequest))
}

type CreateMetricDescriptorRequest_FieldSubPathValue struct {
	CreateMetricDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateMetricDescriptorRequest_FieldPathValue = (*CreateMetricDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *CreateMetricDescriptorRequest_FieldSubPathValue) AsMetricDescriptorPathValue() (metric_descriptor.MetricDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *CreateMetricDescriptorRequest_FieldSubPathValue) SetTo(target **CreateMetricDescriptorRequest) {
	if *target == nil {
		*target = new(CreateMetricDescriptorRequest)
	}
	switch fpvs.Selector() {
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue).SetTo(&(*target).MetricDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateMetricDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateMetricDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateMetricDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateMetricDescriptorRequest_FieldSubPathValue) CompareWith(source *CreateMetricDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue).CompareWith(source.GetMetricDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateMetricDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateMetricDescriptorRequest))
}

// CreateMetricDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateMetricDescriptorRequest according to their type
// Present only for array (repeated) types.
type CreateMetricDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateMetricDescriptorRequest_FieldPath
	ContainsValue(*CreateMetricDescriptorRequest) bool
}

// ParseCreateMetricDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateMetricDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMetricDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateMetricDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateMetricDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateMetricDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	CreateMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateMetricDescriptorRequest_FieldPathArrayItemValue = (*CreateMetricDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateMetricDescriptorRequest as interface{}
func (fpaiv *CreateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateMetricDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateMetricDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateMetricDescriptorRequest'
func (fpaiv *CreateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateMetricDescriptorRequest) bool {
	slice := fpaiv.CreateMetricDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateMetricDescriptorRequest_FieldSubPathArrayItemValue struct {
	CreateMetricDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateMetricDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateMetricDescriptorRequest_FieldSubPathArrayItemValue) AsMetricDescriptorPathItemValue() (metric_descriptor.MetricDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateMetricDescriptorRequest'
func (fpaivs *CreateMetricDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateMetricDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetMetricDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMetricDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// CreateMetricDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for CreateMetricDescriptorRequest fields according to their type
type CreateMetricDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateMetricDescriptorRequest_FieldPath
}

func ParseCreateMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateMetricDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMetricDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateMetricDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	CreateMetricDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ CreateMetricDescriptorRequest_FieldPathArrayOfValues = (*CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateMetricDescriptorRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*metric_descriptor.ParentReference) {
			values = append(values, v)
		}
	case CreateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*metric_descriptor.ParentReference, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.ParentReference)
	return res, ok
}
func (fpaov *CreateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsMetricDescriptorArrayOfValues() ([]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor)
	return res, ok
}

type CreateMetricDescriptorRequest_FieldSubPathArrayOfValues struct {
	CreateMetricDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateMetricDescriptorRequest_FieldPathArrayOfValues = (*CreateMetricDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateMetricDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateMetricDescriptorRequest_FieldSubPathArrayOfValues) AsMetricDescriptorPathArrayOfValues() (metric_descriptor.MetricDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(metric_descriptor.MetricDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteMetricDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteMetricDescriptorRequest_FieldPathSelector
	Get(source *DeleteMetricDescriptorRequest) []interface{}
	GetSingle(source *DeleteMetricDescriptorRequest) (interface{}, bool)
	ClearValue(item *DeleteMetricDescriptorRequest)

	// Those methods build corresponding DeleteMetricDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteMetricDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteMetricDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteMetricDescriptorRequest_FieldPathArrayItemValue
}

type DeleteMetricDescriptorRequest_FieldPathSelector int32

const (
	DeleteMetricDescriptorRequest_FieldPathSelectorName DeleteMetricDescriptorRequest_FieldPathSelector = 0
)

func (s DeleteMetricDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", s))
	}
}

func BuildDeleteMetricDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteMetricDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteMetricDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteMetricDescriptorRequest_FieldTerminalPath{selector: DeleteMetricDescriptorRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteMetricDescriptorRequest", fp)
}

func ParseDeleteMetricDescriptorRequest_FieldPath(rawField string) (DeleteMetricDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteMetricDescriptorRequest_FieldPath(fp)
}

func MustParseDeleteMetricDescriptorRequest_FieldPath(rawField string) DeleteMetricDescriptorRequest_FieldPath {
	fp, err := ParseDeleteMetricDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteMetricDescriptorRequest_FieldTerminalPath struct {
	selector DeleteMetricDescriptorRequest_FieldPathSelector
}

var _ DeleteMetricDescriptorRequest_FieldPath = (*DeleteMetricDescriptorRequest_FieldTerminalPath)(nil)

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) Selector() DeleteMetricDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteMetricDescriptorRequest
func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) Get(source *DeleteMetricDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteMetricDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteMetricDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteMetricDescriptorRequest
func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) GetSingle(source *DeleteMetricDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		return (*metric_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) ClearValue(item *DeleteMetricDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteMetricDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteMetricDescriptorRequest_FieldPathSelectorName
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteMetricDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		return &DeleteMetricDescriptorRequest_FieldTerminalPathValue{DeleteMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &DeleteMetricDescriptorRequest_FieldTerminalPathArrayOfValues{DeleteMetricDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		return &DeleteMetricDescriptorRequest_FieldTerminalPathArrayOfValues{DeleteMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteMetricDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteMetricDescriptorRequest_FieldPathValue allows storing values for DeleteMetricDescriptorRequest fields according to their type
type DeleteMetricDescriptorRequest_FieldPathValue interface {
	DeleteMetricDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteMetricDescriptorRequest)
	CompareWith(*DeleteMetricDescriptorRequest) (cmp int, comparable bool)
}

func ParseDeleteMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) (DeleteMetricDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseDeleteMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteMetricDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteMetricDescriptorRequest_FieldPathValue), nil
}

func MustParseDeleteMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) DeleteMetricDescriptorRequest_FieldPathValue {
	fpv, err := ParseDeleteMetricDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteMetricDescriptorRequest_FieldTerminalPathValue struct {
	DeleteMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteMetricDescriptorRequest_FieldPathValue = (*DeleteMetricDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteMetricDescriptorRequest' as interface{}
func (fpv *DeleteMetricDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteMetricDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*metric_descriptor.Reference, bool) {
	res, ok := fpv.value.(*metric_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteMetricDescriptorRequest
func (fpv *DeleteMetricDescriptorRequest_FieldTerminalPathValue) SetTo(target **DeleteMetricDescriptorRequest) {
	if *target == nil {
		*target = new(DeleteMetricDescriptorRequest)
	}
	switch fpv.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*metric_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteMetricDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteMetricDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteMetricDescriptorRequest_FieldTerminalPathValue' with the value under path in 'DeleteMetricDescriptorRequest'.
func (fpv *DeleteMetricDescriptorRequest_FieldTerminalPathValue) CompareWith(source *DeleteMetricDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*metric_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteMetricDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteMetricDescriptorRequest))
}

// DeleteMetricDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteMetricDescriptorRequest according to their type
// Present only for array (repeated) types.
type DeleteMetricDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteMetricDescriptorRequest_FieldPath
	ContainsValue(*DeleteMetricDescriptorRequest) bool
}

// ParseDeleteMetricDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteMetricDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteMetricDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteMetricDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteMetricDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteMetricDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	DeleteMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteMetricDescriptorRequest_FieldPathArrayItemValue = (*DeleteMetricDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteMetricDescriptorRequest as interface{}
func (fpaiv *DeleteMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteMetricDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteMetricDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteMetricDescriptorRequest'
func (fpaiv *DeleteMetricDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteMetricDescriptorRequest) bool {
	slice := fpaiv.DeleteMetricDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteMetricDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for DeleteMetricDescriptorRequest fields according to their type
type DeleteMetricDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteMetricDescriptorRequest_FieldPath
}

func ParseDeleteMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteMetricDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteMetricDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteMetricDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteMetricDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	DeleteMetricDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteMetricDescriptorRequest_FieldPathArrayOfValues = (*DeleteMetricDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteMetricDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteMetricDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*metric_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*metric_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.Reference)
	return res, ok
}
