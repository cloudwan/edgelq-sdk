// Code generated by protoc-gen-goten-client
// API: MetricDescriptorService
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/metric_descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized              bool
	metricDescriptorServiceDescriptor   *MetricDescriptorServiceDescriptor
	batchGetMetricDescriptorsDescriptor *BatchGetMetricDescriptorsDescriptor
	watchMetricDescriptorDescriptor     *WatchMetricDescriptorDescriptor
	watchMetricDescriptorsDescriptor    *WatchMetricDescriptorsDescriptor
	updateMetricDescriptorDescriptor    *UpdateMetricDescriptorDescriptor
	getMetricDescriptorDescriptor       *GetMetricDescriptorDescriptor
	createMetricDescriptorDescriptor    *CreateMetricDescriptorDescriptor
	deleteMetricDescriptorDescriptor    *DeleteMetricDescriptorDescriptor
	listMetricDescriptorsDescriptor     *ListMetricDescriptorsDescriptor
)

type BatchGetMetricDescriptorsDescriptor struct{}

type BatchGetMetricDescriptorsDescriptorClientMsgHandle struct{}

type BatchGetMetricDescriptorsDescriptorServerMsgHandle struct{}

func (d *BatchGetMetricDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetMetricDescriptorsRequest{}
}

func (d *BatchGetMetricDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetMetricDescriptorsResponse{}
}

func (d *BatchGetMetricDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetMetricDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetMetricDescriptorsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetMethodName() string {
	return "BatchGetMetricDescriptors"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/BatchGetMetricDescriptors"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *BatchGetMetricDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *BatchGetMetricDescriptorsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *BatchGetMetricDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetMetricDescriptorsDescriptorClientMsgHandle{}
}

func (d *BatchGetMetricDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetMetricDescriptorsDescriptorServerMsgHandle{}
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetMetricDescriptorsRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetMetricDescriptorsRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(metric_descriptor.MetricDescriptorNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (metric_descriptor.MetricDescriptorNameList)(nil)
}

func (h *BatchGetMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetMetricDescriptorsRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetMetricDescriptorsResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetMetricDescriptorsResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetMetricDescriptors()
	list := make(metric_descriptor.MetricDescriptorNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetMetricDescriptorsResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetMetricDescriptorsDescriptor() *BatchGetMetricDescriptorsDescriptor {
	return batchGetMetricDescriptorsDescriptor
}

type WatchMetricDescriptorDescriptor struct{}

type WatchMetricDescriptorDescriptorClientMsgHandle struct{}

type WatchMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *WatchMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchMetricDescriptorRequest{}
}

func (d *WatchMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchMetricDescriptorResponse{}
}

func (d *WatchMetricDescriptorDescriptor) IsUnary() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchMetricDescriptorDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchMetricDescriptorDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchMetricDescriptorDescriptor) GetMethodName() string {
	return "WatchMetricDescriptor"
}

func (d *WatchMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/WatchMetricDescriptor"
}

func (d *WatchMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *WatchMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *WatchMetricDescriptorDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *WatchMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *WatchMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchMetricDescriptorResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *metric_descriptor.MetricDescriptorChange_Added_:
			return tResChange.Added.GetMetricDescriptor().GetName()
		case *metric_descriptor.MetricDescriptorChange_Modified_:
			return tResChange.Modified.GetName()
		case *metric_descriptor.MetricDescriptorChange_Removed_:
			return tResChange.Removed.GetName()
		case *metric_descriptor.MetricDescriptorChange_Current_:
			return tResChange.Current.GetMetricDescriptor().GetName()
		}
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchMetricDescriptorResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchMetricDescriptorResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchMetricDescriptorDescriptor() *WatchMetricDescriptorDescriptor {
	return watchMetricDescriptorDescriptor
}

type WatchMetricDescriptorsDescriptor struct{}

type WatchMetricDescriptorsDescriptorClientMsgHandle struct{}

type WatchMetricDescriptorsDescriptorServerMsgHandle struct{}

func (d *WatchMetricDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchMetricDescriptorsRequest{}
}

func (d *WatchMetricDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchMetricDescriptorsResponse{}
}

func (d *WatchMetricDescriptorsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchMetricDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchMetricDescriptorsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchMetricDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchMetricDescriptorsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchMetricDescriptorsDescriptor) GetMethodName() string {
	return "WatchMetricDescriptors"
}

func (d *WatchMetricDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/WatchMetricDescriptors"
}

func (d *WatchMetricDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchMetricDescriptorsDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *WatchMetricDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchMetricDescriptorsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchMetricDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *WatchMetricDescriptorsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *WatchMetricDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorsDescriptorClientMsgHandle{}
}

func (d *WatchMetricDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMetricDescriptorsDescriptorServerMsgHandle{}
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchMetricDescriptorsRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchMetricDescriptorsRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchMetricDescriptorsRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*metric_descriptor.ParentName)(nil)
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchMetricDescriptorsResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchMetricDescriptorsResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetMetricDescriptorChanges()
	list := make(metric_descriptor.MetricDescriptorNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *metric_descriptor.MetricDescriptorChange_Added_:
			list = append(list, tResChange.Added.GetMetricDescriptor().GetName())
		case *metric_descriptor.MetricDescriptorChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *metric_descriptor.MetricDescriptorChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *metric_descriptor.MetricDescriptorChange_Current_:
			list = append(list, tResChange.Current.GetMetricDescriptor().GetName())
		}
	}
	return list
}

func (h *WatchMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchMetricDescriptorsResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchMetricDescriptorsDescriptor() *WatchMetricDescriptorsDescriptor {
	return watchMetricDescriptorsDescriptor
}

type UpdateMetricDescriptorDescriptor struct{}

type UpdateMetricDescriptorDescriptorClientMsgHandle struct{}

type UpdateMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *UpdateMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateMetricDescriptorRequest{}
}

func (d *UpdateMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &metric_descriptor.MetricDescriptor{}
}

func (d *UpdateMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateMetricDescriptorDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateMetricDescriptorDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateMetricDescriptorDescriptor) GetMethodName() string {
	return "UpdateMetricDescriptor"
}

func (d *UpdateMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/UpdateMetricDescriptor"
}

func (d *UpdateMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *UpdateMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *UpdateMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *UpdateMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *UpdateMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *UpdateMetricDescriptorDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *UpdateMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *UpdateMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetMetricDescriptor().GetName()
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*metric_descriptor.MetricDescriptor) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*metric_descriptor.MetricDescriptor) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*metric_descriptor.MetricDescriptor) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateMetricDescriptorDescriptor() *UpdateMetricDescriptorDescriptor {
	return updateMetricDescriptorDescriptor
}

type GetMetricDescriptorDescriptor struct{}

type GetMetricDescriptorDescriptorClientMsgHandle struct{}

type GetMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *GetMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetMetricDescriptorRequest{}
}

func (d *GetMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &metric_descriptor.MetricDescriptor{}
}

func (d *GetMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *GetMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetMetricDescriptorDescriptor) GetVerb() string {
	return "get"
}

func (d *GetMetricDescriptorDescriptor) GetMethodName() string {
	return "GetMetricDescriptor"
}

func (d *GetMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/GetMetricDescriptor"
}

func (d *GetMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *GetMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *GetMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *GetMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *GetMetricDescriptorDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *GetMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *GetMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*metric_descriptor.MetricDescriptor) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*metric_descriptor.MetricDescriptor) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*metric_descriptor.MetricDescriptor) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetMetricDescriptorDescriptor() *GetMetricDescriptorDescriptor {
	return getMetricDescriptorDescriptor
}

type CreateMetricDescriptorDescriptor struct{}

type CreateMetricDescriptorDescriptorClientMsgHandle struct{}

type CreateMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *CreateMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateMetricDescriptorRequest{}
}

func (d *CreateMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &metric_descriptor.MetricDescriptor{}
}

func (d *CreateMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateMetricDescriptorDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateMetricDescriptorDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateMetricDescriptorDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateMetricDescriptorDescriptor) GetMethodName() string {
	return "CreateMetricDescriptor"
}

func (d *CreateMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/CreateMetricDescriptor"
}

func (d *CreateMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *CreateMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *CreateMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreateMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *CreateMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *CreateMetricDescriptorDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *CreateMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *CreateMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetMetricDescriptor().GetName()
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*metric_descriptor.ParentName)(nil)
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*metric_descriptor.MetricDescriptor) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*metric_descriptor.MetricDescriptor) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*metric_descriptor.MetricDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*metric_descriptor.MetricDescriptor) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateMetricDescriptorDescriptor() *CreateMetricDescriptorDescriptor {
	return createMetricDescriptorDescriptor
}

type DeleteMetricDescriptorDescriptor struct{}

type DeleteMetricDescriptorDescriptorClientMsgHandle struct{}

type DeleteMetricDescriptorDescriptorServerMsgHandle struct{}

func (d *DeleteMetricDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteMetricDescriptorRequest{}
}

func (d *DeleteMetricDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteMetricDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteMetricDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteMetricDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteMetricDescriptorDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteMetricDescriptorDescriptor) GetMethodName() string {
	return "DeleteMetricDescriptor"
}

func (d *DeleteMetricDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/DeleteMetricDescriptor"
}

func (d *DeleteMetricDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *DeleteMetricDescriptorDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *DeleteMetricDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeleteMetricDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *DeleteMetricDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *DeleteMetricDescriptorDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *DeleteMetricDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteMetricDescriptorDescriptorClientMsgHandle{}
}

func (d *DeleteMetricDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteMetricDescriptorDescriptorServerMsgHandle{}
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteMetricDescriptorRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*metric_descriptor.Name)(nil)
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteMetricDescriptorRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteMetricDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteMetricDescriptorRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteMetricDescriptorDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteMetricDescriptorDescriptor() *DeleteMetricDescriptorDescriptor {
	return deleteMetricDescriptorDescriptor
}

type ListMetricDescriptorsDescriptor struct{}

type ListMetricDescriptorsDescriptorClientMsgHandle struct{}

type ListMetricDescriptorsDescriptorServerMsgHandle struct{}

func (d *ListMetricDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMetricDescriptorsRequest{}
}

func (d *ListMetricDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMetricDescriptorsResponse{}
}

func (d *ListMetricDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMetricDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMetricDescriptorsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListMetricDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMetricDescriptorsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListMetricDescriptorsDescriptor) GetMethodName() string {
	return "ListMetricDescriptors"
}

func (d *ListMetricDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService/ListMetricDescriptors"
}

func (d *ListMetricDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *ListMetricDescriptorsDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *ListMetricDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListMetricDescriptorsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *ListMetricDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return metricDescriptorServiceDescriptor
}

func (d *ListMetricDescriptorsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return metric_descriptor.GetDescriptor()
}

func (d *ListMetricDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMetricDescriptorsDescriptorClientMsgHandle{}
}

func (d *ListMetricDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMetricDescriptorsDescriptorServerMsgHandle{}
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMetricDescriptorsRequest) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMetricDescriptorsRequest) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListMetricDescriptorsRequest) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListMetricDescriptorsResponse) *metric_descriptor.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListMetricDescriptorsResponse) []*metric_descriptor.Name
	})
	if ok {
		return metric_descriptor.MetricDescriptorNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetMetricDescriptors()
	list := make(metric_descriptor.MetricDescriptorNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListMetricDescriptorsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMetricDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListMetricDescriptorsResponse) *metric_descriptor.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListMetricDescriptorsDescriptor() *ListMetricDescriptorsDescriptor {
	return listMetricDescriptorsDescriptor
}

type MetricDescriptorServiceDescriptor struct{}

func (d *MetricDescriptorServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		batchGetMetricDescriptorsDescriptor,
		watchMetricDescriptorDescriptor,
		watchMetricDescriptorsDescriptor,
		updateMetricDescriptorDescriptor,
		getMetricDescriptorDescriptor,
		createMetricDescriptorDescriptor,
		deleteMetricDescriptorDescriptor,
		listMetricDescriptorsDescriptor,
	}
}

func (d *MetricDescriptorServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v3.MetricDescriptorService"
}

func (d *MetricDescriptorServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *MetricDescriptorServiceDescriptor) GetApiName() string {
	return "MetricDescriptorService"
}

func (d *MetricDescriptorServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *MetricDescriptorServiceDescriptor) GetServiceVersion() string {
	return "v3"
}

func GetMetricDescriptorServiceDescriptor() *MetricDescriptorServiceDescriptor {
	return metricDescriptorServiceDescriptor
}

func initDescriptors() {
	metricDescriptorServiceDescriptor = &MetricDescriptorServiceDescriptor{}
	batchGetMetricDescriptorsDescriptor = &BatchGetMetricDescriptorsDescriptor{}
	watchMetricDescriptorDescriptor = &WatchMetricDescriptorDescriptor{}
	watchMetricDescriptorsDescriptor = &WatchMetricDescriptorsDescriptor{}
	updateMetricDescriptorDescriptor = &UpdateMetricDescriptorDescriptor{}
	getMetricDescriptorDescriptor = &GetMetricDescriptorDescriptor{}
	createMetricDescriptorDescriptor = &CreateMetricDescriptorDescriptor{}
	deleteMetricDescriptorDescriptor = &DeleteMetricDescriptorDescriptor{}
	listMetricDescriptorsDescriptor = &ListMetricDescriptorsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(metricDescriptorServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetMetricDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchMetricDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteMetricDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMetricDescriptorsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
