// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/metric_descriptor_service.proto
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/metric_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetMetricDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetMetricDescriptorsRequest_FieldPathSelector
	Get(source *BatchGetMetricDescriptorsRequest) []interface{}
	GetSingle(source *BatchGetMetricDescriptorsRequest) (interface{}, bool)
	ClearValue(item *BatchGetMetricDescriptorsRequest)

	// Those methods build corresponding BatchGetMetricDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetMetricDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue
}

type BatchGetMetricDescriptorsRequest_FieldPathSelector int32

const (
	BatchGetMetricDescriptorsRequest_FieldPathSelectorNames     BatchGetMetricDescriptorsRequest_FieldPathSelector = 0
	BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask BatchGetMetricDescriptorsRequest_FieldPathSelector = 1
	BatchGetMetricDescriptorsRequest_FieldPathSelectorView      BatchGetMetricDescriptorsRequest_FieldPathSelector = 2
)

func (s BatchGetMetricDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", s))
	}
}

func BuildBatchGetMetricDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetMetricDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetMetricDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetMetricDescriptorsRequest", fp)
}

func ParseBatchGetMetricDescriptorsRequest_FieldPath(rawField string) (BatchGetMetricDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetMetricDescriptorsRequest_FieldPath(fp)
}

func MustParseBatchGetMetricDescriptorsRequest_FieldPath(rawField string) BatchGetMetricDescriptorsRequest_FieldPath {
	fp, err := ParseBatchGetMetricDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetMetricDescriptorsRequest_FieldTerminalPath struct {
	selector BatchGetMetricDescriptorsRequest_FieldPathSelector
}

var _ BatchGetMetricDescriptorsRequest_FieldPath = (*BatchGetMetricDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) Selector() BatchGetMetricDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetMetricDescriptorsRequest
func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) Get(source *BatchGetMetricDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetMetricDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetMetricDescriptorsRequest
func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) GetSingle(source *BatchGetMetricDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetMetricDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		return ([]*metric_descriptor.Reference)(nil)
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) ClearValue(item *BatchGetMetricDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetMetricDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetMetricDescriptorsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetMetricDescriptorsRequest_FieldPathSelectorView
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetMetricDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathValue{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.([]*metric_descriptor.Reference)}
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathValue{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathValue{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([][]*metric_descriptor.Reference)}
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue{BatchGetMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetMetricDescriptorsRequest_FieldPathValue allows storing values for BatchGetMetricDescriptorsRequest fields according to their type
type BatchGetMetricDescriptorsRequest_FieldPathValue interface {
	BatchGetMetricDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetMetricDescriptorsRequest)
	CompareWith(*BatchGetMetricDescriptorsRequest) (cmp int, comparable bool)
}

func ParseBatchGetMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetMetricDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMetricDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetMetricDescriptorsRequest_FieldPathValue), nil
}

func MustParseBatchGetMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr string) BatchGetMetricDescriptorsRequest_FieldPathValue {
	fpv, err := ParseBatchGetMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetMetricDescriptorsRequest_FieldTerminalPathValue struct {
	BatchGetMetricDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetMetricDescriptorsRequest_FieldPathValue = (*BatchGetMetricDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetMetricDescriptorsRequest' as interface{}
func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) AsNamesValue() ([]*metric_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*metric_descriptor.Reference)
	return res, ok
}
func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetMetricDescriptorsRequest
func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) SetTo(target **BatchGetMetricDescriptorsRequest) {
	if *target == nil {
		*target = new(BatchGetMetricDescriptorsRequest)
	}
	switch fpv.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*metric_descriptor.Reference)
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMetricDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetMetricDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetMetricDescriptorsRequest'.
func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetMetricDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetMetricDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetMetricDescriptorsRequest))
}

// BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetMetricDescriptorsRequest according to their type
// Present only for array (repeated) types.
type BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetMetricDescriptorsRequest_FieldPath
	ContainsValue(*BatchGetMetricDescriptorsRequest) bool
}

// ParseBatchGetMetricDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMetricDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetMetricDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetMetricDescriptorsRequest_FieldPathArrayItemValue = (*BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetMetricDescriptorsRequest as interface{}
func (fpaiv *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*metric_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*metric_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetMetricDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetMetricDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMetricDescriptorsRequest'
func (fpaiv *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetMetricDescriptorsRequest) bool {
	slice := fpaiv.BatchGetMetricDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetMetricDescriptorsRequest fields according to their type
type BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetMetricDescriptorsRequest_FieldPath
}

func ParseBatchGetMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMetricDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetMetricDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetMetricDescriptorsRequest_FieldPathArrayOfValues = (*BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*metric_descriptor.Reference) {
			values = append(values, v)
		}
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	case BatchGetMetricDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*metric_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*metric_descriptor.Reference)
	return res, ok
}
func (fpaov *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpaov *BatchGetMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetMetricDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetMetricDescriptorsResponse_FieldPathSelector
	Get(source *BatchGetMetricDescriptorsResponse) []interface{}
	GetSingle(source *BatchGetMetricDescriptorsResponse) (interface{}, bool)
	ClearValue(item *BatchGetMetricDescriptorsResponse)

	// Those methods build corresponding BatchGetMetricDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetMetricDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue
}

type BatchGetMetricDescriptorsResponse_FieldPathSelector int32

const (
	BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors BatchGetMetricDescriptorsResponse_FieldPathSelector = 0
	BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing           BatchGetMetricDescriptorsResponse_FieldPathSelector = 1
)

func (s BatchGetMetricDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return "metric_descriptors"
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", s))
	}
}

func BuildBatchGetMetricDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetMetricDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetMetricDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metric_descriptors", "metricDescriptors", "metric-descriptors":
			return &BatchGetMetricDescriptorsResponse_FieldTerminalPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors}, nil
		case "missing":
			return &BatchGetMetricDescriptorsResponse_FieldTerminalPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "metric_descriptors", "metricDescriptors", "metric-descriptors":
			if subpath, err := metric_descriptor.BuildMetricDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetMetricDescriptorsResponse_FieldSubPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetMetricDescriptorsResponse", fp)
}

func ParseBatchGetMetricDescriptorsResponse_FieldPath(rawField string) (BatchGetMetricDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetMetricDescriptorsResponse_FieldPath(fp)
}

func MustParseBatchGetMetricDescriptorsResponse_FieldPath(rawField string) BatchGetMetricDescriptorsResponse_FieldPath {
	fp, err := ParseBatchGetMetricDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetMetricDescriptorsResponse_FieldTerminalPath struct {
	selector BatchGetMetricDescriptorsResponse_FieldPathSelector
}

var _ BatchGetMetricDescriptorsResponse_FieldPath = (*BatchGetMetricDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) Selector() BatchGetMetricDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetMetricDescriptorsResponse
func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) Get(source *BatchGetMetricDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
			for _, value := range source.GetMetricDescriptors() {
				values = append(values, value)
			}
		case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetMetricDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetMetricDescriptorsResponse
func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) GetSingle(source *BatchGetMetricDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		res := source.GetMetricDescriptors()
		return res, res != nil
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetMetricDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return ([]*metric_descriptor.MetricDescriptor)(nil)
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		return ([]*metric_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) ClearValue(item *BatchGetMetricDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
			item.MetricDescriptors = nil
		case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetMetricDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetMetricDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return &BatchGetMetricDescriptorsResponse_FieldTerminalPathValue{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*metric_descriptor.MetricDescriptor)}
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMetricDescriptorsResponse_FieldTerminalPathValue{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*metric_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return &BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*metric_descriptor.MetricDescriptor)}
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*metric_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return &BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor)}
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMetricDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetMetricDescriptorsResponse_FieldSubPath struct {
	selector BatchGetMetricDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetMetricDescriptorsResponse_FieldPath = (*BatchGetMetricDescriptorsResponse_FieldSubPath)(nil)

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) Selector() BatchGetMetricDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) AsMetricDescriptorsSubPath() (metric_descriptor.MetricDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(metric_descriptor.MetricDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetMetricDescriptorsResponse
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) Get(source *BatchGetMetricDescriptorsResponse) (values []interface{}) {
	if asMetricDescriptorFieldPath, ok := fps.AsMetricDescriptorsSubPath(); ok {
		for _, item := range source.GetMetricDescriptors() {
			values = append(values, asMetricDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetMetricDescriptorsResponse))
}

// GetSingle returns value of selected field from source BatchGetMetricDescriptorsResponse
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) GetSingle(source *BatchGetMetricDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		if len(source.GetMetricDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetricDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetMetricDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) ClearValue(item *BatchGetMetricDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
			for _, subItem := range item.MetricDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetMetricDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetMetricDescriptorsResponse_FieldPathValue {
	return &BatchGetMetricDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues {
	return &BatchGetMetricDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue {
	return &BatchGetMetricDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetMetricDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetMetricDescriptorsResponse_FieldPathValue allows storing values for BatchGetMetricDescriptorsResponse fields according to their type
type BatchGetMetricDescriptorsResponse_FieldPathValue interface {
	BatchGetMetricDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetMetricDescriptorsResponse)
	CompareWith(*BatchGetMetricDescriptorsResponse) (cmp int, comparable bool)
}

func ParseBatchGetMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetMetricDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMetricDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetMetricDescriptorsResponse_FieldPathValue), nil
}

func MustParseBatchGetMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr string) BatchGetMetricDescriptorsResponse_FieldPathValue {
	fpv, err := ParseBatchGetMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetMetricDescriptorsResponse_FieldTerminalPathValue struct {
	BatchGetMetricDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetMetricDescriptorsResponse_FieldPathValue = (*BatchGetMetricDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetMetricDescriptorsResponse' as interface{}
func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) AsMetricDescriptorsValue() ([]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpv.value.([]*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) AsMissingValue() ([]*metric_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*metric_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetMetricDescriptorsResponse
func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) SetTo(target **BatchGetMetricDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetMetricDescriptorsResponse)
	}
	switch fpv.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		(*target).MetricDescriptors = fpv.value.([]*metric_descriptor.MetricDescriptor)
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*metric_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMetricDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetMetricDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetMetricDescriptorsResponse'.
func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetMetricDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return 0, false
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetMetricDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetMetricDescriptorsResponse))
}

type BatchGetMetricDescriptorsResponse_FieldSubPathValue struct {
	BatchGetMetricDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetMetricDescriptorsResponse_FieldPathValue = (*BatchGetMetricDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetMetricDescriptorsResponse_FieldSubPathValue) AsMetricDescriptorsPathValue() (metric_descriptor.MetricDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetMetricDescriptorsResponse_FieldSubPathValue) SetTo(target **BatchGetMetricDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetMetricDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetMetricDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMetricDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetMetricDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetMetricDescriptorsResponse_FieldSubPathValue) CompareWith(source *BatchGetMetricDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetMetricDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetMetricDescriptorsResponse))
}

// BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetMetricDescriptorsResponse according to their type
// Present only for array (repeated) types.
type BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetMetricDescriptorsResponse_FieldPath
	ContainsValue(*BatchGetMetricDescriptorsResponse) bool
}

// ParseBatchGetMetricDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMetricDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetMetricDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetMetricDescriptorsResponse_FieldPathArrayItemValue = (*BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetMetricDescriptorsResponse as interface{}
func (fpaiv *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMetricDescriptorsItemValue() (*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaiv.value.(*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpaiv *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*metric_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*metric_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetMetricDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetMetricDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMetricDescriptorsResponse'
func (fpaiv *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetMetricDescriptorsResponse) bool {
	slice := fpaiv.BatchGetMetricDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetMetricDescriptorsResponse_FieldSubPathArrayItemValue struct {
	BatchGetMetricDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetMetricDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetMetricDescriptorsResponse_FieldSubPathArrayItemValue) AsMetricDescriptorsPathItemValue() (metric_descriptor.MetricDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMetricDescriptorsResponse'
func (fpaivs *BatchGetMetricDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetMetricDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMetricDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetMetricDescriptorsResponse fields according to their type
type BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetMetricDescriptorsResponse_FieldPath
}

func ParseBatchGetMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMetricDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetMetricDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors:
		for _, v := range fpaov.values.([][]*metric_descriptor.MetricDescriptor) {
			values = append(values, v)
		}
	case BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*metric_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMetricDescriptorsArrayOfValues() ([][]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaov.values.([][]*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpaov *BatchGetMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*metric_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*metric_descriptor.Reference)
	return res, ok
}

type BatchGetMetricDescriptorsResponse_FieldSubPathArrayOfValues struct {
	BatchGetMetricDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetMetricDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetMetricDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetMetricDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetMetricDescriptorsResponse_FieldSubPathArrayOfValues) AsMetricDescriptorsPathArrayOfValues() (metric_descriptor.MetricDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(metric_descriptor.MetricDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMetricDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMetricDescriptorRequest_FieldPathSelector
	Get(source *WatchMetricDescriptorRequest) []interface{}
	GetSingle(source *WatchMetricDescriptorRequest) (interface{}, bool)
	ClearValue(item *WatchMetricDescriptorRequest)

	// Those methods build corresponding WatchMetricDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMetricDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMetricDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMetricDescriptorRequest_FieldPathArrayItemValue
}

type WatchMetricDescriptorRequest_FieldPathSelector int32

const (
	WatchMetricDescriptorRequest_FieldPathSelectorName      WatchMetricDescriptorRequest_FieldPathSelector = 0
	WatchMetricDescriptorRequest_FieldPathSelectorFieldMask WatchMetricDescriptorRequest_FieldPathSelector = 1
	WatchMetricDescriptorRequest_FieldPathSelectorView      WatchMetricDescriptorRequest_FieldPathSelector = 2
)

func (s WatchMetricDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		return "name"
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", s))
	}
}

func BuildWatchMetricDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchMetricDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMetricDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchMetricDescriptorRequest_FieldTerminalPath{selector: WatchMetricDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchMetricDescriptorRequest_FieldTerminalPath{selector: WatchMetricDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchMetricDescriptorRequest_FieldTerminalPath{selector: WatchMetricDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMetricDescriptorRequest", fp)
}

func ParseWatchMetricDescriptorRequest_FieldPath(rawField string) (WatchMetricDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMetricDescriptorRequest_FieldPath(fp)
}

func MustParseWatchMetricDescriptorRequest_FieldPath(rawField string) WatchMetricDescriptorRequest_FieldPath {
	fp, err := ParseWatchMetricDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMetricDescriptorRequest_FieldTerminalPath struct {
	selector WatchMetricDescriptorRequest_FieldPathSelector
}

var _ WatchMetricDescriptorRequest_FieldPath = (*WatchMetricDescriptorRequest_FieldTerminalPath)(nil)

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) Selector() WatchMetricDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMetricDescriptorRequest
func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) Get(source *WatchMetricDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMetricDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchMetricDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMetricDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source WatchMetricDescriptorRequest
func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) GetSingle(source *WatchMetricDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		return (*metric_descriptor.Reference)(nil)
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) ClearValue(item *WatchMetricDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case WatchMetricDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchMetricDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMetricDescriptorRequest_FieldPathSelectorName ||
		fp.selector == WatchMetricDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchMetricDescriptorRequest_FieldPathSelectorView
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) WatchMetricDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		return &WatchMetricDescriptorRequest_FieldTerminalPathValue{WatchMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Reference)}
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchMetricDescriptorRequest_FieldTerminalPathValue{WatchMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		return &WatchMetricDescriptorRequest_FieldTerminalPathValue{WatchMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		return &WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.Reference)}
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		return &WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMetricDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMetricDescriptorRequest_FieldPathValue allows storing values for WatchMetricDescriptorRequest fields according to their type
type WatchMetricDescriptorRequest_FieldPathValue interface {
	WatchMetricDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMetricDescriptorRequest)
	CompareWith(*WatchMetricDescriptorRequest) (cmp int, comparable bool)
}

func ParseWatchMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) (WatchMetricDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseWatchMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMetricDescriptorRequest_FieldPathValue), nil
}

func MustParseWatchMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) WatchMetricDescriptorRequest_FieldPathValue {
	fpv, err := ParseWatchMetricDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMetricDescriptorRequest_FieldTerminalPathValue struct {
	WatchMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorRequest_FieldPathValue = (*WatchMetricDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMetricDescriptorRequest' as interface{}
func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*metric_descriptor.Reference, bool) {
	res, ok := fpv.value.(*metric_descriptor.Reference)
	return res, ok
}
func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchMetricDescriptorRequest
func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) SetTo(target **WatchMetricDescriptorRequest) {
	if *target == nil {
		*target = new(WatchMetricDescriptorRequest)
	}
	switch fpv.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*metric_descriptor.Reference)
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMetricDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMetricDescriptorRequest_FieldTerminalPathValue' with the value under path in 'WatchMetricDescriptorRequest'.
func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) CompareWith(source *WatchMetricDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*metric_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMetricDescriptorRequest))
}

// WatchMetricDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMetricDescriptorRequest according to their type
// Present only for array (repeated) types.
type WatchMetricDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMetricDescriptorRequest_FieldPath
	ContainsValue(*WatchMetricDescriptorRequest) bool
}

// ParseWatchMetricDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMetricDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMetricDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchMetricDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMetricDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	WatchMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorRequest_FieldPathArrayItemValue = (*WatchMetricDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMetricDescriptorRequest as interface{}
func (fpaiv *WatchMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMetricDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMetricDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMetricDescriptorRequest'
func (fpaiv *WatchMetricDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMetricDescriptorRequest) bool {
	slice := fpaiv.WatchMetricDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMetricDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for WatchMetricDescriptorRequest fields according to their type
type WatchMetricDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMetricDescriptorRequest_FieldPath
}

func ParseWatchMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMetricDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMetricDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	WatchMetricDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ WatchMetricDescriptorRequest_FieldPathArrayOfValues = (*WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMetricDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*metric_descriptor.Reference) {
			values = append(values, v)
		}
	case WatchMetricDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchMetricDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*metric_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.Reference)
	return res, ok
}
func (fpaov *WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMetricDescriptorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMetricDescriptorResponse_FieldPathSelector
	Get(source *WatchMetricDescriptorResponse) []interface{}
	GetSingle(source *WatchMetricDescriptorResponse) (interface{}, bool)
	ClearValue(item *WatchMetricDescriptorResponse)

	// Those methods build corresponding WatchMetricDescriptorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMetricDescriptorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMetricDescriptorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMetricDescriptorResponse_FieldPathArrayItemValue
}

type WatchMetricDescriptorResponse_FieldPathSelector int32

const (
	WatchMetricDescriptorResponse_FieldPathSelectorChange WatchMetricDescriptorResponse_FieldPathSelector = 0
)

func (s WatchMetricDescriptorResponse_FieldPathSelector) String() string {
	switch s {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", s))
	}
}

func BuildWatchMetricDescriptorResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchMetricDescriptorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMetricDescriptorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchMetricDescriptorResponse_FieldTerminalPath{selector: WatchMetricDescriptorResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMetricDescriptorResponse", fp)
}

func ParseWatchMetricDescriptorResponse_FieldPath(rawField string) (WatchMetricDescriptorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMetricDescriptorResponse_FieldPath(fp)
}

func MustParseWatchMetricDescriptorResponse_FieldPath(rawField string) WatchMetricDescriptorResponse_FieldPath {
	fp, err := ParseWatchMetricDescriptorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMetricDescriptorResponse_FieldTerminalPath struct {
	selector WatchMetricDescriptorResponse_FieldPathSelector
}

var _ WatchMetricDescriptorResponse_FieldPath = (*WatchMetricDescriptorResponse_FieldTerminalPath)(nil)

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) Selector() WatchMetricDescriptorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMetricDescriptorResponse
func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) Get(source *WatchMetricDescriptorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMetricDescriptorResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMetricDescriptorResponse))
}

// GetSingle returns value pointed by specific field of from source WatchMetricDescriptorResponse
func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) GetSingle(source *WatchMetricDescriptorResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMetricDescriptorResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		return (*metric_descriptor.MetricDescriptorChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) ClearValue(item *WatchMetricDescriptorResponse) {
	if item != nil {
		switch fp.selector {
		case WatchMetricDescriptorResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMetricDescriptorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMetricDescriptorResponse_FieldPathSelectorChange
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) WithIValue(value interface{}) WatchMetricDescriptorResponse_FieldPathValue {
	switch fp.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		return &WatchMetricDescriptorResponse_FieldTerminalPathValue{WatchMetricDescriptorResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMetricDescriptorResponse_FieldPathArrayOfValues {
	fpaov := &WatchMetricDescriptorResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		return &WatchMetricDescriptorResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorResponse_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMetricDescriptorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMetricDescriptorResponse_FieldPathValue allows storing values for WatchMetricDescriptorResponse fields according to their type
type WatchMetricDescriptorResponse_FieldPathValue interface {
	WatchMetricDescriptorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMetricDescriptorResponse)
	CompareWith(*WatchMetricDescriptorResponse) (cmp int, comparable bool)
}

func ParseWatchMetricDescriptorResponse_FieldPathValue(pathStr, valueStr string) (WatchMetricDescriptorResponse_FieldPathValue, error) {
	fp, err := ParseWatchMetricDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMetricDescriptorResponse_FieldPathValue), nil
}

func MustParseWatchMetricDescriptorResponse_FieldPathValue(pathStr, valueStr string) WatchMetricDescriptorResponse_FieldPathValue {
	fpv, err := ParseWatchMetricDescriptorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMetricDescriptorResponse_FieldTerminalPathValue struct {
	WatchMetricDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorResponse_FieldPathValue = (*WatchMetricDescriptorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMetricDescriptorResponse' as interface{}
func (fpv *WatchMetricDescriptorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMetricDescriptorResponse_FieldTerminalPathValue) AsChangeValue() (*metric_descriptor.MetricDescriptorChange, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptorChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchMetricDescriptorResponse
func (fpv *WatchMetricDescriptorResponse_FieldTerminalPathValue) SetTo(target **WatchMetricDescriptorResponse) {
	if *target == nil {
		*target = new(WatchMetricDescriptorResponse)
	}
	switch fpv.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*metric_descriptor.MetricDescriptorChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMetricDescriptorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMetricDescriptorResponse_FieldTerminalPathValue' with the value under path in 'WatchMetricDescriptorResponse'.
func (fpv *WatchMetricDescriptorResponse_FieldTerminalPathValue) CompareWith(source *WatchMetricDescriptorResponse) (int, bool) {
	switch fpv.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMetricDescriptorResponse))
}

// WatchMetricDescriptorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMetricDescriptorResponse according to their type
// Present only for array (repeated) types.
type WatchMetricDescriptorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMetricDescriptorResponse_FieldPath
	ContainsValue(*WatchMetricDescriptorResponse) bool
}

// ParseWatchMetricDescriptorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMetricDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMetricDescriptorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMetricDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMetricDescriptorResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchMetricDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchMetricDescriptorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMetricDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMetricDescriptorResponse_FieldTerminalPathArrayItemValue struct {
	WatchMetricDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorResponse_FieldPathArrayItemValue = (*WatchMetricDescriptorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMetricDescriptorResponse as interface{}
func (fpaiv *WatchMetricDescriptorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMetricDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMetricDescriptorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMetricDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMetricDescriptorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMetricDescriptorResponse'
func (fpaiv *WatchMetricDescriptorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMetricDescriptorResponse) bool {
	slice := fpaiv.WatchMetricDescriptorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMetricDescriptorResponse_FieldPathArrayOfValues allows storing slice of values for WatchMetricDescriptorResponse fields according to their type
type WatchMetricDescriptorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMetricDescriptorResponse_FieldPath
}

func ParseWatchMetricDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMetricDescriptorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMetricDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMetricDescriptorResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchMetricDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMetricDescriptorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMetricDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMetricDescriptorResponse_FieldTerminalPathArrayOfValues struct {
	WatchMetricDescriptorResponse_FieldTerminalPath
	values interface{}
}

var _ WatchMetricDescriptorResponse_FieldPathArrayOfValues = (*WatchMetricDescriptorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMetricDescriptorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMetricDescriptorResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptorChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMetricDescriptorResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*metric_descriptor.MetricDescriptorChange, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptorChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMetricDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMetricDescriptorsRequest_FieldPathSelector
	Get(source *WatchMetricDescriptorsRequest) []interface{}
	GetSingle(source *WatchMetricDescriptorsRequest) (interface{}, bool)
	ClearValue(item *WatchMetricDescriptorsRequest)

	// Those methods build corresponding WatchMetricDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMetricDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMetricDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMetricDescriptorsRequest_FieldPathArrayItemValue
}

type WatchMetricDescriptorsRequest_FieldPathSelector int32

const (
	WatchMetricDescriptorsRequest_FieldPathSelectorType         WatchMetricDescriptorsRequest_FieldPathSelector = 0
	WatchMetricDescriptorsRequest_FieldPathSelectorParent       WatchMetricDescriptorsRequest_FieldPathSelector = 1
	WatchMetricDescriptorsRequest_FieldPathSelectorPageSize     WatchMetricDescriptorsRequest_FieldPathSelector = 2
	WatchMetricDescriptorsRequest_FieldPathSelectorPageToken    WatchMetricDescriptorsRequest_FieldPathSelector = 3
	WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy      WatchMetricDescriptorsRequest_FieldPathSelector = 4
	WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken  WatchMetricDescriptorsRequest_FieldPathSelector = 5
	WatchMetricDescriptorsRequest_FieldPathSelectorFilter       WatchMetricDescriptorsRequest_FieldPathSelector = 6
	WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask    WatchMetricDescriptorsRequest_FieldPathSelector = 7
	WatchMetricDescriptorsRequest_FieldPathSelectorView         WatchMetricDescriptorsRequest_FieldPathSelector = 8
	WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize WatchMetricDescriptorsRequest_FieldPathSelector = 9
)

func (s WatchMetricDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		return "type"
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		return "view"
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", s))
	}
}

func BuildWatchMetricDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchMetricDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMetricDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMetricDescriptorsRequest", fp)
}

func ParseWatchMetricDescriptorsRequest_FieldPath(rawField string) (WatchMetricDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMetricDescriptorsRequest_FieldPath(fp)
}

func MustParseWatchMetricDescriptorsRequest_FieldPath(rawField string) WatchMetricDescriptorsRequest_FieldPath {
	fp, err := ParseWatchMetricDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMetricDescriptorsRequest_FieldTerminalPath struct {
	selector WatchMetricDescriptorsRequest_FieldPathSelector
}

var _ WatchMetricDescriptorsRequest_FieldPath = (*WatchMetricDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) Selector() WatchMetricDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMetricDescriptorsRequest
func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) Get(source *WatchMetricDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMetricDescriptorsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchMetricDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMetricDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchMetricDescriptorsRequest
func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) GetSingle(source *WatchMetricDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMetricDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		return (*metric_descriptor.ParentReference)(nil)
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return (*metric_descriptor.PagerCursor)(nil)
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*metric_descriptor.OrderBy)(nil)
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		return (*metric_descriptor.Filter)(nil)
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) ClearValue(item *WatchMetricDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchMetricDescriptorsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchMetricDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMetricDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorType ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorParent ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorView ||
		fp.selector == WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchMetricDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.ParentReference)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.PagerCursor)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.OrderBy)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.Filter)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathValue{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMetricDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.ParentReference)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.PagerCursor)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.OrderBy)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.Filter)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMetricDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMetricDescriptorsRequest_FieldPathValue allows storing values for WatchMetricDescriptorsRequest fields according to their type
type WatchMetricDescriptorsRequest_FieldPathValue interface {
	WatchMetricDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMetricDescriptorsRequest)
	CompareWith(*WatchMetricDescriptorsRequest) (cmp int, comparable bool)
}

func ParseWatchMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (WatchMetricDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseWatchMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMetricDescriptorsRequest_FieldPathValue), nil
}

func MustParseWatchMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr string) WatchMetricDescriptorsRequest_FieldPathValue {
	fpv, err := ParseWatchMetricDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMetricDescriptorsRequest_FieldTerminalPathValue struct {
	WatchMetricDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorsRequest_FieldPathValue = (*WatchMetricDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMetricDescriptorsRequest' as interface{}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsParentValue() (*metric_descriptor.ParentReference, bool) {
	res, ok := fpv.value.(*metric_descriptor.ParentReference)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*metric_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*metric_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*metric_descriptor.OrderBy)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*metric_descriptor.Filter, bool) {
	res, ok := fpv.value.(*metric_descriptor.Filter)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchMetricDescriptorsRequest
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) SetTo(target **WatchMetricDescriptorsRequest) {
	if *target == nil {
		*target = new(WatchMetricDescriptorsRequest)
	}
	switch fpv.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*metric_descriptor.ParentReference)
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*metric_descriptor.PagerCursor)
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*metric_descriptor.OrderBy)
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*metric_descriptor.Filter)
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMetricDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMetricDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'WatchMetricDescriptorsRequest'.
func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *WatchMetricDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*metric_descriptor.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMetricDescriptorsRequest))
}

// WatchMetricDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMetricDescriptorsRequest according to their type
// Present only for array (repeated) types.
type WatchMetricDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMetricDescriptorsRequest_FieldPath
	ContainsValue(*WatchMetricDescriptorsRequest) bool
}

// ParseWatchMetricDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMetricDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMetricDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchMetricDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMetricDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMetricDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	WatchMetricDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorsRequest_FieldPathArrayItemValue = (*WatchMetricDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMetricDescriptorsRequest as interface{}
func (fpaiv *WatchMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMetricDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMetricDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMetricDescriptorsRequest'
func (fpaiv *WatchMetricDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMetricDescriptorsRequest) bool {
	slice := fpaiv.WatchMetricDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMetricDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for WatchMetricDescriptorsRequest fields according to their type
type WatchMetricDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMetricDescriptorsRequest_FieldPath
}

func ParseWatchMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMetricDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMetricDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMetricDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMetricDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMetricDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	WatchMetricDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchMetricDescriptorsRequest_FieldPathArrayOfValues = (*WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMetricDescriptorsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*metric_descriptor.ParentReference) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*metric_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*metric_descriptor.OrderBy) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*metric_descriptor.Filter) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*metric_descriptor.ParentReference, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.ParentReference)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*metric_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*metric_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.OrderBy)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*metric_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.Filter)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMetricDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMetricDescriptorsResponse_FieldPathSelector
	Get(source *WatchMetricDescriptorsResponse) []interface{}
	GetSingle(source *WatchMetricDescriptorsResponse) (interface{}, bool)
	ClearValue(item *WatchMetricDescriptorsResponse)

	// Those methods build corresponding WatchMetricDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMetricDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMetricDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMetricDescriptorsResponse_FieldPathArrayItemValue
}

type WatchMetricDescriptorsResponse_FieldPathSelector int32

const (
	WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges WatchMetricDescriptorsResponse_FieldPathSelector = 0
	WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent               WatchMetricDescriptorsResponse_FieldPathSelector = 1
	WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange         WatchMetricDescriptorsResponse_FieldPathSelector = 2
	WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken             WatchMetricDescriptorsResponse_FieldPathSelector = 3
	WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize            WatchMetricDescriptorsResponse_FieldPathSelector = 4
	WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset             WatchMetricDescriptorsResponse_FieldPathSelector = 5
	WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset             WatchMetricDescriptorsResponse_FieldPathSelector = 6
)

func (s WatchMetricDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		return "metric_descriptor_changes"
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", s))
	}
}

func BuildWatchMetricDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchMetricDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMetricDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metric_descriptor_changes", "metricDescriptorChanges", "metric-descriptor-changes":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchMetricDescriptorsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchMetricDescriptorsResponse_FieldSubPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMetricDescriptorsResponse", fp)
}

func ParseWatchMetricDescriptorsResponse_FieldPath(rawField string) (WatchMetricDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMetricDescriptorsResponse_FieldPath(fp)
}

func MustParseWatchMetricDescriptorsResponse_FieldPath(rawField string) WatchMetricDescriptorsResponse_FieldPath {
	fp, err := ParseWatchMetricDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMetricDescriptorsResponse_FieldTerminalPath struct {
	selector WatchMetricDescriptorsResponse_FieldPathSelector
}

var _ WatchMetricDescriptorsResponse_FieldPath = (*WatchMetricDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) Selector() WatchMetricDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMetricDescriptorsResponse
func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) Get(source *WatchMetricDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
			for _, value := range source.GetMetricDescriptorChanges() {
				values = append(values, value)
			}
		case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMetricDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchMetricDescriptorsResponse
func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) GetSingle(source *WatchMetricDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		res := source.GetMetricDescriptorChanges()
		return res, res != nil
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMetricDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		return ([]*metric_descriptor.MetricDescriptorChange)(nil)
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchMetricDescriptorsResponse_PageTokenChange)(nil)
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) ClearValue(item *WatchMetricDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
			item.MetricDescriptorChanges = nil
		case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMetricDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges ||
		fp.selector == WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchMetricDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*metric_descriptor.MetricDescriptorChange)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*WatchMetricDescriptorsResponse_PageTokenChange)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMetricDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*metric_descriptor.MetricDescriptorChange)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*WatchMetricDescriptorsResponse_PageTokenChange)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMetricDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		return &WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue{WatchMetricDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchMetricDescriptorsResponse_FieldSubPath struct {
	selector WatchMetricDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchMetricDescriptorsResponse_FieldPath = (*WatchMetricDescriptorsResponse_FieldSubPath)(nil)

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) Selector() WatchMetricDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchMetricDescriptorsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchMetricDescriptorsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchMetricDescriptorsResponse
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) Get(source *WatchMetricDescriptorsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchMetricDescriptorsResponse))
}

// GetSingle returns value of selected field from source WatchMetricDescriptorsResponse
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) GetSingle(source *WatchMetricDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchMetricDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) ClearValue(item *WatchMetricDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchMetricDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchMetricDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) WatchMetricDescriptorsResponse_FieldPathValue {
	return &WatchMetricDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchMetricDescriptorsResponse_FieldPathArrayOfValues {
	return &WatchMetricDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchMetricDescriptorsResponse_FieldPathArrayItemValue {
	return &WatchMetricDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchMetricDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchMetricDescriptorsResponse_FieldPathValue allows storing values for WatchMetricDescriptorsResponse fields according to their type
type WatchMetricDescriptorsResponse_FieldPathValue interface {
	WatchMetricDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMetricDescriptorsResponse)
	CompareWith(*WatchMetricDescriptorsResponse) (cmp int, comparable bool)
}

func ParseWatchMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (WatchMetricDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseWatchMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMetricDescriptorsResponse_FieldPathValue), nil
}

func MustParseWatchMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr string) WatchMetricDescriptorsResponse_FieldPathValue {
	fpv, err := ParseWatchMetricDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMetricDescriptorsResponse_FieldTerminalPathValue struct {
	WatchMetricDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorsResponse_FieldPathValue = (*WatchMetricDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMetricDescriptorsResponse' as interface{}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsMetricDescriptorChangesValue() ([]*metric_descriptor.MetricDescriptorChange, bool) {
	res, ok := fpv.value.([]*metric_descriptor.MetricDescriptorChange)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchMetricDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchMetricDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchMetricDescriptorsResponse
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) SetTo(target **WatchMetricDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchMetricDescriptorsResponse)
	}
	switch fpv.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		(*target).MetricDescriptorChanges = fpv.value.([]*metric_descriptor.MetricDescriptorChange)
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchMetricDescriptorsResponse_PageTokenChange)
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMetricDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMetricDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'WatchMetricDescriptorsResponse'.
func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *WatchMetricDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		return 0, false
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMetricDescriptorsResponse))
}

type WatchMetricDescriptorsResponse_FieldSubPathValue struct {
	WatchMetricDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchMetricDescriptorsResponse_FieldPathValue = (*WatchMetricDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchMetricDescriptorsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchMetricDescriptorsResponse_FieldSubPathValue) SetTo(target **WatchMetricDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchMetricDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchMetricDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMetricDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchMetricDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchMetricDescriptorsResponse_FieldSubPathValue) CompareWith(source *WatchMetricDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchMetricDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchMetricDescriptorsResponse))
}

// WatchMetricDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMetricDescriptorsResponse according to their type
// Present only for array (repeated) types.
type WatchMetricDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMetricDescriptorsResponse_FieldPath
	ContainsValue(*WatchMetricDescriptorsResponse) bool
}

// ParseWatchMetricDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMetricDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMetricDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchMetricDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMetricDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	WatchMetricDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorsResponse_FieldPathArrayItemValue = (*WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMetricDescriptorsResponse as interface{}
func (fpaiv *WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMetricDescriptorChangesItemValue() (*metric_descriptor.MetricDescriptorChange, bool) {
	res, ok := fpaiv.value.(*metric_descriptor.MetricDescriptorChange)
	return res, ok
}

func (fpaiv *WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMetricDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMetricDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMetricDescriptorsResponse'
func (fpaiv *WatchMetricDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMetricDescriptorsResponse) bool {
	slice := fpaiv.WatchMetricDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchMetricDescriptorsResponse_FieldSubPathArrayItemValue struct {
	WatchMetricDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchMetricDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchMetricDescriptorsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMetricDescriptorsResponse'
func (fpaivs *WatchMetricDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchMetricDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// WatchMetricDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for WatchMetricDescriptorsResponse fields according to their type
type WatchMetricDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMetricDescriptorsResponse_FieldPath
}

func ParseWatchMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMetricDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMetricDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMetricDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMetricDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMetricDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMetricDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	WatchMetricDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchMetricDescriptorsResponse_FieldPathArrayOfValues = (*WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges:
		for _, v := range fpaov.values.([][]*metric_descriptor.MetricDescriptorChange) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchMetricDescriptorsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMetricDescriptorChangesArrayOfValues() ([][]*metric_descriptor.MetricDescriptorChange, bool) {
	res, ok := fpaov.values.([][]*metric_descriptor.MetricDescriptorChange)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchMetricDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchMetricDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchMetricDescriptorsResponse_FieldSubPathArrayOfValues struct {
	WatchMetricDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchMetricDescriptorsResponse_FieldPathArrayOfValues = (*WatchMetricDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchMetricDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchMetricDescriptorsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMetricDescriptorsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchMetricDescriptorsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchMetricDescriptorsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchMetricDescriptorsResponse_PageTokenChange)

	// Those methods build corresponding WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector = 0
	WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchMetricDescriptorsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchMetricDescriptorsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMetricDescriptorsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMetricDescriptorsResponse_PageTokenChange", fp)
}

func ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPath(rawField string) (WatchMetricDescriptorsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMetricDescriptorsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchMetricDescriptorsResponsePageTokenChange_FieldPath(rawField string) WatchMetricDescriptorsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector
}

var _ WatchMetricDescriptorsResponsePageTokenChange_FieldPath = (*WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) Selector() WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMetricDescriptorsResponse_PageTokenChange
func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchMetricDescriptorsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchMetricDescriptorsResponse_PageTokenChange
func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchMetricDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*metric_descriptor.PagerCursor)(nil)
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*metric_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchMetricDescriptorsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*metric_descriptor.PagerCursor)}
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*metric_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.PagerCursor)}
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue interface {
	WatchMetricDescriptorsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMetricDescriptorsResponse_PageTokenChange)
	CompareWith(*WatchMetricDescriptorsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorsResponsePageTokenChange_FieldPathValue = (*WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*metric_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*metric_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*metric_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchMetricDescriptorsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchMetricDescriptorsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*metric_descriptor.PagerCursor)
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*metric_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMetricDescriptorsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchMetricDescriptorsResponse_PageTokenChange'.
func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchMetricDescriptorsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMetricDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

// WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMetricDescriptorsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchMetricDescriptorsResponse_PageTokenChange) bool
}

// ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMetricDescriptorsResponse_PageTokenChange as interface{}
func (fpaiv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMetricDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMetricDescriptorsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMetricDescriptorsResponsePageTokenChange_FieldPath
}

func ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchMetricDescriptorsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*metric_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*metric_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*metric_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*metric_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateMetricDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateMetricDescriptorRequest_FieldPathSelector
	Get(source *UpdateMetricDescriptorRequest) []interface{}
	GetSingle(source *UpdateMetricDescriptorRequest) (interface{}, bool)
	ClearValue(item *UpdateMetricDescriptorRequest)

	// Those methods build corresponding UpdateMetricDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateMetricDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateMetricDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateMetricDescriptorRequest_FieldPathArrayItemValue
}

type UpdateMetricDescriptorRequest_FieldPathSelector int32

const (
	UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor UpdateMetricDescriptorRequest_FieldPathSelector = 0
	UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask       UpdateMetricDescriptorRequest_FieldPathSelector = 1
	UpdateMetricDescriptorRequest_FieldPathSelectorCas              UpdateMetricDescriptorRequest_FieldPathSelector = 2
)

func (s UpdateMetricDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return "metric_descriptor"
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", s))
	}
}

func BuildUpdateMetricDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateMetricDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateMetricDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metric_descriptor", "metricDescriptor", "metric-descriptor":
			return &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "metric_descriptor", "metricDescriptor", "metric-descriptor":
			if subpath, err := metric_descriptor.BuildMetricDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMetricDescriptorRequest_FieldSubPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateMetricDescriptorRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMetricDescriptorRequest_FieldSubPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateMetricDescriptorRequest", fp)
}

func ParseUpdateMetricDescriptorRequest_FieldPath(rawField string) (UpdateMetricDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateMetricDescriptorRequest_FieldPath(fp)
}

func MustParseUpdateMetricDescriptorRequest_FieldPath(rawField string) UpdateMetricDescriptorRequest_FieldPath {
	fp, err := ParseUpdateMetricDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateMetricDescriptorRequest_FieldTerminalPath struct {
	selector UpdateMetricDescriptorRequest_FieldPathSelector
}

var _ UpdateMetricDescriptorRequest_FieldPath = (*UpdateMetricDescriptorRequest_FieldTerminalPath)(nil)

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) Selector() UpdateMetricDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateMetricDescriptorRequest
func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) Get(source *UpdateMetricDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
			if source.MetricDescriptor != nil {
				values = append(values, source.MetricDescriptor)
			}
		case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateMetricDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateMetricDescriptorRequest
func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) GetSingle(source *UpdateMetricDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		res := source.GetMetricDescriptor()
		return res, res != nil
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return (*metric_descriptor.MetricDescriptor)(nil)
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return (*UpdateMetricDescriptorRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) ClearValue(item *UpdateMetricDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
			item.MetricDescriptor = nil
		case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateMetricDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return &UpdateMetricDescriptorRequest_FieldTerminalPathValue{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor)}
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateMetricDescriptorRequest_FieldTerminalPathValue{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return &UpdateMetricDescriptorRequest_FieldTerminalPathValue{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp, value: value.(*UpdateMetricDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return &UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor)}
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return &UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*UpdateMetricDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateMetricDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateMetricDescriptorRequest_FieldSubPath struct {
	selector UpdateMetricDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateMetricDescriptorRequest_FieldPath = (*UpdateMetricDescriptorRequest_FieldSubPath)(nil)

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) Selector() UpdateMetricDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) AsMetricDescriptorSubPath() (metric_descriptor.MetricDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(metric_descriptor.MetricDescriptor_FieldPath)
	return res, ok
}
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) AsCasSubPath() (UpdateMetricDescriptorRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateMetricDescriptorRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateMetricDescriptorRequest
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) Get(source *UpdateMetricDescriptorRequest) (values []interface{}) {
	if asMetricDescriptorFieldPath, ok := fps.AsMetricDescriptorSubPath(); ok {
		values = append(values, asMetricDescriptorFieldPath.Get(source.GetMetricDescriptor())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateMetricDescriptorRequest))
}

// GetSingle returns value of selected field from source UpdateMetricDescriptorRequest
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) GetSingle(source *UpdateMetricDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		if source.GetMetricDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetricDescriptor())
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fps.selector))
	}
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateMetricDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) ClearValue(item *UpdateMetricDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
			fps.subPath.ClearValueRaw(item.MetricDescriptor)
		case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateMetricDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateMetricDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) WithIValue(value interface{}) UpdateMetricDescriptorRequest_FieldPathValue {
	return &UpdateMetricDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateMetricDescriptorRequest_FieldPathArrayOfValues {
	return &UpdateMetricDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateMetricDescriptorRequest_FieldPathArrayItemValue {
	return &UpdateMetricDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateMetricDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateMetricDescriptorRequest_FieldPathValue allows storing values for UpdateMetricDescriptorRequest fields according to their type
type UpdateMetricDescriptorRequest_FieldPathValue interface {
	UpdateMetricDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateMetricDescriptorRequest)
	CompareWith(*UpdateMetricDescriptorRequest) (cmp int, comparable bool)
}

func ParseUpdateMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) (UpdateMetricDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseUpdateMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMetricDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateMetricDescriptorRequest_FieldPathValue), nil
}

func MustParseUpdateMetricDescriptorRequest_FieldPathValue(pathStr, valueStr string) UpdateMetricDescriptorRequest_FieldPathValue {
	fpv, err := ParseUpdateMetricDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateMetricDescriptorRequest_FieldTerminalPathValue struct {
	UpdateMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateMetricDescriptorRequest_FieldPathValue = (*UpdateMetricDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateMetricDescriptorRequest' as interface{}
func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) AsMetricDescriptorValue() (*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) AsCasValue() (*UpdateMetricDescriptorRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateMetricDescriptorRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateMetricDescriptorRequest
func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) SetTo(target **UpdateMetricDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateMetricDescriptorRequest)
	}
	switch fpv.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		(*target).MetricDescriptor = fpv.value.(*metric_descriptor.MetricDescriptor)
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateMetricDescriptorRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMetricDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateMetricDescriptorRequest_FieldTerminalPathValue' with the value under path in 'UpdateMetricDescriptorRequest'.
func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) CompareWith(source *UpdateMetricDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return 0, false
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateMetricDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateMetricDescriptorRequest))
}

type UpdateMetricDescriptorRequest_FieldSubPathValue struct {
	UpdateMetricDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateMetricDescriptorRequest_FieldPathValue = (*UpdateMetricDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) AsMetricDescriptorPathValue() (metric_descriptor.MetricDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) AsCasPathValue() (UpdateMetricDescriptorRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateMetricDescriptorRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) SetTo(target **UpdateMetricDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateMetricDescriptorRequest)
	}
	switch fpvs.Selector() {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue).SetTo(&(*target).MetricDescriptor)
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateMetricDescriptorRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMetricDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) CompareWith(source *UpdateMetricDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue).CompareWith(source.GetMetricDescriptor())
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateMetricDescriptorRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMetricDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateMetricDescriptorRequest))
}

// UpdateMetricDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateMetricDescriptorRequest according to their type
// Present only for array (repeated) types.
type UpdateMetricDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateMetricDescriptorRequest_FieldPath
	ContainsValue(*UpdateMetricDescriptorRequest) bool
}

// ParseUpdateMetricDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateMetricDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMetricDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateMetricDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateMetricDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateMetricDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateMetricDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	UpdateMetricDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateMetricDescriptorRequest_FieldPathArrayItemValue = (*UpdateMetricDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateMetricDescriptorRequest as interface{}
func (fpaiv *UpdateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateMetricDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateMetricDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateMetricDescriptorRequest'
func (fpaiv *UpdateMetricDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateMetricDescriptorRequest) bool {
	slice := fpaiv.UpdateMetricDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateMetricDescriptorRequest_FieldSubPathArrayItemValue struct {
	UpdateMetricDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateMetricDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateMetricDescriptorRequest_FieldSubPathArrayItemValue) AsMetricDescriptorPathItemValue() (metric_descriptor.MetricDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateMetricDescriptorRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateMetricDescriptorRequest'
func (fpaivs *UpdateMetricDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateMetricDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		return fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetMetricDescriptor())
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// UpdateMetricDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for UpdateMetricDescriptorRequest fields according to their type
type UpdateMetricDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateMetricDescriptorRequest_FieldPath
}

func ParseUpdateMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateMetricDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateMetricDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMetricDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateMetricDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateMetricDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateMetricDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	UpdateMetricDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateMetricDescriptorRequest_FieldPathArrayOfValues = (*UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor) {
			values = append(values, v)
		}
	case UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	case UpdateMetricDescriptorRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateMetricDescriptorRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsMetricDescriptorArrayOfValues() ([]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpaov *UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}
func (fpaov *UpdateMetricDescriptorRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateMetricDescriptorRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateMetricDescriptorRequest_CAS)
	return res, ok
}

type UpdateMetricDescriptorRequest_FieldSubPathArrayOfValues struct {
	UpdateMetricDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateMetricDescriptorRequest_FieldPathArrayOfValues = (*UpdateMetricDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateMetricDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateMetricDescriptorRequest_FieldSubPathArrayOfValues) AsMetricDescriptorPathArrayOfValues() (metric_descriptor.MetricDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(metric_descriptor.MetricDescriptor_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateMetricDescriptorRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateMetricDescriptorRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateMetricDescriptorRequestCAS_FieldPathSelector
	Get(source *UpdateMetricDescriptorRequest_CAS) []interface{}
	GetSingle(source *UpdateMetricDescriptorRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateMetricDescriptorRequest_CAS)

	// Those methods build corresponding UpdateMetricDescriptorRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateMetricDescriptorRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue
}

type UpdateMetricDescriptorRequestCAS_FieldPathSelector int32

const (
	UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState UpdateMetricDescriptorRequestCAS_FieldPathSelector = 0
	UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask        UpdateMetricDescriptorRequestCAS_FieldPathSelector = 1
)

func (s UpdateMetricDescriptorRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", s))
	}
}

func BuildUpdateMetricDescriptorRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateMetricDescriptorRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateMetricDescriptorRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateMetricDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateMetricDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := metric_descriptor.BuildMetricDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMetricDescriptorRequestCAS_FieldSubPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateMetricDescriptorRequest_CAS", fp)
}

func ParseUpdateMetricDescriptorRequestCAS_FieldPath(rawField string) (UpdateMetricDescriptorRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateMetricDescriptorRequestCAS_FieldPath(fp)
}

func MustParseUpdateMetricDescriptorRequestCAS_FieldPath(rawField string) UpdateMetricDescriptorRequestCAS_FieldPath {
	fp, err := ParseUpdateMetricDescriptorRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateMetricDescriptorRequestCAS_FieldTerminalPath struct {
	selector UpdateMetricDescriptorRequestCAS_FieldPathSelector
}

var _ UpdateMetricDescriptorRequestCAS_FieldPath = (*UpdateMetricDescriptorRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) Selector() UpdateMetricDescriptorRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateMetricDescriptorRequest_CAS
func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) Get(source *UpdateMetricDescriptorRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateMetricDescriptorRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateMetricDescriptorRequest_CAS
func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) GetSingle(source *UpdateMetricDescriptorRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateMetricDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return (*metric_descriptor.MetricDescriptor)(nil)
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return (*metric_descriptor.MetricDescriptor_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) ClearValue(item *UpdateMetricDescriptorRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateMetricDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateMetricDescriptorRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue{UpdateMetricDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor)}
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue{UpdateMetricDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*metric_descriptor.MetricDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor)}
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMetricDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*metric_descriptor.MetricDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMetricDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateMetricDescriptorRequestCAS_FieldSubPath struct {
	selector UpdateMetricDescriptorRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateMetricDescriptorRequestCAS_FieldPath = (*UpdateMetricDescriptorRequestCAS_FieldSubPath)(nil)

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) Selector() UpdateMetricDescriptorRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) AsConditionalStateSubPath() (metric_descriptor.MetricDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(metric_descriptor.MetricDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateMetricDescriptorRequest_CAS
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) Get(source *UpdateMetricDescriptorRequest_CAS) (values []interface{}) {
	if asMetricDescriptorFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asMetricDescriptorFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateMetricDescriptorRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateMetricDescriptorRequest_CAS
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) GetSingle(source *UpdateMetricDescriptorRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateMetricDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) ClearValue(item *UpdateMetricDescriptorRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateMetricDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateMetricDescriptorRequestCAS_FieldPathValue {
	return &UpdateMetricDescriptorRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues {
	return &UpdateMetricDescriptorRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue {
	return &UpdateMetricDescriptorRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateMetricDescriptorRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateMetricDescriptorRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateMetricDescriptorRequestCAS_FieldPathValue interface {
	UpdateMetricDescriptorRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateMetricDescriptorRequest_CAS)
	CompareWith(*UpdateMetricDescriptorRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateMetricDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateMetricDescriptorRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateMetricDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateMetricDescriptorRequestCAS_FieldPathValue), nil
}

func MustParseUpdateMetricDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateMetricDescriptorRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateMetricDescriptorRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue struct {
	UpdateMetricDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateMetricDescriptorRequestCAS_FieldPathValue = (*UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateMetricDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateMetricDescriptorRequest_CAS)
	}
	switch fpv.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*metric_descriptor.MetricDescriptor)
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*metric_descriptor.MetricDescriptor_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMetricDescriptorRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateMetricDescriptorRequest_CAS'.
func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateMetricDescriptorRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateMetricDescriptorRequest_CAS))
}

type UpdateMetricDescriptorRequestCAS_FieldSubPathValue struct {
	UpdateMetricDescriptorRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateMetricDescriptorRequestCAS_FieldPathValue = (*UpdateMetricDescriptorRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateMetricDescriptorRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (metric_descriptor.MetricDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateMetricDescriptorRequestCAS_FieldSubPathValue) SetTo(target **UpdateMetricDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateMetricDescriptorRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMetricDescriptorRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMetricDescriptorRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateMetricDescriptorRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateMetricDescriptorRequestCAS_FieldSubPathValue) CompareWith(source *UpdateMetricDescriptorRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(metric_descriptor.MetricDescriptor_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMetricDescriptorRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateMetricDescriptorRequest_CAS))
}

// UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateMetricDescriptorRequestCAS_FieldPath
	ContainsValue(*UpdateMetricDescriptorRequest_CAS) bool
}

// ParseUpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateMetricDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateMetricDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateMetricDescriptorRequestCAS_FieldPathArrayItemValue = (*UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateMetricDescriptorRequest_CAS as interface{}
func (fpaiv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateMetricDescriptorRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateMetricDescriptorRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateMetricDescriptorRequest_CAS) bool {
	slice := fpaiv.UpdateMetricDescriptorRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateMetricDescriptorRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateMetricDescriptorRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateMetricDescriptorRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateMetricDescriptorRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (metric_descriptor.MetricDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateMetricDescriptorRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateMetricDescriptorRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(metric_descriptor.MetricDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMetricDescriptorRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateMetricDescriptorRequestCAS_FieldPath
}

func ParseUpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateMetricDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateMetricDescriptorRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor) {
			values = append(values, v)
		}
	case UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*metric_descriptor.MetricDescriptor, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor)
	return res, ok
}
func (fpaov *UpdateMetricDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*metric_descriptor.MetricDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*metric_descriptor.MetricDescriptor_FieldMask)
	return res, ok
}

type UpdateMetricDescriptorRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateMetricDescriptorRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateMetricDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateMetricDescriptorRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateMetricDescriptorRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateMetricDescriptorRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (metric_descriptor.MetricDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(metric_descriptor.MetricDescriptor_FieldPathArrayOfValues)
	return res, ok
}
