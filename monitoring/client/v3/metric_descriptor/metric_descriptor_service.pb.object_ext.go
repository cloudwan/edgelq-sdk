// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/metric_descriptor_service.proto
// DO NOT EDIT!!!

package metric_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/metric_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *BatchGetMetricDescriptorsRequest) GotenObjectExt() {}

func (o *BatchGetMetricDescriptorsRequest) MakeFullFieldMask() *BatchGetMetricDescriptorsRequest_FieldMask {
	return FullBatchGetMetricDescriptorsRequest_FieldMask()
}

func (o *BatchGetMetricDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetMetricDescriptorsRequest_FieldMask()
}

func (o *BatchGetMetricDescriptorsRequest) MakeDiffFieldMask(other *BatchGetMetricDescriptorsRequest) *BatchGetMetricDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetMetricDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetMetricDescriptorsRequest_FieldMask()
	}

	res := &BatchGetMetricDescriptorsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetMetricDescriptorsRequest_FieldTerminalPath{selector: BatchGetMetricDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetMetricDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetMetricDescriptorsRequest))
}

func (o *BatchGetMetricDescriptorsRequest) Clone() *BatchGetMetricDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetMetricDescriptorsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &metric_descriptor.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*metric_descriptor.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &metric_descriptor.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetMetricDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetMetricDescriptorsRequest) Merge(source *BatchGetMetricDescriptorsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &metric_descriptor.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *metric_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &metric_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetMetricDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetMetricDescriptorsRequest))
}

func (o *BatchGetMetricDescriptorsResponse) GotenObjectExt() {}

func (o *BatchGetMetricDescriptorsResponse) MakeFullFieldMask() *BatchGetMetricDescriptorsResponse_FieldMask {
	return FullBatchGetMetricDescriptorsResponse_FieldMask()
}

func (o *BatchGetMetricDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetMetricDescriptorsResponse_FieldMask()
}

func (o *BatchGetMetricDescriptorsResponse) MakeDiffFieldMask(other *BatchGetMetricDescriptorsResponse) *BatchGetMetricDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetMetricDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetMetricDescriptorsResponse_FieldMask()
	}

	res := &BatchGetMetricDescriptorsResponse_FieldMask{}

	if len(o.GetMetricDescriptors()) == len(other.GetMetricDescriptors()) {
		for i, lValue := range o.GetMetricDescriptors() {
			rValue := other.GetMetricDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetMetricDescriptorsResponse_FieldTerminalPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMetricDescriptorsResponse_FieldTerminalPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMetricDescriptors})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetMetricDescriptorsResponse_FieldTerminalPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMetricDescriptorsResponse_FieldTerminalPath{selector: BatchGetMetricDescriptorsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetMetricDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetMetricDescriptorsResponse))
}

func (o *BatchGetMetricDescriptorsResponse) Clone() *BatchGetMetricDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetMetricDescriptorsResponse{}
	result.MetricDescriptors = make([]*metric_descriptor.MetricDescriptor, len(o.MetricDescriptors))
	for i, sourceValue := range o.MetricDescriptors {
		result.MetricDescriptors[i] = sourceValue.Clone()
	}
	result.Missing = make([]*metric_descriptor.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &metric_descriptor.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetMetricDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetMetricDescriptorsResponse) Merge(source *BatchGetMetricDescriptorsResponse) {
	for _, sourceValue := range source.GetMetricDescriptors() {
		exists := false
		for _, currentValue := range o.MetricDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *metric_descriptor.MetricDescriptor
			if sourceValue != nil {
				newDstElement = new(metric_descriptor.MetricDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.MetricDescriptors = append(o.MetricDescriptors, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *metric_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &metric_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetMetricDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetMetricDescriptorsResponse))
}

func (o *WatchMetricDescriptorRequest) GotenObjectExt() {}

func (o *WatchMetricDescriptorRequest) MakeFullFieldMask() *WatchMetricDescriptorRequest_FieldMask {
	return FullWatchMetricDescriptorRequest_FieldMask()
}

func (o *WatchMetricDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMetricDescriptorRequest_FieldMask()
}

func (o *WatchMetricDescriptorRequest) MakeDiffFieldMask(other *WatchMetricDescriptorRequest) *WatchMetricDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchMetricDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMetricDescriptorRequest_FieldMask()
	}

	res := &WatchMetricDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorRequest_FieldTerminalPath{selector: WatchMetricDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchMetricDescriptorRequest_FieldTerminalPath{selector: WatchMetricDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorRequest_FieldTerminalPath{selector: WatchMetricDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchMetricDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMetricDescriptorRequest))
}

func (o *WatchMetricDescriptorRequest) Clone() *WatchMetricDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &WatchMetricDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &metric_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchMetricDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMetricDescriptorRequest) Merge(source *WatchMetricDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &metric_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchMetricDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMetricDescriptorRequest))
}

func (o *WatchMetricDescriptorResponse) GotenObjectExt() {}

func (o *WatchMetricDescriptorResponse) MakeFullFieldMask() *WatchMetricDescriptorResponse_FieldMask {
	return FullWatchMetricDescriptorResponse_FieldMask()
}

func (o *WatchMetricDescriptorResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMetricDescriptorResponse_FieldMask()
}

func (o *WatchMetricDescriptorResponse) MakeDiffFieldMask(other *WatchMetricDescriptorResponse) *WatchMetricDescriptorResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchMetricDescriptorResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMetricDescriptorResponse_FieldMask()
	}

	res := &WatchMetricDescriptorResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchMetricDescriptorResponse_FieldTerminalPath{selector: WatchMetricDescriptorResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchMetricDescriptorResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMetricDescriptorResponse))
}

func (o *WatchMetricDescriptorResponse) Clone() *WatchMetricDescriptorResponse {
	if o == nil {
		return nil
	}
	result := &WatchMetricDescriptorResponse{}
	result.Change = proto.Clone(o.Change).(*metric_descriptor.MetricDescriptorChange)
	return result
}

func (o *WatchMetricDescriptorResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMetricDescriptorResponse) Merge(source *WatchMetricDescriptorResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(metric_descriptor.MetricDescriptorChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchMetricDescriptorResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMetricDescriptorResponse))
}

func (o *WatchMetricDescriptorsRequest) GotenObjectExt() {}

func (o *WatchMetricDescriptorsRequest) MakeFullFieldMask() *WatchMetricDescriptorsRequest_FieldMask {
	return FullWatchMetricDescriptorsRequest_FieldMask()
}

func (o *WatchMetricDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMetricDescriptorsRequest_FieldMask()
}

func (o *WatchMetricDescriptorsRequest) MakeDiffFieldMask(other *WatchMetricDescriptorsRequest) *WatchMetricDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchMetricDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMetricDescriptorsRequest_FieldMask()
	}

	res := &WatchMetricDescriptorsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsRequest_FieldTerminalPath{selector: WatchMetricDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchMetricDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMetricDescriptorsRequest))
}

func (o *WatchMetricDescriptorsRequest) Clone() *WatchMetricDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &WatchMetricDescriptorsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &metric_descriptor.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &metric_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &metric_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &metric_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchMetricDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMetricDescriptorsRequest) Merge(source *WatchMetricDescriptorsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &metric_descriptor.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &metric_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &metric_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &metric_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchMetricDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMetricDescriptorsRequest))
}

func (o *WatchMetricDescriptorsResponse) GotenObjectExt() {}

func (o *WatchMetricDescriptorsResponse) MakeFullFieldMask() *WatchMetricDescriptorsResponse_FieldMask {
	return FullWatchMetricDescriptorsResponse_FieldMask()
}

func (o *WatchMetricDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMetricDescriptorsResponse_FieldMask()
}

func (o *WatchMetricDescriptorsResponse) MakeDiffFieldMask(other *WatchMetricDescriptorsResponse) *WatchMetricDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchMetricDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMetricDescriptorsResponse_FieldMask()
	}

	res := &WatchMetricDescriptorsResponse_FieldMask{}

	if len(o.GetMetricDescriptorChanges()) == len(other.GetMetricDescriptorChanges()) {
		for i, lValue := range o.GetMetricDescriptorChanges() {
			rValue := other.GetMetricDescriptorChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorMetricDescriptorChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldSubPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponse_FieldTerminalPath{selector: WatchMetricDescriptorsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchMetricDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMetricDescriptorsResponse))
}

func (o *WatchMetricDescriptorsResponse) Clone() *WatchMetricDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &WatchMetricDescriptorsResponse{}
	result.MetricDescriptorChanges = make([]*metric_descriptor.MetricDescriptorChange, len(o.MetricDescriptorChanges))
	for i, sourceValue := range o.MetricDescriptorChanges {
		result.MetricDescriptorChanges[i] = proto.Clone(sourceValue).(*metric_descriptor.MetricDescriptorChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchMetricDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMetricDescriptorsResponse) Merge(source *WatchMetricDescriptorsResponse) {
	for _, sourceValue := range source.GetMetricDescriptorChanges() {
		exists := false
		for _, currentValue := range o.MetricDescriptorChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *metric_descriptor.MetricDescriptorChange
			if sourceValue != nil {
				newDstElement = new(metric_descriptor.MetricDescriptorChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.MetricDescriptorChanges = append(o.MetricDescriptorChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchMetricDescriptorsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchMetricDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMetricDescriptorsResponse))
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) MakeFullFieldMask() *WatchMetricDescriptorsResponse_PageTokenChange_FieldMask {
	return FullWatchMetricDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMetricDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchMetricDescriptorsResponse_PageTokenChange) *WatchMetricDescriptorsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchMetricDescriptorsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMetricDescriptorsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchMetricDescriptorsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchMetricDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMetricDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) Clone() *WatchMetricDescriptorsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchMetricDescriptorsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &metric_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &metric_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) Merge(source *WatchMetricDescriptorsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &metric_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &metric_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchMetricDescriptorsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMetricDescriptorsResponse_PageTokenChange))
}

func (o *UpdateMetricDescriptorRequest) GotenObjectExt() {}

func (o *UpdateMetricDescriptorRequest) MakeFullFieldMask() *UpdateMetricDescriptorRequest_FieldMask {
	return FullUpdateMetricDescriptorRequest_FieldMask()
}

func (o *UpdateMetricDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMetricDescriptorRequest_FieldMask()
}

func (o *UpdateMetricDescriptorRequest) MakeDiffFieldMask(other *UpdateMetricDescriptorRequest) *UpdateMetricDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateMetricDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMetricDescriptorRequest_FieldMask()
	}

	res := &UpdateMetricDescriptorRequest_FieldMask{}
	{
		subMask := o.GetMetricDescriptor().MakeDiffFieldMask(other.GetMetricDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldSubPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorMetricDescriptor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldTerminalPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMetricDescriptorRequest_FieldSubPath{selector: UpdateMetricDescriptorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateMetricDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMetricDescriptorRequest))
}

func (o *UpdateMetricDescriptorRequest) Clone() *UpdateMetricDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateMetricDescriptorRequest{}
	result.MetricDescriptor = o.MetricDescriptor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateMetricDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMetricDescriptorRequest) Merge(source *UpdateMetricDescriptorRequest) {
	if source.GetMetricDescriptor() != nil {
		if o.MetricDescriptor == nil {
			o.MetricDescriptor = new(metric_descriptor.MetricDescriptor)
		}
		o.MetricDescriptor.Merge(source.GetMetricDescriptor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateMetricDescriptorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateMetricDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMetricDescriptorRequest))
}

func (o *UpdateMetricDescriptorRequest_CAS) GotenObjectExt() {}

func (o *UpdateMetricDescriptorRequest_CAS) MakeFullFieldMask() *UpdateMetricDescriptorRequest_CAS_FieldMask {
	return FullUpdateMetricDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMetricDescriptorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMetricDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMetricDescriptorRequest_CAS) MakeDiffFieldMask(other *UpdateMetricDescriptorRequest_CAS) *UpdateMetricDescriptorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateMetricDescriptorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMetricDescriptorRequest_CAS_FieldMask()
	}

	res := &UpdateMetricDescriptorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMetricDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMetricDescriptorRequestCAS_FieldSubPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateMetricDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMetricDescriptorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateMetricDescriptorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMetricDescriptorRequest_CAS))
}

func (o *UpdateMetricDescriptorRequest_CAS) Clone() *UpdateMetricDescriptorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateMetricDescriptorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*metric_descriptor.MetricDescriptor_FieldMask)
	return result
}

func (o *UpdateMetricDescriptorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMetricDescriptorRequest_CAS) Merge(source *UpdateMetricDescriptorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(metric_descriptor.MetricDescriptor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(metric_descriptor.MetricDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateMetricDescriptorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMetricDescriptorRequest_CAS))
}
