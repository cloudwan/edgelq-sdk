// Code generated by protoc-gen-goten-client
// API: AlertingPolicyService
// DO NOT EDIT!!!

package alerting_policy_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlertingPolicyServiceClient is the client API for AlertingPolicyService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertingPolicyServiceClient interface {
	GetAlertingPolicy(ctx context.Context, in *GetAlertingPolicyRequest, opts ...grpc.CallOption) (*alerting_policy.AlertingPolicy, error)
	BatchGetAlertingPolicies(ctx context.Context, in *BatchGetAlertingPoliciesRequest, opts ...grpc.CallOption) (*BatchGetAlertingPoliciesResponse, error)
	ListAlertingPolicies(ctx context.Context, in *ListAlertingPoliciesRequest, opts ...grpc.CallOption) (*ListAlertingPoliciesResponse, error)
	WatchAlertingPolicy(ctx context.Context, in *WatchAlertingPolicyRequest, opts ...grpc.CallOption) (WatchAlertingPolicyClientStream, error)
	WatchAlertingPolicies(ctx context.Context, in *WatchAlertingPoliciesRequest, opts ...grpc.CallOption) (WatchAlertingPoliciesClientStream, error)
	CreateAlertingPolicy(ctx context.Context, in *CreateAlertingPolicyRequest, opts ...grpc.CallOption) (*alerting_policy.AlertingPolicy, error)
	UpdateAlertingPolicy(ctx context.Context, in *UpdateAlertingPolicyRequest, opts ...grpc.CallOption) (*alerting_policy.AlertingPolicy, error)
	DeleteAlertingPolicy(ctx context.Context, in *DeleteAlertingPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAlertingPolicyServiceClient(cc grpc.ClientConnInterface) AlertingPolicyServiceClient {
	return &client{cc}
}

func (c *client) GetAlertingPolicy(ctx context.Context, in *GetAlertingPolicyRequest, opts ...grpc.CallOption) (*alerting_policy.AlertingPolicy, error) {
	out := new(alerting_policy.AlertingPolicy)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertingPolicyService/GetAlertingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAlertingPolicies(ctx context.Context, in *BatchGetAlertingPoliciesRequest, opts ...grpc.CallOption) (*BatchGetAlertingPoliciesResponse, error) {
	out := new(BatchGetAlertingPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertingPolicyService/BatchGetAlertingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAlertingPolicies(ctx context.Context, in *ListAlertingPoliciesRequest, opts ...grpc.CallOption) (*ListAlertingPoliciesResponse, error) {
	out := new(ListAlertingPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertingPolicyService/ListAlertingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAlertingPolicy(ctx context.Context, in *WatchAlertingPolicyRequest, opts ...grpc.CallOption) (WatchAlertingPolicyClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAlertingPolicy",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.AlertingPolicyService/WatchAlertingPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAlertingPolicyWatchAlertingPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAlertingPolicyClientStream interface {
	Recv() (*WatchAlertingPolicyResponse, error)
	grpc.ClientStream
}

type watchAlertingPolicyWatchAlertingPolicyClient struct {
	grpc.ClientStream
}

func (x *watchAlertingPolicyWatchAlertingPolicyClient) Recv() (*WatchAlertingPolicyResponse, error) {
	m := new(WatchAlertingPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAlertingPolicies(ctx context.Context, in *WatchAlertingPoliciesRequest, opts ...grpc.CallOption) (WatchAlertingPoliciesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAlertingPolicies",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.AlertingPolicyService/WatchAlertingPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAlertingPoliciesWatchAlertingPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAlertingPoliciesClientStream interface {
	Recv() (*WatchAlertingPoliciesResponse, error)
	grpc.ClientStream
}

type watchAlertingPoliciesWatchAlertingPoliciesClient struct {
	grpc.ClientStream
}

func (x *watchAlertingPoliciesWatchAlertingPoliciesClient) Recv() (*WatchAlertingPoliciesResponse, error) {
	m := new(WatchAlertingPoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAlertingPolicy(ctx context.Context, in *CreateAlertingPolicyRequest, opts ...grpc.CallOption) (*alerting_policy.AlertingPolicy, error) {
	out := new(alerting_policy.AlertingPolicy)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertingPolicyService/CreateAlertingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAlertingPolicy(ctx context.Context, in *UpdateAlertingPolicyRequest, opts ...grpc.CallOption) (*alerting_policy.AlertingPolicy, error) {
	out := new(alerting_policy.AlertingPolicy)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertingPolicyService/UpdateAlertingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAlertingPolicy(ctx context.Context, in *DeleteAlertingPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertingPolicyService/DeleteAlertingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
