// Code generated by protoc-gen-goten-client
// API: AlertingPolicyService
// DO NOT EDIT!!!

package alerting_policy_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized             bool
	alertingPolicyServiceDescriptor    *AlertingPolicyServiceDescriptor
	getAlertingPolicyDescriptor        *GetAlertingPolicyDescriptor
	batchGetAlertingPoliciesDescriptor *BatchGetAlertingPoliciesDescriptor
	listAlertingPoliciesDescriptor     *ListAlertingPoliciesDescriptor
	watchAlertingPolicyDescriptor      *WatchAlertingPolicyDescriptor
	watchAlertingPoliciesDescriptor    *WatchAlertingPoliciesDescriptor
	createAlertingPolicyDescriptor     *CreateAlertingPolicyDescriptor
	updateAlertingPolicyDescriptor     *UpdateAlertingPolicyDescriptor
	deleteAlertingPolicyDescriptor     *DeleteAlertingPolicyDescriptor
)

type GetAlertingPolicyDescriptor struct{}

type GetAlertingPolicyDescriptorClientMsgHandle struct{}

type GetAlertingPolicyDescriptorServerMsgHandle struct{}

func (d *GetAlertingPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAlertingPolicyRequest{}
}

func (d *GetAlertingPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &alerting_policy.AlertingPolicy{}
}

func (d *GetAlertingPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *GetAlertingPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAlertingPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAlertingPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetAlertingPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetAlertingPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetAlertingPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAlertingPolicyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAlertingPolicyDescriptor) GetMethodName() string {
	return "GetAlertingPolicy"
}

func (d *GetAlertingPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/GetAlertingPolicy"
}

func (d *GetAlertingPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *GetAlertingPolicyDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *GetAlertingPolicyDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetAlertingPolicyDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *GetAlertingPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *GetAlertingPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *GetAlertingPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAlertingPolicyDescriptorClientMsgHandle{}
}

func (d *GetAlertingPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAlertingPolicyDescriptorServerMsgHandle{}
}

func (h *GetAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetAlertingPolicyRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*alerting_policy.Name)(nil)
}

func (h *GetAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetAlertingPolicyRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetAlertingPolicyRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*alerting_policy.AlertingPolicy) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*alerting_policy.AlertingPolicy) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*alerting_policy.AlertingPolicy) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetAlertingPolicyDescriptor() *GetAlertingPolicyDescriptor {
	return getAlertingPolicyDescriptor
}

type BatchGetAlertingPoliciesDescriptor struct{}

type BatchGetAlertingPoliciesDescriptorClientMsgHandle struct{}

type BatchGetAlertingPoliciesDescriptorServerMsgHandle struct{}

func (d *BatchGetAlertingPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAlertingPoliciesRequest{}
}

func (d *BatchGetAlertingPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAlertingPoliciesResponse{}
}

func (d *BatchGetAlertingPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAlertingPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAlertingPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAlertingPoliciesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetAlertingPoliciesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetAlertingPoliciesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetAlertingPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAlertingPoliciesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetMethodName() string {
	return "BatchGetAlertingPolicies"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/BatchGetAlertingPolicies"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *BatchGetAlertingPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *BatchGetAlertingPoliciesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *BatchGetAlertingPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAlertingPoliciesDescriptorClientMsgHandle{}
}

func (d *BatchGetAlertingPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAlertingPoliciesDescriptorServerMsgHandle{}
}

func (h *BatchGetAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAlertingPoliciesRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAlertingPoliciesRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(alerting_policy.AlertingPolicyNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (alerting_policy.AlertingPolicyNameList)(nil)
}

func (h *BatchGetAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAlertingPoliciesRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAlertingPoliciesResponse) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAlertingPoliciesResponse) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAlertingPolicies()
	list := make(alerting_policy.AlertingPolicyNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAlertingPoliciesResponse) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetAlertingPoliciesDescriptor() *BatchGetAlertingPoliciesDescriptor {
	return batchGetAlertingPoliciesDescriptor
}

type ListAlertingPoliciesDescriptor struct{}

type ListAlertingPoliciesDescriptorClientMsgHandle struct{}

type ListAlertingPoliciesDescriptorServerMsgHandle struct{}

func (d *ListAlertingPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAlertingPoliciesRequest{}
}

func (d *ListAlertingPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAlertingPoliciesResponse{}
}

func (d *ListAlertingPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *ListAlertingPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAlertingPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAlertingPoliciesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListAlertingPoliciesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListAlertingPoliciesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListAlertingPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAlertingPoliciesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAlertingPoliciesDescriptor) GetMethodName() string {
	return "ListAlertingPolicies"
}

func (d *ListAlertingPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/ListAlertingPolicies"
}

func (d *ListAlertingPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *ListAlertingPoliciesDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *ListAlertingPoliciesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListAlertingPoliciesDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *ListAlertingPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *ListAlertingPoliciesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *ListAlertingPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAlertingPoliciesDescriptorClientMsgHandle{}
}

func (d *ListAlertingPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAlertingPoliciesDescriptorServerMsgHandle{}
}

func (h *ListAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAlertingPoliciesRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAlertingPoliciesRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAlertingPoliciesRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAlertingPoliciesResponse) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAlertingPoliciesResponse) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAlertingPolicies()
	list := make(alerting_policy.AlertingPolicyNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAlertingPoliciesResponse) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListAlertingPoliciesDescriptor() *ListAlertingPoliciesDescriptor {
	return listAlertingPoliciesDescriptor
}

type WatchAlertingPolicyDescriptor struct{}

type WatchAlertingPolicyDescriptorClientMsgHandle struct{}

type WatchAlertingPolicyDescriptorServerMsgHandle struct{}

func (d *WatchAlertingPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAlertingPolicyRequest{}
}

func (d *WatchAlertingPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAlertingPolicyResponse{}
}

func (d *WatchAlertingPolicyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAlertingPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAlertingPolicyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAlertingPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchAlertingPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchAlertingPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAlertingPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAlertingPolicyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAlertingPolicyDescriptor) GetMethodName() string {
	return "WatchAlertingPolicy"
}

func (d *WatchAlertingPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/WatchAlertingPolicy"
}

func (d *WatchAlertingPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchAlertingPolicyDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *WatchAlertingPolicyDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchAlertingPolicyDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchAlertingPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *WatchAlertingPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *WatchAlertingPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertingPolicyDescriptorClientMsgHandle{}
}

func (d *WatchAlertingPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertingPolicyDescriptorServerMsgHandle{}
}

func (h *WatchAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertingPolicyRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*alerting_policy.Name)(nil)
}

func (h *WatchAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertingPolicyRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertingPolicyRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertingPolicyResponse) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *alerting_policy.AlertingPolicyChange_Added_:
			return tResChange.Added.GetAlertingPolicy().GetName()
		case *alerting_policy.AlertingPolicyChange_Modified_:
			return tResChange.Modified.GetName()
		case *alerting_policy.AlertingPolicyChange_Removed_:
			return tResChange.Removed.GetName()
		case *alerting_policy.AlertingPolicyChange_Current_:
			return tResChange.Current.GetAlertingPolicy().GetName()
		}
	}
	return (*alerting_policy.Name)(nil)
}

func (h *WatchAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertingPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertingPolicyResponse) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertingPolicyResponse) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAlertingPolicyDescriptor() *WatchAlertingPolicyDescriptor {
	return watchAlertingPolicyDescriptor
}

type WatchAlertingPoliciesDescriptor struct{}

type WatchAlertingPoliciesDescriptorClientMsgHandle struct{}

type WatchAlertingPoliciesDescriptorServerMsgHandle struct{}

func (d *WatchAlertingPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAlertingPoliciesRequest{}
}

func (d *WatchAlertingPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAlertingPoliciesResponse{}
}

func (d *WatchAlertingPoliciesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAlertingPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAlertingPoliciesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAlertingPoliciesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchAlertingPoliciesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchAlertingPoliciesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAlertingPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAlertingPoliciesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAlertingPoliciesDescriptor) GetMethodName() string {
	return "WatchAlertingPolicies"
}

func (d *WatchAlertingPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/WatchAlertingPolicies"
}

func (d *WatchAlertingPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchAlertingPoliciesDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *WatchAlertingPoliciesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchAlertingPoliciesDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchAlertingPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *WatchAlertingPoliciesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *WatchAlertingPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertingPoliciesDescriptorClientMsgHandle{}
}

func (d *WatchAlertingPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertingPoliciesDescriptorServerMsgHandle{}
}

func (h *WatchAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertingPoliciesRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertingPoliciesRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAlertingPoliciesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertingPoliciesRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*alerting_policy.ParentName)(nil)
}

func (h *WatchAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertingPoliciesResponse) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertingPoliciesResponse) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetAlertingPolicyChanges()
	list := make(alerting_policy.AlertingPolicyNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *alerting_policy.AlertingPolicyChange_Added_:
			list = append(list, tResChange.Added.GetAlertingPolicy().GetName())
		case *alerting_policy.AlertingPolicyChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *alerting_policy.AlertingPolicyChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *alerting_policy.AlertingPolicyChange_Current_:
			list = append(list, tResChange.Current.GetAlertingPolicy().GetName())
		}
	}
	return list
}

func (h *WatchAlertingPoliciesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertingPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertingPoliciesResponse) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAlertingPoliciesDescriptor() *WatchAlertingPoliciesDescriptor {
	return watchAlertingPoliciesDescriptor
}

type CreateAlertingPolicyDescriptor struct{}

type CreateAlertingPolicyDescriptorClientMsgHandle struct{}

type CreateAlertingPolicyDescriptorServerMsgHandle struct{}

func (d *CreateAlertingPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAlertingPolicyRequest{}
}

func (d *CreateAlertingPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &alerting_policy.AlertingPolicy{}
}

func (d *CreateAlertingPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAlertingPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAlertingPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAlertingPolicyDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateAlertingPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateAlertingPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateAlertingPolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAlertingPolicyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAlertingPolicyDescriptor) GetMethodName() string {
	return "CreateAlertingPolicy"
}

func (d *CreateAlertingPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/CreateAlertingPolicy"
}

func (d *CreateAlertingPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *CreateAlertingPolicyDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *CreateAlertingPolicyDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreateAlertingPolicyDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *CreateAlertingPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *CreateAlertingPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *CreateAlertingPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAlertingPolicyDescriptorClientMsgHandle{}
}

func (d *CreateAlertingPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAlertingPolicyDescriptorServerMsgHandle{}
}

func (h *CreateAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateAlertingPolicyRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetAlertingPolicy().GetName()
}

func (h *CreateAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateAlertingPolicyRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateAlertingPolicyRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*alerting_policy.ParentName)(nil)
}

func (h *CreateAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*alerting_policy.AlertingPolicy) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*alerting_policy.AlertingPolicy) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*alerting_policy.AlertingPolicy) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateAlertingPolicyDescriptor() *CreateAlertingPolicyDescriptor {
	return createAlertingPolicyDescriptor
}

type UpdateAlertingPolicyDescriptor struct{}

type UpdateAlertingPolicyDescriptorClientMsgHandle struct{}

type UpdateAlertingPolicyDescriptorServerMsgHandle struct{}

func (d *UpdateAlertingPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAlertingPolicyRequest{}
}

func (d *UpdateAlertingPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &alerting_policy.AlertingPolicy{}
}

func (d *UpdateAlertingPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAlertingPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAlertingPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAlertingPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateAlertingPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateAlertingPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateAlertingPolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAlertingPolicyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAlertingPolicyDescriptor) GetMethodName() string {
	return "UpdateAlertingPolicy"
}

func (d *UpdateAlertingPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/UpdateAlertingPolicy"
}

func (d *UpdateAlertingPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *UpdateAlertingPolicyDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *UpdateAlertingPolicyDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *UpdateAlertingPolicyDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *UpdateAlertingPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *UpdateAlertingPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *UpdateAlertingPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAlertingPolicyDescriptorClientMsgHandle{}
}

func (d *UpdateAlertingPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAlertingPolicyDescriptorServerMsgHandle{}
}

func (h *UpdateAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateAlertingPolicyRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetAlertingPolicy().GetName()
}

func (h *UpdateAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateAlertingPolicyRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateAlertingPolicyRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*alerting_policy.AlertingPolicy) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*alerting_policy.AlertingPolicy) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alerting_policy.AlertingPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*alerting_policy.AlertingPolicy) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateAlertingPolicyDescriptor() *UpdateAlertingPolicyDescriptor {
	return updateAlertingPolicyDescriptor
}

type DeleteAlertingPolicyDescriptor struct{}

type DeleteAlertingPolicyDescriptorClientMsgHandle struct{}

type DeleteAlertingPolicyDescriptorServerMsgHandle struct{}

func (d *DeleteAlertingPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAlertingPolicyRequest{}
}

func (d *DeleteAlertingPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAlertingPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAlertingPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAlertingPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAlertingPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteAlertingPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteAlertingPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteAlertingPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAlertingPolicyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAlertingPolicyDescriptor) GetMethodName() string {
	return "DeleteAlertingPolicy"
}

func (d *DeleteAlertingPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService/DeleteAlertingPolicy"
}

func (d *DeleteAlertingPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *DeleteAlertingPolicyDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *DeleteAlertingPolicyDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeleteAlertingPolicyDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *DeleteAlertingPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertingPolicyServiceDescriptor
}

func (d *DeleteAlertingPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alerting_policy.GetDescriptor()
}

func (d *DeleteAlertingPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAlertingPolicyDescriptorClientMsgHandle{}
}

func (d *DeleteAlertingPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAlertingPolicyDescriptorServerMsgHandle{}
}

func (h *DeleteAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteAlertingPolicyRequest) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*alerting_policy.Name)(nil)
}

func (h *DeleteAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteAlertingPolicyRequest) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAlertingPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAlertingPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteAlertingPolicyRequest) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *alerting_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*alerting_policy.Name
	})
	if ok {
		return alerting_policy.AlertingPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAlertingPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *alerting_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteAlertingPolicyDescriptor() *DeleteAlertingPolicyDescriptor {
	return deleteAlertingPolicyDescriptor
}

type AlertingPolicyServiceDescriptor struct{}

func (d *AlertingPolicyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAlertingPolicyDescriptor,
		batchGetAlertingPoliciesDescriptor,
		listAlertingPoliciesDescriptor,
		watchAlertingPolicyDescriptor,
		watchAlertingPoliciesDescriptor,
		createAlertingPolicyDescriptor,
		updateAlertingPolicyDescriptor,
		deleteAlertingPolicyDescriptor,
	}
}

func (d *AlertingPolicyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v3.AlertingPolicyService"
}

func (d *AlertingPolicyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *AlertingPolicyServiceDescriptor) GetApiName() string {
	return "AlertingPolicyService"
}

func (d *AlertingPolicyServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *AlertingPolicyServiceDescriptor) GetServiceVersion() string {
	return "v3"
}

func GetAlertingPolicyServiceDescriptor() *AlertingPolicyServiceDescriptor {
	return alertingPolicyServiceDescriptor
}

func initDescriptors() {
	alertingPolicyServiceDescriptor = &AlertingPolicyServiceDescriptor{}
	getAlertingPolicyDescriptor = &GetAlertingPolicyDescriptor{}
	batchGetAlertingPoliciesDescriptor = &BatchGetAlertingPoliciesDescriptor{}
	listAlertingPoliciesDescriptor = &ListAlertingPoliciesDescriptor{}
	watchAlertingPolicyDescriptor = &WatchAlertingPolicyDescriptor{}
	watchAlertingPoliciesDescriptor = &WatchAlertingPoliciesDescriptor{}
	createAlertingPolicyDescriptor = &CreateAlertingPolicyDescriptor{}
	updateAlertingPolicyDescriptor = &UpdateAlertingPolicyDescriptor{}
	deleteAlertingPolicyDescriptor = &DeleteAlertingPolicyDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(alertingPolicyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAlertingPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAlertingPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAlertingPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAlertingPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAlertingPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAlertingPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAlertingPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAlertingPolicyDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
