// Code generated by protoc-gen-goten-client
// API: AlertService
// DO NOT EDIT!!!

package alert_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alert"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized   bool
	alertServiceDescriptor   *AlertServiceDescriptor
	getAlertDescriptor       *GetAlertDescriptor
	batchGetAlertsDescriptor *BatchGetAlertsDescriptor
	listAlertsDescriptor     *ListAlertsDescriptor
	watchAlertDescriptor     *WatchAlertDescriptor
	watchAlertsDescriptor    *WatchAlertsDescriptor
	createAlertDescriptor    *CreateAlertDescriptor
	updateAlertDescriptor    *UpdateAlertDescriptor
	deleteAlertDescriptor    *DeleteAlertDescriptor
)

type GetAlertDescriptor struct{}

type GetAlertDescriptorClientMsgHandle struct{}

type GetAlertDescriptorServerMsgHandle struct{}

func (d *GetAlertDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAlertRequest{}
}

func (d *GetAlertDescriptor) NewEmptyServerMsg() proto.Message {
	return &alert.Alert{}
}

func (d *GetAlertDescriptor) IsUnary() bool {
	return true
}

func (d *GetAlertDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAlertDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAlertDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetAlertDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetAlertDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetAlertDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAlertDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAlertDescriptor) GetMethodName() string {
	return "GetAlert"
}

func (d *GetAlertDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/GetAlert"
}

func (d *GetAlertDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *GetAlertDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *GetAlertDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetAlertDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *GetAlertDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *GetAlertDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *GetAlertDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAlertDescriptorClientMsgHandle{}
}

func (d *GetAlertDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAlertDescriptorServerMsgHandle{}
}

func (h *GetAlertDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetAlertRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*alert.Name)(nil)
}

func (h *GetAlertDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetAlertRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAlertDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetAlertRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetAlertDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*alert.Alert) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetAlertDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*alert.Alert) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAlertDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*alert.Alert) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetAlertDescriptor() *GetAlertDescriptor {
	return getAlertDescriptor
}

type BatchGetAlertsDescriptor struct{}

type BatchGetAlertsDescriptorClientMsgHandle struct{}

type BatchGetAlertsDescriptorServerMsgHandle struct{}

func (d *BatchGetAlertsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAlertsRequest{}
}

func (d *BatchGetAlertsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAlertsResponse{}
}

func (d *BatchGetAlertsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAlertsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAlertsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAlertsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetAlertsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetAlertsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetAlertsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAlertsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAlertsDescriptor) GetMethodName() string {
	return "BatchGetAlerts"
}

func (d *BatchGetAlertsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/BatchGetAlerts"
}

func (d *BatchGetAlertsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *BatchGetAlertsDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *BatchGetAlertsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetAlertsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *BatchGetAlertsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *BatchGetAlertsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *BatchGetAlertsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAlertsDescriptorClientMsgHandle{}
}

func (d *BatchGetAlertsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAlertsDescriptorServerMsgHandle{}
}

func (h *BatchGetAlertsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAlertsRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAlertsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAlertsRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(alert.AlertNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (alert.AlertNameList)(nil)
}

func (h *BatchGetAlertsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAlertsRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetAlertsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAlertsResponse) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAlertsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAlertsResponse) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAlerts()
	list := make(alert.AlertNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetAlertsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAlertsResponse) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetAlertsDescriptor() *BatchGetAlertsDescriptor {
	return batchGetAlertsDescriptor
}

type ListAlertsDescriptor struct{}

type ListAlertsDescriptorClientMsgHandle struct{}

type ListAlertsDescriptorServerMsgHandle struct{}

func (d *ListAlertsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAlertsRequest{}
}

func (d *ListAlertsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAlertsResponse{}
}

func (d *ListAlertsDescriptor) IsUnary() bool {
	return true
}

func (d *ListAlertsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAlertsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAlertsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListAlertsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListAlertsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListAlertsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAlertsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAlertsDescriptor) GetMethodName() string {
	return "ListAlerts"
}

func (d *ListAlertsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/ListAlerts"
}

func (d *ListAlertsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *ListAlertsDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *ListAlertsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListAlertsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *ListAlertsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *ListAlertsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *ListAlertsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAlertsDescriptorClientMsgHandle{}
}

func (d *ListAlertsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAlertsDescriptorServerMsgHandle{}
}

func (h *ListAlertsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAlertsRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAlertsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAlertsRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAlertsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAlertsRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListAlertsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAlertsResponse) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAlertsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAlertsResponse) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAlerts()
	list := make(alert.AlertNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListAlertsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAlertsResponse) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListAlertsDescriptor() *ListAlertsDescriptor {
	return listAlertsDescriptor
}

type WatchAlertDescriptor struct{}

type WatchAlertDescriptorClientMsgHandle struct{}

type WatchAlertDescriptorServerMsgHandle struct{}

func (d *WatchAlertDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAlertRequest{}
}

func (d *WatchAlertDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAlertResponse{}
}

func (d *WatchAlertDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAlertDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAlertDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAlertDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchAlertDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchAlertDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAlertDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAlertDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAlertDescriptor) GetMethodName() string {
	return "WatchAlert"
}

func (d *WatchAlertDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/WatchAlert"
}

func (d *WatchAlertDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchAlertDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *WatchAlertDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchAlertDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchAlertDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *WatchAlertDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *WatchAlertDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertDescriptorClientMsgHandle{}
}

func (d *WatchAlertDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertDescriptorServerMsgHandle{}
}

func (h *WatchAlertDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*alert.Name)(nil)
}

func (h *WatchAlertDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAlertDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchAlertDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertResponse) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *alert.AlertChange_Added_:
			return tResChange.Added.GetAlert().GetName()
		case *alert.AlertChange_Modified_:
			return tResChange.Modified.GetName()
		case *alert.AlertChange_Removed_:
			return tResChange.Removed.GetName()
		case *alert.AlertChange_Current_:
			return tResChange.Current.GetAlert().GetName()
		}
	}
	return (*alert.Name)(nil)
}

func (h *WatchAlertDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertResponse) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAlertDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertResponse) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAlertDescriptor() *WatchAlertDescriptor {
	return watchAlertDescriptor
}

type WatchAlertsDescriptor struct{}

type WatchAlertsDescriptorClientMsgHandle struct{}

type WatchAlertsDescriptorServerMsgHandle struct{}

func (d *WatchAlertsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAlertsRequest{}
}

func (d *WatchAlertsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAlertsResponse{}
}

func (d *WatchAlertsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAlertsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAlertsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAlertsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchAlertsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchAlertsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAlertsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAlertsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAlertsDescriptor) GetMethodName() string {
	return "WatchAlerts"
}

func (d *WatchAlertsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/WatchAlerts"
}

func (d *WatchAlertsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchAlertsDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *WatchAlertsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchAlertsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchAlertsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *WatchAlertsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *WatchAlertsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertsDescriptorClientMsgHandle{}
}

func (d *WatchAlertsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAlertsDescriptorServerMsgHandle{}
}

func (h *WatchAlertsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertsRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAlertsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertsRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAlertsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertsRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*alert.ParentName)(nil)
}

func (h *WatchAlertsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAlertsResponse) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAlertsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAlertsResponse) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetAlertChanges()
	list := make(alert.AlertNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *alert.AlertChange_Added_:
			list = append(list, tResChange.Added.GetAlert().GetName())
		case *alert.AlertChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *alert.AlertChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *alert.AlertChange_Current_:
			list = append(list, tResChange.Current.GetAlert().GetName())
		}
	}
	return list
}

func (h *WatchAlertsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAlertsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAlertsResponse) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAlertsDescriptor() *WatchAlertsDescriptor {
	return watchAlertsDescriptor
}

type CreateAlertDescriptor struct{}

type CreateAlertDescriptorClientMsgHandle struct{}

type CreateAlertDescriptorServerMsgHandle struct{}

func (d *CreateAlertDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAlertRequest{}
}

func (d *CreateAlertDescriptor) NewEmptyServerMsg() proto.Message {
	return &alert.Alert{}
}

func (d *CreateAlertDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAlertDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAlertDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAlertDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateAlertDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateAlertDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateAlertDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAlertDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAlertDescriptor) GetMethodName() string {
	return "CreateAlert"
}

func (d *CreateAlertDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/CreateAlert"
}

func (d *CreateAlertDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *CreateAlertDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *CreateAlertDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreateAlertDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *CreateAlertDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *CreateAlertDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *CreateAlertDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAlertDescriptorClientMsgHandle{}
}

func (d *CreateAlertDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAlertDescriptorServerMsgHandle{}
}

func (h *CreateAlertDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateAlertRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetAlert().GetName()
}

func (h *CreateAlertDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateAlertRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAlertDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateAlertRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*alert.ParentName)(nil)
}

func (h *CreateAlertDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*alert.Alert) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateAlertDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*alert.Alert) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAlertDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*alert.Alert) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateAlertDescriptor() *CreateAlertDescriptor {
	return createAlertDescriptor
}

type UpdateAlertDescriptor struct{}

type UpdateAlertDescriptorClientMsgHandle struct{}

type UpdateAlertDescriptorServerMsgHandle struct{}

func (d *UpdateAlertDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAlertRequest{}
}

func (d *UpdateAlertDescriptor) NewEmptyServerMsg() proto.Message {
	return &alert.Alert{}
}

func (d *UpdateAlertDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAlertDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAlertDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAlertDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateAlertDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateAlertDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateAlertDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAlertDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAlertDescriptor) GetMethodName() string {
	return "UpdateAlert"
}

func (d *UpdateAlertDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/UpdateAlert"
}

func (d *UpdateAlertDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *UpdateAlertDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *UpdateAlertDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *UpdateAlertDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *UpdateAlertDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *UpdateAlertDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *UpdateAlertDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAlertDescriptorClientMsgHandle{}
}

func (d *UpdateAlertDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAlertDescriptorServerMsgHandle{}
}

func (h *UpdateAlertDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateAlertRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetAlert().GetName()
}

func (h *UpdateAlertDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateAlertRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAlertDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateAlertRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateAlertDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*alert.Alert) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateAlertDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*alert.Alert) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAlertDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*alert.Alert)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*alert.Alert) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateAlertDescriptor() *UpdateAlertDescriptor {
	return updateAlertDescriptor
}

type DeleteAlertDescriptor struct{}

type DeleteAlertDescriptorClientMsgHandle struct{}

type DeleteAlertDescriptorServerMsgHandle struct{}

func (d *DeleteAlertDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAlertRequest{}
}

func (d *DeleteAlertDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAlertDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAlertDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAlertDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAlertDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteAlertDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteAlertDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteAlertDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAlertDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAlertDescriptor) GetMethodName() string {
	return "DeleteAlert"
}

func (d *DeleteAlertDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.AlertService/DeleteAlert"
}

func (d *DeleteAlertDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *DeleteAlertDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *DeleteAlertDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeleteAlertDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *DeleteAlertDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return alertServiceDescriptor
}

func (d *DeleteAlertDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return alert.GetDescriptor()
}

func (d *DeleteAlertDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAlertDescriptorClientMsgHandle{}
}

func (d *DeleteAlertDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAlertDescriptorServerMsgHandle{}
}

func (h *DeleteAlertDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteAlertRequest) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*alert.Name)(nil)
}

func (h *DeleteAlertDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteAlertRequest) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAlertDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAlertRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteAlertRequest) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteAlertDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *alert.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAlertDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*alert.Name
	})
	if ok {
		return alert.AlertNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAlertDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *alert.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteAlertDescriptor() *DeleteAlertDescriptor {
	return deleteAlertDescriptor
}

type AlertServiceDescriptor struct{}

func (d *AlertServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAlertDescriptor,
		batchGetAlertsDescriptor,
		listAlertsDescriptor,
		watchAlertDescriptor,
		watchAlertsDescriptor,
		createAlertDescriptor,
		updateAlertDescriptor,
		deleteAlertDescriptor,
	}
}

func (d *AlertServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v3.AlertService"
}

func (d *AlertServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *AlertServiceDescriptor) GetApiName() string {
	return "AlertService"
}

func (d *AlertServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *AlertServiceDescriptor) GetServiceVersion() string {
	return "v3"
}

func GetAlertServiceDescriptor() *AlertServiceDescriptor {
	return alertServiceDescriptor
}

func initDescriptors() {
	alertServiceDescriptor = &AlertServiceDescriptor{}
	getAlertDescriptor = &GetAlertDescriptor{}
	batchGetAlertsDescriptor = &BatchGetAlertsDescriptor{}
	listAlertsDescriptor = &ListAlertsDescriptor{}
	watchAlertDescriptor = &WatchAlertDescriptor{}
	watchAlertsDescriptor = &WatchAlertsDescriptor{}
	createAlertDescriptor = &CreateAlertDescriptor{}
	updateAlertDescriptor = &UpdateAlertDescriptor{}
	deleteAlertDescriptor = &DeleteAlertDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(alertServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAlertDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAlertsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAlertsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAlertDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAlertsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAlertDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAlertDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAlertDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
