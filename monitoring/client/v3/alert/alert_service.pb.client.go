// Code generated by protoc-gen-goten-client
// API: AlertService
// DO NOT EDIT!!!

package alert_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alert"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlertServiceClient is the client API for AlertService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertServiceClient interface {
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*alert.Alert, error)
	BatchGetAlerts(ctx context.Context, in *BatchGetAlertsRequest, opts ...grpc.CallOption) (*BatchGetAlertsResponse, error)
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	WatchAlert(ctx context.Context, in *WatchAlertRequest, opts ...grpc.CallOption) (WatchAlertClientStream, error)
	WatchAlerts(ctx context.Context, in *WatchAlertsRequest, opts ...grpc.CallOption) (WatchAlertsClientStream, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*alert.Alert, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*alert.Alert, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &client{cc}
}

func (c *client) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*alert.Alert, error) {
	out := new(alert.Alert)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAlerts(ctx context.Context, in *BatchGetAlertsRequest, opts ...grpc.CallOption) (*BatchGetAlertsResponse, error) {
	out := new(BatchGetAlertsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertService/BatchGetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertService/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAlert(ctx context.Context, in *WatchAlertRequest, opts ...grpc.CallOption) (WatchAlertClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAlert",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.AlertService/WatchAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAlertWatchAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAlertClientStream interface {
	Recv() (*WatchAlertResponse, error)
	grpc.ClientStream
}

type watchAlertWatchAlertClient struct {
	grpc.ClientStream
}

func (x *watchAlertWatchAlertClient) Recv() (*WatchAlertResponse, error) {
	m := new(WatchAlertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAlerts(ctx context.Context, in *WatchAlertsRequest, opts ...grpc.CallOption) (WatchAlertsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAlerts",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.AlertService/WatchAlerts", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAlertsWatchAlertsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAlertsClientStream interface {
	Recv() (*WatchAlertsResponse, error)
	grpc.ClientStream
}

type watchAlertsWatchAlertsClient struct {
	grpc.ClientStream
}

func (x *watchAlertsWatchAlertsClient) Recv() (*WatchAlertsResponse, error) {
	m := new(WatchAlertsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*alert.Alert, error) {
	out := new(alert.Alert)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*alert.Alert, error) {
	out := new(alert.Alert)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.AlertService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
