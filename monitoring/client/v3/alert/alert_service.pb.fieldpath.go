// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/alert_service.proto
// DO NOT EDIT!!!

package alert_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alert"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAlertRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAlertRequest_FieldPathSelector
	Get(source *GetAlertRequest) []interface{}
	GetSingle(source *GetAlertRequest) (interface{}, bool)
	ClearValue(item *GetAlertRequest)

	// Those methods build corresponding GetAlertRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAlertRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAlertRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAlertRequest_FieldPathArrayItemValue
}

type GetAlertRequest_FieldPathSelector int32

const (
	GetAlertRequest_FieldPathSelectorName      GetAlertRequest_FieldPathSelector = 0
	GetAlertRequest_FieldPathSelectorFieldMask GetAlertRequest_FieldPathSelector = 1
	GetAlertRequest_FieldPathSelectorView      GetAlertRequest_FieldPathSelector = 2
)

func (s GetAlertRequest_FieldPathSelector) String() string {
	switch s {
	case GetAlertRequest_FieldPathSelectorName:
		return "name"
	case GetAlertRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAlertRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", s))
	}
}

func BuildGetAlertRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAlertRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAlertRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAlertRequest_FieldTerminalPath{selector: GetAlertRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAlertRequest_FieldTerminalPath{selector: GetAlertRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAlertRequest_FieldTerminalPath{selector: GetAlertRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAlertRequest", fp)
}

func ParseGetAlertRequest_FieldPath(rawField string) (GetAlertRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAlertRequest_FieldPath(fp)
}

func MustParseGetAlertRequest_FieldPath(rawField string) GetAlertRequest_FieldPath {
	fp, err := ParseGetAlertRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAlertRequest_FieldTerminalPath struct {
	selector GetAlertRequest_FieldPathSelector
}

var _ GetAlertRequest_FieldPath = (*GetAlertRequest_FieldTerminalPath)(nil)

func (fp *GetAlertRequest_FieldTerminalPath) Selector() GetAlertRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAlertRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAlertRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAlertRequest
func (fp *GetAlertRequest_FieldTerminalPath) Get(source *GetAlertRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAlertRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAlertRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAlertRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAlertRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAlertRequest))
}

// GetSingle returns value pointed by specific field of from source GetAlertRequest
func (fp *GetAlertRequest_FieldTerminalPath) GetSingle(source *GetAlertRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAlertRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAlertRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAlertRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
	}
}

func (fp *GetAlertRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAlertRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAlertRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAlertRequest_FieldPathSelectorName:
		return (*alert.Reference)(nil)
	case GetAlertRequest_FieldPathSelectorFieldMask:
		return (*alert.Alert_FieldMask)(nil)
	case GetAlertRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
	}
}

func (fp *GetAlertRequest_FieldTerminalPath) ClearValue(item *GetAlertRequest) {
	if item != nil {
		switch fp.selector {
		case GetAlertRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAlertRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAlertRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAlertRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAlertRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAlertRequest_FieldPathSelectorName ||
		fp.selector == GetAlertRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAlertRequest_FieldPathSelectorView
}

func (fp *GetAlertRequest_FieldTerminalPath) WithIValue(value interface{}) GetAlertRequest_FieldPathValue {
	switch fp.selector {
	case GetAlertRequest_FieldPathSelectorName:
		return &GetAlertRequest_FieldTerminalPathValue{GetAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Reference)}
	case GetAlertRequest_FieldPathSelectorFieldMask:
		return &GetAlertRequest_FieldTerminalPathValue{GetAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	case GetAlertRequest_FieldPathSelectorView:
		return &GetAlertRequest_FieldTerminalPathValue{GetAlertRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
	}
}

func (fp *GetAlertRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAlertRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAlertRequest_FieldPathArrayOfValues {
	fpaov := &GetAlertRequest_FieldTerminalPathArrayOfValues{GetAlertRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAlertRequest_FieldPathSelectorName:
		return &GetAlertRequest_FieldTerminalPathArrayOfValues{GetAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Reference)}
	case GetAlertRequest_FieldPathSelectorFieldMask:
		return &GetAlertRequest_FieldTerminalPathArrayOfValues{GetAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	case GetAlertRequest_FieldPathSelectorView:
		return &GetAlertRequest_FieldTerminalPathArrayOfValues{GetAlertRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAlertRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAlertRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAlertRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fp.selector))
	}
}

func (fp *GetAlertRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAlertRequest_FieldPathValue allows storing values for GetAlertRequest fields according to their type
type GetAlertRequest_FieldPathValue interface {
	GetAlertRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAlertRequest)
	CompareWith(*GetAlertRequest) (cmp int, comparable bool)
}

func ParseGetAlertRequest_FieldPathValue(pathStr, valueStr string) (GetAlertRequest_FieldPathValue, error) {
	fp, err := ParseGetAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAlertRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAlertRequest_FieldPathValue), nil
}

func MustParseGetAlertRequest_FieldPathValue(pathStr, valueStr string) GetAlertRequest_FieldPathValue {
	fpv, err := ParseGetAlertRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAlertRequest_FieldTerminalPathValue struct {
	GetAlertRequest_FieldTerminalPath
	value interface{}
}

var _ GetAlertRequest_FieldPathValue = (*GetAlertRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAlertRequest' as interface{}
func (fpv *GetAlertRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAlertRequest_FieldTerminalPathValue) AsNameValue() (*alert.Reference, bool) {
	res, ok := fpv.value.(*alert.Reference)
	return res, ok
}
func (fpv *GetAlertRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}
func (fpv *GetAlertRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAlertRequest
func (fpv *GetAlertRequest_FieldTerminalPathValue) SetTo(target **GetAlertRequest) {
	if *target == nil {
		*target = new(GetAlertRequest)
	}
	switch fpv.selector {
	case GetAlertRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*alert.Reference)
	case GetAlertRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alert.Alert_FieldMask)
	case GetAlertRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fpv.selector))
	}
}

func (fpv *GetAlertRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAlertRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAlertRequest_FieldTerminalPathValue' with the value under path in 'GetAlertRequest'.
func (fpv *GetAlertRequest_FieldTerminalPathValue) CompareWith(source *GetAlertRequest) (int, bool) {
	switch fpv.selector {
	case GetAlertRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*alert.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAlertRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAlertRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAlertRequest: %d", fpv.selector))
	}
}

func (fpv *GetAlertRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAlertRequest))
}

// GetAlertRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAlertRequest according to their type
// Present only for array (repeated) types.
type GetAlertRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAlertRequest_FieldPath
	ContainsValue(*GetAlertRequest) bool
}

// ParseGetAlertRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAlertRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAlertRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAlertRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAlertRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAlertRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAlertRequest_FieldTerminalPathArrayItemValue struct {
	GetAlertRequest_FieldTerminalPath
	value interface{}
}

var _ GetAlertRequest_FieldPathArrayItemValue = (*GetAlertRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAlertRequest as interface{}
func (fpaiv *GetAlertRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAlertRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAlertRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAlertRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAlertRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAlertRequest'
func (fpaiv *GetAlertRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAlertRequest) bool {
	slice := fpaiv.GetAlertRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAlertRequest_FieldPathArrayOfValues allows storing slice of values for GetAlertRequest fields according to their type
type GetAlertRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAlertRequest_FieldPath
}

func ParseGetAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAlertRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAlertRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAlertRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAlertRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAlertRequest_FieldTerminalPathArrayOfValues struct {
	GetAlertRequest_FieldTerminalPath
	values interface{}
}

var _ GetAlertRequest_FieldPathArrayOfValues = (*GetAlertRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAlertRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAlertRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*alert.Reference) {
			values = append(values, v)
		}
	case GetAlertRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	case GetAlertRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAlertRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*alert.Reference, bool) {
	res, ok := fpaov.values.([]*alert.Reference)
	return res, ok
}
func (fpaov *GetAlertRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}
func (fpaov *GetAlertRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAlertsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAlertsRequest_FieldPathSelector
	Get(source *BatchGetAlertsRequest) []interface{}
	GetSingle(source *BatchGetAlertsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAlertsRequest)

	// Those methods build corresponding BatchGetAlertsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAlertsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAlertsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAlertsRequest_FieldPathArrayItemValue
}

type BatchGetAlertsRequest_FieldPathSelector int32

const (
	BatchGetAlertsRequest_FieldPathSelectorNames     BatchGetAlertsRequest_FieldPathSelector = 0
	BatchGetAlertsRequest_FieldPathSelectorFieldMask BatchGetAlertsRequest_FieldPathSelector = 1
	BatchGetAlertsRequest_FieldPathSelectorView      BatchGetAlertsRequest_FieldPathSelector = 2
)

func (s BatchGetAlertsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAlertsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", s))
	}
}

func BuildBatchGetAlertsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAlertsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAlertsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAlertsRequest", fp)
}

func ParseBatchGetAlertsRequest_FieldPath(rawField string) (BatchGetAlertsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAlertsRequest_FieldPath(fp)
}

func MustParseBatchGetAlertsRequest_FieldPath(rawField string) BatchGetAlertsRequest_FieldPath {
	fp, err := ParseBatchGetAlertsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAlertsRequest_FieldTerminalPath struct {
	selector BatchGetAlertsRequest_FieldPathSelector
}

var _ BatchGetAlertsRequest_FieldPath = (*BatchGetAlertsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAlertsRequest_FieldTerminalPath) Selector() BatchGetAlertsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAlertsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAlertsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAlertsRequest
func (fp *BatchGetAlertsRequest_FieldTerminalPath) Get(source *BatchGetAlertsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAlertsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAlertsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAlertsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAlertsRequest
func (fp *BatchGetAlertsRequest_FieldTerminalPath) GetSingle(source *BatchGetAlertsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAlertsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAlertsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAlertsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		return ([]*alert.Reference)(nil)
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		return (*alert.Alert_FieldMask)(nil)
	case BatchGetAlertsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) ClearValue(item *BatchGetAlertsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAlertsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAlertsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAlertsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAlertsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAlertsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAlertsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAlertsRequest_FieldPathSelectorView
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAlertsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		return &BatchGetAlertsRequest_FieldTerminalPathValue{BatchGetAlertsRequest_FieldTerminalPath: *fp, value: value.([]*alert.Reference)}
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAlertsRequest_FieldTerminalPathValue{BatchGetAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	case BatchGetAlertsRequest_FieldPathSelectorView:
		return &BatchGetAlertsRequest_FieldTerminalPathValue{BatchGetAlertsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAlertsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAlertsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		return &BatchGetAlertsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertsRequest_FieldTerminalPath: *fp, values: values.([][]*alert.Reference)}
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAlertsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	case BatchGetAlertsRequest_FieldPathSelectorView:
		return &BatchGetAlertsRequest_FieldTerminalPathArrayOfValues{BatchGetAlertsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAlertsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		return &BatchGetAlertsRequest_FieldTerminalPathArrayItemValue{BatchGetAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAlertsRequest_FieldPathValue allows storing values for BatchGetAlertsRequest fields according to their type
type BatchGetAlertsRequest_FieldPathValue interface {
	BatchGetAlertsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAlertsRequest)
	CompareWith(*BatchGetAlertsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAlertsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAlertsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAlertsRequest_FieldPathValue), nil
}

func MustParseBatchGetAlertsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAlertsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAlertsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAlertsRequest_FieldTerminalPathValue struct {
	BatchGetAlertsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertsRequest_FieldPathValue = (*BatchGetAlertsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAlertsRequest' as interface{}
func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) AsNamesValue() ([]*alert.Reference, bool) {
	res, ok := fpv.value.([]*alert.Reference)
	return res, ok
}
func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}
func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAlertsRequest
func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAlertsRequest) {
	if *target == nil {
		*target = new(BatchGetAlertsRequest)
	}
	switch fpv.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*alert.Reference)
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alert.Alert_FieldMask)
	case BatchGetAlertsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAlertsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAlertsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAlertsRequest'.
func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAlertsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAlertsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAlertsRequest))
}

// BatchGetAlertsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAlertsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAlertsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAlertsRequest_FieldPath
	ContainsValue(*BatchGetAlertsRequest) bool
}

// ParseBatchGetAlertsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAlertsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAlertsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAlertsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAlertsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAlertsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertsRequest_FieldPathArrayItemValue = (*BatchGetAlertsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAlertsRequest as interface{}
func (fpaiv *BatchGetAlertsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAlertsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*alert.Reference, bool) {
	res, ok := fpaiv.value.(*alert.Reference)
	return res, ok
}

func (fpaiv *BatchGetAlertsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAlertsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAlertsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAlertsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAlertsRequest'
func (fpaiv *BatchGetAlertsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAlertsRequest) bool {
	slice := fpaiv.BatchGetAlertsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAlertsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAlertsRequest fields according to their type
type BatchGetAlertsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAlertsRequest_FieldPath
}

func ParseBatchGetAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAlertsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAlertsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAlertsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAlertsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAlertsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAlertsRequest_FieldPathArrayOfValues = (*BatchGetAlertsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAlertsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAlertsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*alert.Reference) {
			values = append(values, v)
		}
	case BatchGetAlertsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAlertsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAlertsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*alert.Reference, bool) {
	res, ok := fpaov.values.([][]*alert.Reference)
	return res, ok
}
func (fpaov *BatchGetAlertsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAlertsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAlertsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAlertsResponse_FieldPathSelector
	Get(source *BatchGetAlertsResponse) []interface{}
	GetSingle(source *BatchGetAlertsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAlertsResponse)

	// Those methods build corresponding BatchGetAlertsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAlertsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAlertsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAlertsResponse_FieldPathArrayItemValue
}

type BatchGetAlertsResponse_FieldPathSelector int32

const (
	BatchGetAlertsResponse_FieldPathSelectorAlerts  BatchGetAlertsResponse_FieldPathSelector = 0
	BatchGetAlertsResponse_FieldPathSelectorMissing BatchGetAlertsResponse_FieldPathSelector = 1
)

func (s BatchGetAlertsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return "alerts"
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", s))
	}
}

func BuildBatchGetAlertsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAlertsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAlertsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerts":
			return &BatchGetAlertsResponse_FieldTerminalPath{selector: BatchGetAlertsResponse_FieldPathSelectorAlerts}, nil
		case "missing":
			return &BatchGetAlertsResponse_FieldTerminalPath{selector: BatchGetAlertsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "alerts":
			if subpath, err := alert.BuildAlert_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAlertsResponse_FieldSubPath{selector: BatchGetAlertsResponse_FieldPathSelectorAlerts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAlertsResponse", fp)
}

func ParseBatchGetAlertsResponse_FieldPath(rawField string) (BatchGetAlertsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAlertsResponse_FieldPath(fp)
}

func MustParseBatchGetAlertsResponse_FieldPath(rawField string) BatchGetAlertsResponse_FieldPath {
	fp, err := ParseBatchGetAlertsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAlertsResponse_FieldTerminalPath struct {
	selector BatchGetAlertsResponse_FieldPathSelector
}

var _ BatchGetAlertsResponse_FieldPath = (*BatchGetAlertsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAlertsResponse_FieldTerminalPath) Selector() BatchGetAlertsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAlertsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAlertsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAlertsResponse
func (fp *BatchGetAlertsResponse_FieldTerminalPath) Get(source *BatchGetAlertsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAlertsResponse_FieldPathSelectorAlerts:
			for _, value := range source.GetAlerts() {
				values = append(values, value)
			}
		case BatchGetAlertsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAlertsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAlertsResponse
func (fp *BatchGetAlertsResponse_FieldTerminalPath) GetSingle(source *BatchGetAlertsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		res := source.GetAlerts()
		return res, res != nil
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAlertsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAlertsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return ([]*alert.Alert)(nil)
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		return ([]*alert.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) ClearValue(item *BatchGetAlertsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAlertsResponse_FieldPathSelectorAlerts:
			item.Alerts = nil
		case BatchGetAlertsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAlertsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAlertsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAlertsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAlertsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return &BatchGetAlertsResponse_FieldTerminalPathValue{BatchGetAlertsResponse_FieldTerminalPath: *fp, value: value.([]*alert.Alert)}
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		return &BatchGetAlertsResponse_FieldTerminalPathValue{BatchGetAlertsResponse_FieldTerminalPath: *fp, value: value.([]*alert.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAlertsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAlertsResponse_FieldTerminalPathArrayOfValues{BatchGetAlertsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return &BatchGetAlertsResponse_FieldTerminalPathArrayOfValues{BatchGetAlertsResponse_FieldTerminalPath: *fp, values: values.([][]*alert.Alert)}
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		return &BatchGetAlertsResponse_FieldTerminalPathArrayOfValues{BatchGetAlertsResponse_FieldTerminalPath: *fp, values: values.([][]*alert.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAlertsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return &BatchGetAlertsResponse_FieldTerminalPathArrayItemValue{BatchGetAlertsResponse_FieldTerminalPath: *fp, value: value.(*alert.Alert)}
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		return &BatchGetAlertsResponse_FieldTerminalPathArrayItemValue{BatchGetAlertsResponse_FieldTerminalPath: *fp, value: value.(*alert.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAlertsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAlertsResponse_FieldSubPath struct {
	selector BatchGetAlertsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAlertsResponse_FieldPath = (*BatchGetAlertsResponse_FieldSubPath)(nil)

func (fps *BatchGetAlertsResponse_FieldSubPath) Selector() BatchGetAlertsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAlertsResponse_FieldSubPath) AsAlertsSubPath() (alert.Alert_FieldPath, bool) {
	res, ok := fps.subPath.(alert.Alert_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAlertsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAlertsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAlertsResponse
func (fps *BatchGetAlertsResponse_FieldSubPath) Get(source *BatchGetAlertsResponse) (values []interface{}) {
	if asAlertFieldPath, ok := fps.AsAlertsSubPath(); ok {
		for _, item := range source.GetAlerts() {
			values = append(values, asAlertFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAlertsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAlertsResponse))
}

// GetSingle returns value of selected field from source BatchGetAlertsResponse
func (fps *BatchGetAlertsResponse_FieldSubPath) GetSingle(source *BatchGetAlertsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		if len(source.GetAlerts()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlerts()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAlertsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAlertsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAlertsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAlertsResponse_FieldSubPath) ClearValue(item *BatchGetAlertsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAlertsResponse_FieldPathSelectorAlerts:
			for _, subItem := range item.Alerts {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAlertsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAlertsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAlertsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAlertsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAlertsResponse_FieldPathValue {
	return &BatchGetAlertsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAlertsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAlertsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAlertsResponse_FieldPathArrayOfValues {
	return &BatchGetAlertsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAlertsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAlertsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAlertsResponse_FieldPathArrayItemValue {
	return &BatchGetAlertsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAlertsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAlertsResponse_FieldPathValue allows storing values for BatchGetAlertsResponse fields according to their type
type BatchGetAlertsResponse_FieldPathValue interface {
	BatchGetAlertsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAlertsResponse)
	CompareWith(*BatchGetAlertsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAlertsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAlertsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAlertsResponse_FieldPathValue), nil
}

func MustParseBatchGetAlertsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAlertsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAlertsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAlertsResponse_FieldTerminalPathValue struct {
	BatchGetAlertsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertsResponse_FieldPathValue = (*BatchGetAlertsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAlertsResponse' as interface{}
func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) AsAlertsValue() ([]*alert.Alert, bool) {
	res, ok := fpv.value.([]*alert.Alert)
	return res, ok
}
func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) AsMissingValue() ([]*alert.Reference, bool) {
	res, ok := fpv.value.([]*alert.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAlertsResponse
func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAlertsResponse) {
	if *target == nil {
		*target = new(BatchGetAlertsResponse)
	}
	switch fpv.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		(*target).Alerts = fpv.value.([]*alert.Alert)
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*alert.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAlertsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAlertsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAlertsResponse'.
func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAlertsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return 0, false
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAlertsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAlertsResponse))
}

type BatchGetAlertsResponse_FieldSubPathValue struct {
	BatchGetAlertsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAlertsResponse_FieldPathValue = (*BatchGetAlertsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAlertsResponse_FieldSubPathValue) AsAlertsPathValue() (alert.Alert_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alert.Alert_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAlertsResponse_FieldSubPathValue) SetTo(target **BatchGetAlertsResponse) {
	if *target == nil {
		*target = new(BatchGetAlertsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAlertsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAlertsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAlertsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAlertsResponse_FieldSubPathValue) CompareWith(source *BatchGetAlertsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAlertsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAlertsResponse))
}

// BatchGetAlertsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAlertsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAlertsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAlertsResponse_FieldPath
	ContainsValue(*BatchGetAlertsResponse) bool
}

// ParseBatchGetAlertsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAlertsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAlertsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAlertsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAlertsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAlertsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAlertsResponse_FieldPathArrayItemValue = (*BatchGetAlertsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAlertsResponse as interface{}
func (fpaiv *BatchGetAlertsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAlertsResponse_FieldTerminalPathArrayItemValue) AsAlertsItemValue() (*alert.Alert, bool) {
	res, ok := fpaiv.value.(*alert.Alert)
	return res, ok
}
func (fpaiv *BatchGetAlertsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*alert.Reference, bool) {
	res, ok := fpaiv.value.(*alert.Reference)
	return res, ok
}

func (fpaiv *BatchGetAlertsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAlertsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAlertsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAlertsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAlertsResponse'
func (fpaiv *BatchGetAlertsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAlertsResponse) bool {
	slice := fpaiv.BatchGetAlertsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAlertsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAlertsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAlertsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAlertsResponse_FieldSubPathArrayItemValue) AsAlertsPathItemValue() (alert.Alert_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAlertsResponse'
func (fpaivs *BatchGetAlertsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAlertsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAlertsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAlertsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAlertsResponse fields according to their type
type BatchGetAlertsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAlertsResponse_FieldPath
}

func ParseBatchGetAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAlertsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAlertsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAlertsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAlertsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAlertsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAlertsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAlertsResponse_FieldPathArrayOfValues = (*BatchGetAlertsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAlertsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAlertsResponse_FieldPathSelectorAlerts:
		for _, v := range fpaov.values.([][]*alert.Alert) {
			values = append(values, v)
		}
	case BatchGetAlertsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*alert.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAlertsResponse_FieldTerminalPathArrayOfValues) AsAlertsArrayOfValues() ([][]*alert.Alert, bool) {
	res, ok := fpaov.values.([][]*alert.Alert)
	return res, ok
}
func (fpaov *BatchGetAlertsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*alert.Reference, bool) {
	res, ok := fpaov.values.([][]*alert.Reference)
	return res, ok
}

type BatchGetAlertsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAlertsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAlertsResponse_FieldPathArrayOfValues = (*BatchGetAlertsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAlertsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAlertsResponse_FieldSubPathArrayOfValues) AsAlertsPathArrayOfValues() (alert.Alert_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alert.Alert_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAlertsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAlertsRequest_FieldPathSelector
	Get(source *ListAlertsRequest) []interface{}
	GetSingle(source *ListAlertsRequest) (interface{}, bool)
	ClearValue(item *ListAlertsRequest)

	// Those methods build corresponding ListAlertsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAlertsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAlertsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAlertsRequest_FieldPathArrayItemValue
}

type ListAlertsRequest_FieldPathSelector int32

const (
	ListAlertsRequest_FieldPathSelectorParent    ListAlertsRequest_FieldPathSelector = 0
	ListAlertsRequest_FieldPathSelectorPageSize  ListAlertsRequest_FieldPathSelector = 1
	ListAlertsRequest_FieldPathSelectorPageToken ListAlertsRequest_FieldPathSelector = 2
	ListAlertsRequest_FieldPathSelectorOrderBy   ListAlertsRequest_FieldPathSelector = 3
	ListAlertsRequest_FieldPathSelectorFilter    ListAlertsRequest_FieldPathSelector = 4
	ListAlertsRequest_FieldPathSelectorFieldMask ListAlertsRequest_FieldPathSelector = 5
	ListAlertsRequest_FieldPathSelectorView      ListAlertsRequest_FieldPathSelector = 6
)

func (s ListAlertsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAlertsRequest_FieldPathSelectorParent:
		return "parent"
	case ListAlertsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAlertsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAlertsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAlertsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", s))
	}
}

func BuildListAlertsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAlertsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAlertsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAlertsRequest", fp)
}

func ParseListAlertsRequest_FieldPath(rawField string) (ListAlertsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAlertsRequest_FieldPath(fp)
}

func MustParseListAlertsRequest_FieldPath(rawField string) ListAlertsRequest_FieldPath {
	fp, err := ParseListAlertsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAlertsRequest_FieldTerminalPath struct {
	selector ListAlertsRequest_FieldPathSelector
}

var _ ListAlertsRequest_FieldPath = (*ListAlertsRequest_FieldTerminalPath)(nil)

func (fp *ListAlertsRequest_FieldTerminalPath) Selector() ListAlertsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAlertsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAlertsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAlertsRequest
func (fp *ListAlertsRequest_FieldTerminalPath) Get(source *ListAlertsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAlertsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAlertsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAlertsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAlertsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAlertsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAlertsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAlertsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAlertsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAlertsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAlertsRequest
func (fp *ListAlertsRequest_FieldTerminalPath) GetSingle(source *ListAlertsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAlertsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAlertsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAlertsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAlertsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAlertsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAlertsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		return (*alert.ParentName)(nil)
	case ListAlertsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAlertsRequest_FieldPathSelectorPageToken:
		return (*alert.PagerCursor)(nil)
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		return (*alert.OrderBy)(nil)
	case ListAlertsRequest_FieldPathSelectorFilter:
		return (*alert.Filter)(nil)
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		return (*alert.Alert_FieldMask)(nil)
	case ListAlertsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertsRequest_FieldTerminalPath) ClearValue(item *ListAlertsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAlertsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAlertsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAlertsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAlertsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAlertsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAlertsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAlertsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAlertsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAlertsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAlertsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAlertsRequest_FieldPathSelectorParent ||
		fp.selector == ListAlertsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAlertsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAlertsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAlertsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAlertsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAlertsRequest_FieldPathSelectorView
}

func (fp *ListAlertsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAlertsRequest_FieldPathValue {
	switch fp.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.ParentName)}
	case ListAlertsRequest_FieldPathSelectorPageSize:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAlertsRequest_FieldPathSelectorPageToken:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.PagerCursor)}
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.OrderBy)}
	case ListAlertsRequest_FieldPathSelectorFilter:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.Filter)}
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	case ListAlertsRequest_FieldPathSelectorView:
		return &ListAlertsRequest_FieldTerminalPathValue{ListAlertsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAlertsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAlertsRequest_FieldPathArrayOfValues {
	fpaov := &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.ParentName)}
	case ListAlertsRequest_FieldPathSelectorPageSize:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAlertsRequest_FieldPathSelectorPageToken:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.PagerCursor)}
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.OrderBy)}
	case ListAlertsRequest_FieldPathSelectorFilter:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.Filter)}
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	case ListAlertsRequest_FieldPathSelectorView:
		return &ListAlertsRequest_FieldTerminalPathArrayOfValues{ListAlertsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAlertsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAlertsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAlertsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fp.selector))
	}
}

func (fp *ListAlertsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAlertsRequest_FieldPathValue allows storing values for ListAlertsRequest fields according to their type
type ListAlertsRequest_FieldPathValue interface {
	ListAlertsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAlertsRequest)
	CompareWith(*ListAlertsRequest) (cmp int, comparable bool)
}

func ParseListAlertsRequest_FieldPathValue(pathStr, valueStr string) (ListAlertsRequest_FieldPathValue, error) {
	fp, err := ParseListAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAlertsRequest_FieldPathValue), nil
}

func MustParseListAlertsRequest_FieldPathValue(pathStr, valueStr string) ListAlertsRequest_FieldPathValue {
	fpv, err := ParseListAlertsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAlertsRequest_FieldTerminalPathValue struct {
	ListAlertsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAlertsRequest_FieldPathValue = (*ListAlertsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAlertsRequest' as interface{}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsParentValue() (*alert.ParentName, bool) {
	res, ok := fpv.value.(*alert.ParentName)
	return res, ok
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsPageTokenValue() (*alert.PagerCursor, bool) {
	res, ok := fpv.value.(*alert.PagerCursor)
	return res, ok
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsOrderByValue() (*alert.OrderBy, bool) {
	res, ok := fpv.value.(*alert.OrderBy)
	return res, ok
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsFilterValue() (*alert.Filter, bool) {
	res, ok := fpv.value.(*alert.Filter)
	return res, ok
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}
func (fpv *ListAlertsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAlertsRequest
func (fpv *ListAlertsRequest_FieldTerminalPathValue) SetTo(target **ListAlertsRequest) {
	if *target == nil {
		*target = new(ListAlertsRequest)
	}
	switch fpv.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*alert.ParentName)
	case ListAlertsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAlertsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*alert.PagerCursor)
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*alert.OrderBy)
	case ListAlertsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*alert.Filter)
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alert.Alert_FieldMask)
	case ListAlertsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAlertsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAlertsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAlertsRequest_FieldTerminalPathValue' with the value under path in 'ListAlertsRequest'.
func (fpv *ListAlertsRequest_FieldTerminalPathValue) CompareWith(source *ListAlertsRequest) (int, bool) {
	switch fpv.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*alert.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAlertsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAlertsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAlertsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAlertsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAlertsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAlertsRequest))
}

// ListAlertsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAlertsRequest according to their type
// Present only for array (repeated) types.
type ListAlertsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAlertsRequest_FieldPath
	ContainsValue(*ListAlertsRequest) bool
}

// ParseListAlertsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAlertsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAlertsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAlertsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAlertsRequest_FieldTerminalPathArrayItemValue struct {
	ListAlertsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAlertsRequest_FieldPathArrayItemValue = (*ListAlertsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAlertsRequest as interface{}
func (fpaiv *ListAlertsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAlertsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAlertsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAlertsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAlertsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAlertsRequest'
func (fpaiv *ListAlertsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAlertsRequest) bool {
	slice := fpaiv.ListAlertsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAlertsRequest_FieldPathArrayOfValues allows storing slice of values for ListAlertsRequest fields according to their type
type ListAlertsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAlertsRequest_FieldPath
}

func ParseListAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAlertsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAlertsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAlertsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAlertsRequest_FieldTerminalPathArrayOfValues struct {
	ListAlertsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAlertsRequest_FieldPathArrayOfValues = (*ListAlertsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAlertsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*alert.ParentName) {
			values = append(values, v)
		}
	case ListAlertsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAlertsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*alert.PagerCursor) {
			values = append(values, v)
		}
	case ListAlertsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*alert.OrderBy) {
			values = append(values, v)
		}
	case ListAlertsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*alert.Filter) {
			values = append(values, v)
		}
	case ListAlertsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	case ListAlertsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*alert.ParentName, bool) {
	res, ok := fpaov.values.([]*alert.ParentName)
	return res, ok
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*alert.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alert.PagerCursor)
	return res, ok
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*alert.OrderBy, bool) {
	res, ok := fpaov.values.([]*alert.OrderBy)
	return res, ok
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*alert.Filter, bool) {
	res, ok := fpaov.values.([]*alert.Filter)
	return res, ok
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}
func (fpaov *ListAlertsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAlertsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAlertsResponse_FieldPathSelector
	Get(source *ListAlertsResponse) []interface{}
	GetSingle(source *ListAlertsResponse) (interface{}, bool)
	ClearValue(item *ListAlertsResponse)

	// Those methods build corresponding ListAlertsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAlertsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAlertsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAlertsResponse_FieldPathArrayItemValue
}

type ListAlertsResponse_FieldPathSelector int32

const (
	ListAlertsResponse_FieldPathSelectorAlerts        ListAlertsResponse_FieldPathSelector = 0
	ListAlertsResponse_FieldPathSelectorPrevPageToken ListAlertsResponse_FieldPathSelector = 1
	ListAlertsResponse_FieldPathSelectorNextPageToken ListAlertsResponse_FieldPathSelector = 2
)

func (s ListAlertsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return "alerts"
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", s))
	}
}

func BuildListAlertsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAlertsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAlertsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alerts":
			return &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorAlerts}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "alerts":
			if subpath, err := alert.BuildAlert_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAlertsResponse_FieldSubPath{selector: ListAlertsResponse_FieldPathSelectorAlerts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAlertsResponse", fp)
}

func ParseListAlertsResponse_FieldPath(rawField string) (ListAlertsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAlertsResponse_FieldPath(fp)
}

func MustParseListAlertsResponse_FieldPath(rawField string) ListAlertsResponse_FieldPath {
	fp, err := ParseListAlertsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAlertsResponse_FieldTerminalPath struct {
	selector ListAlertsResponse_FieldPathSelector
}

var _ ListAlertsResponse_FieldPath = (*ListAlertsResponse_FieldTerminalPath)(nil)

func (fp *ListAlertsResponse_FieldTerminalPath) Selector() ListAlertsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAlertsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAlertsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAlertsResponse
func (fp *ListAlertsResponse_FieldTerminalPath) Get(source *ListAlertsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAlertsResponse_FieldPathSelectorAlerts:
			for _, value := range source.GetAlerts() {
				values = append(values, value)
			}
		case ListAlertsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAlertsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAlertsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAlertsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAlertsResponse
func (fp *ListAlertsResponse_FieldTerminalPath) GetSingle(source *ListAlertsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		res := source.GetAlerts()
		return res, res != nil
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAlertsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAlertsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return ([]*alert.Alert)(nil)
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		return (*alert.PagerCursor)(nil)
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		return (*alert.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertsResponse_FieldTerminalPath) ClearValue(item *ListAlertsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAlertsResponse_FieldPathSelectorAlerts:
			item.Alerts = nil
		case ListAlertsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAlertsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAlertsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAlertsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAlertsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAlertsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAlertsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAlertsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAlertsResponse_FieldPathValue {
	switch fp.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return &ListAlertsResponse_FieldTerminalPathValue{ListAlertsResponse_FieldTerminalPath: *fp, value: value.([]*alert.Alert)}
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		return &ListAlertsResponse_FieldTerminalPathValue{ListAlertsResponse_FieldTerminalPath: *fp, value: value.(*alert.PagerCursor)}
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		return &ListAlertsResponse_FieldTerminalPathValue{ListAlertsResponse_FieldTerminalPath: *fp, value: value.(*alert.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAlertsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAlertsResponse_FieldPathArrayOfValues {
	fpaov := &ListAlertsResponse_FieldTerminalPathArrayOfValues{ListAlertsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return &ListAlertsResponse_FieldTerminalPathArrayOfValues{ListAlertsResponse_FieldTerminalPath: *fp, values: values.([][]*alert.Alert)}
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		return &ListAlertsResponse_FieldTerminalPathArrayOfValues{ListAlertsResponse_FieldTerminalPath: *fp, values: values.([]*alert.PagerCursor)}
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		return &ListAlertsResponse_FieldTerminalPathArrayOfValues{ListAlertsResponse_FieldTerminalPath: *fp, values: values.([]*alert.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAlertsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAlertsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAlertsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return &ListAlertsResponse_FieldTerminalPathArrayItemValue{ListAlertsResponse_FieldTerminalPath: *fp, value: value.(*alert.Alert)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fp.selector))
	}
}

func (fp *ListAlertsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAlertsResponse_FieldSubPath struct {
	selector ListAlertsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAlertsResponse_FieldPath = (*ListAlertsResponse_FieldSubPath)(nil)

func (fps *ListAlertsResponse_FieldSubPath) Selector() ListAlertsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAlertsResponse_FieldSubPath) AsAlertsSubPath() (alert.Alert_FieldPath, bool) {
	res, ok := fps.subPath.(alert.Alert_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAlertsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAlertsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAlertsResponse
func (fps *ListAlertsResponse_FieldSubPath) Get(source *ListAlertsResponse) (values []interface{}) {
	if asAlertFieldPath, ok := fps.AsAlertsSubPath(); ok {
		for _, item := range source.GetAlerts() {
			values = append(values, asAlertFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAlertsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAlertsResponse))
}

// GetSingle returns value of selected field from source ListAlertsResponse
func (fps *ListAlertsResponse_FieldSubPath) GetSingle(source *ListAlertsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		if len(source.GetAlerts()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlerts()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fps.selector))
	}
}

func (fps *ListAlertsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAlertsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAlertsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAlertsResponse_FieldSubPath) ClearValue(item *ListAlertsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAlertsResponse_FieldPathSelectorAlerts:
			for _, subItem := range item.Alerts {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAlertsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAlertsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAlertsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAlertsResponse_FieldSubPath) WithIValue(value interface{}) ListAlertsResponse_FieldPathValue {
	return &ListAlertsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAlertsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAlertsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAlertsResponse_FieldPathArrayOfValues {
	return &ListAlertsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAlertsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAlertsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAlertsResponse_FieldPathArrayItemValue {
	return &ListAlertsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAlertsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAlertsResponse_FieldPathValue allows storing values for ListAlertsResponse fields according to their type
type ListAlertsResponse_FieldPathValue interface {
	ListAlertsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAlertsResponse)
	CompareWith(*ListAlertsResponse) (cmp int, comparable bool)
}

func ParseListAlertsResponse_FieldPathValue(pathStr, valueStr string) (ListAlertsResponse_FieldPathValue, error) {
	fp, err := ParseListAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAlertsResponse_FieldPathValue), nil
}

func MustParseListAlertsResponse_FieldPathValue(pathStr, valueStr string) ListAlertsResponse_FieldPathValue {
	fpv, err := ParseListAlertsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAlertsResponse_FieldTerminalPathValue struct {
	ListAlertsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAlertsResponse_FieldPathValue = (*ListAlertsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAlertsResponse' as interface{}
func (fpv *ListAlertsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAlertsResponse_FieldTerminalPathValue) AsAlertsValue() ([]*alert.Alert, bool) {
	res, ok := fpv.value.([]*alert.Alert)
	return res, ok
}
func (fpv *ListAlertsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*alert.PagerCursor, bool) {
	res, ok := fpv.value.(*alert.PagerCursor)
	return res, ok
}
func (fpv *ListAlertsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*alert.PagerCursor, bool) {
	res, ok := fpv.value.(*alert.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAlertsResponse
func (fpv *ListAlertsResponse_FieldTerminalPathValue) SetTo(target **ListAlertsResponse) {
	if *target == nil {
		*target = new(ListAlertsResponse)
	}
	switch fpv.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		(*target).Alerts = fpv.value.([]*alert.Alert)
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*alert.PagerCursor)
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*alert.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAlertsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAlertsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAlertsResponse_FieldTerminalPathValue' with the value under path in 'ListAlertsResponse'.
func (fpv *ListAlertsResponse_FieldTerminalPathValue) CompareWith(source *ListAlertsResponse) (int, bool) {
	switch fpv.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return 0, false
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAlertsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAlertsResponse))
}

type ListAlertsResponse_FieldSubPathValue struct {
	ListAlertsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAlertsResponse_FieldPathValue = (*ListAlertsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAlertsResponse_FieldSubPathValue) AsAlertsPathValue() (alert.Alert_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alert.Alert_FieldPathValue)
	return res, ok
}

func (fpvs *ListAlertsResponse_FieldSubPathValue) SetTo(target **ListAlertsResponse) {
	if *target == nil {
		*target = new(ListAlertsResponse)
	}
	switch fpvs.Selector() {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAlertsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAlertsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAlertsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAlertsResponse_FieldSubPathValue) CompareWith(source *ListAlertsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAlertsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAlertsResponse))
}

// ListAlertsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAlertsResponse according to their type
// Present only for array (repeated) types.
type ListAlertsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAlertsResponse_FieldPath
	ContainsValue(*ListAlertsResponse) bool
}

// ParseListAlertsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAlertsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAlertsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAlertsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAlertsResponse_FieldTerminalPathArrayItemValue struct {
	ListAlertsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAlertsResponse_FieldPathArrayItemValue = (*ListAlertsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAlertsResponse as interface{}
func (fpaiv *ListAlertsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAlertsResponse_FieldTerminalPathArrayItemValue) AsAlertsItemValue() (*alert.Alert, bool) {
	res, ok := fpaiv.value.(*alert.Alert)
	return res, ok
}

func (fpaiv *ListAlertsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAlertsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAlertsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAlertsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAlertsResponse'
func (fpaiv *ListAlertsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAlertsResponse) bool {
	slice := fpaiv.ListAlertsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAlertsResponse_FieldSubPathArrayItemValue struct {
	ListAlertsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAlertsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAlertsResponse_FieldSubPathArrayItemValue) AsAlertsPathItemValue() (alert.Alert_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAlertsResponse'
func (fpaivs *ListAlertsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAlertsResponse) bool {
	switch fpaivs.Selector() {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAlertsResponse: %d", fpaivs.Selector()))
	}
}

// ListAlertsResponse_FieldPathArrayOfValues allows storing slice of values for ListAlertsResponse fields according to their type
type ListAlertsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAlertsResponse_FieldPath
}

func ParseListAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAlertsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAlertsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAlertsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAlertsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAlertsResponse_FieldTerminalPathArrayOfValues struct {
	ListAlertsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAlertsResponse_FieldPathArrayOfValues = (*ListAlertsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAlertsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAlertsResponse_FieldPathSelectorAlerts:
		for _, v := range fpaov.values.([][]*alert.Alert) {
			values = append(values, v)
		}
	case ListAlertsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*alert.PagerCursor) {
			values = append(values, v)
		}
	case ListAlertsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*alert.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAlertsResponse_FieldTerminalPathArrayOfValues) AsAlertsArrayOfValues() ([][]*alert.Alert, bool) {
	res, ok := fpaov.values.([][]*alert.Alert)
	return res, ok
}
func (fpaov *ListAlertsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*alert.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alert.PagerCursor)
	return res, ok
}
func (fpaov *ListAlertsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*alert.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alert.PagerCursor)
	return res, ok
}

type ListAlertsResponse_FieldSubPathArrayOfValues struct {
	ListAlertsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAlertsResponse_FieldPathArrayOfValues = (*ListAlertsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAlertsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAlertsResponse_FieldSubPathArrayOfValues) AsAlertsPathArrayOfValues() (alert.Alert_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alert.Alert_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertRequest_FieldPathSelector
	Get(source *WatchAlertRequest) []interface{}
	GetSingle(source *WatchAlertRequest) (interface{}, bool)
	ClearValue(item *WatchAlertRequest)

	// Those methods build corresponding WatchAlertRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertRequest_FieldPathArrayItemValue
}

type WatchAlertRequest_FieldPathSelector int32

const (
	WatchAlertRequest_FieldPathSelectorName      WatchAlertRequest_FieldPathSelector = 0
	WatchAlertRequest_FieldPathSelectorFieldMask WatchAlertRequest_FieldPathSelector = 1
	WatchAlertRequest_FieldPathSelectorView      WatchAlertRequest_FieldPathSelector = 2
)

func (s WatchAlertRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAlertRequest_FieldPathSelectorName:
		return "name"
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAlertRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", s))
	}
}

func BuildWatchAlertRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAlertRequest_FieldTerminalPath{selector: WatchAlertRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAlertRequest_FieldTerminalPath{selector: WatchAlertRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAlertRequest_FieldTerminalPath{selector: WatchAlertRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertRequest", fp)
}

func ParseWatchAlertRequest_FieldPath(rawField string) (WatchAlertRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertRequest_FieldPath(fp)
}

func MustParseWatchAlertRequest_FieldPath(rawField string) WatchAlertRequest_FieldPath {
	fp, err := ParseWatchAlertRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertRequest_FieldTerminalPath struct {
	selector WatchAlertRequest_FieldPathSelector
}

var _ WatchAlertRequest_FieldPath = (*WatchAlertRequest_FieldTerminalPath)(nil)

func (fp *WatchAlertRequest_FieldTerminalPath) Selector() WatchAlertRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertRequest
func (fp *WatchAlertRequest_FieldTerminalPath) Get(source *WatchAlertRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAlertRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAlertRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAlertRequest
func (fp *WatchAlertRequest_FieldTerminalPath) GetSingle(source *WatchAlertRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAlertRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		return (*alert.Reference)(nil)
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		return (*alert.Alert_FieldMask)(nil)
	case WatchAlertRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertRequest_FieldTerminalPath) ClearValue(item *WatchAlertRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAlertRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAlertRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAlertRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertRequest_FieldPathSelectorName ||
		fp.selector == WatchAlertRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAlertRequest_FieldPathSelectorView
}

func (fp *WatchAlertRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAlertRequest_FieldPathValue {
	switch fp.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		return &WatchAlertRequest_FieldTerminalPathValue{WatchAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Reference)}
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		return &WatchAlertRequest_FieldTerminalPathValue{WatchAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	case WatchAlertRequest_FieldPathSelectorView:
		return &WatchAlertRequest_FieldTerminalPathValue{WatchAlertRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertRequest_FieldPathArrayOfValues {
	fpaov := &WatchAlertRequest_FieldTerminalPathArrayOfValues{WatchAlertRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		return &WatchAlertRequest_FieldTerminalPathArrayOfValues{WatchAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Reference)}
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		return &WatchAlertRequest_FieldTerminalPathArrayOfValues{WatchAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	case WatchAlertRequest_FieldPathSelectorView:
		return &WatchAlertRequest_FieldTerminalPathArrayOfValues{WatchAlertRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertRequest_FieldPathValue allows storing values for WatchAlertRequest fields according to their type
type WatchAlertRequest_FieldPathValue interface {
	WatchAlertRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertRequest)
	CompareWith(*WatchAlertRequest) (cmp int, comparable bool)
}

func ParseWatchAlertRequest_FieldPathValue(pathStr, valueStr string) (WatchAlertRequest_FieldPathValue, error) {
	fp, err := ParseWatchAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertRequest_FieldPathValue), nil
}

func MustParseWatchAlertRequest_FieldPathValue(pathStr, valueStr string) WatchAlertRequest_FieldPathValue {
	fpv, err := ParseWatchAlertRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertRequest_FieldTerminalPathValue struct {
	WatchAlertRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertRequest_FieldPathValue = (*WatchAlertRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertRequest' as interface{}
func (fpv *WatchAlertRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertRequest_FieldTerminalPathValue) AsNameValue() (*alert.Reference, bool) {
	res, ok := fpv.value.(*alert.Reference)
	return res, ok
}
func (fpv *WatchAlertRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}
func (fpv *WatchAlertRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertRequest
func (fpv *WatchAlertRequest_FieldTerminalPathValue) SetTo(target **WatchAlertRequest) {
	if *target == nil {
		*target = new(WatchAlertRequest)
	}
	switch fpv.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*alert.Reference)
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alert.Alert_FieldMask)
	case WatchAlertRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertRequest_FieldTerminalPathValue' with the value under path in 'WatchAlertRequest'.
func (fpv *WatchAlertRequest_FieldTerminalPathValue) CompareWith(source *WatchAlertRequest) (int, bool) {
	switch fpv.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*alert.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAlertRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertRequest))
}

// WatchAlertRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertRequest according to their type
// Present only for array (repeated) types.
type WatchAlertRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertRequest_FieldPath
	ContainsValue(*WatchAlertRequest) bool
}

// ParseWatchAlertRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertRequest_FieldTerminalPathArrayItemValue struct {
	WatchAlertRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertRequest_FieldPathArrayItemValue = (*WatchAlertRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertRequest as interface{}
func (fpaiv *WatchAlertRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertRequest'
func (fpaiv *WatchAlertRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertRequest) bool {
	slice := fpaiv.WatchAlertRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertRequest_FieldPathArrayOfValues allows storing slice of values for WatchAlertRequest fields according to their type
type WatchAlertRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertRequest_FieldPath
}

func ParseWatchAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertRequest_FieldTerminalPathArrayOfValues struct {
	WatchAlertRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAlertRequest_FieldPathArrayOfValues = (*WatchAlertRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*alert.Reference) {
			values = append(values, v)
		}
	case WatchAlertRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	case WatchAlertRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*alert.Reference, bool) {
	res, ok := fpaov.values.([]*alert.Reference)
	return res, ok
}
func (fpaov *WatchAlertRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}
func (fpaov *WatchAlertRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertResponse_FieldPathSelector
	Get(source *WatchAlertResponse) []interface{}
	GetSingle(source *WatchAlertResponse) (interface{}, bool)
	ClearValue(item *WatchAlertResponse)

	// Those methods build corresponding WatchAlertResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertResponse_FieldPathArrayItemValue
}

type WatchAlertResponse_FieldPathSelector int32

const (
	WatchAlertResponse_FieldPathSelectorChange WatchAlertResponse_FieldPathSelector = 0
)

func (s WatchAlertResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAlertResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", s))
	}
}

func BuildWatchAlertResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAlertResponse_FieldTerminalPath{selector: WatchAlertResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertResponse", fp)
}

func ParseWatchAlertResponse_FieldPath(rawField string) (WatchAlertResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertResponse_FieldPath(fp)
}

func MustParseWatchAlertResponse_FieldPath(rawField string) WatchAlertResponse_FieldPath {
	fp, err := ParseWatchAlertResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertResponse_FieldTerminalPath struct {
	selector WatchAlertResponse_FieldPathSelector
}

var _ WatchAlertResponse_FieldPath = (*WatchAlertResponse_FieldTerminalPath)(nil)

func (fp *WatchAlertResponse_FieldTerminalPath) Selector() WatchAlertResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertResponse
func (fp *WatchAlertResponse_FieldTerminalPath) Get(source *WatchAlertResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAlertResponse
func (fp *WatchAlertResponse_FieldTerminalPath) GetSingle(source *WatchAlertResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		return (*alert.AlertChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertResponse_FieldTerminalPath) ClearValue(item *WatchAlertResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAlertResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertResponse_FieldPathSelectorChange
}

func (fp *WatchAlertResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAlertResponse_FieldPathValue {
	switch fp.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		return &WatchAlertResponse_FieldTerminalPathValue{WatchAlertResponse_FieldTerminalPath: *fp, value: value.(*alert.AlertChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertResponse_FieldPathArrayOfValues {
	fpaov := &WatchAlertResponse_FieldTerminalPathArrayOfValues{WatchAlertResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		return &WatchAlertResponse_FieldTerminalPathArrayOfValues{WatchAlertResponse_FieldTerminalPath: *fp, values: values.([]*alert.AlertChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertResponse_FieldPathValue allows storing values for WatchAlertResponse fields according to their type
type WatchAlertResponse_FieldPathValue interface {
	WatchAlertResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertResponse)
	CompareWith(*WatchAlertResponse) (cmp int, comparable bool)
}

func ParseWatchAlertResponse_FieldPathValue(pathStr, valueStr string) (WatchAlertResponse_FieldPathValue, error) {
	fp, err := ParseWatchAlertResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertResponse_FieldPathValue), nil
}

func MustParseWatchAlertResponse_FieldPathValue(pathStr, valueStr string) WatchAlertResponse_FieldPathValue {
	fpv, err := ParseWatchAlertResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertResponse_FieldTerminalPathValue struct {
	WatchAlertResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertResponse_FieldPathValue = (*WatchAlertResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertResponse' as interface{}
func (fpv *WatchAlertResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertResponse_FieldTerminalPathValue) AsChangeValue() (*alert.AlertChange, bool) {
	res, ok := fpv.value.(*alert.AlertChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertResponse
func (fpv *WatchAlertResponse_FieldTerminalPathValue) SetTo(target **WatchAlertResponse) {
	if *target == nil {
		*target = new(WatchAlertResponse)
	}
	switch fpv.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*alert.AlertChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertResponse_FieldTerminalPathValue' with the value under path in 'WatchAlertResponse'.
func (fpv *WatchAlertResponse_FieldTerminalPathValue) CompareWith(source *WatchAlertResponse) (int, bool) {
	switch fpv.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertResponse))
}

// WatchAlertResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertResponse according to their type
// Present only for array (repeated) types.
type WatchAlertResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertResponse_FieldPath
	ContainsValue(*WatchAlertResponse) bool
}

// ParseWatchAlertResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertResponse_FieldTerminalPathArrayItemValue struct {
	WatchAlertResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertResponse_FieldPathArrayItemValue = (*WatchAlertResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertResponse as interface{}
func (fpaiv *WatchAlertResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertResponse'
func (fpaiv *WatchAlertResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertResponse) bool {
	slice := fpaiv.WatchAlertResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertResponse_FieldPathArrayOfValues allows storing slice of values for WatchAlertResponse fields according to their type
type WatchAlertResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertResponse_FieldPath
}

func ParseWatchAlertResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertResponse_FieldTerminalPathArrayOfValues struct {
	WatchAlertResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAlertResponse_FieldPathArrayOfValues = (*WatchAlertResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*alert.AlertChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*alert.AlertChange, bool) {
	res, ok := fpaov.values.([]*alert.AlertChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertsRequest_FieldPathSelector
	Get(source *WatchAlertsRequest) []interface{}
	GetSingle(source *WatchAlertsRequest) (interface{}, bool)
	ClearValue(item *WatchAlertsRequest)

	// Those methods build corresponding WatchAlertsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertsRequest_FieldPathArrayItemValue
}

type WatchAlertsRequest_FieldPathSelector int32

const (
	WatchAlertsRequest_FieldPathSelectorType         WatchAlertsRequest_FieldPathSelector = 0
	WatchAlertsRequest_FieldPathSelectorParent       WatchAlertsRequest_FieldPathSelector = 1
	WatchAlertsRequest_FieldPathSelectorPageSize     WatchAlertsRequest_FieldPathSelector = 2
	WatchAlertsRequest_FieldPathSelectorPageToken    WatchAlertsRequest_FieldPathSelector = 3
	WatchAlertsRequest_FieldPathSelectorOrderBy      WatchAlertsRequest_FieldPathSelector = 4
	WatchAlertsRequest_FieldPathSelectorResumeToken  WatchAlertsRequest_FieldPathSelector = 5
	WatchAlertsRequest_FieldPathSelectorFilter       WatchAlertsRequest_FieldPathSelector = 6
	WatchAlertsRequest_FieldPathSelectorFieldMask    WatchAlertsRequest_FieldPathSelector = 7
	WatchAlertsRequest_FieldPathSelectorView         WatchAlertsRequest_FieldPathSelector = 8
	WatchAlertsRequest_FieldPathSelectorMaxChunkSize WatchAlertsRequest_FieldPathSelector = 9
)

func (s WatchAlertsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAlertsRequest_FieldPathSelectorType:
		return "type"
	case WatchAlertsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAlertsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAlertsRequest_FieldPathSelectorView:
		return "view"
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", s))
	}
}

func BuildWatchAlertsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertsRequest", fp)
}

func ParseWatchAlertsRequest_FieldPath(rawField string) (WatchAlertsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertsRequest_FieldPath(fp)
}

func MustParseWatchAlertsRequest_FieldPath(rawField string) WatchAlertsRequest_FieldPath {
	fp, err := ParseWatchAlertsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertsRequest_FieldTerminalPath struct {
	selector WatchAlertsRequest_FieldPathSelector
}

var _ WatchAlertsRequest_FieldPath = (*WatchAlertsRequest_FieldTerminalPath)(nil)

func (fp *WatchAlertsRequest_FieldTerminalPath) Selector() WatchAlertsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertsRequest
func (fp *WatchAlertsRequest_FieldTerminalPath) Get(source *WatchAlertsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAlertsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAlertsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAlertsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAlertsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAlertsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAlertsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAlertsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAlertsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAlertsRequest
func (fp *WatchAlertsRequest_FieldTerminalPath) GetSingle(source *WatchAlertsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAlertsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAlertsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAlertsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAlertsRequest_FieldPathSelectorParent:
		return (*alert.ParentReference)(nil)
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		return (*alert.PagerCursor)(nil)
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		return (*alert.OrderBy)(nil)
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAlertsRequest_FieldPathSelectorFilter:
		return (*alert.Filter)(nil)
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		return (*alert.Alert_FieldMask)(nil)
	case WatchAlertsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertsRequest_FieldTerminalPath) ClearValue(item *WatchAlertsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAlertsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAlertsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAlertsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAlertsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAlertsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAlertsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAlertsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAlertsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAlertsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertsRequest_FieldPathSelectorType ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorParent ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorView ||
		fp.selector == WatchAlertsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAlertsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAlertsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAlertsRequest_FieldPathSelectorParent:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.ParentReference)}
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.PagerCursor)}
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.OrderBy)}
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAlertsRequest_FieldPathSelectorFilter:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.Filter)}
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	case WatchAlertsRequest_FieldPathSelectorView:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAlertsRequest_FieldTerminalPathValue{WatchAlertsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAlertsRequest_FieldPathSelectorParent:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.ParentReference)}
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.PagerCursor)}
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.OrderBy)}
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAlertsRequest_FieldPathSelectorFilter:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.Filter)}
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	case WatchAlertsRequest_FieldPathSelectorView:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAlertsRequest_FieldTerminalPathArrayOfValues{WatchAlertsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fp.selector))
	}
}

func (fp *WatchAlertsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertsRequest_FieldPathValue allows storing values for WatchAlertsRequest fields according to their type
type WatchAlertsRequest_FieldPathValue interface {
	WatchAlertsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertsRequest)
	CompareWith(*WatchAlertsRequest) (cmp int, comparable bool)
}

func ParseWatchAlertsRequest_FieldPathValue(pathStr, valueStr string) (WatchAlertsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertsRequest_FieldPathValue), nil
}

func MustParseWatchAlertsRequest_FieldPathValue(pathStr, valueStr string) WatchAlertsRequest_FieldPathValue {
	fpv, err := ParseWatchAlertsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertsRequest_FieldTerminalPathValue struct {
	WatchAlertsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertsRequest_FieldPathValue = (*WatchAlertsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertsRequest' as interface{}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsParentValue() (*alert.ParentReference, bool) {
	res, ok := fpv.value.(*alert.ParentReference)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsPageTokenValue() (*alert.PagerCursor, bool) {
	res, ok := fpv.value.(*alert.PagerCursor)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsOrderByValue() (*alert.OrderBy, bool) {
	res, ok := fpv.value.(*alert.OrderBy)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsFilterValue() (*alert.Filter, bool) {
	res, ok := fpv.value.(*alert.Filter)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertsRequest
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) SetTo(target **WatchAlertsRequest) {
	if *target == nil {
		*target = new(WatchAlertsRequest)
	}
	switch fpv.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAlertsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*alert.ParentReference)
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*alert.PagerCursor)
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*alert.OrderBy)
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAlertsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*alert.Filter)
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alert.Alert_FieldMask)
	case WatchAlertsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertsRequest_FieldTerminalPathValue' with the value under path in 'WatchAlertsRequest'.
func (fpv *WatchAlertsRequest_FieldTerminalPathValue) CompareWith(source *WatchAlertsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*alert.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAlertsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAlertsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertsRequest))
}

// WatchAlertsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertsRequest according to their type
// Present only for array (repeated) types.
type WatchAlertsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertsRequest_FieldPath
	ContainsValue(*WatchAlertsRequest) bool
}

// ParseWatchAlertsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAlertsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAlertsRequest_FieldPathArrayItemValue = (*WatchAlertsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertsRequest as interface{}
func (fpaiv *WatchAlertsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertsRequest'
func (fpaiv *WatchAlertsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertsRequest) bool {
	slice := fpaiv.WatchAlertsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAlertsRequest fields according to their type
type WatchAlertsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertsRequest_FieldPath
}

func ParseWatchAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAlertsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAlertsRequest_FieldPathArrayOfValues = (*WatchAlertsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*alert.ParentReference) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*alert.PagerCursor) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*alert.OrderBy) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*alert.Filter) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAlertsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*alert.ParentReference, bool) {
	res, ok := fpaov.values.([]*alert.ParentReference)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*alert.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alert.PagerCursor)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*alert.OrderBy, bool) {
	res, ok := fpaov.values.([]*alert.OrderBy)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*alert.Filter, bool) {
	res, ok := fpaov.values.([]*alert.Filter)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAlertsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertsResponse_FieldPathSelector
	Get(source *WatchAlertsResponse) []interface{}
	GetSingle(source *WatchAlertsResponse) (interface{}, bool)
	ClearValue(item *WatchAlertsResponse)

	// Those methods build corresponding WatchAlertsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertsResponse_FieldPathArrayItemValue
}

type WatchAlertsResponse_FieldPathSelector int32

const (
	WatchAlertsResponse_FieldPathSelectorAlertChanges    WatchAlertsResponse_FieldPathSelector = 0
	WatchAlertsResponse_FieldPathSelectorIsCurrent       WatchAlertsResponse_FieldPathSelector = 1
	WatchAlertsResponse_FieldPathSelectorPageTokenChange WatchAlertsResponse_FieldPathSelector = 2
	WatchAlertsResponse_FieldPathSelectorResumeToken     WatchAlertsResponse_FieldPathSelector = 3
	WatchAlertsResponse_FieldPathSelectorSnapshotSize    WatchAlertsResponse_FieldPathSelector = 4
	WatchAlertsResponse_FieldPathSelectorIsSoftReset     WatchAlertsResponse_FieldPathSelector = 5
	WatchAlertsResponse_FieldPathSelectorIsHardReset     WatchAlertsResponse_FieldPathSelector = 6
)

func (s WatchAlertsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		return "alert_changes"
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", s))
	}
}

func BuildWatchAlertsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alert_changes", "alertChanges", "alert-changes":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorAlertChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAlertsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAlertsResponse_FieldSubPath{selector: WatchAlertsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertsResponse", fp)
}

func ParseWatchAlertsResponse_FieldPath(rawField string) (WatchAlertsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertsResponse_FieldPath(fp)
}

func MustParseWatchAlertsResponse_FieldPath(rawField string) WatchAlertsResponse_FieldPath {
	fp, err := ParseWatchAlertsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertsResponse_FieldTerminalPath struct {
	selector WatchAlertsResponse_FieldPathSelector
}

var _ WatchAlertsResponse_FieldPath = (*WatchAlertsResponse_FieldTerminalPath)(nil)

func (fp *WatchAlertsResponse_FieldTerminalPath) Selector() WatchAlertsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertsResponse
func (fp *WatchAlertsResponse_FieldTerminalPath) Get(source *WatchAlertsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertsResponse_FieldPathSelectorAlertChanges:
			for _, value := range source.GetAlertChanges() {
				values = append(values, value)
			}
		case WatchAlertsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAlertsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAlertsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAlertsResponse
func (fp *WatchAlertsResponse_FieldTerminalPath) GetSingle(source *WatchAlertsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		res := source.GetAlertChanges()
		return res, res != nil
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		return ([]*alert.AlertChange)(nil)
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAlertsResponse_PageTokenChange)(nil)
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponse_FieldTerminalPath) ClearValue(item *WatchAlertsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAlertsResponse_FieldPathSelectorAlertChanges:
			item.AlertChanges = nil
		case WatchAlertsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAlertsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAlertsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertsResponse_FieldPathSelectorAlertChanges ||
		fp.selector == WatchAlertsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAlertsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAlertsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAlertsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAlertsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAlertsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAlertsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.([]*alert.AlertChange)}
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(*WatchAlertsResponse_PageTokenChange)}
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		return &WatchAlertsResponse_FieldTerminalPathValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([][]*alert.AlertChange)}
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAlertsResponse_PageTokenChange)}
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		return &WatchAlertsResponse_FieldTerminalPathArrayOfValues{WatchAlertsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		return &WatchAlertsResponse_FieldTerminalPathArrayItemValue{WatchAlertsResponse_FieldTerminalPath: *fp, value: value.(*alert.AlertChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAlertsResponse_FieldSubPath struct {
	selector WatchAlertsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAlertsResponse_FieldPath = (*WatchAlertsResponse_FieldSubPath)(nil)

func (fps *WatchAlertsResponse_FieldSubPath) Selector() WatchAlertsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAlertsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAlertsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAlertsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAlertsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAlertsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAlertsResponse
func (fps *WatchAlertsResponse_FieldSubPath) Get(source *WatchAlertsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAlertsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAlertsResponse))
}

// GetSingle returns value of selected field from source WatchAlertsResponse
func (fps *WatchAlertsResponse_FieldSubPath) GetSingle(source *WatchAlertsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fps.selector))
	}
}

func (fps *WatchAlertsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAlertsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAlertsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAlertsResponse_FieldSubPath) ClearValue(item *WatchAlertsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAlertsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAlertsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAlertsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAlertsResponse_FieldSubPath) WithIValue(value interface{}) WatchAlertsResponse_FieldPathValue {
	return &WatchAlertsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAlertsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAlertsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAlertsResponse_FieldPathArrayOfValues {
	return &WatchAlertsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAlertsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAlertsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAlertsResponse_FieldPathArrayItemValue {
	return &WatchAlertsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAlertsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAlertsResponse_FieldPathValue allows storing values for WatchAlertsResponse fields according to their type
type WatchAlertsResponse_FieldPathValue interface {
	WatchAlertsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertsResponse)
	CompareWith(*WatchAlertsResponse) (cmp int, comparable bool)
}

func ParseWatchAlertsResponse_FieldPathValue(pathStr, valueStr string) (WatchAlertsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertsResponse_FieldPathValue), nil
}

func MustParseWatchAlertsResponse_FieldPathValue(pathStr, valueStr string) WatchAlertsResponse_FieldPathValue {
	fpv, err := ParseWatchAlertsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertsResponse_FieldTerminalPathValue struct {
	WatchAlertsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertsResponse_FieldPathValue = (*WatchAlertsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAlertsResponse' as interface{}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsAlertChangesValue() ([]*alert.AlertChange, bool) {
	res, ok := fpv.value.([]*alert.AlertChange)
	return res, ok
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAlertsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAlertsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAlertsResponse
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) SetTo(target **WatchAlertsResponse) {
	if *target == nil {
		*target = new(WatchAlertsResponse)
	}
	switch fpv.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		(*target).AlertChanges = fpv.value.([]*alert.AlertChange)
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAlertsResponse_PageTokenChange)
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertsResponse_FieldTerminalPathValue' with the value under path in 'WatchAlertsResponse'.
func (fpv *WatchAlertsResponse_FieldTerminalPathValue) CompareWith(source *WatchAlertsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		return 0, false
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAlertsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertsResponse))
}

type WatchAlertsResponse_FieldSubPathValue struct {
	WatchAlertsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAlertsResponse_FieldPathValue = (*WatchAlertsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAlertsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAlertsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAlertsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAlertsResponse_FieldSubPathValue) SetTo(target **WatchAlertsResponse) {
	if *target == nil {
		*target = new(WatchAlertsResponse)
	}
	switch fpvs.Selector() {
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAlertsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAlertsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAlertsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAlertsResponse_FieldSubPathValue) CompareWith(source *WatchAlertsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAlertsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAlertsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAlertsResponse))
}

// WatchAlertsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAlertsResponse according to their type
// Present only for array (repeated) types.
type WatchAlertsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertsResponse_FieldPath
	ContainsValue(*WatchAlertsResponse) bool
}

// ParseWatchAlertsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAlertsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAlertsResponse_FieldPathArrayItemValue = (*WatchAlertsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertsResponse as interface{}
func (fpaiv *WatchAlertsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAlertsResponse_FieldTerminalPathArrayItemValue) AsAlertChangesItemValue() (*alert.AlertChange, bool) {
	res, ok := fpaiv.value.(*alert.AlertChange)
	return res, ok
}

func (fpaiv *WatchAlertsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertsResponse'
func (fpaiv *WatchAlertsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertsResponse) bool {
	slice := fpaiv.WatchAlertsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAlertsResponse_FieldSubPathArrayItemValue struct {
	WatchAlertsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAlertsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAlertsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAlertsResponse'
func (fpaivs *WatchAlertsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAlertsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAlertsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAlertsResponse fields according to their type
type WatchAlertsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertsResponse_FieldPath
}

func ParseWatchAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAlertsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAlertsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAlertsResponse_FieldPathArrayOfValues = (*WatchAlertsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertsResponse_FieldPathSelectorAlertChanges:
		for _, v := range fpaov.values.([][]*alert.AlertChange) {
			values = append(values, v)
		}
	case WatchAlertsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAlertsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAlertsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAlertsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAlertsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAlertsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAlertsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsAlertChangesArrayOfValues() ([][]*alert.AlertChange, bool) {
	res, ok := fpaov.values.([][]*alert.AlertChange)
	return res, ok
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAlertsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAlertsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAlertsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAlertsResponse_FieldSubPathArrayOfValues struct {
	WatchAlertsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAlertsResponse_FieldPathArrayOfValues = (*WatchAlertsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAlertsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAlertsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAlertsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAlertsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAlertsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAlertsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAlertsResponse_PageTokenChange)

	// Those methods build corresponding WatchAlertsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAlertsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAlertsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAlertsResponsePageTokenChange_FieldPathSelector = 0
	WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAlertsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAlertsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAlertsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAlertsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAlertsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAlertsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAlertsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAlertsResponse_PageTokenChange", fp)
}

func ParseWatchAlertsResponsePageTokenChange_FieldPath(rawField string) (WatchAlertsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAlertsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAlertsResponsePageTokenChange_FieldPath(rawField string) WatchAlertsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAlertsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAlertsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAlertsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAlertsResponsePageTokenChange_FieldPath = (*WatchAlertsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAlertsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAlertsResponse_PageTokenChange
func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAlertsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAlertsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAlertsResponse_PageTokenChange
func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAlertsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAlertsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*alert.PagerCursor)(nil)
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*alert.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAlertsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAlertsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAlertsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAlertsResponsePageTokenChange_FieldTerminalPathValue{WatchAlertsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*alert.PagerCursor)}
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAlertsResponsePageTokenChange_FieldTerminalPathValue{WatchAlertsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*alert.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAlertsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAlertsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*alert.PagerCursor)}
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAlertsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*alert.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAlertsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAlertsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAlertsResponsePageTokenChange_FieldPathValue interface {
	WatchAlertsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAlertsResponse_PageTokenChange)
	CompareWith(*WatchAlertsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAlertsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAlertsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAlertsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAlertsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAlertsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAlertsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAlertsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAlertsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAlertsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAlertsResponsePageTokenChange_FieldPathValue = (*WatchAlertsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*alert.PagerCursor, bool) {
	res, ok := fpv.value.(*alert.PagerCursor)
	return res, ok
}
func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*alert.PagerCursor, bool) {
	res, ok := fpv.value.(*alert.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAlertsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAlertsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*alert.PagerCursor)
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*alert.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAlertsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAlertsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAlertsResponse_PageTokenChange'.
func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAlertsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAlertsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAlertsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAlertsResponse_PageTokenChange))
}

// WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAlertsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAlertsResponse_PageTokenChange) bool
}

// ParseWatchAlertsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAlertsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAlertsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAlertsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAlertsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAlertsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAlertsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAlertsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAlertsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAlertsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAlertsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAlertsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAlertsResponsePageTokenChange_FieldPath
}

func ParseWatchAlertsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAlertsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAlertsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAlertsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAlertsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAlertsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*alert.PagerCursor) {
			values = append(values, v)
		}
	case WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*alert.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*alert.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alert.PagerCursor)
	return res, ok
}
func (fpaov *WatchAlertsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*alert.PagerCursor, bool) {
	res, ok := fpaov.values.([]*alert.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAlertRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAlertRequest_FieldPathSelector
	Get(source *CreateAlertRequest) []interface{}
	GetSingle(source *CreateAlertRequest) (interface{}, bool)
	ClearValue(item *CreateAlertRequest)

	// Those methods build corresponding CreateAlertRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAlertRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAlertRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAlertRequest_FieldPathArrayItemValue
}

type CreateAlertRequest_FieldPathSelector int32

const (
	CreateAlertRequest_FieldPathSelectorParent CreateAlertRequest_FieldPathSelector = 0
	CreateAlertRequest_FieldPathSelectorAlert  CreateAlertRequest_FieldPathSelector = 1
)

func (s CreateAlertRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAlertRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAlertRequest_FieldPathSelectorAlert:
		return "alert"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", s))
	}
}

func BuildCreateAlertRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAlertRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAlertRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAlertRequest_FieldTerminalPath{selector: CreateAlertRequest_FieldPathSelectorParent}, nil
		case "alert":
			return &CreateAlertRequest_FieldTerminalPath{selector: CreateAlertRequest_FieldPathSelectorAlert}, nil
		}
	} else {
		switch fp[0] {
		case "alert":
			if subpath, err := alert.BuildAlert_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAlertRequest_FieldSubPath{selector: CreateAlertRequest_FieldPathSelectorAlert, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAlertRequest", fp)
}

func ParseCreateAlertRequest_FieldPath(rawField string) (CreateAlertRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAlertRequest_FieldPath(fp)
}

func MustParseCreateAlertRequest_FieldPath(rawField string) CreateAlertRequest_FieldPath {
	fp, err := ParseCreateAlertRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAlertRequest_FieldTerminalPath struct {
	selector CreateAlertRequest_FieldPathSelector
}

var _ CreateAlertRequest_FieldPath = (*CreateAlertRequest_FieldTerminalPath)(nil)

func (fp *CreateAlertRequest_FieldTerminalPath) Selector() CreateAlertRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAlertRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAlertRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAlertRequest
func (fp *CreateAlertRequest_FieldTerminalPath) Get(source *CreateAlertRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAlertRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAlertRequest_FieldPathSelectorAlert:
			if source.Alert != nil {
				values = append(values, source.Alert)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAlertRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAlertRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAlertRequest
func (fp *CreateAlertRequest_FieldTerminalPath) GetSingle(source *CreateAlertRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAlertRequest_FieldPathSelectorAlert:
		res := source.GetAlert()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAlertRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAlertRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		return (*alert.ParentReference)(nil)
	case CreateAlertRequest_FieldPathSelectorAlert:
		return (*alert.Alert)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertRequest_FieldTerminalPath) ClearValue(item *CreateAlertRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAlertRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAlertRequest_FieldPathSelectorAlert:
			item.Alert = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAlertRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAlertRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAlertRequest_FieldPathSelectorParent
}

func (fp *CreateAlertRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAlertRequest_FieldPathValue {
	switch fp.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		return &CreateAlertRequest_FieldTerminalPathValue{CreateAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.ParentReference)}
	case CreateAlertRequest_FieldPathSelectorAlert:
		return &CreateAlertRequest_FieldTerminalPathValue{CreateAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAlertRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAlertRequest_FieldPathArrayOfValues {
	fpaov := &CreateAlertRequest_FieldTerminalPathArrayOfValues{CreateAlertRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		return &CreateAlertRequest_FieldTerminalPathArrayOfValues{CreateAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.ParentReference)}
	case CreateAlertRequest_FieldPathSelectorAlert:
		return &CreateAlertRequest_FieldTerminalPathArrayOfValues{CreateAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAlertRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAlertRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAlertRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fp.selector))
	}
}

func (fp *CreateAlertRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAlertRequest_FieldSubPath struct {
	selector CreateAlertRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAlertRequest_FieldPath = (*CreateAlertRequest_FieldSubPath)(nil)

func (fps *CreateAlertRequest_FieldSubPath) Selector() CreateAlertRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAlertRequest_FieldSubPath) AsAlertSubPath() (alert.Alert_FieldPath, bool) {
	res, ok := fps.subPath.(alert.Alert_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAlertRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAlertRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAlertRequest
func (fps *CreateAlertRequest_FieldSubPath) Get(source *CreateAlertRequest) (values []interface{}) {
	if asAlertFieldPath, ok := fps.AsAlertSubPath(); ok {
		values = append(values, asAlertFieldPath.Get(source.GetAlert())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAlertRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAlertRequest))
}

// GetSingle returns value of selected field from source CreateAlertRequest
func (fps *CreateAlertRequest_FieldSubPath) GetSingle(source *CreateAlertRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAlertRequest_FieldPathSelectorAlert:
		if source.GetAlert() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlert())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fps.selector))
	}
}

func (fps *CreateAlertRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAlertRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAlertRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAlertRequest_FieldSubPath) ClearValue(item *CreateAlertRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAlertRequest_FieldPathSelectorAlert:
			fps.subPath.ClearValueRaw(item.Alert)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAlertRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAlertRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAlertRequest_FieldSubPath) WithIValue(value interface{}) CreateAlertRequest_FieldPathValue {
	return &CreateAlertRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAlertRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAlertRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAlertRequest_FieldPathArrayOfValues {
	return &CreateAlertRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAlertRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAlertRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAlertRequest_FieldPathArrayItemValue {
	return &CreateAlertRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAlertRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAlertRequest_FieldPathValue allows storing values for CreateAlertRequest fields according to their type
type CreateAlertRequest_FieldPathValue interface {
	CreateAlertRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAlertRequest)
	CompareWith(*CreateAlertRequest) (cmp int, comparable bool)
}

func ParseCreateAlertRequest_FieldPathValue(pathStr, valueStr string) (CreateAlertRequest_FieldPathValue, error) {
	fp, err := ParseCreateAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAlertRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAlertRequest_FieldPathValue), nil
}

func MustParseCreateAlertRequest_FieldPathValue(pathStr, valueStr string) CreateAlertRequest_FieldPathValue {
	fpv, err := ParseCreateAlertRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAlertRequest_FieldTerminalPathValue struct {
	CreateAlertRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAlertRequest_FieldPathValue = (*CreateAlertRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAlertRequest' as interface{}
func (fpv *CreateAlertRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAlertRequest_FieldTerminalPathValue) AsParentValue() (*alert.ParentReference, bool) {
	res, ok := fpv.value.(*alert.ParentReference)
	return res, ok
}
func (fpv *CreateAlertRequest_FieldTerminalPathValue) AsAlertValue() (*alert.Alert, bool) {
	res, ok := fpv.value.(*alert.Alert)
	return res, ok
}

// SetTo stores value for selected field for object CreateAlertRequest
func (fpv *CreateAlertRequest_FieldTerminalPathValue) SetTo(target **CreateAlertRequest) {
	if *target == nil {
		*target = new(CreateAlertRequest)
	}
	switch fpv.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*alert.ParentReference)
	case CreateAlertRequest_FieldPathSelectorAlert:
		(*target).Alert = fpv.value.(*alert.Alert)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAlertRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAlertRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAlertRequest_FieldTerminalPathValue' with the value under path in 'CreateAlertRequest'.
func (fpv *CreateAlertRequest_FieldTerminalPathValue) CompareWith(source *CreateAlertRequest) (int, bool) {
	switch fpv.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*alert.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAlertRequest_FieldPathSelectorAlert:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAlertRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAlertRequest))
}

type CreateAlertRequest_FieldSubPathValue struct {
	CreateAlertRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAlertRequest_FieldPathValue = (*CreateAlertRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAlertRequest_FieldSubPathValue) AsAlertPathValue() (alert.Alert_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alert.Alert_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAlertRequest_FieldSubPathValue) SetTo(target **CreateAlertRequest) {
	if *target == nil {
		*target = new(CreateAlertRequest)
	}
	switch fpvs.Selector() {
	case CreateAlertRequest_FieldPathSelectorAlert:
		fpvs.subPathValue.(alert.Alert_FieldPathValue).SetTo(&(*target).Alert)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAlertRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAlertRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAlertRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAlertRequest_FieldSubPathValue) CompareWith(source *CreateAlertRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAlertRequest_FieldPathSelectorAlert:
		return fpvs.subPathValue.(alert.Alert_FieldPathValue).CompareWith(source.GetAlert())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAlertRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAlertRequest))
}

// CreateAlertRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAlertRequest according to their type
// Present only for array (repeated) types.
type CreateAlertRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAlertRequest_FieldPath
	ContainsValue(*CreateAlertRequest) bool
}

// ParseCreateAlertRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAlertRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAlertRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAlertRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAlertRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAlertRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAlertRequest_FieldTerminalPathArrayItemValue struct {
	CreateAlertRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAlertRequest_FieldPathArrayItemValue = (*CreateAlertRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAlertRequest as interface{}
func (fpaiv *CreateAlertRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAlertRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAlertRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAlertRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAlertRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAlertRequest'
func (fpaiv *CreateAlertRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAlertRequest) bool {
	slice := fpaiv.CreateAlertRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAlertRequest_FieldSubPathArrayItemValue struct {
	CreateAlertRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAlertRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAlertRequest_FieldSubPathArrayItemValue) AsAlertPathItemValue() (alert.Alert_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAlertRequest'
func (fpaivs *CreateAlertRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAlertRequest) bool {
	switch fpaivs.Selector() {
	case CreateAlertRequest_FieldPathSelectorAlert:
		return fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue).ContainsValue(source.GetAlert())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAlertRequest: %d", fpaivs.Selector()))
	}
}

// CreateAlertRequest_FieldPathArrayOfValues allows storing slice of values for CreateAlertRequest fields according to their type
type CreateAlertRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAlertRequest_FieldPath
}

func ParseCreateAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAlertRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAlertRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAlertRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAlertRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAlertRequest_FieldTerminalPathArrayOfValues struct {
	CreateAlertRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAlertRequest_FieldPathArrayOfValues = (*CreateAlertRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAlertRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAlertRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*alert.ParentReference) {
			values = append(values, v)
		}
	case CreateAlertRequest_FieldPathSelectorAlert:
		for _, v := range fpaov.values.([]*alert.Alert) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAlertRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*alert.ParentReference, bool) {
	res, ok := fpaov.values.([]*alert.ParentReference)
	return res, ok
}
func (fpaov *CreateAlertRequest_FieldTerminalPathArrayOfValues) AsAlertArrayOfValues() ([]*alert.Alert, bool) {
	res, ok := fpaov.values.([]*alert.Alert)
	return res, ok
}

type CreateAlertRequest_FieldSubPathArrayOfValues struct {
	CreateAlertRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAlertRequest_FieldPathArrayOfValues = (*CreateAlertRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAlertRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAlertRequest_FieldSubPathArrayOfValues) AsAlertPathArrayOfValues() (alert.Alert_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alert.Alert_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAlertRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAlertRequest_FieldPathSelector
	Get(source *UpdateAlertRequest) []interface{}
	GetSingle(source *UpdateAlertRequest) (interface{}, bool)
	ClearValue(item *UpdateAlertRequest)

	// Those methods build corresponding UpdateAlertRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAlertRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAlertRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAlertRequest_FieldPathArrayItemValue
}

type UpdateAlertRequest_FieldPathSelector int32

const (
	UpdateAlertRequest_FieldPathSelectorAlert      UpdateAlertRequest_FieldPathSelector = 0
	UpdateAlertRequest_FieldPathSelectorUpdateMask UpdateAlertRequest_FieldPathSelector = 1
	UpdateAlertRequest_FieldPathSelectorCas        UpdateAlertRequest_FieldPathSelector = 2
)

func (s UpdateAlertRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return "alert"
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAlertRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", s))
	}
}

func BuildUpdateAlertRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAlertRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAlertRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "alert":
			return &UpdateAlertRequest_FieldTerminalPath{selector: UpdateAlertRequest_FieldPathSelectorAlert}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAlertRequest_FieldTerminalPath{selector: UpdateAlertRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAlertRequest_FieldTerminalPath{selector: UpdateAlertRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "alert":
			if subpath, err := alert.BuildAlert_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAlertRequest_FieldSubPath{selector: UpdateAlertRequest_FieldPathSelectorAlert, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAlertRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAlertRequest_FieldSubPath{selector: UpdateAlertRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAlertRequest", fp)
}

func ParseUpdateAlertRequest_FieldPath(rawField string) (UpdateAlertRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAlertRequest_FieldPath(fp)
}

func MustParseUpdateAlertRequest_FieldPath(rawField string) UpdateAlertRequest_FieldPath {
	fp, err := ParseUpdateAlertRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAlertRequest_FieldTerminalPath struct {
	selector UpdateAlertRequest_FieldPathSelector
}

var _ UpdateAlertRequest_FieldPath = (*UpdateAlertRequest_FieldTerminalPath)(nil)

func (fp *UpdateAlertRequest_FieldTerminalPath) Selector() UpdateAlertRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAlertRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAlertRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAlertRequest
func (fp *UpdateAlertRequest_FieldTerminalPath) Get(source *UpdateAlertRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAlertRequest_FieldPathSelectorAlert:
			if source.Alert != nil {
				values = append(values, source.Alert)
			}
		case UpdateAlertRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAlertRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAlertRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAlertRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAlertRequest
func (fp *UpdateAlertRequest_FieldTerminalPath) GetSingle(source *UpdateAlertRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		res := source.GetAlert()
		return res, res != nil
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAlertRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAlertRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAlertRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return (*alert.Alert)(nil)
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		return (*alert.Alert_FieldMask)(nil)
	case UpdateAlertRequest_FieldPathSelectorCas:
		return (*UpdateAlertRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequest_FieldTerminalPath) ClearValue(item *UpdateAlertRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAlertRequest_FieldPathSelectorAlert:
			item.Alert = nil
		case UpdateAlertRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAlertRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAlertRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAlertRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAlertRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAlertRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAlertRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return &UpdateAlertRequest_FieldTerminalPathValue{UpdateAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert)}
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		return &UpdateAlertRequest_FieldTerminalPathValue{UpdateAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	case UpdateAlertRequest_FieldPathSelectorCas:
		return &UpdateAlertRequest_FieldTerminalPathValue{UpdateAlertRequest_FieldTerminalPath: *fp, value: value.(*UpdateAlertRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAlertRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAlertRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAlertRequest_FieldTerminalPathArrayOfValues{UpdateAlertRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return &UpdateAlertRequest_FieldTerminalPathArrayOfValues{UpdateAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert)}
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		return &UpdateAlertRequest_FieldTerminalPathArrayOfValues{UpdateAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	case UpdateAlertRequest_FieldPathSelectorCas:
		return &UpdateAlertRequest_FieldTerminalPathArrayOfValues{UpdateAlertRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAlertRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAlertRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAlertRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAlertRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAlertRequest_FieldSubPath struct {
	selector UpdateAlertRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAlertRequest_FieldPath = (*UpdateAlertRequest_FieldSubPath)(nil)

func (fps *UpdateAlertRequest_FieldSubPath) Selector() UpdateAlertRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAlertRequest_FieldSubPath) AsAlertSubPath() (alert.Alert_FieldPath, bool) {
	res, ok := fps.subPath.(alert.Alert_FieldPath)
	return res, ok
}
func (fps *UpdateAlertRequest_FieldSubPath) AsCasSubPath() (UpdateAlertRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAlertRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAlertRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAlertRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAlertRequest
func (fps *UpdateAlertRequest_FieldSubPath) Get(source *UpdateAlertRequest) (values []interface{}) {
	if asAlertFieldPath, ok := fps.AsAlertSubPath(); ok {
		values = append(values, asAlertFieldPath.Get(source.GetAlert())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAlertRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAlertRequest))
}

// GetSingle returns value of selected field from source UpdateAlertRequest
func (fps *UpdateAlertRequest_FieldSubPath) GetSingle(source *UpdateAlertRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		if source.GetAlert() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAlert())
	case UpdateAlertRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fps.selector))
	}
}

func (fps *UpdateAlertRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAlertRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAlertRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAlertRequest_FieldSubPath) ClearValue(item *UpdateAlertRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAlertRequest_FieldPathSelectorAlert:
			fps.subPath.ClearValueRaw(item.Alert)
		case UpdateAlertRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAlertRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAlertRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAlertRequest_FieldSubPath) WithIValue(value interface{}) UpdateAlertRequest_FieldPathValue {
	return &UpdateAlertRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAlertRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAlertRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAlertRequest_FieldPathArrayOfValues {
	return &UpdateAlertRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAlertRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAlertRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAlertRequest_FieldPathArrayItemValue {
	return &UpdateAlertRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAlertRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAlertRequest_FieldPathValue allows storing values for UpdateAlertRequest fields according to their type
type UpdateAlertRequest_FieldPathValue interface {
	UpdateAlertRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAlertRequest)
	CompareWith(*UpdateAlertRequest) (cmp int, comparable bool)
}

func ParseUpdateAlertRequest_FieldPathValue(pathStr, valueStr string) (UpdateAlertRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAlertRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAlertRequest_FieldPathValue), nil
}

func MustParseUpdateAlertRequest_FieldPathValue(pathStr, valueStr string) UpdateAlertRequest_FieldPathValue {
	fpv, err := ParseUpdateAlertRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAlertRequest_FieldTerminalPathValue struct {
	UpdateAlertRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertRequest_FieldPathValue = (*UpdateAlertRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAlertRequest' as interface{}
func (fpv *UpdateAlertRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAlertRequest_FieldTerminalPathValue) AsAlertValue() (*alert.Alert, bool) {
	res, ok := fpv.value.(*alert.Alert)
	return res, ok
}
func (fpv *UpdateAlertRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}
func (fpv *UpdateAlertRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAlertRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAlertRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAlertRequest
func (fpv *UpdateAlertRequest_FieldTerminalPathValue) SetTo(target **UpdateAlertRequest) {
	if *target == nil {
		*target = new(UpdateAlertRequest)
	}
	switch fpv.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		(*target).Alert = fpv.value.(*alert.Alert)
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*alert.Alert_FieldMask)
	case UpdateAlertRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAlertRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAlertRequest_FieldTerminalPathValue' with the value under path in 'UpdateAlertRequest'.
func (fpv *UpdateAlertRequest_FieldTerminalPathValue) CompareWith(source *UpdateAlertRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return 0, false
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAlertRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAlertRequest))
}

type UpdateAlertRequest_FieldSubPathValue struct {
	UpdateAlertRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAlertRequest_FieldPathValue = (*UpdateAlertRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAlertRequest_FieldSubPathValue) AsAlertPathValue() (alert.Alert_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alert.Alert_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAlertRequest_FieldSubPathValue) AsCasPathValue() (UpdateAlertRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAlertRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAlertRequest_FieldSubPathValue) SetTo(target **UpdateAlertRequest) {
	if *target == nil {
		*target = new(UpdateAlertRequest)
	}
	switch fpvs.Selector() {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		fpvs.subPathValue.(alert.Alert_FieldPathValue).SetTo(&(*target).Alert)
	case UpdateAlertRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAlertRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAlertRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAlertRequest_FieldSubPathValue) CompareWith(source *UpdateAlertRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return fpvs.subPathValue.(alert.Alert_FieldPathValue).CompareWith(source.GetAlert())
	case UpdateAlertRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAlertRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAlertRequest))
}

// UpdateAlertRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAlertRequest according to their type
// Present only for array (repeated) types.
type UpdateAlertRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAlertRequest_FieldPath
	ContainsValue(*UpdateAlertRequest) bool
}

// ParseUpdateAlertRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAlertRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAlertRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAlertRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAlertRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAlertRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAlertRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAlertRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertRequest_FieldPathArrayItemValue = (*UpdateAlertRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAlertRequest as interface{}
func (fpaiv *UpdateAlertRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAlertRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAlertRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAlertRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAlertRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAlertRequest'
func (fpaiv *UpdateAlertRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAlertRequest) bool {
	slice := fpaiv.UpdateAlertRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAlertRequest_FieldSubPathArrayItemValue struct {
	UpdateAlertRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAlertRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAlertRequest_FieldSubPathArrayItemValue) AsAlertPathItemValue() (alert.Alert_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAlertRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAlertRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAlertRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAlertRequest'
func (fpaivs *UpdateAlertRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAlertRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		return fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue).ContainsValue(source.GetAlert())
	case UpdateAlertRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAlertRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAlertRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAlertRequest fields according to their type
type UpdateAlertRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAlertRequest_FieldPath
}

func ParseUpdateAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAlertRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAlertRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAlertRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAlertRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAlertRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAlertRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAlertRequest_FieldPathArrayOfValues = (*UpdateAlertRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAlertRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAlertRequest_FieldPathSelectorAlert:
		for _, v := range fpaov.values.([]*alert.Alert) {
			values = append(values, v)
		}
	case UpdateAlertRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	case UpdateAlertRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAlertRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAlertRequest_FieldTerminalPathArrayOfValues) AsAlertArrayOfValues() ([]*alert.Alert, bool) {
	res, ok := fpaov.values.([]*alert.Alert)
	return res, ok
}
func (fpaov *UpdateAlertRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}
func (fpaov *UpdateAlertRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAlertRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAlertRequest_CAS)
	return res, ok
}

type UpdateAlertRequest_FieldSubPathArrayOfValues struct {
	UpdateAlertRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAlertRequest_FieldPathArrayOfValues = (*UpdateAlertRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAlertRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAlertRequest_FieldSubPathArrayOfValues) AsAlertPathArrayOfValues() (alert.Alert_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alert.Alert_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAlertRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAlertRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAlertRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAlertRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAlertRequestCAS_FieldPathSelector
	Get(source *UpdateAlertRequest_CAS) []interface{}
	GetSingle(source *UpdateAlertRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAlertRequest_CAS)

	// Those methods build corresponding UpdateAlertRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAlertRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAlertRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAlertRequestCAS_FieldPathArrayItemValue
}

type UpdateAlertRequestCAS_FieldPathSelector int32

const (
	UpdateAlertRequestCAS_FieldPathSelectorConditionalState UpdateAlertRequestCAS_FieldPathSelector = 0
	UpdateAlertRequestCAS_FieldPathSelectorFieldMask        UpdateAlertRequestCAS_FieldPathSelector = 1
)

func (s UpdateAlertRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", s))
	}
}

func BuildUpdateAlertRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAlertRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAlertRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAlertRequestCAS_FieldTerminalPath{selector: UpdateAlertRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAlertRequestCAS_FieldTerminalPath{selector: UpdateAlertRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := alert.BuildAlert_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAlertRequestCAS_FieldSubPath{selector: UpdateAlertRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAlertRequest_CAS", fp)
}

func ParseUpdateAlertRequestCAS_FieldPath(rawField string) (UpdateAlertRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAlertRequestCAS_FieldPath(fp)
}

func MustParseUpdateAlertRequestCAS_FieldPath(rawField string) UpdateAlertRequestCAS_FieldPath {
	fp, err := ParseUpdateAlertRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAlertRequestCAS_FieldTerminalPath struct {
	selector UpdateAlertRequestCAS_FieldPathSelector
}

var _ UpdateAlertRequestCAS_FieldPath = (*UpdateAlertRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) Selector() UpdateAlertRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAlertRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAlertRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAlertRequest_CAS
func (fp *UpdateAlertRequestCAS_FieldTerminalPath) Get(source *UpdateAlertRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAlertRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAlertRequest_CAS
func (fp *UpdateAlertRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAlertRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAlertRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAlertRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return (*alert.Alert)(nil)
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		return (*alert.Alert_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAlertRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAlertRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAlertRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAlertRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAlertRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAlertRequestCAS_FieldTerminalPathValue{UpdateAlertRequestCAS_FieldTerminalPath: *fp, value: value.(*alert.Alert)}
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAlertRequestCAS_FieldTerminalPathValue{UpdateAlertRequestCAS_FieldTerminalPath: *fp, value: value.(*alert.Alert_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAlertRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues{UpdateAlertRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues{UpdateAlertRequestCAS_FieldTerminalPath: *fp, values: values.([]*alert.Alert)}
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues{UpdateAlertRequestCAS_FieldTerminalPath: *fp, values: values.([]*alert.Alert_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAlertRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAlertRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAlertRequestCAS_FieldSubPath struct {
	selector UpdateAlertRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAlertRequestCAS_FieldPath = (*UpdateAlertRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAlertRequestCAS_FieldSubPath) Selector() UpdateAlertRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAlertRequestCAS_FieldSubPath) AsConditionalStateSubPath() (alert.Alert_FieldPath, bool) {
	res, ok := fps.subPath.(alert.Alert_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAlertRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAlertRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAlertRequest_CAS
func (fps *UpdateAlertRequestCAS_FieldSubPath) Get(source *UpdateAlertRequest_CAS) (values []interface{}) {
	if asAlertFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAlertFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAlertRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAlertRequest_CAS
func (fps *UpdateAlertRequestCAS_FieldSubPath) GetSingle(source *UpdateAlertRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAlertRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAlertRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) ClearValue(item *UpdateAlertRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAlertRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAlertRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAlertRequestCAS_FieldPathValue {
	return &UpdateAlertRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAlertRequestCAS_FieldPathArrayOfValues {
	return &UpdateAlertRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAlertRequestCAS_FieldPathArrayItemValue {
	return &UpdateAlertRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAlertRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAlertRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAlertRequestCAS_FieldPathValue interface {
	UpdateAlertRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAlertRequest_CAS)
	CompareWith(*UpdateAlertRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAlertRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAlertRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAlertRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAlertRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAlertRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAlertRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAlertRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAlertRequestCAS_FieldTerminalPathValue struct {
	UpdateAlertRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertRequestCAS_FieldPathValue = (*UpdateAlertRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*alert.Alert, bool) {
	res, ok := fpv.value.(*alert.Alert)
	return res, ok
}
func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*alert.Alert_FieldMask, bool) {
	res, ok := fpv.value.(*alert.Alert_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAlertRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAlertRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*alert.Alert)
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*alert.Alert_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAlertRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAlertRequest_CAS'.
func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAlertRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAlertRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAlertRequest_CAS))
}

type UpdateAlertRequestCAS_FieldSubPathValue struct {
	UpdateAlertRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAlertRequestCAS_FieldPathValue = (*UpdateAlertRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAlertRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (alert.Alert_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(alert.Alert_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAlertRequestCAS_FieldSubPathValue) SetTo(target **UpdateAlertRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAlertRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(alert.Alert_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAlertRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAlertRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAlertRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAlertRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(alert.Alert_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAlertRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAlertRequest_CAS))
}

// UpdateAlertRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAlertRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAlertRequestCAS_FieldPath
	ContainsValue(*UpdateAlertRequest_CAS) bool
}

// ParseUpdateAlertRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAlertRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAlertRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAlertRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAlertRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAlertRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAlertRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAlertRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAlertRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAlertRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAlertRequestCAS_FieldPathArrayItemValue = (*UpdateAlertRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAlertRequest_CAS as interface{}
func (fpaiv *UpdateAlertRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAlertRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAlertRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAlertRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAlertRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAlertRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAlertRequest_CAS) bool {
	slice := fpaiv.UpdateAlertRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAlertRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAlertRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAlertRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAlertRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (alert.Alert_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAlertRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAlertRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(alert.Alert_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAlertRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAlertRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAlertRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAlertRequestCAS_FieldPath
}

func ParseUpdateAlertRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAlertRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAlertRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAlertRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAlertRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAlertRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAlertRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAlertRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAlertRequestCAS_FieldPathArrayOfValues = (*UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAlertRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*alert.Alert) {
			values = append(values, v)
		}
	case UpdateAlertRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*alert.Alert_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*alert.Alert, bool) {
	res, ok := fpaov.values.([]*alert.Alert)
	return res, ok
}
func (fpaov *UpdateAlertRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*alert.Alert_FieldMask, bool) {
	res, ok := fpaov.values.([]*alert.Alert_FieldMask)
	return res, ok
}

type UpdateAlertRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAlertRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAlertRequestCAS_FieldPathArrayOfValues = (*UpdateAlertRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAlertRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAlertRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (alert.Alert_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(alert.Alert_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAlertRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAlertRequest_FieldPathSelector
	Get(source *DeleteAlertRequest) []interface{}
	GetSingle(source *DeleteAlertRequest) (interface{}, bool)
	ClearValue(item *DeleteAlertRequest)

	// Those methods build corresponding DeleteAlertRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAlertRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAlertRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAlertRequest_FieldPathArrayItemValue
}

type DeleteAlertRequest_FieldPathSelector int32

const (
	DeleteAlertRequest_FieldPathSelectorName DeleteAlertRequest_FieldPathSelector = 0
)

func (s DeleteAlertRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAlertRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", s))
	}
}

func BuildDeleteAlertRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAlertRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAlertRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAlertRequest_FieldTerminalPath{selector: DeleteAlertRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAlertRequest", fp)
}

func ParseDeleteAlertRequest_FieldPath(rawField string) (DeleteAlertRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAlertRequest_FieldPath(fp)
}

func MustParseDeleteAlertRequest_FieldPath(rawField string) DeleteAlertRequest_FieldPath {
	fp, err := ParseDeleteAlertRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAlertRequest_FieldTerminalPath struct {
	selector DeleteAlertRequest_FieldPathSelector
}

var _ DeleteAlertRequest_FieldPath = (*DeleteAlertRequest_FieldTerminalPath)(nil)

func (fp *DeleteAlertRequest_FieldTerminalPath) Selector() DeleteAlertRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAlertRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAlertRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAlertRequest
func (fp *DeleteAlertRequest_FieldTerminalPath) Get(source *DeleteAlertRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAlertRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAlertRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAlertRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAlertRequest
func (fp *DeleteAlertRequest_FieldTerminalPath) GetSingle(source *DeleteAlertRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAlertRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAlertRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		return (*alert.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertRequest_FieldTerminalPath) ClearValue(item *DeleteAlertRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAlertRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAlertRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAlertRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAlertRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAlertRequest_FieldPathSelectorName
}

func (fp *DeleteAlertRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAlertRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		return &DeleteAlertRequest_FieldTerminalPathValue{DeleteAlertRequest_FieldTerminalPath: *fp, value: value.(*alert.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAlertRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAlertRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAlertRequest_FieldTerminalPathArrayOfValues{DeleteAlertRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		return &DeleteAlertRequest_FieldTerminalPathArrayOfValues{DeleteAlertRequest_FieldTerminalPath: *fp, values: values.([]*alert.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAlertRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAlertRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAlertRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fp.selector))
	}
}

func (fp *DeleteAlertRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAlertRequest_FieldPathValue allows storing values for DeleteAlertRequest fields according to their type
type DeleteAlertRequest_FieldPathValue interface {
	DeleteAlertRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAlertRequest)
	CompareWith(*DeleteAlertRequest) (cmp int, comparable bool)
}

func ParseDeleteAlertRequest_FieldPathValue(pathStr, valueStr string) (DeleteAlertRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAlertRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAlertRequest_FieldPathValue), nil
}

func MustParseDeleteAlertRequest_FieldPathValue(pathStr, valueStr string) DeleteAlertRequest_FieldPathValue {
	fpv, err := ParseDeleteAlertRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAlertRequest_FieldTerminalPathValue struct {
	DeleteAlertRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAlertRequest_FieldPathValue = (*DeleteAlertRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAlertRequest' as interface{}
func (fpv *DeleteAlertRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAlertRequest_FieldTerminalPathValue) AsNameValue() (*alert.Reference, bool) {
	res, ok := fpv.value.(*alert.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAlertRequest
func (fpv *DeleteAlertRequest_FieldTerminalPathValue) SetTo(target **DeleteAlertRequest) {
	if *target == nil {
		*target = new(DeleteAlertRequest)
	}
	switch fpv.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*alert.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAlertRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAlertRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAlertRequest_FieldTerminalPathValue' with the value under path in 'DeleteAlertRequest'.
func (fpv *DeleteAlertRequest_FieldTerminalPathValue) CompareWith(source *DeleteAlertRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*alert.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAlertRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAlertRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAlertRequest))
}

// DeleteAlertRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAlertRequest according to their type
// Present only for array (repeated) types.
type DeleteAlertRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAlertRequest_FieldPath
	ContainsValue(*DeleteAlertRequest) bool
}

// ParseDeleteAlertRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAlertRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAlertRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAlertRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAlertRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAlertRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAlertRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAlertRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAlertRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAlertRequest_FieldPathArrayItemValue = (*DeleteAlertRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAlertRequest as interface{}
func (fpaiv *DeleteAlertRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAlertRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAlertRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAlertRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAlertRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAlertRequest'
func (fpaiv *DeleteAlertRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAlertRequest) bool {
	slice := fpaiv.DeleteAlertRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAlertRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAlertRequest fields according to their type
type DeleteAlertRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAlertRequest_FieldPath
}

func ParseDeleteAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAlertRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAlertRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAlertRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAlertRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAlertRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAlertRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAlertRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAlertRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAlertRequest_FieldPathArrayOfValues = (*DeleteAlertRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAlertRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAlertRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*alert.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAlertRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*alert.Reference, bool) {
	res, ok := fpaov.values.([]*alert.Reference)
	return res, ok
}
