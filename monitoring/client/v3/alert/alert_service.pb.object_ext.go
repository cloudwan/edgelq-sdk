// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/alert_service.proto
// DO NOT EDIT!!!

package alert_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alert"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetAlertRequest) GotenObjectExt() {}

func (o *GetAlertRequest) MakeFullFieldMask() *GetAlertRequest_FieldMask {
	return FullGetAlertRequest_FieldMask()
}

func (o *GetAlertRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAlertRequest_FieldMask()
}

func (o *GetAlertRequest) MakeDiffFieldMask(other *GetAlertRequest) *GetAlertRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAlertRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAlertRequest_FieldMask()
	}

	res := &GetAlertRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAlertRequest_FieldTerminalPath{selector: GetAlertRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAlertRequest_FieldTerminalPath{selector: GetAlertRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAlertRequest_FieldTerminalPath{selector: GetAlertRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAlertRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAlertRequest))
}

func (o *GetAlertRequest) Clone() *GetAlertRequest {
	if o == nil {
		return nil
	}
	result := &GetAlertRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &alert.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alert.Alert_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAlertRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAlertRequest) Merge(source *GetAlertRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &alert.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAlertRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAlertRequest))
}

func (o *BatchGetAlertsRequest) GotenObjectExt() {}

func (o *BatchGetAlertsRequest) MakeFullFieldMask() *BatchGetAlertsRequest_FieldMask {
	return FullBatchGetAlertsRequest_FieldMask()
}

func (o *BatchGetAlertsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAlertsRequest_FieldMask()
}

func (o *BatchGetAlertsRequest) MakeDiffFieldMask(other *BatchGetAlertsRequest) *BatchGetAlertsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAlertsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAlertsRequest_FieldMask()
	}

	res := &BatchGetAlertsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAlertsRequest_FieldTerminalPath{selector: BatchGetAlertsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAlertsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAlertsRequest))
}

func (o *BatchGetAlertsRequest) Clone() *BatchGetAlertsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAlertsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alert.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*alert.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &alert.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alert.Alert_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAlertsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAlertsRequest) Merge(source *BatchGetAlertsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alert.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alert.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &alert.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAlertsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAlertsRequest))
}

func (o *BatchGetAlertsResponse) GotenObjectExt() {}

func (o *BatchGetAlertsResponse) MakeFullFieldMask() *BatchGetAlertsResponse_FieldMask {
	return FullBatchGetAlertsResponse_FieldMask()
}

func (o *BatchGetAlertsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAlertsResponse_FieldMask()
}

func (o *BatchGetAlertsResponse) MakeDiffFieldMask(other *BatchGetAlertsResponse) *BatchGetAlertsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAlertsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAlertsResponse_FieldMask()
	}

	res := &BatchGetAlertsResponse_FieldMask{}

	if len(o.GetAlerts()) == len(other.GetAlerts()) {
		for i, lValue := range o.GetAlerts() {
			rValue := other.GetAlerts()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAlertsResponse_FieldTerminalPath{selector: BatchGetAlertsResponse_FieldPathSelectorAlerts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAlertsResponse_FieldTerminalPath{selector: BatchGetAlertsResponse_FieldPathSelectorAlerts})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAlertsResponse_FieldTerminalPath{selector: BatchGetAlertsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAlertsResponse_FieldTerminalPath{selector: BatchGetAlertsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAlertsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAlertsResponse))
}

func (o *BatchGetAlertsResponse) Clone() *BatchGetAlertsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAlertsResponse{}
	result.Alerts = make([]*alert.Alert, len(o.Alerts))
	for i, sourceValue := range o.Alerts {
		result.Alerts[i] = sourceValue.Clone()
	}
	result.Missing = make([]*alert.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &alert.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAlertsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAlertsResponse) Merge(source *BatchGetAlertsResponse) {
	for _, sourceValue := range source.GetAlerts() {
		exists := false
		for _, currentValue := range o.Alerts {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alert.Alert
			if sourceValue != nil {
				newDstElement = new(alert.Alert)
				newDstElement.Merge(sourceValue)
			}
			o.Alerts = append(o.Alerts, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alert.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &alert.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAlertsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAlertsResponse))
}

func (o *ListAlertsRequest) GotenObjectExt() {}

func (o *ListAlertsRequest) MakeFullFieldMask() *ListAlertsRequest_FieldMask {
	return FullListAlertsRequest_FieldMask()
}

func (o *ListAlertsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAlertsRequest_FieldMask()
}

func (o *ListAlertsRequest) MakeDiffFieldMask(other *ListAlertsRequest) *ListAlertsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAlertsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAlertsRequest_FieldMask()
	}

	res := &ListAlertsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAlertsRequest_FieldTerminalPath{selector: ListAlertsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListAlertsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAlertsRequest))
}

func (o *ListAlertsRequest) Clone() *ListAlertsRequest {
	if o == nil {
		return nil
	}
	result := &ListAlertsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alert.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &alert.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &alert.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &alert.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alert.Alert_FieldMask)
	result.View = o.View
	return result
}

func (o *ListAlertsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAlertsRequest) Merge(source *ListAlertsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alert.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &alert.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &alert.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &alert.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListAlertsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAlertsRequest))
}

func (o *ListAlertsResponse) GotenObjectExt() {}

func (o *ListAlertsResponse) MakeFullFieldMask() *ListAlertsResponse_FieldMask {
	return FullListAlertsResponse_FieldMask()
}

func (o *ListAlertsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAlertsResponse_FieldMask()
}

func (o *ListAlertsResponse) MakeDiffFieldMask(other *ListAlertsResponse) *ListAlertsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAlertsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAlertsResponse_FieldMask()
	}

	res := &ListAlertsResponse_FieldMask{}

	if len(o.GetAlerts()) == len(other.GetAlerts()) {
		for i, lValue := range o.GetAlerts() {
			rValue := other.GetAlerts()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorAlerts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorAlerts})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAlertsResponse_FieldTerminalPath{selector: ListAlertsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListAlertsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAlertsResponse))
}

func (o *ListAlertsResponse) Clone() *ListAlertsResponse {
	if o == nil {
		return nil
	}
	result := &ListAlertsResponse{}
	result.Alerts = make([]*alert.Alert, len(o.Alerts))
	for i, sourceValue := range o.Alerts {
		result.Alerts[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &alert.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &alert.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListAlertsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAlertsResponse) Merge(source *ListAlertsResponse) {
	for _, sourceValue := range source.GetAlerts() {
		exists := false
		for _, currentValue := range o.Alerts {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alert.Alert
			if sourceValue != nil {
				newDstElement = new(alert.Alert)
				newDstElement.Merge(sourceValue)
			}
			o.Alerts = append(o.Alerts, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &alert.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &alert.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListAlertsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAlertsResponse))
}

func (o *WatchAlertRequest) GotenObjectExt() {}

func (o *WatchAlertRequest) MakeFullFieldMask() *WatchAlertRequest_FieldMask {
	return FullWatchAlertRequest_FieldMask()
}

func (o *WatchAlertRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertRequest_FieldMask()
}

func (o *WatchAlertRequest) MakeDiffFieldMask(other *WatchAlertRequest) *WatchAlertRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertRequest_FieldMask()
	}

	res := &WatchAlertRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAlertRequest_FieldTerminalPath{selector: WatchAlertRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAlertRequest_FieldTerminalPath{selector: WatchAlertRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAlertRequest_FieldTerminalPath{selector: WatchAlertRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAlertRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertRequest))
}

func (o *WatchAlertRequest) Clone() *WatchAlertRequest {
	if o == nil {
		return nil
	}
	result := &WatchAlertRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &alert.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alert.Alert_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAlertRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertRequest) Merge(source *WatchAlertRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &alert.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAlertRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertRequest))
}

func (o *WatchAlertResponse) GotenObjectExt() {}

func (o *WatchAlertResponse) MakeFullFieldMask() *WatchAlertResponse_FieldMask {
	return FullWatchAlertResponse_FieldMask()
}

func (o *WatchAlertResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertResponse_FieldMask()
}

func (o *WatchAlertResponse) MakeDiffFieldMask(other *WatchAlertResponse) *WatchAlertResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertResponse_FieldMask()
	}

	res := &WatchAlertResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAlertResponse_FieldTerminalPath{selector: WatchAlertResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAlertResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertResponse))
}

func (o *WatchAlertResponse) Clone() *WatchAlertResponse {
	if o == nil {
		return nil
	}
	result := &WatchAlertResponse{}
	result.Change = proto.Clone(o.Change).(*alert.AlertChange)
	return result
}

func (o *WatchAlertResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertResponse) Merge(source *WatchAlertResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(alert.AlertChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAlertResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertResponse))
}

func (o *WatchAlertsRequest) GotenObjectExt() {}

func (o *WatchAlertsRequest) MakeFullFieldMask() *WatchAlertsRequest_FieldMask {
	return FullWatchAlertsRequest_FieldMask()
}

func (o *WatchAlertsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertsRequest_FieldMask()
}

func (o *WatchAlertsRequest) MakeDiffFieldMask(other *WatchAlertsRequest) *WatchAlertsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertsRequest_FieldMask()
	}

	res := &WatchAlertsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAlertsRequest_FieldTerminalPath{selector: WatchAlertsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAlertsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertsRequest))
}

func (o *WatchAlertsRequest) Clone() *WatchAlertsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAlertsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alert.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &alert.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &alert.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &alert.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*alert.Alert_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAlertsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertsRequest) Merge(source *WatchAlertsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alert.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &alert.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &alert.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &alert.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAlertsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertsRequest))
}

func (o *WatchAlertsResponse) GotenObjectExt() {}

func (o *WatchAlertsResponse) MakeFullFieldMask() *WatchAlertsResponse_FieldMask {
	return FullWatchAlertsResponse_FieldMask()
}

func (o *WatchAlertsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertsResponse_FieldMask()
}

func (o *WatchAlertsResponse) MakeDiffFieldMask(other *WatchAlertsResponse) *WatchAlertsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertsResponse_FieldMask()
	}

	res := &WatchAlertsResponse_FieldMask{}

	if len(o.GetAlertChanges()) == len(other.GetAlertChanges()) {
		for i, lValue := range o.GetAlertChanges() {
			rValue := other.GetAlertChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorAlertChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorAlertChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAlertsResponse_FieldSubPath{selector: WatchAlertsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAlertsResponse_FieldTerminalPath{selector: WatchAlertsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAlertsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertsResponse))
}

func (o *WatchAlertsResponse) Clone() *WatchAlertsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAlertsResponse{}
	result.AlertChanges = make([]*alert.AlertChange, len(o.AlertChanges))
	for i, sourceValue := range o.AlertChanges {
		result.AlertChanges[i] = proto.Clone(sourceValue).(*alert.AlertChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAlertsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertsResponse) Merge(source *WatchAlertsResponse) {
	for _, sourceValue := range source.GetAlertChanges() {
		exists := false
		for _, currentValue := range o.AlertChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *alert.AlertChange
			if sourceValue != nil {
				newDstElement = new(alert.AlertChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AlertChanges = append(o.AlertChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAlertsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAlertsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertsResponse))
}

func (o *WatchAlertsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAlertsResponse_PageTokenChange) MakeFullFieldMask() *WatchAlertsResponse_PageTokenChange_FieldMask {
	return FullWatchAlertsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAlertsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAlertsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAlertsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAlertsResponse_PageTokenChange) *WatchAlertsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAlertsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAlertsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAlertsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAlertsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAlertsResponsePageTokenChange_FieldTerminalPath{selector: WatchAlertsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAlertsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAlertsResponse_PageTokenChange))
}

func (o *WatchAlertsResponse_PageTokenChange) Clone() *WatchAlertsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAlertsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &alert.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &alert.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAlertsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAlertsResponse_PageTokenChange) Merge(source *WatchAlertsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &alert.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &alert.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAlertsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAlertsResponse_PageTokenChange))
}

func (o *CreateAlertRequest) GotenObjectExt() {}

func (o *CreateAlertRequest) MakeFullFieldMask() *CreateAlertRequest_FieldMask {
	return FullCreateAlertRequest_FieldMask()
}

func (o *CreateAlertRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAlertRequest_FieldMask()
}

func (o *CreateAlertRequest) MakeDiffFieldMask(other *CreateAlertRequest) *CreateAlertRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAlertRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAlertRequest_FieldMask()
	}

	res := &CreateAlertRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAlertRequest_FieldTerminalPath{selector: CreateAlertRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetAlert().MakeDiffFieldMask(other.GetAlert())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAlertRequest_FieldTerminalPath{selector: CreateAlertRequest_FieldPathSelectorAlert})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAlertRequest_FieldSubPath{selector: CreateAlertRequest_FieldPathSelectorAlert, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAlertRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAlertRequest))
}

func (o *CreateAlertRequest) Clone() *CreateAlertRequest {
	if o == nil {
		return nil
	}
	result := &CreateAlertRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &alert.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Alert = o.Alert.Clone()
	return result
}

func (o *CreateAlertRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAlertRequest) Merge(source *CreateAlertRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &alert.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetAlert() != nil {
		if o.Alert == nil {
			o.Alert = new(alert.Alert)
		}
		o.Alert.Merge(source.GetAlert())
	}
}

func (o *CreateAlertRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAlertRequest))
}

func (o *UpdateAlertRequest) GotenObjectExt() {}

func (o *UpdateAlertRequest) MakeFullFieldMask() *UpdateAlertRequest_FieldMask {
	return FullUpdateAlertRequest_FieldMask()
}

func (o *UpdateAlertRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAlertRequest_FieldMask()
}

func (o *UpdateAlertRequest) MakeDiffFieldMask(other *UpdateAlertRequest) *UpdateAlertRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAlertRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAlertRequest_FieldMask()
	}

	res := &UpdateAlertRequest_FieldMask{}
	{
		subMask := o.GetAlert().MakeDiffFieldMask(other.GetAlert())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAlertRequest_FieldTerminalPath{selector: UpdateAlertRequest_FieldPathSelectorAlert})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAlertRequest_FieldSubPath{selector: UpdateAlertRequest_FieldPathSelectorAlert, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAlertRequest_FieldTerminalPath{selector: UpdateAlertRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAlertRequest_FieldTerminalPath{selector: UpdateAlertRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAlertRequest_FieldSubPath{selector: UpdateAlertRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAlertRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAlertRequest))
}

func (o *UpdateAlertRequest) Clone() *UpdateAlertRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAlertRequest{}
	result.Alert = o.Alert.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*alert.Alert_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAlertRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAlertRequest) Merge(source *UpdateAlertRequest) {
	if source.GetAlert() != nil {
		if o.Alert == nil {
			o.Alert = new(alert.Alert)
		}
		o.Alert.Merge(source.GetAlert())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAlertRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAlertRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAlertRequest))
}

func (o *UpdateAlertRequest_CAS) GotenObjectExt() {}

func (o *UpdateAlertRequest_CAS) MakeFullFieldMask() *UpdateAlertRequest_CAS_FieldMask {
	return FullUpdateAlertRequest_CAS_FieldMask()
}

func (o *UpdateAlertRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAlertRequest_CAS_FieldMask()
}

func (o *UpdateAlertRequest_CAS) MakeDiffFieldMask(other *UpdateAlertRequest_CAS) *UpdateAlertRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAlertRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAlertRequest_CAS_FieldMask()
	}

	res := &UpdateAlertRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAlertRequestCAS_FieldTerminalPath{selector: UpdateAlertRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAlertRequestCAS_FieldSubPath{selector: UpdateAlertRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAlertRequestCAS_FieldTerminalPath{selector: UpdateAlertRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAlertRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAlertRequest_CAS))
}

func (o *UpdateAlertRequest_CAS) Clone() *UpdateAlertRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAlertRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*alert.Alert_FieldMask)
	return result
}

func (o *UpdateAlertRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAlertRequest_CAS) Merge(source *UpdateAlertRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(alert.Alert)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(alert.Alert_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAlertRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAlertRequest_CAS))
}

func (o *DeleteAlertRequest) GotenObjectExt() {}

func (o *DeleteAlertRequest) MakeFullFieldMask() *DeleteAlertRequest_FieldMask {
	return FullDeleteAlertRequest_FieldMask()
}

func (o *DeleteAlertRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAlertRequest_FieldMask()
}

func (o *DeleteAlertRequest) MakeDiffFieldMask(other *DeleteAlertRequest) *DeleteAlertRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAlertRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAlertRequest_FieldMask()
	}

	res := &DeleteAlertRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAlertRequest_FieldTerminalPath{selector: DeleteAlertRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAlertRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAlertRequest))
}

func (o *DeleteAlertRequest) Clone() *DeleteAlertRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAlertRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &alert.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAlertRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAlertRequest) Merge(source *DeleteAlertRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &alert.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAlertRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAlertRequest))
}
