// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/monitored_resource_descriptor_service.proto
// DO NOT EDIT!!!

package monitored_resource_descriptor_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type BatchGetMonitoredResourceDescriptorsRequest_FieldMask struct {
	Paths []BatchGetMonitoredResourceDescriptorsRequest_FieldPath
}

func FullBatchGetMonitoredResourceDescriptorsRequest_FieldMask() *BatchGetMonitoredResourceDescriptorsRequest_FieldMask {
	res := &BatchGetMonitoredResourceDescriptorsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Subtract(other *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) *BatchGetMonitoredResourceDescriptorsRequest_FieldMask {
	result := &BatchGetMonitoredResourceDescriptorsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetMonitoredResourceDescriptorsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) FilterInputFields() *BatchGetMonitoredResourceDescriptorsRequest_FieldMask {
	result := &BatchGetMonitoredResourceDescriptorsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetMonitoredResourceDescriptorsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetMonitoredResourceDescriptorsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) AppendPath(path BatchGetMonitoredResourceDescriptorsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetMonitoredResourceDescriptorsRequest_FieldPath))
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) GetPaths() []BatchGetMonitoredResourceDescriptorsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Set(target, source *BatchGetMonitoredResourceDescriptorsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetMonitoredResourceDescriptorsRequest), source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) Project(source *BatchGetMonitoredResourceDescriptorsRequest) *BatchGetMonitoredResourceDescriptorsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetMonitoredResourceDescriptorsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldMask struct {
	Paths []BatchGetMonitoredResourceDescriptorsResponse_FieldPath
}

func FullBatchGetMonitoredResourceDescriptorsResponse_FieldMask() *BatchGetMonitoredResourceDescriptorsResponse_FieldMask {
	res := &BatchGetMonitoredResourceDescriptorsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors})
	res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Subtract(other *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) *BatchGetMonitoredResourceDescriptorsResponse_FieldMask {
	result := &BatchGetMonitoredResourceDescriptorsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
						mySubMasks[BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors] = monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetMonitoredResourceDescriptorsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) FilterInputFields() *BatchGetMonitoredResourceDescriptorsResponse_FieldMask {
	result := &BatchGetMonitoredResourceDescriptorsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			if _, ok := path.(*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath); ok {
				for _, subpath := range monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath); ok {
				selectedMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{
					Paths: []monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath{sub.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetMonitoredResourceDescriptorsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetMonitoredResourceDescriptorsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) AppendPath(path BatchGetMonitoredResourceDescriptorsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetMonitoredResourceDescriptorsResponse_FieldPath))
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) GetPaths() []BatchGetMonitoredResourceDescriptorsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Set(target, source *BatchGetMonitoredResourceDescriptorsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetMonitoredResourceDescriptorsResponse), source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) Project(source *BatchGetMonitoredResourceDescriptorsResponse) *BatchGetMonitoredResourceDescriptorsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetMonitoredResourceDescriptorsResponse{}
	monitoredResourceDescriptorsMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{}
	wholeMonitoredResourceDescriptorsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
				result.MonitoredResourceDescriptors = source.MonitoredResourceDescriptors
				wholeMonitoredResourceDescriptorsAccepted = true
			case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
				monitoredResourceDescriptorsMask.AppendPath(tp.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeMonitoredResourceDescriptorsAccepted == false && len(monitoredResourceDescriptorsMask.Paths) > 0 {
		for _, sourceItem := range source.GetMonitoredResourceDescriptors() {
			result.MonitoredResourceDescriptors = append(result.MonitoredResourceDescriptors, monitoredResourceDescriptorsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

func (fieldMask *BatchGetMonitoredResourceDescriptorsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchMonitoredResourceDescriptorRequest_FieldMask struct {
	Paths []WatchMonitoredResourceDescriptorRequest_FieldPath
}

func FullWatchMonitoredResourceDescriptorRequest_FieldMask() *WatchMonitoredResourceDescriptorRequest_FieldMask {
	res := &WatchMonitoredResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchMonitoredResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) Subtract(other *WatchMonitoredResourceDescriptorRequest_FieldMask) *WatchMonitoredResourceDescriptorRequest_FieldMask {
	result := &WatchMonitoredResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchMonitoredResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) FilterInputFields() *WatchMonitoredResourceDescriptorRequest_FieldMask {
	result := &WatchMonitoredResourceDescriptorRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchMonitoredResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchMonitoredResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchMonitoredResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) AppendPath(path WatchMonitoredResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchMonitoredResourceDescriptorRequest_FieldPath))
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) GetPaths() []WatchMonitoredResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) Set(target, source *WatchMonitoredResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchMonitoredResourceDescriptorRequest), source.(*WatchMonitoredResourceDescriptorRequest))
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) Project(source *WatchMonitoredResourceDescriptorRequest) *WatchMonitoredResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchMonitoredResourceDescriptorRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchMonitoredResourceDescriptorRequest))
}

func (fieldMask *WatchMonitoredResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchMonitoredResourceDescriptorResponse_FieldMask struct {
	Paths []WatchMonitoredResourceDescriptorResponse_FieldPath
}

func FullWatchMonitoredResourceDescriptorResponse_FieldMask() *WatchMonitoredResourceDescriptorResponse_FieldMask {
	res := &WatchMonitoredResourceDescriptorResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchMonitoredResourceDescriptorResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchMonitoredResourceDescriptorResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) Subtract(other *WatchMonitoredResourceDescriptorResponse_FieldMask) *WatchMonitoredResourceDescriptorResponse_FieldMask {
	result := &WatchMonitoredResourceDescriptorResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchMonitoredResourceDescriptorResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) FilterInputFields() *WatchMonitoredResourceDescriptorResponse_FieldMask {
	result := &WatchMonitoredResourceDescriptorResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchMonitoredResourceDescriptorResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchMonitoredResourceDescriptorResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchMonitoredResourceDescriptorResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) AppendPath(path WatchMonitoredResourceDescriptorResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchMonitoredResourceDescriptorResponse_FieldPath))
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) GetPaths() []WatchMonitoredResourceDescriptorResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) Set(target, source *WatchMonitoredResourceDescriptorResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchMonitoredResourceDescriptorResponse), source.(*WatchMonitoredResourceDescriptorResponse))
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) Project(source *WatchMonitoredResourceDescriptorResponse) *WatchMonitoredResourceDescriptorResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchMonitoredResourceDescriptorResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchMonitoredResourceDescriptorResponse))
}

func (fieldMask *WatchMonitoredResourceDescriptorResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchMonitoredResourceDescriptorsRequest_FieldMask struct {
	Paths []WatchMonitoredResourceDescriptorsRequest_FieldPath
}

func FullWatchMonitoredResourceDescriptorsRequest_FieldMask() *WatchMonitoredResourceDescriptorsRequest_FieldMask {
	res := &WatchMonitoredResourceDescriptorsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) Subtract(other *WatchMonitoredResourceDescriptorsRequest_FieldMask) *WatchMonitoredResourceDescriptorsRequest_FieldMask {
	result := &WatchMonitoredResourceDescriptorsRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchMonitoredResourceDescriptorsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) FilterInputFields() *WatchMonitoredResourceDescriptorsRequest_FieldMask {
	result := &WatchMonitoredResourceDescriptorsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchMonitoredResourceDescriptorsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchMonitoredResourceDescriptorsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchMonitoredResourceDescriptorsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) AppendPath(path WatchMonitoredResourceDescriptorsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchMonitoredResourceDescriptorsRequest_FieldPath))
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) GetPaths() []WatchMonitoredResourceDescriptorsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) Set(target, source *WatchMonitoredResourceDescriptorsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchMonitoredResourceDescriptorsRequest), source.(*WatchMonitoredResourceDescriptorsRequest))
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) Project(source *WatchMonitoredResourceDescriptorsRequest) *WatchMonitoredResourceDescriptorsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchMonitoredResourceDescriptorsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchMonitoredResourceDescriptorsRequest))
}

func (fieldMask *WatchMonitoredResourceDescriptorsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchMonitoredResourceDescriptorsResponse_FieldMask struct {
	Paths []WatchMonitoredResourceDescriptorsResponse_FieldPath
}

func FullWatchMonitoredResourceDescriptorsResponse_FieldMask() *WatchMonitoredResourceDescriptorsResponse_FieldMask {
	res := &WatchMonitoredResourceDescriptorsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) Subtract(other *WatchMonitoredResourceDescriptorsResponse_FieldMask) *WatchMonitoredResourceDescriptorsResponse_FieldMask {
	result := &WatchMonitoredResourceDescriptorsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchMonitoredResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange: &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchMonitoredResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange: &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchMonitoredResourceDescriptorsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange] = FullWatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchMonitoredResourceDescriptorsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchMonitoredResourceDescriptorsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) FilterInputFields() *WatchMonitoredResourceDescriptorsResponse_FieldMask {
	result := &WatchMonitoredResourceDescriptorsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchMonitoredResourceDescriptorsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchMonitoredResourceDescriptorsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchMonitoredResourceDescriptorsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) AppendPath(path WatchMonitoredResourceDescriptorsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchMonitoredResourceDescriptorsResponse_FieldPath))
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) GetPaths() []WatchMonitoredResourceDescriptorsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) Set(target, source *WatchMonitoredResourceDescriptorsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchMonitoredResourceDescriptorsResponse), source.(*WatchMonitoredResourceDescriptorsResponse))
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) Project(source *WatchMonitoredResourceDescriptorsResponse) *WatchMonitoredResourceDescriptorsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchMonitoredResourceDescriptorsResponse{}
	pageTokenChangeMask := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
				result.MonitoredResourceDescriptorChanges = source.MonitoredResourceDescriptorChanges
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchMonitoredResourceDescriptorsResponse_FieldSubPath:
			switch tp.selector {
			case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchMonitoredResourceDescriptorsResponse))
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath
}

func FullWatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask() *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask {
	res := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) ProtoMessage() {
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Subtract(other *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask {
	result := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask {
	result := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) AppendPath(path WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) GetPaths() []WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Set(target, source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange), source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) Project(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) *WatchMonitoredResourceDescriptorsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

func (fieldMask *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateMonitoredResourceDescriptorRequest_FieldMask struct {
	Paths []CreateMonitoredResourceDescriptorRequest_FieldPath
}

func FullCreateMonitoredResourceDescriptorRequest_FieldMask() *CreateMonitoredResourceDescriptorRequest_FieldMask {
	res := &CreateMonitoredResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor})
	return res
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateMonitoredResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) Subtract(other *CreateMonitoredResourceDescriptorRequest_FieldMask) *CreateMonitoredResourceDescriptorRequest_FieldMask {
	result := &CreateMonitoredResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[CreateMonitoredResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[CreateMonitoredResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateMonitoredResourceDescriptorRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
						mySubMasks[CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor] = monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*CreateMonitoredResourceDescriptorRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateMonitoredResourceDescriptorRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateMonitoredResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) FilterInputFields() *CreateMonitoredResourceDescriptorRequest_FieldMask {
	result := &CreateMonitoredResourceDescriptorRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			if _, ok := path.(*CreateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
				for _, subpath := range monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateMonitoredResourceDescriptorRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateMonitoredResourceDescriptorRequest_FieldSubPath); ok {
				selectedMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{
					Paths: []monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath{sub.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateMonitoredResourceDescriptorRequest_FieldSubPath{selector: CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateMonitoredResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateMonitoredResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateMonitoredResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) AppendPath(path CreateMonitoredResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateMonitoredResourceDescriptorRequest_FieldPath))
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) GetPaths() []CreateMonitoredResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) Set(target, source *CreateMonitoredResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateMonitoredResourceDescriptorRequest), source.(*CreateMonitoredResourceDescriptorRequest))
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) Project(source *CreateMonitoredResourceDescriptorRequest) *CreateMonitoredResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateMonitoredResourceDescriptorRequest{}
	monitoredResourceDescriptorMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{}
	wholeMonitoredResourceDescriptorAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
				result.MonitoredResourceDescriptor = source.MonitoredResourceDescriptor
				wholeMonitoredResourceDescriptorAccepted = true
			}
		case *CreateMonitoredResourceDescriptorRequest_FieldSubPath:
			switch tp.selector {
			case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
				monitoredResourceDescriptorMask.AppendPath(tp.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeMonitoredResourceDescriptorAccepted == false && len(monitoredResourceDescriptorMask.Paths) > 0 {
		result.MonitoredResourceDescriptor = monitoredResourceDescriptorMask.Project(source.GetMonitoredResourceDescriptor())
	}
	return result
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateMonitoredResourceDescriptorRequest))
}

func (fieldMask *CreateMonitoredResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateMonitoredResourceDescriptorRequest_FieldMask struct {
	Paths []UpdateMonitoredResourceDescriptorRequest_FieldPath
}

func FullUpdateMonitoredResourceDescriptorRequest_FieldMask() *UpdateMonitoredResourceDescriptorRequest_FieldMask {
	res := &UpdateMonitoredResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor})
	res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas})
	res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorAllowMissing})
	return res
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) Subtract(other *UpdateMonitoredResourceDescriptorRequest_FieldMask) *UpdateMonitoredResourceDescriptorRequest_FieldMask {
	result := &UpdateMonitoredResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[UpdateMonitoredResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
		UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:                         &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateMonitoredResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
		UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:                         &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateMonitoredResourceDescriptorRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
						mySubMasks[UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor] = monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask()
					case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
						mySubMasks[UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas] = FullUpdateMonitoredResourceDescriptorRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateMonitoredResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) FilterInputFields() *UpdateMonitoredResourceDescriptorRequest_FieldMask {
	result := &UpdateMonitoredResourceDescriptorRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			if _, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
				for _, subpath := range monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldSubPath); ok {
				selectedMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{
					Paths: []monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath{sub.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor, subPath: allowedPath})
				}
			}
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateMonitoredResourceDescriptorRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateMonitoredResourceDescriptorRequest_FieldSubPath); ok {
				selectedMask := &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{
					Paths: []UpdateMonitoredResourceDescriptorRequestCAS_FieldPath{sub.subPath.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateMonitoredResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateMonitoredResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateMonitoredResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) AppendPath(path UpdateMonitoredResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateMonitoredResourceDescriptorRequest_FieldPath))
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) GetPaths() []UpdateMonitoredResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) Set(target, source *UpdateMonitoredResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateMonitoredResourceDescriptorRequest), source.(*UpdateMonitoredResourceDescriptorRequest))
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) Project(source *UpdateMonitoredResourceDescriptorRequest) *UpdateMonitoredResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateMonitoredResourceDescriptorRequest{}
	monitoredResourceDescriptorMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{}
	wholeMonitoredResourceDescriptorAccepted := false
	casMask := &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
				result.MonitoredResourceDescriptor = source.MonitoredResourceDescriptor
				wholeMonitoredResourceDescriptorAccepted = true
			case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorAllowMissing:
				result.AllowMissing = source.AllowMissing
			}
		case *UpdateMonitoredResourceDescriptorRequest_FieldSubPath:
			switch tp.selector {
			case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
				monitoredResourceDescriptorMask.AppendPath(tp.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath))
			case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPath))
			}
		}
	}
	if wholeMonitoredResourceDescriptorAccepted == false && len(monitoredResourceDescriptorMask.Paths) > 0 {
		result.MonitoredResourceDescriptor = monitoredResourceDescriptorMask.Project(source.GetMonitoredResourceDescriptor())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateMonitoredResourceDescriptorRequest))
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask struct {
	Paths []UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
}

func FullUpdateMonitoredResourceDescriptorRequest_CAS_FieldMask() *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask {
	res := &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Subtract(other *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask {
	result := &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState: &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState] = monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) FilterInputFields() *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask {
	result := &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range monitored_resource_descriptor.FullMonitoredResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath); ok {
				selectedMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{
					Paths: []monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath{sub.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateMonitoredResourceDescriptorRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) AppendPath(path UpdateMonitoredResourceDescriptorRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPath))
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) GetPaths() []UpdateMonitoredResourceDescriptorRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Set(target, source *UpdateMonitoredResourceDescriptorRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateMonitoredResourceDescriptorRequest_CAS), source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) Project(source *UpdateMonitoredResourceDescriptorRequest_CAS) *UpdateMonitoredResourceDescriptorRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateMonitoredResourceDescriptorRequest_CAS{}
	conditionalStateMask := &monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

func (fieldMask *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteMonitoredResourceDescriptorRequest_FieldMask struct {
	Paths []DeleteMonitoredResourceDescriptorRequest_FieldPath
}

func FullDeleteMonitoredResourceDescriptorRequest_FieldMask() *DeleteMonitoredResourceDescriptorRequest_FieldMask {
	res := &DeleteMonitoredResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) Subtract(other *DeleteMonitoredResourceDescriptorRequest_FieldMask) *DeleteMonitoredResourceDescriptorRequest_FieldMask {
	result := &DeleteMonitoredResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteMonitoredResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) FilterInputFields() *DeleteMonitoredResourceDescriptorRequest_FieldMask {
	result := &DeleteMonitoredResourceDescriptorRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteMonitoredResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteMonitoredResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteMonitoredResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) AppendPath(path DeleteMonitoredResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteMonitoredResourceDescriptorRequest_FieldPath))
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) GetPaths() []DeleteMonitoredResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) Set(target, source *DeleteMonitoredResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteMonitoredResourceDescriptorRequest), source.(*DeleteMonitoredResourceDescriptorRequest))
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) Project(source *DeleteMonitoredResourceDescriptorRequest) *DeleteMonitoredResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteMonitoredResourceDescriptorRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteMonitoredResourceDescriptorRequest))
}

func (fieldMask *DeleteMonitoredResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
