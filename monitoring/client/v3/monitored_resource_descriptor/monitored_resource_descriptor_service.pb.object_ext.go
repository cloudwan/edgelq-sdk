// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/monitored_resource_descriptor_service.proto
// DO NOT EDIT!!!

package monitored_resource_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *BatchGetMonitoredResourceDescriptorsRequest) GotenObjectExt() {}

func (o *BatchGetMonitoredResourceDescriptorsRequest) MakeFullFieldMask() *BatchGetMonitoredResourceDescriptorsRequest_FieldMask {
	return FullBatchGetMonitoredResourceDescriptorsRequest_FieldMask()
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetMonitoredResourceDescriptorsRequest_FieldMask()
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) MakeDiffFieldMask(other *BatchGetMonitoredResourceDescriptorsRequest) *BatchGetMonitoredResourceDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetMonitoredResourceDescriptorsRequest_FieldMask()
	}

	res := &BatchGetMonitoredResourceDescriptorsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetMonitoredResourceDescriptorsRequest))
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) Clone() *BatchGetMonitoredResourceDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetMonitoredResourceDescriptorsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &monitored_resource_descriptor.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*monitored_resource_descriptor.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &monitored_resource_descriptor.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) Merge(source *BatchGetMonitoredResourceDescriptorsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &monitored_resource_descriptor.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *monitored_resource_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &monitored_resource_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetMonitoredResourceDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) GotenObjectExt() {}

func (o *BatchGetMonitoredResourceDescriptorsResponse) MakeFullFieldMask() *BatchGetMonitoredResourceDescriptorsResponse_FieldMask {
	return FullBatchGetMonitoredResourceDescriptorsResponse_FieldMask()
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetMonitoredResourceDescriptorsResponse_FieldMask()
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) MakeDiffFieldMask(other *BatchGetMonitoredResourceDescriptorsResponse) *BatchGetMonitoredResourceDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetMonitoredResourceDescriptorsResponse_FieldMask()
	}

	res := &BatchGetMonitoredResourceDescriptorsResponse_FieldMask{}

	if len(o.GetMonitoredResourceDescriptors()) == len(other.GetMonitoredResourceDescriptors()) {
		for i, lValue := range o.GetMonitoredResourceDescriptors() {
			rValue := other.GetMonitoredResourceDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetMonitoredResourceDescriptorsResponse))
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) Clone() *BatchGetMonitoredResourceDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetMonitoredResourceDescriptorsResponse{}
	result.MonitoredResourceDescriptors = make([]*monitored_resource_descriptor.MonitoredResourceDescriptor, len(o.MonitoredResourceDescriptors))
	for i, sourceValue := range o.MonitoredResourceDescriptors {
		result.MonitoredResourceDescriptors[i] = sourceValue.Clone()
	}
	result.Missing = make([]*monitored_resource_descriptor.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &monitored_resource_descriptor.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetMonitoredResourceDescriptorsResponse) Merge(source *BatchGetMonitoredResourceDescriptorsResponse) {
	for _, sourceValue := range source.GetMonitoredResourceDescriptors() {
		exists := false
		for _, currentValue := range o.MonitoredResourceDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *monitored_resource_descriptor.MonitoredResourceDescriptor
			if sourceValue != nil {
				newDstElement = new(monitored_resource_descriptor.MonitoredResourceDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.MonitoredResourceDescriptors = append(o.MonitoredResourceDescriptors, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *monitored_resource_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &monitored_resource_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetMonitoredResourceDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

func (o *WatchMonitoredResourceDescriptorRequest) GotenObjectExt() {}

func (o *WatchMonitoredResourceDescriptorRequest) MakeFullFieldMask() *WatchMonitoredResourceDescriptorRequest_FieldMask {
	return FullWatchMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorRequest) MakeDiffFieldMask(other *WatchMonitoredResourceDescriptorRequest) *WatchMonitoredResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchMonitoredResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMonitoredResourceDescriptorRequest_FieldMask()
	}

	res := &WatchMonitoredResourceDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchMonitoredResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMonitoredResourceDescriptorRequest))
}

func (o *WatchMonitoredResourceDescriptorRequest) Clone() *WatchMonitoredResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &WatchMonitoredResourceDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &monitored_resource_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchMonitoredResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMonitoredResourceDescriptorRequest) Merge(source *WatchMonitoredResourceDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &monitored_resource_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchMonitoredResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMonitoredResourceDescriptorRequest))
}

func (o *WatchMonitoredResourceDescriptorResponse) GotenObjectExt() {}

func (o *WatchMonitoredResourceDescriptorResponse) MakeFullFieldMask() *WatchMonitoredResourceDescriptorResponse_FieldMask {
	return FullWatchMonitoredResourceDescriptorResponse_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMonitoredResourceDescriptorResponse_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorResponse) MakeDiffFieldMask(other *WatchMonitoredResourceDescriptorResponse) *WatchMonitoredResourceDescriptorResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchMonitoredResourceDescriptorResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMonitoredResourceDescriptorResponse_FieldMask()
	}

	res := &WatchMonitoredResourceDescriptorResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchMonitoredResourceDescriptorResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMonitoredResourceDescriptorResponse))
}

func (o *WatchMonitoredResourceDescriptorResponse) Clone() *WatchMonitoredResourceDescriptorResponse {
	if o == nil {
		return nil
	}
	result := &WatchMonitoredResourceDescriptorResponse{}
	result.Change = proto.Clone(o.Change).(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	return result
}

func (o *WatchMonitoredResourceDescriptorResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMonitoredResourceDescriptorResponse) Merge(source *WatchMonitoredResourceDescriptorResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(monitored_resource_descriptor.MonitoredResourceDescriptorChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchMonitoredResourceDescriptorResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMonitoredResourceDescriptorResponse))
}

func (o *WatchMonitoredResourceDescriptorsRequest) GotenObjectExt() {}

func (o *WatchMonitoredResourceDescriptorsRequest) MakeFullFieldMask() *WatchMonitoredResourceDescriptorsRequest_FieldMask {
	return FullWatchMonitoredResourceDescriptorsRequest_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMonitoredResourceDescriptorsRequest_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorsRequest) MakeDiffFieldMask(other *WatchMonitoredResourceDescriptorsRequest) *WatchMonitoredResourceDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchMonitoredResourceDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMonitoredResourceDescriptorsRequest_FieldMask()
	}

	res := &WatchMonitoredResourceDescriptorsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchMonitoredResourceDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMonitoredResourceDescriptorsRequest))
}

func (o *WatchMonitoredResourceDescriptorsRequest) Clone() *WatchMonitoredResourceDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &WatchMonitoredResourceDescriptorsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &monitored_resource_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &monitored_resource_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &monitored_resource_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchMonitoredResourceDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMonitoredResourceDescriptorsRequest) Merge(source *WatchMonitoredResourceDescriptorsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &monitored_resource_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &monitored_resource_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &monitored_resource_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchMonitoredResourceDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMonitoredResourceDescriptorsRequest))
}

func (o *WatchMonitoredResourceDescriptorsResponse) GotenObjectExt() {}

func (o *WatchMonitoredResourceDescriptorsResponse) MakeFullFieldMask() *WatchMonitoredResourceDescriptorsResponse_FieldMask {
	return FullWatchMonitoredResourceDescriptorsResponse_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMonitoredResourceDescriptorsResponse_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorsResponse) MakeDiffFieldMask(other *WatchMonitoredResourceDescriptorsResponse) *WatchMonitoredResourceDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchMonitoredResourceDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMonitoredResourceDescriptorsResponse_FieldMask()
	}

	res := &WatchMonitoredResourceDescriptorsResponse_FieldMask{}

	if len(o.GetMonitoredResourceDescriptorChanges()) == len(other.GetMonitoredResourceDescriptorChanges()) {
		for i, lValue := range o.GetMonitoredResourceDescriptorChanges() {
			rValue := other.GetMonitoredResourceDescriptorChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldSubPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchMonitoredResourceDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMonitoredResourceDescriptorsResponse))
}

func (o *WatchMonitoredResourceDescriptorsResponse) Clone() *WatchMonitoredResourceDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &WatchMonitoredResourceDescriptorsResponse{}
	result.MonitoredResourceDescriptorChanges = make([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange, len(o.MonitoredResourceDescriptorChanges))
	for i, sourceValue := range o.MonitoredResourceDescriptorChanges {
		result.MonitoredResourceDescriptorChanges[i] = proto.Clone(sourceValue).(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchMonitoredResourceDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMonitoredResourceDescriptorsResponse) Merge(source *WatchMonitoredResourceDescriptorsResponse) {
	for _, sourceValue := range source.GetMonitoredResourceDescriptorChanges() {
		exists := false
		for _, currentValue := range o.MonitoredResourceDescriptorChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *monitored_resource_descriptor.MonitoredResourceDescriptorChange
			if sourceValue != nil {
				newDstElement = new(monitored_resource_descriptor.MonitoredResourceDescriptorChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.MonitoredResourceDescriptorChanges = append(o.MonitoredResourceDescriptorChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchMonitoredResourceDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMonitoredResourceDescriptorsResponse))
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) MakeFullFieldMask() *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask {
	return FullWatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) *WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) Clone() *WatchMonitoredResourceDescriptorsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchMonitoredResourceDescriptorsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &monitored_resource_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &monitored_resource_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) Merge(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &monitored_resource_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &monitored_resource_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

func (o *CreateMonitoredResourceDescriptorRequest) GotenObjectExt() {}

func (o *CreateMonitoredResourceDescriptorRequest) MakeFullFieldMask() *CreateMonitoredResourceDescriptorRequest_FieldMask {
	return FullCreateMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *CreateMonitoredResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *CreateMonitoredResourceDescriptorRequest) MakeDiffFieldMask(other *CreateMonitoredResourceDescriptorRequest) *CreateMonitoredResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateMonitoredResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateMonitoredResourceDescriptorRequest_FieldMask()
	}

	res := &CreateMonitoredResourceDescriptorRequest_FieldMask{}
	{
		subMask := o.GetMonitoredResourceDescriptor().MakeDiffFieldMask(other.GetMonitoredResourceDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateMonitoredResourceDescriptorRequest_FieldSubPath{selector: CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateMonitoredResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateMonitoredResourceDescriptorRequest))
}

func (o *CreateMonitoredResourceDescriptorRequest) Clone() *CreateMonitoredResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &CreateMonitoredResourceDescriptorRequest{}
	result.MonitoredResourceDescriptor = o.MonitoredResourceDescriptor.Clone()
	return result
}

func (o *CreateMonitoredResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateMonitoredResourceDescriptorRequest) Merge(source *CreateMonitoredResourceDescriptorRequest) {
	if source.GetMonitoredResourceDescriptor() != nil {
		if o.MonitoredResourceDescriptor == nil {
			o.MonitoredResourceDescriptor = new(monitored_resource_descriptor.MonitoredResourceDescriptor)
		}
		o.MonitoredResourceDescriptor.Merge(source.GetMonitoredResourceDescriptor())
	}
}

func (o *CreateMonitoredResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateMonitoredResourceDescriptorRequest))
}

func (o *UpdateMonitoredResourceDescriptorRequest) GotenObjectExt() {}

func (o *UpdateMonitoredResourceDescriptorRequest) MakeFullFieldMask() *UpdateMonitoredResourceDescriptorRequest_FieldMask {
	return FullUpdateMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *UpdateMonitoredResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *UpdateMonitoredResourceDescriptorRequest) MakeDiffFieldMask(other *UpdateMonitoredResourceDescriptorRequest) *UpdateMonitoredResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateMonitoredResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMonitoredResourceDescriptorRequest_FieldMask()
	}

	res := &UpdateMonitoredResourceDescriptorRequest_FieldMask{}
	{
		subMask := o.GetMonitoredResourceDescriptor().MakeDiffFieldMask(other.GetMonitoredResourceDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateMonitoredResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMonitoredResourceDescriptorRequest))
}

func (o *UpdateMonitoredResourceDescriptorRequest) Clone() *UpdateMonitoredResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateMonitoredResourceDescriptorRequest{}
	result.MonitoredResourceDescriptor = o.MonitoredResourceDescriptor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateMonitoredResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMonitoredResourceDescriptorRequest) Merge(source *UpdateMonitoredResourceDescriptorRequest) {
	if source.GetMonitoredResourceDescriptor() != nil {
		if o.MonitoredResourceDescriptor == nil {
			o.MonitoredResourceDescriptor = new(monitored_resource_descriptor.MonitoredResourceDescriptor)
		}
		o.MonitoredResourceDescriptor.Merge(source.GetMonitoredResourceDescriptor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateMonitoredResourceDescriptorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateMonitoredResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMonitoredResourceDescriptorRequest))
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) GotenObjectExt() {}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) MakeFullFieldMask() *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask {
	return FullUpdateMonitoredResourceDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMonitoredResourceDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) MakeDiffFieldMask(other *UpdateMonitoredResourceDescriptorRequest_CAS) *UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMonitoredResourceDescriptorRequest_CAS_FieldMask()
	}

	res := &UpdateMonitoredResourceDescriptorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) Clone() *UpdateMonitoredResourceDescriptorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateMonitoredResourceDescriptorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return result
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) Merge(source *UpdateMonitoredResourceDescriptorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(monitored_resource_descriptor.MonitoredResourceDescriptor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateMonitoredResourceDescriptorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

func (o *DeleteMonitoredResourceDescriptorRequest) GotenObjectExt() {}

func (o *DeleteMonitoredResourceDescriptorRequest) MakeFullFieldMask() *DeleteMonitoredResourceDescriptorRequest_FieldMask {
	return FullDeleteMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *DeleteMonitoredResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *DeleteMonitoredResourceDescriptorRequest) MakeDiffFieldMask(other *DeleteMonitoredResourceDescriptorRequest) *DeleteMonitoredResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteMonitoredResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteMonitoredResourceDescriptorRequest_FieldMask()
	}

	res := &DeleteMonitoredResourceDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteMonitoredResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteMonitoredResourceDescriptorRequest))
}

func (o *DeleteMonitoredResourceDescriptorRequest) Clone() *DeleteMonitoredResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &DeleteMonitoredResourceDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &monitored_resource_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteMonitoredResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteMonitoredResourceDescriptorRequest) Merge(source *DeleteMonitoredResourceDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &monitored_resource_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteMonitoredResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteMonitoredResourceDescriptorRequest))
}
