// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/monitored_resource_descriptor_custom.proto
// DO NOT EDIT!!!

package monitored_resource_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetMonitoredResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetMonitoredResourceDescriptorRequest_FieldPathSelector
	Get(source *GetMonitoredResourceDescriptorRequest) []interface{}
	GetSingle(source *GetMonitoredResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *GetMonitoredResourceDescriptorRequest)

	// Those methods build corresponding GetMonitoredResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetMonitoredResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue
}

type GetMonitoredResourceDescriptorRequest_FieldPathSelector int32

const (
	GetMonitoredResourceDescriptorRequest_FieldPathSelectorName      GetMonitoredResourceDescriptorRequest_FieldPathSelector = 0
	GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask GetMonitoredResourceDescriptorRequest_FieldPathSelector = 1
	GetMonitoredResourceDescriptorRequest_FieldPathSelectorView      GetMonitoredResourceDescriptorRequest_FieldPathSelector = 2
)

func (s GetMonitoredResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return "name"
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", s))
	}
}

func BuildGetMonitoredResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (GetMonitoredResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetMonitoredResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: GetMonitoredResourceDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: GetMonitoredResourceDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetMonitoredResourceDescriptorRequest", fp)
}

func ParseGetMonitoredResourceDescriptorRequest_FieldPath(rawField string) (GetMonitoredResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetMonitoredResourceDescriptorRequest_FieldPath(fp)
}

func MustParseGetMonitoredResourceDescriptorRequest_FieldPath(rawField string) GetMonitoredResourceDescriptorRequest_FieldPath {
	fp, err := ParseGetMonitoredResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetMonitoredResourceDescriptorRequest_FieldTerminalPath struct {
	selector GetMonitoredResourceDescriptorRequest_FieldPathSelector
}

var _ GetMonitoredResourceDescriptorRequest_FieldPath = (*GetMonitoredResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) Selector() GetMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetMonitoredResourceDescriptorRequest
func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) Get(source *GetMonitoredResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetMonitoredResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source GetMonitoredResourceDescriptorRequest
func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *GetMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return (*monitored_resource_descriptor.Reference)(nil)
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *GetMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetMonitoredResourceDescriptorRequest_FieldPathSelectorName ||
		fp.selector == GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetMonitoredResourceDescriptorRequest_FieldPathSelectorView
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) GetMonitoredResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return &GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Reference)}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return &GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return &GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.Reference)}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return &GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetMonitoredResourceDescriptorRequest_FieldPathValue allows storing values for GetMonitoredResourceDescriptorRequest fields according to their type
type GetMonitoredResourceDescriptorRequest_FieldPathValue interface {
	GetMonitoredResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetMonitoredResourceDescriptorRequest)
	CompareWith(*GetMonitoredResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseGetMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (GetMonitoredResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseGetMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMonitoredResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetMonitoredResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseGetMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) GetMonitoredResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseGetMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue struct {
	GetMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetMonitoredResourceDescriptorRequest_FieldPathValue = (*GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetMonitoredResourceDescriptorRequest' as interface{}
func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetMonitoredResourceDescriptorRequest
func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **GetMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(GetMonitoredResourceDescriptorRequest)
	}
	switch fpv.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*monitored_resource_descriptor.Reference)
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetMonitoredResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'GetMonitoredResourceDescriptorRequest'.
func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *GetMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*monitored_resource_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetMonitoredResourceDescriptorRequest))
}

// GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetMonitoredResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetMonitoredResourceDescriptorRequest_FieldPath
	ContainsValue(*GetMonitoredResourceDescriptorRequest) bool
}

// ParseGetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMonitoredResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseGetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	GetMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetMonitoredResourceDescriptorRequest_FieldPathArrayItemValue = (*GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetMonitoredResourceDescriptorRequest as interface{}
func (fpaiv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetMonitoredResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetMonitoredResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetMonitoredResourceDescriptorRequest'
func (fpaiv *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetMonitoredResourceDescriptorRequest) bool {
	slice := fpaiv.GetMonitoredResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for GetMonitoredResourceDescriptorRequest fields according to their type
type GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetMonitoredResourceDescriptorRequest_FieldPath
}

func ParseGetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMonitoredResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseGetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	GetMonitoredResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ GetMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case GetMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *GetMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMonitoredResourceDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMonitoredResourceDescriptorsRequest_FieldPathSelector
	Get(source *ListMonitoredResourceDescriptorsRequest) []interface{}
	GetSingle(source *ListMonitoredResourceDescriptorsRequest) (interface{}, bool)
	ClearValue(item *ListMonitoredResourceDescriptorsRequest)

	// Those methods build corresponding ListMonitoredResourceDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMonitoredResourceDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue
}

type ListMonitoredResourceDescriptorsRequest_FieldPathSelector int32

const (
	ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter    ListMonitoredResourceDescriptorsRequest_FieldPathSelector = 0
	ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize  ListMonitoredResourceDescriptorsRequest_FieldPathSelector = 1
	ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy   ListMonitoredResourceDescriptorsRequest_FieldPathSelector = 2
	ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken ListMonitoredResourceDescriptorsRequest_FieldPathSelector = 3
	ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask ListMonitoredResourceDescriptorsRequest_FieldPathSelector = 4
	ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView      ListMonitoredResourceDescriptorsRequest_FieldPathSelector = 5
)

func (s ListMonitoredResourceDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", s))
	}
}

func BuildListMonitoredResourceDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListMonitoredResourceDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMonitoredResourceDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "filter":
			return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "page_size", "pageSize", "page-size":
			return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "order_by", "orderBy", "order-by":
			return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "page_token", "pageToken", "page-token":
			return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMonitoredResourceDescriptorsRequest", fp)
}

func ParseListMonitoredResourceDescriptorsRequest_FieldPath(rawField string) (ListMonitoredResourceDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMonitoredResourceDescriptorsRequest_FieldPath(fp)
}

func MustParseListMonitoredResourceDescriptorsRequest_FieldPath(rawField string) ListMonitoredResourceDescriptorsRequest_FieldPath {
	fp, err := ParseListMonitoredResourceDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMonitoredResourceDescriptorsRequest_FieldTerminalPath struct {
	selector ListMonitoredResourceDescriptorsRequest_FieldPathSelector
}

var _ ListMonitoredResourceDescriptorsRequest_FieldPath = (*ListMonitoredResourceDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) Selector() ListMonitoredResourceDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMonitoredResourceDescriptorsRequest
func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) Get(source *ListMonitoredResourceDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMonitoredResourceDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source ListMonitoredResourceDescriptorsRequest
func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetSingle(source *ListMonitoredResourceDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMonitoredResourceDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return (*monitored_resource_descriptor.Filter)(nil)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*monitored_resource_descriptor.OrderBy)(nil)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return (*monitored_resource_descriptor.PagerCursor)(nil)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) ClearValue(item *ListMonitoredResourceDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMonitoredResourceDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) ListMonitoredResourceDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Filter)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.OrderBy)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.PagerCursor)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.Filter)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.OrderBy)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.PagerCursor)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return &ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListMonitoredResourceDescriptorsRequest_FieldPathValue allows storing values for ListMonitoredResourceDescriptorsRequest fields according to their type
type ListMonitoredResourceDescriptorsRequest_FieldPathValue interface {
	ListMonitoredResourceDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMonitoredResourceDescriptorsRequest)
	CompareWith(*ListMonitoredResourceDescriptorsRequest) (cmp int, comparable bool)
}

func ParseListMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (ListMonitoredResourceDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseListMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMonitoredResourceDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMonitoredResourceDescriptorsRequest_FieldPathValue), nil
}

func MustParseListMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) ListMonitoredResourceDescriptorsRequest_FieldPathValue {
	fpv, err := ParseListMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue struct {
	ListMonitoredResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMonitoredResourceDescriptorsRequest_FieldPathValue = (*ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMonitoredResourceDescriptorsRequest' as interface{}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*monitored_resource_descriptor.Filter, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.Filter)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*monitored_resource_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.OrderBy)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListMonitoredResourceDescriptorsRequest
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) SetTo(target **ListMonitoredResourceDescriptorsRequest) {
	if *target == nil {
		*target = new(ListMonitoredResourceDescriptorsRequest)
	}
	switch fpv.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*monitored_resource_descriptor.Filter)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*monitored_resource_descriptor.OrderBy)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*monitored_resource_descriptor.PagerCursor)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMonitoredResourceDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'ListMonitoredResourceDescriptorsRequest'.
func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *ListMonitoredResourceDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMonitoredResourceDescriptorsRequest))
}

// ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMonitoredResourceDescriptorsRequest according to their type
// Present only for array (repeated) types.
type ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMonitoredResourceDescriptorsRequest_FieldPath
	ContainsValue(*ListMonitoredResourceDescriptorsRequest) bool
}

// ParseListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMonitoredResourceDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	ListMonitoredResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue = (*ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMonitoredResourceDescriptorsRequest as interface{}
func (fpaiv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListMonitoredResourceDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMonitoredResourceDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMonitoredResourceDescriptorsRequest'
func (fpaiv *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMonitoredResourceDescriptorsRequest) bool {
	slice := fpaiv.ListMonitoredResourceDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for ListMonitoredResourceDescriptorsRequest fields according to their type
type ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMonitoredResourceDescriptorsRequest_FieldPath
}

func ParseListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMonitoredResourceDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	ListMonitoredResourceDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ ListMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues = (*ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.Filter) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.OrderBy) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*monitored_resource_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.Filter)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*monitored_resource_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.OrderBy)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMonitoredResourceDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMonitoredResourceDescriptorsResponse_FieldPathSelector
	Get(source *ListMonitoredResourceDescriptorsResponse) []interface{}
	GetSingle(source *ListMonitoredResourceDescriptorsResponse) (interface{}, bool)
	ClearValue(item *ListMonitoredResourceDescriptorsResponse)

	// Those methods build corresponding ListMonitoredResourceDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue
}

type ListMonitoredResourceDescriptorsResponse_FieldPathSelector int32

const (
	ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors ListMonitoredResourceDescriptorsResponse_FieldPathSelector = 0
	ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken                ListMonitoredResourceDescriptorsResponse_FieldPathSelector = 1
	ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken                ListMonitoredResourceDescriptorsResponse_FieldPathSelector = 2
)

func (s ListMonitoredResourceDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return "monitored_resource_descriptors"
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", s))
	}
}

func BuildListMonitoredResourceDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListMonitoredResourceDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMonitoredResourceDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "monitored_resource_descriptors", "monitoredResourceDescriptors", "monitored-resource-descriptors":
			return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "monitored_resource_descriptors", "monitoredResourceDescriptors", "monitored-resource-descriptors":
			if subpath, err := monitored_resource_descriptor.BuildMonitoredResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListMonitoredResourceDescriptorsResponse_FieldSubPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMonitoredResourceDescriptorsResponse", fp)
}

func ParseListMonitoredResourceDescriptorsResponse_FieldPath(rawField string) (ListMonitoredResourceDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMonitoredResourceDescriptorsResponse_FieldPath(fp)
}

func MustParseListMonitoredResourceDescriptorsResponse_FieldPath(rawField string) ListMonitoredResourceDescriptorsResponse_FieldPath {
	fp, err := ParseListMonitoredResourceDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMonitoredResourceDescriptorsResponse_FieldTerminalPath struct {
	selector ListMonitoredResourceDescriptorsResponse_FieldPathSelector
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPath = (*ListMonitoredResourceDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) Selector() ListMonitoredResourceDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMonitoredResourceDescriptorsResponse
func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) Get(source *ListMonitoredResourceDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			for _, value := range source.GetMonitoredResourceDescriptors() {
				values = append(values, value)
			}
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMonitoredResourceDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source ListMonitoredResourceDescriptorsResponse
func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetSingle(source *ListMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		res := source.GetMonitoredResourceDescriptors()
		return res, res != nil
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMonitoredResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return ([]*monitored_resource_descriptor.MonitoredResourceDescriptor)(nil)
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return (*monitored_resource_descriptor.PagerCursor)(nil)
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return (*monitored_resource_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) ClearValue(item *ListMonitoredResourceDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			item.MonitoredResourceDescriptors = nil
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMonitoredResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.PagerCursor)}
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.PagerCursor)}
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return &ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{ListMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListMonitoredResourceDescriptorsResponse_FieldSubPath struct {
	selector ListMonitoredResourceDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPath = (*ListMonitoredResourceDescriptorsResponse_FieldSubPath)(nil)

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) Selector() ListMonitoredResourceDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) AsMonitoredResourceDescriptorsSubPath() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListMonitoredResourceDescriptorsResponse
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) Get(source *ListMonitoredResourceDescriptorsResponse) (values []interface{}) {
	if asMonitoredResourceDescriptorFieldPath, ok := fps.AsMonitoredResourceDescriptorsSubPath(); ok {
		for _, item := range source.GetMonitoredResourceDescriptors() {
			values = append(values, asMonitoredResourceDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListMonitoredResourceDescriptorsResponse))
}

// GetSingle returns value of selected field from source ListMonitoredResourceDescriptorsResponse
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) GetSingle(source *ListMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		if len(source.GetMonitoredResourceDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMonitoredResourceDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListMonitoredResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) ClearValue(item *ListMonitoredResourceDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			for _, subItem := range item.MonitoredResourceDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListMonitoredResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathValue {
	return &ListMonitoredResourceDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	return &ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	return &ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListMonitoredResourceDescriptorsResponse_FieldPathValue allows storing values for ListMonitoredResourceDescriptorsResponse fields according to their type
type ListMonitoredResourceDescriptorsResponse_FieldPathValue interface {
	ListMonitoredResourceDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMonitoredResourceDescriptorsResponse)
	CompareWith(*ListMonitoredResourceDescriptorsResponse) (cmp int, comparable bool)
}

func ParseListMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (ListMonitoredResourceDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseListMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMonitoredResourceDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMonitoredResourceDescriptorsResponse_FieldPathValue), nil
}

func MustParseListMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) ListMonitoredResourceDescriptorsResponse_FieldPathValue {
	fpv, err := ParseListMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue struct {
	ListMonitoredResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPathValue = (*ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMonitoredResourceDescriptorsResponse' as interface{}
func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsMonitoredResourceDescriptorsValue() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpv.value.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListMonitoredResourceDescriptorsResponse
func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) SetTo(target **ListMonitoredResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(ListMonitoredResourceDescriptorsResponse)
	}
	switch fpv.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		(*target).MonitoredResourceDescriptors = fpv.value.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*monitored_resource_descriptor.PagerCursor)
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*monitored_resource_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMonitoredResourceDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'ListMonitoredResourceDescriptorsResponse'.
func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *ListMonitoredResourceDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return 0, false
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMonitoredResourceDescriptorsResponse))
}

type ListMonitoredResourceDescriptorsResponse_FieldSubPathValue struct {
	ListMonitoredResourceDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPathValue = (*ListMonitoredResourceDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *ListMonitoredResourceDescriptorsResponse_FieldSubPathValue) AsMonitoredResourceDescriptorsPathValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *ListMonitoredResourceDescriptorsResponse_FieldSubPathValue) SetTo(target **ListMonitoredResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(ListMonitoredResourceDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMonitoredResourceDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMonitoredResourceDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListMonitoredResourceDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListMonitoredResourceDescriptorsResponse_FieldSubPathValue) CompareWith(source *ListMonitoredResourceDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMonitoredResourceDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListMonitoredResourceDescriptorsResponse))
}

// ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMonitoredResourceDescriptorsResponse according to their type
// Present only for array (repeated) types.
type ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMonitoredResourceDescriptorsResponse_FieldPath
	ContainsValue(*ListMonitoredResourceDescriptorsResponse) bool
}

// ParseListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMonitoredResourceDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	ListMonitoredResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue = (*ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMonitoredResourceDescriptorsResponse as interface{}
func (fpaiv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMonitoredResourceDescriptorsItemValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaiv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}

func (fpaiv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMonitoredResourceDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMonitoredResourceDescriptorsResponse'
func (fpaiv *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMonitoredResourceDescriptorsResponse) bool {
	slice := fpaiv.ListMonitoredResourceDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue struct {
	ListMonitoredResourceDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) AsMonitoredResourceDescriptorsPathItemValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMonitoredResourceDescriptorsResponse'
func (fpaivs *ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListMonitoredResourceDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMonitoredResourceDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for ListMonitoredResourceDescriptorsResponse fields according to their type
type ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMonitoredResourceDescriptorsResponse_FieldPath
}

func ParseListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMonitoredResourceDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	ListMonitoredResourceDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues = (*ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		for _, v := range fpaov.values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptor) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMonitoredResourceDescriptorsArrayOfValues() ([][]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaov.values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.PagerCursor)
	return res, ok
}

type ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues struct {
	ListMonitoredResourceDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues = (*ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues) AsMonitoredResourceDescriptorsPathArrayOfValues() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}
