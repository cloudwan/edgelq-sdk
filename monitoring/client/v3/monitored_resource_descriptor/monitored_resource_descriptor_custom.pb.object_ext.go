// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/monitored_resource_descriptor_custom.proto
// DO NOT EDIT!!!

package monitored_resource_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
)

func (o *GetMonitoredResourceDescriptorRequest) GotenObjectExt() {}

func (o *GetMonitoredResourceDescriptorRequest) MakeFullFieldMask() *GetMonitoredResourceDescriptorRequest_FieldMask {
	return FullGetMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *GetMonitoredResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetMonitoredResourceDescriptorRequest_FieldMask()
}

func (o *GetMonitoredResourceDescriptorRequest) MakeDiffFieldMask(other *GetMonitoredResourceDescriptorRequest) *GetMonitoredResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &GetMonitoredResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetMonitoredResourceDescriptorRequest_FieldMask()
	}

	res := &GetMonitoredResourceDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: GetMonitoredResourceDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: GetMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: GetMonitoredResourceDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetMonitoredResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetMonitoredResourceDescriptorRequest))
}

func (o *GetMonitoredResourceDescriptorRequest) Clone() *GetMonitoredResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &GetMonitoredResourceDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &monitored_resource_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *GetMonitoredResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetMonitoredResourceDescriptorRequest) Merge(source *GetMonitoredResourceDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &monitored_resource_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetMonitoredResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetMonitoredResourceDescriptorRequest))
}

func (o *ListMonitoredResourceDescriptorsRequest) GotenObjectExt() {}

func (o *ListMonitoredResourceDescriptorsRequest) MakeFullFieldMask() *ListMonitoredResourceDescriptorsRequest_FieldMask {
	return FullListMonitoredResourceDescriptorsRequest_FieldMask()
}

func (o *ListMonitoredResourceDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMonitoredResourceDescriptorsRequest_FieldMask()
}

func (o *ListMonitoredResourceDescriptorsRequest) MakeDiffFieldMask(other *ListMonitoredResourceDescriptorsRequest) *ListMonitoredResourceDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListMonitoredResourceDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMonitoredResourceDescriptorsRequest_FieldMask()
	}

	res := &ListMonitoredResourceDescriptorsRequest_FieldMask{}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListMonitoredResourceDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMonitoredResourceDescriptorsRequest))
}

func (o *ListMonitoredResourceDescriptorsRequest) Clone() *ListMonitoredResourceDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &ListMonitoredResourceDescriptorsRequest{}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &monitored_resource_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &monitored_resource_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &monitored_resource_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *ListMonitoredResourceDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMonitoredResourceDescriptorsRequest) Merge(source *ListMonitoredResourceDescriptorsRequest) {
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &monitored_resource_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &monitored_resource_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &monitored_resource_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListMonitoredResourceDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMonitoredResourceDescriptorsRequest))
}

func (o *ListMonitoredResourceDescriptorsResponse) GotenObjectExt() {}

func (o *ListMonitoredResourceDescriptorsResponse) MakeFullFieldMask() *ListMonitoredResourceDescriptorsResponse_FieldMask {
	return FullListMonitoredResourceDescriptorsResponse_FieldMask()
}

func (o *ListMonitoredResourceDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMonitoredResourceDescriptorsResponse_FieldMask()
}

func (o *ListMonitoredResourceDescriptorsResponse) MakeDiffFieldMask(other *ListMonitoredResourceDescriptorsResponse) *ListMonitoredResourceDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListMonitoredResourceDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMonitoredResourceDescriptorsResponse_FieldMask()
	}

	res := &ListMonitoredResourceDescriptorsResponse_FieldMask{}

	if len(o.GetMonitoredResourceDescriptors()) == len(other.GetMonitoredResourceDescriptors()) {
		for i, lValue := range o.GetMonitoredResourceDescriptors() {
			rValue := other.GetMonitoredResourceDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: ListMonitoredResourceDescriptorsResponse_FieldPathSelectorPrevPageToken})
	}
	return res
}

func (o *ListMonitoredResourceDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMonitoredResourceDescriptorsResponse))
}

func (o *ListMonitoredResourceDescriptorsResponse) Clone() *ListMonitoredResourceDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &ListMonitoredResourceDescriptorsResponse{}
	result.MonitoredResourceDescriptors = make([]*monitored_resource_descriptor.MonitoredResourceDescriptor, len(o.MonitoredResourceDescriptors))
	for i, sourceValue := range o.MonitoredResourceDescriptors {
		result.MonitoredResourceDescriptors[i] = sourceValue.Clone()
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &monitored_resource_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &monitored_resource_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListMonitoredResourceDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMonitoredResourceDescriptorsResponse) Merge(source *ListMonitoredResourceDescriptorsResponse) {
	for _, sourceValue := range source.GetMonitoredResourceDescriptors() {
		exists := false
		for _, currentValue := range o.MonitoredResourceDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *monitored_resource_descriptor.MonitoredResourceDescriptor
			if sourceValue != nil {
				newDstElement = new(monitored_resource_descriptor.MonitoredResourceDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.MonitoredResourceDescriptors = append(o.MonitoredResourceDescriptors, newDstElement)
		}
	}

	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &monitored_resource_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &monitored_resource_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
}

func (o *ListMonitoredResourceDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMonitoredResourceDescriptorsResponse))
}
