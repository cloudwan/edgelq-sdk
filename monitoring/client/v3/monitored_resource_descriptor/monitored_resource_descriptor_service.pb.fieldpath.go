// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/monitored_resource_descriptor_service.proto
// DO NOT EDIT!!!

package monitored_resource_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetMonitoredResourceDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector
	Get(source *BatchGetMonitoredResourceDescriptorsRequest) []interface{}
	GetSingle(source *BatchGetMonitoredResourceDescriptorsRequest) (interface{}, bool)
	ClearValue(item *BatchGetMonitoredResourceDescriptorsRequest)

	// Those methods build corresponding BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue
}

type BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector int32

const (
	BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent    BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector = 0
	BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames     BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector = 1
	BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector = 2
	BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView      BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector = 3
)

func (s BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", s))
	}
}

func BuildBatchGetMonitoredResourceDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetMonitoredResourceDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetMonitoredResourceDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetMonitoredResourceDescriptorsRequest", fp)
}

func ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(rawField string) (BatchGetMonitoredResourceDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetMonitoredResourceDescriptorsRequest_FieldPath(fp)
}

func MustParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(rawField string) BatchGetMonitoredResourceDescriptorsRequest_FieldPath {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath struct {
	selector BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector
}

var _ BatchGetMonitoredResourceDescriptorsRequest_FieldPath = (*BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) Selector() BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetMonitoredResourceDescriptorsRequest
func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) Get(source *BatchGetMonitoredResourceDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetMonitoredResourceDescriptorsRequest
func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetSingle(source *BatchGetMonitoredResourceDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		return (*monitored_resource_descriptor.Reference)(nil)
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		return ([]*monitored_resource_descriptor.Reference)(nil)
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) ClearValue(item *BatchGetMonitoredResourceDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetMonitoredResourceDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Reference)}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.([]*monitored_resource_descriptor.Reference)}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.Reference)}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([][]*monitored_resource_descriptor.Reference)}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue{BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue allows storing values for BatchGetMonitoredResourceDescriptorsRequest fields according to their type
type BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue interface {
	BatchGetMonitoredResourceDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetMonitoredResourceDescriptorsRequest)
	CompareWith(*BatchGetMonitoredResourceDescriptorsRequest) (cmp int, comparable bool)
}

func ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMonitoredResourceDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue), nil
}

func MustParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue {
	fpv, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue struct {
	BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetMonitoredResourceDescriptorsRequest_FieldPathValue = (*BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetMonitoredResourceDescriptorsRequest' as interface{}
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsParentValue() (*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsNamesValue() ([]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetMonitoredResourceDescriptorsRequest
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) SetTo(target **BatchGetMonitoredResourceDescriptorsRequest) {
	if *target == nil {
		*target = new(BatchGetMonitoredResourceDescriptorsRequest)
	}
	switch fpv.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*monitored_resource_descriptor.Reference)
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*monitored_resource_descriptor.Reference)
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMonitoredResourceDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetMonitoredResourceDescriptorsRequest'.
func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetMonitoredResourceDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*monitored_resource_descriptor.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

// BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetMonitoredResourceDescriptorsRequest according to their type
// Present only for array (repeated) types.
type BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetMonitoredResourceDescriptorsRequest_FieldPath
	ContainsValue(*BatchGetMonitoredResourceDescriptorsRequest) bool
}

// ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMonitoredResourceDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue = (*BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetMonitoredResourceDescriptorsRequest as interface{}
func (fpaiv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*monitored_resource_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetMonitoredResourceDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetMonitoredResourceDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMonitoredResourceDescriptorsRequest'
func (fpaiv *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetMonitoredResourceDescriptorsRequest) bool {
	slice := fpaiv.BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetMonitoredResourceDescriptorsRequest fields according to their type
type BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetMonitoredResourceDescriptorsRequest_FieldPath
}

func ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMonitoredResourceDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues = (*BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*monitored_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case BatchGetMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *BatchGetMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetMonitoredResourceDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector
	Get(source *BatchGetMonitoredResourceDescriptorsResponse) []interface{}
	GetSingle(source *BatchGetMonitoredResourceDescriptorsResponse) (interface{}, bool)
	ClearValue(item *BatchGetMonitoredResourceDescriptorsResponse)

	// Those methods build corresponding BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector int32

const (
	BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector = 0
	BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing                      BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector = 1
)

func (s BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return "monitored_resource_descriptors"
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", s))
	}
}

func BuildBatchGetMonitoredResourceDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetMonitoredResourceDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetMonitoredResourceDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "monitored_resource_descriptors", "monitoredResourceDescriptors", "monitored-resource-descriptors":
			return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors}, nil
		case "missing":
			return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "monitored_resource_descriptors", "monitoredResourceDescriptors", "monitored-resource-descriptors":
			if subpath, err := monitored_resource_descriptor.BuildMonitoredResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath{selector: BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetMonitoredResourceDescriptorsResponse", fp)
}

func ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(rawField string) (BatchGetMonitoredResourceDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetMonitoredResourceDescriptorsResponse_FieldPath(fp)
}

func MustParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(rawField string) BatchGetMonitoredResourceDescriptorsResponse_FieldPath {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath struct {
	selector BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPath = (*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) Selector() BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetMonitoredResourceDescriptorsResponse
func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) Get(source *BatchGetMonitoredResourceDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			for _, value := range source.GetMonitoredResourceDescriptors() {
				values = append(values, value)
			}
		case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetMonitoredResourceDescriptorsResponse
func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetSingle(source *BatchGetMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		res := source.GetMonitoredResourceDescriptors()
		return res, res != nil
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return ([]*monitored_resource_descriptor.MonitoredResourceDescriptor)(nil)
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		return ([]*monitored_resource_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) ClearValue(item *BatchGetMonitoredResourceDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			item.MonitoredResourceDescriptors = nil
		case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*monitored_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*monitored_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath struct {
	selector BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPath = (*BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath)(nil)

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) Selector() BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) AsMonitoredResourceDescriptorsSubPath() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetMonitoredResourceDescriptorsResponse
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) Get(source *BatchGetMonitoredResourceDescriptorsResponse) (values []interface{}) {
	if asMonitoredResourceDescriptorFieldPath, ok := fps.AsMonitoredResourceDescriptorsSubPath(); ok {
		for _, item := range source.GetMonitoredResourceDescriptors() {
			values = append(values, asMonitoredResourceDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// GetSingle returns value of selected field from source BatchGetMonitoredResourceDescriptorsResponse
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) GetSingle(source *BatchGetMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		if len(source.GetMonitoredResourceDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMonitoredResourceDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) ClearValue(item *BatchGetMonitoredResourceDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
			for _, subItem := range item.MonitoredResourceDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue {
	return &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	return &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	return &BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue allows storing values for BatchGetMonitoredResourceDescriptorsResponse fields according to their type
type BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue interface {
	BatchGetMonitoredResourceDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetMonitoredResourceDescriptorsResponse)
	CompareWith(*BatchGetMonitoredResourceDescriptorsResponse) (cmp int, comparable bool)
}

func ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMonitoredResourceDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue), nil
}

func MustParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue {
	fpv, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue struct {
	BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue = (*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetMonitoredResourceDescriptorsResponse' as interface{}
func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsMonitoredResourceDescriptorsValue() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpv.value.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsMissingValue() ([]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*monitored_resource_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetMonitoredResourceDescriptorsResponse
func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) SetTo(target **BatchGetMonitoredResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetMonitoredResourceDescriptorsResponse)
	}
	switch fpv.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		(*target).MonitoredResourceDescriptors = fpv.value.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*monitored_resource_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMonitoredResourceDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetMonitoredResourceDescriptorsResponse'.
func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetMonitoredResourceDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return 0, false
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue struct {
	BatchGetMonitoredResourceDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPathValue = (*BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue) AsMonitoredResourceDescriptorsPathValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue) SetTo(target **BatchGetMonitoredResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetMonitoredResourceDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMonitoredResourceDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue) CompareWith(source *BatchGetMonitoredResourceDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetMonitoredResourceDescriptorsResponse according to their type
// Present only for array (repeated) types.
type BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetMonitoredResourceDescriptorsResponse_FieldPath
	ContainsValue(*BatchGetMonitoredResourceDescriptorsResponse) bool
}

// ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMonitoredResourceDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue = (*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetMonitoredResourceDescriptorsResponse as interface{}
func (fpaiv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMonitoredResourceDescriptorsItemValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaiv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpaiv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*monitored_resource_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetMonitoredResourceDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMonitoredResourceDescriptorsResponse'
func (fpaiv *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetMonitoredResourceDescriptorsResponse) bool {
	slice := fpaiv.BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue struct {
	BatchGetMonitoredResourceDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) AsMonitoredResourceDescriptorsPathItemValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMonitoredResourceDescriptorsResponse'
func (fpaivs *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetMonitoredResourceDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMonitoredResourceDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetMonitoredResourceDescriptorsResponse fields according to their type
type BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetMonitoredResourceDescriptorsResponse_FieldPath
}

func ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMonitoredResourceDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptors:
		for _, v := range fpaov.values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptor) {
			values = append(values, v)
		}
	case BatchGetMonitoredResourceDescriptorsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*monitored_resource_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMonitoredResourceDescriptorsArrayOfValues() ([][]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaov.values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpaov *BatchGetMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*monitored_resource_descriptor.Reference)
	return res, ok
}

type BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues struct {
	BatchGetMonitoredResourceDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues) AsMonitoredResourceDescriptorsPathArrayOfValues() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMonitoredResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMonitoredResourceDescriptorRequest_FieldPathSelector
	Get(source *WatchMonitoredResourceDescriptorRequest) []interface{}
	GetSingle(source *WatchMonitoredResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *WatchMonitoredResourceDescriptorRequest)

	// Those methods build corresponding WatchMonitoredResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMonitoredResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue
}

type WatchMonitoredResourceDescriptorRequest_FieldPathSelector int32

const (
	WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName      WatchMonitoredResourceDescriptorRequest_FieldPathSelector = 0
	WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask WatchMonitoredResourceDescriptorRequest_FieldPathSelector = 1
	WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView      WatchMonitoredResourceDescriptorRequest_FieldPathSelector = 2
)

func (s WatchMonitoredResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return "name"
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", s))
	}
}

func BuildWatchMonitoredResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchMonitoredResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMonitoredResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMonitoredResourceDescriptorRequest", fp)
}

func ParseWatchMonitoredResourceDescriptorRequest_FieldPath(rawField string) (WatchMonitoredResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMonitoredResourceDescriptorRequest_FieldPath(fp)
}

func MustParseWatchMonitoredResourceDescriptorRequest_FieldPath(rawField string) WatchMonitoredResourceDescriptorRequest_FieldPath {
	fp, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMonitoredResourceDescriptorRequest_FieldTerminalPath struct {
	selector WatchMonitoredResourceDescriptorRequest_FieldPathSelector
}

var _ WatchMonitoredResourceDescriptorRequest_FieldPath = (*WatchMonitoredResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) Selector() WatchMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMonitoredResourceDescriptorRequest
func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) Get(source *WatchMonitoredResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMonitoredResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source WatchMonitoredResourceDescriptorRequest
func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *WatchMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return (*monitored_resource_descriptor.Reference)(nil)
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *WatchMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName ||
		fp.selector == WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) WatchMonitoredResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Reference)}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.Reference)}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		return &WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMonitoredResourceDescriptorRequest_FieldPathValue allows storing values for WatchMonitoredResourceDescriptorRequest fields according to their type
type WatchMonitoredResourceDescriptorRequest_FieldPathValue interface {
	WatchMonitoredResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMonitoredResourceDescriptorRequest)
	CompareWith(*WatchMonitoredResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseWatchMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMonitoredResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseWatchMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue struct {
	WatchMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorRequest_FieldPathValue = (*WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMonitoredResourceDescriptorRequest' as interface{}
func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchMonitoredResourceDescriptorRequest
func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **WatchMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(WatchMonitoredResourceDescriptorRequest)
	}
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*monitored_resource_descriptor.Reference)
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMonitoredResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'WatchMonitoredResourceDescriptorRequest'.
func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *WatchMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*monitored_resource_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMonitoredResourceDescriptorRequest))
}

// WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMonitoredResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMonitoredResourceDescriptorRequest_FieldPath
	ContainsValue(*WatchMonitoredResourceDescriptorRequest) bool
}

// ParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	WatchMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorRequest_FieldPathArrayItemValue = (*WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMonitoredResourceDescriptorRequest as interface{}
func (fpaiv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMonitoredResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMonitoredResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMonitoredResourceDescriptorRequest'
func (fpaiv *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMonitoredResourceDescriptorRequest) bool {
	slice := fpaiv.WatchMonitoredResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for WatchMonitoredResourceDescriptorRequest fields according to their type
type WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMonitoredResourceDescriptorRequest_FieldPath
}

func ParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	WatchMonitoredResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ WatchMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMonitoredResourceDescriptorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMonitoredResourceDescriptorResponse_FieldPathSelector
	Get(source *WatchMonitoredResourceDescriptorResponse) []interface{}
	GetSingle(source *WatchMonitoredResourceDescriptorResponse) (interface{}, bool)
	ClearValue(item *WatchMonitoredResourceDescriptorResponse)

	// Those methods build corresponding WatchMonitoredResourceDescriptorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMonitoredResourceDescriptorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue
}

type WatchMonitoredResourceDescriptorResponse_FieldPathSelector int32

const (
	WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange WatchMonitoredResourceDescriptorResponse_FieldPathSelector = 0
)

func (s WatchMonitoredResourceDescriptorResponse_FieldPathSelector) String() string {
	switch s {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", s))
	}
}

func BuildWatchMonitoredResourceDescriptorResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchMonitoredResourceDescriptorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMonitoredResourceDescriptorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchMonitoredResourceDescriptorResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMonitoredResourceDescriptorResponse", fp)
}

func ParseWatchMonitoredResourceDescriptorResponse_FieldPath(rawField string) (WatchMonitoredResourceDescriptorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMonitoredResourceDescriptorResponse_FieldPath(fp)
}

func MustParseWatchMonitoredResourceDescriptorResponse_FieldPath(rawField string) WatchMonitoredResourceDescriptorResponse_FieldPath {
	fp, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMonitoredResourceDescriptorResponse_FieldTerminalPath struct {
	selector WatchMonitoredResourceDescriptorResponse_FieldPathSelector
}

var _ WatchMonitoredResourceDescriptorResponse_FieldPath = (*WatchMonitoredResourceDescriptorResponse_FieldTerminalPath)(nil)

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) Selector() WatchMonitoredResourceDescriptorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMonitoredResourceDescriptorResponse
func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) Get(source *WatchMonitoredResourceDescriptorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMonitoredResourceDescriptorResponse))
}

// GetSingle returns value pointed by specific field of from source WatchMonitoredResourceDescriptorResponse
func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) GetSingle(source *WatchMonitoredResourceDescriptorResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMonitoredResourceDescriptorResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptorChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) ClearValue(item *WatchMonitoredResourceDescriptorResponse) {
	if item != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMonitoredResourceDescriptorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) WithIValue(value interface{}) WatchMonitoredResourceDescriptorResponse_FieldPathValue {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		return &WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues {
	fpaov := &WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		return &WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorResponse_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMonitoredResourceDescriptorResponse_FieldPathValue allows storing values for WatchMonitoredResourceDescriptorResponse fields according to their type
type WatchMonitoredResourceDescriptorResponse_FieldPathValue interface {
	WatchMonitoredResourceDescriptorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMonitoredResourceDescriptorResponse)
	CompareWith(*WatchMonitoredResourceDescriptorResponse) (cmp int, comparable bool)
}

func ParseWatchMonitoredResourceDescriptorResponse_FieldPathValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorResponse_FieldPathValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMonitoredResourceDescriptorResponse_FieldPathValue), nil
}

func MustParseWatchMonitoredResourceDescriptorResponse_FieldPathValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorResponse_FieldPathValue {
	fpv, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue struct {
	WatchMonitoredResourceDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorResponse_FieldPathValue = (*WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMonitoredResourceDescriptorResponse' as interface{}
func (fpv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue) AsChangeValue() (*monitored_resource_descriptor.MonitoredResourceDescriptorChange, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchMonitoredResourceDescriptorResponse
func (fpv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue) SetTo(target **WatchMonitoredResourceDescriptorResponse) {
	if *target == nil {
		*target = new(WatchMonitoredResourceDescriptorResponse)
	}
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMonitoredResourceDescriptorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue' with the value under path in 'WatchMonitoredResourceDescriptorResponse'.
func (fpv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue) CompareWith(source *WatchMonitoredResourceDescriptorResponse) (int, bool) {
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMonitoredResourceDescriptorResponse))
}

// WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMonitoredResourceDescriptorResponse according to their type
// Present only for array (repeated) types.
type WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMonitoredResourceDescriptorResponse_FieldPath
	ContainsValue(*WatchMonitoredResourceDescriptorResponse) bool
}

// ParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayItemValue struct {
	WatchMonitoredResourceDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorResponse_FieldPathArrayItemValue = (*WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMonitoredResourceDescriptorResponse as interface{}
func (fpaiv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMonitoredResourceDescriptorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMonitoredResourceDescriptorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMonitoredResourceDescriptorResponse'
func (fpaiv *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMonitoredResourceDescriptorResponse) bool {
	slice := fpaiv.WatchMonitoredResourceDescriptorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues allows storing slice of values for WatchMonitoredResourceDescriptorResponse fields according to their type
type WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMonitoredResourceDescriptorResponse_FieldPath
}

func ParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayOfValues struct {
	WatchMonitoredResourceDescriptorResponse_FieldTerminalPath
	values interface{}
}

var _ WatchMonitoredResourceDescriptorResponse_FieldPathArrayOfValues = (*WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMonitoredResourceDescriptorResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMonitoredResourceDescriptorResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMonitoredResourceDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMonitoredResourceDescriptorsRequest_FieldPathSelector
	Get(source *WatchMonitoredResourceDescriptorsRequest) []interface{}
	GetSingle(source *WatchMonitoredResourceDescriptorsRequest) (interface{}, bool)
	ClearValue(item *WatchMonitoredResourceDescriptorsRequest)

	// Those methods build corresponding WatchMonitoredResourceDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMonitoredResourceDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue
}

type WatchMonitoredResourceDescriptorsRequest_FieldPathSelector int32

const (
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType         WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 0
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize     WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 1
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken    WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 2
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy      WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 3
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken  WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 4
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter       WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 5
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask    WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 6
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView         WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 7
	WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize WatchMonitoredResourceDescriptorsRequest_FieldPathSelector = 8
)

func (s WatchMonitoredResourceDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		return "type"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return "view"
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", s))
	}
}

func BuildWatchMonitoredResourceDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchMonitoredResourceDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMonitoredResourceDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMonitoredResourceDescriptorsRequest", fp)
}

func ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(rawField string) (WatchMonitoredResourceDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMonitoredResourceDescriptorsRequest_FieldPath(fp)
}

func MustParseWatchMonitoredResourceDescriptorsRequest_FieldPath(rawField string) WatchMonitoredResourceDescriptorsRequest_FieldPath {
	fp, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath struct {
	selector WatchMonitoredResourceDescriptorsRequest_FieldPathSelector
}

var _ WatchMonitoredResourceDescriptorsRequest_FieldPath = (*WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) Selector() WatchMonitoredResourceDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMonitoredResourceDescriptorsRequest
func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) Get(source *WatchMonitoredResourceDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMonitoredResourceDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchMonitoredResourceDescriptorsRequest
func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetSingle(source *WatchMonitoredResourceDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMonitoredResourceDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return (*monitored_resource_descriptor.PagerCursor)(nil)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*monitored_resource_descriptor.OrderBy)(nil)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return (*monitored_resource_descriptor.Filter)(nil)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) ClearValue(item *WatchMonitoredResourceDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMonitoredResourceDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView ||
		fp.selector == WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchMonitoredResourceDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.PagerCursor)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.OrderBy)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Filter)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.PagerCursor)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.OrderBy)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.Filter)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMonitoredResourceDescriptorsRequest_FieldPathValue allows storing values for WatchMonitoredResourceDescriptorsRequest fields according to their type
type WatchMonitoredResourceDescriptorsRequest_FieldPathValue interface {
	WatchMonitoredResourceDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMonitoredResourceDescriptorsRequest)
	CompareWith(*WatchMonitoredResourceDescriptorsRequest) (cmp int, comparable bool)
}

func ParseWatchMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMonitoredResourceDescriptorsRequest_FieldPathValue), nil
}

func MustParseWatchMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorsRequest_FieldPathValue {
	fpv, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue struct {
	WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorsRequest_FieldPathValue = (*WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMonitoredResourceDescriptorsRequest' as interface{}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*monitored_resource_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.OrderBy)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*monitored_resource_descriptor.Filter, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.Filter)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchMonitoredResourceDescriptorsRequest
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) SetTo(target **WatchMonitoredResourceDescriptorsRequest) {
	if *target == nil {
		*target = new(WatchMonitoredResourceDescriptorsRequest)
	}
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*monitored_resource_descriptor.PagerCursor)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*monitored_resource_descriptor.OrderBy)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*monitored_resource_descriptor.Filter)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMonitoredResourceDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'WatchMonitoredResourceDescriptorsRequest'.
func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *WatchMonitoredResourceDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMonitoredResourceDescriptorsRequest))
}

// WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMonitoredResourceDescriptorsRequest according to their type
// Present only for array (repeated) types.
type WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMonitoredResourceDescriptorsRequest_FieldPath
	ContainsValue(*WatchMonitoredResourceDescriptorsRequest) bool
}

// ParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorsRequest_FieldPathArrayItemValue = (*WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMonitoredResourceDescriptorsRequest as interface{}
func (fpaiv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMonitoredResourceDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMonitoredResourceDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMonitoredResourceDescriptorsRequest'
func (fpaiv *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMonitoredResourceDescriptorsRequest) bool {
	slice := fpaiv.WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for WatchMonitoredResourceDescriptorsRequest fields according to their type
type WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMonitoredResourceDescriptorsRequest_FieldPath
}

func ParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	WatchMonitoredResourceDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchMonitoredResourceDescriptorsRequest_FieldPathArrayOfValues = (*WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.OrderBy) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.Filter) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*monitored_resource_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.OrderBy)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*monitored_resource_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.Filter)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMonitoredResourceDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMonitoredResourceDescriptorsResponse_FieldPathSelector
	Get(source *WatchMonitoredResourceDescriptorsResponse) []interface{}
	GetSingle(source *WatchMonitoredResourceDescriptorsResponse) (interface{}, bool)
	ClearValue(item *WatchMonitoredResourceDescriptorsResponse)

	// Those methods build corresponding WatchMonitoredResourceDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue
}

type WatchMonitoredResourceDescriptorsResponse_FieldPathSelector int32

const (
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 0
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent                          WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 1
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange                    WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 2
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken                        WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 3
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize                       WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 4
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset                        WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 5
	WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset                        WatchMonitoredResourceDescriptorsResponse_FieldPathSelector = 6
)

func (s WatchMonitoredResourceDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		return "monitored_resource_descriptor_changes"
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", s))
	}
}

func BuildWatchMonitoredResourceDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchMonitoredResourceDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMonitoredResourceDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "monitored_resource_descriptor_changes", "monitoredResourceDescriptorChanges", "monitored-resource-descriptor-changes":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchMonitoredResourceDescriptorsResponse_FieldSubPath{selector: WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMonitoredResourceDescriptorsResponse", fp)
}

func ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(rawField string) (WatchMonitoredResourceDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMonitoredResourceDescriptorsResponse_FieldPath(fp)
}

func MustParseWatchMonitoredResourceDescriptorsResponse_FieldPath(rawField string) WatchMonitoredResourceDescriptorsResponse_FieldPath {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath struct {
	selector WatchMonitoredResourceDescriptorsResponse_FieldPathSelector
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPath = (*WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) Selector() WatchMonitoredResourceDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMonitoredResourceDescriptorsResponse
func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) Get(source *WatchMonitoredResourceDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
			for _, value := range source.GetMonitoredResourceDescriptorChanges() {
				values = append(values, value)
			}
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMonitoredResourceDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchMonitoredResourceDescriptorsResponse
func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetSingle(source *WatchMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		res := source.GetMonitoredResourceDescriptorChanges()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMonitoredResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		return ([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)(nil)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)(nil)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) ClearValue(item *WatchMonitoredResourceDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
			item.MonitoredResourceDescriptorChanges = nil
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMonitoredResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges ||
		fp.selector == WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		return &WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchMonitoredResourceDescriptorsResponse_FieldSubPath struct {
	selector WatchMonitoredResourceDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPath = (*WatchMonitoredResourceDescriptorsResponse_FieldSubPath)(nil)

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) Selector() WatchMonitoredResourceDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchMonitoredResourceDescriptorsResponse
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) Get(source *WatchMonitoredResourceDescriptorsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchMonitoredResourceDescriptorsResponse))
}

// GetSingle returns value of selected field from source WatchMonitoredResourceDescriptorsResponse
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) GetSingle(source *WatchMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchMonitoredResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) ClearValue(item *WatchMonitoredResourceDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchMonitoredResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathValue {
	return &WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	return &WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	return &WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchMonitoredResourceDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchMonitoredResourceDescriptorsResponse_FieldPathValue allows storing values for WatchMonitoredResourceDescriptorsResponse fields according to their type
type WatchMonitoredResourceDescriptorsResponse_FieldPathValue interface {
	WatchMonitoredResourceDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMonitoredResourceDescriptorsResponse)
	CompareWith(*WatchMonitoredResourceDescriptorsResponse) (cmp int, comparable bool)
}

func ParseWatchMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMonitoredResourceDescriptorsResponse_FieldPathValue), nil
}

func MustParseWatchMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorsResponse_FieldPathValue {
	fpv, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue struct {
	WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPathValue = (*WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMonitoredResourceDescriptorsResponse' as interface{}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsMonitoredResourceDescriptorChangesValue() ([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange, bool) {
	res, ok := fpv.value.([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchMonitoredResourceDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchMonitoredResourceDescriptorsResponse
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) SetTo(target **WatchMonitoredResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchMonitoredResourceDescriptorsResponse)
	}
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		(*target).MonitoredResourceDescriptorChanges = fpv.value.([]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMonitoredResourceDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'WatchMonitoredResourceDescriptorsResponse'.
func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *WatchMonitoredResourceDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		return 0, false
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMonitoredResourceDescriptorsResponse))
}

type WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue struct {
	WatchMonitoredResourceDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPathValue = (*WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue) SetTo(target **WatchMonitoredResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchMonitoredResourceDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMonitoredResourceDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue) CompareWith(source *WatchMonitoredResourceDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchMonitoredResourceDescriptorsResponse))
}

// WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMonitoredResourceDescriptorsResponse according to their type
// Present only for array (repeated) types.
type WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMonitoredResourceDescriptorsResponse_FieldPath
	ContainsValue(*WatchMonitoredResourceDescriptorsResponse) bool
}

// ParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPathArrayItemValue = (*WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMonitoredResourceDescriptorsResponse as interface{}
func (fpaiv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMonitoredResourceDescriptorChangesItemValue() (*monitored_resource_descriptor.MonitoredResourceDescriptorChange, bool) {
	res, ok := fpaiv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	return res, ok
}

func (fpaiv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMonitoredResourceDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMonitoredResourceDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMonitoredResourceDescriptorsResponse'
func (fpaiv *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMonitoredResourceDescriptorsResponse) bool {
	slice := fpaiv.WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue struct {
	WatchMonitoredResourceDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMonitoredResourceDescriptorsResponse'
func (fpaivs *WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchMonitoredResourceDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for WatchMonitoredResourceDescriptorsResponse fields according to their type
type WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMonitoredResourceDescriptorsResponse_FieldPath
}

func ParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMonitoredResourceDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	WatchMonitoredResourceDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues = (*WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorMonitoredResourceDescriptorChanges:
		for _, v := range fpaov.values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptorChange) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchMonitoredResourceDescriptorsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMonitoredResourceDescriptorChangesArrayOfValues() ([][]*monitored_resource_descriptor.MonitoredResourceDescriptorChange, bool) {
	res, ok := fpaov.values.([][]*monitored_resource_descriptor.MonitoredResourceDescriptorChange)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchMonitoredResourceDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues struct {
	WatchMonitoredResourceDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchMonitoredResourceDescriptorsResponse_FieldPathArrayOfValues = (*WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchMonitoredResourceDescriptorsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchMonitoredResourceDescriptorsResponse_PageTokenChange)

	// Those methods build corresponding WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector = 0
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMonitoredResourceDescriptorsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMonitoredResourceDescriptorsResponse_PageTokenChange", fp)
}

func ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(rawField string) (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(rawField string) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector
}

var _ WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath = (*WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) Selector() WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMonitoredResourceDescriptorsResponse_PageTokenChange
func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchMonitoredResourceDescriptorsResponse_PageTokenChange
func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*monitored_resource_descriptor.PagerCursor)(nil)
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*monitored_resource_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.PagerCursor)}
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.PagerCursor)}
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue interface {
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
	CompareWith(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathValue = (*WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchMonitoredResourceDescriptorsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*monitored_resource_descriptor.PagerCursor)
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*monitored_resource_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchMonitoredResourceDescriptorsResponse_PageTokenChange'.
func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMonitoredResourceDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

// WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange) bool
}

// ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMonitoredResourceDescriptorsResponse_PageTokenChange as interface{}
func (fpaiv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMonitoredResourceDescriptorsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMonitoredResourceDescriptorsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath
}

func ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchMonitoredResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*monitored_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateMonitoredResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateMonitoredResourceDescriptorRequest_FieldPathSelector
	Get(source *CreateMonitoredResourceDescriptorRequest) []interface{}
	GetSingle(source *CreateMonitoredResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *CreateMonitoredResourceDescriptorRequest)

	// Those methods build corresponding CreateMonitoredResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue
}

type CreateMonitoredResourceDescriptorRequest_FieldPathSelector int32

const (
	CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor CreateMonitoredResourceDescriptorRequest_FieldPathSelector = 0
)

func (s CreateMonitoredResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return "monitored_resource_descriptor"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", s))
	}
}

func BuildCreateMonitoredResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateMonitoredResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateMonitoredResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "monitored_resource_descriptor", "monitoredResourceDescriptor", "monitored-resource-descriptor":
			return &CreateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor}, nil
		}
	} else {
		switch fp[0] {
		case "monitored_resource_descriptor", "monitoredResourceDescriptor", "monitored-resource-descriptor":
			if subpath, err := monitored_resource_descriptor.BuildMonitoredResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateMonitoredResourceDescriptorRequest_FieldSubPath{selector: CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateMonitoredResourceDescriptorRequest", fp)
}

func ParseCreateMonitoredResourceDescriptorRequest_FieldPath(rawField string) (CreateMonitoredResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateMonitoredResourceDescriptorRequest_FieldPath(fp)
}

func MustParseCreateMonitoredResourceDescriptorRequest_FieldPath(rawField string) CreateMonitoredResourceDescriptorRequest_FieldPath {
	fp, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateMonitoredResourceDescriptorRequest_FieldTerminalPath struct {
	selector CreateMonitoredResourceDescriptorRequest_FieldPathSelector
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPath = (*CreateMonitoredResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) Selector() CreateMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateMonitoredResourceDescriptorRequest
func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) Get(source *CreateMonitoredResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			if source.MonitoredResourceDescriptor != nil {
				values = append(values, source.MonitoredResourceDescriptor)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateMonitoredResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source CreateMonitoredResourceDescriptorRequest
func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *CreateMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		res := source.GetMonitoredResourceDescriptor()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *CreateMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			item.MonitoredResourceDescriptor = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return &CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue{CreateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return &CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateMonitoredResourceDescriptorRequest_FieldSubPath struct {
	selector CreateMonitoredResourceDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPath = (*CreateMonitoredResourceDescriptorRequest_FieldSubPath)(nil)

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) Selector() CreateMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) AsMonitoredResourceDescriptorSubPath() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateMonitoredResourceDescriptorRequest
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) Get(source *CreateMonitoredResourceDescriptorRequest) (values []interface{}) {
	if asMonitoredResourceDescriptorFieldPath, ok := fps.AsMonitoredResourceDescriptorSubPath(); ok {
		values = append(values, asMonitoredResourceDescriptorFieldPath.Get(source.GetMonitoredResourceDescriptor())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateMonitoredResourceDescriptorRequest))
}

// GetSingle returns value of selected field from source CreateMonitoredResourceDescriptorRequest
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) GetSingle(source *CreateMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		if source.GetMonitoredResourceDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMonitoredResourceDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fps.selector))
	}
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) ClearValue(item *CreateMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			fps.subPath.ClearValueRaw(item.MonitoredResourceDescriptor)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) WithIValue(value interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathValue {
	return &CreateMonitoredResourceDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	return &CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	return &CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateMonitoredResourceDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateMonitoredResourceDescriptorRequest_FieldPathValue allows storing values for CreateMonitoredResourceDescriptorRequest fields according to their type
type CreateMonitoredResourceDescriptorRequest_FieldPathValue interface {
	CreateMonitoredResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateMonitoredResourceDescriptorRequest)
	CompareWith(*CreateMonitoredResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseCreateMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (CreateMonitoredResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMonitoredResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateMonitoredResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseCreateMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) CreateMonitoredResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue struct {
	CreateMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPathValue = (*CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateMonitoredResourceDescriptorRequest' as interface{}
func (fpv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsMonitoredResourceDescriptorValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}

// SetTo stores value for selected field for object CreateMonitoredResourceDescriptorRequest
func (fpv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **CreateMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(CreateMonitoredResourceDescriptorRequest)
	}
	switch fpv.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		(*target).MonitoredResourceDescriptor = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateMonitoredResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'CreateMonitoredResourceDescriptorRequest'.
func (fpv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *CreateMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateMonitoredResourceDescriptorRequest))
}

type CreateMonitoredResourceDescriptorRequest_FieldSubPathValue struct {
	CreateMonitoredResourceDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPathValue = (*CreateMonitoredResourceDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *CreateMonitoredResourceDescriptorRequest_FieldSubPathValue) AsMonitoredResourceDescriptorPathValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *CreateMonitoredResourceDescriptorRequest_FieldSubPathValue) SetTo(target **CreateMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(CreateMonitoredResourceDescriptorRequest)
	}
	switch fpvs.Selector() {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue).SetTo(&(*target).MonitoredResourceDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateMonitoredResourceDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateMonitoredResourceDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateMonitoredResourceDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateMonitoredResourceDescriptorRequest_FieldSubPathValue) CompareWith(source *CreateMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue).CompareWith(source.GetMonitoredResourceDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateMonitoredResourceDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateMonitoredResourceDescriptorRequest))
}

// CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateMonitoredResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateMonitoredResourceDescriptorRequest_FieldPath
	ContainsValue(*CreateMonitoredResourceDescriptorRequest) bool
}

// ParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMonitoredResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	CreateMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue = (*CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateMonitoredResourceDescriptorRequest as interface{}
func (fpaiv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateMonitoredResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateMonitoredResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateMonitoredResourceDescriptorRequest'
func (fpaiv *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateMonitoredResourceDescriptorRequest) bool {
	slice := fpaiv.CreateMonitoredResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue struct {
	CreateMonitoredResourceDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) AsMonitoredResourceDescriptorPathItemValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateMonitoredResourceDescriptorRequest'
func (fpaivs *CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateMonitoredResourceDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetMonitoredResourceDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMonitoredResourceDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for CreateMonitoredResourceDescriptorRequest fields according to their type
type CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateMonitoredResourceDescriptorRequest_FieldPath
}

func ParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMonitoredResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	CreateMonitoredResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsMonitoredResourceDescriptorArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}

type CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues struct {
	CreateMonitoredResourceDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues) AsMonitoredResourceDescriptorPathArrayOfValues() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateMonitoredResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateMonitoredResourceDescriptorRequest_FieldPathSelector
	Get(source *UpdateMonitoredResourceDescriptorRequest) []interface{}
	GetSingle(source *UpdateMonitoredResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *UpdateMonitoredResourceDescriptorRequest)

	// Those methods build corresponding UpdateMonitoredResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue
}

type UpdateMonitoredResourceDescriptorRequest_FieldPathSelector int32

const (
	UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor UpdateMonitoredResourceDescriptorRequest_FieldPathSelector = 0
	UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask                  UpdateMonitoredResourceDescriptorRequest_FieldPathSelector = 1
	UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas                         UpdateMonitoredResourceDescriptorRequest_FieldPathSelector = 2
)

func (s UpdateMonitoredResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return "monitored_resource_descriptor"
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", s))
	}
}

func BuildUpdateMonitoredResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateMonitoredResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateMonitoredResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "monitored_resource_descriptor", "monitoredResourceDescriptor", "monitored-resource-descriptor":
			return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "monitored_resource_descriptor", "monitoredResourceDescriptor", "monitored-resource-descriptor":
			if subpath, err := monitored_resource_descriptor.BuildMonitoredResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMonitoredResourceDescriptorRequest_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateMonitoredResourceDescriptorRequest", fp)
}

func ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(rawField string) (UpdateMonitoredResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateMonitoredResourceDescriptorRequest_FieldPath(fp)
}

func MustParseUpdateMonitoredResourceDescriptorRequest_FieldPath(rawField string) UpdateMonitoredResourceDescriptorRequest_FieldPath {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath struct {
	selector UpdateMonitoredResourceDescriptorRequest_FieldPathSelector
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPath = (*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) Selector() UpdateMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateMonitoredResourceDescriptorRequest
func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) Get(source *UpdateMonitoredResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			if source.MonitoredResourceDescriptor != nil {
				values = append(values, source.MonitoredResourceDescriptor)
			}
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateMonitoredResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateMonitoredResourceDescriptorRequest
func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *UpdateMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		res := source.GetMonitoredResourceDescriptor()
		return res, res != nil
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor)(nil)
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return (*UpdateMonitoredResourceDescriptorRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *UpdateMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			item.MonitoredResourceDescriptor = nil
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*UpdateMonitoredResourceDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return &UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*UpdateMonitoredResourceDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateMonitoredResourceDescriptorRequest_FieldSubPath struct {
	selector UpdateMonitoredResourceDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPath = (*UpdateMonitoredResourceDescriptorRequest_FieldSubPath)(nil)

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) Selector() UpdateMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) AsMonitoredResourceDescriptorSubPath() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)
	return res, ok
}
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) AsCasSubPath() (UpdateMonitoredResourceDescriptorRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateMonitoredResourceDescriptorRequest
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) Get(source *UpdateMonitoredResourceDescriptorRequest) (values []interface{}) {
	if asMonitoredResourceDescriptorFieldPath, ok := fps.AsMonitoredResourceDescriptorSubPath(); ok {
		values = append(values, asMonitoredResourceDescriptorFieldPath.Get(source.GetMonitoredResourceDescriptor())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateMonitoredResourceDescriptorRequest))
}

// GetSingle returns value of selected field from source UpdateMonitoredResourceDescriptorRequest
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) GetSingle(source *UpdateMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		if source.GetMonitoredResourceDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMonitoredResourceDescriptor())
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fps.selector))
	}
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) ClearValue(item *UpdateMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
			fps.subPath.ClearValueRaw(item.MonitoredResourceDescriptor)
		case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) WithIValue(value interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathValue {
	return &UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	return &UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	return &UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateMonitoredResourceDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateMonitoredResourceDescriptorRequest_FieldPathValue allows storing values for UpdateMonitoredResourceDescriptorRequest fields according to their type
type UpdateMonitoredResourceDescriptorRequest_FieldPathValue interface {
	UpdateMonitoredResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateMonitoredResourceDescriptorRequest)
	CompareWith(*UpdateMonitoredResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseUpdateMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (UpdateMonitoredResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMonitoredResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateMonitoredResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseUpdateMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) UpdateMonitoredResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue struct {
	UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPathValue = (*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateMonitoredResourceDescriptorRequest' as interface{}
func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsMonitoredResourceDescriptorValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsCasValue() (*UpdateMonitoredResourceDescriptorRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateMonitoredResourceDescriptorRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateMonitoredResourceDescriptorRequest
func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **UpdateMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateMonitoredResourceDescriptorRequest)
	}
	switch fpv.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		(*target).MonitoredResourceDescriptor = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateMonitoredResourceDescriptorRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMonitoredResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'UpdateMonitoredResourceDescriptorRequest'.
func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *UpdateMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return 0, false
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateMonitoredResourceDescriptorRequest))
}

type UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue struct {
	UpdateMonitoredResourceDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPathValue = (*UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) AsMonitoredResourceDescriptorPathValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) AsCasPathValue() (UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) SetTo(target **UpdateMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateMonitoredResourceDescriptorRequest)
	}
	switch fpvs.Selector() {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue).SetTo(&(*target).MonitoredResourceDescriptor)
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMonitoredResourceDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) CompareWith(source *UpdateMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue).CompareWith(source.GetMonitoredResourceDescriptor())
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateMonitoredResourceDescriptorRequest))
}

// UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateMonitoredResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateMonitoredResourceDescriptorRequest_FieldPath
	ContainsValue(*UpdateMonitoredResourceDescriptorRequest) bool
}

// ParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMonitoredResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPathArrayItemValue = (*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateMonitoredResourceDescriptorRequest as interface{}
func (fpaiv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateMonitoredResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateMonitoredResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateMonitoredResourceDescriptorRequest'
func (fpaiv *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateMonitoredResourceDescriptorRequest) bool {
	slice := fpaiv.UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue struct {
	UpdateMonitoredResourceDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) AsMonitoredResourceDescriptorPathItemValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateMonitoredResourceDescriptorRequest'
func (fpaivs *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateMonitoredResourceDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		return fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetMonitoredResourceDescriptor())
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for UpdateMonitoredResourceDescriptorRequest fields according to their type
type UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateMonitoredResourceDescriptorRequest_FieldPath
}

func ParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMonitoredResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	UpdateMonitoredResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorMonitoredResourceDescriptor:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor) {
			values = append(values, v)
		}
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case UpdateMonitoredResourceDescriptorRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateMonitoredResourceDescriptorRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsMonitoredResourceDescriptorArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpaov *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *UpdateMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateMonitoredResourceDescriptorRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateMonitoredResourceDescriptorRequest_CAS)
	return res, ok
}

type UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues struct {
	UpdateMonitoredResourceDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues) AsMonitoredResourceDescriptorPathArrayOfValues() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateMonitoredResourceDescriptorRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateMonitoredResourceDescriptorRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector
	Get(source *UpdateMonitoredResourceDescriptorRequest_CAS) []interface{}
	GetSingle(source *UpdateMonitoredResourceDescriptorRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateMonitoredResourceDescriptorRequest_CAS)

	// Those methods build corresponding UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector int32

const (
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector = 0
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask        UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector = 1
)

func (s UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", s))
	}
}

func BuildUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateMonitoredResourceDescriptorRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateMonitoredResourceDescriptorRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := monitored_resource_descriptor.BuildMonitoredResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath{selector: UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateMonitoredResourceDescriptorRequest_CAS", fp)
}

func ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(rawField string) (UpdateMonitoredResourceDescriptorRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(fp)
}

func MustParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(rawField string) UpdateMonitoredResourceDescriptorRequestCAS_FieldPath {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath struct {
	selector UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPath = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) Selector() UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateMonitoredResourceDescriptorRequest_CAS
func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) Get(source *UpdateMonitoredResourceDescriptorRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateMonitoredResourceDescriptorRequest_CAS
func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) GetSingle(source *UpdateMonitoredResourceDescriptorRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor)(nil)
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) ClearValue(item *UpdateMonitoredResourceDescriptorRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue{UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue{UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)}
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath struct {
	selector UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPath = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath)(nil)

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) Selector() UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) AsConditionalStateSubPath() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateMonitoredResourceDescriptorRequest_CAS
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) Get(source *UpdateMonitoredResourceDescriptorRequest_CAS) (values []interface{}) {
	if asMonitoredResourceDescriptorFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asMonitoredResourceDescriptorFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateMonitoredResourceDescriptorRequest_CAS
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) GetSingle(source *UpdateMonitoredResourceDescriptorRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) ClearValue(item *UpdateMonitoredResourceDescriptorRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue {
	return &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues {
	return &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue {
	return &UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue interface {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateMonitoredResourceDescriptorRequest_CAS)
	CompareWith(*UpdateMonitoredResourceDescriptorRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue), nil
}

func MustParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue struct {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateMonitoredResourceDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateMonitoredResourceDescriptorRequest_CAS)
	}
	switch fpv.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMonitoredResourceDescriptorRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateMonitoredResourceDescriptorRequest_CAS'.
func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateMonitoredResourceDescriptorRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue struct {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPathValue = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue) SetTo(target **UpdateMonitoredResourceDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateMonitoredResourceDescriptorRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMonitoredResourceDescriptorRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue) CompareWith(source *UpdateMonitoredResourceDescriptorRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
	ContainsValue(*UpdateMonitoredResourceDescriptorRequest_CAS) bool
}

// ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayItemValue = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateMonitoredResourceDescriptorRequest_CAS as interface{}
func (fpaiv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateMonitoredResourceDescriptorRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateMonitoredResourceDescriptorRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateMonitoredResourceDescriptorRequest_CAS) bool {
	slice := fpaiv.UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateMonitoredResourceDescriptorRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMonitoredResourceDescriptorRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
}

func ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor) {
			values = append(values, v)
		}
	case UpdateMonitoredResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor)
	return res, ok
}
func (fpaov *UpdateMonitoredResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.MonitoredResourceDescriptor_FieldMask)
	return res, ok
}

type UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateMonitoredResourceDescriptorRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateMonitoredResourceDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateMonitoredResourceDescriptorRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(monitored_resource_descriptor.MonitoredResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteMonitoredResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteMonitoredResourceDescriptorRequest_FieldPathSelector
	Get(source *DeleteMonitoredResourceDescriptorRequest) []interface{}
	GetSingle(source *DeleteMonitoredResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *DeleteMonitoredResourceDescriptorRequest)

	// Those methods build corresponding DeleteMonitoredResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteMonitoredResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue
}

type DeleteMonitoredResourceDescriptorRequest_FieldPathSelector int32

const (
	DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName DeleteMonitoredResourceDescriptorRequest_FieldPathSelector = 0
)

func (s DeleteMonitoredResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", s))
	}
}

func BuildDeleteMonitoredResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteMonitoredResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteMonitoredResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath{selector: DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteMonitoredResourceDescriptorRequest", fp)
}

func ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(rawField string) (DeleteMonitoredResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteMonitoredResourceDescriptorRequest_FieldPath(fp)
}

func MustParseDeleteMonitoredResourceDescriptorRequest_FieldPath(rawField string) DeleteMonitoredResourceDescriptorRequest_FieldPath {
	fp, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath struct {
	selector DeleteMonitoredResourceDescriptorRequest_FieldPathSelector
}

var _ DeleteMonitoredResourceDescriptorRequest_FieldPath = (*DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) Selector() DeleteMonitoredResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteMonitoredResourceDescriptorRequest
func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) Get(source *DeleteMonitoredResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteMonitoredResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteMonitoredResourceDescriptorRequest
func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *DeleteMonitoredResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteMonitoredResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return (*monitored_resource_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *DeleteMonitoredResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteMonitoredResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteMonitoredResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return &DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue{DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*monitored_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		return &DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues{DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*monitored_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteMonitoredResourceDescriptorRequest_FieldPathValue allows storing values for DeleteMonitoredResourceDescriptorRequest fields according to their type
type DeleteMonitoredResourceDescriptorRequest_FieldPathValue interface {
	DeleteMonitoredResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteMonitoredResourceDescriptorRequest)
	CompareWith(*DeleteMonitoredResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseDeleteMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (DeleteMonitoredResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteMonitoredResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteMonitoredResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseDeleteMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) DeleteMonitoredResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue struct {
	DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteMonitoredResourceDescriptorRequest_FieldPathValue = (*DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteMonitoredResourceDescriptorRequest' as interface{}
func (fpv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.(*monitored_resource_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteMonitoredResourceDescriptorRequest
func (fpv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **DeleteMonitoredResourceDescriptorRequest) {
	if *target == nil {
		*target = new(DeleteMonitoredResourceDescriptorRequest)
	}
	switch fpv.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*monitored_resource_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteMonitoredResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'DeleteMonitoredResourceDescriptorRequest'.
func (fpv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *DeleteMonitoredResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*monitored_resource_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteMonitoredResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteMonitoredResourceDescriptorRequest))
}

// DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteMonitoredResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteMonitoredResourceDescriptorRequest_FieldPath
	ContainsValue(*DeleteMonitoredResourceDescriptorRequest) bool
}

// ParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteMonitoredResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteMonitoredResourceDescriptorRequest_FieldPathArrayItemValue = (*DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteMonitoredResourceDescriptorRequest as interface{}
func (fpaiv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteMonitoredResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteMonitoredResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteMonitoredResourceDescriptorRequest'
func (fpaiv *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteMonitoredResourceDescriptorRequest) bool {
	slice := fpaiv.DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for DeleteMonitoredResourceDescriptorRequest fields according to their type
type DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteMonitoredResourceDescriptorRequest_FieldPath
}

func ParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteMonitoredResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	DeleteMonitoredResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteMonitoredResourceDescriptorRequest_FieldPathArrayOfValues = (*DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteMonitoredResourceDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*monitored_resource_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteMonitoredResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*monitored_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*monitored_resource_descriptor.Reference)
	return res, ok
}
