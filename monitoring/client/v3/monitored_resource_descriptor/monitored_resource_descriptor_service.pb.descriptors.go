// Code generated by protoc-gen-goten-client
// API: MonitoredResourceDescriptorService
// DO NOT EDIT!!!

package monitored_resource_descriptor_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized                         bool
	monitoredResourceDescriptorServiceDescriptor   *MonitoredResourceDescriptorServiceDescriptor
	batchGetMonitoredResourceDescriptorsDescriptor *BatchGetMonitoredResourceDescriptorsDescriptor
	watchMonitoredResourceDescriptorDescriptor     *WatchMonitoredResourceDescriptorDescriptor
	watchMonitoredResourceDescriptorsDescriptor    *WatchMonitoredResourceDescriptorsDescriptor
	createMonitoredResourceDescriptorDescriptor    *CreateMonitoredResourceDescriptorDescriptor
	updateMonitoredResourceDescriptorDescriptor    *UpdateMonitoredResourceDescriptorDescriptor
	deleteMonitoredResourceDescriptorDescriptor    *DeleteMonitoredResourceDescriptorDescriptor
	getMonitoredResourceDescriptorDescriptor       *GetMonitoredResourceDescriptorDescriptor
	listMonitoredResourceDescriptorsDescriptor     *ListMonitoredResourceDescriptorsDescriptor
)

type BatchGetMonitoredResourceDescriptorsDescriptor struct{}

type BatchGetMonitoredResourceDescriptorsDescriptorClientMsgHandle struct{}

type BatchGetMonitoredResourceDescriptorsDescriptorServerMsgHandle struct{}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetMonitoredResourceDescriptorsRequest{}
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetMonitoredResourceDescriptorsResponse{}
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetMethodName() string {
	return "BatchGetMonitoredResourceDescriptors"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/BatchGetMonitoredResourceDescriptors"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetMonitoredResourceDescriptorsDescriptorClientMsgHandle{}
}

func (d *BatchGetMonitoredResourceDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetMonitoredResourceDescriptorsDescriptorServerMsgHandle{}
}

func (h *BatchGetMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMonitoredResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetMonitoredResourceDescriptorsRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetMonitoredResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetMonitoredResourceDescriptorsRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(monitored_resource_descriptor.MonitoredResourceDescriptorNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (monitored_resource_descriptor.MonitoredResourceDescriptorNameList)(nil)
}

func (h *BatchGetMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetMonitoredResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetMonitoredResourceDescriptorsResponse) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetMonitoredResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetMonitoredResourceDescriptorsResponse) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetMonitoredResourceDescriptors(); len(resources) > 0 {
			list := make(monitored_resource_descriptor.MonitoredResourceDescriptorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (monitored_resource_descriptor.MonitoredResourceDescriptorNameList)(nil)
}

func (h *BatchGetMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetMonitoredResourceDescriptorsDescriptor() *BatchGetMonitoredResourceDescriptorsDescriptor {
	return batchGetMonitoredResourceDescriptorsDescriptor
}

type WatchMonitoredResourceDescriptorDescriptor struct{}

type WatchMonitoredResourceDescriptorDescriptorClientMsgHandle struct{}

type WatchMonitoredResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *WatchMonitoredResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchMonitoredResourceDescriptorRequest{}
}

func (d *WatchMonitoredResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchMonitoredResourceDescriptorResponse{}
}

func (d *WatchMonitoredResourceDescriptorDescriptor) IsUnary() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchMonitoredResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *WatchMonitoredResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetMethodName() string {
	return "WatchMonitoredResourceDescriptor"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/WatchMonitoredResourceDescriptor"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMonitoredResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *WatchMonitoredResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMonitoredResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *WatchMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMonitoredResourceDescriptorRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *WatchMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMonitoredResourceDescriptorRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMonitoredResourceDescriptorResponse) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Added_:
				return tResChange.Added.GetMonitoredResourceDescriptor().GetName()
			case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Modified_:
				return tResChange.Modified.GetName()
			case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Removed_:
				return tResChange.Removed.GetName()
			case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Current_:
				return tResChange.Current.GetMonitoredResourceDescriptor().GetName()
			}
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *WatchMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMonitoredResourceDescriptorResponse) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchMonitoredResourceDescriptorDescriptor() *WatchMonitoredResourceDescriptorDescriptor {
	return watchMonitoredResourceDescriptorDescriptor
}

type WatchMonitoredResourceDescriptorsDescriptor struct{}

type WatchMonitoredResourceDescriptorsDescriptorClientMsgHandle struct{}

type WatchMonitoredResourceDescriptorsDescriptorServerMsgHandle struct{}

func (d *WatchMonitoredResourceDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchMonitoredResourceDescriptorsRequest{}
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchMonitoredResourceDescriptorsResponse{}
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetMethodName() string {
	return "WatchMonitoredResourceDescriptors"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/WatchMonitoredResourceDescriptors"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMonitoredResourceDescriptorsDescriptorClientMsgHandle{}
}

func (d *WatchMonitoredResourceDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchMonitoredResourceDescriptorsDescriptorServerMsgHandle{}
}

func (h *WatchMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMonitoredResourceDescriptorsRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMonitoredResourceDescriptorsRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchMonitoredResourceDescriptorsResponse) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchMonitoredResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchMonitoredResourceDescriptorsResponse) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetMonitoredResourceDescriptorChanges(); len(resChanges) > 0 {
			list := make(monitored_resource_descriptor.MonitoredResourceDescriptorNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Added_:
					list = append(list, tResChange.Added.GetMonitoredResourceDescriptor().GetName())
				case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *monitored_resource_descriptor.MonitoredResourceDescriptorChange_Current_:
					list = append(list, tResChange.Current.GetMonitoredResourceDescriptor().GetName())
				}
			}
			return list
		}
	}
	return (monitored_resource_descriptor.MonitoredResourceDescriptorNameList)(nil)
}

func (h *WatchMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchMonitoredResourceDescriptorsDescriptor() *WatchMonitoredResourceDescriptorsDescriptor {
	return watchMonitoredResourceDescriptorsDescriptor
}

type CreateMonitoredResourceDescriptorDescriptor struct{}

type CreateMonitoredResourceDescriptorDescriptorClientMsgHandle struct{}

type CreateMonitoredResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *CreateMonitoredResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateMonitoredResourceDescriptorRequest{}
}

func (d *CreateMonitoredResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &monitored_resource_descriptor.MonitoredResourceDescriptor{}
}

func (d *CreateMonitoredResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *CreateMonitoredResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateMonitoredResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateMonitoredResourceDescriptorDescriptor) IsCollection() bool {
	return true
}

func (d *CreateMonitoredResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *CreateMonitoredResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *CreateMonitoredResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetMethodName() string {
	return "CreateMonitoredResourceDescriptor"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/CreateMonitoredResourceDescriptor"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateMonitoredResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *CreateMonitoredResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateMonitoredResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *CreateMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateMonitoredResourceDescriptorRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetMonitoredResourceDescriptor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *CreateMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateMonitoredResourceDescriptorRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*monitored_resource_descriptor.MonitoredResourceDescriptor) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *CreateMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*monitored_resource_descriptor.MonitoredResourceDescriptor) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateMonitoredResourceDescriptorDescriptor() *CreateMonitoredResourceDescriptorDescriptor {
	return createMonitoredResourceDescriptorDescriptor
}

type UpdateMonitoredResourceDescriptorDescriptor struct{}

type UpdateMonitoredResourceDescriptorDescriptorClientMsgHandle struct{}

type UpdateMonitoredResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *UpdateMonitoredResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateMonitoredResourceDescriptorRequest{}
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &monitored_resource_descriptor.MonitoredResourceDescriptor{}
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetMethodName() string {
	return "UpdateMonitoredResourceDescriptor"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/UpdateMonitoredResourceDescriptor"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateMonitoredResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *UpdateMonitoredResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateMonitoredResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *UpdateMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateMonitoredResourceDescriptorRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetMonitoredResourceDescriptor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *UpdateMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateMonitoredResourceDescriptorRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*monitored_resource_descriptor.MonitoredResourceDescriptor) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *UpdateMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*monitored_resource_descriptor.MonitoredResourceDescriptor) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateMonitoredResourceDescriptorDescriptor() *UpdateMonitoredResourceDescriptorDescriptor {
	return updateMonitoredResourceDescriptorDescriptor
}

type DeleteMonitoredResourceDescriptorDescriptor struct{}

type DeleteMonitoredResourceDescriptorDescriptorClientMsgHandle struct{}

type DeleteMonitoredResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *DeleteMonitoredResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteMonitoredResourceDescriptorRequest{}
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetMethodName() string {
	return "DeleteMonitoredResourceDescriptor"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/DeleteMonitoredResourceDescriptor"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteMonitoredResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *DeleteMonitoredResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteMonitoredResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *DeleteMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteMonitoredResourceDescriptorRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *DeleteMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteMonitoredResourceDescriptorRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetDeleteMonitoredResourceDescriptorDescriptor() *DeleteMonitoredResourceDescriptorDescriptor {
	return deleteMonitoredResourceDescriptorDescriptor
}

type GetMonitoredResourceDescriptorDescriptor struct{}

type GetMonitoredResourceDescriptorDescriptorClientMsgHandle struct{}

type GetMonitoredResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *GetMonitoredResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetMonitoredResourceDescriptorRequest{}
}

func (d *GetMonitoredResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &monitored_resource_descriptor.MonitoredResourceDescriptor{}
}

func (d *GetMonitoredResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *GetMonitoredResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *GetMonitoredResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *GetMonitoredResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *GetMonitoredResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *GetMonitoredResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *GetMonitoredResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetVerb() string {
	return "get"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetMethodName() string {
	return "GetMonitoredResourceDescriptor"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/GetMonitoredResourceDescriptor"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMonitoredResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *GetMonitoredResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetMonitoredResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *GetMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetMonitoredResourceDescriptorRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*monitored_resource_descriptor.Name)(nil)
}

func (h *GetMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetMonitoredResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetMonitoredResourceDescriptorRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMonitoredResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*monitored_resource_descriptor.MonitoredResourceDescriptor) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*monitored_resource_descriptor.MonitoredResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*monitored_resource_descriptor.MonitoredResourceDescriptor) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetMonitoredResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetMonitoredResourceDescriptorDescriptor() *GetMonitoredResourceDescriptorDescriptor {
	return getMonitoredResourceDescriptorDescriptor
}

type ListMonitoredResourceDescriptorsDescriptor struct{}

type ListMonitoredResourceDescriptorsDescriptorClientMsgHandle struct{}

type ListMonitoredResourceDescriptorsDescriptorServerMsgHandle struct{}

func (d *ListMonitoredResourceDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListMonitoredResourceDescriptorsRequest{}
}

func (d *ListMonitoredResourceDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListMonitoredResourceDescriptorsResponse{}
}

func (d *ListMonitoredResourceDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *ListMonitoredResourceDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListMonitoredResourceDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListMonitoredResourceDescriptorsDescriptor) IsCollection() bool {
	return true
}

func (d *ListMonitoredResourceDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *ListMonitoredResourceDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *ListMonitoredResourceDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetMethodName() string {
	return "ListMonitoredResourceDescriptors"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService/ListMonitoredResourceDescriptors"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return monitored_resource_descriptor.GetDescriptor()
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMonitoredResourceDescriptorsDescriptorClientMsgHandle{}
}

func (d *ListMonitoredResourceDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListMonitoredResourceDescriptorsDescriptorServerMsgHandle{}
}

func (h *ListMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMonitoredResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMonitoredResourceDescriptorsRequest) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMonitoredResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMonitoredResourceDescriptorsRequest) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMonitoredResourceDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListMonitoredResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListMonitoredResourceDescriptorsResponse) *monitored_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListMonitoredResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListMonitoredResourceDescriptorsResponse) []*monitored_resource_descriptor.Name
	})
	if ok {
		return monitored_resource_descriptor.MonitoredResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListMonitoredResourceDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListMonitoredResourceDescriptorsDescriptor() *ListMonitoredResourceDescriptorsDescriptor {
	return listMonitoredResourceDescriptorsDescriptor
}

type MonitoredResourceDescriptorServiceDescriptor struct{}

func (d *MonitoredResourceDescriptorServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		batchGetMonitoredResourceDescriptorsDescriptor,
		watchMonitoredResourceDescriptorDescriptor,
		watchMonitoredResourceDescriptorsDescriptor,
		createMonitoredResourceDescriptorDescriptor,
		updateMonitoredResourceDescriptorDescriptor,
		deleteMonitoredResourceDescriptorDescriptor,
		getMonitoredResourceDescriptorDescriptor,
		listMonitoredResourceDescriptorsDescriptor,
	}
}

func (d *MonitoredResourceDescriptorServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v3.MonitoredResourceDescriptorService"
}

func (d *MonitoredResourceDescriptorServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *MonitoredResourceDescriptorServiceDescriptor) GetApiName() string {
	return "MonitoredResourceDescriptorService"
}

func (d *MonitoredResourceDescriptorServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *MonitoredResourceDescriptorServiceDescriptor) GetServiceVersion() string {
	return "v3"
}

func GetMonitoredResourceDescriptorServiceDescriptor() *MonitoredResourceDescriptorServiceDescriptor {
	return monitoredResourceDescriptorServiceDescriptor
}

func initDescriptors() {
	monitoredResourceDescriptorServiceDescriptor = &MonitoredResourceDescriptorServiceDescriptor{}
	batchGetMonitoredResourceDescriptorsDescriptor = &BatchGetMonitoredResourceDescriptorsDescriptor{}
	watchMonitoredResourceDescriptorDescriptor = &WatchMonitoredResourceDescriptorDescriptor{}
	watchMonitoredResourceDescriptorsDescriptor = &WatchMonitoredResourceDescriptorsDescriptor{}
	createMonitoredResourceDescriptorDescriptor = &CreateMonitoredResourceDescriptorDescriptor{}
	updateMonitoredResourceDescriptorDescriptor = &UpdateMonitoredResourceDescriptorDescriptor{}
	deleteMonitoredResourceDescriptorDescriptor = &DeleteMonitoredResourceDescriptorDescriptor{}
	getMonitoredResourceDescriptorDescriptor = &GetMonitoredResourceDescriptorDescriptor{}
	listMonitoredResourceDescriptorsDescriptor = &ListMonitoredResourceDescriptorsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(monitoredResourceDescriptorServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetMonitoredResourceDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchMonitoredResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchMonitoredResourceDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createMonitoredResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateMonitoredResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteMonitoredResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getMonitoredResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listMonitoredResourceDescriptorsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
