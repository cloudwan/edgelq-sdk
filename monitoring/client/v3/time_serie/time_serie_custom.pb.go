// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/time_serie_custom.proto
// DO NOT EDIT!!!

package time_serie_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/common"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/time_serie"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &fieldmaskpb.FieldMask{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [ListTimeSeries][ntt.monitoring.v3.ListTimeSeries]
type ListTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The project on which to execute the request. The format is
	// "projects/{project_id_or_number}".
	Parent *project.Name `protobuf:"bytes,10,opt,customtype=Name,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// A monitoring filter that specifies which time
	// series should be returned.  The filter must specify a single metric type,
	// and can additionally specify metric labels and other information. For
	// example:
	//
	//     metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
	//         metric.label.instance_name = "my-instance-name"
	Filter *time_serie.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// The time interval for which results should be returned. Only time series
	// that contain data points in the specified interval are included
	// in the response.
	Interval *common.TimeInterval `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// By default, the raw time series data is returned.
	// Use this field to combine multiple time series for different
	// views of the data.
	Aggregation *common.Aggregation `protobuf:"bytes,5,opt,name=aggregation,proto3" json:"aggregation,omitempty" firestore:"aggregation"`
	// Picks paginated time series according to pre-defined (in metric descriptor)
	// view and function. Cannot be used with aggregation, because pagination
	// view and function determines time series transformation and sorting.
	Pagination *common.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" firestore:"pagination"`
	// Specifies which information is returned about the time series.
	View common.TimeSeriesView `protobuf:"varint,7,opt,name=view,proto3,enum=ntt.monitoring.v3.TimeSeriesView" json:"view,omitempty" firestore:"view"`
	// view list mask. Optimize network usage and limit returned header fields to
	// a required subset. example fields in field mask:
	// - "key": for later caching,
	// - "resource.labels.project_id", "resource.labels.instance_name", etc -
	// specific labels only
	// - "resource", "metric": all resource labels, reduced_labels and type
	// NOTE: points are added implicitly
	FieldMask *time_serie.TimeSerie_FieldMask `protobuf:"bytes,12,opt,customtype=TimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// A positive number that is the maximum number of Points to return. If
	// `points_cap` is empty or more than 100,000 results, the effective
	// `points_cap` is 100,000 results. If `view` is set to `HEADERS`, this is
	// the maximum number of `TimeSeries` returned.
	PointsCap int32 `protobuf:"varint,8,opt,name=points_cap,json=pointsCap,proto3" json:"points_cap,omitempty" firestore:"pointsCap"`
	// If this field is not empty then it must contain the `continuation_token`
	// value returned by a previous call to this method.  Using this field causes
	// the method to return additional results from the previous method call.
	ContinuationToken string `protobuf:"bytes,9,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty" firestore:"continuationToken"`
}

func (m *ListTimeSeriesRequest) Reset() {
	*m = ListTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesRequest) ProtoMessage() {}

func (m *ListTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use ListTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ListTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesRequest) GetParent() *project.Name {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetFilter() *time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetAggregation() *common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetPagination() *common.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetView() common.TimeSeriesView {
	if m != nil {
		return m.View
	}
	return common.TimeSeriesView_FULL
}

func (m *ListTimeSeriesRequest) GetFieldMask() *time_serie.TimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListTimeSeriesRequest) GetPointsCap() int32 {
	if m != nil {
		return m.PointsCap
	}
	return int32(0)
}

func (m *ListTimeSeriesRequest) GetContinuationToken() string {
	if m != nil {
		return m.ContinuationToken
	}
	return ""
}

func (m *ListTimeSeriesRequest) SetParent(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *ListTimeSeriesRequest) SetFilter(fv *time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListTimeSeriesRequest"))
	}
	m.Filter = fv
}

func (m *ListTimeSeriesRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ListTimeSeriesRequest"))
	}
	m.Interval = fv
}

func (m *ListTimeSeriesRequest) SetAggregation(fv *common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "ListTimeSeriesRequest"))
	}
	m.Aggregation = fv
}

func (m *ListTimeSeriesRequest) SetPagination(fv *common.Pagination) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pagination", "ListTimeSeriesRequest"))
	}
	m.Pagination = fv
}

func (m *ListTimeSeriesRequest) SetView(fv common.TimeSeriesView) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListTimeSeriesRequest"))
	}
	m.View = fv
}

func (m *ListTimeSeriesRequest) SetFieldMask(fv *time_serie.TimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListTimeSeriesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListTimeSeriesRequest) SetPointsCap(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PointsCap", "ListTimeSeriesRequest"))
	}
	m.PointsCap = fv
}

func (m *ListTimeSeriesRequest) SetContinuationToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContinuationToken", "ListTimeSeriesRequest"))
	}
	m.ContinuationToken = fv
}

// Response message for method
// [ListTimeSeries][ntt.monitoring.v3.ListTimeSeries]
type ListTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// One or more time series that match the filter included in the request.
	TimeSeries []*time_serie.TimeSerie `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value.  To see the additional results,
	// use that value as `continuation_token` in the next call to this method.
	ContinuationToken string `protobuf:"bytes,2,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty" firestore:"continuationToken"`
	// Special time series with total amount of records available for pagination
	// by given time series key. Metric/Resource labels will contain "common"
	// values shared by all ranked time series. ValueType will be always INT64 and
	// metricKind GAUGE. In a sense, this time series is execution of
	// ListTimeSeries with Aggregation = {groupByFields: [<viewPaginatedLabels>],
	// REDUCER: REDUCE_COUNT} This field is only populated for paginated queries
	// (pagination in ListTimeSeries is specified).
	TotalPointCounters []*time_serie.TimeSerie `protobuf:"bytes,4,rep,name=total_point_counters,json=totalPointCounters,proto3" json:"total_point_counters,omitempty" firestore:"totalPointCounters"`
}

func (m *ListTimeSeriesResponse) Reset() {
	*m = ListTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesResponse) ProtoMessage() {}

func (m *ListTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use ListTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ListTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesResponse) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *ListTimeSeriesResponse) GetContinuationToken() string {
	if m != nil {
		return m.ContinuationToken
	}
	return ""
}

func (m *ListTimeSeriesResponse) GetTotalPointCounters() []*time_serie.TimeSerie {
	if m != nil {
		return m.TotalPointCounters
	}
	return nil
}

func (m *ListTimeSeriesResponse) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "ListTimeSeriesResponse"))
	}
	m.TimeSeries = fv
}

func (m *ListTimeSeriesResponse) SetContinuationToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContinuationToken", "ListTimeSeriesResponse"))
	}
	m.ContinuationToken = fv
}

func (m *ListTimeSeriesResponse) SetTotalPointCounters(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalPointCounters", "ListTimeSeriesResponse"))
	}
	m.TotalPointCounters = fv
}

// Request message for method
// [CreateTimeSeries][ntt.monitoring.v3.CreateTimeSeries]
type CreateTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The project on which to execute the request. The format is
	// `"projects/{project_id_or_number}"`.
	Parent *project.Name `protobuf:"bytes,3,opt,customtype=Name,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// The new data to be added to a list of time series.
	// Adds at most one data point to each of several time series.  The new data
	// point must be more recent than any other point in its time series.  Each
	// `TimeSeries` value must fully specify a unique time series by supplying
	// all label values for the metric and the monitored resource.
	TimeSeries []*time_serie.TimeSerie `protobuf:"bytes,2,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
}

func (m *CreateTimeSeriesRequest) Reset() {
	*m = CreateTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesRequest) ProtoMessage() {}

func (m *CreateTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP(), []int{2}
}

func (m *CreateTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesRequest) GetParent() *project.Name {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateTimeSeriesRequest) GetTimeSeries() []*time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *CreateTimeSeriesRequest) SetParent(fv *project.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *CreateTimeSeriesRequest) SetTimeSeries(fv []*time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "CreateTimeSeriesRequest"))
	}
	m.TimeSeries = fv
}

// Response message for method
// [CreateTimeSeries][ntt.monitoring.v3.CreateTimeSeries]
type CreateTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Time Serie keys indexed by Create position - present only when given
	// TimeSerie didn't use Key field
	TimeSerieKeys map[uint32][]byte `protobuf:"bytes,11,rep,name=time_serie_keys,json=timeSerieKeys,proto3" json:"time_serie_keys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"timeSerieKeys"`
	// Time series that failed to be created
	FailedTimeSeries []*CreateTimeSeriesError `protobuf:"bytes,50,rep,name=failed_time_series,json=failedTimeSeries,proto3" json:"failed_time_series,omitempty" firestore:"failedTimeSeries"`
}

func (m *CreateTimeSeriesResponse) Reset() {
	*m = CreateTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesResponse) ProtoMessage() {}

func (m *CreateTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP(), []int{3}
}

func (m *CreateTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesResponse) GetTimeSerieKeys() map[uint32][]byte {
	if m != nil {
		return m.TimeSerieKeys
	}
	return nil
}

func (m *CreateTimeSeriesResponse) GetFailedTimeSeries() []*CreateTimeSeriesError {
	if m != nil {
		return m.FailedTimeSeries
	}
	return nil
}

func (m *CreateTimeSeriesResponse) SetTimeSerieKeys(fv map[uint32][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSerieKeys", "CreateTimeSeriesResponse"))
	}
	m.TimeSerieKeys = fv
}

func (m *CreateTimeSeriesResponse) SetFailedTimeSeries(fv []*CreateTimeSeriesError) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FailedTimeSeries", "CreateTimeSeriesResponse"))
	}
	m.FailedTimeSeries = fv
}

// Describes the result of a failed request to write data to a time series.
type CreateTimeSeriesError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The time series, including the `Metric`, `MonitoredResource`,
	// and `Point`s (including timestamp and value) that resulted
	// in the error. This field provides all of the context that
	// would be needed to retry the operation.
	TimeSeries *time_serie.TimeSerie `protobuf:"bytes,1,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	// The status of the requested write operation.
	Status *rpc.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *CreateTimeSeriesError) Reset() {
	*m = CreateTimeSeriesError{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTimeSeriesError) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTimeSeriesError) ProtoMessage() {}

func (m *CreateTimeSeriesError) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTimeSeriesError) GotenMessage() {}

// Deprecated, Use CreateTimeSeriesError.ProtoReflect.Descriptor instead.
func (*CreateTimeSeriesError) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP(), []int{4}
}

func (m *CreateTimeSeriesError) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTimeSeriesError) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTimeSeriesError) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTimeSeriesError) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTimeSeriesError) GetTimeSeries() *time_serie.TimeSerie {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *CreateTimeSeriesError) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateTimeSeriesError) SetTimeSeries(fv *time_serie.TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "CreateTimeSeriesError"))
	}
	m.TimeSeries = fv
}

func (m *CreateTimeSeriesError) SetStatus(fv *rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "CreateTimeSeriesError"))
	}
	m.Status = fv
}

// ErrorDetails is used when one of the queried regions fails to produce
// results. It is used in execution_errors field (see subfield
// ntt.rpc.Status.details).
type ListTimeSeriesResponse_ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// region id which failed to give results.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
}

func (m *ListTimeSeriesResponse_ErrorDetails) Reset() {
	*m = ListTimeSeriesResponse_ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTimeSeriesResponse_ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTimeSeriesResponse_ErrorDetails) ProtoMessage() {}

func (m *ListTimeSeriesResponse_ErrorDetails) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTimeSeriesResponse_ErrorDetails) GotenMessage() {}

// Deprecated, Use ListTimeSeriesResponse_ErrorDetails.ProtoReflect.Descriptor instead.
func (*ListTimeSeriesResponse_ErrorDetails) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ListTimeSeriesResponse_ErrorDetails) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTimeSeriesResponse_ErrorDetails) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ListTimeSeriesResponse_ErrorDetails) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ListTimeSeriesResponse_ErrorDetails"))
	}
	m.RegionId = fv
}

var edgelq_monitoring_proto_v3_time_serie_custom_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x1a, 0x0b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x12, 0x08, 0x1a,
	0x04, 0x08, 0xa0, 0x8d, 0x06, 0x2a, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x61, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x83, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x4e, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x2b, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a,
	0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x9c, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x40,
	0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x7f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x80, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x14,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescData = edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDesc
)

func edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDescData
}

var edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var edgelq_monitoring_proto_v3_time_serie_custom_proto_goTypes = []interface{}{
	(*ListTimeSeriesRequest)(nil),               // 0: ntt.monitoring.v3.ListTimeSeriesRequest
	(*ListTimeSeriesResponse)(nil),              // 1: ntt.monitoring.v3.ListTimeSeriesResponse
	(*CreateTimeSeriesRequest)(nil),             // 2: ntt.monitoring.v3.CreateTimeSeriesRequest
	(*CreateTimeSeriesResponse)(nil),            // 3: ntt.monitoring.v3.CreateTimeSeriesResponse
	(*CreateTimeSeriesError)(nil),               // 4: ntt.monitoring.v3.CreateTimeSeriesError
	(*ListTimeSeriesResponse_ErrorDetails)(nil), // 5: ntt.monitoring.v3.ListTimeSeriesResponse.ErrorDetails
	nil,                                    // 6: ntt.monitoring.v3.CreateTimeSeriesResponse.TimeSerieKeysEntry
	(*common.TimeInterval)(nil),            // 7: ntt.monitoring.v3.TimeInterval
	(*common.Aggregation)(nil),             // 8: ntt.monitoring.v3.Aggregation
	(*common.Pagination)(nil),              // 9: ntt.monitoring.v3.Pagination
	(common.TimeSeriesView)(0),             // 10: ntt.monitoring.v3.TimeSeriesView
	(*time_serie.TimeSerie_FieldMask)(nil), // 11: ntt.monitoring.v3.TimeSerie_FieldMask
	(*time_serie.TimeSerie)(nil),           // 12: ntt.monitoring.v3.TimeSerie
	(*rpc.Status)(nil),                     // 13: ntt.rpc.Status
}
var edgelq_monitoring_proto_v3_time_serie_custom_proto_depIdxs = []int32{
	7,  // 0: ntt.monitoring.v3.ListTimeSeriesRequest.interval:type_name -> ntt.monitoring.v3.TimeInterval
	8,  // 1: ntt.monitoring.v3.ListTimeSeriesRequest.aggregation:type_name -> ntt.monitoring.v3.Aggregation
	9,  // 2: ntt.monitoring.v3.ListTimeSeriesRequest.pagination:type_name -> ntt.monitoring.v3.Pagination
	10, // 3: ntt.monitoring.v3.ListTimeSeriesRequest.view:type_name -> ntt.monitoring.v3.TimeSeriesView
	11, // 4: ntt.monitoring.v3.ListTimeSeriesRequest.field_mask:type_name -> ntt.monitoring.v3.TimeSerie_FieldMask
	12, // 5: ntt.monitoring.v3.ListTimeSeriesResponse.time_series:type_name -> ntt.monitoring.v3.TimeSerie
	12, // 6: ntt.monitoring.v3.ListTimeSeriesResponse.total_point_counters:type_name -> ntt.monitoring.v3.TimeSerie
	12, // 7: ntt.monitoring.v3.CreateTimeSeriesRequest.time_series:type_name -> ntt.monitoring.v3.TimeSerie
	6,  // 8: ntt.monitoring.v3.CreateTimeSeriesResponse.time_serie_keys:type_name -> ntt.monitoring.v3.CreateTimeSeriesResponse.TimeSerieKeysEntry
	4,  // 9: ntt.monitoring.v3.CreateTimeSeriesResponse.failed_time_series:type_name -> ntt.monitoring.v3.CreateTimeSeriesError
	12, // 10: ntt.monitoring.v3.CreateTimeSeriesError.time_series:type_name -> ntt.monitoring.v3.TimeSerie
	13, // 11: ntt.monitoring.v3.CreateTimeSeriesError.status:type_name -> ntt.rpc.Status
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_time_serie_custom_proto_init() }
func edgelq_monitoring_proto_v3_time_serie_custom_proto_init() {
	if edgelq_monitoring_proto_v3_time_serie_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeSeriesError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeSeriesResponse_ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v3_time_serie_custom_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_time_serie_custom_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v3_time_serie_custom_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_time_serie_custom_proto = out.File
	edgelq_monitoring_proto_v3_time_serie_custom_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_time_serie_custom_proto_goTypes = nil
	edgelq_monitoring_proto_v3_time_serie_custom_proto_depIdxs = nil
}
