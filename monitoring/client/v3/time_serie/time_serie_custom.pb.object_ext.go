// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/time_serie_custom.proto
// DO NOT EDIT!!!

package time_serie_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/time_serie"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &field_mask.FieldMask{}
)

func (o *ListTimeSeriesRequest) GotenObjectExt() {}

func (o *ListTimeSeriesRequest) MakeFullFieldMask() *ListTimeSeriesRequest_FieldMask {
	return FullListTimeSeriesRequest_FieldMask()
}

func (o *ListTimeSeriesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListTimeSeriesRequest_FieldMask()
}

func (o *ListTimeSeriesRequest) MakeDiffFieldMask(other *ListTimeSeriesRequest) *ListTimeSeriesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListTimeSeriesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListTimeSeriesRequest_FieldMask()
	}

	res := &ListTimeSeriesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorParent})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorFilter})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldSubPath{selector: ListTimeSeriesRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAggregation().MakeDiffFieldMask(other.GetAggregation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorAggregation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldSubPath{selector: ListTimeSeriesRequest_FieldPathSelectorAggregation, subPath: subpath})
			}
		}
	}
	if o.GetOrderBy() != other.GetOrderBy() {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorView})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &ListTimeSeriesRequest_FieldTerminalPath{selector: ListTimeSeriesRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *ListTimeSeriesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListTimeSeriesRequest))
}

func (o *ListTimeSeriesRequest) Clone() *ListTimeSeriesRequest {
	if o == nil {
		return nil
	}
	result := &ListTimeSeriesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &project.Name{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &time_serie.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Interval = o.Interval.Clone()
	result.Aggregation = o.Aggregation.Clone()
	result.OrderBy = o.OrderBy
	result.View = o.View
	result.FieldMask = proto.Clone(o.FieldMask).(*time_serie.TimeSerie_FieldMask)
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *ListTimeSeriesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListTimeSeriesRequest) Merge(source *ListTimeSeriesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &project.Name{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &time_serie.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(monitoring_common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	if source.GetAggregation() != nil {
		if o.Aggregation == nil {
			o.Aggregation = new(monitoring_common.Aggregation)
		}
		o.Aggregation.Merge(source.GetAggregation())
	}
	o.OrderBy = source.GetOrderBy()
	o.View = source.GetView()
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(time_serie.TimeSerie_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *ListTimeSeriesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListTimeSeriesRequest))
}

func (o *ListTimeSeriesResponse) GotenObjectExt() {}

func (o *ListTimeSeriesResponse) MakeFullFieldMask() *ListTimeSeriesResponse_FieldMask {
	return FullListTimeSeriesResponse_FieldMask()
}

func (o *ListTimeSeriesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListTimeSeriesResponse_FieldMask()
}

func (o *ListTimeSeriesResponse) MakeDiffFieldMask(other *ListTimeSeriesResponse) *ListTimeSeriesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListTimeSeriesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListTimeSeriesResponse_FieldMask()
	}

	res := &ListTimeSeriesResponse_FieldMask{}

	if len(o.GetTimeSeries()) == len(other.GetTimeSeries()) {
		for i, lValue := range o.GetTimeSeries() {
			rValue := other.GetTimeSeries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListTimeSeriesResponse_FieldTerminalPath{selector: ListTimeSeriesResponse_FieldPathSelectorTimeSeries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListTimeSeriesResponse_FieldTerminalPath{selector: ListTimeSeriesResponse_FieldPathSelectorTimeSeries})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &ListTimeSeriesResponse_FieldTerminalPath{selector: ListTimeSeriesResponse_FieldPathSelectorNextPageToken})
	}

	if len(o.GetExecutionErrors()) == len(other.GetExecutionErrors()) {
		for i, lValue := range o.GetExecutionErrors() {
			rValue := other.GetExecutionErrors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListTimeSeriesResponse_FieldTerminalPath{selector: ListTimeSeriesResponse_FieldPathSelectorExecutionErrors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListTimeSeriesResponse_FieldTerminalPath{selector: ListTimeSeriesResponse_FieldPathSelectorExecutionErrors})
	}
	return res
}

func (o *ListTimeSeriesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListTimeSeriesResponse))
}

func (o *ListTimeSeriesResponse) Clone() *ListTimeSeriesResponse {
	if o == nil {
		return nil
	}
	result := &ListTimeSeriesResponse{}
	result.TimeSeries = make([]*time_serie.TimeSerie, len(o.TimeSeries))
	for i, sourceValue := range o.TimeSeries {
		result.TimeSeries[i] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	result.ExecutionErrors = make([]*rpc.Status, len(o.ExecutionErrors))
	for i, sourceValue := range o.ExecutionErrors {
		result.ExecutionErrors[i] = sourceValue.Clone()
	}
	return result
}

func (o *ListTimeSeriesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListTimeSeriesResponse) Merge(source *ListTimeSeriesResponse) {
	for _, sourceValue := range source.GetTimeSeries() {
		exists := false
		for _, currentValue := range o.TimeSeries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *time_serie.TimeSerie
			if sourceValue != nil {
				newDstElement = new(time_serie.TimeSerie)
				newDstElement.Merge(sourceValue)
			}
			o.TimeSeries = append(o.TimeSeries, newDstElement)
		}
	}

	o.NextPageToken = source.GetNextPageToken()
	for _, sourceValue := range source.GetExecutionErrors() {
		exists := false
		for _, currentValue := range o.ExecutionErrors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *rpc.Status
			if sourceValue != nil {
				newDstElement = new(rpc.Status)
				newDstElement.Merge(sourceValue)
			}
			o.ExecutionErrors = append(o.ExecutionErrors, newDstElement)
		}
	}

}

func (o *ListTimeSeriesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListTimeSeriesResponse))
}

func (o *ListTimeSeriesResponse_ErrorDetails) GotenObjectExt() {}

func (o *ListTimeSeriesResponse_ErrorDetails) MakeFullFieldMask() *ListTimeSeriesResponse_ErrorDetails_FieldMask {
	return FullListTimeSeriesResponse_ErrorDetails_FieldMask()
}

func (o *ListTimeSeriesResponse_ErrorDetails) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListTimeSeriesResponse_ErrorDetails_FieldMask()
}

func (o *ListTimeSeriesResponse_ErrorDetails) MakeDiffFieldMask(other *ListTimeSeriesResponse_ErrorDetails) *ListTimeSeriesResponse_ErrorDetails_FieldMask {
	if o == nil && other == nil {
		return &ListTimeSeriesResponse_ErrorDetails_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListTimeSeriesResponse_ErrorDetails_FieldMask()
	}

	res := &ListTimeSeriesResponse_ErrorDetails_FieldMask{}
	if o.GetRegionId() != other.GetRegionId() {
		res.Paths = append(res.Paths, &ListTimeSeriesResponseErrorDetails_FieldTerminalPath{selector: ListTimeSeriesResponseErrorDetails_FieldPathSelectorRegionId})
	}
	return res
}

func (o *ListTimeSeriesResponse_ErrorDetails) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListTimeSeriesResponse_ErrorDetails))
}

func (o *ListTimeSeriesResponse_ErrorDetails) Clone() *ListTimeSeriesResponse_ErrorDetails {
	if o == nil {
		return nil
	}
	result := &ListTimeSeriesResponse_ErrorDetails{}
	result.RegionId = o.RegionId
	return result
}

func (o *ListTimeSeriesResponse_ErrorDetails) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListTimeSeriesResponse_ErrorDetails) Merge(source *ListTimeSeriesResponse_ErrorDetails) {
	o.RegionId = source.GetRegionId()
}

func (o *ListTimeSeriesResponse_ErrorDetails) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListTimeSeriesResponse_ErrorDetails))
}

func (o *CreateTimeSeriesRequest) GotenObjectExt() {}

func (o *CreateTimeSeriesRequest) MakeFullFieldMask() *CreateTimeSeriesRequest_FieldMask {
	return FullCreateTimeSeriesRequest_FieldMask()
}

func (o *CreateTimeSeriesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateTimeSeriesRequest_FieldMask()
}

func (o *CreateTimeSeriesRequest) MakeDiffFieldMask(other *CreateTimeSeriesRequest) *CreateTimeSeriesRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateTimeSeriesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateTimeSeriesRequest_FieldMask()
	}

	res := &CreateTimeSeriesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateTimeSeriesRequest_FieldTerminalPath{selector: CreateTimeSeriesRequest_FieldPathSelectorParent})
	}

	if len(o.GetTimeSeries()) == len(other.GetTimeSeries()) {
		for i, lValue := range o.GetTimeSeries() {
			rValue := other.GetTimeSeries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &CreateTimeSeriesRequest_FieldTerminalPath{selector: CreateTimeSeriesRequest_FieldPathSelectorTimeSeries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreateTimeSeriesRequest_FieldTerminalPath{selector: CreateTimeSeriesRequest_FieldPathSelectorTimeSeries})
	}
	return res
}

func (o *CreateTimeSeriesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateTimeSeriesRequest))
}

func (o *CreateTimeSeriesRequest) Clone() *CreateTimeSeriesRequest {
	if o == nil {
		return nil
	}
	result := &CreateTimeSeriesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &project.Name{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.TimeSeries = make([]*time_serie.TimeSerie, len(o.TimeSeries))
	for i, sourceValue := range o.TimeSeries {
		result.TimeSeries[i] = sourceValue.Clone()
	}
	return result
}

func (o *CreateTimeSeriesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateTimeSeriesRequest) Merge(source *CreateTimeSeriesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &project.Name{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetTimeSeries() {
		exists := false
		for _, currentValue := range o.TimeSeries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *time_serie.TimeSerie
			if sourceValue != nil {
				newDstElement = new(time_serie.TimeSerie)
				newDstElement.Merge(sourceValue)
			}
			o.TimeSeries = append(o.TimeSeries, newDstElement)
		}
	}

}

func (o *CreateTimeSeriesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateTimeSeriesRequest))
}

func (o *CreateTimeSeriesResponse) GotenObjectExt() {}

func (o *CreateTimeSeriesResponse) MakeFullFieldMask() *CreateTimeSeriesResponse_FieldMask {
	return FullCreateTimeSeriesResponse_FieldMask()
}

func (o *CreateTimeSeriesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateTimeSeriesResponse_FieldMask()
}

func (o *CreateTimeSeriesResponse) MakeDiffFieldMask(other *CreateTimeSeriesResponse) *CreateTimeSeriesResponse_FieldMask {
	if o == nil && other == nil {
		return &CreateTimeSeriesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateTimeSeriesResponse_FieldMask()
	}

	res := &CreateTimeSeriesResponse_FieldMask{}

	if len(o.GetTimeSerieKeys()) == len(other.GetTimeSerieKeys()) {
		for i, lValue := range o.GetTimeSerieKeys() {
			rValue := other.GetTimeSerieKeys()[i]
			if string(lValue) != string(rValue) {
				res.Paths = append(res.Paths, &CreateTimeSeriesResponse_FieldTerminalPath{selector: CreateTimeSeriesResponse_FieldPathSelectorTimeSerieKeys})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreateTimeSeriesResponse_FieldTerminalPath{selector: CreateTimeSeriesResponse_FieldPathSelectorTimeSerieKeys})
	}

	if len(o.GetFailedTimeSeries()) == len(other.GetFailedTimeSeries()) {
		for i, lValue := range o.GetFailedTimeSeries() {
			rValue := other.GetFailedTimeSeries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &CreateTimeSeriesResponse_FieldTerminalPath{selector: CreateTimeSeriesResponse_FieldPathSelectorFailedTimeSeries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreateTimeSeriesResponse_FieldTerminalPath{selector: CreateTimeSeriesResponse_FieldPathSelectorFailedTimeSeries})
	}
	return res
}

func (o *CreateTimeSeriesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateTimeSeriesResponse))
}

func (o *CreateTimeSeriesResponse) Clone() *CreateTimeSeriesResponse {
	if o == nil {
		return nil
	}
	result := &CreateTimeSeriesResponse{}
	result.TimeSerieKeys = map[uint32][]byte{}
	for key, sourceValue := range o.TimeSerieKeys {
		result.TimeSerieKeys[key] = sourceValue
	}
	result.FailedTimeSeries = make([]*CreateTimeSeriesError, len(o.FailedTimeSeries))
	for i, sourceValue := range o.FailedTimeSeries {
		result.FailedTimeSeries[i] = sourceValue.Clone()
	}
	return result
}

func (o *CreateTimeSeriesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateTimeSeriesResponse) Merge(source *CreateTimeSeriesResponse) {
	if source.GetTimeSerieKeys() != nil {
		if o.TimeSerieKeys == nil {
			o.TimeSerieKeys = make(map[uint32][]byte, len(source.GetTimeSerieKeys()))
		}
		for key, sourceValue := range source.GetTimeSerieKeys() {
			o.TimeSerieKeys[key] = sourceValue
		}
	}
	for _, sourceValue := range source.GetFailedTimeSeries() {
		exists := false
		for _, currentValue := range o.FailedTimeSeries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *CreateTimeSeriesError
			if sourceValue != nil {
				newDstElement = new(CreateTimeSeriesError)
				newDstElement.Merge(sourceValue)
			}
			o.FailedTimeSeries = append(o.FailedTimeSeries, newDstElement)
		}
	}

}

func (o *CreateTimeSeriesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateTimeSeriesResponse))
}

func (o *CreateTimeSeriesError) GotenObjectExt() {}

func (o *CreateTimeSeriesError) MakeFullFieldMask() *CreateTimeSeriesError_FieldMask {
	return FullCreateTimeSeriesError_FieldMask()
}

func (o *CreateTimeSeriesError) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateTimeSeriesError_FieldMask()
}

func (o *CreateTimeSeriesError) MakeDiffFieldMask(other *CreateTimeSeriesError) *CreateTimeSeriesError_FieldMask {
	if o == nil && other == nil {
		return &CreateTimeSeriesError_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateTimeSeriesError_FieldMask()
	}

	res := &CreateTimeSeriesError_FieldMask{}
	{
		subMask := o.GetTimeSeries().MakeDiffFieldMask(other.GetTimeSeries())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateTimeSeriesError_FieldTerminalPath{selector: CreateTimeSeriesError_FieldPathSelectorTimeSeries})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateTimeSeriesError_FieldSubPath{selector: CreateTimeSeriesError_FieldPathSelectorTimeSeries, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateTimeSeriesError_FieldTerminalPath{selector: CreateTimeSeriesError_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateTimeSeriesError_FieldSubPath{selector: CreateTimeSeriesError_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateTimeSeriesError) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateTimeSeriesError))
}

func (o *CreateTimeSeriesError) Clone() *CreateTimeSeriesError {
	if o == nil {
		return nil
	}
	result := &CreateTimeSeriesError{}
	result.TimeSeries = o.TimeSeries.Clone()
	result.Status = o.Status.Clone()
	return result
}

func (o *CreateTimeSeriesError) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateTimeSeriesError) Merge(source *CreateTimeSeriesError) {
	if source.GetTimeSeries() != nil {
		if o.TimeSeries == nil {
			o.TimeSeries = new(time_serie.TimeSerie)
		}
		o.TimeSeries.Merge(source.GetTimeSeries())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(rpc.Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *CreateTimeSeriesError) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateTimeSeriesError))
}
