// Code generated by protoc-gen-goten-client
// API: PhantomTimeSerieService
// DO NOT EDIT!!!

package phantom_time_serie_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	phantom_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/phantom_time_serie"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &phantom_time_serie.PhantomTimeSerie{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized              bool
	phantomTimeSerieServiceDescriptor   *PhantomTimeSerieServiceDescriptor
	getPhantomTimeSerieDescriptor       *GetPhantomTimeSerieDescriptor
	batchGetPhantomTimeSeriesDescriptor *BatchGetPhantomTimeSeriesDescriptor
	listPhantomTimeSeriesDescriptor     *ListPhantomTimeSeriesDescriptor
	watchPhantomTimeSerieDescriptor     *WatchPhantomTimeSerieDescriptor
	watchPhantomTimeSeriesDescriptor    *WatchPhantomTimeSeriesDescriptor
	createPhantomTimeSerieDescriptor    *CreatePhantomTimeSerieDescriptor
	deletePhantomTimeSerieDescriptor    *DeletePhantomTimeSerieDescriptor
)

type GetPhantomTimeSerieDescriptor struct{}

type GetPhantomTimeSerieDescriptorClientMsgHandle struct{}

type GetPhantomTimeSerieDescriptorServerMsgHandle struct{}

func (d *GetPhantomTimeSerieDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPhantomTimeSerieRequest{}
}

func (d *GetPhantomTimeSerieDescriptor) NewEmptyServerMsg() proto.Message {
	return &phantom_time_serie.PhantomTimeSerie{}
}

func (d *GetPhantomTimeSerieDescriptor) IsUnary() bool {
	return true
}

func (d *GetPhantomTimeSerieDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPhantomTimeSerieDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPhantomTimeSerieDescriptor) IsCollection() bool {
	return false
}

func (d *GetPhantomTimeSerieDescriptor) IsPlural() bool {
	return false
}

func (d *GetPhantomTimeSerieDescriptor) HasResource() bool {
	return true
}

func (d *GetPhantomTimeSerieDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPhantomTimeSerieDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPhantomTimeSerieDescriptor) GetMethodName() string {
	return "GetPhantomTimeSerie"
}

func (d *GetPhantomTimeSerieDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/GetPhantomTimeSerie"
}

func (d *GetPhantomTimeSerieDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *GetPhantomTimeSerieDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *GetPhantomTimeSerieDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *GetPhantomTimeSerieDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *GetPhantomTimeSerieDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *GetPhantomTimeSerieDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *GetPhantomTimeSerieDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPhantomTimeSerieDescriptorClientMsgHandle{}
}

func (d *GetPhantomTimeSerieDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPhantomTimeSerieDescriptorServerMsgHandle{}
}

func (h *GetPhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPhantomTimeSerieRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *GetPhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPhantomTimeSerieRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPhantomTimeSerieDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPhantomTimeSerieRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*phantom_time_serie.PhantomTimeSerie)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*phantom_time_serie.PhantomTimeSerie) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *GetPhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*phantom_time_serie.PhantomTimeSerie)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*phantom_time_serie.PhantomTimeSerie) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPhantomTimeSerieDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*phantom_time_serie.PhantomTimeSerie)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*phantom_time_serie.PhantomTimeSerie) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetPhantomTimeSerieDescriptor() *GetPhantomTimeSerieDescriptor {
	return getPhantomTimeSerieDescriptor
}

type BatchGetPhantomTimeSeriesDescriptor struct{}

type BatchGetPhantomTimeSeriesDescriptorClientMsgHandle struct{}

type BatchGetPhantomTimeSeriesDescriptorServerMsgHandle struct{}

func (d *BatchGetPhantomTimeSeriesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPhantomTimeSeriesRequest{}
}

func (d *BatchGetPhantomTimeSeriesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPhantomTimeSeriesResponse{}
}

func (d *BatchGetPhantomTimeSeriesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPhantomTimeSeriesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPhantomTimeSeriesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPhantomTimeSeriesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPhantomTimeSeriesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPhantomTimeSeriesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPhantomTimeSeriesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetMethodName() string {
	return "BatchGetPhantomTimeSeries"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/BatchGetPhantomTimeSeries"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPhantomTimeSeriesDescriptorClientMsgHandle{}
}

func (d *BatchGetPhantomTimeSeriesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPhantomTimeSeriesDescriptorServerMsgHandle{}
}

func (h *BatchGetPhantomTimeSeriesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPhantomTimeSeriesRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPhantomTimeSeriesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPhantomTimeSeriesRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(phantom_time_serie.PhantomTimeSerieNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (phantom_time_serie.PhantomTimeSerieNameList)(nil)
}

func (h *BatchGetPhantomTimeSeriesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPhantomTimeSeriesRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPhantomTimeSeriesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPhantomTimeSeriesResponse) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPhantomTimeSeriesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPhantomTimeSeriesResponse) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPhantomTimeSeries(); len(resources) > 0 {
			list := make(phantom_time_serie.PhantomTimeSerieNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (phantom_time_serie.PhantomTimeSerieNameList)(nil)
}

func (h *BatchGetPhantomTimeSeriesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPhantomTimeSeriesResponse) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetPhantomTimeSeriesDescriptor() *BatchGetPhantomTimeSeriesDescriptor {
	return batchGetPhantomTimeSeriesDescriptor
}

type ListPhantomTimeSeriesDescriptor struct{}

type ListPhantomTimeSeriesDescriptorClientMsgHandle struct{}

type ListPhantomTimeSeriesDescriptorServerMsgHandle struct{}

func (d *ListPhantomTimeSeriesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPhantomTimeSeriesRequest{}
}

func (d *ListPhantomTimeSeriesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPhantomTimeSeriesResponse{}
}

func (d *ListPhantomTimeSeriesDescriptor) IsUnary() bool {
	return true
}

func (d *ListPhantomTimeSeriesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPhantomTimeSeriesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPhantomTimeSeriesDescriptor) IsCollection() bool {
	return true
}

func (d *ListPhantomTimeSeriesDescriptor) IsPlural() bool {
	return true
}

func (d *ListPhantomTimeSeriesDescriptor) HasResource() bool {
	return true
}

func (d *ListPhantomTimeSeriesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPhantomTimeSeriesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPhantomTimeSeriesDescriptor) GetMethodName() string {
	return "ListPhantomTimeSeries"
}

func (d *ListPhantomTimeSeriesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/ListPhantomTimeSeries"
}

func (d *ListPhantomTimeSeriesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *ListPhantomTimeSeriesDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *ListPhantomTimeSeriesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *ListPhantomTimeSeriesDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *ListPhantomTimeSeriesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *ListPhantomTimeSeriesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *ListPhantomTimeSeriesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPhantomTimeSeriesDescriptorClientMsgHandle{}
}

func (d *ListPhantomTimeSeriesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPhantomTimeSeriesDescriptorServerMsgHandle{}
}

func (h *ListPhantomTimeSeriesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPhantomTimeSeriesRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPhantomTimeSeriesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPhantomTimeSeriesRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPhantomTimeSeriesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPhantomTimeSeriesRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*phantom_time_serie.ParentName)(nil)
}

func (h *ListPhantomTimeSeriesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPhantomTimeSeriesResponse) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPhantomTimeSeriesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPhantomTimeSeriesResponse) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPhantomTimeSeries(); len(resources) > 0 {
			list := make(phantom_time_serie.PhantomTimeSerieNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (phantom_time_serie.PhantomTimeSerieNameList)(nil)
}

func (h *ListPhantomTimeSeriesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPhantomTimeSeriesResponse) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListPhantomTimeSeriesDescriptor() *ListPhantomTimeSeriesDescriptor {
	return listPhantomTimeSeriesDescriptor
}

type WatchPhantomTimeSerieDescriptor struct{}

type WatchPhantomTimeSerieDescriptorClientMsgHandle struct{}

type WatchPhantomTimeSerieDescriptorServerMsgHandle struct{}

func (d *WatchPhantomTimeSerieDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPhantomTimeSerieRequest{}
}

func (d *WatchPhantomTimeSerieDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPhantomTimeSerieResponse{}
}

func (d *WatchPhantomTimeSerieDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPhantomTimeSerieDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPhantomTimeSerieDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPhantomTimeSerieDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPhantomTimeSerieDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPhantomTimeSerieDescriptor) HasResource() bool {
	return true
}

func (d *WatchPhantomTimeSerieDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPhantomTimeSerieDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPhantomTimeSerieDescriptor) GetMethodName() string {
	return "WatchPhantomTimeSerie"
}

func (d *WatchPhantomTimeSerieDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/WatchPhantomTimeSerie"
}

func (d *WatchPhantomTimeSerieDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchPhantomTimeSerieDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *WatchPhantomTimeSerieDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchPhantomTimeSerieDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchPhantomTimeSerieDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *WatchPhantomTimeSerieDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *WatchPhantomTimeSerieDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPhantomTimeSerieDescriptorClientMsgHandle{}
}

func (d *WatchPhantomTimeSerieDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPhantomTimeSerieDescriptorServerMsgHandle{}
}

func (h *WatchPhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPhantomTimeSerieRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *WatchPhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPhantomTimeSerieRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPhantomTimeSerieDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPhantomTimeSerieRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSerieResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPhantomTimeSerieResponse) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *phantom_time_serie.PhantomTimeSerieChange_Added_:
				return tResChange.Added.GetPhantomTimeSerie().GetName()
			case *phantom_time_serie.PhantomTimeSerieChange_Modified_:
				return tResChange.Modified.GetName()
			case *phantom_time_serie.PhantomTimeSerieChange_Removed_:
				return tResChange.Removed.GetName()
			case *phantom_time_serie.PhantomTimeSerieChange_Current_:
				return tResChange.Current.GetPhantomTimeSerie().GetName()
			}
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *WatchPhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPhantomTimeSerieResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPhantomTimeSerieResponse) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPhantomTimeSerieDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSerieResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPhantomTimeSerieResponse) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPhantomTimeSerieDescriptor() *WatchPhantomTimeSerieDescriptor {
	return watchPhantomTimeSerieDescriptor
}

type WatchPhantomTimeSeriesDescriptor struct{}

type WatchPhantomTimeSeriesDescriptorClientMsgHandle struct{}

type WatchPhantomTimeSeriesDescriptorServerMsgHandle struct{}

func (d *WatchPhantomTimeSeriesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPhantomTimeSeriesRequest{}
}

func (d *WatchPhantomTimeSeriesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPhantomTimeSeriesResponse{}
}

func (d *WatchPhantomTimeSeriesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPhantomTimeSeriesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPhantomTimeSeriesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPhantomTimeSeriesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPhantomTimeSeriesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPhantomTimeSeriesDescriptor) HasResource() bool {
	return true
}

func (d *WatchPhantomTimeSeriesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPhantomTimeSeriesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetMethodName() string {
	return "WatchPhantomTimeSeries"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/WatchPhantomTimeSeries"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *WatchPhantomTimeSeriesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *WatchPhantomTimeSeriesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *WatchPhantomTimeSeriesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPhantomTimeSeriesDescriptorClientMsgHandle{}
}

func (d *WatchPhantomTimeSeriesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPhantomTimeSeriesDescriptorServerMsgHandle{}
}

func (h *WatchPhantomTimeSeriesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPhantomTimeSeriesRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPhantomTimeSeriesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPhantomTimeSeriesRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPhantomTimeSeriesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSeriesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPhantomTimeSeriesRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*phantom_time_serie.ParentName)(nil)
}

func (h *WatchPhantomTimeSeriesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPhantomTimeSeriesResponse) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPhantomTimeSeriesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPhantomTimeSeriesResponse) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPhantomTimeSerieChanges(); len(resChanges) > 0 {
			list := make(phantom_time_serie.PhantomTimeSerieNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *phantom_time_serie.PhantomTimeSerieChange_Added_:
					list = append(list, tResChange.Added.GetPhantomTimeSerie().GetName())
				case *phantom_time_serie.PhantomTimeSerieChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *phantom_time_serie.PhantomTimeSerieChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *phantom_time_serie.PhantomTimeSerieChange_Current_:
					list = append(list, tResChange.Current.GetPhantomTimeSerie().GetName())
				}
			}
			return list
		}
	}
	return (phantom_time_serie.PhantomTimeSerieNameList)(nil)
}

func (h *WatchPhantomTimeSeriesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPhantomTimeSeriesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPhantomTimeSeriesResponse) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPhantomTimeSeriesDescriptor() *WatchPhantomTimeSeriesDescriptor {
	return watchPhantomTimeSeriesDescriptor
}

type CreatePhantomTimeSerieDescriptor struct{}

type CreatePhantomTimeSerieDescriptorClientMsgHandle struct{}

type CreatePhantomTimeSerieDescriptorServerMsgHandle struct{}

func (d *CreatePhantomTimeSerieDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePhantomTimeSerieRequest{}
}

func (d *CreatePhantomTimeSerieDescriptor) NewEmptyServerMsg() proto.Message {
	return &phantom_time_serie.PhantomTimeSerie{}
}

func (d *CreatePhantomTimeSerieDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePhantomTimeSerieDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePhantomTimeSerieDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePhantomTimeSerieDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePhantomTimeSerieDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePhantomTimeSerieDescriptor) HasResource() bool {
	return true
}

func (d *CreatePhantomTimeSerieDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePhantomTimeSerieDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePhantomTimeSerieDescriptor) GetMethodName() string {
	return "CreatePhantomTimeSerie"
}

func (d *CreatePhantomTimeSerieDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/CreatePhantomTimeSerie"
}

func (d *CreatePhantomTimeSerieDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *CreatePhantomTimeSerieDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *CreatePhantomTimeSerieDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *CreatePhantomTimeSerieDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *CreatePhantomTimeSerieDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *CreatePhantomTimeSerieDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *CreatePhantomTimeSerieDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePhantomTimeSerieDescriptorClientMsgHandle{}
}

func (d *CreatePhantomTimeSerieDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePhantomTimeSerieDescriptorServerMsgHandle{}
}

func (h *CreatePhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePhantomTimeSerieRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPhantomTimeSerie()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *CreatePhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePhantomTimeSerieRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePhantomTimeSerieDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePhantomTimeSerieRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*phantom_time_serie.ParentName)(nil)
}

func (h *CreatePhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*phantom_time_serie.PhantomTimeSerie)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*phantom_time_serie.PhantomTimeSerie) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *CreatePhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*phantom_time_serie.PhantomTimeSerie)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*phantom_time_serie.PhantomTimeSerie) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePhantomTimeSerieDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*phantom_time_serie.PhantomTimeSerie)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*phantom_time_serie.PhantomTimeSerie) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreatePhantomTimeSerieDescriptor() *CreatePhantomTimeSerieDescriptor {
	return createPhantomTimeSerieDescriptor
}

type DeletePhantomTimeSerieDescriptor struct{}

type DeletePhantomTimeSerieDescriptorClientMsgHandle struct{}

type DeletePhantomTimeSerieDescriptorServerMsgHandle struct{}

func (d *DeletePhantomTimeSerieDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePhantomTimeSerieRequest{}
}

func (d *DeletePhantomTimeSerieDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeletePhantomTimeSerieDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePhantomTimeSerieDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePhantomTimeSerieDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePhantomTimeSerieDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePhantomTimeSerieDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePhantomTimeSerieDescriptor) HasResource() bool {
	return true
}

func (d *DeletePhantomTimeSerieDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePhantomTimeSerieDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePhantomTimeSerieDescriptor) GetMethodName() string {
	return "DeletePhantomTimeSerie"
}

func (d *DeletePhantomTimeSerieDescriptor) GetFullMethodName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService/DeletePhantomTimeSerie"
}

func (d *DeletePhantomTimeSerieDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *DeletePhantomTimeSerieDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *DeletePhantomTimeSerieDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *DeletePhantomTimeSerieDescriptor) GetServiceVersion() string {
	return "v3"
}

func (d *DeletePhantomTimeSerieDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func (d *DeletePhantomTimeSerieDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return phantom_time_serie.GetDescriptor()
}

func (d *DeletePhantomTimeSerieDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePhantomTimeSerieDescriptorClientMsgHandle{}
}

func (d *DeletePhantomTimeSerieDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePhantomTimeSerieDescriptorServerMsgHandle{}
}

func (h *DeletePhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePhantomTimeSerieRequest) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*phantom_time_serie.Name)(nil)
}

func (h *DeletePhantomTimeSerieDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePhantomTimeSerieRequest) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePhantomTimeSerieDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePhantomTimeSerieRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePhantomTimeSerieRequest) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *phantom_time_serie.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePhantomTimeSerieDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*phantom_time_serie.Name
	})
	if ok {
		return phantom_time_serie.PhantomTimeSerieNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePhantomTimeSerieDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *phantom_time_serie.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeletePhantomTimeSerieDescriptor() *DeletePhantomTimeSerieDescriptor {
	return deletePhantomTimeSerieDescriptor
}

type PhantomTimeSerieServiceDescriptor struct{}

func (d *PhantomTimeSerieServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPhantomTimeSerieDescriptor,
		batchGetPhantomTimeSeriesDescriptor,
		listPhantomTimeSeriesDescriptor,
		watchPhantomTimeSerieDescriptor,
		watchPhantomTimeSeriesDescriptor,
		createPhantomTimeSerieDescriptor,
		deletePhantomTimeSerieDescriptor,
	}
}

func (d *PhantomTimeSerieServiceDescriptor) GetFullAPIName() string {
	return "/ntt.monitoring.v3.PhantomTimeSerieService"
}

func (d *PhantomTimeSerieServiceDescriptor) GetProtoPkgName() string {
	return "ntt.monitoring.v3"
}

func (d *PhantomTimeSerieServiceDescriptor) GetApiName() string {
	return "PhantomTimeSerieService"
}

func (d *PhantomTimeSerieServiceDescriptor) GetServiceDomain() string {
	return "monitoring.edgelq.com"
}

func (d *PhantomTimeSerieServiceDescriptor) GetServiceVersion() string {
	return "v3"
}

func GetPhantomTimeSerieServiceDescriptor() *PhantomTimeSerieServiceDescriptor {
	return phantomTimeSerieServiceDescriptor
}

func initDescriptors() {
	phantomTimeSerieServiceDescriptor = &PhantomTimeSerieServiceDescriptor{}
	getPhantomTimeSerieDescriptor = &GetPhantomTimeSerieDescriptor{}
	batchGetPhantomTimeSeriesDescriptor = &BatchGetPhantomTimeSeriesDescriptor{}
	listPhantomTimeSeriesDescriptor = &ListPhantomTimeSeriesDescriptor{}
	watchPhantomTimeSerieDescriptor = &WatchPhantomTimeSerieDescriptor{}
	watchPhantomTimeSeriesDescriptor = &WatchPhantomTimeSeriesDescriptor{}
	createPhantomTimeSerieDescriptor = &CreatePhantomTimeSerieDescriptor{}
	deletePhantomTimeSerieDescriptor = &DeletePhantomTimeSerieDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(phantomTimeSerieServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPhantomTimeSerieDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPhantomTimeSeriesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPhantomTimeSeriesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPhantomTimeSerieDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPhantomTimeSeriesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPhantomTimeSerieDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePhantomTimeSerieDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
