// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/phantom_time_serie_service.proto
// DO NOT EDIT!!!

package phantom_time_serie_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	phantom_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/phantom_time_serie"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &phantom_time_serie.PhantomTimeSerie{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetPhantomTimeSerie][ntt.monitoring.v3.GetPhantomTimeSerie]
type GetPhantomTimeSerieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.monitoring.v3.PhantomTimeSerie
	Name *phantom_time_serie.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,3,opt,customtype=PhantomTimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetPhantomTimeSerieRequest) Reset() {
	*m = GetPhantomTimeSerieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetPhantomTimeSerieRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetPhantomTimeSerieRequest) ProtoMessage() {}

func (m *GetPhantomTimeSerieRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetPhantomTimeSerieRequest) GotenMessage() {}

// Deprecated, Use GetPhantomTimeSerieRequest.ProtoReflect.Descriptor instead.
func (*GetPhantomTimeSerieRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetPhantomTimeSerieRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetPhantomTimeSerieRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetPhantomTimeSerieRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetPhantomTimeSerieRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetPhantomTimeSerieRequest) GetName() *phantom_time_serie.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetPhantomTimeSerieRequest) GetFieldMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetPhantomTimeSerieRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetPhantomTimeSerieRequest) SetName(fv *phantom_time_serie.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetPhantomTimeSerieRequest"))
	}
	m.Name = fv
}

func (m *GetPhantomTimeSerieRequest) SetFieldMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetPhantomTimeSerieRequest"))
	}
	m.FieldMask = fv
}

func (m *GetPhantomTimeSerieRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetPhantomTimeSerieRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetPhantomTimeSeries][ntt.monitoring.v3.BatchGetPhantomTimeSeries]
type BatchGetPhantomTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of PhantomTimeSeries
	Names []*phantom_time_serie.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,3,opt,customtype=PhantomTimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetPhantomTimeSeriesRequest) Reset() {
	*m = BatchGetPhantomTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetPhantomTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetPhantomTimeSeriesRequest) ProtoMessage() {}

func (m *BatchGetPhantomTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetPhantomTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use BatchGetPhantomTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetPhantomTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetPhantomTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetPhantomTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetPhantomTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetPhantomTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetPhantomTimeSeriesRequest) GetNames() []*phantom_time_serie.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetPhantomTimeSeriesRequest) GetFieldMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetPhantomTimeSeriesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetPhantomTimeSeriesRequest) SetNames(fv []*phantom_time_serie.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetPhantomTimeSeriesRequest"))
	}
	m.Names = fv
}

func (m *BatchGetPhantomTimeSeriesRequest) SetFieldMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetPhantomTimeSeriesRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetPhantomTimeSeriesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetPhantomTimeSeriesRequest"))
	}
	m.View = fv
}

// BatchGetPhantomTimeSeriesResponse
type BatchGetPhantomTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found PhantomTimeSeries
	PhantomTimeSeries []*phantom_time_serie.PhantomTimeSerie `protobuf:"bytes,1,rep,name=phantom_time_series,json=phantomTimeSeries,proto3" json:"phantom_time_series,omitempty" firestore:"phantomTimeSeries"`
	// list of not found PhantomTimeSeries
	Missing []*phantom_time_serie.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetPhantomTimeSeriesResponse) Reset() {
	*m = BatchGetPhantomTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetPhantomTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetPhantomTimeSeriesResponse) ProtoMessage() {}

func (m *BatchGetPhantomTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetPhantomTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use BatchGetPhantomTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetPhantomTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetPhantomTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetPhantomTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetPhantomTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetPhantomTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetPhantomTimeSeriesResponse) GetPhantomTimeSeries() []*phantom_time_serie.PhantomTimeSerie {
	if m != nil {
		return m.PhantomTimeSeries
	}
	return nil
}

func (m *BatchGetPhantomTimeSeriesResponse) GetMissing() []*phantom_time_serie.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetPhantomTimeSeriesResponse) SetPhantomTimeSeries(fv []*phantom_time_serie.PhantomTimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhantomTimeSeries", "BatchGetPhantomTimeSeriesResponse"))
	}
	m.PhantomTimeSeries = fv
}

func (m *BatchGetPhantomTimeSeriesResponse) SetMissing(fv []*phantom_time_serie.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetPhantomTimeSeriesResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListPhantomTimeSeries][ntt.monitoring.v3.ListPhantomTimeSeries]
type ListPhantomTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.monitoring.v3.PhantomTimeSerie
	Parent *phantom_time_serie.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer PhantomTimeSeries than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListPhantomTimeSeriesResponse.next_page_token][ntt.monitoring.v3.ListPhantomTimeSeriesResponse.next_page_token]
	PageToken *phantom_time_serie.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *phantom_time_serie.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *phantom_time_serie.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,6,opt,customtype=PhantomTimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListPhantomTimeSeriesRequest) Reset() {
	*m = ListPhantomTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListPhantomTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListPhantomTimeSeriesRequest) ProtoMessage() {}

func (m *ListPhantomTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListPhantomTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use ListPhantomTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*ListPhantomTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListPhantomTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListPhantomTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListPhantomTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListPhantomTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListPhantomTimeSeriesRequest) GetParent() *phantom_time_serie.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListPhantomTimeSeriesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListPhantomTimeSeriesRequest) GetPageToken() *phantom_time_serie.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListPhantomTimeSeriesRequest) GetOrderBy() *phantom_time_serie.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListPhantomTimeSeriesRequest) GetFilter() *phantom_time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListPhantomTimeSeriesRequest) GetFieldMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListPhantomTimeSeriesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListPhantomTimeSeriesRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListPhantomTimeSeriesRequest) SetParent(fv *phantom_time_serie.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListPhantomTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *ListPhantomTimeSeriesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListPhantomTimeSeriesRequest"))
	}
	m.PageSize = fv
}

func (m *ListPhantomTimeSeriesRequest) SetPageToken(fv *phantom_time_serie.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListPhantomTimeSeriesRequest"))
	}
	m.PageToken = fv
}

func (m *ListPhantomTimeSeriesRequest) SetOrderBy(fv *phantom_time_serie.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListPhantomTimeSeriesRequest"))
	}
	m.OrderBy = fv
}

func (m *ListPhantomTimeSeriesRequest) SetFilter(fv *phantom_time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListPhantomTimeSeriesRequest"))
	}
	m.Filter = fv
}

func (m *ListPhantomTimeSeriesRequest) SetFieldMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListPhantomTimeSeriesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListPhantomTimeSeriesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListPhantomTimeSeriesRequest"))
	}
	m.View = fv
}

func (m *ListPhantomTimeSeriesRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListPhantomTimeSeriesRequest"))
	}
	m.IncludePagingInfo = fv
}

// Request message for method
// [ListPhantomTimeSeries][ntt.monitoring.v3.ListPhantomTimeSeries]
type ListPhantomTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of PhantomTimeSeries
	PhantomTimeSeries []*phantom_time_serie.PhantomTimeSerie `protobuf:"bytes,1,rep,name=phantom_time_series,json=phantomTimeSeries,proto3" json:"phantom_time_series,omitempty" firestore:"phantomTimeSeries"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListPhantomTimeSeriesRequest.page_token][ntt.monitoring.v3.ListPhantomTimeSeriesRequest.page_token]
	PrevPageToken *phantom_time_serie.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListPhantomTimeSeriesRequest.page_token][ntt.monitoring.v3.ListPhantomTimeSeriesRequest.page_token]
	NextPageToken *phantom_time_serie.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total PhantomTimeSeries across all pages or 0, if there are no
	// items, paging info was not requested or there was an error while trying to
	// get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListPhantomTimeSeriesResponse) Reset() {
	*m = ListPhantomTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListPhantomTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListPhantomTimeSeriesResponse) ProtoMessage() {}

func (m *ListPhantomTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListPhantomTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use ListPhantomTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*ListPhantomTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListPhantomTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListPhantomTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListPhantomTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListPhantomTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListPhantomTimeSeriesResponse) GetPhantomTimeSeries() []*phantom_time_serie.PhantomTimeSerie {
	if m != nil {
		return m.PhantomTimeSeries
	}
	return nil
}

func (m *ListPhantomTimeSeriesResponse) GetPrevPageToken() *phantom_time_serie.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListPhantomTimeSeriesResponse) GetNextPageToken() *phantom_time_serie.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListPhantomTimeSeriesResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListPhantomTimeSeriesResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListPhantomTimeSeriesResponse) SetPhantomTimeSeries(fv []*phantom_time_serie.PhantomTimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhantomTimeSeries", "ListPhantomTimeSeriesResponse"))
	}
	m.PhantomTimeSeries = fv
}

func (m *ListPhantomTimeSeriesResponse) SetPrevPageToken(fv *phantom_time_serie.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListPhantomTimeSeriesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListPhantomTimeSeriesResponse) SetNextPageToken(fv *phantom_time_serie.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListPhantomTimeSeriesResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListPhantomTimeSeriesResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListPhantomTimeSeriesResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListPhantomTimeSeriesResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListPhantomTimeSeriesResponse"))
	}
	m.TotalResultsCount = fv
}

// Request message for method
// [WatchPhantomTimeSerie][ntt.monitoring.v3.WatchPhantomTimeSerie]
type WatchPhantomTimeSerieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.monitoring.v3.PhantomTimeSerie
	Name *phantom_time_serie.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,2,opt,customtype=PhantomTimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchPhantomTimeSerieRequest) Reset() {
	*m = WatchPhantomTimeSerieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPhantomTimeSerieRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPhantomTimeSerieRequest) ProtoMessage() {}

func (m *WatchPhantomTimeSerieRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPhantomTimeSerieRequest) GotenMessage() {}

// Deprecated, Use WatchPhantomTimeSerieRequest.ProtoReflect.Descriptor instead.
func (*WatchPhantomTimeSerieRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchPhantomTimeSerieRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPhantomTimeSerieRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPhantomTimeSerieRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPhantomTimeSerieRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPhantomTimeSerieRequest) GetName() *phantom_time_serie.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchPhantomTimeSerieRequest) GetFieldMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchPhantomTimeSerieRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchPhantomTimeSerieRequest) SetName(fv *phantom_time_serie.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchPhantomTimeSerieRequest"))
	}
	m.Name = fv
}

func (m *WatchPhantomTimeSerieRequest) SetFieldMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchPhantomTimeSerieRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchPhantomTimeSerieRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchPhantomTimeSerieRequest"))
	}
	m.View = fv
}

// WatchPhantomTimeSerieResponse
type WatchPhantomTimeSerieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *phantom_time_serie.PhantomTimeSerieChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchPhantomTimeSerieResponse) Reset() {
	*m = WatchPhantomTimeSerieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPhantomTimeSerieResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPhantomTimeSerieResponse) ProtoMessage() {}

func (m *WatchPhantomTimeSerieResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPhantomTimeSerieResponse) GotenMessage() {}

// Deprecated, Use WatchPhantomTimeSerieResponse.ProtoReflect.Descriptor instead.
func (*WatchPhantomTimeSerieResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchPhantomTimeSerieResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPhantomTimeSerieResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPhantomTimeSerieResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPhantomTimeSerieResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPhantomTimeSerieResponse) GetChange() *phantom_time_serie.PhantomTimeSerieChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchPhantomTimeSerieResponse) SetChange(fv *phantom_time_serie.PhantomTimeSerieChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchPhantomTimeSerieResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchPhantomTimeSeries][ntt.monitoring.v3.WatchPhantomTimeSeries]
type WatchPhantomTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.monitoring.v3.PhantomTimeSerie
	Parent *phantom_time_serie.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer PhantomTimeSeries than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *phantom_time_serie.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *phantom_time_serie.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *phantom_time_serie.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to PhantomTimeSerie that don't
	// affect any of masked fields won't be sent back.
	FieldMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,6,opt,customtype=PhantomTimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// PhantomTimeSerie that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchPhantomTimeSeriesRequest) Reset() {
	*m = WatchPhantomTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPhantomTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPhantomTimeSeriesRequest) ProtoMessage() {}

func (m *WatchPhantomTimeSeriesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPhantomTimeSeriesRequest) GotenMessage() {}

// Deprecated, Use WatchPhantomTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*WatchPhantomTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchPhantomTimeSeriesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPhantomTimeSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPhantomTimeSeriesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPhantomTimeSeriesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPhantomTimeSeriesRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchPhantomTimeSeriesRequest) GetParent() *phantom_time_serie.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchPhantomTimeSeriesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchPhantomTimeSeriesRequest) GetPageToken() *phantom_time_serie.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchPhantomTimeSeriesRequest) GetOrderBy() *phantom_time_serie.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchPhantomTimeSeriesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPhantomTimeSeriesRequest) GetStartingTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchPhantomTimeSeriesRequest) GetFilter() *phantom_time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchPhantomTimeSeriesRequest) GetFieldMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchPhantomTimeSeriesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchPhantomTimeSeriesRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchPhantomTimeSeriesRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchPhantomTimeSeriesRequest"))
	}
	m.Type = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetParent(fv *phantom_time_serie.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchPhantomTimeSeriesRequest"))
	}
	m.Parent = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchPhantomTimeSeriesRequest"))
	}
	m.PageSize = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetPageToken(fv *phantom_time_serie.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchPhantomTimeSeriesRequest"))
	}
	m.PageToken = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetOrderBy(fv *phantom_time_serie.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchPhantomTimeSeriesRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPhantomTimeSeriesRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetStartingTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchPhantomTimeSeriesRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetFilter(fv *phantom_time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchPhantomTimeSeriesRequest"))
	}
	m.Filter = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetFieldMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchPhantomTimeSeriesRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchPhantomTimeSeriesRequest"))
	}
	m.View = fv
}

func (m *WatchPhantomTimeSeriesRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchPhantomTimeSeriesRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchPhantomTimeSeriesResponse
type WatchPhantomTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of PhantomTimeSeries
	PhantomTimeSerieChanges []*phantom_time_serie.PhantomTimeSerieChange `protobuf:"bytes,2,rep,name=phantom_time_serie_changes,json=phantomTimeSerieChanges,proto3" json:"phantom_time_serie_changes,omitempty" firestore:"phantomTimeSerieChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All PhantomTimeSeries will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchPhantomTimeSeriesResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (PhantomTimeSeries will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchPhantomTimeSeriesResponse) Reset() {
	*m = WatchPhantomTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPhantomTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPhantomTimeSeriesResponse) ProtoMessage() {}

func (m *WatchPhantomTimeSeriesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPhantomTimeSeriesResponse) GotenMessage() {}

// Deprecated, Use WatchPhantomTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*WatchPhantomTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchPhantomTimeSeriesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPhantomTimeSeriesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPhantomTimeSeriesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPhantomTimeSeriesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPhantomTimeSeriesResponse) GetPhantomTimeSerieChanges() []*phantom_time_serie.PhantomTimeSerieChange {
	if m != nil {
		return m.PhantomTimeSerieChanges
	}
	return nil
}

func (m *WatchPhantomTimeSeriesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchPhantomTimeSeriesResponse) GetPageTokenChange() *WatchPhantomTimeSeriesResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchPhantomTimeSeriesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPhantomTimeSeriesResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchPhantomTimeSeriesResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchPhantomTimeSeriesResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchPhantomTimeSeriesResponse) SetPhantomTimeSerieChanges(fv []*phantom_time_serie.PhantomTimeSerieChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhantomTimeSerieChanges", "WatchPhantomTimeSeriesResponse"))
	}
	m.PhantomTimeSerieChanges = fv
}

func (m *WatchPhantomTimeSeriesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchPhantomTimeSeriesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchPhantomTimeSeriesResponse) SetPageTokenChange(fv *WatchPhantomTimeSeriesResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchPhantomTimeSeriesResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchPhantomTimeSeriesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPhantomTimeSeriesResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchPhantomTimeSeriesResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchPhantomTimeSeriesResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchPhantomTimeSeriesResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchPhantomTimeSeriesResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchPhantomTimeSeriesResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchPhantomTimeSeriesResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreatePhantomTimeSerie][ntt.monitoring.v3.CreatePhantomTimeSerie]
type CreatePhantomTimeSerieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.monitoring.v3.PhantomTimeSerie
	Parent *phantom_time_serie.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// PhantomTimeSerie resource body
	PhantomTimeSerie *phantom_time_serie.PhantomTimeSerie `protobuf:"bytes,2,opt,name=phantom_time_serie,json=phantomTimeSerie,proto3" json:"phantom_time_serie,omitempty" firestore:"phantomTimeSerie"`
}

func (m *CreatePhantomTimeSerieRequest) Reset() {
	*m = CreatePhantomTimeSerieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreatePhantomTimeSerieRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreatePhantomTimeSerieRequest) ProtoMessage() {}

func (m *CreatePhantomTimeSerieRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreatePhantomTimeSerieRequest) GotenMessage() {}

// Deprecated, Use CreatePhantomTimeSerieRequest.ProtoReflect.Descriptor instead.
func (*CreatePhantomTimeSerieRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreatePhantomTimeSerieRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreatePhantomTimeSerieRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreatePhantomTimeSerieRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreatePhantomTimeSerieRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreatePhantomTimeSerieRequest) GetParent() *phantom_time_serie.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreatePhantomTimeSerieRequest) GetPhantomTimeSerie() *phantom_time_serie.PhantomTimeSerie {
	if m != nil {
		return m.PhantomTimeSerie
	}
	return nil
}

func (m *CreatePhantomTimeSerieRequest) SetParent(fv *phantom_time_serie.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreatePhantomTimeSerieRequest"))
	}
	m.Parent = fv
}

func (m *CreatePhantomTimeSerieRequest) SetPhantomTimeSerie(fv *phantom_time_serie.PhantomTimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhantomTimeSerie", "CreatePhantomTimeSerieRequest"))
	}
	m.PhantomTimeSerie = fv
}

// Request message for method
// [UpdatePhantomTimeSerie][ntt.monitoring.v3.UpdatePhantomTimeSerie]
type UpdatePhantomTimeSerieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PhantomTimeSerie resource body
	PhantomTimeSerie *phantom_time_serie.PhantomTimeSerie `protobuf:"bytes,2,opt,name=phantom_time_serie,json=phantomTimeSerie,proto3" json:"phantom_time_serie,omitempty" firestore:"phantomTimeSerie"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,3,opt,customtype=PhantomTimeSerie_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdatePhantomTimeSerieRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdatePhantomTimeSerieRequest) Reset() {
	*m = UpdatePhantomTimeSerieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePhantomTimeSerieRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePhantomTimeSerieRequest) ProtoMessage() {}

func (m *UpdatePhantomTimeSerieRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePhantomTimeSerieRequest) GotenMessage() {}

// Deprecated, Use UpdatePhantomTimeSerieRequest.ProtoReflect.Descriptor instead.
func (*UpdatePhantomTimeSerieRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdatePhantomTimeSerieRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePhantomTimeSerieRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePhantomTimeSerieRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePhantomTimeSerieRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdatePhantomTimeSerieRequest) GetPhantomTimeSerie() *phantom_time_serie.PhantomTimeSerie {
	if m != nil {
		return m.PhantomTimeSerie
	}
	return nil
}

func (m *UpdatePhantomTimeSerieRequest) GetUpdateMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdatePhantomTimeSerieRequest) GetCas() *UpdatePhantomTimeSerieRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdatePhantomTimeSerieRequest) SetPhantomTimeSerie(fv *phantom_time_serie.PhantomTimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhantomTimeSerie", "UpdatePhantomTimeSerieRequest"))
	}
	m.PhantomTimeSerie = fv
}

func (m *UpdatePhantomTimeSerieRequest) SetUpdateMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdatePhantomTimeSerieRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdatePhantomTimeSerieRequest) SetCas(fv *UpdatePhantomTimeSerieRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdatePhantomTimeSerieRequest"))
	}
	m.Cas = fv
}

// Request message for method
// [DeletePhantomTimeSerie][ntt.monitoring.v3.DeletePhantomTimeSerie]
type DeletePhantomTimeSerieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.monitoring.v3.PhantomTimeSerie
	Name *phantom_time_serie.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeletePhantomTimeSerieRequest) Reset() {
	*m = DeletePhantomTimeSerieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeletePhantomTimeSerieRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeletePhantomTimeSerieRequest) ProtoMessage() {}

func (m *DeletePhantomTimeSerieRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeletePhantomTimeSerieRequest) GotenMessage() {}

// Deprecated, Use DeletePhantomTimeSerieRequest.ProtoReflect.Descriptor instead.
func (*DeletePhantomTimeSerieRequest) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeletePhantomTimeSerieRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeletePhantomTimeSerieRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeletePhantomTimeSerieRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeletePhantomTimeSerieRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeletePhantomTimeSerieRequest) GetName() *phantom_time_serie.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeletePhantomTimeSerieRequest) SetName(fv *phantom_time_serie.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeletePhantomTimeSerieRequest"))
	}
	m.Name = fv
}

type WatchPhantomTimeSeriesResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *phantom_time_serie.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *phantom_time_serie.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) Reset() {
	*m = WatchPhantomTimeSeriesResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPhantomTimeSeriesResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPhantomTimeSeriesResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchPhantomTimeSeriesResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchPhantomTimeSeriesResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) GetPrevPageToken() *phantom_time_serie.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) GetNextPageToken() *phantom_time_serie.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) SetPrevPageToken(fv *phantom_time_serie.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchPhantomTimeSeriesResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchPhantomTimeSeriesResponse_PageTokenChange) SetNextPageToken(fv *phantom_time_serie.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchPhantomTimeSeriesResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdatePhantomTimeSerieRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *phantom_time_serie.PhantomTimeSerie `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *phantom_time_serie.PhantomTimeSerie_FieldMask `protobuf:"bytes,2,opt,customtype=PhantomTimeSerie_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdatePhantomTimeSerieRequest_CAS) Reset() {
	*m = UpdatePhantomTimeSerieRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePhantomTimeSerieRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePhantomTimeSerieRequest_CAS) ProtoMessage() {}

func (m *UpdatePhantomTimeSerieRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePhantomTimeSerieRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdatePhantomTimeSerieRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdatePhantomTimeSerieRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdatePhantomTimeSerieRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePhantomTimeSerieRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePhantomTimeSerieRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePhantomTimeSerieRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdatePhantomTimeSerieRequest_CAS) GetConditionalState() *phantom_time_serie.PhantomTimeSerie {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdatePhantomTimeSerieRequest_CAS) GetFieldMask() *phantom_time_serie.PhantomTimeSerie_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdatePhantomTimeSerieRequest_CAS) SetConditionalState(fv *phantom_time_serie.PhantomTimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdatePhantomTimeSerieRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdatePhantomTimeSerieRequest_CAS) SetFieldMask(fv *phantom_time_serie.PhantomTimeSerie_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdatePhantomTimeSerieRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_monitoring_proto_v3_phantom_time_serie_service_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x33, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x10, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0xba,
	0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32,
	0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x22, 0xd3, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12,
	0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32,
	0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x13, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x52, 0x11, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x10,
	0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc8, 0x03, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x14,
	0x3a, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2,
	0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x2a, 0x12, 0x0a, 0x10, 0x50, 0x68,
	0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x1a, 0x12, 0x0a,
	0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32,
	0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x11, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x68,
	0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10,
	0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x1c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x10, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0xba,
	0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32,
	0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x22, 0x62, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x1d, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21,
	0x14, 0x42, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xb2, 0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x2a, 0x12, 0x0a, 0x10, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda,
	0x21, 0x14, 0x1a, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18,
	0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27,
	0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1a, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x6d, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x95,
	0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21,
	0x14, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2,
	0xda, 0x21, 0x14, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x14, 0x42, 0x12,
	0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5f,
	0x0a, 0x12, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x42,
	0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x10, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x3a,
	0x25, 0xc2, 0x85, 0x2c, 0x21, 0x32, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x17, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x04, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62,
	0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x10, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14,
	0x32, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x46, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53,
	0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x32, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x36, 0xc2, 0x85, 0x2c, 0x32, 0x32, 0x17, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x17, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0xe0, 0x13, 0x0a, 0x17, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x88, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x22, 0x9c, 0x01, 0x82,
	0xdb, 0x21, 0x27, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x33, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x28, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xad, 0x02, 0x0a, 0x19,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xdb, 0x21, 0x3e, 0x0a, 0x10, 0x50, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x32, 0x15, 0x12, 0x13, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x2e, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x25, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xb2, 0x02, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68,
	0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xdb, 0x21, 0x3d, 0x0a,
	0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x15, 0x12, 0x13, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x33, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x92, 0x97, 0x22,
	0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22, 0x00,
	0x12, 0xa7, 0x02, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x2f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01,
	0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2,
	0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x39, 0x2f, 0x76, 0x33,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0xc6, 0x02, 0x0a, 0x16, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x82, 0xdb, 0x21,
	0x45, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x1c, 0x12, 0x1a, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x22, 0x39, 0x2f, 0x76, 0x33, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22,
	0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22,
	0x00, 0x30, 0x01, 0x12, 0xc6, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x30,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x22, 0xd4, 0x01, 0x82, 0xdb, 0x21, 0x42, 0x0a, 0x10, 0x50, 0x68,
	0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x1c, 0x12, 0x12, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x1a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x12, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x22, 0x33,
	0x2f, 0x76, 0x33, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x92, 0x97, 0x22, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x04, 0x12, 0xde, 0x02, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x68,
	0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x22, 0xec,
	0x01, 0x82, 0xdb, 0x21, 0x38, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a,
	0x14, 0x12, 0x12, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21,
	0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x3a, 0x12, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x1a, 0x46, 0x2f,
	0x76, 0x33, 0x2f, 0x7b, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x3c, 0x0a, 0x15, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x04, 0x12, 0x83, 0x02,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x9e, 0x01, 0x82, 0xdb, 0x21, 0x22, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x6e, 0x74,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33, 0x2f, 0x76, 0x33, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0,
	0xd5, 0x22, 0x04, 0x1a, 0x32, 0xca, 0x41, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xb0, 0x03, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff,
	0xd0, 0x02, 0x5f, 0x0a, 0x19, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x42,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x8a, 0xff, 0xd0, 0x02, 0x5f, 0x0a, 0x19, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x33, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x33,
	0x42, 0x1c, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00,
	0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x33, 0x2f, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x3b, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84,
	0xd1, 0x02, 0x47, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescData = edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDesc
)

func edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDescData
}

var edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_goTypes = []interface{}{
	(*GetPhantomTimeSerieRequest)(nil),                     // 0: ntt.monitoring.v3.GetPhantomTimeSerieRequest
	(*BatchGetPhantomTimeSeriesRequest)(nil),               // 1: ntt.monitoring.v3.BatchGetPhantomTimeSeriesRequest
	(*BatchGetPhantomTimeSeriesResponse)(nil),              // 2: ntt.monitoring.v3.BatchGetPhantomTimeSeriesResponse
	(*ListPhantomTimeSeriesRequest)(nil),                   // 3: ntt.monitoring.v3.ListPhantomTimeSeriesRequest
	(*ListPhantomTimeSeriesResponse)(nil),                  // 4: ntt.monitoring.v3.ListPhantomTimeSeriesResponse
	(*WatchPhantomTimeSerieRequest)(nil),                   // 5: ntt.monitoring.v3.WatchPhantomTimeSerieRequest
	(*WatchPhantomTimeSerieResponse)(nil),                  // 6: ntt.monitoring.v3.WatchPhantomTimeSerieResponse
	(*WatchPhantomTimeSeriesRequest)(nil),                  // 7: ntt.monitoring.v3.WatchPhantomTimeSeriesRequest
	(*WatchPhantomTimeSeriesResponse)(nil),                 // 8: ntt.monitoring.v3.WatchPhantomTimeSeriesResponse
	(*CreatePhantomTimeSerieRequest)(nil),                  // 9: ntt.monitoring.v3.CreatePhantomTimeSerieRequest
	(*UpdatePhantomTimeSerieRequest)(nil),                  // 10: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest
	(*DeletePhantomTimeSerieRequest)(nil),                  // 11: ntt.monitoring.v3.DeletePhantomTimeSerieRequest
	(*WatchPhantomTimeSeriesResponse_PageTokenChange)(nil), // 12: ntt.monitoring.v3.WatchPhantomTimeSeriesResponse.PageTokenChange
	(*UpdatePhantomTimeSerieRequest_CAS)(nil),              // 13: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.CAS
	(*phantom_time_serie.PhantomTimeSerie_FieldMask)(nil),  // 14: ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	(view.View)(0), // 15: goten.view.View
	(*phantom_time_serie.PhantomTimeSerie)(nil),       // 16: ntt.monitoring.v3.PhantomTimeSerie
	(*phantom_time_serie.PhantomTimeSerieChange)(nil), // 17: ntt.monitoring.v3.PhantomTimeSerieChange
	(watch_type.WatchType)(0),                         // 18: goten.watch_type.WatchType
	(*timestamp.Timestamp)(nil),                       // 19: google.protobuf.Timestamp
	(*empty.Empty)(nil),                               // 20: google.protobuf.Empty
}
var edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_depIdxs = []int32{
	14, // 0: ntt.monitoring.v3.GetPhantomTimeSerieRequest.field_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	15, // 1: ntt.monitoring.v3.GetPhantomTimeSerieRequest.view:type_name -> goten.view.View
	14, // 2: ntt.monitoring.v3.BatchGetPhantomTimeSeriesRequest.field_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	15, // 3: ntt.monitoring.v3.BatchGetPhantomTimeSeriesRequest.view:type_name -> goten.view.View
	16, // 4: ntt.monitoring.v3.BatchGetPhantomTimeSeriesResponse.phantom_time_series:type_name -> ntt.monitoring.v3.PhantomTimeSerie
	14, // 5: ntt.monitoring.v3.ListPhantomTimeSeriesRequest.field_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	15, // 6: ntt.monitoring.v3.ListPhantomTimeSeriesRequest.view:type_name -> goten.view.View
	16, // 7: ntt.monitoring.v3.ListPhantomTimeSeriesResponse.phantom_time_series:type_name -> ntt.monitoring.v3.PhantomTimeSerie
	14, // 8: ntt.monitoring.v3.WatchPhantomTimeSerieRequest.field_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	15, // 9: ntt.monitoring.v3.WatchPhantomTimeSerieRequest.view:type_name -> goten.view.View
	17, // 10: ntt.monitoring.v3.WatchPhantomTimeSerieResponse.change:type_name -> ntt.monitoring.v3.PhantomTimeSerieChange
	18, // 11: ntt.monitoring.v3.WatchPhantomTimeSeriesRequest.type:type_name -> goten.watch_type.WatchType
	19, // 12: ntt.monitoring.v3.WatchPhantomTimeSeriesRequest.starting_time:type_name -> google.protobuf.Timestamp
	14, // 13: ntt.monitoring.v3.WatchPhantomTimeSeriesRequest.field_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	15, // 14: ntt.monitoring.v3.WatchPhantomTimeSeriesRequest.view:type_name -> goten.view.View
	17, // 15: ntt.monitoring.v3.WatchPhantomTimeSeriesResponse.phantom_time_serie_changes:type_name -> ntt.monitoring.v3.PhantomTimeSerieChange
	12, // 16: ntt.monitoring.v3.WatchPhantomTimeSeriesResponse.page_token_change:type_name -> ntt.monitoring.v3.WatchPhantomTimeSeriesResponse.PageTokenChange
	16, // 17: ntt.monitoring.v3.CreatePhantomTimeSerieRequest.phantom_time_serie:type_name -> ntt.monitoring.v3.PhantomTimeSerie
	16, // 18: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.phantom_time_serie:type_name -> ntt.monitoring.v3.PhantomTimeSerie
	14, // 19: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.update_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	13, // 20: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.cas:type_name -> ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.CAS
	16, // 21: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.CAS.conditional_state:type_name -> ntt.monitoring.v3.PhantomTimeSerie
	14, // 22: ntt.monitoring.v3.UpdatePhantomTimeSerieRequest.CAS.field_mask:type_name -> ntt.monitoring.v3.PhantomTimeSerie_FieldMask
	0,  // 23: ntt.monitoring.v3.PhantomTimeSerieService.GetPhantomTimeSerie:input_type -> ntt.monitoring.v3.GetPhantomTimeSerieRequest
	1,  // 24: ntt.monitoring.v3.PhantomTimeSerieService.BatchGetPhantomTimeSeries:input_type -> ntt.monitoring.v3.BatchGetPhantomTimeSeriesRequest
	3,  // 25: ntt.monitoring.v3.PhantomTimeSerieService.ListPhantomTimeSeries:input_type -> ntt.monitoring.v3.ListPhantomTimeSeriesRequest
	5,  // 26: ntt.monitoring.v3.PhantomTimeSerieService.WatchPhantomTimeSerie:input_type -> ntt.monitoring.v3.WatchPhantomTimeSerieRequest
	7,  // 27: ntt.monitoring.v3.PhantomTimeSerieService.WatchPhantomTimeSeries:input_type -> ntt.monitoring.v3.WatchPhantomTimeSeriesRequest
	9,  // 28: ntt.monitoring.v3.PhantomTimeSerieService.CreatePhantomTimeSerie:input_type -> ntt.monitoring.v3.CreatePhantomTimeSerieRequest
	10, // 29: ntt.monitoring.v3.PhantomTimeSerieService.UpdatePhantomTimeSerie:input_type -> ntt.monitoring.v3.UpdatePhantomTimeSerieRequest
	11, // 30: ntt.monitoring.v3.PhantomTimeSerieService.DeletePhantomTimeSerie:input_type -> ntt.monitoring.v3.DeletePhantomTimeSerieRequest
	16, // 31: ntt.monitoring.v3.PhantomTimeSerieService.GetPhantomTimeSerie:output_type -> ntt.monitoring.v3.PhantomTimeSerie
	2,  // 32: ntt.monitoring.v3.PhantomTimeSerieService.BatchGetPhantomTimeSeries:output_type -> ntt.monitoring.v3.BatchGetPhantomTimeSeriesResponse
	4,  // 33: ntt.monitoring.v3.PhantomTimeSerieService.ListPhantomTimeSeries:output_type -> ntt.monitoring.v3.ListPhantomTimeSeriesResponse
	6,  // 34: ntt.monitoring.v3.PhantomTimeSerieService.WatchPhantomTimeSerie:output_type -> ntt.monitoring.v3.WatchPhantomTimeSerieResponse
	8,  // 35: ntt.monitoring.v3.PhantomTimeSerieService.WatchPhantomTimeSeries:output_type -> ntt.monitoring.v3.WatchPhantomTimeSeriesResponse
	16, // 36: ntt.monitoring.v3.PhantomTimeSerieService.CreatePhantomTimeSerie:output_type -> ntt.monitoring.v3.PhantomTimeSerie
	16, // 37: ntt.monitoring.v3.PhantomTimeSerieService.UpdatePhantomTimeSerie:output_type -> ntt.monitoring.v3.PhantomTimeSerie
	20, // 38: ntt.monitoring.v3.PhantomTimeSerieService.DeletePhantomTimeSerie:output_type -> google.protobuf.Empty
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_init() }
func edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_init() {
	if edgelq_monitoring_proto_v3_phantom_time_serie_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhantomTimeSerieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetPhantomTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetPhantomTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPhantomTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPhantomTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPhantomTimeSerieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPhantomTimeSerieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPhantomTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPhantomTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePhantomTimeSerieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhantomTimeSerieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePhantomTimeSerieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPhantomTimeSeriesResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhantomTimeSerieRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto = out.File
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_goTypes = nil
	edgelq_monitoring_proto_v3_phantom_time_serie_service_proto_depIdxs = nil
}
