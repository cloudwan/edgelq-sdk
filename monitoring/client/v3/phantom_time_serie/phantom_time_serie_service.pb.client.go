// Code generated by protoc-gen-goten-client
// API: PhantomTimeSerieService
// DO NOT EDIT!!!

package phantom_time_serie_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	phantom_time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/phantom_time_serie"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &phantom_time_serie.PhantomTimeSerie{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PhantomTimeSerieServiceClient is the client API for PhantomTimeSerieService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhantomTimeSerieServiceClient interface {
	GetPhantomTimeSerie(ctx context.Context, in *GetPhantomTimeSerieRequest, opts ...grpc.CallOption) (*phantom_time_serie.PhantomTimeSerie, error)
	BatchGetPhantomTimeSeries(ctx context.Context, in *BatchGetPhantomTimeSeriesRequest, opts ...grpc.CallOption) (*BatchGetPhantomTimeSeriesResponse, error)
	ListPhantomTimeSeries(ctx context.Context, in *ListPhantomTimeSeriesRequest, opts ...grpc.CallOption) (*ListPhantomTimeSeriesResponse, error)
	WatchPhantomTimeSerie(ctx context.Context, in *WatchPhantomTimeSerieRequest, opts ...grpc.CallOption) (WatchPhantomTimeSerieClientStream, error)
	WatchPhantomTimeSeries(ctx context.Context, in *WatchPhantomTimeSeriesRequest, opts ...grpc.CallOption) (WatchPhantomTimeSeriesClientStream, error)
	CreatePhantomTimeSerie(ctx context.Context, in *CreatePhantomTimeSerieRequest, opts ...grpc.CallOption) (*phantom_time_serie.PhantomTimeSerie, error)
	UpdatePhantomTimeSerie(ctx context.Context, in *UpdatePhantomTimeSerieRequest, opts ...grpc.CallOption) (*phantom_time_serie.PhantomTimeSerie, error)
	DeletePhantomTimeSerie(ctx context.Context, in *DeletePhantomTimeSerieRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPhantomTimeSerieServiceClient(cc grpc.ClientConnInterface) PhantomTimeSerieServiceClient {
	return &client{cc}
}

func (c *client) GetPhantomTimeSerie(ctx context.Context, in *GetPhantomTimeSerieRequest, opts ...grpc.CallOption) (*phantom_time_serie.PhantomTimeSerie, error) {
	out := new(phantom_time_serie.PhantomTimeSerie)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.PhantomTimeSerieService/GetPhantomTimeSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPhantomTimeSeries(ctx context.Context, in *BatchGetPhantomTimeSeriesRequest, opts ...grpc.CallOption) (*BatchGetPhantomTimeSeriesResponse, error) {
	out := new(BatchGetPhantomTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.PhantomTimeSerieService/BatchGetPhantomTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPhantomTimeSeries(ctx context.Context, in *ListPhantomTimeSeriesRequest, opts ...grpc.CallOption) (*ListPhantomTimeSeriesResponse, error) {
	out := new(ListPhantomTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.PhantomTimeSerieService/ListPhantomTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPhantomTimeSerie(ctx context.Context, in *WatchPhantomTimeSerieRequest, opts ...grpc.CallOption) (WatchPhantomTimeSerieClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPhantomTimeSerie",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.PhantomTimeSerieService/WatchPhantomTimeSerie", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPhantomTimeSerieWatchPhantomTimeSerieClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPhantomTimeSerieClientStream interface {
	Recv() (*WatchPhantomTimeSerieResponse, error)
	grpc.ClientStream
}

type watchPhantomTimeSerieWatchPhantomTimeSerieClient struct {
	grpc.ClientStream
}

func (x *watchPhantomTimeSerieWatchPhantomTimeSerieClient) Recv() (*WatchPhantomTimeSerieResponse, error) {
	m := new(WatchPhantomTimeSerieResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPhantomTimeSeries(ctx context.Context, in *WatchPhantomTimeSeriesRequest, opts ...grpc.CallOption) (WatchPhantomTimeSeriesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPhantomTimeSeries",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.PhantomTimeSerieService/WatchPhantomTimeSeries", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPhantomTimeSeriesWatchPhantomTimeSeriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPhantomTimeSeriesClientStream interface {
	Recv() (*WatchPhantomTimeSeriesResponse, error)
	grpc.ClientStream
}

type watchPhantomTimeSeriesWatchPhantomTimeSeriesClient struct {
	grpc.ClientStream
}

func (x *watchPhantomTimeSeriesWatchPhantomTimeSeriesClient) Recv() (*WatchPhantomTimeSeriesResponse, error) {
	m := new(WatchPhantomTimeSeriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePhantomTimeSerie(ctx context.Context, in *CreatePhantomTimeSerieRequest, opts ...grpc.CallOption) (*phantom_time_serie.PhantomTimeSerie, error) {
	out := new(phantom_time_serie.PhantomTimeSerie)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.PhantomTimeSerieService/CreatePhantomTimeSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePhantomTimeSerie(ctx context.Context, in *UpdatePhantomTimeSerieRequest, opts ...grpc.CallOption) (*phantom_time_serie.PhantomTimeSerie, error) {
	out := new(phantom_time_serie.PhantomTimeSerie)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.PhantomTimeSerieService/UpdatePhantomTimeSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePhantomTimeSerie(ctx context.Context, in *DeletePhantomTimeSerieRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.PhantomTimeSerieService/DeletePhantomTimeSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
