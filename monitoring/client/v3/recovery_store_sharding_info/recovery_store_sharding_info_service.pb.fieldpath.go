// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/recovery_store_sharding_info_service.proto
// DO NOT EDIT!!!

package recovery_store_sharding_info_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	recovery_store_sharding_info "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/recovery_store_sharding_info"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &recovery_store_sharding_info.RecoveryStoreShardingInfo{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetRecoveryStoreShardingInfoRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetRecoveryStoreShardingInfoRequest_FieldPathSelector
	Get(source *GetRecoveryStoreShardingInfoRequest) []interface{}
	GetSingle(source *GetRecoveryStoreShardingInfoRequest) (interface{}, bool)
	ClearValue(item *GetRecoveryStoreShardingInfoRequest)

	// Those methods build corresponding GetRecoveryStoreShardingInfoRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetRecoveryStoreShardingInfoRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue
}

type GetRecoveryStoreShardingInfoRequest_FieldPathSelector int32

const (
	GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName      GetRecoveryStoreShardingInfoRequest_FieldPathSelector = 0
	GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask GetRecoveryStoreShardingInfoRequest_FieldPathSelector = 1
	GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView      GetRecoveryStoreShardingInfoRequest_FieldPathSelector = 2
)

func (s GetRecoveryStoreShardingInfoRequest_FieldPathSelector) String() string {
	switch s {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return "name"
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", s))
	}
}

func BuildGetRecoveryStoreShardingInfoRequest_FieldPath(fp gotenobject.RawFieldPath) (GetRecoveryStoreShardingInfoRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetRecoveryStoreShardingInfoRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetRecoveryStoreShardingInfoRequest", fp)
}

func ParseGetRecoveryStoreShardingInfoRequest_FieldPath(rawField string) (GetRecoveryStoreShardingInfoRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetRecoveryStoreShardingInfoRequest_FieldPath(fp)
}

func MustParseGetRecoveryStoreShardingInfoRequest_FieldPath(rawField string) GetRecoveryStoreShardingInfoRequest_FieldPath {
	fp, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetRecoveryStoreShardingInfoRequest_FieldTerminalPath struct {
	selector GetRecoveryStoreShardingInfoRequest_FieldPathSelector
}

var _ GetRecoveryStoreShardingInfoRequest_FieldPath = (*GetRecoveryStoreShardingInfoRequest_FieldTerminalPath)(nil)

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) Selector() GetRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetRecoveryStoreShardingInfoRequest
func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) Get(source *GetRecoveryStoreShardingInfoRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value pointed by specific field of from source GetRecoveryStoreShardingInfoRequest
func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingle(source *GetRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fp.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return (*recovery_store_sharding_info.Reference)(nil)
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValue(item *GetRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fp.selector {
		case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
			item.Name = nil
		case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName ||
		fp.selector == GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIValue(value interface{}) GetRecoveryStoreShardingInfoRequest_FieldPathValue {
	switch fp.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Reference)}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov := &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.Reference)}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return &GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{GetRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *GetRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetRecoveryStoreShardingInfoRequest_FieldPathValue allows storing values for GetRecoveryStoreShardingInfoRequest fields according to their type
type GetRecoveryStoreShardingInfoRequest_FieldPathValue interface {
	GetRecoveryStoreShardingInfoRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetRecoveryStoreShardingInfoRequest)
	CompareWith(*GetRecoveryStoreShardingInfoRequest) (cmp int, comparable bool)
}

func ParseGetRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) (GetRecoveryStoreShardingInfoRequest_FieldPathValue, error) {
	fp, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRecoveryStoreShardingInfoRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetRecoveryStoreShardingInfoRequest_FieldPathValue), nil
}

func MustParseGetRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) GetRecoveryStoreShardingInfoRequest_FieldPathValue {
	fpv, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue struct {
	GetRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ GetRecoveryStoreShardingInfoRequest_FieldPathValue = (*GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetRecoveryStoreShardingInfoRequest' as interface{}
func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsNameValue() (*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.Reference)
	return res, ok
}
func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsFieldMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetRecoveryStoreShardingInfoRequest
func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetTo(target **GetRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(GetRecoveryStoreShardingInfoRequest)
	}
	switch fpv.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*recovery_store_sharding_info.Reference)
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetRecoveryStoreShardingInfoRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue' with the value under path in 'GetRecoveryStoreShardingInfoRequest'.
func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWith(source *GetRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpv.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*recovery_store_sharding_info.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetRecoveryStoreShardingInfoRequest))
}

// GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetRecoveryStoreShardingInfoRequest according to their type
// Present only for array (repeated) types.
type GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetRecoveryStoreShardingInfoRequest_FieldPath
	ContainsValue(*GetRecoveryStoreShardingInfoRequest) bool
}

// ParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRecoveryStoreShardingInfoRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue), nil
}

func MustParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue struct {
	GetRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ GetRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue = (*GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetRecoveryStoreShardingInfoRequest as interface{}
func (fpaiv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetRecoveryStoreShardingInfoRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetRecoveryStoreShardingInfoRequest'
func (fpaiv *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetRecoveryStoreShardingInfoRequest) bool {
	slice := fpaiv.GetRecoveryStoreShardingInfoRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues allows storing slice of values for GetRecoveryStoreShardingInfoRequest fields according to their type
type GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetRecoveryStoreShardingInfoRequest_FieldPath
}

func ParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetRecoveryStoreShardingInfoRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues), nil
}

func MustParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues struct {
	GetRecoveryStoreShardingInfoRequest_FieldTerminalPath
	values interface{}
}

var _ GetRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.Reference) {
			values = append(values, v)
		}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	case GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.Reference)
	return res, ok
}
func (fpaov *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpaov *GetRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRecoveryStoreShardingInfosRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector
	Get(source *BatchGetRecoveryStoreShardingInfosRequest) []interface{}
	GetSingle(source *BatchGetRecoveryStoreShardingInfosRequest) (interface{}, bool)
	ClearValue(item *BatchGetRecoveryStoreShardingInfosRequest)

	// Those methods build corresponding BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue
}

type BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector int32

const (
	BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames     BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector = 0
	BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector = 1
	BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView      BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector = 2
)

func (s BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", s))
	}
}

func BuildBatchGetRecoveryStoreShardingInfosRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRecoveryStoreShardingInfosRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRecoveryStoreShardingInfosRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRecoveryStoreShardingInfosRequest", fp)
}

func ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPath(rawField string) (BatchGetRecoveryStoreShardingInfosRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRecoveryStoreShardingInfosRequest_FieldPath(fp)
}

func MustParseBatchGetRecoveryStoreShardingInfosRequest_FieldPath(rawField string) BatchGetRecoveryStoreShardingInfosRequest_FieldPath {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath struct {
	selector BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector
}

var _ BatchGetRecoveryStoreShardingInfosRequest_FieldPath = (*BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath)(nil)

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) Selector() BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRecoveryStoreShardingInfosRequest
func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) Get(source *BatchGetRecoveryStoreShardingInfosRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRecoveryStoreShardingInfosRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetRecoveryStoreShardingInfosRequest
func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetSingle(source *BatchGetRecoveryStoreShardingInfosRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRecoveryStoreShardingInfosRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		return ([]*recovery_store_sharding_info.Reference)(nil)
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) ClearValue(item *BatchGetRecoveryStoreShardingInfosRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRecoveryStoreShardingInfosRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.([]*recovery_store_sharding_info.Reference)}
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([][]*recovery_store_sharding_info.Reference)}
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue{BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue allows storing values for BatchGetRecoveryStoreShardingInfosRequest fields according to their type
type BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue interface {
	BatchGetRecoveryStoreShardingInfosRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRecoveryStoreShardingInfosRequest)
	CompareWith(*BatchGetRecoveryStoreShardingInfosRequest) (cmp int, comparable bool)
}

func ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr string) (BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRecoveryStoreShardingInfosRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue), nil
}

func MustParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr string) BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue {
	fpv, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue struct {
	BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRecoveryStoreShardingInfosRequest_FieldPathValue = (*BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRecoveryStoreShardingInfosRequest' as interface{}
func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsNamesValue() ([]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpv.value.([]*recovery_store_sharding_info.Reference)
	return res, ok
}
func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsFieldMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRecoveryStoreShardingInfosRequest
func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) SetTo(target **BatchGetRecoveryStoreShardingInfosRequest) {
	if *target == nil {
		*target = new(BatchGetRecoveryStoreShardingInfosRequest)
	}
	switch fpv.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*recovery_store_sharding_info.Reference)
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRecoveryStoreShardingInfosRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue' with the value under path in 'BatchGetRecoveryStoreShardingInfosRequest'.
func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) CompareWith(source *BatchGetRecoveryStoreShardingInfosRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRecoveryStoreShardingInfosRequest))
}

// BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRecoveryStoreShardingInfosRequest according to their type
// Present only for array (repeated) types.
type BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRecoveryStoreShardingInfosRequest_FieldPath
	ContainsValue(*BatchGetRecoveryStoreShardingInfosRequest) bool
}

// ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRecoveryStoreShardingInfosRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue = (*BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRecoveryStoreShardingInfosRequest as interface{}
func (fpaiv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaiv.value.(*recovery_store_sharding_info.Reference)
	return res, ok
}

func (fpaiv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRecoveryStoreShardingInfosRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRecoveryStoreShardingInfosRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRecoveryStoreShardingInfosRequest'
func (fpaiv *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRecoveryStoreShardingInfosRequest) bool {
	slice := fpaiv.BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetRecoveryStoreShardingInfosRequest fields according to their type
type BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRecoveryStoreShardingInfosRequest_FieldPath
}

func ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRecoveryStoreShardingInfosRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues = (*BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*recovery_store_sharding_info.Reference) {
			values = append(values, v)
		}
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	case BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaov.values.([][]*recovery_store_sharding_info.Reference)
	return res, ok
}
func (fpaov *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpaov *BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetRecoveryStoreShardingInfosResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector
	Get(source *BatchGetRecoveryStoreShardingInfosResponse) []interface{}
	GetSingle(source *BatchGetRecoveryStoreShardingInfosResponse) (interface{}, bool)
	ClearValue(item *BatchGetRecoveryStoreShardingInfosResponse)

	// Those methods build corresponding BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector int32

const (
	BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector = 0
	BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing                    BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector = 1
)

func (s BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return "recovery_store_sharding_infos"
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", s))
	}
}

func BuildBatchGetRecoveryStoreShardingInfosResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetRecoveryStoreShardingInfosResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetRecoveryStoreShardingInfosResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "recovery_store_sharding_infos", "recoveryStoreShardingInfos", "recovery-store-sharding-infos":
			return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos}, nil
		case "missing":
			return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "recovery_store_sharding_infos", "recoveryStoreShardingInfos", "recovery-store-sharding-infos":
			if subpath, err := recovery_store_sharding_info.BuildRecoveryStoreShardingInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetRecoveryStoreShardingInfosResponse", fp)
}

func ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPath(rawField string) (BatchGetRecoveryStoreShardingInfosResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetRecoveryStoreShardingInfosResponse_FieldPath(fp)
}

func MustParseBatchGetRecoveryStoreShardingInfosResponse_FieldPath(rawField string) BatchGetRecoveryStoreShardingInfosResponse_FieldPath {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath struct {
	selector BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPath = (*BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath)(nil)

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) Selector() BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetRecoveryStoreShardingInfosResponse
func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) Get(source *BatchGetRecoveryStoreShardingInfosResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
			for _, value := range source.GetRecoveryStoreShardingInfos() {
				values = append(values, value)
			}
		case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetRecoveryStoreShardingInfosResponse
func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetSingle(source *BatchGetRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		res := source.GetRecoveryStoreShardingInfos()
		return res, res != nil
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)(nil)
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		return ([]*recovery_store_sharding_info.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) ClearValue(item *BatchGetRecoveryStoreShardingInfosResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
			item.RecoveryStoreShardingInfos = nil
		case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.([]*recovery_store_sharding_info.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([][]*recovery_store_sharding_info.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue{BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath struct {
	selector BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPath = (*BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath)(nil)

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) Selector() BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) AsRecoveryStoreShardingInfosSubPath() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath, bool) {
	res, ok := fps.subPath.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetRecoveryStoreShardingInfosResponse
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) Get(source *BatchGetRecoveryStoreShardingInfosResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		for _, item := range source.GetRecoveryStoreShardingInfos() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// GetSingle returns value of selected field from source BatchGetRecoveryStoreShardingInfosResponse
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) GetSingle(source *BatchGetRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		if len(source.GetRecoveryStoreShardingInfos()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRecoveryStoreShardingInfos()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fps.selector))
	}
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) ClearValue(item *BatchGetRecoveryStoreShardingInfosResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
			for _, subItem := range item.RecoveryStoreShardingInfos {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) WithIValue(value interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue {
	return &BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	return &BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	return &BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue allows storing values for BatchGetRecoveryStoreShardingInfosResponse fields according to their type
type BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue interface {
	BatchGetRecoveryStoreShardingInfosResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetRecoveryStoreShardingInfosResponse)
	CompareWith(*BatchGetRecoveryStoreShardingInfosResponse) (cmp int, comparable bool)
}

func ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr string) (BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRecoveryStoreShardingInfosResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue), nil
}

func MustParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr string) BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue {
	fpv, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue struct {
	BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue = (*BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetRecoveryStoreShardingInfosResponse' as interface{}
func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsRecoveryStoreShardingInfosValue() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpv.value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsMissingValue() ([]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpv.value.([]*recovery_store_sharding_info.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetRecoveryStoreShardingInfosResponse
func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) SetTo(target **BatchGetRecoveryStoreShardingInfosResponse) {
	if *target == nil {
		*target = new(BatchGetRecoveryStoreShardingInfosResponse)
	}
	switch fpv.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		(*target).RecoveryStoreShardingInfos = fpv.value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*recovery_store_sharding_info.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRecoveryStoreShardingInfosResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue' with the value under path in 'BatchGetRecoveryStoreShardingInfosResponse'.
func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) CompareWith(source *BatchGetRecoveryStoreShardingInfosResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return 0, false
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue struct {
	BatchGetRecoveryStoreShardingInfosResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPathValue = (*BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue) AsRecoveryStoreShardingInfosPathValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue) SetTo(target **BatchGetRecoveryStoreShardingInfosResponse) {
	if *target == nil {
		*target = new(BatchGetRecoveryStoreShardingInfosResponse)
	}
	switch fpvs.Selector() {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetRecoveryStoreShardingInfosResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue) CompareWith(source *BatchGetRecoveryStoreShardingInfosResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetRecoveryStoreShardingInfosResponse according to their type
// Present only for array (repeated) types.
type BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetRecoveryStoreShardingInfosResponse_FieldPath
	ContainsValue(*BatchGetRecoveryStoreShardingInfosResponse) bool
}

// ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRecoveryStoreShardingInfosResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue = (*BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetRecoveryStoreShardingInfosResponse as interface{}
func (fpaiv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) AsRecoveryStoreShardingInfosItemValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaiv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpaiv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaiv.value.(*recovery_store_sharding_info.Reference)
	return res, ok
}

func (fpaiv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRecoveryStoreShardingInfosResponse'
func (fpaiv *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetRecoveryStoreShardingInfosResponse) bool {
	slice := fpaiv.BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue struct {
	BatchGetRecoveryStoreShardingInfosResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) AsRecoveryStoreShardingInfosPathItemValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetRecoveryStoreShardingInfosResponse'
func (fpaivs *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetRecoveryStoreShardingInfosResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetRecoveryStoreShardingInfosResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetRecoveryStoreShardingInfosResponse fields according to their type
type BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetRecoveryStoreShardingInfosResponse_FieldPath
}

func ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetRecoveryStoreShardingInfosResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues = (*BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		for _, v := range fpaov.values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
			values = append(values, v)
		}
	case BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*recovery_store_sharding_info.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsRecoveryStoreShardingInfosArrayOfValues() ([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaov.values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpaov *BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaov.values.([][]*recovery_store_sharding_info.Reference)
	return res, ok
}

type BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues struct {
	BatchGetRecoveryStoreShardingInfosResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues = (*BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues) AsRecoveryStoreShardingInfosPathArrayOfValues() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRecoveryStoreShardingInfosRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRecoveryStoreShardingInfosRequest_FieldPathSelector
	Get(source *ListRecoveryStoreShardingInfosRequest) []interface{}
	GetSingle(source *ListRecoveryStoreShardingInfosRequest) (interface{}, bool)
	ClearValue(item *ListRecoveryStoreShardingInfosRequest)

	// Those methods build corresponding ListRecoveryStoreShardingInfosRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRecoveryStoreShardingInfosRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue
}

type ListRecoveryStoreShardingInfosRequest_FieldPathSelector int32

const (
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent            ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 0
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize          ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 1
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken         ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 2
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy           ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 3
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter            ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 4
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask         ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 5
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView              ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 6
	ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo ListRecoveryStoreShardingInfosRequest_FieldPathSelector = 7
)

func (s ListRecoveryStoreShardingInfosRequest_FieldPathSelector) String() string {
	switch s {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return "parent"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return "filter"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return "view"
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", s))
	}
}

func BuildListRecoveryStoreShardingInfosRequest_FieldPath(fp gotenobject.RawFieldPath) (ListRecoveryStoreShardingInfosRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRecoveryStoreShardingInfosRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRecoveryStoreShardingInfosRequest", fp)
}

func ParseListRecoveryStoreShardingInfosRequest_FieldPath(rawField string) (ListRecoveryStoreShardingInfosRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRecoveryStoreShardingInfosRequest_FieldPath(fp)
}

func MustParseListRecoveryStoreShardingInfosRequest_FieldPath(rawField string) ListRecoveryStoreShardingInfosRequest_FieldPath {
	fp, err := ParseListRecoveryStoreShardingInfosRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRecoveryStoreShardingInfosRequest_FieldTerminalPath struct {
	selector ListRecoveryStoreShardingInfosRequest_FieldPathSelector
}

var _ ListRecoveryStoreShardingInfosRequest_FieldPath = (*ListRecoveryStoreShardingInfosRequest_FieldTerminalPath)(nil)

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) Selector() ListRecoveryStoreShardingInfosRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRecoveryStoreShardingInfosRequest
func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) Get(source *ListRecoveryStoreShardingInfosRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRecoveryStoreShardingInfosRequest))
}

// GetSingle returns value pointed by specific field of from source ListRecoveryStoreShardingInfosRequest
func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetSingle(source *ListRecoveryStoreShardingInfosRequest) (interface{}, bool) {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRecoveryStoreShardingInfosRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return (*recovery_store_sharding_info.ParentName)(nil)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return (*recovery_store_sharding_info.PagerCursor)(nil)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return (*recovery_store_sharding_info.OrderBy)(nil)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return (*recovery_store_sharding_info.Filter)(nil)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) ClearValue(item *ListRecoveryStoreShardingInfosRequest) {
	if item != nil {
		switch fp.selector {
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
		}
	}
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRecoveryStoreShardingInfosRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView ||
		fp.selector == ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIValue(value interface{}) ListRecoveryStoreShardingInfosRequest_FieldPathValue {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.ParentName)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.PagerCursor)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.OrderBy)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Filter)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues {
	fpaov := &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.ParentName)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.PagerCursor)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.OrderBy)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.Filter)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		return &ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListRecoveryStoreShardingInfosRequest_FieldPathValue allows storing values for ListRecoveryStoreShardingInfosRequest fields according to their type
type ListRecoveryStoreShardingInfosRequest_FieldPathValue interface {
	ListRecoveryStoreShardingInfosRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRecoveryStoreShardingInfosRequest)
	CompareWith(*ListRecoveryStoreShardingInfosRequest) (cmp int, comparable bool)
}

func ParseListRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr string) (ListRecoveryStoreShardingInfosRequest_FieldPathValue, error) {
	fp, err := ParseListRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRecoveryStoreShardingInfosRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRecoveryStoreShardingInfosRequest_FieldPathValue), nil
}

func MustParseListRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr string) ListRecoveryStoreShardingInfosRequest_FieldPathValue {
	fpv, err := ParseListRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue struct {
	ListRecoveryStoreShardingInfosRequest_FieldTerminalPath
	value interface{}
}

var _ ListRecoveryStoreShardingInfosRequest_FieldPathValue = (*ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRecoveryStoreShardingInfosRequest' as interface{}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsParentValue() (*recovery_store_sharding_info.ParentName, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.ParentName)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsPageTokenValue() (*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsOrderByValue() (*recovery_store_sharding_info.OrderBy, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.OrderBy)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsFilterValue() (*recovery_store_sharding_info.Filter, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.Filter)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsFieldMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListRecoveryStoreShardingInfosRequest
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) SetTo(target **ListRecoveryStoreShardingInfosRequest) {
	if *target == nil {
		*target = new(ListRecoveryStoreShardingInfosRequest)
	}
	switch fpv.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*recovery_store_sharding_info.ParentName)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*recovery_store_sharding_info.PagerCursor)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*recovery_store_sharding_info.OrderBy)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*recovery_store_sharding_info.Filter)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fpv.selector))
	}
}

func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRecoveryStoreShardingInfosRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue' with the value under path in 'ListRecoveryStoreShardingInfosRequest'.
func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) CompareWith(source *ListRecoveryStoreShardingInfosRequest) (int, bool) {
	switch fpv.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*recovery_store_sharding_info.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return 0, false
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosRequest: %d", fpv.selector))
	}
}

func (fpv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRecoveryStoreShardingInfosRequest))
}

// ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRecoveryStoreShardingInfosRequest according to their type
// Present only for array (repeated) types.
type ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRecoveryStoreShardingInfosRequest_FieldPath
	ContainsValue(*ListRecoveryStoreShardingInfosRequest) bool
}

// ParseListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRecoveryStoreShardingInfosRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue), nil
}

func MustParseListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue struct {
	ListRecoveryStoreShardingInfosRequest_FieldTerminalPath
	value interface{}
}

var _ ListRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue = (*ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRecoveryStoreShardingInfosRequest as interface{}
func (fpaiv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListRecoveryStoreShardingInfosRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRecoveryStoreShardingInfosRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRecoveryStoreShardingInfosRequest'
func (fpaiv *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRecoveryStoreShardingInfosRequest) bool {
	slice := fpaiv.ListRecoveryStoreShardingInfosRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues allows storing slice of values for ListRecoveryStoreShardingInfosRequest fields according to their type
type ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRecoveryStoreShardingInfosRequest_FieldPath
}

func ParseListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRecoveryStoreShardingInfosRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues), nil
}

func MustParseListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues struct {
	ListRecoveryStoreShardingInfosRequest_FieldTerminalPath
	values interface{}
}

var _ ListRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues = (*ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.ParentName) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.PagerCursor) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.OrderBy) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.Filter) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*recovery_store_sharding_info.ParentName, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.ParentName)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*recovery_store_sharding_info.OrderBy, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.OrderBy)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*recovery_store_sharding_info.Filter, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.Filter)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListRecoveryStoreShardingInfosResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListRecoveryStoreShardingInfosResponse_FieldPathSelector
	Get(source *ListRecoveryStoreShardingInfosResponse) []interface{}
	GetSingle(source *ListRecoveryStoreShardingInfosResponse) (interface{}, bool)
	ClearValue(item *ListRecoveryStoreShardingInfosResponse)

	// Those methods build corresponding ListRecoveryStoreShardingInfosResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue
}

type ListRecoveryStoreShardingInfosResponse_FieldPathSelector int32

const (
	ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos ListRecoveryStoreShardingInfosResponse_FieldPathSelector = 0
	ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken              ListRecoveryStoreShardingInfosResponse_FieldPathSelector = 1
	ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken              ListRecoveryStoreShardingInfosResponse_FieldPathSelector = 2
	ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset              ListRecoveryStoreShardingInfosResponse_FieldPathSelector = 3
	ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount          ListRecoveryStoreShardingInfosResponse_FieldPathSelector = 4
)

func (s ListRecoveryStoreShardingInfosResponse_FieldPathSelector) String() string {
	switch s {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return "recovery_store_sharding_infos"
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", s))
	}
}

func BuildListRecoveryStoreShardingInfosResponse_FieldPath(fp gotenobject.RawFieldPath) (ListRecoveryStoreShardingInfosResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListRecoveryStoreShardingInfosResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "recovery_store_sharding_infos", "recoveryStoreShardingInfos", "recovery-store-sharding-infos":
			return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "recovery_store_sharding_infos", "recoveryStoreShardingInfos", "recovery-store-sharding-infos":
			if subpath, err := recovery_store_sharding_info.BuildRecoveryStoreShardingInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListRecoveryStoreShardingInfosResponse_FieldSubPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListRecoveryStoreShardingInfosResponse", fp)
}

func ParseListRecoveryStoreShardingInfosResponse_FieldPath(rawField string) (ListRecoveryStoreShardingInfosResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListRecoveryStoreShardingInfosResponse_FieldPath(fp)
}

func MustParseListRecoveryStoreShardingInfosResponse_FieldPath(rawField string) ListRecoveryStoreShardingInfosResponse_FieldPath {
	fp, err := ParseListRecoveryStoreShardingInfosResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListRecoveryStoreShardingInfosResponse_FieldTerminalPath struct {
	selector ListRecoveryStoreShardingInfosResponse_FieldPathSelector
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPath = (*ListRecoveryStoreShardingInfosResponse_FieldTerminalPath)(nil)

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) Selector() ListRecoveryStoreShardingInfosResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListRecoveryStoreShardingInfosResponse
func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) Get(source *ListRecoveryStoreShardingInfosResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
			for _, value := range source.GetRecoveryStoreShardingInfos() {
				values = append(values, value)
			}
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListRecoveryStoreShardingInfosResponse))
}

// GetSingle returns value pointed by specific field of from source ListRecoveryStoreShardingInfosResponse
func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetSingle(source *ListRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		res := source.GetRecoveryStoreShardingInfos()
		return res, res != nil
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListRecoveryStoreShardingInfosResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)(nil)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		return (*recovery_store_sharding_info.PagerCursor)(nil)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		return (*recovery_store_sharding_info.PagerCursor)(nil)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) ClearValue(item *ListRecoveryStoreShardingInfosResponse) {
	if item != nil {
		switch fp.selector {
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
			item.RecoveryStoreShardingInfos = nil
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
		}
	}
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListRecoveryStoreShardingInfosResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIValue(value interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathValue {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.PagerCursor)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.PagerCursor)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	fpaov := &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.PagerCursor)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.PagerCursor)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return &ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue{ListRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *ListRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListRecoveryStoreShardingInfosResponse_FieldSubPath struct {
	selector ListRecoveryStoreShardingInfosResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPath = (*ListRecoveryStoreShardingInfosResponse_FieldSubPath)(nil)

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) Selector() ListRecoveryStoreShardingInfosResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) AsRecoveryStoreShardingInfosSubPath() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath, bool) {
	res, ok := fps.subPath.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListRecoveryStoreShardingInfosResponse
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) Get(source *ListRecoveryStoreShardingInfosResponse) (values []interface{}) {
	switch fps.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		for _, item := range source.GetRecoveryStoreShardingInfos() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fps.selector))
	}
	return
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListRecoveryStoreShardingInfosResponse))
}

// GetSingle returns value of selected field from source ListRecoveryStoreShardingInfosResponse
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) GetSingle(source *ListRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	switch fps.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		if len(source.GetRecoveryStoreShardingInfos()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRecoveryStoreShardingInfos()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fps.selector))
	}
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListRecoveryStoreShardingInfosResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) ClearValue(item *ListRecoveryStoreShardingInfosResponse) {
	if item != nil {
		switch fps.selector {
		case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
			for _, subItem := range item.RecoveryStoreShardingInfos {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fps.selector))
		}
	}
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListRecoveryStoreShardingInfosResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) WithIValue(value interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathValue {
	return &ListRecoveryStoreShardingInfosResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	return &ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	return &ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListRecoveryStoreShardingInfosResponse_FieldPathValue allows storing values for ListRecoveryStoreShardingInfosResponse fields according to their type
type ListRecoveryStoreShardingInfosResponse_FieldPathValue interface {
	ListRecoveryStoreShardingInfosResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListRecoveryStoreShardingInfosResponse)
	CompareWith(*ListRecoveryStoreShardingInfosResponse) (cmp int, comparable bool)
}

func ParseListRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr string) (ListRecoveryStoreShardingInfosResponse_FieldPathValue, error) {
	fp, err := ParseListRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRecoveryStoreShardingInfosResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListRecoveryStoreShardingInfosResponse_FieldPathValue), nil
}

func MustParseListRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr string) ListRecoveryStoreShardingInfosResponse_FieldPathValue {
	fpv, err := ParseListRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue struct {
	ListRecoveryStoreShardingInfosResponse_FieldTerminalPath
	value interface{}
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPathValue = (*ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListRecoveryStoreShardingInfosResponse' as interface{}
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsRecoveryStoreShardingInfosValue() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpv.value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListRecoveryStoreShardingInfosResponse
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) SetTo(target **ListRecoveryStoreShardingInfosResponse) {
	if *target == nil {
		*target = new(ListRecoveryStoreShardingInfosResponse)
	}
	switch fpv.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		(*target).RecoveryStoreShardingInfos = fpv.value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*recovery_store_sharding_info.PagerCursor)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*recovery_store_sharding_info.PagerCursor)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fpv.selector))
	}
}

func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRecoveryStoreShardingInfosResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue' with the value under path in 'ListRecoveryStoreShardingInfosResponse'.
func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) CompareWith(source *ListRecoveryStoreShardingInfosResponse) (int, bool) {
	switch fpv.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return 0, false
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fpv.selector))
	}
}

func (fpv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListRecoveryStoreShardingInfosResponse))
}

type ListRecoveryStoreShardingInfosResponse_FieldSubPathValue struct {
	ListRecoveryStoreShardingInfosResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPathValue = (*ListRecoveryStoreShardingInfosResponse_FieldSubPathValue)(nil)

func (fpvs *ListRecoveryStoreShardingInfosResponse_FieldSubPathValue) AsRecoveryStoreShardingInfosPathValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue)
	return res, ok
}

func (fpvs *ListRecoveryStoreShardingInfosResponse_FieldSubPathValue) SetTo(target **ListRecoveryStoreShardingInfosResponse) {
	if *target == nil {
		*target = new(ListRecoveryStoreShardingInfosResponse)
	}
	switch fpvs.Selector() {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRecoveryStoreShardingInfosResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListRecoveryStoreShardingInfosResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListRecoveryStoreShardingInfosResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListRecoveryStoreShardingInfosResponse_FieldSubPathValue) CompareWith(source *ListRecoveryStoreShardingInfosResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListRecoveryStoreShardingInfosResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListRecoveryStoreShardingInfosResponse))
}

// ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListRecoveryStoreShardingInfosResponse according to their type
// Present only for array (repeated) types.
type ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListRecoveryStoreShardingInfosResponse_FieldPath
	ContainsValue(*ListRecoveryStoreShardingInfosResponse) bool
}

// ParseListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRecoveryStoreShardingInfosResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue), nil
}

func MustParseListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue struct {
	ListRecoveryStoreShardingInfosResponse_FieldTerminalPath
	value interface{}
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue = (*ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListRecoveryStoreShardingInfosResponse as interface{}
func (fpaiv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) AsRecoveryStoreShardingInfosItemValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaiv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}

func (fpaiv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListRecoveryStoreShardingInfosResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRecoveryStoreShardingInfosResponse'
func (fpaiv *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListRecoveryStoreShardingInfosResponse) bool {
	slice := fpaiv.ListRecoveryStoreShardingInfosResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue struct {
	ListRecoveryStoreShardingInfosResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) AsRecoveryStoreShardingInfosPathItemValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListRecoveryStoreShardingInfosResponse'
func (fpaivs *ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListRecoveryStoreShardingInfosResponse) bool {
	switch fpaivs.Selector() {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListRecoveryStoreShardingInfosResponse: %d", fpaivs.Selector()))
	}
}

// ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues allows storing slice of values for ListRecoveryStoreShardingInfosResponse fields according to their type
type ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListRecoveryStoreShardingInfosResponse_FieldPath
}

func ParseListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListRecoveryStoreShardingInfosResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues), nil
}

func MustParseListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues struct {
	ListRecoveryStoreShardingInfosResponse_FieldTerminalPath
	values interface{}
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues = (*ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos:
		for _, v := range fpaov.values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.PagerCursor) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.PagerCursor) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsRecoveryStoreShardingInfosArrayOfValues() ([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaov.values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues struct {
	ListRecoveryStoreShardingInfosResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues = (*ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues) AsRecoveryStoreShardingInfosPathArrayOfValues() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRecoveryStoreShardingInfoRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRecoveryStoreShardingInfoRequest_FieldPathSelector
	Get(source *WatchRecoveryStoreShardingInfoRequest) []interface{}
	GetSingle(source *WatchRecoveryStoreShardingInfoRequest) (interface{}, bool)
	ClearValue(item *WatchRecoveryStoreShardingInfoRequest)

	// Those methods build corresponding WatchRecoveryStoreShardingInfoRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRecoveryStoreShardingInfoRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue
}

type WatchRecoveryStoreShardingInfoRequest_FieldPathSelector int32

const (
	WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName      WatchRecoveryStoreShardingInfoRequest_FieldPathSelector = 0
	WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask WatchRecoveryStoreShardingInfoRequest_FieldPathSelector = 1
	WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView      WatchRecoveryStoreShardingInfoRequest_FieldPathSelector = 2
)

func (s WatchRecoveryStoreShardingInfoRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return "name"
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", s))
	}
}

func BuildWatchRecoveryStoreShardingInfoRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRecoveryStoreShardingInfoRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRecoveryStoreShardingInfoRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRecoveryStoreShardingInfoRequest", fp)
}

func ParseWatchRecoveryStoreShardingInfoRequest_FieldPath(rawField string) (WatchRecoveryStoreShardingInfoRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRecoveryStoreShardingInfoRequest_FieldPath(fp)
}

func MustParseWatchRecoveryStoreShardingInfoRequest_FieldPath(rawField string) WatchRecoveryStoreShardingInfoRequest_FieldPath {
	fp, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath struct {
	selector WatchRecoveryStoreShardingInfoRequest_FieldPathSelector
}

var _ WatchRecoveryStoreShardingInfoRequest_FieldPath = (*WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath)(nil)

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) Selector() WatchRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRecoveryStoreShardingInfoRequest
func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) Get(source *WatchRecoveryStoreShardingInfoRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRecoveryStoreShardingInfoRequest
func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingle(source *WatchRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return (*recovery_store_sharding_info.Reference)(nil)
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValue(item *WatchRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName ||
		fp.selector == WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRecoveryStoreShardingInfoRequest_FieldPathValue {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Reference)}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov := &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.Reference)}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		return &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRecoveryStoreShardingInfoRequest_FieldPathValue allows storing values for WatchRecoveryStoreShardingInfoRequest fields according to their type
type WatchRecoveryStoreShardingInfoRequest_FieldPathValue interface {
	WatchRecoveryStoreShardingInfoRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRecoveryStoreShardingInfoRequest)
	CompareWith(*WatchRecoveryStoreShardingInfoRequest) (cmp int, comparable bool)
}

func ParseWatchRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfoRequest_FieldPathValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfoRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRecoveryStoreShardingInfoRequest_FieldPathValue), nil
}

func MustParseWatchRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfoRequest_FieldPathValue {
	fpv, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue struct {
	WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfoRequest_FieldPathValue = (*WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRecoveryStoreShardingInfoRequest' as interface{}
func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsNameValue() (*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.Reference)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsFieldMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchRecoveryStoreShardingInfoRequest
func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetTo(target **WatchRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(WatchRecoveryStoreShardingInfoRequest)
	}
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*recovery_store_sharding_info.Reference)
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRecoveryStoreShardingInfoRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue' with the value under path in 'WatchRecoveryStoreShardingInfoRequest'.
func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWith(source *WatchRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*recovery_store_sharding_info.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRecoveryStoreShardingInfoRequest))
}

// WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRecoveryStoreShardingInfoRequest according to their type
// Present only for array (repeated) types.
type WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRecoveryStoreShardingInfoRequest_FieldPath
	ContainsValue(*WatchRecoveryStoreShardingInfoRequest) bool
}

// ParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfoRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue struct {
	WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue = (*WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRecoveryStoreShardingInfoRequest as interface{}
func (fpaiv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRecoveryStoreShardingInfoRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRecoveryStoreShardingInfoRequest'
func (fpaiv *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRecoveryStoreShardingInfoRequest) bool {
	slice := fpaiv.WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues allows storing slice of values for WatchRecoveryStoreShardingInfoRequest fields according to their type
type WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRecoveryStoreShardingInfoRequest_FieldPath
}

func ParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfoRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues struct {
	WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.Reference) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.Reference)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRecoveryStoreShardingInfoResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRecoveryStoreShardingInfoResponse_FieldPathSelector
	Get(source *WatchRecoveryStoreShardingInfoResponse) []interface{}
	GetSingle(source *WatchRecoveryStoreShardingInfoResponse) (interface{}, bool)
	ClearValue(item *WatchRecoveryStoreShardingInfoResponse)

	// Those methods build corresponding WatchRecoveryStoreShardingInfoResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRecoveryStoreShardingInfoResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue
}

type WatchRecoveryStoreShardingInfoResponse_FieldPathSelector int32

const (
	WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange WatchRecoveryStoreShardingInfoResponse_FieldPathSelector = 0
)

func (s WatchRecoveryStoreShardingInfoResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", s))
	}
}

func BuildWatchRecoveryStoreShardingInfoResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRecoveryStoreShardingInfoResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRecoveryStoreShardingInfoResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRecoveryStoreShardingInfoResponse", fp)
}

func ParseWatchRecoveryStoreShardingInfoResponse_FieldPath(rawField string) (WatchRecoveryStoreShardingInfoResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRecoveryStoreShardingInfoResponse_FieldPath(fp)
}

func MustParseWatchRecoveryStoreShardingInfoResponse_FieldPath(rawField string) WatchRecoveryStoreShardingInfoResponse_FieldPath {
	fp, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath struct {
	selector WatchRecoveryStoreShardingInfoResponse_FieldPathSelector
}

var _ WatchRecoveryStoreShardingInfoResponse_FieldPath = (*WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath)(nil)

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) Selector() WatchRecoveryStoreShardingInfoResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRecoveryStoreShardingInfoResponse
func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) Get(source *WatchRecoveryStoreShardingInfoResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRecoveryStoreShardingInfoResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRecoveryStoreShardingInfoResponse
func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) GetSingle(source *WatchRecoveryStoreShardingInfoResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRecoveryStoreShardingInfoResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) ClearValue(item *WatchRecoveryStoreShardingInfoResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRecoveryStoreShardingInfoResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRecoveryStoreShardingInfoResponse_FieldPathValue {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		return &WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues {
	fpaov := &WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		return &WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRecoveryStoreShardingInfoResponse_FieldPathValue allows storing values for WatchRecoveryStoreShardingInfoResponse fields according to their type
type WatchRecoveryStoreShardingInfoResponse_FieldPathValue interface {
	WatchRecoveryStoreShardingInfoResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRecoveryStoreShardingInfoResponse)
	CompareWith(*WatchRecoveryStoreShardingInfoResponse) (cmp int, comparable bool)
}

func ParseWatchRecoveryStoreShardingInfoResponse_FieldPathValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfoResponse_FieldPathValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfoResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRecoveryStoreShardingInfoResponse_FieldPathValue), nil
}

func MustParseWatchRecoveryStoreShardingInfoResponse_FieldPathValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfoResponse_FieldPathValue {
	fpv, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue struct {
	WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfoResponse_FieldPathValue = (*WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRecoveryStoreShardingInfoResponse' as interface{}
func (fpv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue) AsChangeValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfoChange, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchRecoveryStoreShardingInfoResponse
func (fpv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue) SetTo(target **WatchRecoveryStoreShardingInfoResponse) {
	if *target == nil {
		*target = new(WatchRecoveryStoreShardingInfoResponse)
	}
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRecoveryStoreShardingInfoResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue' with the value under path in 'WatchRecoveryStoreShardingInfoResponse'.
func (fpv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue) CompareWith(source *WatchRecoveryStoreShardingInfoResponse) (int, bool) {
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfoResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRecoveryStoreShardingInfoResponse))
}

// WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRecoveryStoreShardingInfoResponse according to their type
// Present only for array (repeated) types.
type WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRecoveryStoreShardingInfoResponse_FieldPath
	ContainsValue(*WatchRecoveryStoreShardingInfoResponse) bool
}

// ParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfoResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayItemValue struct {
	WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfoResponse_FieldPathArrayItemValue = (*WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRecoveryStoreShardingInfoResponse as interface{}
func (fpaiv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRecoveryStoreShardingInfoResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRecoveryStoreShardingInfoResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRecoveryStoreShardingInfoResponse'
func (fpaiv *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRecoveryStoreShardingInfoResponse) bool {
	slice := fpaiv.WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues allows storing slice of values for WatchRecoveryStoreShardingInfoResponse fields according to their type
type WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRecoveryStoreShardingInfoResponse_FieldPath
}

func ParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfoResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayOfValues struct {
	WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRecoveryStoreShardingInfoResponse_FieldPathArrayOfValues = (*WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRecoveryStoreShardingInfoResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRecoveryStoreShardingInfosRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRecoveryStoreShardingInfosRequest_FieldPathSelector
	Get(source *WatchRecoveryStoreShardingInfosRequest) []interface{}
	GetSingle(source *WatchRecoveryStoreShardingInfosRequest) (interface{}, bool)
	ClearValue(item *WatchRecoveryStoreShardingInfosRequest)

	// Those methods build corresponding WatchRecoveryStoreShardingInfosRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRecoveryStoreShardingInfosRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue
}

type WatchRecoveryStoreShardingInfosRequest_FieldPathSelector int32

const (
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType         WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 0
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent       WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 1
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize     WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 2
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken    WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 3
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy      WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 4
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken  WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 5
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 6
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter       WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 7
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask    WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 8
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView         WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 9
	WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize WatchRecoveryStoreShardingInfosRequest_FieldPathSelector = 10
)

func (s WatchRecoveryStoreShardingInfosRequest_FieldPathSelector) String() string {
	switch s {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		return "type"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return "parent"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return "view"
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", s))
	}
}

func BuildWatchRecoveryStoreShardingInfosRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchRecoveryStoreShardingInfosRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRecoveryStoreShardingInfosRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRecoveryStoreShardingInfosRequest", fp)
}

func ParseWatchRecoveryStoreShardingInfosRequest_FieldPath(rawField string) (WatchRecoveryStoreShardingInfosRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRecoveryStoreShardingInfosRequest_FieldPath(fp)
}

func MustParseWatchRecoveryStoreShardingInfosRequest_FieldPath(rawField string) WatchRecoveryStoreShardingInfosRequest_FieldPath {
	fp, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath struct {
	selector WatchRecoveryStoreShardingInfosRequest_FieldPathSelector
}

var _ WatchRecoveryStoreShardingInfosRequest_FieldPath = (*WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath)(nil)

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) Selector() WatchRecoveryStoreShardingInfosRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRecoveryStoreShardingInfosRequest
func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) Get(source *WatchRecoveryStoreShardingInfosRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRecoveryStoreShardingInfosRequest))
}

// GetSingle returns value pointed by specific field of from source WatchRecoveryStoreShardingInfosRequest
func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetSingle(source *WatchRecoveryStoreShardingInfosRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRecoveryStoreShardingInfosRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return (*recovery_store_sharding_info.ParentReference)(nil)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return (*recovery_store_sharding_info.PagerCursor)(nil)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return (*recovery_store_sharding_info.OrderBy)(nil)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return (*recovery_store_sharding_info.Filter)(nil)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) ClearValue(item *WatchRecoveryStoreShardingInfosRequest) {
	if item != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRecoveryStoreShardingInfosRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView ||
		fp.selector == WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIValue(value interface{}) WatchRecoveryStoreShardingInfosRequest_FieldPathValue {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.ParentReference)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.PagerCursor)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.OrderBy)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Filter)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues {
	fpaov := &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.ParentReference)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.PagerCursor)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.OrderBy)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.Filter)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		return &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRecoveryStoreShardingInfosRequest_FieldPathValue allows storing values for WatchRecoveryStoreShardingInfosRequest fields according to their type
type WatchRecoveryStoreShardingInfosRequest_FieldPathValue interface {
	WatchRecoveryStoreShardingInfosRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRecoveryStoreShardingInfosRequest)
	CompareWith(*WatchRecoveryStoreShardingInfosRequest) (cmp int, comparable bool)
}

func ParseWatchRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfosRequest_FieldPathValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfosRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRecoveryStoreShardingInfosRequest_FieldPathValue), nil
}

func MustParseWatchRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfosRequest_FieldPathValue {
	fpv, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue struct {
	WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfosRequest_FieldPathValue = (*WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRecoveryStoreShardingInfosRequest' as interface{}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsParentValue() (*recovery_store_sharding_info.ParentReference, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.ParentReference)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsPageTokenValue() (*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsOrderByValue() (*recovery_store_sharding_info.OrderBy, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.OrderBy)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsFilterValue() (*recovery_store_sharding_info.Filter, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.Filter)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsFieldMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchRecoveryStoreShardingInfosRequest
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) SetTo(target **WatchRecoveryStoreShardingInfosRequest) {
	if *target == nil {
		*target = new(WatchRecoveryStoreShardingInfosRequest)
	}
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*recovery_store_sharding_info.ParentReference)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*recovery_store_sharding_info.PagerCursor)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*recovery_store_sharding_info.OrderBy)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*recovery_store_sharding_info.Filter)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRecoveryStoreShardingInfosRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue' with the value under path in 'WatchRecoveryStoreShardingInfosRequest'.
func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) CompareWith(source *WatchRecoveryStoreShardingInfosRequest) (int, bool) {
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*recovery_store_sharding_info.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosRequest: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRecoveryStoreShardingInfosRequest))
}

// WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRecoveryStoreShardingInfosRequest according to their type
// Present only for array (repeated) types.
type WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRecoveryStoreShardingInfosRequest_FieldPath
	ContainsValue(*WatchRecoveryStoreShardingInfosRequest) bool
}

// ParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfosRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue struct {
	WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfosRequest_FieldPathArrayItemValue = (*WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRecoveryStoreShardingInfosRequest as interface{}
func (fpaiv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRecoveryStoreShardingInfosRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRecoveryStoreShardingInfosRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRecoveryStoreShardingInfosRequest'
func (fpaiv *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRecoveryStoreShardingInfosRequest) bool {
	slice := fpaiv.WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues allows storing slice of values for WatchRecoveryStoreShardingInfosRequest fields according to their type
type WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRecoveryStoreShardingInfosRequest_FieldPath
}

func ParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfosRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues struct {
	WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath
	values interface{}
}

var _ WatchRecoveryStoreShardingInfosRequest_FieldPathArrayOfValues = (*WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.ParentReference) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.PagerCursor) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.OrderBy) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.Filter) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*recovery_store_sharding_info.ParentReference, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.ParentReference)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*recovery_store_sharding_info.OrderBy, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.OrderBy)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*recovery_store_sharding_info.Filter, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.Filter)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRecoveryStoreShardingInfosResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRecoveryStoreShardingInfosResponse_FieldPathSelector
	Get(source *WatchRecoveryStoreShardingInfosResponse) []interface{}
	GetSingle(source *WatchRecoveryStoreShardingInfosResponse) (interface{}, bool)
	ClearValue(item *WatchRecoveryStoreShardingInfosResponse)

	// Those methods build corresponding WatchRecoveryStoreShardingInfosResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue
}

type WatchRecoveryStoreShardingInfosResponse_FieldPathSelector int32

const (
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 0
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent                        WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 1
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange                  WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 2
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken                      WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 3
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize                     WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 4
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset                      WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 5
	WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset                      WatchRecoveryStoreShardingInfosResponse_FieldPathSelector = 6
)

func (s WatchRecoveryStoreShardingInfosResponse_FieldPathSelector) String() string {
	switch s {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		return "recovery_store_sharding_info_changes"
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", s))
	}
}

func BuildWatchRecoveryStoreShardingInfosResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchRecoveryStoreShardingInfosResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRecoveryStoreShardingInfosResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "recovery_store_sharding_info_changes", "recoveryStoreShardingInfoChanges", "recovery-store-sharding-info-changes":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchRecoveryStoreShardingInfosResponse_FieldSubPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRecoveryStoreShardingInfosResponse", fp)
}

func ParseWatchRecoveryStoreShardingInfosResponse_FieldPath(rawField string) (WatchRecoveryStoreShardingInfosResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRecoveryStoreShardingInfosResponse_FieldPath(fp)
}

func MustParseWatchRecoveryStoreShardingInfosResponse_FieldPath(rawField string) WatchRecoveryStoreShardingInfosResponse_FieldPath {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath struct {
	selector WatchRecoveryStoreShardingInfosResponse_FieldPathSelector
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPath = (*WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath)(nil)

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) Selector() WatchRecoveryStoreShardingInfosResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRecoveryStoreShardingInfosResponse
func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) Get(source *WatchRecoveryStoreShardingInfosResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
			for _, value := range source.GetRecoveryStoreShardingInfoChanges() {
				values = append(values, value)
			}
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRecoveryStoreShardingInfosResponse))
}

// GetSingle returns value pointed by specific field of from source WatchRecoveryStoreShardingInfosResponse
func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetSingle(source *WatchRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		res := source.GetRecoveryStoreShardingInfoChanges()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRecoveryStoreShardingInfosResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		return ([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)(nil)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return (*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)(nil)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) ClearValue(item *WatchRecoveryStoreShardingInfosResponse) {
	if item != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
			item.RecoveryStoreShardingInfoChanges = nil
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRecoveryStoreShardingInfosResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges ||
		fp.selector == WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIValue(value interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathValue {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	fpaov := &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		return &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue{WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchRecoveryStoreShardingInfosResponse_FieldSubPath struct {
	selector WatchRecoveryStoreShardingInfosResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPath = (*WatchRecoveryStoreShardingInfosResponse_FieldSubPath)(nil)

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) Selector() WatchRecoveryStoreShardingInfosResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchRecoveryStoreShardingInfosResponse
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) Get(source *WatchRecoveryStoreShardingInfosResponse) (values []interface{}) {
	switch fps.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchRecoveryStoreShardingInfosResponse))
}

// GetSingle returns value of selected field from source WatchRecoveryStoreShardingInfosResponse
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) GetSingle(source *WatchRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fps.selector))
	}
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchRecoveryStoreShardingInfosResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) ClearValue(item *WatchRecoveryStoreShardingInfosResponse) {
	if item != nil {
		switch fps.selector {
		case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchRecoveryStoreShardingInfosResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) WithIValue(value interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathValue {
	return &WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	return &WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	return &WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchRecoveryStoreShardingInfosResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchRecoveryStoreShardingInfosResponse_FieldPathValue allows storing values for WatchRecoveryStoreShardingInfosResponse fields according to their type
type WatchRecoveryStoreShardingInfosResponse_FieldPathValue interface {
	WatchRecoveryStoreShardingInfosResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRecoveryStoreShardingInfosResponse)
	CompareWith(*WatchRecoveryStoreShardingInfosResponse) (cmp int, comparable bool)
}

func ParseWatchRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfosResponse_FieldPathValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfosResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRecoveryStoreShardingInfosResponse_FieldPathValue), nil
}

func MustParseWatchRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfosResponse_FieldPathValue {
	fpv, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue struct {
	WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPathValue = (*WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchRecoveryStoreShardingInfosResponse' as interface{}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsRecoveryStoreShardingInfoChangesValue() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange, bool) {
	res, ok := fpv.value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchRecoveryStoreShardingInfosResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchRecoveryStoreShardingInfosResponse
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) SetTo(target **WatchRecoveryStoreShardingInfosResponse) {
	if *target == nil {
		*target = new(WatchRecoveryStoreShardingInfosResponse)
	}
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		(*target).RecoveryStoreShardingInfoChanges = fpv.value.([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRecoveryStoreShardingInfosResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue' with the value under path in 'WatchRecoveryStoreShardingInfosResponse'.
func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) CompareWith(source *WatchRecoveryStoreShardingInfosResponse) (int, bool) {
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		return 0, false
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRecoveryStoreShardingInfosResponse))
}

type WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue struct {
	WatchRecoveryStoreShardingInfosResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPathValue = (*WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue)(nil)

func (fpvs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue) SetTo(target **WatchRecoveryStoreShardingInfosResponse) {
	if *target == nil {
		*target = new(WatchRecoveryStoreShardingInfosResponse)
	}
	switch fpvs.Selector() {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRecoveryStoreShardingInfosResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue) CompareWith(source *WatchRecoveryStoreShardingInfosResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchRecoveryStoreShardingInfosResponse))
}

// WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchRecoveryStoreShardingInfosResponse according to their type
// Present only for array (repeated) types.
type WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRecoveryStoreShardingInfosResponse_FieldPath
	ContainsValue(*WatchRecoveryStoreShardingInfosResponse) bool
}

// ParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfosResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue struct {
	WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPathArrayItemValue = (*WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRecoveryStoreShardingInfosResponse as interface{}
func (fpaiv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) AsRecoveryStoreShardingInfoChangesItemValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfoChange, bool) {
	res, ok := fpaiv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	return res, ok
}

func (fpaiv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRecoveryStoreShardingInfosResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRecoveryStoreShardingInfosResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRecoveryStoreShardingInfosResponse'
func (fpaiv *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRecoveryStoreShardingInfosResponse) bool {
	slice := fpaiv.WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue struct {
	WatchRecoveryStoreShardingInfosResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchRecoveryStoreShardingInfosResponse'
func (fpaivs *WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchRecoveryStoreShardingInfosResponse) bool {
	switch fpaivs.Selector() {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse: %d", fpaivs.Selector()))
	}
}

// WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues allows storing slice of values for WatchRecoveryStoreShardingInfosResponse fields according to their type
type WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRecoveryStoreShardingInfosResponse_FieldPath
}

func ParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchRecoveryStoreShardingInfosResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues struct {
	WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath
	values interface{}
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues = (*WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges:
		for _, v := range fpaov.values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchRecoveryStoreShardingInfosResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsRecoveryStoreShardingInfoChangesArrayOfValues() ([][]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange, bool) {
	res, ok := fpaov.values.([][]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchRecoveryStoreShardingInfosResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues struct {
	WatchRecoveryStoreShardingInfosResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchRecoveryStoreShardingInfosResponse_FieldPathArrayOfValues = (*WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchRecoveryStoreShardingInfosResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector
	Get(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchRecoveryStoreShardingInfosResponse_PageTokenChange)

	// Those methods build corresponding WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector int32

const (
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector = 0
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchRecoveryStoreShardingInfosResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchRecoveryStoreShardingInfosResponse_PageTokenChange", fp)
}

func ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(rawField string) (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(rawField string) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector
}

var _ WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath = (*WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) Selector() WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchRecoveryStoreShardingInfosResponse_PageTokenChange
func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) Get(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchRecoveryStoreShardingInfosResponse_PageTokenChange
func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*recovery_store_sharding_info.PagerCursor)(nil)
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*recovery_store_sharding_info.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.PagerCursor)}
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue{WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.PagerCursor)}
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue interface {
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
	CompareWith(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathValue = (*WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchRecoveryStoreShardingInfosResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*recovery_store_sharding_info.PagerCursor)
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*recovery_store_sharding_info.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchRecoveryStoreShardingInfosResponse_PageTokenChange'.
func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchRecoveryStoreShardingInfosResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

// WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath
	ContainsValue(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange) bool
}

// ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayItemValue = (*WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchRecoveryStoreShardingInfosResponse_PageTokenChange as interface{}
func (fpaiv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) bool {
	slice := fpaiv.WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath
}

func ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathArrayOfValues = (*WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.PagerCursor) {
			values = append(values, v)
		}
	case WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.PagerCursor)
	return res, ok
}
func (fpaov *WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*recovery_store_sharding_info.PagerCursor, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateRecoveryStoreShardingInfoRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateRecoveryStoreShardingInfoRequest_FieldPathSelector
	Get(source *CreateRecoveryStoreShardingInfoRequest) []interface{}
	GetSingle(source *CreateRecoveryStoreShardingInfoRequest) (interface{}, bool)
	ClearValue(item *CreateRecoveryStoreShardingInfoRequest)

	// Those methods build corresponding CreateRecoveryStoreShardingInfoRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue
}

type CreateRecoveryStoreShardingInfoRequest_FieldPathSelector int32

const (
	CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent                    CreateRecoveryStoreShardingInfoRequest_FieldPathSelector = 0
	CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo CreateRecoveryStoreShardingInfoRequest_FieldPathSelector = 1
)

func (s CreateRecoveryStoreShardingInfoRequest_FieldPathSelector) String() string {
	switch s {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		return "parent"
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return "recovery_store_sharding_info"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", s))
	}
}

func BuildCreateRecoveryStoreShardingInfoRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateRecoveryStoreShardingInfoRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateRecoveryStoreShardingInfoRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent}, nil
		case "recovery_store_sharding_info", "recoveryStoreShardingInfo", "recovery-store-sharding-info":
			return &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo}, nil
		}
	} else {
		switch fp[0] {
		case "recovery_store_sharding_info", "recoveryStoreShardingInfo", "recovery-store-sharding-info":
			if subpath, err := recovery_store_sharding_info.BuildRecoveryStoreShardingInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateRecoveryStoreShardingInfoRequest_FieldSubPath{selector: CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateRecoveryStoreShardingInfoRequest", fp)
}

func ParseCreateRecoveryStoreShardingInfoRequest_FieldPath(rawField string) (CreateRecoveryStoreShardingInfoRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateRecoveryStoreShardingInfoRequest_FieldPath(fp)
}

func MustParseCreateRecoveryStoreShardingInfoRequest_FieldPath(rawField string) CreateRecoveryStoreShardingInfoRequest_FieldPath {
	fp, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath struct {
	selector CreateRecoveryStoreShardingInfoRequest_FieldPathSelector
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPath = (*CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath)(nil)

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) Selector() CreateRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateRecoveryStoreShardingInfoRequest
func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) Get(source *CreateRecoveryStoreShardingInfoRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
			if source.RecoveryStoreShardingInfo != nil {
				values = append(values, source.RecoveryStoreShardingInfo)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value pointed by specific field of from source CreateRecoveryStoreShardingInfoRequest
func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingle(source *CreateRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		res := source.GetRecoveryStoreShardingInfo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		return (*recovery_store_sharding_info.ParentReference)(nil)
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValue(item *CreateRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fp.selector {
		case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
			item.RecoveryStoreShardingInfo = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIValue(value interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathValue {
	switch fp.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		return &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.ParentReference)}
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov := &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		return &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.ParentReference)}
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateRecoveryStoreShardingInfoRequest_FieldSubPath struct {
	selector CreateRecoveryStoreShardingInfoRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPath = (*CreateRecoveryStoreShardingInfoRequest_FieldSubPath)(nil)

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) Selector() CreateRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) AsRecoveryStoreShardingInfoSubPath() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath, bool) {
	res, ok := fps.subPath.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateRecoveryStoreShardingInfoRequest
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) Get(source *CreateRecoveryStoreShardingInfoRequest) (values []interface{}) {
	switch fps.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		values = append(values, fps.subPath.GetRaw(source.GetRecoveryStoreShardingInfo())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value of selected field from source CreateRecoveryStoreShardingInfoRequest
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) GetSingle(source *CreateRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		if source.GetRecoveryStoreShardingInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRecoveryStoreShardingInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fps.selector))
	}
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) ClearValue(item *CreateRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fps.selector {
		case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
			fps.subPath.ClearValueRaw(item.RecoveryStoreShardingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) WithIValue(value interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathValue {
	return &CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	return &CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	return &CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateRecoveryStoreShardingInfoRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateRecoveryStoreShardingInfoRequest_FieldPathValue allows storing values for CreateRecoveryStoreShardingInfoRequest fields according to their type
type CreateRecoveryStoreShardingInfoRequest_FieldPathValue interface {
	CreateRecoveryStoreShardingInfoRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateRecoveryStoreShardingInfoRequest)
	CompareWith(*CreateRecoveryStoreShardingInfoRequest) (cmp int, comparable bool)
}

func ParseCreateRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) (CreateRecoveryStoreShardingInfoRequest_FieldPathValue, error) {
	fp, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRecoveryStoreShardingInfoRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateRecoveryStoreShardingInfoRequest_FieldPathValue), nil
}

func MustParseCreateRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) CreateRecoveryStoreShardingInfoRequest_FieldPathValue {
	fpv, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue struct {
	CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPathValue = (*CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateRecoveryStoreShardingInfoRequest' as interface{}
func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsParentValue() (*recovery_store_sharding_info.ParentReference, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.ParentReference)
	return res, ok
}
func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsRecoveryStoreShardingInfoValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}

// SetTo stores value for selected field for object CreateRecoveryStoreShardingInfoRequest
func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetTo(target **CreateRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(CreateRecoveryStoreShardingInfoRequest)
	}
	switch fpv.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*recovery_store_sharding_info.ParentReference)
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		(*target).RecoveryStoreShardingInfo = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRecoveryStoreShardingInfoRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue' with the value under path in 'CreateRecoveryStoreShardingInfoRequest'.
func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWith(source *CreateRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpv.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*recovery_store_sharding_info.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateRecoveryStoreShardingInfoRequest))
}

type CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue struct {
	CreateRecoveryStoreShardingInfoRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPathValue = (*CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue)(nil)

func (fpvs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue) AsRecoveryStoreShardingInfoPathValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue)
	return res, ok
}

func (fpvs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue) SetTo(target **CreateRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(CreateRecoveryStoreShardingInfoRequest)
	}
	switch fpvs.Selector() {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue).SetTo(&(*target).RecoveryStoreShardingInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateRecoveryStoreShardingInfoRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue) CompareWith(source *CreateRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue).CompareWith(source.GetRecoveryStoreShardingInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateRecoveryStoreShardingInfoRequest))
}

// CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateRecoveryStoreShardingInfoRequest according to their type
// Present only for array (repeated) types.
type CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateRecoveryStoreShardingInfoRequest_FieldPath
	ContainsValue(*CreateRecoveryStoreShardingInfoRequest) bool
}

// ParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRecoveryStoreShardingInfoRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue struct {
	CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue = (*CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateRecoveryStoreShardingInfoRequest as interface{}
func (fpaiv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateRecoveryStoreShardingInfoRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRecoveryStoreShardingInfoRequest'
func (fpaiv *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateRecoveryStoreShardingInfoRequest) bool {
	slice := fpaiv.CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue struct {
	CreateRecoveryStoreShardingInfoRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) AsRecoveryStoreShardingInfoPathItemValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateRecoveryStoreShardingInfoRequest'
func (fpaivs *CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateRecoveryStoreShardingInfoRequest) bool {
	switch fpaivs.Selector() {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue).ContainsValue(source.GetRecoveryStoreShardingInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateRecoveryStoreShardingInfoRequest: %d", fpaivs.Selector()))
	}
}

// CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues allows storing slice of values for CreateRecoveryStoreShardingInfoRequest fields according to their type
type CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateRecoveryStoreShardingInfoRequest_FieldPath
}

func ParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateRecoveryStoreShardingInfoRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues struct {
	CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath
	values interface{}
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.ParentReference) {
			values = append(values, v)
		}
	case CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*recovery_store_sharding_info.ParentReference, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.ParentReference)
	return res, ok
}
func (fpaov *CreateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsRecoveryStoreShardingInfoArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}

type CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues struct {
	CreateRecoveryStoreShardingInfoRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues) AsRecoveryStoreShardingInfoPathArrayOfValues() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRecoveryStoreShardingInfoRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector
	Get(source *UpdateRecoveryStoreShardingInfoRequest) []interface{}
	GetSingle(source *UpdateRecoveryStoreShardingInfoRequest) (interface{}, bool)
	ClearValue(item *UpdateRecoveryStoreShardingInfoRequest)

	// Those methods build corresponding UpdateRecoveryStoreShardingInfoRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue
}

type UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector int32

const (
	UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector = 0
	UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask                UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector = 1
	UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas                       UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector = 2
	UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing              UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector = 3
)

func (s UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return "recovery_store_sharding_info"
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", s))
	}
}

func BuildUpdateRecoveryStoreShardingInfoRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateRecoveryStoreShardingInfoRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRecoveryStoreShardingInfoRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "recovery_store_sharding_info", "recoveryStoreShardingInfo", "recovery-store-sharding-info":
			return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "recovery_store_sharding_info", "recoveryStoreShardingInfo", "recovery-store-sharding-info":
			if subpath, err := recovery_store_sharding_info.BuildRecoveryStoreShardingInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRecoveryStoreShardingInfoRequest_FieldSubPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRecoveryStoreShardingInfoRequest_FieldSubPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRecoveryStoreShardingInfoRequest", fp)
}

func ParseUpdateRecoveryStoreShardingInfoRequest_FieldPath(rawField string) (UpdateRecoveryStoreShardingInfoRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRecoveryStoreShardingInfoRequest_FieldPath(fp)
}

func MustParseUpdateRecoveryStoreShardingInfoRequest_FieldPath(rawField string) UpdateRecoveryStoreShardingInfoRequest_FieldPath {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath struct {
	selector UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPath = (*UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath)(nil)

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) Selector() UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRecoveryStoreShardingInfoRequest
func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) Get(source *UpdateRecoveryStoreShardingInfoRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
			if source.RecoveryStoreShardingInfo != nil {
				values = append(values, source.RecoveryStoreShardingInfo)
			}
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateRecoveryStoreShardingInfoRequest
func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingle(source *UpdateRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		res := source.GetRecoveryStoreShardingInfo()
		return res, res != nil
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo)(nil)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return (*UpdateRecoveryStoreShardingInfoRequest_CAS)(nil)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValue(item *UpdateRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
			item.RecoveryStoreShardingInfo = nil
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathValue {
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*UpdateRecoveryStoreShardingInfoRequest_CAS)}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov := &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*UpdateRecoveryStoreShardingInfoRequest_CAS)}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		return &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRecoveryStoreShardingInfoRequest_FieldSubPath struct {
	selector UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPath = (*UpdateRecoveryStoreShardingInfoRequest_FieldSubPath)(nil)

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) Selector() UpdateRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) AsRecoveryStoreShardingInfoSubPath() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath, bool) {
	res, ok := fps.subPath.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath)
	return res, ok
}
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) AsCasSubPath() (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRecoveryStoreShardingInfoRequest
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) Get(source *UpdateRecoveryStoreShardingInfoRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		values = append(values, fps.subPath.GetRaw(source.GetRecoveryStoreShardingInfo())...)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value of selected field from source UpdateRecoveryStoreShardingInfoRequest
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) GetSingle(source *UpdateRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		if source.GetRecoveryStoreShardingInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRecoveryStoreShardingInfo())
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fps.selector))
	}
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) ClearValue(item *UpdateRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
			fps.subPath.ClearValueRaw(item.RecoveryStoreShardingInfo)
		case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) WithIValue(value interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathValue {
	return &UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	return &UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	return &UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRecoveryStoreShardingInfoRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRecoveryStoreShardingInfoRequest_FieldPathValue allows storing values for UpdateRecoveryStoreShardingInfoRequest fields according to their type
type UpdateRecoveryStoreShardingInfoRequest_FieldPathValue interface {
	UpdateRecoveryStoreShardingInfoRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRecoveryStoreShardingInfoRequest)
	CompareWith(*UpdateRecoveryStoreShardingInfoRequest) (cmp int, comparable bool)
}

func ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) (UpdateRecoveryStoreShardingInfoRequest_FieldPathValue, error) {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRecoveryStoreShardingInfoRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRecoveryStoreShardingInfoRequest_FieldPathValue), nil
}

func MustParseUpdateRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) UpdateRecoveryStoreShardingInfoRequest_FieldPathValue {
	fpv, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue struct {
	UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPathValue = (*UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateRecoveryStoreShardingInfoRequest' as interface{}
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsRecoveryStoreShardingInfoValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsCasValue() (*UpdateRecoveryStoreShardingInfoRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateRecoveryStoreShardingInfoRequest_CAS)
	return res, ok
}
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateRecoveryStoreShardingInfoRequest
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetTo(target **UpdateRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(UpdateRecoveryStoreShardingInfoRequest)
	}
	switch fpv.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		(*target).RecoveryStoreShardingInfo = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateRecoveryStoreShardingInfoRequest_CAS)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRecoveryStoreShardingInfoRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue' with the value under path in 'UpdateRecoveryStoreShardingInfoRequest'.
func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWith(source *UpdateRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpv.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return 0, false
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

type UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue struct {
	UpdateRecoveryStoreShardingInfoRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPathValue = (*UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) AsRecoveryStoreShardingInfoPathValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) AsCasPathValue() (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) SetTo(target **UpdateRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(UpdateRecoveryStoreShardingInfoRequest)
	}
	switch fpvs.Selector() {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue).SetTo(&(*target).RecoveryStoreShardingInfo)
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRecoveryStoreShardingInfoRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) CompareWith(source *UpdateRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue).CompareWith(source.GetRecoveryStoreShardingInfo())
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

// UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateRecoveryStoreShardingInfoRequest according to their type
// Present only for array (repeated) types.
type UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRecoveryStoreShardingInfoRequest_FieldPath
	ContainsValue(*UpdateRecoveryStoreShardingInfoRequest) bool
}

// ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRecoveryStoreShardingInfoRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue struct {
	UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue = (*UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRecoveryStoreShardingInfoRequest as interface{}
func (fpaiv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRecoveryStoreShardingInfoRequest'
func (fpaiv *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRecoveryStoreShardingInfoRequest) bool {
	slice := fpaiv.UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue struct {
	UpdateRecoveryStoreShardingInfoRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) AsRecoveryStoreShardingInfoPathItemValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateRecoveryStoreShardingInfoRequest'
func (fpaivs *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRecoveryStoreShardingInfoRequest) bool {
	switch fpaivs.Selector() {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		return fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue).ContainsValue(source.GetRecoveryStoreShardingInfo())
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest: %d", fpaivs.Selector()))
	}
}

// UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues allows storing slice of values for UpdateRecoveryStoreShardingInfoRequest fields according to their type
type UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRecoveryStoreShardingInfoRequest_FieldPath
}

func ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateRecoveryStoreShardingInfoRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues struct {
	UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
			values = append(values, v)
		}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateRecoveryStoreShardingInfoRequest_CAS) {
			values = append(values, v)
		}
	case UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsRecoveryStoreShardingInfoArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpaov *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}
func (fpaov *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateRecoveryStoreShardingInfoRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateRecoveryStoreShardingInfoRequest_CAS)
	return res, ok
}
func (fpaov *UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues struct {
	UpdateRecoveryStoreShardingInfoRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues) AsRecoveryStoreShardingInfoPathArrayOfValues() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateRecoveryStoreShardingInfoRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector
	Get(source *UpdateRecoveryStoreShardingInfoRequest_CAS) []interface{}
	GetSingle(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateRecoveryStoreShardingInfoRequest_CAS)

	// Those methods build corresponding UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector int32

const (
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector = 0
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask        UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector = 1
)

func (s UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", s))
	}
}

func BuildUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateRecoveryStoreShardingInfoRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := recovery_store_sharding_info.BuildRecoveryStoreShardingInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath{selector: UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateRecoveryStoreShardingInfoRequest_CAS", fp)
}

func ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(rawField string) (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(fp)
}

func MustParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(rawField string) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath struct {
	selector UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) Selector() UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateRecoveryStoreShardingInfoRequest_CAS
func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) Get(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateRecoveryStoreShardingInfoRequest_CAS
func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) GetSingle(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo)(nil)
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		return (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) ClearValue(item *UpdateRecoveryStoreShardingInfoRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue{UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue{UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)}
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues{UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath struct {
	selector UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath)(nil)

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) Selector() UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) AsConditionalStateSubPath() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath, bool) {
	res, ok := fps.subPath.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateRecoveryStoreShardingInfoRequest_CAS
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) Get(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateRecoveryStoreShardingInfoRequest_CAS
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) GetSingle(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) ClearValue(item *UpdateRecoveryStoreShardingInfoRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue {
	return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues {
	return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue {
	return &UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue interface {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateRecoveryStoreShardingInfoRequest_CAS)
	CompareWith(*UpdateRecoveryStoreShardingInfoRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue), nil
}

func MustParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue struct {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateRecoveryStoreShardingInfoRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRecoveryStoreShardingInfoRequest_CAS)
	}
	switch fpv.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRecoveryStoreShardingInfoRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateRecoveryStoreShardingInfoRequest_CAS'.
func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue struct {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathValue = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue) SetTo(target **UpdateRecoveryStoreShardingInfoRequest_CAS) {
	if *target == nil {
		*target = new(UpdateRecoveryStoreShardingInfoRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateRecoveryStoreShardingInfoRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue) CompareWith(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath
	ContainsValue(*UpdateRecoveryStoreShardingInfoRequest_CAS) bool
}

// ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayItemValue = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateRecoveryStoreShardingInfoRequest_CAS as interface{}
func (fpaiv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateRecoveryStoreShardingInfoRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateRecoveryStoreShardingInfoRequest_CAS) bool {
	slice := fpaiv.UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateRecoveryStoreShardingInfoRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateRecoveryStoreShardingInfoRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath
}

func ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo) {
			values = append(values, v)
		}
	case UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo)
	return res, ok
}
func (fpaov *UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return res, ok
}

type UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateRecoveryStoreShardingInfoRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathArrayOfValues = (*UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteRecoveryStoreShardingInfoRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteRecoveryStoreShardingInfoRequest_FieldPathSelector
	Get(source *DeleteRecoveryStoreShardingInfoRequest) []interface{}
	GetSingle(source *DeleteRecoveryStoreShardingInfoRequest) (interface{}, bool)
	ClearValue(item *DeleteRecoveryStoreShardingInfoRequest)

	// Those methods build corresponding DeleteRecoveryStoreShardingInfoRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteRecoveryStoreShardingInfoRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue
}

type DeleteRecoveryStoreShardingInfoRequest_FieldPathSelector int32

const (
	DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName DeleteRecoveryStoreShardingInfoRequest_FieldPathSelector = 0
)

func (s DeleteRecoveryStoreShardingInfoRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", s))
	}
}

func BuildDeleteRecoveryStoreShardingInfoRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteRecoveryStoreShardingInfoRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteRecoveryStoreShardingInfoRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteRecoveryStoreShardingInfoRequest", fp)
}

func ParseDeleteRecoveryStoreShardingInfoRequest_FieldPath(rawField string) (DeleteRecoveryStoreShardingInfoRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteRecoveryStoreShardingInfoRequest_FieldPath(fp)
}

func MustParseDeleteRecoveryStoreShardingInfoRequest_FieldPath(rawField string) DeleteRecoveryStoreShardingInfoRequest_FieldPath {
	fp, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath struct {
	selector DeleteRecoveryStoreShardingInfoRequest_FieldPathSelector
}

var _ DeleteRecoveryStoreShardingInfoRequest_FieldPath = (*DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath)(nil)

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) Selector() DeleteRecoveryStoreShardingInfoRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteRecoveryStoreShardingInfoRequest
func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) Get(source *DeleteRecoveryStoreShardingInfoRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteRecoveryStoreShardingInfoRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteRecoveryStoreShardingInfoRequest
func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingle(source *DeleteRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteRecoveryStoreShardingInfoRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return (*recovery_store_sharding_info.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValue(item *DeleteRecoveryStoreShardingInfoRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteRecoveryStoreShardingInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteRecoveryStoreShardingInfoRequest_FieldPathValue {
	switch fp.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return &DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue{DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, value: value.(*recovery_store_sharding_info.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov := &DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		return &DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues{DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath: *fp, values: values.([]*recovery_store_sharding_info.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fp.selector))
	}
}

func (fp *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteRecoveryStoreShardingInfoRequest_FieldPathValue allows storing values for DeleteRecoveryStoreShardingInfoRequest fields according to their type
type DeleteRecoveryStoreShardingInfoRequest_FieldPathValue interface {
	DeleteRecoveryStoreShardingInfoRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteRecoveryStoreShardingInfoRequest)
	CompareWith(*DeleteRecoveryStoreShardingInfoRequest) (cmp int, comparable bool)
}

func ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) (DeleteRecoveryStoreShardingInfoRequest_FieldPathValue, error) {
	fp, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRecoveryStoreShardingInfoRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteRecoveryStoreShardingInfoRequest_FieldPathValue), nil
}

func MustParseDeleteRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr string) DeleteRecoveryStoreShardingInfoRequest_FieldPathValue {
	fpv, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue struct {
	DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRecoveryStoreShardingInfoRequest_FieldPathValue = (*DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteRecoveryStoreShardingInfoRequest' as interface{}
func (fpv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) AsNameValue() (*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpv.value.(*recovery_store_sharding_info.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteRecoveryStoreShardingInfoRequest
func (fpv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetTo(target **DeleteRecoveryStoreShardingInfoRequest) {
	if *target == nil {
		*target = new(DeleteRecoveryStoreShardingInfoRequest)
	}
	switch fpv.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*recovery_store_sharding_info.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteRecoveryStoreShardingInfoRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue' with the value under path in 'DeleteRecoveryStoreShardingInfoRequest'.
func (fpv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWith(source *DeleteRecoveryStoreShardingInfoRequest) (int, bool) {
	switch fpv.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*recovery_store_sharding_info.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteRecoveryStoreShardingInfoRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteRecoveryStoreShardingInfoRequest))
}

// DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteRecoveryStoreShardingInfoRequest according to their type
// Present only for array (repeated) types.
type DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteRecoveryStoreShardingInfoRequest_FieldPath
	ContainsValue(*DeleteRecoveryStoreShardingInfoRequest) bool
}

// ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRecoveryStoreShardingInfoRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue struct {
	DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayItemValue = (*DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteRecoveryStoreShardingInfoRequest as interface{}
func (fpaiv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteRecoveryStoreShardingInfoRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteRecoveryStoreShardingInfoRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteRecoveryStoreShardingInfoRequest'
func (fpaiv *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteRecoveryStoreShardingInfoRequest) bool {
	slice := fpaiv.DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues allows storing slice of values for DeleteRecoveryStoreShardingInfoRequest fields according to their type
type DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteRecoveryStoreShardingInfoRequest_FieldPath
}

func ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteRecoveryStoreShardingInfoRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues struct {
	DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteRecoveryStoreShardingInfoRequest_FieldPathArrayOfValues = (*DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*recovery_store_sharding_info.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*recovery_store_sharding_info.Reference, bool) {
	res, ok := fpaov.values.([]*recovery_store_sharding_info.Reference)
	return res, ok
}
