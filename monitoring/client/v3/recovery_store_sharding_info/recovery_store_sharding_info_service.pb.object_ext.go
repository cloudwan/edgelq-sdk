// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/recovery_store_sharding_info_service.proto
// DO NOT EDIT!!!

package recovery_store_sharding_info_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	recovery_store_sharding_info "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/recovery_store_sharding_info"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &recovery_store_sharding_info.RecoveryStoreShardingInfo{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetRecoveryStoreShardingInfoRequest) GotenObjectExt() {}

func (o *GetRecoveryStoreShardingInfoRequest) MakeFullFieldMask() *GetRecoveryStoreShardingInfoRequest_FieldMask {
	return FullGetRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *GetRecoveryStoreShardingInfoRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *GetRecoveryStoreShardingInfoRequest) MakeDiffFieldMask(other *GetRecoveryStoreShardingInfoRequest) *GetRecoveryStoreShardingInfoRequest_FieldMask {
	if o == nil && other == nil {
		return &GetRecoveryStoreShardingInfoRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetRecoveryStoreShardingInfoRequest_FieldMask()
	}

	res := &GetRecoveryStoreShardingInfoRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: GetRecoveryStoreShardingInfoRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: GetRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: GetRecoveryStoreShardingInfoRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetRecoveryStoreShardingInfoRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetRecoveryStoreShardingInfoRequest))
}

func (o *GetRecoveryStoreShardingInfoRequest) Clone() *GetRecoveryStoreShardingInfoRequest {
	if o == nil {
		return nil
	}
	result := &GetRecoveryStoreShardingInfoRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &recovery_store_sharding_info.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	result.View = o.View
	return result
}

func (o *GetRecoveryStoreShardingInfoRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetRecoveryStoreShardingInfoRequest) Merge(source *GetRecoveryStoreShardingInfoRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &recovery_store_sharding_info.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetRecoveryStoreShardingInfoRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetRecoveryStoreShardingInfoRequest))
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) GotenObjectExt() {}

func (o *BatchGetRecoveryStoreShardingInfosRequest) MakeFullFieldMask() *BatchGetRecoveryStoreShardingInfosRequest_FieldMask {
	return FullBatchGetRecoveryStoreShardingInfosRequest_FieldMask()
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRecoveryStoreShardingInfosRequest_FieldMask()
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) MakeDiffFieldMask(other *BatchGetRecoveryStoreShardingInfosRequest) *BatchGetRecoveryStoreShardingInfosRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRecoveryStoreShardingInfosRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRecoveryStoreShardingInfosRequest_FieldMask()
	}

	res := &BatchGetRecoveryStoreShardingInfosRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRecoveryStoreShardingInfosRequest))
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) Clone() *BatchGetRecoveryStoreShardingInfosRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetRecoveryStoreShardingInfosRequest{}
	result.Names = make([]*recovery_store_sharding_info.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &recovery_store_sharding_info.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) Merge(source *BatchGetRecoveryStoreShardingInfosRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *recovery_store_sharding_info.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &recovery_store_sharding_info.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetRecoveryStoreShardingInfosRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRecoveryStoreShardingInfosRequest))
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) GotenObjectExt() {}

func (o *BatchGetRecoveryStoreShardingInfosResponse) MakeFullFieldMask() *BatchGetRecoveryStoreShardingInfosResponse_FieldMask {
	return FullBatchGetRecoveryStoreShardingInfosResponse_FieldMask()
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetRecoveryStoreShardingInfosResponse_FieldMask()
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) MakeDiffFieldMask(other *BatchGetRecoveryStoreShardingInfosResponse) *BatchGetRecoveryStoreShardingInfosResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetRecoveryStoreShardingInfosResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetRecoveryStoreShardingInfosResponse_FieldMask()
	}

	res := &BatchGetRecoveryStoreShardingInfosResponse_FieldMask{}

	if len(o.GetRecoveryStoreShardingInfos()) == len(other.GetRecoveryStoreShardingInfos()) {
		for i, lValue := range o.GetRecoveryStoreShardingInfos() {
			rValue := other.GetRecoveryStoreShardingInfos()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: BatchGetRecoveryStoreShardingInfosResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetRecoveryStoreShardingInfosResponse))
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) Clone() *BatchGetRecoveryStoreShardingInfosResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetRecoveryStoreShardingInfosResponse{}
	result.RecoveryStoreShardingInfos = make([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, len(o.RecoveryStoreShardingInfos))
	for i, sourceValue := range o.RecoveryStoreShardingInfos {
		result.RecoveryStoreShardingInfos[i] = sourceValue.Clone()
	}
	result.Missing = make([]*recovery_store_sharding_info.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &recovery_store_sharding_info.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetRecoveryStoreShardingInfosResponse) Merge(source *BatchGetRecoveryStoreShardingInfosResponse) {
	for _, sourceValue := range source.GetRecoveryStoreShardingInfos() {
		exists := false
		for _, currentValue := range o.RecoveryStoreShardingInfos {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *recovery_store_sharding_info.RecoveryStoreShardingInfo
			if sourceValue != nil {
				newDstElement = new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
				newDstElement.Merge(sourceValue)
			}
			o.RecoveryStoreShardingInfos = append(o.RecoveryStoreShardingInfos, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *recovery_store_sharding_info.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &recovery_store_sharding_info.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetRecoveryStoreShardingInfosResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetRecoveryStoreShardingInfosResponse))
}

func (o *ListRecoveryStoreShardingInfosRequest) GotenObjectExt() {}

func (o *ListRecoveryStoreShardingInfosRequest) MakeFullFieldMask() *ListRecoveryStoreShardingInfosRequest_FieldMask {
	return FullListRecoveryStoreShardingInfosRequest_FieldMask()
}

func (o *ListRecoveryStoreShardingInfosRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRecoveryStoreShardingInfosRequest_FieldMask()
}

func (o *ListRecoveryStoreShardingInfosRequest) MakeDiffFieldMask(other *ListRecoveryStoreShardingInfosRequest) *ListRecoveryStoreShardingInfosRequest_FieldMask {
	if o == nil && other == nil {
		return &ListRecoveryStoreShardingInfosRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRecoveryStoreShardingInfosRequest_FieldMask()
	}

	res := &ListRecoveryStoreShardingInfosRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListRecoveryStoreShardingInfosRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRecoveryStoreShardingInfosRequest))
}

func (o *ListRecoveryStoreShardingInfosRequest) Clone() *ListRecoveryStoreShardingInfosRequest {
	if o == nil {
		return nil
	}
	result := &ListRecoveryStoreShardingInfosRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &recovery_store_sharding_info.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &recovery_store_sharding_info.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &recovery_store_sharding_info.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &recovery_store_sharding_info.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListRecoveryStoreShardingInfosRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRecoveryStoreShardingInfosRequest) Merge(source *ListRecoveryStoreShardingInfosRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &recovery_store_sharding_info.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &recovery_store_sharding_info.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &recovery_store_sharding_info.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &recovery_store_sharding_info.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListRecoveryStoreShardingInfosRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRecoveryStoreShardingInfosRequest))
}

func (o *ListRecoveryStoreShardingInfosResponse) GotenObjectExt() {}

func (o *ListRecoveryStoreShardingInfosResponse) MakeFullFieldMask() *ListRecoveryStoreShardingInfosResponse_FieldMask {
	return FullListRecoveryStoreShardingInfosResponse_FieldMask()
}

func (o *ListRecoveryStoreShardingInfosResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListRecoveryStoreShardingInfosResponse_FieldMask()
}

func (o *ListRecoveryStoreShardingInfosResponse) MakeDiffFieldMask(other *ListRecoveryStoreShardingInfosResponse) *ListRecoveryStoreShardingInfosResponse_FieldMask {
	if o == nil && other == nil {
		return &ListRecoveryStoreShardingInfosResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListRecoveryStoreShardingInfosResponse_FieldMask()
	}

	res := &ListRecoveryStoreShardingInfosResponse_FieldMask{}

	if len(o.GetRecoveryStoreShardingInfos()) == len(other.GetRecoveryStoreShardingInfos()) {
		for i, lValue := range o.GetRecoveryStoreShardingInfos() {
			rValue := other.GetRecoveryStoreShardingInfos()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfos})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: ListRecoveryStoreShardingInfosResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListRecoveryStoreShardingInfosResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListRecoveryStoreShardingInfosResponse))
}

func (o *ListRecoveryStoreShardingInfosResponse) Clone() *ListRecoveryStoreShardingInfosResponse {
	if o == nil {
		return nil
	}
	result := &ListRecoveryStoreShardingInfosResponse{}
	result.RecoveryStoreShardingInfos = make([]*recovery_store_sharding_info.RecoveryStoreShardingInfo, len(o.RecoveryStoreShardingInfos))
	for i, sourceValue := range o.RecoveryStoreShardingInfos {
		result.RecoveryStoreShardingInfos[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &recovery_store_sharding_info.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &recovery_store_sharding_info.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListRecoveryStoreShardingInfosResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListRecoveryStoreShardingInfosResponse) Merge(source *ListRecoveryStoreShardingInfosResponse) {
	for _, sourceValue := range source.GetRecoveryStoreShardingInfos() {
		exists := false
		for _, currentValue := range o.RecoveryStoreShardingInfos {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *recovery_store_sharding_info.RecoveryStoreShardingInfo
			if sourceValue != nil {
				newDstElement = new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
				newDstElement.Merge(sourceValue)
			}
			o.RecoveryStoreShardingInfos = append(o.RecoveryStoreShardingInfos, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &recovery_store_sharding_info.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &recovery_store_sharding_info.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListRecoveryStoreShardingInfosResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListRecoveryStoreShardingInfosResponse))
}

func (o *WatchRecoveryStoreShardingInfoRequest) GotenObjectExt() {}

func (o *WatchRecoveryStoreShardingInfoRequest) MakeFullFieldMask() *WatchRecoveryStoreShardingInfoRequest_FieldMask {
	return FullWatchRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfoRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfoRequest) MakeDiffFieldMask(other *WatchRecoveryStoreShardingInfoRequest) *WatchRecoveryStoreShardingInfoRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRecoveryStoreShardingInfoRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRecoveryStoreShardingInfoRequest_FieldMask()
	}

	res := &WatchRecoveryStoreShardingInfoRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchRecoveryStoreShardingInfoRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRecoveryStoreShardingInfoRequest))
}

func (o *WatchRecoveryStoreShardingInfoRequest) Clone() *WatchRecoveryStoreShardingInfoRequest {
	if o == nil {
		return nil
	}
	result := &WatchRecoveryStoreShardingInfoRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &recovery_store_sharding_info.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchRecoveryStoreShardingInfoRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRecoveryStoreShardingInfoRequest) Merge(source *WatchRecoveryStoreShardingInfoRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &recovery_store_sharding_info.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchRecoveryStoreShardingInfoRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRecoveryStoreShardingInfoRequest))
}

func (o *WatchRecoveryStoreShardingInfoResponse) GotenObjectExt() {}

func (o *WatchRecoveryStoreShardingInfoResponse) MakeFullFieldMask() *WatchRecoveryStoreShardingInfoResponse_FieldMask {
	return FullWatchRecoveryStoreShardingInfoResponse_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfoResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRecoveryStoreShardingInfoResponse_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfoResponse) MakeDiffFieldMask(other *WatchRecoveryStoreShardingInfoResponse) *WatchRecoveryStoreShardingInfoResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRecoveryStoreShardingInfoResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRecoveryStoreShardingInfoResponse_FieldMask()
	}

	res := &WatchRecoveryStoreShardingInfoResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfoResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfoResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchRecoveryStoreShardingInfoResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRecoveryStoreShardingInfoResponse))
}

func (o *WatchRecoveryStoreShardingInfoResponse) Clone() *WatchRecoveryStoreShardingInfoResponse {
	if o == nil {
		return nil
	}
	result := &WatchRecoveryStoreShardingInfoResponse{}
	result.Change = proto.Clone(o.Change).(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	return result
}

func (o *WatchRecoveryStoreShardingInfoResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRecoveryStoreShardingInfoResponse) Merge(source *WatchRecoveryStoreShardingInfoResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchRecoveryStoreShardingInfoResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRecoveryStoreShardingInfoResponse))
}

func (o *WatchRecoveryStoreShardingInfosRequest) GotenObjectExt() {}

func (o *WatchRecoveryStoreShardingInfosRequest) MakeFullFieldMask() *WatchRecoveryStoreShardingInfosRequest_FieldMask {
	return FullWatchRecoveryStoreShardingInfosRequest_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfosRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRecoveryStoreShardingInfosRequest_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfosRequest) MakeDiffFieldMask(other *WatchRecoveryStoreShardingInfosRequest) *WatchRecoveryStoreShardingInfosRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchRecoveryStoreShardingInfosRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRecoveryStoreShardingInfosRequest_FieldMask()
	}

	res := &WatchRecoveryStoreShardingInfosRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosRequest_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchRecoveryStoreShardingInfosRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRecoveryStoreShardingInfosRequest))
}

func (o *WatchRecoveryStoreShardingInfosRequest) Clone() *WatchRecoveryStoreShardingInfosRequest {
	if o == nil {
		return nil
	}
	result := &WatchRecoveryStoreShardingInfosRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &recovery_store_sharding_info.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &recovery_store_sharding_info.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &recovery_store_sharding_info.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &recovery_store_sharding_info.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchRecoveryStoreShardingInfosRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRecoveryStoreShardingInfosRequest) Merge(source *WatchRecoveryStoreShardingInfosRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &recovery_store_sharding_info.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &recovery_store_sharding_info.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &recovery_store_sharding_info.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &recovery_store_sharding_info.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchRecoveryStoreShardingInfosRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRecoveryStoreShardingInfosRequest))
}

func (o *WatchRecoveryStoreShardingInfosResponse) GotenObjectExt() {}

func (o *WatchRecoveryStoreShardingInfosResponse) MakeFullFieldMask() *WatchRecoveryStoreShardingInfosResponse_FieldMask {
	return FullWatchRecoveryStoreShardingInfosResponse_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfosResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRecoveryStoreShardingInfosResponse_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfosResponse) MakeDiffFieldMask(other *WatchRecoveryStoreShardingInfosResponse) *WatchRecoveryStoreShardingInfosResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchRecoveryStoreShardingInfosResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRecoveryStoreShardingInfosResponse_FieldMask()
	}

	res := &WatchRecoveryStoreShardingInfosResponse_FieldMask{}

	if len(o.GetRecoveryStoreShardingInfoChanges()) == len(other.GetRecoveryStoreShardingInfoChanges()) {
		for i, lValue := range o.GetRecoveryStoreShardingInfoChanges() {
			rValue := other.GetRecoveryStoreShardingInfoChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorRecoveryStoreShardingInfoChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldSubPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponse_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchRecoveryStoreShardingInfosResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRecoveryStoreShardingInfosResponse))
}

func (o *WatchRecoveryStoreShardingInfosResponse) Clone() *WatchRecoveryStoreShardingInfosResponse {
	if o == nil {
		return nil
	}
	result := &WatchRecoveryStoreShardingInfosResponse{}
	result.RecoveryStoreShardingInfoChanges = make([]*recovery_store_sharding_info.RecoveryStoreShardingInfoChange, len(o.RecoveryStoreShardingInfoChanges))
	for i, sourceValue := range o.RecoveryStoreShardingInfoChanges {
		result.RecoveryStoreShardingInfoChanges[i] = proto.Clone(sourceValue).(*recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchRecoveryStoreShardingInfosResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRecoveryStoreShardingInfosResponse) Merge(source *WatchRecoveryStoreShardingInfosResponse) {
	for _, sourceValue := range source.GetRecoveryStoreShardingInfoChanges() {
		exists := false
		for _, currentValue := range o.RecoveryStoreShardingInfoChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *recovery_store_sharding_info.RecoveryStoreShardingInfoChange
			if sourceValue != nil {
				newDstElement = new(recovery_store_sharding_info.RecoveryStoreShardingInfoChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.RecoveryStoreShardingInfoChanges = append(o.RecoveryStoreShardingInfoChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchRecoveryStoreShardingInfosResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchRecoveryStoreShardingInfosResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRecoveryStoreShardingInfosResponse))
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) MakeFullFieldMask() *WatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask {
	return FullWatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask()
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) MakeDiffFieldMask(other *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) *WatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask()
	}

	res := &WatchRecoveryStoreShardingInfosResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldTerminalPath{selector: WatchRecoveryStoreShardingInfosResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) Clone() *WatchRecoveryStoreShardingInfosResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchRecoveryStoreShardingInfosResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &recovery_store_sharding_info.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &recovery_store_sharding_info.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) Merge(source *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &recovery_store_sharding_info.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &recovery_store_sharding_info.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchRecoveryStoreShardingInfosResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchRecoveryStoreShardingInfosResponse_PageTokenChange))
}

func (o *CreateRecoveryStoreShardingInfoRequest) GotenObjectExt() {}

func (o *CreateRecoveryStoreShardingInfoRequest) MakeFullFieldMask() *CreateRecoveryStoreShardingInfoRequest_FieldMask {
	return FullCreateRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *CreateRecoveryStoreShardingInfoRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *CreateRecoveryStoreShardingInfoRequest) MakeDiffFieldMask(other *CreateRecoveryStoreShardingInfoRequest) *CreateRecoveryStoreShardingInfoRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateRecoveryStoreShardingInfoRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateRecoveryStoreShardingInfoRequest_FieldMask()
	}

	res := &CreateRecoveryStoreShardingInfoRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetRecoveryStoreShardingInfo().MakeDiffFieldMask(other.GetRecoveryStoreShardingInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateRecoveryStoreShardingInfoRequest_FieldSubPath{selector: CreateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateRecoveryStoreShardingInfoRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateRecoveryStoreShardingInfoRequest))
}

func (o *CreateRecoveryStoreShardingInfoRequest) Clone() *CreateRecoveryStoreShardingInfoRequest {
	if o == nil {
		return nil
	}
	result := &CreateRecoveryStoreShardingInfoRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &recovery_store_sharding_info.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.RecoveryStoreShardingInfo = o.RecoveryStoreShardingInfo.Clone()
	return result
}

func (o *CreateRecoveryStoreShardingInfoRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateRecoveryStoreShardingInfoRequest) Merge(source *CreateRecoveryStoreShardingInfoRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &recovery_store_sharding_info.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetRecoveryStoreShardingInfo() != nil {
		if o.RecoveryStoreShardingInfo == nil {
			o.RecoveryStoreShardingInfo = new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
		}
		o.RecoveryStoreShardingInfo.Merge(source.GetRecoveryStoreShardingInfo())
	}
}

func (o *CreateRecoveryStoreShardingInfoRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateRecoveryStoreShardingInfoRequest))
}

func (o *UpdateRecoveryStoreShardingInfoRequest) GotenObjectExt() {}

func (o *UpdateRecoveryStoreShardingInfoRequest) MakeFullFieldMask() *UpdateRecoveryStoreShardingInfoRequest_FieldMask {
	return FullUpdateRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *UpdateRecoveryStoreShardingInfoRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *UpdateRecoveryStoreShardingInfoRequest) MakeDiffFieldMask(other *UpdateRecoveryStoreShardingInfoRequest) *UpdateRecoveryStoreShardingInfoRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateRecoveryStoreShardingInfoRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRecoveryStoreShardingInfoRequest_FieldMask()
	}

	res := &UpdateRecoveryStoreShardingInfoRequest_FieldMask{}
	{
		subMask := o.GetRecoveryStoreShardingInfo().MakeDiffFieldMask(other.GetRecoveryStoreShardingInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequest_FieldSubPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorRecoveryStoreShardingInfo, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequest_FieldSubPath{selector: UpdateRecoveryStoreShardingInfoRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateRecoveryStoreShardingInfoRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRecoveryStoreShardingInfoRequest))
}

func (o *UpdateRecoveryStoreShardingInfoRequest) Clone() *UpdateRecoveryStoreShardingInfoRequest {
	if o == nil {
		return nil
	}
	result := &UpdateRecoveryStoreShardingInfoRequest{}
	result.RecoveryStoreShardingInfo = o.RecoveryStoreShardingInfo.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateRecoveryStoreShardingInfoRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRecoveryStoreShardingInfoRequest) Merge(source *UpdateRecoveryStoreShardingInfoRequest) {
	if source.GetRecoveryStoreShardingInfo() != nil {
		if o.RecoveryStoreShardingInfo == nil {
			o.RecoveryStoreShardingInfo = new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
		}
		o.RecoveryStoreShardingInfo.Merge(source.GetRecoveryStoreShardingInfo())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateRecoveryStoreShardingInfoRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateRecoveryStoreShardingInfoRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRecoveryStoreShardingInfoRequest))
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) GotenObjectExt() {}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) MakeFullFieldMask() *UpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask {
	return FullUpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask()
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask()
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) MakeDiffFieldMask(other *UpdateRecoveryStoreShardingInfoRequest_CAS) *UpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask()
	}

	res := &UpdateRecoveryStoreShardingInfoRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequestCAS_FieldSubPath{selector: UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateRecoveryStoreShardingInfoRequestCAS_FieldTerminalPath{selector: UpdateRecoveryStoreShardingInfoRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) Clone() *UpdateRecoveryStoreShardingInfoRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateRecoveryStoreShardingInfoRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
	return result
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) Merge(source *UpdateRecoveryStoreShardingInfoRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(recovery_store_sharding_info.RecoveryStoreShardingInfo_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateRecoveryStoreShardingInfoRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateRecoveryStoreShardingInfoRequest_CAS))
}

func (o *DeleteRecoveryStoreShardingInfoRequest) GotenObjectExt() {}

func (o *DeleteRecoveryStoreShardingInfoRequest) MakeFullFieldMask() *DeleteRecoveryStoreShardingInfoRequest_FieldMask {
	return FullDeleteRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *DeleteRecoveryStoreShardingInfoRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteRecoveryStoreShardingInfoRequest_FieldMask()
}

func (o *DeleteRecoveryStoreShardingInfoRequest) MakeDiffFieldMask(other *DeleteRecoveryStoreShardingInfoRequest) *DeleteRecoveryStoreShardingInfoRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteRecoveryStoreShardingInfoRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteRecoveryStoreShardingInfoRequest_FieldMask()
	}

	res := &DeleteRecoveryStoreShardingInfoRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteRecoveryStoreShardingInfoRequest_FieldTerminalPath{selector: DeleteRecoveryStoreShardingInfoRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteRecoveryStoreShardingInfoRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteRecoveryStoreShardingInfoRequest))
}

func (o *DeleteRecoveryStoreShardingInfoRequest) Clone() *DeleteRecoveryStoreShardingInfoRequest {
	if o == nil {
		return nil
	}
	result := &DeleteRecoveryStoreShardingInfoRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &recovery_store_sharding_info.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteRecoveryStoreShardingInfoRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteRecoveryStoreShardingInfoRequest) Merge(source *DeleteRecoveryStoreShardingInfoRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &recovery_store_sharding_info.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteRecoveryStoreShardingInfoRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteRecoveryStoreShardingInfoRequest))
}
