// Code generated by protoc-gen-goten-client
// API: RecoveryStoreShardingInfoService
// DO NOT EDIT!!!

package recovery_store_sharding_info_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	recovery_store_sharding_info "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/recovery_store_sharding_info"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &recovery_store_sharding_info.RecoveryStoreShardingInfo{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecoveryStoreShardingInfoServiceClient is the client API for RecoveryStoreShardingInfoService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecoveryStoreShardingInfoServiceClient interface {
	GetRecoveryStoreShardingInfo(ctx context.Context, in *GetRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*recovery_store_sharding_info.RecoveryStoreShardingInfo, error)
	BatchGetRecoveryStoreShardingInfos(ctx context.Context, in *BatchGetRecoveryStoreShardingInfosRequest, opts ...grpc.CallOption) (*BatchGetRecoveryStoreShardingInfosResponse, error)
	ListRecoveryStoreShardingInfos(ctx context.Context, in *ListRecoveryStoreShardingInfosRequest, opts ...grpc.CallOption) (*ListRecoveryStoreShardingInfosResponse, error)
	WatchRecoveryStoreShardingInfo(ctx context.Context, in *WatchRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (WatchRecoveryStoreShardingInfoClientStream, error)
	WatchRecoveryStoreShardingInfos(ctx context.Context, in *WatchRecoveryStoreShardingInfosRequest, opts ...grpc.CallOption) (WatchRecoveryStoreShardingInfosClientStream, error)
	CreateRecoveryStoreShardingInfo(ctx context.Context, in *CreateRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*recovery_store_sharding_info.RecoveryStoreShardingInfo, error)
	UpdateRecoveryStoreShardingInfo(ctx context.Context, in *UpdateRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*recovery_store_sharding_info.RecoveryStoreShardingInfo, error)
	DeleteRecoveryStoreShardingInfo(ctx context.Context, in *DeleteRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewRecoveryStoreShardingInfoServiceClient(cc grpc.ClientConnInterface) RecoveryStoreShardingInfoServiceClient {
	return &client{cc}
}

func (c *client) GetRecoveryStoreShardingInfo(ctx context.Context, in *GetRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*recovery_store_sharding_info.RecoveryStoreShardingInfo, error) {
	out := new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.RecoveryStoreShardingInfoService/GetRecoveryStoreShardingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetRecoveryStoreShardingInfos(ctx context.Context, in *BatchGetRecoveryStoreShardingInfosRequest, opts ...grpc.CallOption) (*BatchGetRecoveryStoreShardingInfosResponse, error) {
	out := new(BatchGetRecoveryStoreShardingInfosResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.RecoveryStoreShardingInfoService/BatchGetRecoveryStoreShardingInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListRecoveryStoreShardingInfos(ctx context.Context, in *ListRecoveryStoreShardingInfosRequest, opts ...grpc.CallOption) (*ListRecoveryStoreShardingInfosResponse, error) {
	out := new(ListRecoveryStoreShardingInfosResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.RecoveryStoreShardingInfoService/ListRecoveryStoreShardingInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchRecoveryStoreShardingInfo(ctx context.Context, in *WatchRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (WatchRecoveryStoreShardingInfoClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchRecoveryStoreShardingInfo",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.RecoveryStoreShardingInfoService/WatchRecoveryStoreShardingInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchRecoveryStoreShardingInfoWatchRecoveryStoreShardingInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchRecoveryStoreShardingInfoClientStream interface {
	Recv() (*WatchRecoveryStoreShardingInfoResponse, error)
	grpc.ClientStream
}

type watchRecoveryStoreShardingInfoWatchRecoveryStoreShardingInfoClient struct {
	grpc.ClientStream
}

func (x *watchRecoveryStoreShardingInfoWatchRecoveryStoreShardingInfoClient) Recv() (*WatchRecoveryStoreShardingInfoResponse, error) {
	m := new(WatchRecoveryStoreShardingInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchRecoveryStoreShardingInfos(ctx context.Context, in *WatchRecoveryStoreShardingInfosRequest, opts ...grpc.CallOption) (WatchRecoveryStoreShardingInfosClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchRecoveryStoreShardingInfos",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.RecoveryStoreShardingInfoService/WatchRecoveryStoreShardingInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchRecoveryStoreShardingInfosWatchRecoveryStoreShardingInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchRecoveryStoreShardingInfosClientStream interface {
	Recv() (*WatchRecoveryStoreShardingInfosResponse, error)
	grpc.ClientStream
}

type watchRecoveryStoreShardingInfosWatchRecoveryStoreShardingInfosClient struct {
	grpc.ClientStream
}

func (x *watchRecoveryStoreShardingInfosWatchRecoveryStoreShardingInfosClient) Recv() (*WatchRecoveryStoreShardingInfosResponse, error) {
	m := new(WatchRecoveryStoreShardingInfosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateRecoveryStoreShardingInfo(ctx context.Context, in *CreateRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*recovery_store_sharding_info.RecoveryStoreShardingInfo, error) {
	out := new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.RecoveryStoreShardingInfoService/CreateRecoveryStoreShardingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateRecoveryStoreShardingInfo(ctx context.Context, in *UpdateRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*recovery_store_sharding_info.RecoveryStoreShardingInfo, error) {
	out := new(recovery_store_sharding_info.RecoveryStoreShardingInfo)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.RecoveryStoreShardingInfoService/UpdateRecoveryStoreShardingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteRecoveryStoreShardingInfo(ctx context.Context, in *DeleteRecoveryStoreShardingInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.RecoveryStoreShardingInfoService/DeleteRecoveryStoreShardingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
