// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_channel_custom.proto
// DO NOT EDIT!!!

package notification_channel_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &notification_channel.NotificationChannel{}
)

func (o *TestNotificationChannelRequest) GotenObjectExt() {}

func (o *TestNotificationChannelRequest) MakeFullFieldMask() *TestNotificationChannelRequest_FieldMask {
	return FullTestNotificationChannelRequest_FieldMask()
}

func (o *TestNotificationChannelRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTestNotificationChannelRequest_FieldMask()
}

func (o *TestNotificationChannelRequest) MakeDiffFieldMask(other *TestNotificationChannelRequest) *TestNotificationChannelRequest_FieldMask {
	if o == nil && other == nil {
		return &TestNotificationChannelRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTestNotificationChannelRequest_FieldMask()
	}

	res := &TestNotificationChannelRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &TestNotificationChannelRequest_FieldTerminalPath{selector: TestNotificationChannelRequest_FieldPathSelectorName})
	}
	return res
}

func (o *TestNotificationChannelRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TestNotificationChannelRequest))
}

func (o *TestNotificationChannelRequest) Clone() *TestNotificationChannelRequest {
	if o == nil {
		return nil
	}
	result := &TestNotificationChannelRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification_channel.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *TestNotificationChannelRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TestNotificationChannelRequest) Merge(source *TestNotificationChannelRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification_channel.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *TestNotificationChannelRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TestNotificationChannelRequest))
}
