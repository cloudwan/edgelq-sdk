// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_channel_service.proto
// DO NOT EDIT!!!

package notification_channel_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetNotificationChannelRequest) GotenObjectExt() {}

func (o *GetNotificationChannelRequest) MakeFullFieldMask() *GetNotificationChannelRequest_FieldMask {
	return FullGetNotificationChannelRequest_FieldMask()
}

func (o *GetNotificationChannelRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetNotificationChannelRequest_FieldMask()
}

func (o *GetNotificationChannelRequest) MakeDiffFieldMask(other *GetNotificationChannelRequest) *GetNotificationChannelRequest_FieldMask {
	if o == nil && other == nil {
		return &GetNotificationChannelRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetNotificationChannelRequest_FieldMask()
	}

	res := &GetNotificationChannelRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetNotificationChannelRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetNotificationChannelRequest))
}

func (o *GetNotificationChannelRequest) Clone() *GetNotificationChannelRequest {
	if o == nil {
		return nil
	}
	result := &GetNotificationChannelRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification_channel.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification_channel.NotificationChannel_FieldMask)
	result.View = o.View
	return result
}

func (o *GetNotificationChannelRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetNotificationChannelRequest) Merge(source *GetNotificationChannelRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification_channel.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetNotificationChannelRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetNotificationChannelRequest))
}

func (o *BatchGetNotificationChannelsRequest) GotenObjectExt() {}

func (o *BatchGetNotificationChannelsRequest) MakeFullFieldMask() *BatchGetNotificationChannelsRequest_FieldMask {
	return FullBatchGetNotificationChannelsRequest_FieldMask()
}

func (o *BatchGetNotificationChannelsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetNotificationChannelsRequest_FieldMask()
}

func (o *BatchGetNotificationChannelsRequest) MakeDiffFieldMask(other *BatchGetNotificationChannelsRequest) *BatchGetNotificationChannelsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetNotificationChannelsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetNotificationChannelsRequest_FieldMask()
	}

	res := &BatchGetNotificationChannelsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetNotificationChannelsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetNotificationChannelsRequest))
}

func (o *BatchGetNotificationChannelsRequest) Clone() *BatchGetNotificationChannelsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetNotificationChannelsRequest{}
	result.Names = make([]*notification_channel.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &notification_channel.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification_channel.NotificationChannel_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetNotificationChannelsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetNotificationChannelsRequest) Merge(source *BatchGetNotificationChannelsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification_channel.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &notification_channel.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetNotificationChannelsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetNotificationChannelsRequest))
}

func (o *BatchGetNotificationChannelsResponse) GotenObjectExt() {}

func (o *BatchGetNotificationChannelsResponse) MakeFullFieldMask() *BatchGetNotificationChannelsResponse_FieldMask {
	return FullBatchGetNotificationChannelsResponse_FieldMask()
}

func (o *BatchGetNotificationChannelsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetNotificationChannelsResponse_FieldMask()
}

func (o *BatchGetNotificationChannelsResponse) MakeDiffFieldMask(other *BatchGetNotificationChannelsResponse) *BatchGetNotificationChannelsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetNotificationChannelsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetNotificationChannelsResponse_FieldMask()
	}

	res := &BatchGetNotificationChannelsResponse_FieldMask{}

	if len(o.GetNotificationChannels()) == len(other.GetNotificationChannels()) {
		for i, lValue := range o.GetNotificationChannels() {
			rValue := other.GetNotificationChannels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetNotificationChannelsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetNotificationChannelsResponse))
}

func (o *BatchGetNotificationChannelsResponse) Clone() *BatchGetNotificationChannelsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetNotificationChannelsResponse{}
	result.NotificationChannels = make([]*notification_channel.NotificationChannel, len(o.NotificationChannels))
	for i, sourceValue := range o.NotificationChannels {
		result.NotificationChannels[i] = sourceValue.Clone()
	}
	result.Missing = make([]*notification_channel.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &notification_channel.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetNotificationChannelsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetNotificationChannelsResponse) Merge(source *BatchGetNotificationChannelsResponse) {
	for _, sourceValue := range source.GetNotificationChannels() {
		exists := false
		for _, currentValue := range o.NotificationChannels {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification_channel.NotificationChannel
			if sourceValue != nil {
				newDstElement = new(notification_channel.NotificationChannel)
				newDstElement.Merge(sourceValue)
			}
			o.NotificationChannels = append(o.NotificationChannels, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification_channel.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &notification_channel.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetNotificationChannelsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetNotificationChannelsResponse))
}

func (o *ListNotificationChannelsRequest) GotenObjectExt() {}

func (o *ListNotificationChannelsRequest) MakeFullFieldMask() *ListNotificationChannelsRequest_FieldMask {
	return FullListNotificationChannelsRequest_FieldMask()
}

func (o *ListNotificationChannelsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListNotificationChannelsRequest_FieldMask()
}

func (o *ListNotificationChannelsRequest) MakeDiffFieldMask(other *ListNotificationChannelsRequest) *ListNotificationChannelsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListNotificationChannelsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListNotificationChannelsRequest_FieldMask()
	}

	res := &ListNotificationChannelsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListNotificationChannelsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListNotificationChannelsRequest))
}

func (o *ListNotificationChannelsRequest) Clone() *ListNotificationChannelsRequest {
	if o == nil {
		return nil
	}
	result := &ListNotificationChannelsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification_channel.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &notification_channel.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &notification_channel.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &notification_channel.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification_channel.NotificationChannel_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListNotificationChannelsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListNotificationChannelsRequest) Merge(source *ListNotificationChannelsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification_channel.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &notification_channel.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &notification_channel.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &notification_channel.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListNotificationChannelsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListNotificationChannelsRequest))
}

func (o *ListNotificationChannelsResponse) GotenObjectExt() {}

func (o *ListNotificationChannelsResponse) MakeFullFieldMask() *ListNotificationChannelsResponse_FieldMask {
	return FullListNotificationChannelsResponse_FieldMask()
}

func (o *ListNotificationChannelsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListNotificationChannelsResponse_FieldMask()
}

func (o *ListNotificationChannelsResponse) MakeDiffFieldMask(other *ListNotificationChannelsResponse) *ListNotificationChannelsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListNotificationChannelsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListNotificationChannelsResponse_FieldMask()
	}

	res := &ListNotificationChannelsResponse_FieldMask{}

	if len(o.GetNotificationChannels()) == len(other.GetNotificationChannels()) {
		for i, lValue := range o.GetNotificationChannels() {
			rValue := other.GetNotificationChannels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListNotificationChannelsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListNotificationChannelsResponse))
}

func (o *ListNotificationChannelsResponse) Clone() *ListNotificationChannelsResponse {
	if o == nil {
		return nil
	}
	result := &ListNotificationChannelsResponse{}
	result.NotificationChannels = make([]*notification_channel.NotificationChannel, len(o.NotificationChannels))
	for i, sourceValue := range o.NotificationChannels {
		result.NotificationChannels[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &notification_channel.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &notification_channel.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListNotificationChannelsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListNotificationChannelsResponse) Merge(source *ListNotificationChannelsResponse) {
	for _, sourceValue := range source.GetNotificationChannels() {
		exists := false
		for _, currentValue := range o.NotificationChannels {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification_channel.NotificationChannel
			if sourceValue != nil {
				newDstElement = new(notification_channel.NotificationChannel)
				newDstElement.Merge(sourceValue)
			}
			o.NotificationChannels = append(o.NotificationChannels, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &notification_channel.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &notification_channel.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListNotificationChannelsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListNotificationChannelsResponse))
}

func (o *WatchNotificationChannelRequest) GotenObjectExt() {}

func (o *WatchNotificationChannelRequest) MakeFullFieldMask() *WatchNotificationChannelRequest_FieldMask {
	return FullWatchNotificationChannelRequest_FieldMask()
}

func (o *WatchNotificationChannelRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationChannelRequest_FieldMask()
}

func (o *WatchNotificationChannelRequest) MakeDiffFieldMask(other *WatchNotificationChannelRequest) *WatchNotificationChannelRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationChannelRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationChannelRequest_FieldMask()
	}

	res := &WatchNotificationChannelRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchNotificationChannelRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationChannelRequest))
}

func (o *WatchNotificationChannelRequest) Clone() *WatchNotificationChannelRequest {
	if o == nil {
		return nil
	}
	result := &WatchNotificationChannelRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification_channel.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification_channel.NotificationChannel_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchNotificationChannelRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationChannelRequest) Merge(source *WatchNotificationChannelRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification_channel.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchNotificationChannelRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationChannelRequest))
}

func (o *WatchNotificationChannelResponse) GotenObjectExt() {}

func (o *WatchNotificationChannelResponse) MakeFullFieldMask() *WatchNotificationChannelResponse_FieldMask {
	return FullWatchNotificationChannelResponse_FieldMask()
}

func (o *WatchNotificationChannelResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationChannelResponse_FieldMask()
}

func (o *WatchNotificationChannelResponse) MakeDiffFieldMask(other *WatchNotificationChannelResponse) *WatchNotificationChannelResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationChannelResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationChannelResponse_FieldMask()
	}

	res := &WatchNotificationChannelResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchNotificationChannelResponse_FieldTerminalPath{selector: WatchNotificationChannelResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchNotificationChannelResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationChannelResponse))
}

func (o *WatchNotificationChannelResponse) Clone() *WatchNotificationChannelResponse {
	if o == nil {
		return nil
	}
	result := &WatchNotificationChannelResponse{}
	result.Change = proto.Clone(o.Change).(*notification_channel.NotificationChannelChange)
	return result
}

func (o *WatchNotificationChannelResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationChannelResponse) Merge(source *WatchNotificationChannelResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(notification_channel.NotificationChannelChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchNotificationChannelResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationChannelResponse))
}

func (o *WatchNotificationChannelsRequest) GotenObjectExt() {}

func (o *WatchNotificationChannelsRequest) MakeFullFieldMask() *WatchNotificationChannelsRequest_FieldMask {
	return FullWatchNotificationChannelsRequest_FieldMask()
}

func (o *WatchNotificationChannelsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationChannelsRequest_FieldMask()
}

func (o *WatchNotificationChannelsRequest) MakeDiffFieldMask(other *WatchNotificationChannelsRequest) *WatchNotificationChannelsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationChannelsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationChannelsRequest_FieldMask()
	}

	res := &WatchNotificationChannelsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchNotificationChannelsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationChannelsRequest))
}

func (o *WatchNotificationChannelsRequest) Clone() *WatchNotificationChannelsRequest {
	if o == nil {
		return nil
	}
	result := &WatchNotificationChannelsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification_channel.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &notification_channel.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &notification_channel.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &notification_channel.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*notification_channel.NotificationChannel_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchNotificationChannelsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationChannelsRequest) Merge(source *WatchNotificationChannelsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification_channel.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &notification_channel.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &notification_channel.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &notification_channel.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchNotificationChannelsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationChannelsRequest))
}

func (o *WatchNotificationChannelsResponse) GotenObjectExt() {}

func (o *WatchNotificationChannelsResponse) MakeFullFieldMask() *WatchNotificationChannelsResponse_FieldMask {
	return FullWatchNotificationChannelsResponse_FieldMask()
}

func (o *WatchNotificationChannelsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationChannelsResponse_FieldMask()
}

func (o *WatchNotificationChannelsResponse) MakeDiffFieldMask(other *WatchNotificationChannelsResponse) *WatchNotificationChannelsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationChannelsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationChannelsResponse_FieldMask()
	}

	res := &WatchNotificationChannelsResponse_FieldMask{}

	if len(o.GetNotificationChannelChanges()) == len(other.GetNotificationChannelChanges()) {
		for i, lValue := range o.GetNotificationChannelChanges() {
			rValue := other.GetNotificationChannelChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldSubPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchNotificationChannelsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationChannelsResponse))
}

func (o *WatchNotificationChannelsResponse) Clone() *WatchNotificationChannelsResponse {
	if o == nil {
		return nil
	}
	result := &WatchNotificationChannelsResponse{}
	result.NotificationChannelChanges = make([]*notification_channel.NotificationChannelChange, len(o.NotificationChannelChanges))
	for i, sourceValue := range o.NotificationChannelChanges {
		result.NotificationChannelChanges[i] = proto.Clone(sourceValue).(*notification_channel.NotificationChannelChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchNotificationChannelsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationChannelsResponse) Merge(source *WatchNotificationChannelsResponse) {
	for _, sourceValue := range source.GetNotificationChannelChanges() {
		exists := false
		for _, currentValue := range o.NotificationChannelChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *notification_channel.NotificationChannelChange
			if sourceValue != nil {
				newDstElement = new(notification_channel.NotificationChannelChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.NotificationChannelChanges = append(o.NotificationChannelChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchNotificationChannelsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchNotificationChannelsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationChannelsResponse))
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchNotificationChannelsResponse_PageTokenChange) MakeFullFieldMask() *WatchNotificationChannelsResponse_PageTokenChange_FieldMask {
	return FullWatchNotificationChannelsResponse_PageTokenChange_FieldMask()
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchNotificationChannelsResponse_PageTokenChange_FieldMask()
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchNotificationChannelsResponse_PageTokenChange) *WatchNotificationChannelsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchNotificationChannelsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchNotificationChannelsResponse_PageTokenChange))
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) Clone() *WatchNotificationChannelsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchNotificationChannelsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &notification_channel.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &notification_channel.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) Merge(source *WatchNotificationChannelsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &notification_channel.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &notification_channel.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchNotificationChannelsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

func (o *CreateNotificationChannelRequest) GotenObjectExt() {}

func (o *CreateNotificationChannelRequest) MakeFullFieldMask() *CreateNotificationChannelRequest_FieldMask {
	return FullCreateNotificationChannelRequest_FieldMask()
}

func (o *CreateNotificationChannelRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateNotificationChannelRequest_FieldMask()
}

func (o *CreateNotificationChannelRequest) MakeDiffFieldMask(other *CreateNotificationChannelRequest) *CreateNotificationChannelRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateNotificationChannelRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateNotificationChannelRequest_FieldMask()
	}

	res := &CreateNotificationChannelRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateNotificationChannelRequest_FieldTerminalPath{selector: CreateNotificationChannelRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetNotificationChannel().MakeDiffFieldMask(other.GetNotificationChannel())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateNotificationChannelRequest_FieldTerminalPath{selector: CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateNotificationChannelRequest_FieldSubPath{selector: CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateNotificationChannelRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateNotificationChannelRequest))
}

func (o *CreateNotificationChannelRequest) Clone() *CreateNotificationChannelRequest {
	if o == nil {
		return nil
	}
	result := &CreateNotificationChannelRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &notification_channel.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.NotificationChannel = o.NotificationChannel.Clone()
	return result
}

func (o *CreateNotificationChannelRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateNotificationChannelRequest) Merge(source *CreateNotificationChannelRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &notification_channel.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetNotificationChannel() != nil {
		if o.NotificationChannel == nil {
			o.NotificationChannel = new(notification_channel.NotificationChannel)
		}
		o.NotificationChannel.Merge(source.GetNotificationChannel())
	}
}

func (o *CreateNotificationChannelRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateNotificationChannelRequest))
}

func (o *UpdateNotificationChannelRequest) GotenObjectExt() {}

func (o *UpdateNotificationChannelRequest) MakeFullFieldMask() *UpdateNotificationChannelRequest_FieldMask {
	return FullUpdateNotificationChannelRequest_FieldMask()
}

func (o *UpdateNotificationChannelRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateNotificationChannelRequest_FieldMask()
}

func (o *UpdateNotificationChannelRequest) MakeDiffFieldMask(other *UpdateNotificationChannelRequest) *UpdateNotificationChannelRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateNotificationChannelRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateNotificationChannelRequest_FieldMask()
	}

	res := &UpdateNotificationChannelRequest_FieldMask{}
	{
		subMask := o.GetNotificationChannel().MakeDiffFieldMask(other.GetNotificationChannel())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateNotificationChannelRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateNotificationChannelRequest))
}

func (o *UpdateNotificationChannelRequest) Clone() *UpdateNotificationChannelRequest {
	if o == nil {
		return nil
	}
	result := &UpdateNotificationChannelRequest{}
	result.NotificationChannel = o.NotificationChannel.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*notification_channel.NotificationChannel_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateNotificationChannelRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateNotificationChannelRequest) Merge(source *UpdateNotificationChannelRequest) {
	if source.GetNotificationChannel() != nil {
		if o.NotificationChannel == nil {
			o.NotificationChannel = new(notification_channel.NotificationChannel)
		}
		o.NotificationChannel.Merge(source.GetNotificationChannel())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateNotificationChannelRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateNotificationChannelRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateNotificationChannelRequest))
}

func (o *UpdateNotificationChannelRequest_CAS) GotenObjectExt() {}

func (o *UpdateNotificationChannelRequest_CAS) MakeFullFieldMask() *UpdateNotificationChannelRequest_CAS_FieldMask {
	return FullUpdateNotificationChannelRequest_CAS_FieldMask()
}

func (o *UpdateNotificationChannelRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateNotificationChannelRequest_CAS_FieldMask()
}

func (o *UpdateNotificationChannelRequest_CAS) MakeDiffFieldMask(other *UpdateNotificationChannelRequest_CAS) *UpdateNotificationChannelRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateNotificationChannelRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateNotificationChannelRequest_CAS_FieldMask()
	}

	res := &UpdateNotificationChannelRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateNotificationChannelRequestCAS_FieldSubPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateNotificationChannelRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateNotificationChannelRequest_CAS))
}

func (o *UpdateNotificationChannelRequest_CAS) Clone() *UpdateNotificationChannelRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateNotificationChannelRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*notification_channel.NotificationChannel_FieldMask)
	return result
}

func (o *UpdateNotificationChannelRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateNotificationChannelRequest_CAS) Merge(source *UpdateNotificationChannelRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(notification_channel.NotificationChannel)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(notification_channel.NotificationChannel_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateNotificationChannelRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateNotificationChannelRequest_CAS))
}

func (o *DeleteNotificationChannelRequest) GotenObjectExt() {}

func (o *DeleteNotificationChannelRequest) MakeFullFieldMask() *DeleteNotificationChannelRequest_FieldMask {
	return FullDeleteNotificationChannelRequest_FieldMask()
}

func (o *DeleteNotificationChannelRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteNotificationChannelRequest_FieldMask()
}

func (o *DeleteNotificationChannelRequest) MakeDiffFieldMask(other *DeleteNotificationChannelRequest) *DeleteNotificationChannelRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteNotificationChannelRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteNotificationChannelRequest_FieldMask()
	}

	res := &DeleteNotificationChannelRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteNotificationChannelRequest_FieldTerminalPath{selector: DeleteNotificationChannelRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteNotificationChannelRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteNotificationChannelRequest))
}

func (o *DeleteNotificationChannelRequest) Clone() *DeleteNotificationChannelRequest {
	if o == nil {
		return nil
	}
	result := &DeleteNotificationChannelRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &notification_channel.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteNotificationChannelRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteNotificationChannelRequest) Merge(source *DeleteNotificationChannelRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &notification_channel.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteNotificationChannelRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteNotificationChannelRequest))
}
