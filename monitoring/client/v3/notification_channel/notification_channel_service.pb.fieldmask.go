// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_channel_service.proto
// DO NOT EDIT!!!

package notification_channel_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetNotificationChannelRequest_FieldMask struct {
	Paths []GetNotificationChannelRequest_FieldPath
}

func FullGetNotificationChannelRequest_FieldMask() *GetNotificationChannelRequest_FieldMask {
	res := &GetNotificationChannelRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetNotificationChannelRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetNotificationChannelRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetNotificationChannelRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetNotificationChannelRequest_FieldPath(raw)
	})
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetNotificationChannelRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) Subtract(other *GetNotificationChannelRequest_FieldMask) *GetNotificationChannelRequest_FieldMask {
	result := &GetNotificationChannelRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetNotificationChannelRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetNotificationChannelRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetNotificationChannelRequest_FieldMask) FilterInputFields() *GetNotificationChannelRequest_FieldMask {
	result := &GetNotificationChannelRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetNotificationChannelRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetNotificationChannelRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetNotificationChannelRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetNotificationChannelRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetNotificationChannelRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) AppendPath(path GetNotificationChannelRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetNotificationChannelRequest_FieldPath))
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) GetPaths() []GetNotificationChannelRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetNotificationChannelRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) Set(target, source *GetNotificationChannelRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetNotificationChannelRequest), source.(*GetNotificationChannelRequest))
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) Project(source *GetNotificationChannelRequest) *GetNotificationChannelRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetNotificationChannelRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetNotificationChannelRequest_FieldTerminalPath:
			switch tp.selector {
			case GetNotificationChannelRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetNotificationChannelRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetNotificationChannelRequest))
}

func (fieldMask *GetNotificationChannelRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetNotificationChannelsRequest_FieldMask struct {
	Paths []BatchGetNotificationChannelsRequest_FieldPath
}

func FullBatchGetNotificationChannelsRequest_FieldMask() *BatchGetNotificationChannelsRequest_FieldMask {
	res := &BatchGetNotificationChannelsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetNotificationChannelsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetNotificationChannelsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetNotificationChannelsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) Subtract(other *BatchGetNotificationChannelsRequest_FieldMask) *BatchGetNotificationChannelsRequest_FieldMask {
	result := &BatchGetNotificationChannelsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetNotificationChannelsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetNotificationChannelsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) FilterInputFields() *BatchGetNotificationChannelsRequest_FieldMask {
	result := &BatchGetNotificationChannelsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetNotificationChannelsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetNotificationChannelsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetNotificationChannelsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetNotificationChannelsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) AppendPath(path BatchGetNotificationChannelsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetNotificationChannelsRequest_FieldPath))
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) GetPaths() []BatchGetNotificationChannelsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetNotificationChannelsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) Set(target, source *BatchGetNotificationChannelsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetNotificationChannelsRequest), source.(*BatchGetNotificationChannelsRequest))
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) Project(source *BatchGetNotificationChannelsRequest) *BatchGetNotificationChannelsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetNotificationChannelsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetNotificationChannelsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetNotificationChannelsRequest))
}

func (fieldMask *BatchGetNotificationChannelsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetNotificationChannelsResponse_FieldMask struct {
	Paths []BatchGetNotificationChannelsResponse_FieldPath
}

func FullBatchGetNotificationChannelsResponse_FieldMask() *BatchGetNotificationChannelsResponse_FieldMask {
	res := &BatchGetNotificationChannelsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels})
	res.Paths = append(res.Paths, &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetNotificationChannelsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetNotificationChannelsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetNotificationChannelsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) Subtract(other *BatchGetNotificationChannelsResponse_FieldMask) *BatchGetNotificationChannelsResponse_FieldMask {
	result := &BatchGetNotificationChannelsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetNotificationChannelsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels: &notification_channel.NotificationChannel_FieldMask{},
	}
	mySubMasks := map[BatchGetNotificationChannelsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels: &notification_channel.NotificationChannel_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetNotificationChannelsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetNotificationChannelsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetNotificationChannelsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
						mySubMasks[BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels] = notification_channel.FullNotificationChannel_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetNotificationChannelsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetNotificationChannelsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetNotificationChannelsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) FilterInputFields() *BatchGetNotificationChannelsResponse_FieldMask {
	result := &BatchGetNotificationChannelsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			if _, ok := path.(*BatchGetNotificationChannelsResponse_FieldTerminalPath); ok {
				for _, subpath := range notification_channel.FullNotificationChannel_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetNotificationChannelsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetNotificationChannelsResponse_FieldSubPath); ok {
				selectedMask := &notification_channel.NotificationChannel_FieldMask{
					Paths: []notification_channel.NotificationChannel_FieldPath{sub.subPath.(notification_channel.NotificationChannel_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetNotificationChannelsResponse_FieldSubPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetNotificationChannelsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetNotificationChannelsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetNotificationChannelsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetNotificationChannelsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) AppendPath(path BatchGetNotificationChannelsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetNotificationChannelsResponse_FieldPath))
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) GetPaths() []BatchGetNotificationChannelsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetNotificationChannelsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) Set(target, source *BatchGetNotificationChannelsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetNotificationChannelsResponse), source.(*BatchGetNotificationChannelsResponse))
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) Project(source *BatchGetNotificationChannelsResponse) *BatchGetNotificationChannelsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetNotificationChannelsResponse{}
	notificationChannelsMask := &notification_channel.NotificationChannel_FieldMask{}
	wholeNotificationChannelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetNotificationChannelsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
				result.NotificationChannels = source.NotificationChannels
				wholeNotificationChannelsAccepted = true
			case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetNotificationChannelsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
				notificationChannelsMask.AppendPath(tp.subPath.(notification_channel.NotificationChannel_FieldPath))
			}
		}
	}
	if wholeNotificationChannelsAccepted == false && len(notificationChannelsMask.Paths) > 0 {
		for _, sourceItem := range source.GetNotificationChannels() {
			result.NotificationChannels = append(result.NotificationChannels, notificationChannelsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetNotificationChannelsResponse))
}

func (fieldMask *BatchGetNotificationChannelsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListNotificationChannelsRequest_FieldMask struct {
	Paths []ListNotificationChannelsRequest_FieldPath
}

func FullListNotificationChannelsRequest_FieldMask() *ListNotificationChannelsRequest_FieldMask {
	res := &ListNotificationChannelsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListNotificationChannelsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListNotificationChannelsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListNotificationChannelsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListNotificationChannelsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) Subtract(other *ListNotificationChannelsRequest_FieldMask) *ListNotificationChannelsRequest_FieldMask {
	result := &ListNotificationChannelsRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListNotificationChannelsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListNotificationChannelsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListNotificationChannelsRequest_FieldMask) FilterInputFields() *ListNotificationChannelsRequest_FieldMask {
	result := &ListNotificationChannelsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListNotificationChannelsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListNotificationChannelsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListNotificationChannelsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListNotificationChannelsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListNotificationChannelsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) AppendPath(path ListNotificationChannelsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListNotificationChannelsRequest_FieldPath))
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) GetPaths() []ListNotificationChannelsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListNotificationChannelsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) Set(target, source *ListNotificationChannelsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListNotificationChannelsRequest), source.(*ListNotificationChannelsRequest))
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) Project(source *ListNotificationChannelsRequest) *ListNotificationChannelsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListNotificationChannelsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListNotificationChannelsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListNotificationChannelsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListNotificationChannelsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListNotificationChannelsRequest_FieldPathSelectorView:
				result.View = source.View
			case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListNotificationChannelsRequest))
}

func (fieldMask *ListNotificationChannelsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListNotificationChannelsResponse_FieldMask struct {
	Paths []ListNotificationChannelsResponse_FieldPath
}

func FullListNotificationChannelsResponse_FieldMask() *ListNotificationChannelsResponse_FieldMask {
	res := &ListNotificationChannelsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels})
	res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListNotificationChannelsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListNotificationChannelsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListNotificationChannelsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListNotificationChannelsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) Subtract(other *ListNotificationChannelsResponse_FieldMask) *ListNotificationChannelsResponse_FieldMask {
	result := &ListNotificationChannelsResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListNotificationChannelsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels: &notification_channel.NotificationChannel_FieldMask{},
	}
	mySubMasks := map[ListNotificationChannelsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels: &notification_channel.NotificationChannel_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListNotificationChannelsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListNotificationChannelsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListNotificationChannelsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
						mySubMasks[ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels] = notification_channel.FullNotificationChannel_FieldMask()
					}
				} else if tp, ok := path.(*ListNotificationChannelsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListNotificationChannelsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListNotificationChannelsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListNotificationChannelsResponse_FieldMask) FilterInputFields() *ListNotificationChannelsResponse_FieldMask {
	result := &ListNotificationChannelsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			if _, ok := path.(*ListNotificationChannelsResponse_FieldTerminalPath); ok {
				for _, subpath := range notification_channel.FullNotificationChannel_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListNotificationChannelsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListNotificationChannelsResponse_FieldSubPath); ok {
				selectedMask := &notification_channel.NotificationChannel_FieldMask{
					Paths: []notification_channel.NotificationChannel_FieldPath{sub.subPath.(notification_channel.NotificationChannel_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListNotificationChannelsResponse_FieldSubPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListNotificationChannelsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListNotificationChannelsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListNotificationChannelsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListNotificationChannelsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListNotificationChannelsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) AppendPath(path ListNotificationChannelsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListNotificationChannelsResponse_FieldPath))
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) GetPaths() []ListNotificationChannelsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListNotificationChannelsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) Set(target, source *ListNotificationChannelsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListNotificationChannelsResponse), source.(*ListNotificationChannelsResponse))
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) Project(source *ListNotificationChannelsResponse) *ListNotificationChannelsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListNotificationChannelsResponse{}
	notificationChannelsMask := &notification_channel.NotificationChannel_FieldMask{}
	wholeNotificationChannelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListNotificationChannelsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
				result.NotificationChannels = source.NotificationChannels
				wholeNotificationChannelsAccepted = true
			case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListNotificationChannelsResponse_FieldSubPath:
			switch tp.selector {
			case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
				notificationChannelsMask.AppendPath(tp.subPath.(notification_channel.NotificationChannel_FieldPath))
			}
		}
	}
	if wholeNotificationChannelsAccepted == false && len(notificationChannelsMask.Paths) > 0 {
		for _, sourceItem := range source.GetNotificationChannels() {
			result.NotificationChannels = append(result.NotificationChannels, notificationChannelsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListNotificationChannelsResponse))
}

func (fieldMask *ListNotificationChannelsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchNotificationChannelRequest_FieldMask struct {
	Paths []WatchNotificationChannelRequest_FieldPath
}

func FullWatchNotificationChannelRequest_FieldMask() *WatchNotificationChannelRequest_FieldMask {
	res := &WatchNotificationChannelRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchNotificationChannelRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchNotificationChannelRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchNotificationChannelRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchNotificationChannelRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) Subtract(other *WatchNotificationChannelRequest_FieldMask) *WatchNotificationChannelRequest_FieldMask {
	result := &WatchNotificationChannelRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchNotificationChannelRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchNotificationChannelRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchNotificationChannelRequest_FieldMask) FilterInputFields() *WatchNotificationChannelRequest_FieldMask {
	result := &WatchNotificationChannelRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchNotificationChannelRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchNotificationChannelRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchNotificationChannelRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchNotificationChannelRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchNotificationChannelRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) AppendPath(path WatchNotificationChannelRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchNotificationChannelRequest_FieldPath))
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) GetPaths() []WatchNotificationChannelRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchNotificationChannelRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) Set(target, source *WatchNotificationChannelRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchNotificationChannelRequest), source.(*WatchNotificationChannelRequest))
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) Project(source *WatchNotificationChannelRequest) *WatchNotificationChannelRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchNotificationChannelRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchNotificationChannelRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchNotificationChannelRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchNotificationChannelRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchNotificationChannelRequest))
}

func (fieldMask *WatchNotificationChannelRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchNotificationChannelResponse_FieldMask struct {
	Paths []WatchNotificationChannelResponse_FieldPath
}

func FullWatchNotificationChannelResponse_FieldMask() *WatchNotificationChannelResponse_FieldMask {
	res := &WatchNotificationChannelResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchNotificationChannelResponse_FieldTerminalPath{selector: WatchNotificationChannelResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchNotificationChannelResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchNotificationChannelResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchNotificationChannelResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchNotificationChannelResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) Subtract(other *WatchNotificationChannelResponse_FieldMask) *WatchNotificationChannelResponse_FieldMask {
	result := &WatchNotificationChannelResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchNotificationChannelResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchNotificationChannelResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchNotificationChannelResponse_FieldMask) FilterInputFields() *WatchNotificationChannelResponse_FieldMask {
	result := &WatchNotificationChannelResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchNotificationChannelResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchNotificationChannelResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchNotificationChannelResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchNotificationChannelResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchNotificationChannelResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) AppendPath(path WatchNotificationChannelResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchNotificationChannelResponse_FieldPath))
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) GetPaths() []WatchNotificationChannelResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchNotificationChannelResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) Set(target, source *WatchNotificationChannelResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchNotificationChannelResponse), source.(*WatchNotificationChannelResponse))
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) Project(source *WatchNotificationChannelResponse) *WatchNotificationChannelResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchNotificationChannelResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchNotificationChannelResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchNotificationChannelResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchNotificationChannelResponse))
}

func (fieldMask *WatchNotificationChannelResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchNotificationChannelsRequest_FieldMask struct {
	Paths []WatchNotificationChannelsRequest_FieldPath
}

func FullWatchNotificationChannelsRequest_FieldMask() *WatchNotificationChannelsRequest_FieldMask {
	res := &WatchNotificationChannelsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchNotificationChannelsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchNotificationChannelsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchNotificationChannelsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchNotificationChannelsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) Subtract(other *WatchNotificationChannelsRequest_FieldMask) *WatchNotificationChannelsRequest_FieldMask {
	result := &WatchNotificationChannelsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchNotificationChannelsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchNotificationChannelsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchNotificationChannelsRequest_FieldMask) FilterInputFields() *WatchNotificationChannelsRequest_FieldMask {
	result := &WatchNotificationChannelsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchNotificationChannelsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchNotificationChannelsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchNotificationChannelsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchNotificationChannelsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchNotificationChannelsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) AppendPath(path WatchNotificationChannelsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchNotificationChannelsRequest_FieldPath))
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) GetPaths() []WatchNotificationChannelsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchNotificationChannelsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) Set(target, source *WatchNotificationChannelsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchNotificationChannelsRequest), source.(*WatchNotificationChannelsRequest))
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) Project(source *WatchNotificationChannelsRequest) *WatchNotificationChannelsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchNotificationChannelsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchNotificationChannelsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchNotificationChannelsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchNotificationChannelsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchNotificationChannelsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchNotificationChannelsRequest))
}

func (fieldMask *WatchNotificationChannelsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchNotificationChannelsResponse_FieldMask struct {
	Paths []WatchNotificationChannelsResponse_FieldPath
}

func FullWatchNotificationChannelsResponse_FieldMask() *WatchNotificationChannelsResponse_FieldMask {
	res := &WatchNotificationChannelsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchNotificationChannelsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchNotificationChannelsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchNotificationChannelsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchNotificationChannelsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) Subtract(other *WatchNotificationChannelsResponse_FieldMask) *WatchNotificationChannelsResponse_FieldMask {
	result := &WatchNotificationChannelsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchNotificationChannelsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange: &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchNotificationChannelsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange: &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchNotificationChannelsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchNotificationChannelsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchNotificationChannelsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange] = FullWatchNotificationChannelsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchNotificationChannelsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchNotificationChannelsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchNotificationChannelsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchNotificationChannelsResponse_FieldMask) FilterInputFields() *WatchNotificationChannelsResponse_FieldMask {
	result := &WatchNotificationChannelsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchNotificationChannelsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchNotificationChannelsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchNotificationChannelsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchNotificationChannelsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchNotificationChannelsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) AppendPath(path WatchNotificationChannelsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchNotificationChannelsResponse_FieldPath))
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) GetPaths() []WatchNotificationChannelsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchNotificationChannelsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) Set(target, source *WatchNotificationChannelsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchNotificationChannelsResponse), source.(*WatchNotificationChannelsResponse))
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) Project(source *WatchNotificationChannelsResponse) *WatchNotificationChannelsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchNotificationChannelsResponse{}
	pageTokenChangeMask := &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchNotificationChannelsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
				result.NotificationChannelChanges = source.NotificationChannelChanges
			case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchNotificationChannelsResponse_FieldSubPath:
			switch tp.selector {
			case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchNotificationChannelsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchNotificationChannelsResponse))
}

func (fieldMask *WatchNotificationChannelsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchNotificationChannelsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchNotificationChannelsResponsePageTokenChange_FieldPath
}

func FullWatchNotificationChannelsResponse_PageTokenChange_FieldMask() *WatchNotificationChannelsResponse_PageTokenChange_FieldMask {
	res := &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Subtract(other *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) *WatchNotificationChannelsResponse_PageTokenChange_FieldMask {
	result := &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchNotificationChannelsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchNotificationChannelsResponse_PageTokenChange_FieldMask {
	result := &WatchNotificationChannelsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchNotificationChannelsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchNotificationChannelsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) AppendPath(path WatchNotificationChannelsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchNotificationChannelsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) GetPaths() []WatchNotificationChannelsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Set(target, source *WatchNotificationChannelsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchNotificationChannelsResponse_PageTokenChange), source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) Project(source *WatchNotificationChannelsResponse_PageTokenChange) *WatchNotificationChannelsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchNotificationChannelsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

func (fieldMask *WatchNotificationChannelsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateNotificationChannelRequest_FieldMask struct {
	Paths []CreateNotificationChannelRequest_FieldPath
}

func FullCreateNotificationChannelRequest_FieldMask() *CreateNotificationChannelRequest_FieldMask {
	res := &CreateNotificationChannelRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateNotificationChannelRequest_FieldTerminalPath{selector: CreateNotificationChannelRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateNotificationChannelRequest_FieldTerminalPath{selector: CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel})
	return res
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateNotificationChannelRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateNotificationChannelRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateNotificationChannelRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateNotificationChannelRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) Subtract(other *CreateNotificationChannelRequest_FieldMask) *CreateNotificationChannelRequest_FieldMask {
	result := &CreateNotificationChannelRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateNotificationChannelRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel: &notification_channel.NotificationChannel_FieldMask{},
	}
	mySubMasks := map[CreateNotificationChannelRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel: &notification_channel.NotificationChannel_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateNotificationChannelRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateNotificationChannelRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateNotificationChannelRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
						mySubMasks[CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel] = notification_channel.FullNotificationChannel_FieldMask()
					}
				} else if tp, ok := path.(*CreateNotificationChannelRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateNotificationChannelRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateNotificationChannelRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateNotificationChannelRequest_FieldMask) FilterInputFields() *CreateNotificationChannelRequest_FieldMask {
	result := &CreateNotificationChannelRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			if _, ok := path.(*CreateNotificationChannelRequest_FieldTerminalPath); ok {
				for _, subpath := range notification_channel.FullNotificationChannel_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateNotificationChannelRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateNotificationChannelRequest_FieldSubPath); ok {
				selectedMask := &notification_channel.NotificationChannel_FieldMask{
					Paths: []notification_channel.NotificationChannel_FieldPath{sub.subPath.(notification_channel.NotificationChannel_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateNotificationChannelRequest_FieldSubPath{selector: CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateNotificationChannelRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateNotificationChannelRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateNotificationChannelRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateNotificationChannelRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateNotificationChannelRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) AppendPath(path CreateNotificationChannelRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateNotificationChannelRequest_FieldPath))
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) GetPaths() []CreateNotificationChannelRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateNotificationChannelRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) Set(target, source *CreateNotificationChannelRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateNotificationChannelRequest), source.(*CreateNotificationChannelRequest))
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) Project(source *CreateNotificationChannelRequest) *CreateNotificationChannelRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateNotificationChannelRequest{}
	notificationChannelMask := &notification_channel.NotificationChannel_FieldMask{}
	wholeNotificationChannelAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateNotificationChannelRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateNotificationChannelRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
				result.NotificationChannel = source.NotificationChannel
				wholeNotificationChannelAccepted = true
			}
		case *CreateNotificationChannelRequest_FieldSubPath:
			switch tp.selector {
			case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
				notificationChannelMask.AppendPath(tp.subPath.(notification_channel.NotificationChannel_FieldPath))
			}
		}
	}
	if wholeNotificationChannelAccepted == false && len(notificationChannelMask.Paths) > 0 {
		result.NotificationChannel = notificationChannelMask.Project(source.GetNotificationChannel())
	}
	return result
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateNotificationChannelRequest))
}

func (fieldMask *CreateNotificationChannelRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateNotificationChannelRequest_FieldMask struct {
	Paths []UpdateNotificationChannelRequest_FieldPath
}

func FullUpdateNotificationChannelRequest_FieldMask() *UpdateNotificationChannelRequest_FieldMask {
	res := &UpdateNotificationChannelRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel})
	res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateNotificationChannelRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateNotificationChannelRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateNotificationChannelRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateNotificationChannelRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) Subtract(other *UpdateNotificationChannelRequest_FieldMask) *UpdateNotificationChannelRequest_FieldMask {
	result := &UpdateNotificationChannelRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateNotificationChannelRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel: &notification_channel.NotificationChannel_FieldMask{},
		UpdateNotificationChannelRequest_FieldPathSelectorCas:                 &UpdateNotificationChannelRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateNotificationChannelRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel: &notification_channel.NotificationChannel_FieldMask{},
		UpdateNotificationChannelRequest_FieldPathSelectorCas:                 &UpdateNotificationChannelRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateNotificationChannelRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateNotificationChannelRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateNotificationChannelRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
						mySubMasks[UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel] = notification_channel.FullNotificationChannel_FieldMask()
					case UpdateNotificationChannelRequest_FieldPathSelectorCas:
						mySubMasks[UpdateNotificationChannelRequest_FieldPathSelectorCas] = FullUpdateNotificationChannelRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateNotificationChannelRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateNotificationChannelRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateNotificationChannelRequest_FieldMask) FilterInputFields() *UpdateNotificationChannelRequest_FieldMask {
	result := &UpdateNotificationChannelRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			if _, ok := path.(*UpdateNotificationChannelRequest_FieldTerminalPath); ok {
				for _, subpath := range notification_channel.FullNotificationChannel_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateNotificationChannelRequest_FieldSubPath); ok {
				selectedMask := &notification_channel.NotificationChannel_FieldMask{
					Paths: []notification_channel.NotificationChannel_FieldPath{sub.subPath.(notification_channel.NotificationChannel_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel, subPath: allowedPath})
				}
			}
		case UpdateNotificationChannelRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateNotificationChannelRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateNotificationChannelRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateNotificationChannelRequest_FieldSubPath); ok {
				selectedMask := &UpdateNotificationChannelRequest_CAS_FieldMask{
					Paths: []UpdateNotificationChannelRequestCAS_FieldPath{sub.subPath.(UpdateNotificationChannelRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateNotificationChannelRequest_FieldSubPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateNotificationChannelRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateNotificationChannelRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateNotificationChannelRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateNotificationChannelRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateNotificationChannelRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) AppendPath(path UpdateNotificationChannelRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateNotificationChannelRequest_FieldPath))
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) GetPaths() []UpdateNotificationChannelRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateNotificationChannelRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) Set(target, source *UpdateNotificationChannelRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateNotificationChannelRequest), source.(*UpdateNotificationChannelRequest))
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) Project(source *UpdateNotificationChannelRequest) *UpdateNotificationChannelRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateNotificationChannelRequest{}
	notificationChannelMask := &notification_channel.NotificationChannel_FieldMask{}
	wholeNotificationChannelAccepted := false
	casMask := &UpdateNotificationChannelRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateNotificationChannelRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
				result.NotificationChannel = source.NotificationChannel
				wholeNotificationChannelAccepted = true
			case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateNotificationChannelRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateNotificationChannelRequest_FieldSubPath:
			switch tp.selector {
			case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
				notificationChannelMask.AppendPath(tp.subPath.(notification_channel.NotificationChannel_FieldPath))
			case UpdateNotificationChannelRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateNotificationChannelRequestCAS_FieldPath))
			}
		}
	}
	if wholeNotificationChannelAccepted == false && len(notificationChannelMask.Paths) > 0 {
		result.NotificationChannel = notificationChannelMask.Project(source.GetNotificationChannel())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateNotificationChannelRequest))
}

func (fieldMask *UpdateNotificationChannelRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateNotificationChannelRequest_CAS_FieldMask struct {
	Paths []UpdateNotificationChannelRequestCAS_FieldPath
}

func FullUpdateNotificationChannelRequest_CAS_FieldMask() *UpdateNotificationChannelRequest_CAS_FieldMask {
	res := &UpdateNotificationChannelRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateNotificationChannelRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateNotificationChannelRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) Subtract(other *UpdateNotificationChannelRequest_CAS_FieldMask) *UpdateNotificationChannelRequest_CAS_FieldMask {
	result := &UpdateNotificationChannelRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateNotificationChannelRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState: &notification_channel.NotificationChannel_FieldMask{},
	}
	mySubMasks := map[UpdateNotificationChannelRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState: &notification_channel.NotificationChannel_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateNotificationChannelRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateNotificationChannelRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateNotificationChannelRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState] = notification_channel.FullNotificationChannel_FieldMask()
					}
				} else if tp, ok := path.(*UpdateNotificationChannelRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateNotificationChannelRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateNotificationChannelRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) FilterInputFields() *UpdateNotificationChannelRequest_CAS_FieldMask {
	result := &UpdateNotificationChannelRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateNotificationChannelRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range notification_channel.FullNotificationChannel_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateNotificationChannelRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateNotificationChannelRequestCAS_FieldSubPath); ok {
				selectedMask := &notification_channel.NotificationChannel_FieldMask{
					Paths: []notification_channel.NotificationChannel_FieldPath{sub.subPath.(notification_channel.NotificationChannel_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateNotificationChannelRequestCAS_FieldSubPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateNotificationChannelRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateNotificationChannelRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateNotificationChannelRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) AppendPath(path UpdateNotificationChannelRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateNotificationChannelRequestCAS_FieldPath))
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) GetPaths() []UpdateNotificationChannelRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) Set(target, source *UpdateNotificationChannelRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateNotificationChannelRequest_CAS), source.(*UpdateNotificationChannelRequest_CAS))
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) Project(source *UpdateNotificationChannelRequest_CAS) *UpdateNotificationChannelRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateNotificationChannelRequest_CAS{}
	conditionalStateMask := &notification_channel.NotificationChannel_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateNotificationChannelRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateNotificationChannelRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(notification_channel.NotificationChannel_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateNotificationChannelRequest_CAS))
}

func (fieldMask *UpdateNotificationChannelRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteNotificationChannelRequest_FieldMask struct {
	Paths []DeleteNotificationChannelRequest_FieldPath
}

func FullDeleteNotificationChannelRequest_FieldMask() *DeleteNotificationChannelRequest_FieldMask {
	res := &DeleteNotificationChannelRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteNotificationChannelRequest_FieldTerminalPath{selector: DeleteNotificationChannelRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteNotificationChannelRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteNotificationChannelRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteNotificationChannelRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteNotificationChannelRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) Subtract(other *DeleteNotificationChannelRequest_FieldMask) *DeleteNotificationChannelRequest_FieldMask {
	result := &DeleteNotificationChannelRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteNotificationChannelRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteNotificationChannelRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteNotificationChannelRequest_FieldMask) FilterInputFields() *DeleteNotificationChannelRequest_FieldMask {
	result := &DeleteNotificationChannelRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteNotificationChannelRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteNotificationChannelRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteNotificationChannelRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteNotificationChannelRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteNotificationChannelRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) AppendPath(path DeleteNotificationChannelRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteNotificationChannelRequest_FieldPath))
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) GetPaths() []DeleteNotificationChannelRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteNotificationChannelRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) Set(target, source *DeleteNotificationChannelRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteNotificationChannelRequest), source.(*DeleteNotificationChannelRequest))
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) Project(source *DeleteNotificationChannelRequest) *DeleteNotificationChannelRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteNotificationChannelRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteNotificationChannelRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteNotificationChannelRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteNotificationChannelRequest))
}

func (fieldMask *DeleteNotificationChannelRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
