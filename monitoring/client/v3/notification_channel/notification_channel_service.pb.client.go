// Code generated by protoc-gen-goten-client
// API: NotificationChannelService
// DO NOT EDIT!!!

package notification_channel_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &notification_channel.NotificationChannel{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificationChannelServiceClient is the client API for NotificationChannelService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationChannelServiceClient interface {
	GetNotificationChannel(ctx context.Context, in *GetNotificationChannelRequest, opts ...grpc.CallOption) (*notification_channel.NotificationChannel, error)
	BatchGetNotificationChannels(ctx context.Context, in *BatchGetNotificationChannelsRequest, opts ...grpc.CallOption) (*BatchGetNotificationChannelsResponse, error)
	ListNotificationChannels(ctx context.Context, in *ListNotificationChannelsRequest, opts ...grpc.CallOption) (*ListNotificationChannelsResponse, error)
	WatchNotificationChannel(ctx context.Context, in *WatchNotificationChannelRequest, opts ...grpc.CallOption) (WatchNotificationChannelClientStream, error)
	WatchNotificationChannels(ctx context.Context, in *WatchNotificationChannelsRequest, opts ...grpc.CallOption) (WatchNotificationChannelsClientStream, error)
	CreateNotificationChannel(ctx context.Context, in *CreateNotificationChannelRequest, opts ...grpc.CallOption) (*notification_channel.NotificationChannel, error)
	UpdateNotificationChannel(ctx context.Context, in *UpdateNotificationChannelRequest, opts ...grpc.CallOption) (*notification_channel.NotificationChannel, error)
	DeleteNotificationChannel(ctx context.Context, in *DeleteNotificationChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	TestNotificationChannel(ctx context.Context, in *TestNotificationChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewNotificationChannelServiceClient(cc grpc.ClientConnInterface) NotificationChannelServiceClient {
	return &client{cc}
}

func (c *client) GetNotificationChannel(ctx context.Context, in *GetNotificationChannelRequest, opts ...grpc.CallOption) (*notification_channel.NotificationChannel, error) {
	out := new(notification_channel.NotificationChannel)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/GetNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetNotificationChannels(ctx context.Context, in *BatchGetNotificationChannelsRequest, opts ...grpc.CallOption) (*BatchGetNotificationChannelsResponse, error) {
	out := new(BatchGetNotificationChannelsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/BatchGetNotificationChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListNotificationChannels(ctx context.Context, in *ListNotificationChannelsRequest, opts ...grpc.CallOption) (*ListNotificationChannelsResponse, error) {
	out := new(ListNotificationChannelsResponse)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/ListNotificationChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchNotificationChannel(ctx context.Context, in *WatchNotificationChannelRequest, opts ...grpc.CallOption) (WatchNotificationChannelClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchNotificationChannel",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.NotificationChannelService/WatchNotificationChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchNotificationChannelWatchNotificationChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchNotificationChannelClientStream interface {
	Recv() (*WatchNotificationChannelResponse, error)
	grpc.ClientStream
}

type watchNotificationChannelWatchNotificationChannelClient struct {
	grpc.ClientStream
}

func (x *watchNotificationChannelWatchNotificationChannelClient) Recv() (*WatchNotificationChannelResponse, error) {
	m := new(WatchNotificationChannelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchNotificationChannels(ctx context.Context, in *WatchNotificationChannelsRequest, opts ...grpc.CallOption) (WatchNotificationChannelsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchNotificationChannels",
			ServerStreams: true,
		},
		"/ntt.monitoring.v3.NotificationChannelService/WatchNotificationChannels", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchNotificationChannelsWatchNotificationChannelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchNotificationChannelsClientStream interface {
	Recv() (*WatchNotificationChannelsResponse, error)
	grpc.ClientStream
}

type watchNotificationChannelsWatchNotificationChannelsClient struct {
	grpc.ClientStream
}

func (x *watchNotificationChannelsWatchNotificationChannelsClient) Recv() (*WatchNotificationChannelsResponse, error) {
	m := new(WatchNotificationChannelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateNotificationChannel(ctx context.Context, in *CreateNotificationChannelRequest, opts ...grpc.CallOption) (*notification_channel.NotificationChannel, error) {
	out := new(notification_channel.NotificationChannel)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/CreateNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateNotificationChannel(ctx context.Context, in *UpdateNotificationChannelRequest, opts ...grpc.CallOption) (*notification_channel.NotificationChannel, error) {
	out := new(notification_channel.NotificationChannel)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/UpdateNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteNotificationChannel(ctx context.Context, in *DeleteNotificationChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/DeleteNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) TestNotificationChannel(ctx context.Context, in *TestNotificationChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.monitoring.v3.NotificationChannelService/TestNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
